Search.setIndex({"docnames": ["_autosummary/pybrops", "_autosummary/pybrops.breed", "_autosummary/pybrops.breed.arch", "_autosummary/pybrops.breed.arch.BreedingEdge", "_autosummary/pybrops.breed.arch.BreedingEdge.BreedingEdge", "_autosummary/pybrops.breed.arch.BreedingEdge.check_is_BreedingEdge", "_autosummary/pybrops.breed.arch.BreedingGraph", "_autosummary/pybrops.breed.arch.BreedingGraph.BreedingGraph", "_autosummary/pybrops.breed.arch.BreedingGraph.check_is_BreedingGraph", "_autosummary/pybrops.breed.arch.BreedingNode", "_autosummary/pybrops.breed.arch.BreedingNode.BreedingNode", "_autosummary/pybrops.breed.arch.BreedingNode.check_is_BreedingNode", "_autosummary/pybrops.breed.arch.BreedingProgram", "_autosummary/pybrops.breed.arch.BreedingProgram.BreedingProgram", "_autosummary/pybrops.breed.arch.BreedingProgram.check_is_BreedingProgram", "_autosummary/pybrops.breed.arch.EmigrationOperator", "_autosummary/pybrops.breed.arch.EmigrationOperator.EmigrationOperator", "_autosummary/pybrops.breed.arch.EmigrationOperator.check_is_EmigrationOperator", "_autosummary/pybrops.breed.arch.GermplasmBank", "_autosummary/pybrops.breed.arch.GermplasmBank.GermplasmBank", "_autosummary/pybrops.breed.arch.GermplasmBank.check_is_GermplasmBank", "_autosummary/pybrops.breed.arch.ImmigrationOperator", "_autosummary/pybrops.breed.arch.ImmigrationOperator.ImmigrationOperator", "_autosummary/pybrops.breed.arch.ImmigrationOperator.check_is_ImmigrationOperator", "_autosummary/pybrops.breed.arch.RecurrentSelectionBreedingProgram", "_autosummary/pybrops.breed.arch.RecurrentSelectionBreedingProgram.RecurrentSelectionBreedingProgram", "_autosummary/pybrops.breed.arch.RecurrentSelectionBreedingProgram.check_is_RecurrentSelectionBreedingProgram", "_autosummary/pybrops.breed.op", "_autosummary/pybrops.breed.op.eval", "_autosummary/pybrops.breed.op.eval.EvaluationOperator", "_autosummary/pybrops.breed.op.eval.EvaluationOperator.EvaluationOperator", "_autosummary/pybrops.breed.op.eval.EvaluationOperator.check_is_EvaluationOperator", "_autosummary/pybrops.breed.op.init", "_autosummary/pybrops.breed.op.init.InitializationOperator", "_autosummary/pybrops.breed.op.init.InitializationOperator.InitializationOperator", "_autosummary/pybrops.breed.op.init.InitializationOperator.check_is_InitializationOperator", "_autosummary/pybrops.breed.op.log", "_autosummary/pybrops.breed.op.log.Logbook", "_autosummary/pybrops.breed.op.log.Logbook.Logbook", "_autosummary/pybrops.breed.op.log.Logbook.check_is_Logbook", "_autosummary/pybrops.breed.op.mate", "_autosummary/pybrops.breed.op.mate.MatingOperator", "_autosummary/pybrops.breed.op.mate.MatingOperator.MatingOperator", "_autosummary/pybrops.breed.op.mate.MatingOperator.check_is_MatingOperator", "_autosummary/pybrops.breed.op.psel", "_autosummary/pybrops.breed.op.psel.ParentSelectionOperator", "_autosummary/pybrops.breed.op.psel.ParentSelectionOperator.ParentSelectionOperator", "_autosummary/pybrops.breed.op.psel.ParentSelectionOperator.check_is_ParentSelectionOperator", "_autosummary/pybrops.breed.op.ssel", "_autosummary/pybrops.breed.op.ssel.SurvivorSelectionOperator", "_autosummary/pybrops.breed.op.ssel.SurvivorSelectionOperator.SurvivorSelectionOperator", "_autosummary/pybrops.breed.op.ssel.SurvivorSelectionOperator.check_is_SurvivorSelectionOperator", "_autosummary/pybrops.breed.prot", "_autosummary/pybrops.breed.prot.bv", "_autosummary/pybrops.breed.prot.bv.BreedingValueProtocol", "_autosummary/pybrops.breed.prot.bv.BreedingValueProtocol.BreedingValueProtocol", "_autosummary/pybrops.breed.prot.bv.BreedingValueProtocol.check_is_BreedingValueProtocol", "_autosummary/pybrops.breed.prot.bv.MeanPhenotypicBreedingValue", "_autosummary/pybrops.breed.prot.bv.MeanPhenotypicBreedingValue.MeanPhenotypicBreedingValue", "_autosummary/pybrops.breed.prot.bv.TrueBreedingValue", "_autosummary/pybrops.breed.prot.bv.TrueBreedingValue.TrueBreedingValue", "_autosummary/pybrops.breed.prot.gt", "_autosummary/pybrops.breed.prot.gt.DenseUnphasedGenotyping", "_autosummary/pybrops.breed.prot.gt.DenseUnphasedGenotyping.DenseUnphasedGenotyping", "_autosummary/pybrops.breed.prot.gt.GenotypingProtocol", "_autosummary/pybrops.breed.prot.gt.GenotypingProtocol.GenotypingProtocol", "_autosummary/pybrops.breed.prot.gt.GenotypingProtocol.check_is_GenotypingProtocol", "_autosummary/pybrops.breed.prot.mate", "_autosummary/pybrops.breed.prot.mate.FourWayCross", "_autosummary/pybrops.breed.prot.mate.FourWayCross.FourWayCross", "_autosummary/pybrops.breed.prot.mate.FourWayCross.check_is_FourWayCross", "_autosummary/pybrops.breed.prot.mate.FourWayDHCross", "_autosummary/pybrops.breed.prot.mate.FourWayDHCross.FourWayDHCross", "_autosummary/pybrops.breed.prot.mate.FourWayDHCross.check_is_FourWayDHCross", "_autosummary/pybrops.breed.prot.mate.MatingProtocol", "_autosummary/pybrops.breed.prot.mate.MatingProtocol.MatingProtocol", "_autosummary/pybrops.breed.prot.mate.MatingProtocol.check_is_MatingProtocol", "_autosummary/pybrops.breed.prot.mate.SelfCross", "_autosummary/pybrops.breed.prot.mate.SelfCross.SelfCross", "_autosummary/pybrops.breed.prot.mate.SelfCross.check_is_SelfCross", "_autosummary/pybrops.breed.prot.mate.ThreeWayCross", "_autosummary/pybrops.breed.prot.mate.ThreeWayCross.ThreeWayCross", "_autosummary/pybrops.breed.prot.mate.ThreeWayCross.check_is_ThreeWayCross", "_autosummary/pybrops.breed.prot.mate.ThreeWayDHCross", "_autosummary/pybrops.breed.prot.mate.ThreeWayDHCross.ThreeWayDHCross", "_autosummary/pybrops.breed.prot.mate.ThreeWayDHCross.check_is_ThreeWayDHCross", "_autosummary/pybrops.breed.prot.mate.TwoWayCross", "_autosummary/pybrops.breed.prot.mate.TwoWayCross.TwoWayCross", "_autosummary/pybrops.breed.prot.mate.TwoWayCross.check_is_TwoWayCross", "_autosummary/pybrops.breed.prot.mate.TwoWayDHCross", "_autosummary/pybrops.breed.prot.mate.TwoWayDHCross.TwoWayDHCross", "_autosummary/pybrops.breed.prot.mate.TwoWayDHCross.check_is_TwoWayDHCross", "_autosummary/pybrops.breed.prot.mate.util", "_autosummary/pybrops.breed.prot.mate.util.mat_dh", "_autosummary/pybrops.breed.prot.mate.util.mat_mate", "_autosummary/pybrops.breed.prot.mate.util.mat_meiosis", "_autosummary/pybrops.breed.prot.pt", "_autosummary/pybrops.breed.prot.pt.G_E_Phenotyping", "_autosummary/pybrops.breed.prot.pt.G_E_Phenotyping.G_E_Phenotyping", "_autosummary/pybrops.breed.prot.pt.PhenotypingProtocol", "_autosummary/pybrops.breed.prot.pt.PhenotypingProtocol.PhenotypingProtocol", "_autosummary/pybrops.breed.prot.pt.PhenotypingProtocol.check_is_PhenotypingProtocol", "_autosummary/pybrops.breed.prot.pt.TruePhenotyping", "_autosummary/pybrops.breed.prot.pt.TruePhenotyping.TruePhenotyping", "_autosummary/pybrops.breed.prot.sel", "_autosummary/pybrops.breed.prot.sel.BinaryMateSelectionProtocol", "_autosummary/pybrops.breed.prot.sel.BinaryMateSelectionProtocol.BinaryMateSelectionProtocol", "_autosummary/pybrops.breed.prot.sel.BinaryMateSelectionProtocol.check_is_BinaryMateSelectionProtocol", "_autosummary/pybrops.breed.prot.sel.BinarySelectionProtocol", "_autosummary/pybrops.breed.prot.sel.BinarySelectionProtocol.BinarySelectionProtocol", "_autosummary/pybrops.breed.prot.sel.BinarySelectionProtocol.check_is_BinarySelectionProtocol", "_autosummary/pybrops.breed.prot.sel.EstimatedBreedingValueSelection", "_autosummary/pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueBinarySelection", "_autosummary/pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueIntegerSelection", "_autosummary/pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueRealSelection", "_autosummary/pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueSelectionMixin", "_autosummary/pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueSubsetSelection", "_autosummary/pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection", "_autosummary/pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueBinarySelection", "_autosummary/pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueIntegerSelection", "_autosummary/pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueRealSelection", "_autosummary/pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueSelectionMixin", "_autosummary/pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueSubsetSelection", "_autosummary/pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection", "_autosummary/pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueBinarySelection", "_autosummary/pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueIntegerSelection", "_autosummary/pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueRealSelection", "_autosummary/pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueSelectionMixin", "_autosummary/pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueSubsetSelection", "_autosummary/pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection", "_autosummary/pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueBinarySelection", "_autosummary/pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueIntegerSelection", "_autosummary/pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueRealSelection", "_autosummary/pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionMixin", "_autosummary/pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueSubsetSelection", "_autosummary/pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection", "_autosummary/pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueBinarySelection", "_autosummary/pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueIntegerSelection", "_autosummary/pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueRealSelection", "_autosummary/pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueSelectionMixin", "_autosummary/pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueSubsetSelection", "_autosummary/pybrops.breed.prot.sel.GenotypeBuilderSelection", "_autosummary/pybrops.breed.prot.sel.GenotypeBuilderSelection.GenotypeBuilderSelectionMixin", "_autosummary/pybrops.breed.prot.sel.GenotypeBuilderSelection.GenotypeBuilderSubsetSelection", "_autosummary/pybrops.breed.prot.sel.IntegerMateSelectionProtocol", "_autosummary/pybrops.breed.prot.sel.IntegerMateSelectionProtocol.IntegerMateSelectionProtocol", "_autosummary/pybrops.breed.prot.sel.IntegerMateSelectionProtocol.check_is_IntegerMateSelectionProtocol", "_autosummary/pybrops.breed.prot.sel.IntegerSelectionProtocol", "_autosummary/pybrops.breed.prot.sel.IntegerSelectionProtocol.IntegerSelectionProtocol", "_autosummary/pybrops.breed.prot.sel.IntegerSelectionProtocol.check_is_IntegerSelectionProtocol", "_autosummary/pybrops.breed.prot.sel.L1NormGenomicSelection", "_autosummary/pybrops.breed.prot.sel.L2NormGenomicSelection", "_autosummary/pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicBinarySelection", "_autosummary/pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicIntegerSelection", "_autosummary/pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicRealSelection", "_autosummary/pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicSelectionMixin", "_autosummary/pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicSubsetSelection", "_autosummary/pybrops.breed.prot.sel.MateSelectionProtocol", "_autosummary/pybrops.breed.prot.sel.MateSelectionProtocol.MateSelectionProtocol", "_autosummary/pybrops.breed.prot.sel.MateSelectionProtocol.check_is_MateSelectionProtocol", "_autosummary/pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection", "_autosummary/pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection.MeanExpectedHeterozygosityBinarySelection", "_autosummary/pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection.MeanExpectedHeterozygosityIntegerSelection", "_autosummary/pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection.MeanExpectedHeterozygosityRealSelection", "_autosummary/pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection.MeanExpectedHeterozygositySelectionMixin", "_autosummary/pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection.MeanExpectedHeterozygositySubsetSelection", "_autosummary/pybrops.breed.prot.sel.MeanGenomicRelationshipSelection", "_autosummary/pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipBinarySelection", "_autosummary/pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipIntegerSelection", "_autosummary/pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipRealSelection", "_autosummary/pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipSelectionMixin", "_autosummary/pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipSubsetSelection", "_autosummary/pybrops.breed.prot.sel.MultiObjectiveGenomicSelection", "_autosummary/pybrops.breed.prot.sel.MultiObjectiveGenomicSelection.MultiObjectiveGenomicSelectionMixin", "_autosummary/pybrops.breed.prot.sel.MultiObjectiveGenomicSelection.MultiObjectiveGenomicSubsetSelection", "_autosummary/pybrops.breed.prot.sel.OptimalContributionSelection", "_autosummary/pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionBinarySelection", "_autosummary/pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionIntegerSelection", "_autosummary/pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionRealSelection", "_autosummary/pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionSelectionMixin", "_autosummary/pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionSubsetSelection", "_autosummary/pybrops.breed.prot.sel.OptimalHaploidValueSelection", "_autosummary/pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueBinarySelection", "_autosummary/pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueIntegerSelection", "_autosummary/pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueRealSelection", "_autosummary/pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueSelectionMixin", "_autosummary/pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueSubsetSelection", "_autosummary/pybrops.breed.prot.sel.OptimalPopulationValueSelection", "_autosummary/pybrops.breed.prot.sel.OptimalPopulationValueSelection.OptimalPopulationValueSelectionMixin", "_autosummary/pybrops.breed.prot.sel.OptimalPopulationValueSelection.OptimalPopulationValueSubsetSelection", "_autosummary/pybrops.breed.prot.sel.RandomSelection", "_autosummary/pybrops.breed.prot.sel.RandomSelection.RandomBinarySelection", "_autosummary/pybrops.breed.prot.sel.RandomSelection.RandomIntegerSelection", "_autosummary/pybrops.breed.prot.sel.RandomSelection.RandomRealSelection", "_autosummary/pybrops.breed.prot.sel.RandomSelection.RandomSelectionMixin", "_autosummary/pybrops.breed.prot.sel.RandomSelection.RandomSubsetSelection", "_autosummary/pybrops.breed.prot.sel.RealMateSelectionProtocol", "_autosummary/pybrops.breed.prot.sel.RealMateSelectionProtocol.RealMateSelectionProtocol", "_autosummary/pybrops.breed.prot.sel.RealMateSelectionProtocol.check_is_RealMateSelectionProtocol", "_autosummary/pybrops.breed.prot.sel.RealSelectionProtocol", "_autosummary/pybrops.breed.prot.sel.RealSelectionProtocol.RealSelectionProtocol", "_autosummary/pybrops.breed.prot.sel.RealSelectionProtocol.check_is_RealSelectionProtocol", "_autosummary/pybrops.breed.prot.sel.SelectionProtocol", "_autosummary/pybrops.breed.prot.sel.SelectionProtocol.SelectionProtocol", "_autosummary/pybrops.breed.prot.sel.SelectionProtocol.check_is_SelectionProtocol", "_autosummary/pybrops.breed.prot.sel.SubsetMateSelectionProtocol", "_autosummary/pybrops.breed.prot.sel.SubsetMateSelectionProtocol.SubsetMateSelectionProtocol", "_autosummary/pybrops.breed.prot.sel.SubsetMateSelectionProtocol.check_is_SubsetMateSelectionProtocol", "_autosummary/pybrops.breed.prot.sel.SubsetSelectionProtocol", "_autosummary/pybrops.breed.prot.sel.SubsetSelectionProtocol.SubsetSelectionProtocol", "_autosummary/pybrops.breed.prot.sel.SubsetSelectionProtocol.check_is_SubsetSelectionProtocol", "_autosummary/pybrops.breed.prot.sel.UnconstrainedGeneralized1NormGenomicSelection", "_autosummary/pybrops.breed.prot.sel.UnconstrainedGeneralized1NormGenomicSelection.Generalized1NormGenomicSelection", "_autosummary/pybrops.breed.prot.sel.UnconstrainedMultiObjectiveGenomicMating", "_autosummary/pybrops.breed.prot.sel.UnconstrainedMultiObjectiveGenomicMating.MultiObjectiveGenomicMating", "_autosummary/pybrops.breed.prot.sel.UnconstrainedPopulationAlleleFrequencyDistanceSelection", "_autosummary/pybrops.breed.prot.sel.UnconstrainedPopulationAlleleFrequencyDistanceSelection.PopulationAlleleFrequencyDistanceSelection", "_autosummary/pybrops.breed.prot.sel.UnconstrainedPopulationAlleleUnavailabilitySelection", "_autosummary/pybrops.breed.prot.sel.UnconstrainedPopulationAlleleUnavailabilitySelection.PopulationAlleleUnavailabilitySelection", "_autosummary/pybrops.breed.prot.sel.UnconstrainedSelectionProtocol", "_autosummary/pybrops.breed.prot.sel.UnconstrainedSelectionProtocol.UnconstrainedSelectionProtocol", "_autosummary/pybrops.breed.prot.sel.UnconstrainedSelectionProtocol.check_is_SelectionProtocol", "_autosummary/pybrops.breed.prot.sel.UsefulnessCriterionSelection", "_autosummary/pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionBinarySelection", "_autosummary/pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionIntegerSelection", "_autosummary/pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionRealSelection", "_autosummary/pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionSelectionMixin", "_autosummary/pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionSubsetSelection", "_autosummary/pybrops.breed.prot.sel.WeightedGenomicSelection", "_autosummary/pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicBinarySelection", "_autosummary/pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicIntegerSelection", "_autosummary/pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicRealSelection", "_autosummary/pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicSubsetSelection", "_autosummary/pybrops.breed.prot.sel.cfg", "_autosummary/pybrops.breed.prot.sel.cfg.BinaryMateSelectionConfiguration", "_autosummary/pybrops.breed.prot.sel.cfg.BinaryMateSelectionConfiguration.BinaryMateSelectionConfiguration", "_autosummary/pybrops.breed.prot.sel.cfg.BinarySelectionConfiguration", "_autosummary/pybrops.breed.prot.sel.cfg.BinarySelectionConfiguration.BinarySelectionConfiguration", "_autosummary/pybrops.breed.prot.sel.cfg.IntegerMateSelectionConfiguration", "_autosummary/pybrops.breed.prot.sel.cfg.IntegerMateSelectionConfiguration.IntegerMateSelectionConfiguration", "_autosummary/pybrops.breed.prot.sel.cfg.IntegerSelectionConfiguration", "_autosummary/pybrops.breed.prot.sel.cfg.IntegerSelectionConfiguration.IntegerSelectionConfiguration", "_autosummary/pybrops.breed.prot.sel.cfg.MateSelectionConfiguration", "_autosummary/pybrops.breed.prot.sel.cfg.MateSelectionConfiguration.MateSelectionConfiguration", "_autosummary/pybrops.breed.prot.sel.cfg.MateSelectionConfiguration.check_is_MateSelectionConfiguration", "_autosummary/pybrops.breed.prot.sel.cfg.RealMateSelectionConfiguration", "_autosummary/pybrops.breed.prot.sel.cfg.RealMateSelectionConfiguration.RealMateSelectionConfiguration", "_autosummary/pybrops.breed.prot.sel.cfg.RealSelectionConfiguration", "_autosummary/pybrops.breed.prot.sel.cfg.RealSelectionConfiguration.RealSelectionConfiguration", "_autosummary/pybrops.breed.prot.sel.cfg.SampledSelectionConfigurationMixin", "_autosummary/pybrops.breed.prot.sel.cfg.SampledSelectionConfigurationMixin.SampledSelectionConfigurationMixin", "_autosummary/pybrops.breed.prot.sel.cfg.SelectionConfiguration", "_autosummary/pybrops.breed.prot.sel.cfg.SelectionConfiguration.SelectionConfiguration", "_autosummary/pybrops.breed.prot.sel.cfg.SelectionConfiguration.check_is_SelectionConfiguration", "_autosummary/pybrops.breed.prot.sel.cfg.SimpleMateSelectionConfiguration", "_autosummary/pybrops.breed.prot.sel.cfg.SimpleMateSelectionConfiguration.SimpleMateSelectionConfiguration", "_autosummary/pybrops.breed.prot.sel.cfg.SimpleSelectionConfiguration", "_autosummary/pybrops.breed.prot.sel.cfg.SimpleSelectionConfiguration.SimpleSelectionConfiguration", "_autosummary/pybrops.breed.prot.sel.cfg.SubsetMateSelectionConfiguration", "_autosummary/pybrops.breed.prot.sel.cfg.SubsetMateSelectionConfiguration.SubsetMateSelectionConfiguration", "_autosummary/pybrops.breed.prot.sel.cfg.SubsetSelectionConfiguration", "_autosummary/pybrops.breed.prot.sel.cfg.SubsetSelectionConfiguration.SubsetSelectionConfiguration", "_autosummary/pybrops.breed.prot.sel.prob", "_autosummary/pybrops.breed.prot.sel.prob.BinaryMateSelectionProblem", "_autosummary/pybrops.breed.prot.sel.prob.BinaryMateSelectionProblem.BinaryMateSelectionProblem", "_autosummary/pybrops.breed.prot.sel.prob.BinarySelectionProblem", "_autosummary/pybrops.breed.prot.sel.prob.BinarySelectionProblem.BinarySelectionProblem", "_autosummary/pybrops.breed.prot.sel.prob.BinarySelectionProblem.check_is_BinarySelectionProblem", "_autosummary/pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem", "_autosummary/pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueBinarySelectionProblem", "_autosummary/pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueIntegerSelectionProblem", "_autosummary/pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueRealSelectionProblem", "_autosummary/pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueSelectionProblemMixin", "_autosummary/pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueSubsetSelectionProblem", "_autosummary/pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem", "_autosummary/pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueBinarySelectionProblem", "_autosummary/pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueIntegerSelectionProblem", "_autosummary/pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueRealSelectionProblem", "_autosummary/pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueSelectionProblemMixin", "_autosummary/pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueSubsetSelectionProblem", "_autosummary/pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem", "_autosummary/pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueBinarySelectionProblem", "_autosummary/pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueIntegerSelectionProblem", "_autosummary/pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueRealSelectionProblem", "_autosummary/pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueSelectionProblemMixin", "_autosummary/pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueSubsetSelectionProblem", "_autosummary/pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem", "_autosummary/pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueBinarySelectionProblem", "_autosummary/pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueIntegerSelectionProblem", "_autosummary/pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueRealSelectionProblem", "_autosummary/pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblemMixin", "_autosummary/pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueSubsetSelectionProblem", "_autosummary/pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem", "_autosummary/pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueBinarySelectionProblem", "_autosummary/pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueIntegerSelectionProblem", "_autosummary/pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueRealSelectionProblem", "_autosummary/pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueSelectionProblemMixin", "_autosummary/pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueSubsetSelectionProblem", "_autosummary/pybrops.breed.prot.sel.prob.GenotypeBuilderSelectionProblem", "_autosummary/pybrops.breed.prot.sel.prob.GenotypeBuilderSelectionProblem.GenotypeBuilderSelectionProblemMixin", "_autosummary/pybrops.breed.prot.sel.prob.GenotypeBuilderSelectionProblem.GenotypeBuilderSubsetSelectionProblem", "_autosummary/pybrops.breed.prot.sel.prob.IntegerMateSelectionProblem", "_autosummary/pybrops.breed.prot.sel.prob.IntegerMateSelectionProblem.IntegerMateSelectionProblem", "_autosummary/pybrops.breed.prot.sel.prob.IntegerSelectionProblem", "_autosummary/pybrops.breed.prot.sel.prob.IntegerSelectionProblem.IntegerSelectionProblem", "_autosummary/pybrops.breed.prot.sel.prob.IntegerSelectionProblem.check_is_IntegerSelectionProblem", "_autosummary/pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem", "_autosummary/pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicBinarySelectionProblem", "_autosummary/pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicIntegerSelectionProblem", "_autosummary/pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicRealSelectionProblem", "_autosummary/pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicSelectionProblemMixin", "_autosummary/pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicSubsetSelectionProblem", "_autosummary/pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem", "_autosummary/pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicBinarySelectionProblem", "_autosummary/pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicIntegerSelectionProblem", "_autosummary/pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicRealSelectionProblem", "_autosummary/pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicSelectionProblemMixin", "_autosummary/pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicSubsetSelectionProblem", "_autosummary/pybrops.breed.prot.sel.prob.MateSelectionProblem", "_autosummary/pybrops.breed.prot.sel.prob.MateSelectionProblem.MateSelectionProblem", "_autosummary/pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem", "_autosummary/pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygosityBinarySelectionProblem", "_autosummary/pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygosityIntegerSelectionProblem", "_autosummary/pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygosityRealSelectionProblem", "_autosummary/pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygositySelectionProblemMixin", "_autosummary/pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygositySubsetSelectionProblem", "_autosummary/pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem", "_autosummary/pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipBinarySelectionProblem", "_autosummary/pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipIntegerSelectionProblem", "_autosummary/pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipRealSelectionProblem", "_autosummary/pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipSelectionProblemMixin", "_autosummary/pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipSubsetSelectionProblem", "_autosummary/pybrops.breed.prot.sel.prob.MultiObjectiveGenomicMatingProblem", "_autosummary/pybrops.breed.prot.sel.prob.MultiObjectiveGenomicMatingProblem.MultiObjectiveGenomicMatingProblemMixin", "_autosummary/pybrops.breed.prot.sel.prob.MultiObjectiveGenomicMatingProblem.MultiObjectiveGenomicSubsetMatingProblem", "_autosummary/pybrops.breed.prot.sel.prob.MultiObjectiveGenomicSelectionProblem", "_autosummary/pybrops.breed.prot.sel.prob.MultiObjectiveGenomicSelectionProblem.MultiObjectiveGenomicSelectionProblemMixin", "_autosummary/pybrops.breed.prot.sel.prob.MultiObjectiveGenomicSelectionProblem.MultiObjectiveGenomicSubsetSelectionProblem", "_autosummary/pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem", "_autosummary/pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionBinarySelectionProblem", "_autosummary/pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionIntegerSelectionProblem", "_autosummary/pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionRealSelectionProblem", "_autosummary/pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionSelectionProblemMixin", "_autosummary/pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionSubsetSelectionProblem", "_autosummary/pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem", "_autosummary/pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueBinarySelectionProblem", "_autosummary/pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueIntegerSelectionProblem", "_autosummary/pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueRealSelectionProblem", "_autosummary/pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueSelectionProblemMixin", "_autosummary/pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueSubsetSelectionProblem", "_autosummary/pybrops.breed.prot.sel.prob.OptimalPopulationValueSelectionProblem", "_autosummary/pybrops.breed.prot.sel.prob.OptimalPopulationValueSelectionProblem.OptimalPopulationValueSelectionProblemMixin", "_autosummary/pybrops.breed.prot.sel.prob.OptimalPopulationValueSelectionProblem.OptimalPopulationValueSubsetSelectionProblem", "_autosummary/pybrops.breed.prot.sel.prob.RandomSelectionProblem", "_autosummary/pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomBinarySelectionProblem", "_autosummary/pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomIntegerSelectionProblem", "_autosummary/pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomRealSelectionProblem", "_autosummary/pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomSelectionProblemMixin", "_autosummary/pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomSubsetSelectionProblem", "_autosummary/pybrops.breed.prot.sel.prob.RealLookAheadGeneralizedWeightedGenomicSelectionProblem", "_autosummary/pybrops.breed.prot.sel.prob.RealLookAheadGeneralizedWeightedGenomicSelectionProblem.RealLookAheadGeneralizedWeightedGenomicSelectionProblem", "_autosummary/pybrops.breed.prot.sel.prob.RealMateSelectionProblem", "_autosummary/pybrops.breed.prot.sel.prob.RealMateSelectionProblem.RealMateSelectionProblem", "_autosummary/pybrops.breed.prot.sel.prob.RealSelectionProblem", "_autosummary/pybrops.breed.prot.sel.prob.RealSelectionProblem.RealSelectionProblem", "_autosummary/pybrops.breed.prot.sel.prob.RealSelectionProblem.check_is_RealSelectionProblem", "_autosummary/pybrops.breed.prot.sel.prob.SelectionProblem", "_autosummary/pybrops.breed.prot.sel.prob.SelectionProblem.SelectionProblem", "_autosummary/pybrops.breed.prot.sel.prob.SelectionProblem.check_is_SelectionProblem", "_autosummary/pybrops.breed.prot.sel.prob.SubsetMateSelectionProblem", "_autosummary/pybrops.breed.prot.sel.prob.SubsetMateSelectionProblem.SubsetMateSelectionProblem", "_autosummary/pybrops.breed.prot.sel.prob.SubsetSelectionProblem", "_autosummary/pybrops.breed.prot.sel.prob.SubsetSelectionProblem.SubsetSelectionProblem", "_autosummary/pybrops.breed.prot.sel.prob.SubsetSelectionProblem.check_is_SubsetSelectionProblem", "_autosummary/pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem", "_autosummary/pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionBinaryMateSelectionProblem", "_autosummary/pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionIntegerMateSelectionProblem", "_autosummary/pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionRealMateSelectionProblem", "_autosummary/pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionSelectionProblemMixin", "_autosummary/pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionSubsetMateSelectionProblem", "_autosummary/pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem", "_autosummary/pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicBinarySelectionProblem", "_autosummary/pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicIntegerSelectionProblem", "_autosummary/pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicRealSelectionProblem", "_autosummary/pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicSubsetSelectionProblem", "_autosummary/pybrops.breed.prot.sel.prob.trans", "_autosummary/pybrops.breed.prot.sel.prob.trans.trans_decnvec_sum_eq", "_autosummary/pybrops.breed.prot.sel.prob.trans.trans_dot", "_autosummary/pybrops.breed.prot.sel.prob.trans.trans_empty", "_autosummary/pybrops.breed.prot.sel.prob.trans.trans_identity", "_autosummary/pybrops.breed.prot.sel.prob.trans.trans_ndpt_to_vec_dist", "_autosummary/pybrops.breed.prot.sel.prob.trans.trans_sum", "_autosummary/pybrops.breed.prot.sel.soln", "_autosummary/pybrops.breed.prot.sel.soln.BinaryMateSelectionSolution", "_autosummary/pybrops.breed.prot.sel.soln.BinaryMateSelectionSolution.BinaryMateSelectionSolution", "_autosummary/pybrops.breed.prot.sel.soln.BinaryMateSelectionSolution.check_is_BinaryMateSelectionSolution", "_autosummary/pybrops.breed.prot.sel.soln.BinarySelectionSolution", "_autosummary/pybrops.breed.prot.sel.soln.BinarySelectionSolution.BinarySelectionSolution", "_autosummary/pybrops.breed.prot.sel.soln.BinarySelectionSolution.check_is_BinarySelectionSolution", "_autosummary/pybrops.breed.prot.sel.soln.IntegerMateSelectionSolution", "_autosummary/pybrops.breed.prot.sel.soln.IntegerMateSelectionSolution.IntegerMateSelectionSolution", "_autosummary/pybrops.breed.prot.sel.soln.IntegerMateSelectionSolution.check_is_IntegerMateSelectionSolution", "_autosummary/pybrops.breed.prot.sel.soln.IntegerSelectionSolution", "_autosummary/pybrops.breed.prot.sel.soln.IntegerSelectionSolution.IntegerSelectionSolution", "_autosummary/pybrops.breed.prot.sel.soln.IntegerSelectionSolution.check_is_IntegerSelectionSolution", "_autosummary/pybrops.breed.prot.sel.soln.MateSelectionSolution", "_autosummary/pybrops.breed.prot.sel.soln.MateSelectionSolution.MateSelectionSolution", "_autosummary/pybrops.breed.prot.sel.soln.MateSelectionSolution.check_is_MateSelectionSolution", "_autosummary/pybrops.breed.prot.sel.soln.RealMateSelectionSolution", "_autosummary/pybrops.breed.prot.sel.soln.RealMateSelectionSolution.RealMateSelectionSolution", "_autosummary/pybrops.breed.prot.sel.soln.RealMateSelectionSolution.check_is_RealMateSelectionSolution", "_autosummary/pybrops.breed.prot.sel.soln.RealSelectionSolution", "_autosummary/pybrops.breed.prot.sel.soln.RealSelectionSolution.RealSelectionSolution", "_autosummary/pybrops.breed.prot.sel.soln.RealSelectionSolution.check_is_RealSelectionSolution", "_autosummary/pybrops.breed.prot.sel.soln.SelectionSolution", "_autosummary/pybrops.breed.prot.sel.soln.SelectionSolution.SelectionSolution", "_autosummary/pybrops.breed.prot.sel.soln.SelectionSolution.check_is_SelectionSolution", "_autosummary/pybrops.breed.prot.sel.soln.SubsetMateSelectionSolution", "_autosummary/pybrops.breed.prot.sel.soln.SubsetMateSelectionSolution.SubsetMateSelectionSolution", "_autosummary/pybrops.breed.prot.sel.soln.SubsetMateSelectionSolution.check_is_SubsetMateSelectionSolution", "_autosummary/pybrops.breed.prot.sel.soln.SubsetSelectionSolution", "_autosummary/pybrops.breed.prot.sel.soln.SubsetSelectionSolution.SubsetSelectionSolution", "_autosummary/pybrops.breed.prot.sel.soln.SubsetSelectionSolution.check_is_SubsetSelectionSolution", "_autosummary/pybrops.breed.prot.sel.targetfn", "_autosummary/pybrops.breed.prot.sel.targetfn.target_negative", "_autosummary/pybrops.breed.prot.sel.targetfn.target_positive", "_autosummary/pybrops.breed.prot.sel.targetfn.target_stabilizing", "_autosummary/pybrops.breed.prot.sel.transfn", "_autosummary/pybrops.breed.prot.sel.transfn.trans_dot", "_autosummary/pybrops.breed.prot.sel.transfn.trans_flatten", "_autosummary/pybrops.breed.prot.sel.transfn.trans_identity_unconstrained", "_autosummary/pybrops.breed.prot.sel.transfn.trans_inbmax_penalty", "_autosummary/pybrops.breed.prot.sel.transfn.trans_max_inbreeding_constraint", "_autosummary/pybrops.breed.prot.sel.transfn.trans_ndpt_to_vec_dist", "_autosummary/pybrops.breed.prot.sel.transfn.trans_sum", "_autosummary/pybrops.breed.prot.sel.transfn.trans_sum_inbmax_penalty", "_autosummary/pybrops.breed.prot.sel.weightfn", "_autosummary/pybrops.breed.prot.sel.weightfn.weight_absolute", "_autosummary/pybrops.breed.prot.sel.weightfn.weight_one", "_autosummary/pybrops.core", "_autosummary/pybrops.core.error", "_autosummary/pybrops.core.error.error_attr_python", "_autosummary/pybrops.core.error.error_attr_python.check_is_callable", "_autosummary/pybrops.core.error.error_attr_python.check_is_iterable", "_autosummary/pybrops.core.error.error_attr_python.error_readonly", "_autosummary/pybrops.core.error.error_generic_numpy", "_autosummary/pybrops.core.error.error_generic_numpy.generic_check_ndarray_eq", "_autosummary/pybrops.core.error.error_generic_numpy.generic_check_ndarray_is_square", "_autosummary/pybrops.core.error.error_generic_numpy.generic_check_ndarray_ndim", "_autosummary/pybrops.core.error.error_generic_numpy.generic_check_ndarray_ndim_gteq", "_autosummary/pybrops.core.error.error_generic_numpy.generic_check_ndarray_shape", "_autosummary/pybrops.core.error.error_generic_numpy.generic_check_ndarray_size", "_autosummary/pybrops.core.error.error_generic_numpy.generic_check_ndarray_sum", "_autosummary/pybrops.core.error.error_generic_python", "_autosummary/pybrops.core.error.error_generic_python.generic_check_isinstance", "_autosummary/pybrops.core.error.error_io_python", "_autosummary/pybrops.core.error.error_io_python.check_directory_exists", "_autosummary/pybrops.core.error.error_io_python.check_file_exists", "_autosummary/pybrops.core.error.error_io_python.check_path_exists", "_autosummary/pybrops.core.error.error_type_h5py", "_autosummary/pybrops.core.error.error_type_h5py.check_is_h5py_File", "_autosummary/pybrops.core.error.error_type_numpy", "_autosummary/pybrops.core.error.error_type_numpy.check_is_Generator", "_autosummary/pybrops.core.error.error_type_numpy.check_is_Generator_or_RandomState", "_autosummary/pybrops.core.error.error_type_numpy.check_is_Integral_or_ndarray", "_autosummary/pybrops.core.error.error_type_numpy.check_is_Number_or_ndarray", "_autosummary/pybrops.core.error.error_type_numpy.check_is_RandomState", "_autosummary/pybrops.core.error.error_type_numpy.check_is_Real_or_ndarray", "_autosummary/pybrops.core.error.error_type_numpy.check_is_ndarray", "_autosummary/pybrops.core.error.error_type_numpy.check_is_str_or_ndarray", "_autosummary/pybrops.core.error.error_type_numpy.check_ndarray_dtype", "_autosummary/pybrops.core.error.error_type_numpy.check_ndarray_dtype_is_bool", "_autosummary/pybrops.core.error.error_type_numpy.check_ndarray_dtype_is_bool_or_integer", "_autosummary/pybrops.core.error.error_type_numpy.check_ndarray_dtype_is_bool_or_number", "_autosummary/pybrops.core.error.error_type_numpy.check_ndarray_dtype_is_float16", "_autosummary/pybrops.core.error.error_type_numpy.check_ndarray_dtype_is_float32", "_autosummary/pybrops.core.error.error_type_numpy.check_ndarray_dtype_is_float64", "_autosummary/pybrops.core.error.error_type_numpy.check_ndarray_dtype_is_floating", "_autosummary/pybrops.core.error.error_type_numpy.check_ndarray_dtype_is_int16", "_autosummary/pybrops.core.error.error_type_numpy.check_ndarray_dtype_is_int32", "_autosummary/pybrops.core.error.error_type_numpy.check_ndarray_dtype_is_int64", "_autosummary/pybrops.core.error.error_type_numpy.check_ndarray_dtype_is_int8", "_autosummary/pybrops.core.error.error_type_numpy.check_ndarray_dtype_is_integer", "_autosummary/pybrops.core.error.error_type_numpy.check_ndarray_dtype_is_integer_or_floating", "_autosummary/pybrops.core.error.error_type_numpy.check_ndarray_dtype_is_number", "_autosummary/pybrops.core.error.error_type_numpy.check_ndarray_dtype_is_object", "_autosummary/pybrops.core.error.error_type_numpy.check_ndarray_dtype_is_object_or_string", "_autosummary/pybrops.core.error.error_type_numpy.check_ndarray_dtype_is_real", "_autosummary/pybrops.core.error.error_type_numpy.check_ndarray_dtype_is_string", "_autosummary/pybrops.core.error.error_type_numpy.check_ndarray_dtype_is_unicode", "_autosummary/pybrops.core.error.error_type_pandas", "_autosummary/pybrops.core.error.error_type_pandas.check_Series_all_type", "_autosummary/pybrops.core.error.error_type_pandas.check_is_pandas_DataFrame", "_autosummary/pybrops.core.error.error_type_python", "_autosummary/pybrops.core.error.error_type_python.check_Sequence_all_type", "_autosummary/pybrops.core.error.error_type_python.check_inherits", "_autosummary/pybrops.core.error.error_type_python.check_is_Callable", "_autosummary/pybrops.core.error.error_type_python.check_is_Complex", "_autosummary/pybrops.core.error.error_type_python.check_is_Container", "_autosummary/pybrops.core.error.error_type_python.check_is_Integral", "_autosummary/pybrops.core.error.error_type_python.check_is_Integral_or_None", "_autosummary/pybrops.core.error.error_type_python.check_is_Integral_or_inf", "_autosummary/pybrops.core.error.error_type_python.check_is_Number", "_autosummary/pybrops.core.error.error_type_python.check_is_Real", "_autosummary/pybrops.core.error.error_type_python.check_is_Sequence", "_autosummary/pybrops.core.error.error_type_python.check_is_array_like", "_autosummary/pybrops.core.error.error_type_python.check_is_bool", "_autosummary/pybrops.core.error.error_type_python.check_is_bytes", "_autosummary/pybrops.core.error.error_type_python.check_is_class", "_autosummary/pybrops.core.error.error_type_python.check_is_dict", "_autosummary/pybrops.core.error.error_type_python.check_is_float", "_autosummary/pybrops.core.error.error_type_python.check_is_frozenset", "_autosummary/pybrops.core.error.error_type_python.check_is_int", "_autosummary/pybrops.core.error.error_type_python.check_is_int_or_None", "_autosummary/pybrops.core.error.error_type_python.check_is_int_or_inf", "_autosummary/pybrops.core.error.error_type_python.check_is_list", "_autosummary/pybrops.core.error.error_type_python.check_is_list_or_tuple", "_autosummary/pybrops.core.error.error_type_python.check_is_range", "_autosummary/pybrops.core.error.error_type_python.check_is_set", "_autosummary/pybrops.core.error.error_type_python.check_is_str", "_autosummary/pybrops.core.error.error_type_python.check_is_str_or_Integral", "_autosummary/pybrops.core.error.error_type_python.check_is_str_or_Sequence", "_autosummary/pybrops.core.error.error_type_python.check_is_str_or_iterable", "_autosummary/pybrops.core.error.error_type_python.check_is_tuple", "_autosummary/pybrops.core.error.error_type_python.check_is_type", "_autosummary/pybrops.core.error.error_type_python.check_isinstance", "_autosummary/pybrops.core.error.error_value_h5py", "_autosummary/pybrops.core.error.error_value_h5py.check_h5py_File_has_group", "_autosummary/pybrops.core.error.error_value_h5py.check_h5py_File_has_groups", "_autosummary/pybrops.core.error.error_value_h5py.check_h5py_File_is_writable", "_autosummary/pybrops.core.error.error_value_numpy", "_autosummary/pybrops.core.error.error_value_numpy.check_ndarray_all_gt", "_autosummary/pybrops.core.error.error_value_numpy.check_ndarray_all_gteq", "_autosummary/pybrops.core.error.error_value_numpy.check_ndarray_axis_len", "_autosummary/pybrops.core.error.error_value_numpy.check_ndarray_axis_len_eq", "_autosummary/pybrops.core.error.error_value_numpy.check_ndarray_axis_len_gt", "_autosummary/pybrops.core.error.error_value_numpy.check_ndarray_axis_len_gteq", "_autosummary/pybrops.core.error.error_value_numpy.check_ndarray_axis_len_lt", "_autosummary/pybrops.core.error.error_value_numpy.check_ndarray_axis_len_lteq", "_autosummary/pybrops.core.error.error_value_numpy.check_ndarray_eq", "_autosummary/pybrops.core.error.error_value_numpy.check_ndarray_has_value", "_autosummary/pybrops.core.error.error_value_numpy.check_ndarray_has_values", "_autosummary/pybrops.core.error.error_value_numpy.check_ndarray_in_interval", "_autosummary/pybrops.core.error.error_value_numpy.check_ndarray_is_binary", "_autosummary/pybrops.core.error.error_value_numpy.check_ndarray_is_hypercube", "_autosummary/pybrops.core.error.error_value_numpy.check_ndarray_is_square", "_autosummary/pybrops.core.error.error_value_numpy.check_ndarray_is_triu", "_autosummary/pybrops.core.error.error_value_numpy.check_ndarray_len_eq", "_autosummary/pybrops.core.error.error_value_numpy.check_ndarray_len_gteq", "_autosummary/pybrops.core.error.error_value_numpy.check_ndarray_len_is_multiple_of", "_autosummary/pybrops.core.error.error_value_numpy.check_ndarray_mean_is_approx", "_autosummary/pybrops.core.error.error_value_numpy.check_ndarray_ndim", "_autosummary/pybrops.core.error.error_value_numpy.check_ndarray_ndim_gteq", "_autosummary/pybrops.core.error.error_value_numpy.check_ndarray_shape_eq", "_autosummary/pybrops.core.error.error_value_numpy.check_ndarray_size", "_autosummary/pybrops.core.error.error_value_numpy.check_ndarray_std_is_approx", "_autosummary/pybrops.core.error.error_value_numpy.check_ndarray_sum", "_autosummary/pybrops.core.error.error_value_pandas", "_autosummary/pybrops.core.error.error_value_pandas.check_pandas_DataFrame_has_column", "_autosummary/pybrops.core.error.error_value_pandas.check_pandas_DataFrame_has_column_index", "_autosummary/pybrops.core.error.error_value_pandas.check_pandas_DataFrame_has_column_indices", "_autosummary/pybrops.core.error.error_value_pandas.check_pandas_DataFrame_has_columns", "_autosummary/pybrops.core.error.error_value_pandas.check_pandas_Series_has_index", "_autosummary/pybrops.core.error.error_value_pandas.check_pandas_Series_has_indices", "_autosummary/pybrops.core.error.error_value_pandas.check_pandas_Series_has_value", "_autosummary/pybrops.core.error.error_value_pandas.check_pandas_Series_has_values", "_autosummary/pybrops.core.error.error_value_python", "_autosummary/pybrops.core.error.error_value_python.check_Sequence_has_index", "_autosummary/pybrops.core.error.error_value_python.check_Sequence_has_indices", "_autosummary/pybrops.core.error.error_value_python.check_Sequence_has_value", "_autosummary/pybrops.core.error.error_value_python.check_Sequence_has_values", "_autosummary/pybrops.core.error.error_value_python.check_all_equal", "_autosummary/pybrops.core.error.error_value_python.check_dict_has_keys", "_autosummary/pybrops.core.error.error_value_python.check_dict_keys_all_type", "_autosummary/pybrops.core.error.error_value_python.check_dict_values_all_type", "_autosummary/pybrops.core.error.error_value_python.check_dict_values_have_equal_len", "_autosummary/pybrops.core.error.error_value_python.check_dict_values_len_eq", "_autosummary/pybrops.core.error.error_value_python.check_is_eq", "_autosummary/pybrops.core.error.error_value_python.check_is_gt", "_autosummary/pybrops.core.error.error_value_python.check_is_gteq", "_autosummary/pybrops.core.error.error_value_python.check_is_in_interval_exclusive", "_autosummary/pybrops.core.error.error_value_python.check_is_in_interval_inclusive", "_autosummary/pybrops.core.error.error_value_python.check_is_lt", "_autosummary/pybrops.core.error.error_value_python.check_is_lteq", "_autosummary/pybrops.core.error.error_value_python.check_is_neq", "_autosummary/pybrops.core.error.error_value_python.check_is_not_None", "_autosummary/pybrops.core.error.error_value_python.check_len", "_autosummary/pybrops.core.error.error_value_python.check_len_eq", "_autosummary/pybrops.core.error.error_value_python.check_str_value", "_autosummary/pybrops.core.error.error_value_python.check_tuple_len_eq", "_autosummary/pybrops.core.io", "_autosummary/pybrops.core.io.CSVDictInputOutput", "_autosummary/pybrops.core.io.CSVDictInputOutput.CSVDictInputOutput", "_autosummary/pybrops.core.io.CSVDictInputOutput.check_is_CSVDictInputOutput", "_autosummary/pybrops.core.io.CSVInputOutput", "_autosummary/pybrops.core.io.CSVInputOutput.CSVInputOutput", "_autosummary/pybrops.core.io.CSVInputOutput.check_is_CSVInputOutput", "_autosummary/pybrops.core.io.DictInputOutput", "_autosummary/pybrops.core.io.DictInputOutput.DictInputOutput", "_autosummary/pybrops.core.io.DictInputOutput.check_is_DictInputOutput", "_autosummary/pybrops.core.io.HDF5InputOutput", "_autosummary/pybrops.core.io.HDF5InputOutput.HDF5InputOutput", "_autosummary/pybrops.core.io.HDF5InputOutput.check_is_HDF5InputOutput", "_autosummary/pybrops.core.io.NPYInputOutput", "_autosummary/pybrops.core.io.NPYInputOutput.NPYInputOutput", "_autosummary/pybrops.core.io.NPYInputOutput.check_is_NPYInputOutput", "_autosummary/pybrops.core.io.NPZInputOutput", "_autosummary/pybrops.core.io.NPZInputOutput.NPZInputOutput", "_autosummary/pybrops.core.io.NPZInputOutput.check_is_NPZInputOutput", "_autosummary/pybrops.core.io.NumPyInputOutput", "_autosummary/pybrops.core.io.NumPyInputOutput.NumPyInputOutput", "_autosummary/pybrops.core.io.NumPyInputOutput.check_is_NumPyInputOutput", "_autosummary/pybrops.core.io.PandasDictInputOutput", "_autosummary/pybrops.core.io.PandasDictInputOutput.PandasDictInputOutput", "_autosummary/pybrops.core.io.PandasDictInputOutput.check_is_PandasDictInputOutput", "_autosummary/pybrops.core.io.PandasInputOutput", "_autosummary/pybrops.core.io.PandasInputOutput.PandasInputOutput", "_autosummary/pybrops.core.io.PandasInputOutput.check_is_PandasInputOutput", "_autosummary/pybrops.core.mat", "_autosummary/pybrops.core.mat.DenseMatrix", "_autosummary/pybrops.core.mat.DenseMatrix.DenseMatrix", "_autosummary/pybrops.core.mat.DenseMatrix.check_is_DenseMatrix", "_autosummary/pybrops.core.mat.DenseMutableMatrix", "_autosummary/pybrops.core.mat.DenseMutableMatrix.DenseMutableMatrix", "_autosummary/pybrops.core.mat.DenseMutableMatrix.check_is_DenseMutableMatrix", "_autosummary/pybrops.core.mat.DensePhasedMatrix", "_autosummary/pybrops.core.mat.DensePhasedMatrix.DensePhasedMatrix", "_autosummary/pybrops.core.mat.DensePhasedMatrix.check_is_DensePhasedMatrix", "_autosummary/pybrops.core.mat.DensePhasedTaxaVariantMatrix", "_autosummary/pybrops.core.mat.DensePhasedTaxaVariantMatrix.DensePhasedTaxaVariantMatrix", "_autosummary/pybrops.core.mat.DensePhasedTaxaVariantMatrix.check_is_DensePhasedTaxaVariantMatrix", "_autosummary/pybrops.core.mat.DenseSquareMatrix", "_autosummary/pybrops.core.mat.DenseSquareMatrix.DenseSquareMatrix", "_autosummary/pybrops.core.mat.DenseSquareMatrix.check_is_DenseSquareMatrix", "_autosummary/pybrops.core.mat.DenseSquareTaxaMatrix", "_autosummary/pybrops.core.mat.DenseSquareTaxaMatrix.DenseSquareTaxaMatrix", "_autosummary/pybrops.core.mat.DenseSquareTaxaMatrix.check_is_DenseSquareTaxaMatrix", "_autosummary/pybrops.core.mat.DenseSquareTaxaSquareTraitMatrix", "_autosummary/pybrops.core.mat.DenseSquareTaxaSquareTraitMatrix.DenseSquareTaxaSquareTraitMatrix", "_autosummary/pybrops.core.mat.DenseSquareTaxaSquareTraitMatrix.check_is_DenseSquareTaxaSquareTraitMatrix", "_autosummary/pybrops.core.mat.DenseSquareTaxaTraitMatrix", "_autosummary/pybrops.core.mat.DenseSquareTaxaTraitMatrix.DenseSquareTaxaTraitMatrix", "_autosummary/pybrops.core.mat.DenseSquareTaxaTraitMatrix.check_is_DenseSquareTaxaTraitMatrix", "_autosummary/pybrops.core.mat.DenseSquareTraitMatrix", "_autosummary/pybrops.core.mat.DenseSquareTraitMatrix.DenseSquareTraitMatrix", "_autosummary/pybrops.core.mat.DenseSquareTraitMatrix.check_is_DenseSquareTraitMatrix", "_autosummary/pybrops.core.mat.DenseTaxaMatrix", "_autosummary/pybrops.core.mat.DenseTaxaMatrix.DenseTaxaMatrix", "_autosummary/pybrops.core.mat.DenseTaxaMatrix.check_is_DenseTaxaMatrix", "_autosummary/pybrops.core.mat.DenseTaxaTraitMatrix", "_autosummary/pybrops.core.mat.DenseTaxaTraitMatrix.DenseTaxaTraitMatrix", "_autosummary/pybrops.core.mat.DenseTaxaTraitMatrix.check_is_DenseTaxaTraitMatrix", "_autosummary/pybrops.core.mat.DenseTaxaVariantMatrix", "_autosummary/pybrops.core.mat.DenseTaxaVariantMatrix.DenseTaxaVariantMatrix", "_autosummary/pybrops.core.mat.DenseTaxaVariantMatrix.check_is_DenseTaxaVariantMatrix", "_autosummary/pybrops.core.mat.DenseTraitMatrix", "_autosummary/pybrops.core.mat.DenseTraitMatrix.DenseTraitMatrix", "_autosummary/pybrops.core.mat.DenseTraitMatrix.check_is_DenseTraitMatrix", "_autosummary/pybrops.core.mat.DenseVariantMatrix", "_autosummary/pybrops.core.mat.DenseVariantMatrix.DenseVariantMatrix", "_autosummary/pybrops.core.mat.DenseVariantMatrix.check_is_DenseVariantMatrix", "_autosummary/pybrops.core.mat.GroupableMatrix", "_autosummary/pybrops.core.mat.GroupableMatrix.GroupableMatrix", "_autosummary/pybrops.core.mat.GroupableMatrix.check_is_GroupableMatrix", "_autosummary/pybrops.core.mat.Matrix", "_autosummary/pybrops.core.mat.Matrix.Matrix", "_autosummary/pybrops.core.mat.Matrix.check_is_Matrix", "_autosummary/pybrops.core.mat.MutableMatrix", "_autosummary/pybrops.core.mat.MutableMatrix.MutableMatrix", "_autosummary/pybrops.core.mat.MutableMatrix.check_is_MutableMatrix", "_autosummary/pybrops.core.mat.PhasedMatrix", "_autosummary/pybrops.core.mat.PhasedMatrix.PhasedMatrix", "_autosummary/pybrops.core.mat.PhasedMatrix.check_is_PhasedMatrix", "_autosummary/pybrops.core.mat.PhasedTaxaVariantMatrix", "_autosummary/pybrops.core.mat.PhasedTaxaVariantMatrix.PhasedTaxaVariantMatrix", "_autosummary/pybrops.core.mat.PhasedTaxaVariantMatrix.check_is_PhasedTaxaVariantMatrix", "_autosummary/pybrops.core.mat.PrunableMatrix", "_autosummary/pybrops.core.mat.PrunableMatrix.PrunableMatrix", "_autosummary/pybrops.core.mat.PrunableMatrix.check_is_PrunableMatrix", "_autosummary/pybrops.core.mat.SortableMatrix", "_autosummary/pybrops.core.mat.SortableMatrix.SortableMatrix", "_autosummary/pybrops.core.mat.SortableMatrix.check_is_SortableMatrix", "_autosummary/pybrops.core.mat.SquareMatrix", "_autosummary/pybrops.core.mat.SquareMatrix.SquareMatrix", "_autosummary/pybrops.core.mat.SquareMatrix.check_is_SquareMatrix", "_autosummary/pybrops.core.mat.SquareTaxaMatrix", "_autosummary/pybrops.core.mat.SquareTaxaMatrix.SquareTaxaMatrix", "_autosummary/pybrops.core.mat.SquareTaxaMatrix.check_is_SquareTaxaMatrix", "_autosummary/pybrops.core.mat.SquareTaxaSquareTraitMatrix", "_autosummary/pybrops.core.mat.SquareTaxaSquareTraitMatrix.SquareTaxaSquareTraitMatrix", "_autosummary/pybrops.core.mat.SquareTaxaSquareTraitMatrix.check_is_SquareTaxaSquareTraitMatrix", "_autosummary/pybrops.core.mat.SquareTaxaTraitMatrix", "_autosummary/pybrops.core.mat.SquareTaxaTraitMatrix.SquareTaxaTraitMatrix", "_autosummary/pybrops.core.mat.SquareTaxaTraitMatrix.check_is_SquareTaxaTraitMatrix", "_autosummary/pybrops.core.mat.SquareTraitMatrix", "_autosummary/pybrops.core.mat.SquareTraitMatrix.SquareTraitMatrix", "_autosummary/pybrops.core.mat.SquareTraitMatrix.check_is_SquareTraitMatrix", "_autosummary/pybrops.core.mat.TaxaMatrix", "_autosummary/pybrops.core.mat.TaxaMatrix.TaxaMatrix", "_autosummary/pybrops.core.mat.TaxaMatrix.check_is_TaxaMatrix", "_autosummary/pybrops.core.mat.TaxaTraitMatrix", "_autosummary/pybrops.core.mat.TaxaTraitMatrix.TaxaTraitMatrix", "_autosummary/pybrops.core.mat.TaxaTraitMatrix.check_is_TaxaTraitMatrix", "_autosummary/pybrops.core.mat.TaxaVariantMatrix", "_autosummary/pybrops.core.mat.TaxaVariantMatrix.TaxaVariantMatrix", "_autosummary/pybrops.core.mat.TaxaVariantMatrix.check_is_TaxaVariantMatrix", "_autosummary/pybrops.core.mat.TraitMatrix", "_autosummary/pybrops.core.mat.TraitMatrix.TraitMatrix", "_autosummary/pybrops.core.mat.TraitMatrix.check_is_TraitMatrix", "_autosummary/pybrops.core.mat.VariantMatrix", "_autosummary/pybrops.core.mat.VariantMatrix.VariantMatrix", "_autosummary/pybrops.core.mat.VariantMatrix.check_is_VariantMatrix", "_autosummary/pybrops.core.mat.util", "_autosummary/pybrops.core.mat.util.get_axis", "_autosummary/pybrops.core.random", "_autosummary/pybrops.core.random.prng", "_autosummary/pybrops.core.random.prng.seed", "_autosummary/pybrops.core.random.prng.spawn", "_autosummary/pybrops.core.random.sampling", "_autosummary/pybrops.core.random.sampling.axis_shuffle", "_autosummary/pybrops.core.random.sampling.outcross_shuffle", "_autosummary/pybrops.core.random.sampling.stochastic_universal_sampling", "_autosummary/pybrops.core.random.sampling.tiled_choice", "_autosummary/pybrops.core.util", "_autosummary/pybrops.core.util.arrayix", "_autosummary/pybrops.core.util.arrayix.flattenix", "_autosummary/pybrops.core.util.arrayix.sliceaxisix", "_autosummary/pybrops.core.util.arrayix.sqarrayix", "_autosummary/pybrops.core.util.arrayix.triudix", "_autosummary/pybrops.core.util.arrayix.triuix", "_autosummary/pybrops.core.util.arrayix.xmapix", "_autosummary/pybrops.core.util.h5py", "_autosummary/pybrops.core.util.h5py.h5py_File_is_writable", "_autosummary/pybrops.core.util.h5py.save_dict_to_hdf5", "_autosummary/pybrops.core.util.haplo", "_autosummary/pybrops.core.util.haplo.haplobin", "_autosummary/pybrops.core.util.haplo.haplobin_bounds", "_autosummary/pybrops.core.util.haplo.haplomat", "_autosummary/pybrops.core.util.haplo.nhaploblk_chrom", "_autosummary/pybrops.core.util.iterator", "_autosummary/pybrops.core.util.iterator.iterlen", "_autosummary/pybrops.core.util.pareto", "_autosummary/pybrops.core.util.pareto.is_pareto_efficient", "_autosummary/pybrops.core.util.subroutines", "_autosummary/pybrops.core.util.subroutines.human2bytes", "_autosummary/pybrops.core.util.subroutines.matrix_is_sorted", "_autosummary/pybrops.core.util.subroutines.slice_to_list", "_autosummary/pybrops.core.util.subroutines.slice_to_range", "_autosummary/pybrops.core.util.subroutines.srange", "_autosummary/pybrops.model", "_autosummary/pybrops.model.gmod", "_autosummary/pybrops.model.gmod.AdditiveDominanceEpistaticLinearGenomicModel", "_autosummary/pybrops.model.gmod.AdditiveDominanceEpistaticLinearGenomicModel.AdditiveDominanceEpistaticLinearGenomicModel", "_autosummary/pybrops.model.gmod.AdditiveDominanceEpistaticLinearGenomicModel.check_is_AdditiveDominanceEpistaticLinearGenomicModel", "_autosummary/pybrops.model.gmod.AdditiveDominanceLinearGenomicModel", "_autosummary/pybrops.model.gmod.AdditiveDominanceLinearGenomicModel.AdditiveDominanceLinearGenomicModel", "_autosummary/pybrops.model.gmod.AdditiveDominanceLinearGenomicModel.check_is_AdditiveDominanceLinearGenomicModel", "_autosummary/pybrops.model.gmod.AdditiveLinearGenomicModel", "_autosummary/pybrops.model.gmod.AdditiveLinearGenomicModel.AdditiveLinearGenomicModel", "_autosummary/pybrops.model.gmod.AdditiveLinearGenomicModel.check_is_AdditiveLinearGenomicModel", "_autosummary/pybrops.model.gmod.CoancestryLinearGenomicModel", "_autosummary/pybrops.model.gmod.CoancestryLinearGenomicModel.CoancestryLinearGenomicModel", "_autosummary/pybrops.model.gmod.CoancestryLinearGenomicModel.check_is_CoancestryLinearGenomicModel", "_autosummary/pybrops.model.gmod.DenseAdditiveDominanceLinearGenomicModel", "_autosummary/pybrops.model.gmod.DenseAdditiveDominanceLinearGenomicModel.DenseAdditiveDominanceLinearGenomicModel", "_autosummary/pybrops.model.gmod.DenseAdditiveDominanceLinearGenomicModel.check_is_DenseAdditiveDominanceLinearGenomicModel", "_autosummary/pybrops.model.gmod.DenseAdditiveLinearGenomicModel", "_autosummary/pybrops.model.gmod.DenseAdditiveLinearGenomicModel.DenseAdditiveLinearGenomicModel", "_autosummary/pybrops.model.gmod.DenseAdditiveLinearGenomicModel.check_is_DenseAdditiveLinearGenomicModel", "_autosummary/pybrops.model.gmod.DenseLinearGenomicModel", "_autosummary/pybrops.model.gmod.DenseLinearGenomicModel.DenseLinearGenomicModel", "_autosummary/pybrops.model.gmod.DenseLinearGenomicModel.check_is_DenseLinearGenomicModel", "_autosummary/pybrops.model.gmod.GenomicModel", "_autosummary/pybrops.model.gmod.GenomicModel.GenomicModel", "_autosummary/pybrops.model.gmod.GenomicModel.check_is_GenomicModel", "_autosummary/pybrops.model.gmod.LinearGenomicModel", "_autosummary/pybrops.model.gmod.LinearGenomicModel.LinearGenomicModel", "_autosummary/pybrops.model.gmod.LinearGenomicModel.check_is_LinearGenomicModel", "_autosummary/pybrops.model.gmod.NonlinearGenomicModel", "_autosummary/pybrops.model.gmod.NonlinearGenomicModel.NonlinearGenomicModel", "_autosummary/pybrops.model.gmod.NonlinearGenomicModel.check_is_NonlinearGenomicModel", "_autosummary/pybrops.model.gmod.rrBLUPModel0", "_autosummary/pybrops.model.gmod.rrBLUPModel0.check_is_rrBLUPModel0", "_autosummary/pybrops.model.gmod.rrBLUPModel0.gauss_seidel", "_autosummary/pybrops.model.gmod.rrBLUPModel0.rrBLUPModel0", "_autosummary/pybrops.model.gmod.rrBLUPModel0.rrBLUP_ML0", "_autosummary/pybrops.model.gmod.rrBLUPModel0.rrBLUP_ML0_calc_G", "_autosummary/pybrops.model.gmod.rrBLUPModel0.rrBLUP_ML0_calc_ZtZplI", "_autosummary/pybrops.model.gmod.rrBLUPModel0.rrBLUP_ML0_calc_Zty", "_autosummary/pybrops.model.gmod.rrBLUPModel0.rrBLUP_ML0_calc_d_V", "_autosummary/pybrops.model.gmod.rrBLUPModel0.rrBLUP_ML0_calc_etasq", "_autosummary/pybrops.model.gmod.rrBLUPModel0.rrBLUP_ML0_calc_ridge", "_autosummary/pybrops.model.gmod.rrBLUPModel0.rrBLUP_ML0_center_y", "_autosummary/pybrops.model.gmod.rrBLUPModel0.rrBLUP_ML0_neg2LogLik_fast", "_autosummary/pybrops.model.gmod.rrBLUPModel0.rrBLUP_ML0_nonzero_d_V", "_autosummary/pybrops.model.pcvmat", "_autosummary/pybrops.model.pcvmat.AdditiveProgenyGeneticCovarianceMatrix", "_autosummary/pybrops.model.pcvmat.AdditiveProgenyGeneticCovarianceMatrix.AdditiveProgenyGeneticCovarianceMatrix", "_autosummary/pybrops.model.pcvmat.AdditiveProgenyGeneticCovarianceMatrix.check_is_AdditiveProgenyGeneticCovarianceMatrix", "_autosummary/pybrops.model.pcvmat.AdditiveProgenyGenicCovarianceMatrix", "_autosummary/pybrops.model.pcvmat.AdditiveProgenyGenicCovarianceMatrix.AdditiveProgenyGenicCovarianceMatrix", "_autosummary/pybrops.model.pcvmat.AdditiveProgenyGenicCovarianceMatrix.check_is_AdditiveProgenyGenicCovarianceMatrix", "_autosummary/pybrops.model.pcvmat.DenseAdditiveProgenyGeneticCovarianceMatrix", "_autosummary/pybrops.model.pcvmat.DenseAdditiveProgenyGeneticCovarianceMatrix.DenseAdditiveProgenyGeneticCovarianceMatrix", "_autosummary/pybrops.model.pcvmat.DenseAdditiveProgenyGeneticCovarianceMatrix.check_is_DenseAdditiveProgenyGeneticCovarianceMatrix", "_autosummary/pybrops.model.pcvmat.DenseAdditiveProgenyGenicCovarianceMatrix", "_autosummary/pybrops.model.pcvmat.DenseAdditiveProgenyGenicCovarianceMatrix.DenseAdditiveProgenyGenicCovarianceMatrix", "_autosummary/pybrops.model.pcvmat.DenseAdditiveProgenyGenicCovarianceMatrix.check_is_DenseAdditiveProgenyGenicCovarianceMatrix", "_autosummary/pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix", "_autosummary/pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix", "_autosummary/pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.check_is_DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix", "_autosummary/pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix", "_autosummary/pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix", "_autosummary/pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix", "_autosummary/pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix", "_autosummary/pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.check_is_DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix", "_autosummary/pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix", "_autosummary/pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix", "_autosummary/pybrops.model.pcvmat.DenseProgenyGeneticCovarianceMatrix", "_autosummary/pybrops.model.pcvmat.DenseProgenyGeneticCovarianceMatrix.DenseProgenyGeneticCovarianceMatrix", "_autosummary/pybrops.model.pcvmat.DenseProgenyGeneticCovarianceMatrix.check_is_DenseProgenyGeneticCovarianceMatrix", "_autosummary/pybrops.model.pcvmat.DenseProgenyGenicCovarianceMatrix", "_autosummary/pybrops.model.pcvmat.DenseProgenyGenicCovarianceMatrix.DenseProgenyGenicCovarianceMatrix", "_autosummary/pybrops.model.pcvmat.DenseProgenyGenicCovarianceMatrix.check_is_DenseProgenyGenicCovarianceMatrix", "_autosummary/pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix", "_autosummary/pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix", "_autosummary/pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix", "_autosummary/pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix", "_autosummary/pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix", "_autosummary/pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix", "_autosummary/pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix", "_autosummary/pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix", "_autosummary/pybrops.model.pcvmat.ProgenyGeneticCovarianceMatrix", "_autosummary/pybrops.model.pcvmat.ProgenyGeneticCovarianceMatrix.ProgenyGeneticCovarianceMatrix", "_autosummary/pybrops.model.pcvmat.ProgenyGeneticCovarianceMatrix.check_is_ProgenyGeneticCovarianceMatrix", "_autosummary/pybrops.model.pcvmat.ProgenyGenicCovarianceMatrix", "_autosummary/pybrops.model.pcvmat.ProgenyGenicCovarianceMatrix.ProgenyGenicCovarianceMatrix", "_autosummary/pybrops.model.pcvmat.ProgenyGenicCovarianceMatrix.check_is_ProgenyGenicCovarianceMatrix", "_autosummary/pybrops.model.vmat", "_autosummary/pybrops.model.vmat.AdditiveGeneticVarianceMatrix", "_autosummary/pybrops.model.vmat.AdditiveGeneticVarianceMatrix.AdditiveGeneticVarianceMatrix", "_autosummary/pybrops.model.vmat.AdditiveGeneticVarianceMatrix.check_is_AdditiveGeneticVarianceMatrix", "_autosummary/pybrops.model.vmat.AdditiveGenicVarianceMatrix", "_autosummary/pybrops.model.vmat.AdditiveGenicVarianceMatrix.AdditiveGenicVarianceMatrix", "_autosummary/pybrops.model.vmat.AdditiveGenicVarianceMatrix.check_is_AdditiveGenicVarianceMatrix", "_autosummary/pybrops.model.vmat.DenseAdditiveGeneticVarianceMatrix", "_autosummary/pybrops.model.vmat.DenseAdditiveGeneticVarianceMatrix.DenseAdditiveGeneticVarianceMatrix", "_autosummary/pybrops.model.vmat.DenseAdditiveGeneticVarianceMatrix.check_is_DenseAdditiveGeneticVarianceMatrix", "_autosummary/pybrops.model.vmat.DenseAdditiveGenicVarianceMatrix", "_autosummary/pybrops.model.vmat.DenseAdditiveGenicVarianceMatrix.DenseAdditiveGenicVarianceMatrix", "_autosummary/pybrops.model.vmat.DenseAdditiveGenicVarianceMatrix.check_is_DenseAdditiveGenicVarianceMatrix", "_autosummary/pybrops.model.vmat.DenseDihybridDHAdditiveGeneticVarianceMatrix", "_autosummary/pybrops.model.vmat.DenseDihybridDHAdditiveGeneticVarianceMatrix.DenseDihybridDHAdditiveGeneticVarianceMatrix", "_autosummary/pybrops.model.vmat.DenseDihybridDHAdditiveGeneticVarianceMatrix.check_is_DenseDihybridDHAdditiveGeneticVarianceMatrix", "_autosummary/pybrops.model.vmat.DenseDihybridDHAdditiveGenicVarianceMatrix", "_autosummary/pybrops.model.vmat.DenseDihybridDHAdditiveGenicVarianceMatrix.DenseDihybridDHAdditiveGenicVarianceMatrix", "_autosummary/pybrops.model.vmat.DenseFourWayDHAdditiveGeneticVarianceMatrix", "_autosummary/pybrops.model.vmat.DenseFourWayDHAdditiveGeneticVarianceMatrix.DenseFourWayDHAdditiveGeneticVarianceMatrix", "_autosummary/pybrops.model.vmat.DenseFourWayDHAdditiveGeneticVarianceMatrix.check_is_DenseFourWayDHAdditiveGeneticVarianceMatrix", "_autosummary/pybrops.model.vmat.DenseFourWayDHAdditiveGenicVarianceMatrix", "_autosummary/pybrops.model.vmat.DenseFourWayDHAdditiveGenicVarianceMatrix.DenseFourWayDHAdditiveGenicVarianceMatrix", "_autosummary/pybrops.model.vmat.DenseGeneticVarianceMatrix", "_autosummary/pybrops.model.vmat.DenseGeneticVarianceMatrix.DenseGeneticVarianceMatrix", "_autosummary/pybrops.model.vmat.DenseGeneticVarianceMatrix.check_is_DenseGeneticVarianceMatrix", "_autosummary/pybrops.model.vmat.DenseGenicVarianceMatrix", "_autosummary/pybrops.model.vmat.DenseGenicVarianceMatrix.DenseGenicVarianceMatrix", "_autosummary/pybrops.model.vmat.DenseGenicVarianceMatrix.check_is_DenseGenicVarianceMatrix", "_autosummary/pybrops.model.vmat.DenseThreeWayDHAdditiveGeneticVarianceMatrix", "_autosummary/pybrops.model.vmat.DenseThreeWayDHAdditiveGeneticVarianceMatrix.DenseThreeWayDHAdditiveGeneticVarianceMatrix", "_autosummary/pybrops.model.vmat.DenseThreeWayDHAdditiveGenicVarianceMatrix", "_autosummary/pybrops.model.vmat.DenseThreeWayDHAdditiveGenicVarianceMatrix.DenseThreeWayDHAdditiveGenicVarianceMatrix", "_autosummary/pybrops.model.vmat.DenseTwoWayDHAdditiveGeneticVarianceMatrix", "_autosummary/pybrops.model.vmat.DenseTwoWayDHAdditiveGeneticVarianceMatrix.DenseTwoWayDHAdditiveGeneticVarianceMatrix", "_autosummary/pybrops.model.vmat.DenseTwoWayDHAdditiveGenicVarianceMatrix", "_autosummary/pybrops.model.vmat.DenseTwoWayDHAdditiveGenicVarianceMatrix.DenseTwoWayDHAdditiveGenicVarianceMatrix", "_autosummary/pybrops.model.vmat.GeneticVarianceMatrix", "_autosummary/pybrops.model.vmat.GeneticVarianceMatrix.GeneticVarianceMatrix", "_autosummary/pybrops.model.vmat.GeneticVarianceMatrix.check_is_GeneticVarianceMatrix", "_autosummary/pybrops.model.vmat.GenicVarianceMatrix", "_autosummary/pybrops.model.vmat.GenicVarianceMatrix.GenicVarianceMatrix", "_autosummary/pybrops.model.vmat.GenicVarianceMatrix.check_is_GenicVarianceMatrix", "_autosummary/pybrops.model.vmat.fcty", "_autosummary/pybrops.model.vmat.fcty.AdditiveGeneticVarianceMatrixFactory", "_autosummary/pybrops.model.vmat.fcty.AdditiveGeneticVarianceMatrixFactory.AdditiveGeneticVarianceMatrixFactory", "_autosummary/pybrops.model.vmat.fcty.AdditiveGeneticVarianceMatrixFactory.check_is_AdditiveGeneticVarianceMatrixFactory", "_autosummary/pybrops.model.vmat.fcty.AdditiveGenicVarianceMatrixFactory", "_autosummary/pybrops.model.vmat.fcty.AdditiveGenicVarianceMatrixFactory.AdditiveGenicVarianceMatrixFactory", "_autosummary/pybrops.model.vmat.fcty.AdditiveGenicVarianceMatrixFactory.check_is_AdditiveGenicVarianceMatrixFactory", "_autosummary/pybrops.model.vmat.fcty.DenseDihybridDHAdditiveGeneticVarianceMatrixFactory", "_autosummary/pybrops.model.vmat.fcty.DenseDihybridDHAdditiveGeneticVarianceMatrixFactory.DenseDihybridDHAdditiveGeneticVarianceMatrixFactory", "_autosummary/pybrops.model.vmat.fcty.DenseDihybridDHAdditiveGeneticVarianceMatrixFactory.check_is_DenseDihybridDHAdditiveGeneticVarianceMatrixFactory", "_autosummary/pybrops.model.vmat.fcty.DenseFourWayDHAdditiveGeneticVarianceMatrixFactory", "_autosummary/pybrops.model.vmat.fcty.DenseFourWayDHAdditiveGeneticVarianceMatrixFactory.DenseFourWayDHAdditiveGeneticVarianceMatrixFactory", "_autosummary/pybrops.model.vmat.fcty.DenseFourWayDHAdditiveGeneticVarianceMatrixFactory.check_is_DenseFourWayDHAdditiveGeneticVarianceMatrixFactory", "_autosummary/pybrops.model.vmat.fcty.DenseThreeWayDHAdditiveGeneticVarianceMatrixFactory", "_autosummary/pybrops.model.vmat.fcty.DenseThreeWayDHAdditiveGeneticVarianceMatrixFactory.DenseThreeWayDHAdditiveGeneticVarianceMatrixFactory", "_autosummary/pybrops.model.vmat.fcty.DenseThreeWayDHAdditiveGeneticVarianceMatrixFactory.check_is_DenseThreeWayDHAdditiveGeneticVarianceMatrixFactory", "_autosummary/pybrops.model.vmat.fcty.DenseTwoWayDHAdditiveGeneticVarianceMatrixFactory", "_autosummary/pybrops.model.vmat.fcty.DenseTwoWayDHAdditiveGeneticVarianceMatrixFactory.DenseTwoWayDHAdditiveGeneticVarianceMatrixFactory", "_autosummary/pybrops.model.vmat.fcty.DenseTwoWayDHAdditiveGeneticVarianceMatrixFactory.check_is_DenseTwoWayDHAdditiveGeneticVarianceMatrixFactory", "_autosummary/pybrops.model.vmat.fcty.DenseTwoWayDHAdditiveGenicVarianceMatrixFactory", "_autosummary/pybrops.model.vmat.fcty.DenseTwoWayDHAdditiveGenicVarianceMatrixFactory.DenseTwoWayDHAdditiveGenicVarianceMatrixFactory", "_autosummary/pybrops.model.vmat.fcty.DenseTwoWayDHAdditiveGenicVarianceMatrixFactory.check_is_DenseTwoWayDHAdditiveGenicVarianceMatrixFactory", "_autosummary/pybrops.model.vmat.fcty.GeneticVarianceMatrixFactory", "_autosummary/pybrops.model.vmat.fcty.GeneticVarianceMatrixFactory.GeneticVarianceMatrixFactory", "_autosummary/pybrops.model.vmat.fcty.GeneticVarianceMatrixFactory.check_is_GeneticVarianceMatrixFactory", "_autosummary/pybrops.model.vmat.fcty.GenicVarianceMatrixFactory", "_autosummary/pybrops.model.vmat.fcty.GenicVarianceMatrixFactory.GenicVarianceMatrixFactory", "_autosummary/pybrops.model.vmat.fcty.GenicVarianceMatrixFactory.check_is_GenicVarianceMatrixFactory", "_autosummary/pybrops.model.vmat.util", "_autosummary/pybrops.model.vmat.util.cov_D1s", "_autosummary/pybrops.model.vmat.util.cov_D1st", "_autosummary/pybrops.model.vmat.util.cov_D2s", "_autosummary/pybrops.model.vmat.util.cov_D2st", "_autosummary/pybrops.model.vmat.util.rprob_filial", "_autosummary/pybrops.opt", "_autosummary/pybrops.opt.algo", "_autosummary/pybrops.opt.algo.BinaryGeneticAlgorithm", "_autosummary/pybrops.opt.algo.BinaryGeneticAlgorithm.BinaryGeneticAlgorithm", "_autosummary/pybrops.opt.algo.BinaryOptimizationAlgorithm", "_autosummary/pybrops.opt.algo.BinaryOptimizationAlgorithm.BinaryOptimizationAlgorithm", "_autosummary/pybrops.opt.algo.BinaryOptimizationAlgorithm.check_is_BinaryOptimizationAlgorithm", "_autosummary/pybrops.opt.algo.IntegerGeneticAlgorithm", "_autosummary/pybrops.opt.algo.IntegerGeneticAlgorithm.IntegerGeneticAlgorithm", "_autosummary/pybrops.opt.algo.IntegerOptimizationAlgorithm", "_autosummary/pybrops.opt.algo.IntegerOptimizationAlgorithm.IntegerOptimizationAlgorithm", "_autosummary/pybrops.opt.algo.IntegerOptimizationAlgorithm.check_is_IntegerOptimizationAlgorithm", "_autosummary/pybrops.opt.algo.NSGA2BinaryGeneticAlgorithm", "_autosummary/pybrops.opt.algo.NSGA2BinaryGeneticAlgorithm.NSGA2BinaryGeneticAlgorithm", "_autosummary/pybrops.opt.algo.NSGA2IntegerGeneticAlgorithm", "_autosummary/pybrops.opt.algo.NSGA2IntegerGeneticAlgorithm.NSGA2IntegerGeneticAlgorithm", "_autosummary/pybrops.opt.algo.NSGA2MemeticSubsetGeneticAlgorithm", "_autosummary/pybrops.opt.algo.NSGA2MemeticSubsetGeneticAlgorithm.NSGA2MutatorASubsetGeneticAlgorithm", "_autosummary/pybrops.opt.algo.NSGA2MemeticSubsetGeneticAlgorithm.NSGA2MutatorBSubsetGeneticAlgorithm", "_autosummary/pybrops.opt.algo.NSGA2MemeticSubsetGeneticAlgorithm.NSGA2SteepestDescentSubsetGeneticAlgorithm", "_autosummary/pybrops.opt.algo.NSGA2MemeticSubsetGeneticAlgorithm.NSGA2StochasticDescentSubsetGeneticAlgorithm", "_autosummary/pybrops.opt.algo.NSGA2RealGeneticAlgorithm", "_autosummary/pybrops.opt.algo.NSGA2RealGeneticAlgorithm.NSGA2RealGeneticAlgorithm", "_autosummary/pybrops.opt.algo.NSGA2SubsetGeneticAlgorithm", "_autosummary/pybrops.opt.algo.NSGA2SubsetGeneticAlgorithm.NSGA2SubsetGeneticAlgorithm", "_autosummary/pybrops.opt.algo.NSGA3SubsetGeneticAlgorithm", "_autosummary/pybrops.opt.algo.NSGA3SubsetGeneticAlgorithm.NSGA3SubsetGeneticAlgorithm", "_autosummary/pybrops.opt.algo.OptimizationAlgorithm", "_autosummary/pybrops.opt.algo.OptimizationAlgorithm.OptimizationAlgorithm", "_autosummary/pybrops.opt.algo.OptimizationAlgorithm.check_is_OptimizationAlgorithm", "_autosummary/pybrops.opt.algo.RealGeneticAlgorithm", "_autosummary/pybrops.opt.algo.RealGeneticAlgorithm.RealGeneticAlgorithm", "_autosummary/pybrops.opt.algo.RealOptimizationAlgorithm", "_autosummary/pybrops.opt.algo.RealOptimizationAlgorithm.RealOptimizationAlgorithm", "_autosummary/pybrops.opt.algo.RealOptimizationAlgorithm.check_is_RealOptimizationAlgorithm", "_autosummary/pybrops.opt.algo.SortingSteepestDescentSubsetHillClimber", "_autosummary/pybrops.opt.algo.SortingSteepestDescentSubsetHillClimber.SortingSteepestDescentSubsetHillClimber", "_autosummary/pybrops.opt.algo.SortingSubsetOptimizationAlgorithm", "_autosummary/pybrops.opt.algo.SortingSubsetOptimizationAlgorithm.SortingSubsetOptimizationAlgorithm", "_autosummary/pybrops.opt.algo.SteepestDescentSubsetHillClimber", "_autosummary/pybrops.opt.algo.SteepestDescentSubsetHillClimber.SteepestDescentSubsetHillClimber", "_autosummary/pybrops.opt.algo.SubsetGeneticAlgorithm", "_autosummary/pybrops.opt.algo.SubsetGeneticAlgorithm.SubsetGeneticAlgorithm", "_autosummary/pybrops.opt.algo.SubsetOptimizationAlgorithm", "_autosummary/pybrops.opt.algo.SubsetOptimizationAlgorithm.SubsetOptimizationAlgorithm", "_autosummary/pybrops.opt.algo.SubsetOptimizationAlgorithm.check_is_SubsetOptimizationAlgorithm", "_autosummary/pybrops.opt.algo.UnconstrainedNSGA2SetGeneticAlgorithm", "_autosummary/pybrops.opt.algo.UnconstrainedNSGA2SetGeneticAlgorithm.UnconstrainedNSGA2SetGeneticAlgorithm", "_autosummary/pybrops.opt.algo.UnconstrainedOptimizationAlgorithm", "_autosummary/pybrops.opt.algo.UnconstrainedOptimizationAlgorithm.UnconstrainedOptimizationAlgorithm", "_autosummary/pybrops.opt.algo.UnconstrainedOptimizationAlgorithm.check_is_OptimizationAlgorithm", "_autosummary/pybrops.opt.algo.UnconstrainedSetGeneticAlgorithm", "_autosummary/pybrops.opt.algo.UnconstrainedSetGeneticAlgorithm.UnconstrainedSetGeneticAlgorithm", "_autosummary/pybrops.opt.algo.UnconstrainedSteepestAscentSetHillClimber", "_autosummary/pybrops.opt.algo.UnconstrainedSteepestAscentSetHillClimber.UnconstrainedSteepestAscentSetHillClimber", "_autosummary/pybrops.opt.algo.pymoo_addon", "_autosummary/pybrops.opt.algo.pymoo_addon.IntegerPolynomialMutation", "_autosummary/pybrops.opt.algo.pymoo_addon.IntegerSimulatedBinaryCrossover", "_autosummary/pybrops.opt.algo.pymoo_addon.MultiObjectiveSteepestDescentHillClimberMutation", "_autosummary/pybrops.opt.algo.pymoo_addon.MultiObjectiveStochasticDescentHillClimberMutation", "_autosummary/pybrops.opt.algo.pymoo_addon.MultiObjectiveStochasticHillClimberMutation", "_autosummary/pybrops.opt.algo.pymoo_addon.MutatorA", "_autosummary/pybrops.opt.algo.pymoo_addon.MutatorB", "_autosummary/pybrops.opt.algo.pymoo_addon.MutatorF", "_autosummary/pybrops.opt.algo.pymoo_addon.ReducedExchangeCrossover", "_autosummary/pybrops.opt.algo.pymoo_addon.ReducedExchangeMutation", "_autosummary/pybrops.opt.algo.pymoo_addon.StochasticHillClimberMutation", "_autosummary/pybrops.opt.algo.pymoo_addon.SubsetRandomSampling", "_autosummary/pybrops.opt.algo.pymoo_addon.dominates", "_autosummary/pybrops.opt.algo.pymoo_addon.tiled_choice", "_autosummary/pybrops.opt.prob", "_autosummary/pybrops.opt.prob.BinaryProblem", "_autosummary/pybrops.opt.prob.BinaryProblem.BinaryProblem", "_autosummary/pybrops.opt.prob.BinaryProblem.check_BinaryProblem_is_multi_objective", "_autosummary/pybrops.opt.prob.BinaryProblem.check_BinaryProblem_is_single_objective", "_autosummary/pybrops.opt.prob.BinaryProblem.check_is_BinaryProblem", "_autosummary/pybrops.opt.prob.FunctionWeight", "_autosummary/pybrops.opt.prob.FunctionWeight.FunctionWeight", "_autosummary/pybrops.opt.prob.FunctionWeight.MaximizingFunctionWeight", "_autosummary/pybrops.opt.prob.FunctionWeight.MinimizingFunctionWeight", "_autosummary/pybrops.opt.prob.IntegerProblem", "_autosummary/pybrops.opt.prob.IntegerProblem.IntegerProblem", "_autosummary/pybrops.opt.prob.IntegerProblem.check_IntegerProblem_is_multi_objective", "_autosummary/pybrops.opt.prob.IntegerProblem.check_IntegerProblem_is_single_objective", "_autosummary/pybrops.opt.prob.IntegerProblem.check_is_IntegerProblem", "_autosummary/pybrops.opt.prob.Problem", "_autosummary/pybrops.opt.prob.Problem.Problem", "_autosummary/pybrops.opt.prob.Problem.check_is_Problem", "_autosummary/pybrops.opt.prob.RealProblem", "_autosummary/pybrops.opt.prob.RealProblem.RealProblem", "_autosummary/pybrops.opt.prob.RealProblem.check_RealProblem_is_multi_objective", "_autosummary/pybrops.opt.prob.RealProblem.check_RealProblem_is_single_objective", "_autosummary/pybrops.opt.prob.RealProblem.check_is_RealProblem", "_autosummary/pybrops.opt.prob.SubsetProblem", "_autosummary/pybrops.opt.prob.SubsetProblem.SubsetProblem", "_autosummary/pybrops.opt.prob.SubsetProblem.check_SubsetProblem_is_multi_objective", "_autosummary/pybrops.opt.prob.SubsetProblem.check_SubsetProblem_is_single_objective", "_autosummary/pybrops.opt.prob.SubsetProblem.check_is_SubsetProblem", "_autosummary/pybrops.opt.soln", "_autosummary/pybrops.opt.soln.BinarySolution", "_autosummary/pybrops.opt.soln.BinarySolution.BinarySolution", "_autosummary/pybrops.opt.soln.BinarySolution.check_is_BinarySolution", "_autosummary/pybrops.opt.soln.IntegerSolution", "_autosummary/pybrops.opt.soln.IntegerSolution.IntegerSolution", "_autosummary/pybrops.opt.soln.IntegerSolution.check_is_IntegerSolution", "_autosummary/pybrops.opt.soln.RealSolution", "_autosummary/pybrops.opt.soln.RealSolution.RealSolution", "_autosummary/pybrops.opt.soln.RealSolution.check_is_RealSolution", "_autosummary/pybrops.opt.soln.Solution", "_autosummary/pybrops.opt.soln.Solution.Solution", "_autosummary/pybrops.opt.soln.Solution.check_is_Solution", "_autosummary/pybrops.opt.soln.SubsetSolution", "_autosummary/pybrops.opt.soln.SubsetSolution.SubsetSolution", "_autosummary/pybrops.opt.soln.SubsetSolution.check_is_SubsetSolution", "_autosummary/pybrops.popgen", "_autosummary/pybrops.popgen.bvmat", "_autosummary/pybrops.popgen.bvmat.BreedingValueMatrix", "_autosummary/pybrops.popgen.bvmat.BreedingValueMatrix.BreedingValueMatrix", "_autosummary/pybrops.popgen.bvmat.BreedingValueMatrix.check_is_BreedingValueMatrix", "_autosummary/pybrops.popgen.bvmat.DenseBreedingValueMatrix", "_autosummary/pybrops.popgen.bvmat.DenseBreedingValueMatrix.DenseBreedingValueMatrix", "_autosummary/pybrops.popgen.bvmat.DenseBreedingValueMatrix.check_is_DenseBreedingValueMatrix", "_autosummary/pybrops.popgen.bvmat.DenseEstimatedBreedingValueMatrix", "_autosummary/pybrops.popgen.bvmat.DenseEstimatedBreedingValueMatrix.DenseEstimatedBreedingValueMatrix", "_autosummary/pybrops.popgen.bvmat.DenseEstimatedBreedingValueMatrix.check_is_DenseEstimatedBreedingValueMatrix", "_autosummary/pybrops.popgen.bvmat.DenseGenomicEstimatedBreedingValueMatrix", "_autosummary/pybrops.popgen.bvmat.DenseGenomicEstimatedBreedingValueMatrix.DenseGenomicEstimatedBreedingValueMatrix", "_autosummary/pybrops.popgen.bvmat.DenseGenomicEstimatedBreedingValueMatrix.check_is_DenseGenomicEstimatedBreedingValueMatrix", "_autosummary/pybrops.popgen.cmat", "_autosummary/pybrops.popgen.cmat.CoancestryMatrix", "_autosummary/pybrops.popgen.cmat.CoancestryMatrix.CoancestryMatrix", "_autosummary/pybrops.popgen.cmat.CoancestryMatrix.check_is_CoancestryMatrix", "_autosummary/pybrops.popgen.cmat.DenseCoancestryMatrix", "_autosummary/pybrops.popgen.cmat.DenseCoancestryMatrix.DenseCoancestryMatrix", "_autosummary/pybrops.popgen.cmat.DenseCoancestryMatrix.check_is_DenseCoancestryMatrix", "_autosummary/pybrops.popgen.cmat.DenseGeneralizedWeightedCoancestryMatrix", "_autosummary/pybrops.popgen.cmat.DenseGeneralizedWeightedCoancestryMatrix.DenseGeneralizedWeightedCoancestryMatrix", "_autosummary/pybrops.popgen.cmat.DenseGeneralizedWeightedCoancestryMatrix.check_is_DenseGeneralizedWeightedCoancestryMatrix", "_autosummary/pybrops.popgen.cmat.DenseMolecularCoancestryMatrix", "_autosummary/pybrops.popgen.cmat.DenseMolecularCoancestryMatrix.DenseMolecularCoancestryMatrix", "_autosummary/pybrops.popgen.cmat.DenseMolecularCoancestryMatrix.check_is_DenseMolecularCoancestryMatrix", "_autosummary/pybrops.popgen.cmat.DenseVanRadenCoancestryMatrix", "_autosummary/pybrops.popgen.cmat.DenseVanRadenCoancestryMatrix.DenseVanRadenCoancestryMatrix", "_autosummary/pybrops.popgen.cmat.DenseVanRadenCoancestryMatrix.check_is_DenseVanRadenCoancestryMatrix", "_autosummary/pybrops.popgen.cmat.DenseYangCoancestryMatrix", "_autosummary/pybrops.popgen.cmat.DenseYangCoancestryMatrix.DenseYangCoancestryMatrix", "_autosummary/pybrops.popgen.cmat.DenseYangCoancestryMatrix.check_is_DenseYangCoancestryMatrix", "_autosummary/pybrops.popgen.cmat.fcty", "_autosummary/pybrops.popgen.cmat.fcty.CoancestryMatrixFactory", "_autosummary/pybrops.popgen.cmat.fcty.CoancestryMatrixFactory.CoancestryMatrixFactory", "_autosummary/pybrops.popgen.cmat.fcty.CoancestryMatrixFactory.check_is_CoancestryMatrixFactory", "_autosummary/pybrops.popgen.cmat.fcty.DenseCoancestryMatrixFactory", "_autosummary/pybrops.popgen.cmat.fcty.DenseCoancestryMatrixFactory.DenseCoancestryMatrixFactory", "_autosummary/pybrops.popgen.cmat.fcty.DenseCoancestryMatrixFactory.check_is_DenseCoancestryMatrixFactory", "_autosummary/pybrops.popgen.cmat.fcty.DenseGeneralizedWeightedCoancestryMatrixFactory", "_autosummary/pybrops.popgen.cmat.fcty.DenseGeneralizedWeightedCoancestryMatrixFactory.DenseGeneralizedWeightedCoancestryMatrixFactory", "_autosummary/pybrops.popgen.cmat.fcty.DenseGeneralizedWeightedCoancestryMatrixFactory.check_is_DenseGeneralizedWeightedCoancestryMatrixFactory", "_autosummary/pybrops.popgen.cmat.fcty.DenseMolecularCoancestryMatrixFactory", "_autosummary/pybrops.popgen.cmat.fcty.DenseMolecularCoancestryMatrixFactory.DenseMolecularCoancestryMatrixFactory", "_autosummary/pybrops.popgen.cmat.fcty.DenseMolecularCoancestryMatrixFactory.check_is_DenseMolecularCoancestryMatrixFactory", "_autosummary/pybrops.popgen.cmat.fcty.DenseVanRadenCoancestryMatrixFactory", "_autosummary/pybrops.popgen.cmat.fcty.DenseVanRadenCoancestryMatrixFactory.DenseVanRadenCoancestryMatrixFactory", "_autosummary/pybrops.popgen.cmat.fcty.DenseVanRadenCoancestryMatrixFactory.check_is_DenseVanRadenCoancestryMatrixFactory", "_autosummary/pybrops.popgen.cmat.fcty.DenseYangCoancestryMatrixFactory", "_autosummary/pybrops.popgen.cmat.fcty.DenseYangCoancestryMatrixFactory.DenseYangCoancestryMatrixFactory", "_autosummary/pybrops.popgen.cmat.fcty.DenseYangCoancestryMatrixFactory.check_is_DenseYangCoancestryMatrixFactory", "_autosummary/pybrops.popgen.gmap", "_autosummary/pybrops.popgen.gmap.DenseGeneticMappableMatrix", "_autosummary/pybrops.popgen.gmap.DenseGeneticMappableMatrix.DenseGeneticMappableMatrix", "_autosummary/pybrops.popgen.gmap.DenseGeneticMappableMatrix.check_is_DenseGeneticMappableMatrix", "_autosummary/pybrops.popgen.gmap.ExtendedGeneticMap", "_autosummary/pybrops.popgen.gmap.ExtendedGeneticMap.ExtendedGeneticMap", "_autosummary/pybrops.popgen.gmap.ExtendedGeneticMap.check_is_ExtendedGeneticMap", "_autosummary/pybrops.popgen.gmap.GeneticMap", "_autosummary/pybrops.popgen.gmap.GeneticMap.GeneticMap", "_autosummary/pybrops.popgen.gmap.GeneticMap.check_is_GeneticMap", "_autosummary/pybrops.popgen.gmap.GeneticMapFunction", "_autosummary/pybrops.popgen.gmap.GeneticMapFunction.GeneticMapFunction", "_autosummary/pybrops.popgen.gmap.GeneticMapFunction.check_is_GeneticMapFunction", "_autosummary/pybrops.popgen.gmap.GeneticMappableMatrix", "_autosummary/pybrops.popgen.gmap.GeneticMappableMatrix.GeneticMappableMatrix", "_autosummary/pybrops.popgen.gmap.GeneticMappableMatrix.check_is_GeneticMappableMatrix", "_autosummary/pybrops.popgen.gmap.HaldaneMapFunction", "_autosummary/pybrops.popgen.gmap.HaldaneMapFunction.HaldaneMapFunction", "_autosummary/pybrops.popgen.gmap.HaldaneMapFunction.check_is_HaldaneMapFunction", "_autosummary/pybrops.popgen.gmap.KosambiMapFunction", "_autosummary/pybrops.popgen.gmap.KosambiMapFunction.KosambiMapFunction", "_autosummary/pybrops.popgen.gmap.KosambiMapFunction.check_is_KosambiMapFunction", "_autosummary/pybrops.popgen.gmap.StandardGeneticMap", "_autosummary/pybrops.popgen.gmap.StandardGeneticMap.StandardGeneticMap", "_autosummary/pybrops.popgen.gmap.StandardGeneticMap.check_is_StandardGeneticMap", "_autosummary/pybrops.popgen.gmap.util", "_autosummary/pybrops.popgen.gmap.util.cM2d", "_autosummary/pybrops.popgen.gmat", "_autosummary/pybrops.popgen.gmat.DenseGenotypeMatrix", "_autosummary/pybrops.popgen.gmat.DenseGenotypeMatrix.DenseGenotypeMatrix", "_autosummary/pybrops.popgen.gmat.DenseGenotypeMatrix.check_is_DenseGenotypeMatrix", "_autosummary/pybrops.popgen.gmat.DensePhasedGenotypeMatrix", "_autosummary/pybrops.popgen.gmat.DensePhasedGenotypeMatrix.DensePhasedGenotypeMatrix", "_autosummary/pybrops.popgen.gmat.DensePhasedGenotypeMatrix.check_DensePhasedGenotypeMatrix_has_vrnt_xoprob", "_autosummary/pybrops.popgen.gmat.DensePhasedGenotypeMatrix.check_is_DensePhasedGenotypeMatrix", "_autosummary/pybrops.popgen.gmat.GenotypeMatrix", "_autosummary/pybrops.popgen.gmat.GenotypeMatrix.GenotypeMatrix", "_autosummary/pybrops.popgen.gmat.GenotypeMatrix.check_GenotypeMatrix_has_taxa", "_autosummary/pybrops.popgen.gmat.GenotypeMatrix.check_is_GenotypeMatrix", "_autosummary/pybrops.popgen.gmat.HaplotypeMatrix", "_autosummary/pybrops.popgen.gmat.HaplotypeMatrix.HaplotypeMatrix", "_autosummary/pybrops.popgen.gmat.HaplotypeMatrix.check_is_HaplotypeMatrix", "_autosummary/pybrops.popgen.gmat.PhasedGenotypeMatrix", "_autosummary/pybrops.popgen.gmat.PhasedGenotypeMatrix.PhasedGenotypeMatrix", "_autosummary/pybrops.popgen.gmat.PhasedGenotypeMatrix.check_is_PhasedGenotypeMatrix", "_autosummary/pybrops.popgen.gmat.PhasedHaplotypeMatrix", "_autosummary/pybrops.popgen.gmat.PhasedHaplotypeMatrix.PhasedHaplotypeMatrix", "_autosummary/pybrops.popgen.gmat.PhasedHaplotypeMatrix.check_is_PhasedHaplotypeMatrix", "_autosummary/pybrops.test", "_autosummary/pybrops.test.assert_python", "_autosummary/pybrops.test.assert_python.assert_class_documentation", "_autosummary/pybrops.test.assert_python.assert_class_isabstract", "_autosummary/pybrops.test.assert_python.assert_class_isconcrete", "_autosummary/pybrops.test.assert_python.assert_class_ismixin", "_autosummary/pybrops.test.assert_python.assert_class_issemiabstract", "_autosummary/pybrops.test.assert_python.assert_classmethod_documentation", "_autosummary/pybrops.test.assert_python.assert_classmethod_isabstract", "_autosummary/pybrops.test.assert_python.assert_classmethod_isconcrete", "_autosummary/pybrops.test.assert_python.assert_classmethod_not_raises_NotImplementedError", "_autosummary/pybrops.test.assert_python.assert_classmethod_raises_NotImplementedError", "_autosummary/pybrops.test.assert_python.assert_docstring", "_autosummary/pybrops.test.assert_python.assert_function_documentation", "_autosummary/pybrops.test.assert_python.assert_function_isabstract", "_autosummary/pybrops.test.assert_python.assert_function_isconcrete", "_autosummary/pybrops.test.assert_python.assert_function_not_raises_NotImplementedError", "_autosummary/pybrops.test.assert_python.assert_function_raises_NotImplementedError", "_autosummary/pybrops.test.assert_python.assert_hasattr", "_autosummary/pybrops.test.assert_python.assert_method_documentation", "_autosummary/pybrops.test.assert_python.assert_method_isabstract", "_autosummary/pybrops.test.assert_python.assert_method_isconcrete", "_autosummary/pybrops.test.assert_python.assert_method_not_raises_NotImplementedError", "_autosummary/pybrops.test.assert_python.assert_method_raises_NotImplementedError", "_autosummary/pybrops.test.assert_python.assert_module_documentation", "_autosummary/pybrops.test.assert_python.assert_property_documentation", "_autosummary/pybrops.test.assert_python.assert_property_isabstract", "_autosummary/pybrops.test.assert_python.assert_property_isconcrete", "_autosummary/pybrops.test.assert_python.assert_property_not_raises_NotImplementedError", "_autosummary/pybrops.test.assert_python.assert_property_raises_NotImplementedError", "_autosummary/pybrops.test.assert_python.not_raises", "_autosummary/pybrops.test.assert_python.raises", "advanced_usage/advanced_usage", "api", "contributing/contributing", "faq/faq", "fundamentals/architecture/architecture", "fundamentals/architecture/philosophy", "fundamentals/fundamentals", "fundamentals/simulation/philosophy", "getting_started/getting_started", "index", "standard_usage/breeding_operators/evaluation_operators", "standard_usage/breeding_operators/initialization_operators", "standard_usage/breeding_operators/logbooks", "standard_usage/breeding_operators/mating_operators", "standard_usage/breeding_operators/parental_selection_operators", "standard_usage/breeding_operators/survivor_selection_operators", "standard_usage/breeding_protocols/breeding_value_protocols", "standard_usage/breeding_protocols/genotyping_protocols", "standard_usage/breeding_protocols/mating_protocols", "standard_usage/breeding_protocols/phenotyping_protocols", "standard_usage/breeding_protocols/selection_protocols", "standard_usage/core_infrastructure/random_number_generation", "standard_usage/examples/breeding_program_simulation/constrained_bitrait_phenotypic_selection", "standard_usage/examples/breeding_program_simulation/constrained_single_trait_phenotypic_selection", "standard_usage/examples/breeding_program_simulation/multiobjective_genomic_selection", "standard_usage/examples/breeding_program_simulation/single_trait_phenotypic_selection", "standard_usage/examples/examples", "standard_usage/examples/pareto_frontier_visualization/biobjective_GEBV_pareto_frontier", "standard_usage/examples/pareto_frontier_visualization/biobjective_wGEBV_pareto_frontier", "standard_usage/examples/pareto_frontier_visualization/germplasm_panel_reduction", "standard_usage/examples/pareto_frontier_visualization/triobjective_OCS_pareto_frontier", "standard_usage/genomic_modeling/genomic_models", "standard_usage/genomic_modeling/variance_matrices", "standard_usage/optimization/optimization_algorithms", "standard_usage/optimization/optimization_problems", "standard_usage/optimization/optimization_solutions", "standard_usage/population_genetics/breeding_value_matrices", "standard_usage/population_genetics/coancestry_matrices", "standard_usage/population_genetics/genetic_map_functions", "standard_usage/population_genetics/genetic_maps", "standard_usage/population_genetics/genotype_matrices", "standard_usage/population_genetics/phased_genotype_matrices", "standard_usage/standard_usage"], "filenames": ["_autosummary/pybrops.rst", "_autosummary/pybrops.breed.rst", "_autosummary/pybrops.breed.arch.rst", "_autosummary/pybrops.breed.arch.BreedingEdge.rst", "_autosummary/pybrops.breed.arch.BreedingEdge.BreedingEdge.rst", "_autosummary/pybrops.breed.arch.BreedingEdge.check_is_BreedingEdge.rst", "_autosummary/pybrops.breed.arch.BreedingGraph.rst", "_autosummary/pybrops.breed.arch.BreedingGraph.BreedingGraph.rst", "_autosummary/pybrops.breed.arch.BreedingGraph.check_is_BreedingGraph.rst", "_autosummary/pybrops.breed.arch.BreedingNode.rst", "_autosummary/pybrops.breed.arch.BreedingNode.BreedingNode.rst", "_autosummary/pybrops.breed.arch.BreedingNode.check_is_BreedingNode.rst", "_autosummary/pybrops.breed.arch.BreedingProgram.rst", "_autosummary/pybrops.breed.arch.BreedingProgram.BreedingProgram.rst", "_autosummary/pybrops.breed.arch.BreedingProgram.check_is_BreedingProgram.rst", "_autosummary/pybrops.breed.arch.EmigrationOperator.rst", "_autosummary/pybrops.breed.arch.EmigrationOperator.EmigrationOperator.rst", "_autosummary/pybrops.breed.arch.EmigrationOperator.check_is_EmigrationOperator.rst", "_autosummary/pybrops.breed.arch.GermplasmBank.rst", "_autosummary/pybrops.breed.arch.GermplasmBank.GermplasmBank.rst", "_autosummary/pybrops.breed.arch.GermplasmBank.check_is_GermplasmBank.rst", "_autosummary/pybrops.breed.arch.ImmigrationOperator.rst", "_autosummary/pybrops.breed.arch.ImmigrationOperator.ImmigrationOperator.rst", "_autosummary/pybrops.breed.arch.ImmigrationOperator.check_is_ImmigrationOperator.rst", "_autosummary/pybrops.breed.arch.RecurrentSelectionBreedingProgram.rst", "_autosummary/pybrops.breed.arch.RecurrentSelectionBreedingProgram.RecurrentSelectionBreedingProgram.rst", "_autosummary/pybrops.breed.arch.RecurrentSelectionBreedingProgram.check_is_RecurrentSelectionBreedingProgram.rst", "_autosummary/pybrops.breed.op.rst", "_autosummary/pybrops.breed.op.eval.rst", "_autosummary/pybrops.breed.op.eval.EvaluationOperator.rst", "_autosummary/pybrops.breed.op.eval.EvaluationOperator.EvaluationOperator.rst", "_autosummary/pybrops.breed.op.eval.EvaluationOperator.check_is_EvaluationOperator.rst", "_autosummary/pybrops.breed.op.init.rst", "_autosummary/pybrops.breed.op.init.InitializationOperator.rst", "_autosummary/pybrops.breed.op.init.InitializationOperator.InitializationOperator.rst", "_autosummary/pybrops.breed.op.init.InitializationOperator.check_is_InitializationOperator.rst", "_autosummary/pybrops.breed.op.log.rst", "_autosummary/pybrops.breed.op.log.Logbook.rst", "_autosummary/pybrops.breed.op.log.Logbook.Logbook.rst", "_autosummary/pybrops.breed.op.log.Logbook.check_is_Logbook.rst", "_autosummary/pybrops.breed.op.mate.rst", "_autosummary/pybrops.breed.op.mate.MatingOperator.rst", "_autosummary/pybrops.breed.op.mate.MatingOperator.MatingOperator.rst", "_autosummary/pybrops.breed.op.mate.MatingOperator.check_is_MatingOperator.rst", "_autosummary/pybrops.breed.op.psel.rst", "_autosummary/pybrops.breed.op.psel.ParentSelectionOperator.rst", "_autosummary/pybrops.breed.op.psel.ParentSelectionOperator.ParentSelectionOperator.rst", "_autosummary/pybrops.breed.op.psel.ParentSelectionOperator.check_is_ParentSelectionOperator.rst", "_autosummary/pybrops.breed.op.ssel.rst", "_autosummary/pybrops.breed.op.ssel.SurvivorSelectionOperator.rst", "_autosummary/pybrops.breed.op.ssel.SurvivorSelectionOperator.SurvivorSelectionOperator.rst", "_autosummary/pybrops.breed.op.ssel.SurvivorSelectionOperator.check_is_SurvivorSelectionOperator.rst", "_autosummary/pybrops.breed.prot.rst", "_autosummary/pybrops.breed.prot.bv.rst", "_autosummary/pybrops.breed.prot.bv.BreedingValueProtocol.rst", "_autosummary/pybrops.breed.prot.bv.BreedingValueProtocol.BreedingValueProtocol.rst", "_autosummary/pybrops.breed.prot.bv.BreedingValueProtocol.check_is_BreedingValueProtocol.rst", "_autosummary/pybrops.breed.prot.bv.MeanPhenotypicBreedingValue.rst", "_autosummary/pybrops.breed.prot.bv.MeanPhenotypicBreedingValue.MeanPhenotypicBreedingValue.rst", "_autosummary/pybrops.breed.prot.bv.TrueBreedingValue.rst", "_autosummary/pybrops.breed.prot.bv.TrueBreedingValue.TrueBreedingValue.rst", "_autosummary/pybrops.breed.prot.gt.rst", "_autosummary/pybrops.breed.prot.gt.DenseUnphasedGenotyping.rst", "_autosummary/pybrops.breed.prot.gt.DenseUnphasedGenotyping.DenseUnphasedGenotyping.rst", "_autosummary/pybrops.breed.prot.gt.GenotypingProtocol.rst", "_autosummary/pybrops.breed.prot.gt.GenotypingProtocol.GenotypingProtocol.rst", "_autosummary/pybrops.breed.prot.gt.GenotypingProtocol.check_is_GenotypingProtocol.rst", "_autosummary/pybrops.breed.prot.mate.rst", "_autosummary/pybrops.breed.prot.mate.FourWayCross.rst", "_autosummary/pybrops.breed.prot.mate.FourWayCross.FourWayCross.rst", "_autosummary/pybrops.breed.prot.mate.FourWayCross.check_is_FourWayCross.rst", "_autosummary/pybrops.breed.prot.mate.FourWayDHCross.rst", "_autosummary/pybrops.breed.prot.mate.FourWayDHCross.FourWayDHCross.rst", "_autosummary/pybrops.breed.prot.mate.FourWayDHCross.check_is_FourWayDHCross.rst", "_autosummary/pybrops.breed.prot.mate.MatingProtocol.rst", "_autosummary/pybrops.breed.prot.mate.MatingProtocol.MatingProtocol.rst", "_autosummary/pybrops.breed.prot.mate.MatingProtocol.check_is_MatingProtocol.rst", "_autosummary/pybrops.breed.prot.mate.SelfCross.rst", "_autosummary/pybrops.breed.prot.mate.SelfCross.SelfCross.rst", "_autosummary/pybrops.breed.prot.mate.SelfCross.check_is_SelfCross.rst", "_autosummary/pybrops.breed.prot.mate.ThreeWayCross.rst", "_autosummary/pybrops.breed.prot.mate.ThreeWayCross.ThreeWayCross.rst", "_autosummary/pybrops.breed.prot.mate.ThreeWayCross.check_is_ThreeWayCross.rst", "_autosummary/pybrops.breed.prot.mate.ThreeWayDHCross.rst", "_autosummary/pybrops.breed.prot.mate.ThreeWayDHCross.ThreeWayDHCross.rst", "_autosummary/pybrops.breed.prot.mate.ThreeWayDHCross.check_is_ThreeWayDHCross.rst", "_autosummary/pybrops.breed.prot.mate.TwoWayCross.rst", "_autosummary/pybrops.breed.prot.mate.TwoWayCross.TwoWayCross.rst", "_autosummary/pybrops.breed.prot.mate.TwoWayCross.check_is_TwoWayCross.rst", "_autosummary/pybrops.breed.prot.mate.TwoWayDHCross.rst", "_autosummary/pybrops.breed.prot.mate.TwoWayDHCross.TwoWayDHCross.rst", "_autosummary/pybrops.breed.prot.mate.TwoWayDHCross.check_is_TwoWayDHCross.rst", "_autosummary/pybrops.breed.prot.mate.util.rst", "_autosummary/pybrops.breed.prot.mate.util.mat_dh.rst", "_autosummary/pybrops.breed.prot.mate.util.mat_mate.rst", "_autosummary/pybrops.breed.prot.mate.util.mat_meiosis.rst", "_autosummary/pybrops.breed.prot.pt.rst", "_autosummary/pybrops.breed.prot.pt.G_E_Phenotyping.rst", "_autosummary/pybrops.breed.prot.pt.G_E_Phenotyping.G_E_Phenotyping.rst", "_autosummary/pybrops.breed.prot.pt.PhenotypingProtocol.rst", "_autosummary/pybrops.breed.prot.pt.PhenotypingProtocol.PhenotypingProtocol.rst", "_autosummary/pybrops.breed.prot.pt.PhenotypingProtocol.check_is_PhenotypingProtocol.rst", "_autosummary/pybrops.breed.prot.pt.TruePhenotyping.rst", "_autosummary/pybrops.breed.prot.pt.TruePhenotyping.TruePhenotyping.rst", "_autosummary/pybrops.breed.prot.sel.rst", "_autosummary/pybrops.breed.prot.sel.BinaryMateSelectionProtocol.rst", "_autosummary/pybrops.breed.prot.sel.BinaryMateSelectionProtocol.BinaryMateSelectionProtocol.rst", "_autosummary/pybrops.breed.prot.sel.BinaryMateSelectionProtocol.check_is_BinaryMateSelectionProtocol.rst", "_autosummary/pybrops.breed.prot.sel.BinarySelectionProtocol.rst", "_autosummary/pybrops.breed.prot.sel.BinarySelectionProtocol.BinarySelectionProtocol.rst", "_autosummary/pybrops.breed.prot.sel.BinarySelectionProtocol.check_is_BinarySelectionProtocol.rst", "_autosummary/pybrops.breed.prot.sel.EstimatedBreedingValueSelection.rst", "_autosummary/pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueBinarySelection.rst", "_autosummary/pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueIntegerSelection.rst", "_autosummary/pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueRealSelection.rst", "_autosummary/pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueSelectionMixin.rst", "_autosummary/pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueSubsetSelection.rst", "_autosummary/pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.rst", "_autosummary/pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueBinarySelection.rst", "_autosummary/pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueIntegerSelection.rst", "_autosummary/pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueRealSelection.rst", "_autosummary/pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueSelectionMixin.rst", "_autosummary/pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueSubsetSelection.rst", "_autosummary/pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.rst", "_autosummary/pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueBinarySelection.rst", "_autosummary/pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueIntegerSelection.rst", "_autosummary/pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueRealSelection.rst", "_autosummary/pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueSelectionMixin.rst", "_autosummary/pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueSubsetSelection.rst", "_autosummary/pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.rst", "_autosummary/pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueBinarySelection.rst", "_autosummary/pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueIntegerSelection.rst", "_autosummary/pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueRealSelection.rst", "_autosummary/pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionMixin.rst", "_autosummary/pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueSubsetSelection.rst", "_autosummary/pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.rst", "_autosummary/pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueBinarySelection.rst", "_autosummary/pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueIntegerSelection.rst", "_autosummary/pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueRealSelection.rst", "_autosummary/pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueSelectionMixin.rst", "_autosummary/pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueSubsetSelection.rst", "_autosummary/pybrops.breed.prot.sel.GenotypeBuilderSelection.rst", "_autosummary/pybrops.breed.prot.sel.GenotypeBuilderSelection.GenotypeBuilderSelectionMixin.rst", "_autosummary/pybrops.breed.prot.sel.GenotypeBuilderSelection.GenotypeBuilderSubsetSelection.rst", "_autosummary/pybrops.breed.prot.sel.IntegerMateSelectionProtocol.rst", "_autosummary/pybrops.breed.prot.sel.IntegerMateSelectionProtocol.IntegerMateSelectionProtocol.rst", "_autosummary/pybrops.breed.prot.sel.IntegerMateSelectionProtocol.check_is_IntegerMateSelectionProtocol.rst", "_autosummary/pybrops.breed.prot.sel.IntegerSelectionProtocol.rst", "_autosummary/pybrops.breed.prot.sel.IntegerSelectionProtocol.IntegerSelectionProtocol.rst", "_autosummary/pybrops.breed.prot.sel.IntegerSelectionProtocol.check_is_IntegerSelectionProtocol.rst", "_autosummary/pybrops.breed.prot.sel.L1NormGenomicSelection.rst", "_autosummary/pybrops.breed.prot.sel.L2NormGenomicSelection.rst", "_autosummary/pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicBinarySelection.rst", "_autosummary/pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicIntegerSelection.rst", "_autosummary/pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicRealSelection.rst", "_autosummary/pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicSelectionMixin.rst", "_autosummary/pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicSubsetSelection.rst", "_autosummary/pybrops.breed.prot.sel.MateSelectionProtocol.rst", "_autosummary/pybrops.breed.prot.sel.MateSelectionProtocol.MateSelectionProtocol.rst", "_autosummary/pybrops.breed.prot.sel.MateSelectionProtocol.check_is_MateSelectionProtocol.rst", "_autosummary/pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection.rst", "_autosummary/pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection.MeanExpectedHeterozygosityBinarySelection.rst", "_autosummary/pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection.MeanExpectedHeterozygosityIntegerSelection.rst", "_autosummary/pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection.MeanExpectedHeterozygosityRealSelection.rst", "_autosummary/pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection.MeanExpectedHeterozygositySelectionMixin.rst", "_autosummary/pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection.MeanExpectedHeterozygositySubsetSelection.rst", "_autosummary/pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.rst", "_autosummary/pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipBinarySelection.rst", "_autosummary/pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipIntegerSelection.rst", "_autosummary/pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipRealSelection.rst", "_autosummary/pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipSelectionMixin.rst", "_autosummary/pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipSubsetSelection.rst", "_autosummary/pybrops.breed.prot.sel.MultiObjectiveGenomicSelection.rst", "_autosummary/pybrops.breed.prot.sel.MultiObjectiveGenomicSelection.MultiObjectiveGenomicSelectionMixin.rst", "_autosummary/pybrops.breed.prot.sel.MultiObjectiveGenomicSelection.MultiObjectiveGenomicSubsetSelection.rst", "_autosummary/pybrops.breed.prot.sel.OptimalContributionSelection.rst", "_autosummary/pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionBinarySelection.rst", "_autosummary/pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionIntegerSelection.rst", "_autosummary/pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionRealSelection.rst", "_autosummary/pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionSelectionMixin.rst", "_autosummary/pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionSubsetSelection.rst", "_autosummary/pybrops.breed.prot.sel.OptimalHaploidValueSelection.rst", "_autosummary/pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueBinarySelection.rst", "_autosummary/pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueIntegerSelection.rst", "_autosummary/pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueRealSelection.rst", "_autosummary/pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueSelectionMixin.rst", "_autosummary/pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueSubsetSelection.rst", "_autosummary/pybrops.breed.prot.sel.OptimalPopulationValueSelection.rst", "_autosummary/pybrops.breed.prot.sel.OptimalPopulationValueSelection.OptimalPopulationValueSelectionMixin.rst", "_autosummary/pybrops.breed.prot.sel.OptimalPopulationValueSelection.OptimalPopulationValueSubsetSelection.rst", "_autosummary/pybrops.breed.prot.sel.RandomSelection.rst", "_autosummary/pybrops.breed.prot.sel.RandomSelection.RandomBinarySelection.rst", "_autosummary/pybrops.breed.prot.sel.RandomSelection.RandomIntegerSelection.rst", "_autosummary/pybrops.breed.prot.sel.RandomSelection.RandomRealSelection.rst", "_autosummary/pybrops.breed.prot.sel.RandomSelection.RandomSelectionMixin.rst", "_autosummary/pybrops.breed.prot.sel.RandomSelection.RandomSubsetSelection.rst", "_autosummary/pybrops.breed.prot.sel.RealMateSelectionProtocol.rst", "_autosummary/pybrops.breed.prot.sel.RealMateSelectionProtocol.RealMateSelectionProtocol.rst", "_autosummary/pybrops.breed.prot.sel.RealMateSelectionProtocol.check_is_RealMateSelectionProtocol.rst", "_autosummary/pybrops.breed.prot.sel.RealSelectionProtocol.rst", "_autosummary/pybrops.breed.prot.sel.RealSelectionProtocol.RealSelectionProtocol.rst", "_autosummary/pybrops.breed.prot.sel.RealSelectionProtocol.check_is_RealSelectionProtocol.rst", "_autosummary/pybrops.breed.prot.sel.SelectionProtocol.rst", "_autosummary/pybrops.breed.prot.sel.SelectionProtocol.SelectionProtocol.rst", "_autosummary/pybrops.breed.prot.sel.SelectionProtocol.check_is_SelectionProtocol.rst", "_autosummary/pybrops.breed.prot.sel.SubsetMateSelectionProtocol.rst", "_autosummary/pybrops.breed.prot.sel.SubsetMateSelectionProtocol.SubsetMateSelectionProtocol.rst", "_autosummary/pybrops.breed.prot.sel.SubsetMateSelectionProtocol.check_is_SubsetMateSelectionProtocol.rst", "_autosummary/pybrops.breed.prot.sel.SubsetSelectionProtocol.rst", "_autosummary/pybrops.breed.prot.sel.SubsetSelectionProtocol.SubsetSelectionProtocol.rst", "_autosummary/pybrops.breed.prot.sel.SubsetSelectionProtocol.check_is_SubsetSelectionProtocol.rst", "_autosummary/pybrops.breed.prot.sel.UnconstrainedGeneralized1NormGenomicSelection.rst", "_autosummary/pybrops.breed.prot.sel.UnconstrainedGeneralized1NormGenomicSelection.Generalized1NormGenomicSelection.rst", "_autosummary/pybrops.breed.prot.sel.UnconstrainedMultiObjectiveGenomicMating.rst", "_autosummary/pybrops.breed.prot.sel.UnconstrainedMultiObjectiveGenomicMating.MultiObjectiveGenomicMating.rst", "_autosummary/pybrops.breed.prot.sel.UnconstrainedPopulationAlleleFrequencyDistanceSelection.rst", "_autosummary/pybrops.breed.prot.sel.UnconstrainedPopulationAlleleFrequencyDistanceSelection.PopulationAlleleFrequencyDistanceSelection.rst", "_autosummary/pybrops.breed.prot.sel.UnconstrainedPopulationAlleleUnavailabilitySelection.rst", "_autosummary/pybrops.breed.prot.sel.UnconstrainedPopulationAlleleUnavailabilitySelection.PopulationAlleleUnavailabilitySelection.rst", "_autosummary/pybrops.breed.prot.sel.UnconstrainedSelectionProtocol.rst", "_autosummary/pybrops.breed.prot.sel.UnconstrainedSelectionProtocol.UnconstrainedSelectionProtocol.rst", "_autosummary/pybrops.breed.prot.sel.UnconstrainedSelectionProtocol.check_is_SelectionProtocol.rst", "_autosummary/pybrops.breed.prot.sel.UsefulnessCriterionSelection.rst", "_autosummary/pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionBinarySelection.rst", "_autosummary/pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionIntegerSelection.rst", "_autosummary/pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionRealSelection.rst", "_autosummary/pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionSelectionMixin.rst", "_autosummary/pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionSubsetSelection.rst", "_autosummary/pybrops.breed.prot.sel.WeightedGenomicSelection.rst", "_autosummary/pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicBinarySelection.rst", "_autosummary/pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicIntegerSelection.rst", "_autosummary/pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicRealSelection.rst", "_autosummary/pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicSubsetSelection.rst", "_autosummary/pybrops.breed.prot.sel.cfg.rst", "_autosummary/pybrops.breed.prot.sel.cfg.BinaryMateSelectionConfiguration.rst", "_autosummary/pybrops.breed.prot.sel.cfg.BinaryMateSelectionConfiguration.BinaryMateSelectionConfiguration.rst", "_autosummary/pybrops.breed.prot.sel.cfg.BinarySelectionConfiguration.rst", "_autosummary/pybrops.breed.prot.sel.cfg.BinarySelectionConfiguration.BinarySelectionConfiguration.rst", "_autosummary/pybrops.breed.prot.sel.cfg.IntegerMateSelectionConfiguration.rst", "_autosummary/pybrops.breed.prot.sel.cfg.IntegerMateSelectionConfiguration.IntegerMateSelectionConfiguration.rst", "_autosummary/pybrops.breed.prot.sel.cfg.IntegerSelectionConfiguration.rst", "_autosummary/pybrops.breed.prot.sel.cfg.IntegerSelectionConfiguration.IntegerSelectionConfiguration.rst", "_autosummary/pybrops.breed.prot.sel.cfg.MateSelectionConfiguration.rst", "_autosummary/pybrops.breed.prot.sel.cfg.MateSelectionConfiguration.MateSelectionConfiguration.rst", "_autosummary/pybrops.breed.prot.sel.cfg.MateSelectionConfiguration.check_is_MateSelectionConfiguration.rst", "_autosummary/pybrops.breed.prot.sel.cfg.RealMateSelectionConfiguration.rst", "_autosummary/pybrops.breed.prot.sel.cfg.RealMateSelectionConfiguration.RealMateSelectionConfiguration.rst", "_autosummary/pybrops.breed.prot.sel.cfg.RealSelectionConfiguration.rst", "_autosummary/pybrops.breed.prot.sel.cfg.RealSelectionConfiguration.RealSelectionConfiguration.rst", "_autosummary/pybrops.breed.prot.sel.cfg.SampledSelectionConfigurationMixin.rst", "_autosummary/pybrops.breed.prot.sel.cfg.SampledSelectionConfigurationMixin.SampledSelectionConfigurationMixin.rst", "_autosummary/pybrops.breed.prot.sel.cfg.SelectionConfiguration.rst", "_autosummary/pybrops.breed.prot.sel.cfg.SelectionConfiguration.SelectionConfiguration.rst", "_autosummary/pybrops.breed.prot.sel.cfg.SelectionConfiguration.check_is_SelectionConfiguration.rst", "_autosummary/pybrops.breed.prot.sel.cfg.SimpleMateSelectionConfiguration.rst", "_autosummary/pybrops.breed.prot.sel.cfg.SimpleMateSelectionConfiguration.SimpleMateSelectionConfiguration.rst", "_autosummary/pybrops.breed.prot.sel.cfg.SimpleSelectionConfiguration.rst", "_autosummary/pybrops.breed.prot.sel.cfg.SimpleSelectionConfiguration.SimpleSelectionConfiguration.rst", "_autosummary/pybrops.breed.prot.sel.cfg.SubsetMateSelectionConfiguration.rst", "_autosummary/pybrops.breed.prot.sel.cfg.SubsetMateSelectionConfiguration.SubsetMateSelectionConfiguration.rst", "_autosummary/pybrops.breed.prot.sel.cfg.SubsetSelectionConfiguration.rst", "_autosummary/pybrops.breed.prot.sel.cfg.SubsetSelectionConfiguration.SubsetSelectionConfiguration.rst", "_autosummary/pybrops.breed.prot.sel.prob.rst", "_autosummary/pybrops.breed.prot.sel.prob.BinaryMateSelectionProblem.rst", "_autosummary/pybrops.breed.prot.sel.prob.BinaryMateSelectionProblem.BinaryMateSelectionProblem.rst", "_autosummary/pybrops.breed.prot.sel.prob.BinarySelectionProblem.rst", "_autosummary/pybrops.breed.prot.sel.prob.BinarySelectionProblem.BinarySelectionProblem.rst", "_autosummary/pybrops.breed.prot.sel.prob.BinarySelectionProblem.check_is_BinarySelectionProblem.rst", "_autosummary/pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.rst", "_autosummary/pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueBinarySelectionProblem.rst", "_autosummary/pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueIntegerSelectionProblem.rst", "_autosummary/pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueRealSelectionProblem.rst", "_autosummary/pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueSelectionProblemMixin.rst", "_autosummary/pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueSubsetSelectionProblem.rst", "_autosummary/pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.rst", "_autosummary/pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueBinarySelectionProblem.rst", "_autosummary/pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueIntegerSelectionProblem.rst", "_autosummary/pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueRealSelectionProblem.rst", "_autosummary/pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueSelectionProblemMixin.rst", "_autosummary/pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueSubsetSelectionProblem.rst", "_autosummary/pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.rst", "_autosummary/pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueBinarySelectionProblem.rst", "_autosummary/pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueIntegerSelectionProblem.rst", "_autosummary/pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueRealSelectionProblem.rst", "_autosummary/pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueSelectionProblemMixin.rst", "_autosummary/pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueSubsetSelectionProblem.rst", "_autosummary/pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.rst", "_autosummary/pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueBinarySelectionProblem.rst", "_autosummary/pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueIntegerSelectionProblem.rst", "_autosummary/pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueRealSelectionProblem.rst", "_autosummary/pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblemMixin.rst", "_autosummary/pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueSubsetSelectionProblem.rst", "_autosummary/pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.rst", "_autosummary/pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueBinarySelectionProblem.rst", "_autosummary/pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueIntegerSelectionProblem.rst", "_autosummary/pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueRealSelectionProblem.rst", "_autosummary/pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueSelectionProblemMixin.rst", "_autosummary/pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueSubsetSelectionProblem.rst", "_autosummary/pybrops.breed.prot.sel.prob.GenotypeBuilderSelectionProblem.rst", "_autosummary/pybrops.breed.prot.sel.prob.GenotypeBuilderSelectionProblem.GenotypeBuilderSelectionProblemMixin.rst", "_autosummary/pybrops.breed.prot.sel.prob.GenotypeBuilderSelectionProblem.GenotypeBuilderSubsetSelectionProblem.rst", "_autosummary/pybrops.breed.prot.sel.prob.IntegerMateSelectionProblem.rst", "_autosummary/pybrops.breed.prot.sel.prob.IntegerMateSelectionProblem.IntegerMateSelectionProblem.rst", "_autosummary/pybrops.breed.prot.sel.prob.IntegerSelectionProblem.rst", "_autosummary/pybrops.breed.prot.sel.prob.IntegerSelectionProblem.IntegerSelectionProblem.rst", "_autosummary/pybrops.breed.prot.sel.prob.IntegerSelectionProblem.check_is_IntegerSelectionProblem.rst", "_autosummary/pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.rst", "_autosummary/pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicBinarySelectionProblem.rst", "_autosummary/pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicIntegerSelectionProblem.rst", "_autosummary/pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicRealSelectionProblem.rst", "_autosummary/pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicSelectionProblemMixin.rst", "_autosummary/pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicSubsetSelectionProblem.rst", "_autosummary/pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.rst", "_autosummary/pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicBinarySelectionProblem.rst", "_autosummary/pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicIntegerSelectionProblem.rst", "_autosummary/pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicRealSelectionProblem.rst", "_autosummary/pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicSelectionProblemMixin.rst", "_autosummary/pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicSubsetSelectionProblem.rst", "_autosummary/pybrops.breed.prot.sel.prob.MateSelectionProblem.rst", "_autosummary/pybrops.breed.prot.sel.prob.MateSelectionProblem.MateSelectionProblem.rst", "_autosummary/pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.rst", "_autosummary/pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygosityBinarySelectionProblem.rst", "_autosummary/pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygosityIntegerSelectionProblem.rst", "_autosummary/pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygosityRealSelectionProblem.rst", "_autosummary/pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygositySelectionProblemMixin.rst", "_autosummary/pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygositySubsetSelectionProblem.rst", "_autosummary/pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.rst", "_autosummary/pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipBinarySelectionProblem.rst", "_autosummary/pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipIntegerSelectionProblem.rst", "_autosummary/pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipRealSelectionProblem.rst", "_autosummary/pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipSelectionProblemMixin.rst", "_autosummary/pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipSubsetSelectionProblem.rst", "_autosummary/pybrops.breed.prot.sel.prob.MultiObjectiveGenomicMatingProblem.rst", "_autosummary/pybrops.breed.prot.sel.prob.MultiObjectiveGenomicMatingProblem.MultiObjectiveGenomicMatingProblemMixin.rst", "_autosummary/pybrops.breed.prot.sel.prob.MultiObjectiveGenomicMatingProblem.MultiObjectiveGenomicSubsetMatingProblem.rst", "_autosummary/pybrops.breed.prot.sel.prob.MultiObjectiveGenomicSelectionProblem.rst", "_autosummary/pybrops.breed.prot.sel.prob.MultiObjectiveGenomicSelectionProblem.MultiObjectiveGenomicSelectionProblemMixin.rst", "_autosummary/pybrops.breed.prot.sel.prob.MultiObjectiveGenomicSelectionProblem.MultiObjectiveGenomicSubsetSelectionProblem.rst", "_autosummary/pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.rst", "_autosummary/pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionBinarySelectionProblem.rst", "_autosummary/pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionIntegerSelectionProblem.rst", "_autosummary/pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionRealSelectionProblem.rst", "_autosummary/pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionSelectionProblemMixin.rst", "_autosummary/pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionSubsetSelectionProblem.rst", "_autosummary/pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.rst", "_autosummary/pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueBinarySelectionProblem.rst", "_autosummary/pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueIntegerSelectionProblem.rst", "_autosummary/pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueRealSelectionProblem.rst", "_autosummary/pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueSelectionProblemMixin.rst", "_autosummary/pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueSubsetSelectionProblem.rst", "_autosummary/pybrops.breed.prot.sel.prob.OptimalPopulationValueSelectionProblem.rst", "_autosummary/pybrops.breed.prot.sel.prob.OptimalPopulationValueSelectionProblem.OptimalPopulationValueSelectionProblemMixin.rst", "_autosummary/pybrops.breed.prot.sel.prob.OptimalPopulationValueSelectionProblem.OptimalPopulationValueSubsetSelectionProblem.rst", "_autosummary/pybrops.breed.prot.sel.prob.RandomSelectionProblem.rst", "_autosummary/pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomBinarySelectionProblem.rst", "_autosummary/pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomIntegerSelectionProblem.rst", "_autosummary/pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomRealSelectionProblem.rst", "_autosummary/pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomSelectionProblemMixin.rst", "_autosummary/pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomSubsetSelectionProblem.rst", "_autosummary/pybrops.breed.prot.sel.prob.RealLookAheadGeneralizedWeightedGenomicSelectionProblem.rst", "_autosummary/pybrops.breed.prot.sel.prob.RealLookAheadGeneralizedWeightedGenomicSelectionProblem.RealLookAheadGeneralizedWeightedGenomicSelectionProblem.rst", "_autosummary/pybrops.breed.prot.sel.prob.RealMateSelectionProblem.rst", "_autosummary/pybrops.breed.prot.sel.prob.RealMateSelectionProblem.RealMateSelectionProblem.rst", "_autosummary/pybrops.breed.prot.sel.prob.RealSelectionProblem.rst", "_autosummary/pybrops.breed.prot.sel.prob.RealSelectionProblem.RealSelectionProblem.rst", "_autosummary/pybrops.breed.prot.sel.prob.RealSelectionProblem.check_is_RealSelectionProblem.rst", "_autosummary/pybrops.breed.prot.sel.prob.SelectionProblem.rst", "_autosummary/pybrops.breed.prot.sel.prob.SelectionProblem.SelectionProblem.rst", "_autosummary/pybrops.breed.prot.sel.prob.SelectionProblem.check_is_SelectionProblem.rst", "_autosummary/pybrops.breed.prot.sel.prob.SubsetMateSelectionProblem.rst", "_autosummary/pybrops.breed.prot.sel.prob.SubsetMateSelectionProblem.SubsetMateSelectionProblem.rst", "_autosummary/pybrops.breed.prot.sel.prob.SubsetSelectionProblem.rst", "_autosummary/pybrops.breed.prot.sel.prob.SubsetSelectionProblem.SubsetSelectionProblem.rst", "_autosummary/pybrops.breed.prot.sel.prob.SubsetSelectionProblem.check_is_SubsetSelectionProblem.rst", "_autosummary/pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.rst", "_autosummary/pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionBinaryMateSelectionProblem.rst", "_autosummary/pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionIntegerMateSelectionProblem.rst", "_autosummary/pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionRealMateSelectionProblem.rst", "_autosummary/pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionSelectionProblemMixin.rst", "_autosummary/pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionSubsetMateSelectionProblem.rst", "_autosummary/pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.rst", "_autosummary/pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicBinarySelectionProblem.rst", "_autosummary/pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicIntegerSelectionProblem.rst", "_autosummary/pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicRealSelectionProblem.rst", "_autosummary/pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicSubsetSelectionProblem.rst", "_autosummary/pybrops.breed.prot.sel.prob.trans.rst", "_autosummary/pybrops.breed.prot.sel.prob.trans.trans_decnvec_sum_eq.rst", "_autosummary/pybrops.breed.prot.sel.prob.trans.trans_dot.rst", "_autosummary/pybrops.breed.prot.sel.prob.trans.trans_empty.rst", "_autosummary/pybrops.breed.prot.sel.prob.trans.trans_identity.rst", "_autosummary/pybrops.breed.prot.sel.prob.trans.trans_ndpt_to_vec_dist.rst", "_autosummary/pybrops.breed.prot.sel.prob.trans.trans_sum.rst", "_autosummary/pybrops.breed.prot.sel.soln.rst", "_autosummary/pybrops.breed.prot.sel.soln.BinaryMateSelectionSolution.rst", "_autosummary/pybrops.breed.prot.sel.soln.BinaryMateSelectionSolution.BinaryMateSelectionSolution.rst", "_autosummary/pybrops.breed.prot.sel.soln.BinaryMateSelectionSolution.check_is_BinaryMateSelectionSolution.rst", "_autosummary/pybrops.breed.prot.sel.soln.BinarySelectionSolution.rst", "_autosummary/pybrops.breed.prot.sel.soln.BinarySelectionSolution.BinarySelectionSolution.rst", "_autosummary/pybrops.breed.prot.sel.soln.BinarySelectionSolution.check_is_BinarySelectionSolution.rst", "_autosummary/pybrops.breed.prot.sel.soln.IntegerMateSelectionSolution.rst", "_autosummary/pybrops.breed.prot.sel.soln.IntegerMateSelectionSolution.IntegerMateSelectionSolution.rst", "_autosummary/pybrops.breed.prot.sel.soln.IntegerMateSelectionSolution.check_is_IntegerMateSelectionSolution.rst", "_autosummary/pybrops.breed.prot.sel.soln.IntegerSelectionSolution.rst", "_autosummary/pybrops.breed.prot.sel.soln.IntegerSelectionSolution.IntegerSelectionSolution.rst", "_autosummary/pybrops.breed.prot.sel.soln.IntegerSelectionSolution.check_is_IntegerSelectionSolution.rst", "_autosummary/pybrops.breed.prot.sel.soln.MateSelectionSolution.rst", "_autosummary/pybrops.breed.prot.sel.soln.MateSelectionSolution.MateSelectionSolution.rst", "_autosummary/pybrops.breed.prot.sel.soln.MateSelectionSolution.check_is_MateSelectionSolution.rst", "_autosummary/pybrops.breed.prot.sel.soln.RealMateSelectionSolution.rst", "_autosummary/pybrops.breed.prot.sel.soln.RealMateSelectionSolution.RealMateSelectionSolution.rst", "_autosummary/pybrops.breed.prot.sel.soln.RealMateSelectionSolution.check_is_RealMateSelectionSolution.rst", "_autosummary/pybrops.breed.prot.sel.soln.RealSelectionSolution.rst", "_autosummary/pybrops.breed.prot.sel.soln.RealSelectionSolution.RealSelectionSolution.rst", "_autosummary/pybrops.breed.prot.sel.soln.RealSelectionSolution.check_is_RealSelectionSolution.rst", "_autosummary/pybrops.breed.prot.sel.soln.SelectionSolution.rst", "_autosummary/pybrops.breed.prot.sel.soln.SelectionSolution.SelectionSolution.rst", "_autosummary/pybrops.breed.prot.sel.soln.SelectionSolution.check_is_SelectionSolution.rst", "_autosummary/pybrops.breed.prot.sel.soln.SubsetMateSelectionSolution.rst", "_autosummary/pybrops.breed.prot.sel.soln.SubsetMateSelectionSolution.SubsetMateSelectionSolution.rst", "_autosummary/pybrops.breed.prot.sel.soln.SubsetMateSelectionSolution.check_is_SubsetMateSelectionSolution.rst", "_autosummary/pybrops.breed.prot.sel.soln.SubsetSelectionSolution.rst", "_autosummary/pybrops.breed.prot.sel.soln.SubsetSelectionSolution.SubsetSelectionSolution.rst", "_autosummary/pybrops.breed.prot.sel.soln.SubsetSelectionSolution.check_is_SubsetSelectionSolution.rst", "_autosummary/pybrops.breed.prot.sel.targetfn.rst", "_autosummary/pybrops.breed.prot.sel.targetfn.target_negative.rst", "_autosummary/pybrops.breed.prot.sel.targetfn.target_positive.rst", "_autosummary/pybrops.breed.prot.sel.targetfn.target_stabilizing.rst", "_autosummary/pybrops.breed.prot.sel.transfn.rst", "_autosummary/pybrops.breed.prot.sel.transfn.trans_dot.rst", "_autosummary/pybrops.breed.prot.sel.transfn.trans_flatten.rst", "_autosummary/pybrops.breed.prot.sel.transfn.trans_identity_unconstrained.rst", "_autosummary/pybrops.breed.prot.sel.transfn.trans_inbmax_penalty.rst", "_autosummary/pybrops.breed.prot.sel.transfn.trans_max_inbreeding_constraint.rst", "_autosummary/pybrops.breed.prot.sel.transfn.trans_ndpt_to_vec_dist.rst", "_autosummary/pybrops.breed.prot.sel.transfn.trans_sum.rst", "_autosummary/pybrops.breed.prot.sel.transfn.trans_sum_inbmax_penalty.rst", "_autosummary/pybrops.breed.prot.sel.weightfn.rst", "_autosummary/pybrops.breed.prot.sel.weightfn.weight_absolute.rst", "_autosummary/pybrops.breed.prot.sel.weightfn.weight_one.rst", "_autosummary/pybrops.core.rst", "_autosummary/pybrops.core.error.rst", "_autosummary/pybrops.core.error.error_attr_python.rst", "_autosummary/pybrops.core.error.error_attr_python.check_is_callable.rst", "_autosummary/pybrops.core.error.error_attr_python.check_is_iterable.rst", "_autosummary/pybrops.core.error.error_attr_python.error_readonly.rst", "_autosummary/pybrops.core.error.error_generic_numpy.rst", "_autosummary/pybrops.core.error.error_generic_numpy.generic_check_ndarray_eq.rst", "_autosummary/pybrops.core.error.error_generic_numpy.generic_check_ndarray_is_square.rst", "_autosummary/pybrops.core.error.error_generic_numpy.generic_check_ndarray_ndim.rst", "_autosummary/pybrops.core.error.error_generic_numpy.generic_check_ndarray_ndim_gteq.rst", "_autosummary/pybrops.core.error.error_generic_numpy.generic_check_ndarray_shape.rst", "_autosummary/pybrops.core.error.error_generic_numpy.generic_check_ndarray_size.rst", "_autosummary/pybrops.core.error.error_generic_numpy.generic_check_ndarray_sum.rst", "_autosummary/pybrops.core.error.error_generic_python.rst", "_autosummary/pybrops.core.error.error_generic_python.generic_check_isinstance.rst", "_autosummary/pybrops.core.error.error_io_python.rst", "_autosummary/pybrops.core.error.error_io_python.check_directory_exists.rst", "_autosummary/pybrops.core.error.error_io_python.check_file_exists.rst", "_autosummary/pybrops.core.error.error_io_python.check_path_exists.rst", "_autosummary/pybrops.core.error.error_type_h5py.rst", "_autosummary/pybrops.core.error.error_type_h5py.check_is_h5py_File.rst", "_autosummary/pybrops.core.error.error_type_numpy.rst", "_autosummary/pybrops.core.error.error_type_numpy.check_is_Generator.rst", "_autosummary/pybrops.core.error.error_type_numpy.check_is_Generator_or_RandomState.rst", "_autosummary/pybrops.core.error.error_type_numpy.check_is_Integral_or_ndarray.rst", "_autosummary/pybrops.core.error.error_type_numpy.check_is_Number_or_ndarray.rst", "_autosummary/pybrops.core.error.error_type_numpy.check_is_RandomState.rst", "_autosummary/pybrops.core.error.error_type_numpy.check_is_Real_or_ndarray.rst", "_autosummary/pybrops.core.error.error_type_numpy.check_is_ndarray.rst", "_autosummary/pybrops.core.error.error_type_numpy.check_is_str_or_ndarray.rst", "_autosummary/pybrops.core.error.error_type_numpy.check_ndarray_dtype.rst", "_autosummary/pybrops.core.error.error_type_numpy.check_ndarray_dtype_is_bool.rst", "_autosummary/pybrops.core.error.error_type_numpy.check_ndarray_dtype_is_bool_or_integer.rst", "_autosummary/pybrops.core.error.error_type_numpy.check_ndarray_dtype_is_bool_or_number.rst", "_autosummary/pybrops.core.error.error_type_numpy.check_ndarray_dtype_is_float16.rst", "_autosummary/pybrops.core.error.error_type_numpy.check_ndarray_dtype_is_float32.rst", "_autosummary/pybrops.core.error.error_type_numpy.check_ndarray_dtype_is_float64.rst", "_autosummary/pybrops.core.error.error_type_numpy.check_ndarray_dtype_is_floating.rst", "_autosummary/pybrops.core.error.error_type_numpy.check_ndarray_dtype_is_int16.rst", "_autosummary/pybrops.core.error.error_type_numpy.check_ndarray_dtype_is_int32.rst", "_autosummary/pybrops.core.error.error_type_numpy.check_ndarray_dtype_is_int64.rst", "_autosummary/pybrops.core.error.error_type_numpy.check_ndarray_dtype_is_int8.rst", "_autosummary/pybrops.core.error.error_type_numpy.check_ndarray_dtype_is_integer.rst", "_autosummary/pybrops.core.error.error_type_numpy.check_ndarray_dtype_is_integer_or_floating.rst", "_autosummary/pybrops.core.error.error_type_numpy.check_ndarray_dtype_is_number.rst", "_autosummary/pybrops.core.error.error_type_numpy.check_ndarray_dtype_is_object.rst", "_autosummary/pybrops.core.error.error_type_numpy.check_ndarray_dtype_is_object_or_string.rst", "_autosummary/pybrops.core.error.error_type_numpy.check_ndarray_dtype_is_real.rst", "_autosummary/pybrops.core.error.error_type_numpy.check_ndarray_dtype_is_string.rst", "_autosummary/pybrops.core.error.error_type_numpy.check_ndarray_dtype_is_unicode.rst", "_autosummary/pybrops.core.error.error_type_pandas.rst", "_autosummary/pybrops.core.error.error_type_pandas.check_Series_all_type.rst", "_autosummary/pybrops.core.error.error_type_pandas.check_is_pandas_DataFrame.rst", "_autosummary/pybrops.core.error.error_type_python.rst", "_autosummary/pybrops.core.error.error_type_python.check_Sequence_all_type.rst", "_autosummary/pybrops.core.error.error_type_python.check_inherits.rst", "_autosummary/pybrops.core.error.error_type_python.check_is_Callable.rst", "_autosummary/pybrops.core.error.error_type_python.check_is_Complex.rst", "_autosummary/pybrops.core.error.error_type_python.check_is_Container.rst", "_autosummary/pybrops.core.error.error_type_python.check_is_Integral.rst", "_autosummary/pybrops.core.error.error_type_python.check_is_Integral_or_None.rst", "_autosummary/pybrops.core.error.error_type_python.check_is_Integral_or_inf.rst", "_autosummary/pybrops.core.error.error_type_python.check_is_Number.rst", "_autosummary/pybrops.core.error.error_type_python.check_is_Real.rst", "_autosummary/pybrops.core.error.error_type_python.check_is_Sequence.rst", "_autosummary/pybrops.core.error.error_type_python.check_is_array_like.rst", "_autosummary/pybrops.core.error.error_type_python.check_is_bool.rst", "_autosummary/pybrops.core.error.error_type_python.check_is_bytes.rst", "_autosummary/pybrops.core.error.error_type_python.check_is_class.rst", "_autosummary/pybrops.core.error.error_type_python.check_is_dict.rst", "_autosummary/pybrops.core.error.error_type_python.check_is_float.rst", "_autosummary/pybrops.core.error.error_type_python.check_is_frozenset.rst", "_autosummary/pybrops.core.error.error_type_python.check_is_int.rst", "_autosummary/pybrops.core.error.error_type_python.check_is_int_or_None.rst", "_autosummary/pybrops.core.error.error_type_python.check_is_int_or_inf.rst", "_autosummary/pybrops.core.error.error_type_python.check_is_list.rst", "_autosummary/pybrops.core.error.error_type_python.check_is_list_or_tuple.rst", "_autosummary/pybrops.core.error.error_type_python.check_is_range.rst", "_autosummary/pybrops.core.error.error_type_python.check_is_set.rst", "_autosummary/pybrops.core.error.error_type_python.check_is_str.rst", "_autosummary/pybrops.core.error.error_type_python.check_is_str_or_Integral.rst", "_autosummary/pybrops.core.error.error_type_python.check_is_str_or_Sequence.rst", "_autosummary/pybrops.core.error.error_type_python.check_is_str_or_iterable.rst", "_autosummary/pybrops.core.error.error_type_python.check_is_tuple.rst", "_autosummary/pybrops.core.error.error_type_python.check_is_type.rst", "_autosummary/pybrops.core.error.error_type_python.check_isinstance.rst", "_autosummary/pybrops.core.error.error_value_h5py.rst", "_autosummary/pybrops.core.error.error_value_h5py.check_h5py_File_has_group.rst", "_autosummary/pybrops.core.error.error_value_h5py.check_h5py_File_has_groups.rst", "_autosummary/pybrops.core.error.error_value_h5py.check_h5py_File_is_writable.rst", "_autosummary/pybrops.core.error.error_value_numpy.rst", "_autosummary/pybrops.core.error.error_value_numpy.check_ndarray_all_gt.rst", "_autosummary/pybrops.core.error.error_value_numpy.check_ndarray_all_gteq.rst", "_autosummary/pybrops.core.error.error_value_numpy.check_ndarray_axis_len.rst", "_autosummary/pybrops.core.error.error_value_numpy.check_ndarray_axis_len_eq.rst", "_autosummary/pybrops.core.error.error_value_numpy.check_ndarray_axis_len_gt.rst", "_autosummary/pybrops.core.error.error_value_numpy.check_ndarray_axis_len_gteq.rst", "_autosummary/pybrops.core.error.error_value_numpy.check_ndarray_axis_len_lt.rst", "_autosummary/pybrops.core.error.error_value_numpy.check_ndarray_axis_len_lteq.rst", "_autosummary/pybrops.core.error.error_value_numpy.check_ndarray_eq.rst", "_autosummary/pybrops.core.error.error_value_numpy.check_ndarray_has_value.rst", "_autosummary/pybrops.core.error.error_value_numpy.check_ndarray_has_values.rst", "_autosummary/pybrops.core.error.error_value_numpy.check_ndarray_in_interval.rst", "_autosummary/pybrops.core.error.error_value_numpy.check_ndarray_is_binary.rst", "_autosummary/pybrops.core.error.error_value_numpy.check_ndarray_is_hypercube.rst", "_autosummary/pybrops.core.error.error_value_numpy.check_ndarray_is_square.rst", "_autosummary/pybrops.core.error.error_value_numpy.check_ndarray_is_triu.rst", "_autosummary/pybrops.core.error.error_value_numpy.check_ndarray_len_eq.rst", "_autosummary/pybrops.core.error.error_value_numpy.check_ndarray_len_gteq.rst", "_autosummary/pybrops.core.error.error_value_numpy.check_ndarray_len_is_multiple_of.rst", "_autosummary/pybrops.core.error.error_value_numpy.check_ndarray_mean_is_approx.rst", "_autosummary/pybrops.core.error.error_value_numpy.check_ndarray_ndim.rst", "_autosummary/pybrops.core.error.error_value_numpy.check_ndarray_ndim_gteq.rst", "_autosummary/pybrops.core.error.error_value_numpy.check_ndarray_shape_eq.rst", "_autosummary/pybrops.core.error.error_value_numpy.check_ndarray_size.rst", "_autosummary/pybrops.core.error.error_value_numpy.check_ndarray_std_is_approx.rst", "_autosummary/pybrops.core.error.error_value_numpy.check_ndarray_sum.rst", "_autosummary/pybrops.core.error.error_value_pandas.rst", "_autosummary/pybrops.core.error.error_value_pandas.check_pandas_DataFrame_has_column.rst", "_autosummary/pybrops.core.error.error_value_pandas.check_pandas_DataFrame_has_column_index.rst", "_autosummary/pybrops.core.error.error_value_pandas.check_pandas_DataFrame_has_column_indices.rst", "_autosummary/pybrops.core.error.error_value_pandas.check_pandas_DataFrame_has_columns.rst", "_autosummary/pybrops.core.error.error_value_pandas.check_pandas_Series_has_index.rst", "_autosummary/pybrops.core.error.error_value_pandas.check_pandas_Series_has_indices.rst", "_autosummary/pybrops.core.error.error_value_pandas.check_pandas_Series_has_value.rst", "_autosummary/pybrops.core.error.error_value_pandas.check_pandas_Series_has_values.rst", "_autosummary/pybrops.core.error.error_value_python.rst", "_autosummary/pybrops.core.error.error_value_python.check_Sequence_has_index.rst", "_autosummary/pybrops.core.error.error_value_python.check_Sequence_has_indices.rst", "_autosummary/pybrops.core.error.error_value_python.check_Sequence_has_value.rst", "_autosummary/pybrops.core.error.error_value_python.check_Sequence_has_values.rst", "_autosummary/pybrops.core.error.error_value_python.check_all_equal.rst", "_autosummary/pybrops.core.error.error_value_python.check_dict_has_keys.rst", "_autosummary/pybrops.core.error.error_value_python.check_dict_keys_all_type.rst", "_autosummary/pybrops.core.error.error_value_python.check_dict_values_all_type.rst", "_autosummary/pybrops.core.error.error_value_python.check_dict_values_have_equal_len.rst", "_autosummary/pybrops.core.error.error_value_python.check_dict_values_len_eq.rst", "_autosummary/pybrops.core.error.error_value_python.check_is_eq.rst", "_autosummary/pybrops.core.error.error_value_python.check_is_gt.rst", "_autosummary/pybrops.core.error.error_value_python.check_is_gteq.rst", "_autosummary/pybrops.core.error.error_value_python.check_is_in_interval_exclusive.rst", "_autosummary/pybrops.core.error.error_value_python.check_is_in_interval_inclusive.rst", "_autosummary/pybrops.core.error.error_value_python.check_is_lt.rst", "_autosummary/pybrops.core.error.error_value_python.check_is_lteq.rst", "_autosummary/pybrops.core.error.error_value_python.check_is_neq.rst", "_autosummary/pybrops.core.error.error_value_python.check_is_not_None.rst", "_autosummary/pybrops.core.error.error_value_python.check_len.rst", "_autosummary/pybrops.core.error.error_value_python.check_len_eq.rst", "_autosummary/pybrops.core.error.error_value_python.check_str_value.rst", "_autosummary/pybrops.core.error.error_value_python.check_tuple_len_eq.rst", "_autosummary/pybrops.core.io.rst", "_autosummary/pybrops.core.io.CSVDictInputOutput.rst", "_autosummary/pybrops.core.io.CSVDictInputOutput.CSVDictInputOutput.rst", "_autosummary/pybrops.core.io.CSVDictInputOutput.check_is_CSVDictInputOutput.rst", "_autosummary/pybrops.core.io.CSVInputOutput.rst", "_autosummary/pybrops.core.io.CSVInputOutput.CSVInputOutput.rst", "_autosummary/pybrops.core.io.CSVInputOutput.check_is_CSVInputOutput.rst", "_autosummary/pybrops.core.io.DictInputOutput.rst", "_autosummary/pybrops.core.io.DictInputOutput.DictInputOutput.rst", "_autosummary/pybrops.core.io.DictInputOutput.check_is_DictInputOutput.rst", "_autosummary/pybrops.core.io.HDF5InputOutput.rst", "_autosummary/pybrops.core.io.HDF5InputOutput.HDF5InputOutput.rst", "_autosummary/pybrops.core.io.HDF5InputOutput.check_is_HDF5InputOutput.rst", "_autosummary/pybrops.core.io.NPYInputOutput.rst", "_autosummary/pybrops.core.io.NPYInputOutput.NPYInputOutput.rst", "_autosummary/pybrops.core.io.NPYInputOutput.check_is_NPYInputOutput.rst", "_autosummary/pybrops.core.io.NPZInputOutput.rst", "_autosummary/pybrops.core.io.NPZInputOutput.NPZInputOutput.rst", "_autosummary/pybrops.core.io.NPZInputOutput.check_is_NPZInputOutput.rst", "_autosummary/pybrops.core.io.NumPyInputOutput.rst", "_autosummary/pybrops.core.io.NumPyInputOutput.NumPyInputOutput.rst", "_autosummary/pybrops.core.io.NumPyInputOutput.check_is_NumPyInputOutput.rst", "_autosummary/pybrops.core.io.PandasDictInputOutput.rst", "_autosummary/pybrops.core.io.PandasDictInputOutput.PandasDictInputOutput.rst", "_autosummary/pybrops.core.io.PandasDictInputOutput.check_is_PandasDictInputOutput.rst", "_autosummary/pybrops.core.io.PandasInputOutput.rst", "_autosummary/pybrops.core.io.PandasInputOutput.PandasInputOutput.rst", "_autosummary/pybrops.core.io.PandasInputOutput.check_is_PandasInputOutput.rst", "_autosummary/pybrops.core.mat.rst", "_autosummary/pybrops.core.mat.DenseMatrix.rst", "_autosummary/pybrops.core.mat.DenseMatrix.DenseMatrix.rst", "_autosummary/pybrops.core.mat.DenseMatrix.check_is_DenseMatrix.rst", "_autosummary/pybrops.core.mat.DenseMutableMatrix.rst", "_autosummary/pybrops.core.mat.DenseMutableMatrix.DenseMutableMatrix.rst", "_autosummary/pybrops.core.mat.DenseMutableMatrix.check_is_DenseMutableMatrix.rst", "_autosummary/pybrops.core.mat.DensePhasedMatrix.rst", "_autosummary/pybrops.core.mat.DensePhasedMatrix.DensePhasedMatrix.rst", "_autosummary/pybrops.core.mat.DensePhasedMatrix.check_is_DensePhasedMatrix.rst", "_autosummary/pybrops.core.mat.DensePhasedTaxaVariantMatrix.rst", "_autosummary/pybrops.core.mat.DensePhasedTaxaVariantMatrix.DensePhasedTaxaVariantMatrix.rst", "_autosummary/pybrops.core.mat.DensePhasedTaxaVariantMatrix.check_is_DensePhasedTaxaVariantMatrix.rst", "_autosummary/pybrops.core.mat.DenseSquareMatrix.rst", "_autosummary/pybrops.core.mat.DenseSquareMatrix.DenseSquareMatrix.rst", "_autosummary/pybrops.core.mat.DenseSquareMatrix.check_is_DenseSquareMatrix.rst", "_autosummary/pybrops.core.mat.DenseSquareTaxaMatrix.rst", "_autosummary/pybrops.core.mat.DenseSquareTaxaMatrix.DenseSquareTaxaMatrix.rst", "_autosummary/pybrops.core.mat.DenseSquareTaxaMatrix.check_is_DenseSquareTaxaMatrix.rst", "_autosummary/pybrops.core.mat.DenseSquareTaxaSquareTraitMatrix.rst", "_autosummary/pybrops.core.mat.DenseSquareTaxaSquareTraitMatrix.DenseSquareTaxaSquareTraitMatrix.rst", "_autosummary/pybrops.core.mat.DenseSquareTaxaSquareTraitMatrix.check_is_DenseSquareTaxaSquareTraitMatrix.rst", "_autosummary/pybrops.core.mat.DenseSquareTaxaTraitMatrix.rst", "_autosummary/pybrops.core.mat.DenseSquareTaxaTraitMatrix.DenseSquareTaxaTraitMatrix.rst", "_autosummary/pybrops.core.mat.DenseSquareTaxaTraitMatrix.check_is_DenseSquareTaxaTraitMatrix.rst", "_autosummary/pybrops.core.mat.DenseSquareTraitMatrix.rst", "_autosummary/pybrops.core.mat.DenseSquareTraitMatrix.DenseSquareTraitMatrix.rst", "_autosummary/pybrops.core.mat.DenseSquareTraitMatrix.check_is_DenseSquareTraitMatrix.rst", "_autosummary/pybrops.core.mat.DenseTaxaMatrix.rst", "_autosummary/pybrops.core.mat.DenseTaxaMatrix.DenseTaxaMatrix.rst", "_autosummary/pybrops.core.mat.DenseTaxaMatrix.check_is_DenseTaxaMatrix.rst", "_autosummary/pybrops.core.mat.DenseTaxaTraitMatrix.rst", "_autosummary/pybrops.core.mat.DenseTaxaTraitMatrix.DenseTaxaTraitMatrix.rst", "_autosummary/pybrops.core.mat.DenseTaxaTraitMatrix.check_is_DenseTaxaTraitMatrix.rst", "_autosummary/pybrops.core.mat.DenseTaxaVariantMatrix.rst", "_autosummary/pybrops.core.mat.DenseTaxaVariantMatrix.DenseTaxaVariantMatrix.rst", "_autosummary/pybrops.core.mat.DenseTaxaVariantMatrix.check_is_DenseTaxaVariantMatrix.rst", "_autosummary/pybrops.core.mat.DenseTraitMatrix.rst", "_autosummary/pybrops.core.mat.DenseTraitMatrix.DenseTraitMatrix.rst", "_autosummary/pybrops.core.mat.DenseTraitMatrix.check_is_DenseTraitMatrix.rst", "_autosummary/pybrops.core.mat.DenseVariantMatrix.rst", "_autosummary/pybrops.core.mat.DenseVariantMatrix.DenseVariantMatrix.rst", "_autosummary/pybrops.core.mat.DenseVariantMatrix.check_is_DenseVariantMatrix.rst", "_autosummary/pybrops.core.mat.GroupableMatrix.rst", "_autosummary/pybrops.core.mat.GroupableMatrix.GroupableMatrix.rst", "_autosummary/pybrops.core.mat.GroupableMatrix.check_is_GroupableMatrix.rst", "_autosummary/pybrops.core.mat.Matrix.rst", "_autosummary/pybrops.core.mat.Matrix.Matrix.rst", "_autosummary/pybrops.core.mat.Matrix.check_is_Matrix.rst", "_autosummary/pybrops.core.mat.MutableMatrix.rst", "_autosummary/pybrops.core.mat.MutableMatrix.MutableMatrix.rst", "_autosummary/pybrops.core.mat.MutableMatrix.check_is_MutableMatrix.rst", "_autosummary/pybrops.core.mat.PhasedMatrix.rst", "_autosummary/pybrops.core.mat.PhasedMatrix.PhasedMatrix.rst", "_autosummary/pybrops.core.mat.PhasedMatrix.check_is_PhasedMatrix.rst", "_autosummary/pybrops.core.mat.PhasedTaxaVariantMatrix.rst", "_autosummary/pybrops.core.mat.PhasedTaxaVariantMatrix.PhasedTaxaVariantMatrix.rst", "_autosummary/pybrops.core.mat.PhasedTaxaVariantMatrix.check_is_PhasedTaxaVariantMatrix.rst", "_autosummary/pybrops.core.mat.PrunableMatrix.rst", "_autosummary/pybrops.core.mat.PrunableMatrix.PrunableMatrix.rst", "_autosummary/pybrops.core.mat.PrunableMatrix.check_is_PrunableMatrix.rst", "_autosummary/pybrops.core.mat.SortableMatrix.rst", "_autosummary/pybrops.core.mat.SortableMatrix.SortableMatrix.rst", "_autosummary/pybrops.core.mat.SortableMatrix.check_is_SortableMatrix.rst", "_autosummary/pybrops.core.mat.SquareMatrix.rst", "_autosummary/pybrops.core.mat.SquareMatrix.SquareMatrix.rst", "_autosummary/pybrops.core.mat.SquareMatrix.check_is_SquareMatrix.rst", "_autosummary/pybrops.core.mat.SquareTaxaMatrix.rst", "_autosummary/pybrops.core.mat.SquareTaxaMatrix.SquareTaxaMatrix.rst", "_autosummary/pybrops.core.mat.SquareTaxaMatrix.check_is_SquareTaxaMatrix.rst", "_autosummary/pybrops.core.mat.SquareTaxaSquareTraitMatrix.rst", "_autosummary/pybrops.core.mat.SquareTaxaSquareTraitMatrix.SquareTaxaSquareTraitMatrix.rst", "_autosummary/pybrops.core.mat.SquareTaxaSquareTraitMatrix.check_is_SquareTaxaSquareTraitMatrix.rst", "_autosummary/pybrops.core.mat.SquareTaxaTraitMatrix.rst", "_autosummary/pybrops.core.mat.SquareTaxaTraitMatrix.SquareTaxaTraitMatrix.rst", "_autosummary/pybrops.core.mat.SquareTaxaTraitMatrix.check_is_SquareTaxaTraitMatrix.rst", "_autosummary/pybrops.core.mat.SquareTraitMatrix.rst", "_autosummary/pybrops.core.mat.SquareTraitMatrix.SquareTraitMatrix.rst", "_autosummary/pybrops.core.mat.SquareTraitMatrix.check_is_SquareTraitMatrix.rst", "_autosummary/pybrops.core.mat.TaxaMatrix.rst", "_autosummary/pybrops.core.mat.TaxaMatrix.TaxaMatrix.rst", "_autosummary/pybrops.core.mat.TaxaMatrix.check_is_TaxaMatrix.rst", "_autosummary/pybrops.core.mat.TaxaTraitMatrix.rst", "_autosummary/pybrops.core.mat.TaxaTraitMatrix.TaxaTraitMatrix.rst", "_autosummary/pybrops.core.mat.TaxaTraitMatrix.check_is_TaxaTraitMatrix.rst", "_autosummary/pybrops.core.mat.TaxaVariantMatrix.rst", "_autosummary/pybrops.core.mat.TaxaVariantMatrix.TaxaVariantMatrix.rst", "_autosummary/pybrops.core.mat.TaxaVariantMatrix.check_is_TaxaVariantMatrix.rst", "_autosummary/pybrops.core.mat.TraitMatrix.rst", "_autosummary/pybrops.core.mat.TraitMatrix.TraitMatrix.rst", "_autosummary/pybrops.core.mat.TraitMatrix.check_is_TraitMatrix.rst", "_autosummary/pybrops.core.mat.VariantMatrix.rst", "_autosummary/pybrops.core.mat.VariantMatrix.VariantMatrix.rst", "_autosummary/pybrops.core.mat.VariantMatrix.check_is_VariantMatrix.rst", "_autosummary/pybrops.core.mat.util.rst", "_autosummary/pybrops.core.mat.util.get_axis.rst", "_autosummary/pybrops.core.random.rst", "_autosummary/pybrops.core.random.prng.rst", "_autosummary/pybrops.core.random.prng.seed.rst", "_autosummary/pybrops.core.random.prng.spawn.rst", "_autosummary/pybrops.core.random.sampling.rst", "_autosummary/pybrops.core.random.sampling.axis_shuffle.rst", "_autosummary/pybrops.core.random.sampling.outcross_shuffle.rst", "_autosummary/pybrops.core.random.sampling.stochastic_universal_sampling.rst", "_autosummary/pybrops.core.random.sampling.tiled_choice.rst", "_autosummary/pybrops.core.util.rst", "_autosummary/pybrops.core.util.arrayix.rst", "_autosummary/pybrops.core.util.arrayix.flattenix.rst", "_autosummary/pybrops.core.util.arrayix.sliceaxisix.rst", "_autosummary/pybrops.core.util.arrayix.sqarrayix.rst", "_autosummary/pybrops.core.util.arrayix.triudix.rst", "_autosummary/pybrops.core.util.arrayix.triuix.rst", "_autosummary/pybrops.core.util.arrayix.xmapix.rst", "_autosummary/pybrops.core.util.h5py.rst", "_autosummary/pybrops.core.util.h5py.h5py_File_is_writable.rst", "_autosummary/pybrops.core.util.h5py.save_dict_to_hdf5.rst", "_autosummary/pybrops.core.util.haplo.rst", "_autosummary/pybrops.core.util.haplo.haplobin.rst", "_autosummary/pybrops.core.util.haplo.haplobin_bounds.rst", "_autosummary/pybrops.core.util.haplo.haplomat.rst", "_autosummary/pybrops.core.util.haplo.nhaploblk_chrom.rst", "_autosummary/pybrops.core.util.iterator.rst", "_autosummary/pybrops.core.util.iterator.iterlen.rst", "_autosummary/pybrops.core.util.pareto.rst", "_autosummary/pybrops.core.util.pareto.is_pareto_efficient.rst", "_autosummary/pybrops.core.util.subroutines.rst", "_autosummary/pybrops.core.util.subroutines.human2bytes.rst", "_autosummary/pybrops.core.util.subroutines.matrix_is_sorted.rst", "_autosummary/pybrops.core.util.subroutines.slice_to_list.rst", "_autosummary/pybrops.core.util.subroutines.slice_to_range.rst", "_autosummary/pybrops.core.util.subroutines.srange.rst", "_autosummary/pybrops.model.rst", "_autosummary/pybrops.model.gmod.rst", "_autosummary/pybrops.model.gmod.AdditiveDominanceEpistaticLinearGenomicModel.rst", "_autosummary/pybrops.model.gmod.AdditiveDominanceEpistaticLinearGenomicModel.AdditiveDominanceEpistaticLinearGenomicModel.rst", "_autosummary/pybrops.model.gmod.AdditiveDominanceEpistaticLinearGenomicModel.check_is_AdditiveDominanceEpistaticLinearGenomicModel.rst", "_autosummary/pybrops.model.gmod.AdditiveDominanceLinearGenomicModel.rst", "_autosummary/pybrops.model.gmod.AdditiveDominanceLinearGenomicModel.AdditiveDominanceLinearGenomicModel.rst", "_autosummary/pybrops.model.gmod.AdditiveDominanceLinearGenomicModel.check_is_AdditiveDominanceLinearGenomicModel.rst", "_autosummary/pybrops.model.gmod.AdditiveLinearGenomicModel.rst", "_autosummary/pybrops.model.gmod.AdditiveLinearGenomicModel.AdditiveLinearGenomicModel.rst", "_autosummary/pybrops.model.gmod.AdditiveLinearGenomicModel.check_is_AdditiveLinearGenomicModel.rst", "_autosummary/pybrops.model.gmod.CoancestryLinearGenomicModel.rst", "_autosummary/pybrops.model.gmod.CoancestryLinearGenomicModel.CoancestryLinearGenomicModel.rst", "_autosummary/pybrops.model.gmod.CoancestryLinearGenomicModel.check_is_CoancestryLinearGenomicModel.rst", "_autosummary/pybrops.model.gmod.DenseAdditiveDominanceLinearGenomicModel.rst", "_autosummary/pybrops.model.gmod.DenseAdditiveDominanceLinearGenomicModel.DenseAdditiveDominanceLinearGenomicModel.rst", "_autosummary/pybrops.model.gmod.DenseAdditiveDominanceLinearGenomicModel.check_is_DenseAdditiveDominanceLinearGenomicModel.rst", "_autosummary/pybrops.model.gmod.DenseAdditiveLinearGenomicModel.rst", "_autosummary/pybrops.model.gmod.DenseAdditiveLinearGenomicModel.DenseAdditiveLinearGenomicModel.rst", "_autosummary/pybrops.model.gmod.DenseAdditiveLinearGenomicModel.check_is_DenseAdditiveLinearGenomicModel.rst", "_autosummary/pybrops.model.gmod.DenseLinearGenomicModel.rst", "_autosummary/pybrops.model.gmod.DenseLinearGenomicModel.DenseLinearGenomicModel.rst", "_autosummary/pybrops.model.gmod.DenseLinearGenomicModel.check_is_DenseLinearGenomicModel.rst", "_autosummary/pybrops.model.gmod.GenomicModel.rst", "_autosummary/pybrops.model.gmod.GenomicModel.GenomicModel.rst", "_autosummary/pybrops.model.gmod.GenomicModel.check_is_GenomicModel.rst", "_autosummary/pybrops.model.gmod.LinearGenomicModel.rst", "_autosummary/pybrops.model.gmod.LinearGenomicModel.LinearGenomicModel.rst", "_autosummary/pybrops.model.gmod.LinearGenomicModel.check_is_LinearGenomicModel.rst", "_autosummary/pybrops.model.gmod.NonlinearGenomicModel.rst", "_autosummary/pybrops.model.gmod.NonlinearGenomicModel.NonlinearGenomicModel.rst", "_autosummary/pybrops.model.gmod.NonlinearGenomicModel.check_is_NonlinearGenomicModel.rst", "_autosummary/pybrops.model.gmod.rrBLUPModel0.rst", "_autosummary/pybrops.model.gmod.rrBLUPModel0.check_is_rrBLUPModel0.rst", "_autosummary/pybrops.model.gmod.rrBLUPModel0.gauss_seidel.rst", "_autosummary/pybrops.model.gmod.rrBLUPModel0.rrBLUPModel0.rst", "_autosummary/pybrops.model.gmod.rrBLUPModel0.rrBLUP_ML0.rst", "_autosummary/pybrops.model.gmod.rrBLUPModel0.rrBLUP_ML0_calc_G.rst", "_autosummary/pybrops.model.gmod.rrBLUPModel0.rrBLUP_ML0_calc_ZtZplI.rst", "_autosummary/pybrops.model.gmod.rrBLUPModel0.rrBLUP_ML0_calc_Zty.rst", "_autosummary/pybrops.model.gmod.rrBLUPModel0.rrBLUP_ML0_calc_d_V.rst", "_autosummary/pybrops.model.gmod.rrBLUPModel0.rrBLUP_ML0_calc_etasq.rst", "_autosummary/pybrops.model.gmod.rrBLUPModel0.rrBLUP_ML0_calc_ridge.rst", "_autosummary/pybrops.model.gmod.rrBLUPModel0.rrBLUP_ML0_center_y.rst", "_autosummary/pybrops.model.gmod.rrBLUPModel0.rrBLUP_ML0_neg2LogLik_fast.rst", "_autosummary/pybrops.model.gmod.rrBLUPModel0.rrBLUP_ML0_nonzero_d_V.rst", "_autosummary/pybrops.model.pcvmat.rst", "_autosummary/pybrops.model.pcvmat.AdditiveProgenyGeneticCovarianceMatrix.rst", "_autosummary/pybrops.model.pcvmat.AdditiveProgenyGeneticCovarianceMatrix.AdditiveProgenyGeneticCovarianceMatrix.rst", "_autosummary/pybrops.model.pcvmat.AdditiveProgenyGeneticCovarianceMatrix.check_is_AdditiveProgenyGeneticCovarianceMatrix.rst", "_autosummary/pybrops.model.pcvmat.AdditiveProgenyGenicCovarianceMatrix.rst", "_autosummary/pybrops.model.pcvmat.AdditiveProgenyGenicCovarianceMatrix.AdditiveProgenyGenicCovarianceMatrix.rst", "_autosummary/pybrops.model.pcvmat.AdditiveProgenyGenicCovarianceMatrix.check_is_AdditiveProgenyGenicCovarianceMatrix.rst", "_autosummary/pybrops.model.pcvmat.DenseAdditiveProgenyGeneticCovarianceMatrix.rst", "_autosummary/pybrops.model.pcvmat.DenseAdditiveProgenyGeneticCovarianceMatrix.DenseAdditiveProgenyGeneticCovarianceMatrix.rst", "_autosummary/pybrops.model.pcvmat.DenseAdditiveProgenyGeneticCovarianceMatrix.check_is_DenseAdditiveProgenyGeneticCovarianceMatrix.rst", "_autosummary/pybrops.model.pcvmat.DenseAdditiveProgenyGenicCovarianceMatrix.rst", "_autosummary/pybrops.model.pcvmat.DenseAdditiveProgenyGenicCovarianceMatrix.DenseAdditiveProgenyGenicCovarianceMatrix.rst", "_autosummary/pybrops.model.pcvmat.DenseAdditiveProgenyGenicCovarianceMatrix.check_is_DenseAdditiveProgenyGenicCovarianceMatrix.rst", "_autosummary/pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.rst", "_autosummary/pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.rst", "_autosummary/pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.check_is_DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.rst", "_autosummary/pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.rst", "_autosummary/pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.rst", "_autosummary/pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.rst", "_autosummary/pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.rst", "_autosummary/pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.check_is_DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.rst", "_autosummary/pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.rst", "_autosummary/pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.rst", "_autosummary/pybrops.model.pcvmat.DenseProgenyGeneticCovarianceMatrix.rst", "_autosummary/pybrops.model.pcvmat.DenseProgenyGeneticCovarianceMatrix.DenseProgenyGeneticCovarianceMatrix.rst", "_autosummary/pybrops.model.pcvmat.DenseProgenyGeneticCovarianceMatrix.check_is_DenseProgenyGeneticCovarianceMatrix.rst", "_autosummary/pybrops.model.pcvmat.DenseProgenyGenicCovarianceMatrix.rst", "_autosummary/pybrops.model.pcvmat.DenseProgenyGenicCovarianceMatrix.DenseProgenyGenicCovarianceMatrix.rst", "_autosummary/pybrops.model.pcvmat.DenseProgenyGenicCovarianceMatrix.check_is_DenseProgenyGenicCovarianceMatrix.rst", "_autosummary/pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.rst", "_autosummary/pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.rst", "_autosummary/pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.rst", "_autosummary/pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.rst", "_autosummary/pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.rst", "_autosummary/pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.rst", "_autosummary/pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.rst", "_autosummary/pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.rst", "_autosummary/pybrops.model.pcvmat.ProgenyGeneticCovarianceMatrix.rst", "_autosummary/pybrops.model.pcvmat.ProgenyGeneticCovarianceMatrix.ProgenyGeneticCovarianceMatrix.rst", "_autosummary/pybrops.model.pcvmat.ProgenyGeneticCovarianceMatrix.check_is_ProgenyGeneticCovarianceMatrix.rst", "_autosummary/pybrops.model.pcvmat.ProgenyGenicCovarianceMatrix.rst", "_autosummary/pybrops.model.pcvmat.ProgenyGenicCovarianceMatrix.ProgenyGenicCovarianceMatrix.rst", "_autosummary/pybrops.model.pcvmat.ProgenyGenicCovarianceMatrix.check_is_ProgenyGenicCovarianceMatrix.rst", "_autosummary/pybrops.model.vmat.rst", "_autosummary/pybrops.model.vmat.AdditiveGeneticVarianceMatrix.rst", "_autosummary/pybrops.model.vmat.AdditiveGeneticVarianceMatrix.AdditiveGeneticVarianceMatrix.rst", "_autosummary/pybrops.model.vmat.AdditiveGeneticVarianceMatrix.check_is_AdditiveGeneticVarianceMatrix.rst", "_autosummary/pybrops.model.vmat.AdditiveGenicVarianceMatrix.rst", "_autosummary/pybrops.model.vmat.AdditiveGenicVarianceMatrix.AdditiveGenicVarianceMatrix.rst", "_autosummary/pybrops.model.vmat.AdditiveGenicVarianceMatrix.check_is_AdditiveGenicVarianceMatrix.rst", "_autosummary/pybrops.model.vmat.DenseAdditiveGeneticVarianceMatrix.rst", "_autosummary/pybrops.model.vmat.DenseAdditiveGeneticVarianceMatrix.DenseAdditiveGeneticVarianceMatrix.rst", "_autosummary/pybrops.model.vmat.DenseAdditiveGeneticVarianceMatrix.check_is_DenseAdditiveGeneticVarianceMatrix.rst", "_autosummary/pybrops.model.vmat.DenseAdditiveGenicVarianceMatrix.rst", "_autosummary/pybrops.model.vmat.DenseAdditiveGenicVarianceMatrix.DenseAdditiveGenicVarianceMatrix.rst", "_autosummary/pybrops.model.vmat.DenseAdditiveGenicVarianceMatrix.check_is_DenseAdditiveGenicVarianceMatrix.rst", "_autosummary/pybrops.model.vmat.DenseDihybridDHAdditiveGeneticVarianceMatrix.rst", "_autosummary/pybrops.model.vmat.DenseDihybridDHAdditiveGeneticVarianceMatrix.DenseDihybridDHAdditiveGeneticVarianceMatrix.rst", "_autosummary/pybrops.model.vmat.DenseDihybridDHAdditiveGeneticVarianceMatrix.check_is_DenseDihybridDHAdditiveGeneticVarianceMatrix.rst", "_autosummary/pybrops.model.vmat.DenseDihybridDHAdditiveGenicVarianceMatrix.rst", "_autosummary/pybrops.model.vmat.DenseDihybridDHAdditiveGenicVarianceMatrix.DenseDihybridDHAdditiveGenicVarianceMatrix.rst", "_autosummary/pybrops.model.vmat.DenseFourWayDHAdditiveGeneticVarianceMatrix.rst", "_autosummary/pybrops.model.vmat.DenseFourWayDHAdditiveGeneticVarianceMatrix.DenseFourWayDHAdditiveGeneticVarianceMatrix.rst", "_autosummary/pybrops.model.vmat.DenseFourWayDHAdditiveGeneticVarianceMatrix.check_is_DenseFourWayDHAdditiveGeneticVarianceMatrix.rst", "_autosummary/pybrops.model.vmat.DenseFourWayDHAdditiveGenicVarianceMatrix.rst", "_autosummary/pybrops.model.vmat.DenseFourWayDHAdditiveGenicVarianceMatrix.DenseFourWayDHAdditiveGenicVarianceMatrix.rst", "_autosummary/pybrops.model.vmat.DenseGeneticVarianceMatrix.rst", "_autosummary/pybrops.model.vmat.DenseGeneticVarianceMatrix.DenseGeneticVarianceMatrix.rst", "_autosummary/pybrops.model.vmat.DenseGeneticVarianceMatrix.check_is_DenseGeneticVarianceMatrix.rst", "_autosummary/pybrops.model.vmat.DenseGenicVarianceMatrix.rst", "_autosummary/pybrops.model.vmat.DenseGenicVarianceMatrix.DenseGenicVarianceMatrix.rst", "_autosummary/pybrops.model.vmat.DenseGenicVarianceMatrix.check_is_DenseGenicVarianceMatrix.rst", "_autosummary/pybrops.model.vmat.DenseThreeWayDHAdditiveGeneticVarianceMatrix.rst", "_autosummary/pybrops.model.vmat.DenseThreeWayDHAdditiveGeneticVarianceMatrix.DenseThreeWayDHAdditiveGeneticVarianceMatrix.rst", "_autosummary/pybrops.model.vmat.DenseThreeWayDHAdditiveGenicVarianceMatrix.rst", "_autosummary/pybrops.model.vmat.DenseThreeWayDHAdditiveGenicVarianceMatrix.DenseThreeWayDHAdditiveGenicVarianceMatrix.rst", "_autosummary/pybrops.model.vmat.DenseTwoWayDHAdditiveGeneticVarianceMatrix.rst", "_autosummary/pybrops.model.vmat.DenseTwoWayDHAdditiveGeneticVarianceMatrix.DenseTwoWayDHAdditiveGeneticVarianceMatrix.rst", "_autosummary/pybrops.model.vmat.DenseTwoWayDHAdditiveGenicVarianceMatrix.rst", "_autosummary/pybrops.model.vmat.DenseTwoWayDHAdditiveGenicVarianceMatrix.DenseTwoWayDHAdditiveGenicVarianceMatrix.rst", "_autosummary/pybrops.model.vmat.GeneticVarianceMatrix.rst", "_autosummary/pybrops.model.vmat.GeneticVarianceMatrix.GeneticVarianceMatrix.rst", "_autosummary/pybrops.model.vmat.GeneticVarianceMatrix.check_is_GeneticVarianceMatrix.rst", "_autosummary/pybrops.model.vmat.GenicVarianceMatrix.rst", "_autosummary/pybrops.model.vmat.GenicVarianceMatrix.GenicVarianceMatrix.rst", "_autosummary/pybrops.model.vmat.GenicVarianceMatrix.check_is_GenicVarianceMatrix.rst", "_autosummary/pybrops.model.vmat.fcty.rst", "_autosummary/pybrops.model.vmat.fcty.AdditiveGeneticVarianceMatrixFactory.rst", "_autosummary/pybrops.model.vmat.fcty.AdditiveGeneticVarianceMatrixFactory.AdditiveGeneticVarianceMatrixFactory.rst", "_autosummary/pybrops.model.vmat.fcty.AdditiveGeneticVarianceMatrixFactory.check_is_AdditiveGeneticVarianceMatrixFactory.rst", "_autosummary/pybrops.model.vmat.fcty.AdditiveGenicVarianceMatrixFactory.rst", "_autosummary/pybrops.model.vmat.fcty.AdditiveGenicVarianceMatrixFactory.AdditiveGenicVarianceMatrixFactory.rst", "_autosummary/pybrops.model.vmat.fcty.AdditiveGenicVarianceMatrixFactory.check_is_AdditiveGenicVarianceMatrixFactory.rst", "_autosummary/pybrops.model.vmat.fcty.DenseDihybridDHAdditiveGeneticVarianceMatrixFactory.rst", "_autosummary/pybrops.model.vmat.fcty.DenseDihybridDHAdditiveGeneticVarianceMatrixFactory.DenseDihybridDHAdditiveGeneticVarianceMatrixFactory.rst", "_autosummary/pybrops.model.vmat.fcty.DenseDihybridDHAdditiveGeneticVarianceMatrixFactory.check_is_DenseDihybridDHAdditiveGeneticVarianceMatrixFactory.rst", "_autosummary/pybrops.model.vmat.fcty.DenseFourWayDHAdditiveGeneticVarianceMatrixFactory.rst", "_autosummary/pybrops.model.vmat.fcty.DenseFourWayDHAdditiveGeneticVarianceMatrixFactory.DenseFourWayDHAdditiveGeneticVarianceMatrixFactory.rst", "_autosummary/pybrops.model.vmat.fcty.DenseFourWayDHAdditiveGeneticVarianceMatrixFactory.check_is_DenseFourWayDHAdditiveGeneticVarianceMatrixFactory.rst", "_autosummary/pybrops.model.vmat.fcty.DenseThreeWayDHAdditiveGeneticVarianceMatrixFactory.rst", "_autosummary/pybrops.model.vmat.fcty.DenseThreeWayDHAdditiveGeneticVarianceMatrixFactory.DenseThreeWayDHAdditiveGeneticVarianceMatrixFactory.rst", "_autosummary/pybrops.model.vmat.fcty.DenseThreeWayDHAdditiveGeneticVarianceMatrixFactory.check_is_DenseThreeWayDHAdditiveGeneticVarianceMatrixFactory.rst", "_autosummary/pybrops.model.vmat.fcty.DenseTwoWayDHAdditiveGeneticVarianceMatrixFactory.rst", "_autosummary/pybrops.model.vmat.fcty.DenseTwoWayDHAdditiveGeneticVarianceMatrixFactory.DenseTwoWayDHAdditiveGeneticVarianceMatrixFactory.rst", "_autosummary/pybrops.model.vmat.fcty.DenseTwoWayDHAdditiveGeneticVarianceMatrixFactory.check_is_DenseTwoWayDHAdditiveGeneticVarianceMatrixFactory.rst", "_autosummary/pybrops.model.vmat.fcty.DenseTwoWayDHAdditiveGenicVarianceMatrixFactory.rst", "_autosummary/pybrops.model.vmat.fcty.DenseTwoWayDHAdditiveGenicVarianceMatrixFactory.DenseTwoWayDHAdditiveGenicVarianceMatrixFactory.rst", "_autosummary/pybrops.model.vmat.fcty.DenseTwoWayDHAdditiveGenicVarianceMatrixFactory.check_is_DenseTwoWayDHAdditiveGenicVarianceMatrixFactory.rst", "_autosummary/pybrops.model.vmat.fcty.GeneticVarianceMatrixFactory.rst", "_autosummary/pybrops.model.vmat.fcty.GeneticVarianceMatrixFactory.GeneticVarianceMatrixFactory.rst", "_autosummary/pybrops.model.vmat.fcty.GeneticVarianceMatrixFactory.check_is_GeneticVarianceMatrixFactory.rst", "_autosummary/pybrops.model.vmat.fcty.GenicVarianceMatrixFactory.rst", "_autosummary/pybrops.model.vmat.fcty.GenicVarianceMatrixFactory.GenicVarianceMatrixFactory.rst", "_autosummary/pybrops.model.vmat.fcty.GenicVarianceMatrixFactory.check_is_GenicVarianceMatrixFactory.rst", "_autosummary/pybrops.model.vmat.util.rst", "_autosummary/pybrops.model.vmat.util.cov_D1s.rst", "_autosummary/pybrops.model.vmat.util.cov_D1st.rst", "_autosummary/pybrops.model.vmat.util.cov_D2s.rst", "_autosummary/pybrops.model.vmat.util.cov_D2st.rst", "_autosummary/pybrops.model.vmat.util.rprob_filial.rst", "_autosummary/pybrops.opt.rst", "_autosummary/pybrops.opt.algo.rst", "_autosummary/pybrops.opt.algo.BinaryGeneticAlgorithm.rst", "_autosummary/pybrops.opt.algo.BinaryGeneticAlgorithm.BinaryGeneticAlgorithm.rst", "_autosummary/pybrops.opt.algo.BinaryOptimizationAlgorithm.rst", "_autosummary/pybrops.opt.algo.BinaryOptimizationAlgorithm.BinaryOptimizationAlgorithm.rst", "_autosummary/pybrops.opt.algo.BinaryOptimizationAlgorithm.check_is_BinaryOptimizationAlgorithm.rst", "_autosummary/pybrops.opt.algo.IntegerGeneticAlgorithm.rst", "_autosummary/pybrops.opt.algo.IntegerGeneticAlgorithm.IntegerGeneticAlgorithm.rst", "_autosummary/pybrops.opt.algo.IntegerOptimizationAlgorithm.rst", "_autosummary/pybrops.opt.algo.IntegerOptimizationAlgorithm.IntegerOptimizationAlgorithm.rst", "_autosummary/pybrops.opt.algo.IntegerOptimizationAlgorithm.check_is_IntegerOptimizationAlgorithm.rst", "_autosummary/pybrops.opt.algo.NSGA2BinaryGeneticAlgorithm.rst", "_autosummary/pybrops.opt.algo.NSGA2BinaryGeneticAlgorithm.NSGA2BinaryGeneticAlgorithm.rst", "_autosummary/pybrops.opt.algo.NSGA2IntegerGeneticAlgorithm.rst", "_autosummary/pybrops.opt.algo.NSGA2IntegerGeneticAlgorithm.NSGA2IntegerGeneticAlgorithm.rst", "_autosummary/pybrops.opt.algo.NSGA2MemeticSubsetGeneticAlgorithm.rst", "_autosummary/pybrops.opt.algo.NSGA2MemeticSubsetGeneticAlgorithm.NSGA2MutatorASubsetGeneticAlgorithm.rst", "_autosummary/pybrops.opt.algo.NSGA2MemeticSubsetGeneticAlgorithm.NSGA2MutatorBSubsetGeneticAlgorithm.rst", "_autosummary/pybrops.opt.algo.NSGA2MemeticSubsetGeneticAlgorithm.NSGA2SteepestDescentSubsetGeneticAlgorithm.rst", "_autosummary/pybrops.opt.algo.NSGA2MemeticSubsetGeneticAlgorithm.NSGA2StochasticDescentSubsetGeneticAlgorithm.rst", "_autosummary/pybrops.opt.algo.NSGA2RealGeneticAlgorithm.rst", "_autosummary/pybrops.opt.algo.NSGA2RealGeneticAlgorithm.NSGA2RealGeneticAlgorithm.rst", "_autosummary/pybrops.opt.algo.NSGA2SubsetGeneticAlgorithm.rst", "_autosummary/pybrops.opt.algo.NSGA2SubsetGeneticAlgorithm.NSGA2SubsetGeneticAlgorithm.rst", "_autosummary/pybrops.opt.algo.NSGA3SubsetGeneticAlgorithm.rst", "_autosummary/pybrops.opt.algo.NSGA3SubsetGeneticAlgorithm.NSGA3SubsetGeneticAlgorithm.rst", "_autosummary/pybrops.opt.algo.OptimizationAlgorithm.rst", "_autosummary/pybrops.opt.algo.OptimizationAlgorithm.OptimizationAlgorithm.rst", "_autosummary/pybrops.opt.algo.OptimizationAlgorithm.check_is_OptimizationAlgorithm.rst", "_autosummary/pybrops.opt.algo.RealGeneticAlgorithm.rst", "_autosummary/pybrops.opt.algo.RealGeneticAlgorithm.RealGeneticAlgorithm.rst", "_autosummary/pybrops.opt.algo.RealOptimizationAlgorithm.rst", "_autosummary/pybrops.opt.algo.RealOptimizationAlgorithm.RealOptimizationAlgorithm.rst", "_autosummary/pybrops.opt.algo.RealOptimizationAlgorithm.check_is_RealOptimizationAlgorithm.rst", "_autosummary/pybrops.opt.algo.SortingSteepestDescentSubsetHillClimber.rst", "_autosummary/pybrops.opt.algo.SortingSteepestDescentSubsetHillClimber.SortingSteepestDescentSubsetHillClimber.rst", "_autosummary/pybrops.opt.algo.SortingSubsetOptimizationAlgorithm.rst", "_autosummary/pybrops.opt.algo.SortingSubsetOptimizationAlgorithm.SortingSubsetOptimizationAlgorithm.rst", "_autosummary/pybrops.opt.algo.SteepestDescentSubsetHillClimber.rst", "_autosummary/pybrops.opt.algo.SteepestDescentSubsetHillClimber.SteepestDescentSubsetHillClimber.rst", "_autosummary/pybrops.opt.algo.SubsetGeneticAlgorithm.rst", "_autosummary/pybrops.opt.algo.SubsetGeneticAlgorithm.SubsetGeneticAlgorithm.rst", "_autosummary/pybrops.opt.algo.SubsetOptimizationAlgorithm.rst", "_autosummary/pybrops.opt.algo.SubsetOptimizationAlgorithm.SubsetOptimizationAlgorithm.rst", "_autosummary/pybrops.opt.algo.SubsetOptimizationAlgorithm.check_is_SubsetOptimizationAlgorithm.rst", "_autosummary/pybrops.opt.algo.UnconstrainedNSGA2SetGeneticAlgorithm.rst", "_autosummary/pybrops.opt.algo.UnconstrainedNSGA2SetGeneticAlgorithm.UnconstrainedNSGA2SetGeneticAlgorithm.rst", "_autosummary/pybrops.opt.algo.UnconstrainedOptimizationAlgorithm.rst", "_autosummary/pybrops.opt.algo.UnconstrainedOptimizationAlgorithm.UnconstrainedOptimizationAlgorithm.rst", "_autosummary/pybrops.opt.algo.UnconstrainedOptimizationAlgorithm.check_is_OptimizationAlgorithm.rst", "_autosummary/pybrops.opt.algo.UnconstrainedSetGeneticAlgorithm.rst", "_autosummary/pybrops.opt.algo.UnconstrainedSetGeneticAlgorithm.UnconstrainedSetGeneticAlgorithm.rst", "_autosummary/pybrops.opt.algo.UnconstrainedSteepestAscentSetHillClimber.rst", "_autosummary/pybrops.opt.algo.UnconstrainedSteepestAscentSetHillClimber.UnconstrainedSteepestAscentSetHillClimber.rst", "_autosummary/pybrops.opt.algo.pymoo_addon.rst", "_autosummary/pybrops.opt.algo.pymoo_addon.IntegerPolynomialMutation.rst", "_autosummary/pybrops.opt.algo.pymoo_addon.IntegerSimulatedBinaryCrossover.rst", "_autosummary/pybrops.opt.algo.pymoo_addon.MultiObjectiveSteepestDescentHillClimberMutation.rst", "_autosummary/pybrops.opt.algo.pymoo_addon.MultiObjectiveStochasticDescentHillClimberMutation.rst", "_autosummary/pybrops.opt.algo.pymoo_addon.MultiObjectiveStochasticHillClimberMutation.rst", "_autosummary/pybrops.opt.algo.pymoo_addon.MutatorA.rst", "_autosummary/pybrops.opt.algo.pymoo_addon.MutatorB.rst", "_autosummary/pybrops.opt.algo.pymoo_addon.MutatorF.rst", "_autosummary/pybrops.opt.algo.pymoo_addon.ReducedExchangeCrossover.rst", "_autosummary/pybrops.opt.algo.pymoo_addon.ReducedExchangeMutation.rst", "_autosummary/pybrops.opt.algo.pymoo_addon.StochasticHillClimberMutation.rst", "_autosummary/pybrops.opt.algo.pymoo_addon.SubsetRandomSampling.rst", "_autosummary/pybrops.opt.algo.pymoo_addon.dominates.rst", "_autosummary/pybrops.opt.algo.pymoo_addon.tiled_choice.rst", "_autosummary/pybrops.opt.prob.rst", "_autosummary/pybrops.opt.prob.BinaryProblem.rst", "_autosummary/pybrops.opt.prob.BinaryProblem.BinaryProblem.rst", "_autosummary/pybrops.opt.prob.BinaryProblem.check_BinaryProblem_is_multi_objective.rst", "_autosummary/pybrops.opt.prob.BinaryProblem.check_BinaryProblem_is_single_objective.rst", "_autosummary/pybrops.opt.prob.BinaryProblem.check_is_BinaryProblem.rst", "_autosummary/pybrops.opt.prob.FunctionWeight.rst", "_autosummary/pybrops.opt.prob.FunctionWeight.FunctionWeight.rst", "_autosummary/pybrops.opt.prob.FunctionWeight.MaximizingFunctionWeight.rst", "_autosummary/pybrops.opt.prob.FunctionWeight.MinimizingFunctionWeight.rst", "_autosummary/pybrops.opt.prob.IntegerProblem.rst", "_autosummary/pybrops.opt.prob.IntegerProblem.IntegerProblem.rst", "_autosummary/pybrops.opt.prob.IntegerProblem.check_IntegerProblem_is_multi_objective.rst", "_autosummary/pybrops.opt.prob.IntegerProblem.check_IntegerProblem_is_single_objective.rst", "_autosummary/pybrops.opt.prob.IntegerProblem.check_is_IntegerProblem.rst", "_autosummary/pybrops.opt.prob.Problem.rst", "_autosummary/pybrops.opt.prob.Problem.Problem.rst", "_autosummary/pybrops.opt.prob.Problem.check_is_Problem.rst", "_autosummary/pybrops.opt.prob.RealProblem.rst", "_autosummary/pybrops.opt.prob.RealProblem.RealProblem.rst", "_autosummary/pybrops.opt.prob.RealProblem.check_RealProblem_is_multi_objective.rst", "_autosummary/pybrops.opt.prob.RealProblem.check_RealProblem_is_single_objective.rst", "_autosummary/pybrops.opt.prob.RealProblem.check_is_RealProblem.rst", "_autosummary/pybrops.opt.prob.SubsetProblem.rst", "_autosummary/pybrops.opt.prob.SubsetProblem.SubsetProblem.rst", "_autosummary/pybrops.opt.prob.SubsetProblem.check_SubsetProblem_is_multi_objective.rst", "_autosummary/pybrops.opt.prob.SubsetProblem.check_SubsetProblem_is_single_objective.rst", "_autosummary/pybrops.opt.prob.SubsetProblem.check_is_SubsetProblem.rst", "_autosummary/pybrops.opt.soln.rst", "_autosummary/pybrops.opt.soln.BinarySolution.rst", "_autosummary/pybrops.opt.soln.BinarySolution.BinarySolution.rst", "_autosummary/pybrops.opt.soln.BinarySolution.check_is_BinarySolution.rst", "_autosummary/pybrops.opt.soln.IntegerSolution.rst", "_autosummary/pybrops.opt.soln.IntegerSolution.IntegerSolution.rst", "_autosummary/pybrops.opt.soln.IntegerSolution.check_is_IntegerSolution.rst", "_autosummary/pybrops.opt.soln.RealSolution.rst", "_autosummary/pybrops.opt.soln.RealSolution.RealSolution.rst", "_autosummary/pybrops.opt.soln.RealSolution.check_is_RealSolution.rst", "_autosummary/pybrops.opt.soln.Solution.rst", "_autosummary/pybrops.opt.soln.Solution.Solution.rst", "_autosummary/pybrops.opt.soln.Solution.check_is_Solution.rst", "_autosummary/pybrops.opt.soln.SubsetSolution.rst", "_autosummary/pybrops.opt.soln.SubsetSolution.SubsetSolution.rst", "_autosummary/pybrops.opt.soln.SubsetSolution.check_is_SubsetSolution.rst", "_autosummary/pybrops.popgen.rst", "_autosummary/pybrops.popgen.bvmat.rst", "_autosummary/pybrops.popgen.bvmat.BreedingValueMatrix.rst", "_autosummary/pybrops.popgen.bvmat.BreedingValueMatrix.BreedingValueMatrix.rst", "_autosummary/pybrops.popgen.bvmat.BreedingValueMatrix.check_is_BreedingValueMatrix.rst", "_autosummary/pybrops.popgen.bvmat.DenseBreedingValueMatrix.rst", "_autosummary/pybrops.popgen.bvmat.DenseBreedingValueMatrix.DenseBreedingValueMatrix.rst", "_autosummary/pybrops.popgen.bvmat.DenseBreedingValueMatrix.check_is_DenseBreedingValueMatrix.rst", "_autosummary/pybrops.popgen.bvmat.DenseEstimatedBreedingValueMatrix.rst", "_autosummary/pybrops.popgen.bvmat.DenseEstimatedBreedingValueMatrix.DenseEstimatedBreedingValueMatrix.rst", "_autosummary/pybrops.popgen.bvmat.DenseEstimatedBreedingValueMatrix.check_is_DenseEstimatedBreedingValueMatrix.rst", "_autosummary/pybrops.popgen.bvmat.DenseGenomicEstimatedBreedingValueMatrix.rst", "_autosummary/pybrops.popgen.bvmat.DenseGenomicEstimatedBreedingValueMatrix.DenseGenomicEstimatedBreedingValueMatrix.rst", "_autosummary/pybrops.popgen.bvmat.DenseGenomicEstimatedBreedingValueMatrix.check_is_DenseGenomicEstimatedBreedingValueMatrix.rst", "_autosummary/pybrops.popgen.cmat.rst", "_autosummary/pybrops.popgen.cmat.CoancestryMatrix.rst", "_autosummary/pybrops.popgen.cmat.CoancestryMatrix.CoancestryMatrix.rst", "_autosummary/pybrops.popgen.cmat.CoancestryMatrix.check_is_CoancestryMatrix.rst", "_autosummary/pybrops.popgen.cmat.DenseCoancestryMatrix.rst", "_autosummary/pybrops.popgen.cmat.DenseCoancestryMatrix.DenseCoancestryMatrix.rst", "_autosummary/pybrops.popgen.cmat.DenseCoancestryMatrix.check_is_DenseCoancestryMatrix.rst", "_autosummary/pybrops.popgen.cmat.DenseGeneralizedWeightedCoancestryMatrix.rst", "_autosummary/pybrops.popgen.cmat.DenseGeneralizedWeightedCoancestryMatrix.DenseGeneralizedWeightedCoancestryMatrix.rst", "_autosummary/pybrops.popgen.cmat.DenseGeneralizedWeightedCoancestryMatrix.check_is_DenseGeneralizedWeightedCoancestryMatrix.rst", "_autosummary/pybrops.popgen.cmat.DenseMolecularCoancestryMatrix.rst", "_autosummary/pybrops.popgen.cmat.DenseMolecularCoancestryMatrix.DenseMolecularCoancestryMatrix.rst", "_autosummary/pybrops.popgen.cmat.DenseMolecularCoancestryMatrix.check_is_DenseMolecularCoancestryMatrix.rst", "_autosummary/pybrops.popgen.cmat.DenseVanRadenCoancestryMatrix.rst", "_autosummary/pybrops.popgen.cmat.DenseVanRadenCoancestryMatrix.DenseVanRadenCoancestryMatrix.rst", "_autosummary/pybrops.popgen.cmat.DenseVanRadenCoancestryMatrix.check_is_DenseVanRadenCoancestryMatrix.rst", "_autosummary/pybrops.popgen.cmat.DenseYangCoancestryMatrix.rst", "_autosummary/pybrops.popgen.cmat.DenseYangCoancestryMatrix.DenseYangCoancestryMatrix.rst", "_autosummary/pybrops.popgen.cmat.DenseYangCoancestryMatrix.check_is_DenseYangCoancestryMatrix.rst", "_autosummary/pybrops.popgen.cmat.fcty.rst", "_autosummary/pybrops.popgen.cmat.fcty.CoancestryMatrixFactory.rst", "_autosummary/pybrops.popgen.cmat.fcty.CoancestryMatrixFactory.CoancestryMatrixFactory.rst", "_autosummary/pybrops.popgen.cmat.fcty.CoancestryMatrixFactory.check_is_CoancestryMatrixFactory.rst", "_autosummary/pybrops.popgen.cmat.fcty.DenseCoancestryMatrixFactory.rst", "_autosummary/pybrops.popgen.cmat.fcty.DenseCoancestryMatrixFactory.DenseCoancestryMatrixFactory.rst", "_autosummary/pybrops.popgen.cmat.fcty.DenseCoancestryMatrixFactory.check_is_DenseCoancestryMatrixFactory.rst", "_autosummary/pybrops.popgen.cmat.fcty.DenseGeneralizedWeightedCoancestryMatrixFactory.rst", "_autosummary/pybrops.popgen.cmat.fcty.DenseGeneralizedWeightedCoancestryMatrixFactory.DenseGeneralizedWeightedCoancestryMatrixFactory.rst", "_autosummary/pybrops.popgen.cmat.fcty.DenseGeneralizedWeightedCoancestryMatrixFactory.check_is_DenseGeneralizedWeightedCoancestryMatrixFactory.rst", "_autosummary/pybrops.popgen.cmat.fcty.DenseMolecularCoancestryMatrixFactory.rst", "_autosummary/pybrops.popgen.cmat.fcty.DenseMolecularCoancestryMatrixFactory.DenseMolecularCoancestryMatrixFactory.rst", "_autosummary/pybrops.popgen.cmat.fcty.DenseMolecularCoancestryMatrixFactory.check_is_DenseMolecularCoancestryMatrixFactory.rst", "_autosummary/pybrops.popgen.cmat.fcty.DenseVanRadenCoancestryMatrixFactory.rst", "_autosummary/pybrops.popgen.cmat.fcty.DenseVanRadenCoancestryMatrixFactory.DenseVanRadenCoancestryMatrixFactory.rst", "_autosummary/pybrops.popgen.cmat.fcty.DenseVanRadenCoancestryMatrixFactory.check_is_DenseVanRadenCoancestryMatrixFactory.rst", "_autosummary/pybrops.popgen.cmat.fcty.DenseYangCoancestryMatrixFactory.rst", "_autosummary/pybrops.popgen.cmat.fcty.DenseYangCoancestryMatrixFactory.DenseYangCoancestryMatrixFactory.rst", "_autosummary/pybrops.popgen.cmat.fcty.DenseYangCoancestryMatrixFactory.check_is_DenseYangCoancestryMatrixFactory.rst", "_autosummary/pybrops.popgen.gmap.rst", "_autosummary/pybrops.popgen.gmap.DenseGeneticMappableMatrix.rst", "_autosummary/pybrops.popgen.gmap.DenseGeneticMappableMatrix.DenseGeneticMappableMatrix.rst", "_autosummary/pybrops.popgen.gmap.DenseGeneticMappableMatrix.check_is_DenseGeneticMappableMatrix.rst", "_autosummary/pybrops.popgen.gmap.ExtendedGeneticMap.rst", "_autosummary/pybrops.popgen.gmap.ExtendedGeneticMap.ExtendedGeneticMap.rst", "_autosummary/pybrops.popgen.gmap.ExtendedGeneticMap.check_is_ExtendedGeneticMap.rst", "_autosummary/pybrops.popgen.gmap.GeneticMap.rst", "_autosummary/pybrops.popgen.gmap.GeneticMap.GeneticMap.rst", "_autosummary/pybrops.popgen.gmap.GeneticMap.check_is_GeneticMap.rst", "_autosummary/pybrops.popgen.gmap.GeneticMapFunction.rst", "_autosummary/pybrops.popgen.gmap.GeneticMapFunction.GeneticMapFunction.rst", "_autosummary/pybrops.popgen.gmap.GeneticMapFunction.check_is_GeneticMapFunction.rst", "_autosummary/pybrops.popgen.gmap.GeneticMappableMatrix.rst", "_autosummary/pybrops.popgen.gmap.GeneticMappableMatrix.GeneticMappableMatrix.rst", "_autosummary/pybrops.popgen.gmap.GeneticMappableMatrix.check_is_GeneticMappableMatrix.rst", "_autosummary/pybrops.popgen.gmap.HaldaneMapFunction.rst", "_autosummary/pybrops.popgen.gmap.HaldaneMapFunction.HaldaneMapFunction.rst", "_autosummary/pybrops.popgen.gmap.HaldaneMapFunction.check_is_HaldaneMapFunction.rst", "_autosummary/pybrops.popgen.gmap.KosambiMapFunction.rst", "_autosummary/pybrops.popgen.gmap.KosambiMapFunction.KosambiMapFunction.rst", "_autosummary/pybrops.popgen.gmap.KosambiMapFunction.check_is_KosambiMapFunction.rst", "_autosummary/pybrops.popgen.gmap.StandardGeneticMap.rst", "_autosummary/pybrops.popgen.gmap.StandardGeneticMap.StandardGeneticMap.rst", "_autosummary/pybrops.popgen.gmap.StandardGeneticMap.check_is_StandardGeneticMap.rst", "_autosummary/pybrops.popgen.gmap.util.rst", "_autosummary/pybrops.popgen.gmap.util.cM2d.rst", "_autosummary/pybrops.popgen.gmat.rst", "_autosummary/pybrops.popgen.gmat.DenseGenotypeMatrix.rst", "_autosummary/pybrops.popgen.gmat.DenseGenotypeMatrix.DenseGenotypeMatrix.rst", "_autosummary/pybrops.popgen.gmat.DenseGenotypeMatrix.check_is_DenseGenotypeMatrix.rst", "_autosummary/pybrops.popgen.gmat.DensePhasedGenotypeMatrix.rst", "_autosummary/pybrops.popgen.gmat.DensePhasedGenotypeMatrix.DensePhasedGenotypeMatrix.rst", "_autosummary/pybrops.popgen.gmat.DensePhasedGenotypeMatrix.check_DensePhasedGenotypeMatrix_has_vrnt_xoprob.rst", "_autosummary/pybrops.popgen.gmat.DensePhasedGenotypeMatrix.check_is_DensePhasedGenotypeMatrix.rst", "_autosummary/pybrops.popgen.gmat.GenotypeMatrix.rst", "_autosummary/pybrops.popgen.gmat.GenotypeMatrix.GenotypeMatrix.rst", "_autosummary/pybrops.popgen.gmat.GenotypeMatrix.check_GenotypeMatrix_has_taxa.rst", "_autosummary/pybrops.popgen.gmat.GenotypeMatrix.check_is_GenotypeMatrix.rst", "_autosummary/pybrops.popgen.gmat.HaplotypeMatrix.rst", "_autosummary/pybrops.popgen.gmat.HaplotypeMatrix.HaplotypeMatrix.rst", "_autosummary/pybrops.popgen.gmat.HaplotypeMatrix.check_is_HaplotypeMatrix.rst", "_autosummary/pybrops.popgen.gmat.PhasedGenotypeMatrix.rst", "_autosummary/pybrops.popgen.gmat.PhasedGenotypeMatrix.PhasedGenotypeMatrix.rst", "_autosummary/pybrops.popgen.gmat.PhasedGenotypeMatrix.check_is_PhasedGenotypeMatrix.rst", "_autosummary/pybrops.popgen.gmat.PhasedHaplotypeMatrix.rst", "_autosummary/pybrops.popgen.gmat.PhasedHaplotypeMatrix.PhasedHaplotypeMatrix.rst", "_autosummary/pybrops.popgen.gmat.PhasedHaplotypeMatrix.check_is_PhasedHaplotypeMatrix.rst", "_autosummary/pybrops.test.rst", "_autosummary/pybrops.test.assert_python.rst", "_autosummary/pybrops.test.assert_python.assert_class_documentation.rst", "_autosummary/pybrops.test.assert_python.assert_class_isabstract.rst", "_autosummary/pybrops.test.assert_python.assert_class_isconcrete.rst", "_autosummary/pybrops.test.assert_python.assert_class_ismixin.rst", "_autosummary/pybrops.test.assert_python.assert_class_issemiabstract.rst", "_autosummary/pybrops.test.assert_python.assert_classmethod_documentation.rst", "_autosummary/pybrops.test.assert_python.assert_classmethod_isabstract.rst", "_autosummary/pybrops.test.assert_python.assert_classmethod_isconcrete.rst", "_autosummary/pybrops.test.assert_python.assert_classmethod_not_raises_NotImplementedError.rst", "_autosummary/pybrops.test.assert_python.assert_classmethod_raises_NotImplementedError.rst", "_autosummary/pybrops.test.assert_python.assert_docstring.rst", "_autosummary/pybrops.test.assert_python.assert_function_documentation.rst", "_autosummary/pybrops.test.assert_python.assert_function_isabstract.rst", "_autosummary/pybrops.test.assert_python.assert_function_isconcrete.rst", "_autosummary/pybrops.test.assert_python.assert_function_not_raises_NotImplementedError.rst", "_autosummary/pybrops.test.assert_python.assert_function_raises_NotImplementedError.rst", "_autosummary/pybrops.test.assert_python.assert_hasattr.rst", "_autosummary/pybrops.test.assert_python.assert_method_documentation.rst", "_autosummary/pybrops.test.assert_python.assert_method_isabstract.rst", "_autosummary/pybrops.test.assert_python.assert_method_isconcrete.rst", "_autosummary/pybrops.test.assert_python.assert_method_not_raises_NotImplementedError.rst", "_autosummary/pybrops.test.assert_python.assert_method_raises_NotImplementedError.rst", "_autosummary/pybrops.test.assert_python.assert_module_documentation.rst", "_autosummary/pybrops.test.assert_python.assert_property_documentation.rst", "_autosummary/pybrops.test.assert_python.assert_property_isabstract.rst", "_autosummary/pybrops.test.assert_python.assert_property_isconcrete.rst", "_autosummary/pybrops.test.assert_python.assert_property_not_raises_NotImplementedError.rst", "_autosummary/pybrops.test.assert_python.assert_property_raises_NotImplementedError.rst", "_autosummary/pybrops.test.assert_python.not_raises.rst", "_autosummary/pybrops.test.assert_python.raises.rst", "advanced_usage/advanced_usage.rst", "api.rst", "contributing/contributing.rst", "faq/faq.rst", "fundamentals/architecture/architecture.rst", "fundamentals/architecture/philosophy.rst", "fundamentals/fundamentals.rst", "fundamentals/simulation/philosophy.rst", "getting_started/getting_started.rst", "index.rst", "standard_usage/breeding_operators/evaluation_operators.rst", "standard_usage/breeding_operators/initialization_operators.rst", "standard_usage/breeding_operators/logbooks.rst", "standard_usage/breeding_operators/mating_operators.rst", "standard_usage/breeding_operators/parental_selection_operators.rst", "standard_usage/breeding_operators/survivor_selection_operators.rst", "standard_usage/breeding_protocols/breeding_value_protocols.rst", "standard_usage/breeding_protocols/genotyping_protocols.rst", "standard_usage/breeding_protocols/mating_protocols.rst", "standard_usage/breeding_protocols/phenotyping_protocols.rst", "standard_usage/breeding_protocols/selection_protocols.rst", "standard_usage/core_infrastructure/random_number_generation.rst", "standard_usage/examples/breeding_program_simulation/constrained_bitrait_phenotypic_selection.rst", "standard_usage/examples/breeding_program_simulation/constrained_single_trait_phenotypic_selection.rst", "standard_usage/examples/breeding_program_simulation/multiobjective_genomic_selection.rst", "standard_usage/examples/breeding_program_simulation/single_trait_phenotypic_selection.rst", "standard_usage/examples/examples.rst", "standard_usage/examples/pareto_frontier_visualization/biobjective_GEBV_pareto_frontier.rst", "standard_usage/examples/pareto_frontier_visualization/biobjective_wGEBV_pareto_frontier.rst", "standard_usage/examples/pareto_frontier_visualization/germplasm_panel_reduction.rst", "standard_usage/examples/pareto_frontier_visualization/triobjective_OCS_pareto_frontier.rst", "standard_usage/genomic_modeling/genomic_models.rst", "standard_usage/genomic_modeling/variance_matrices.rst", "standard_usage/optimization/optimization_algorithms.rst", "standard_usage/optimization/optimization_problems.rst", "standard_usage/optimization/optimization_solutions.rst", "standard_usage/population_genetics/breeding_value_matrices.rst", "standard_usage/population_genetics/coancestry_matrices.rst", "standard_usage/population_genetics/genetic_map_functions.rst", "standard_usage/population_genetics/genetic_maps.rst", "standard_usage/population_genetics/genotype_matrices.rst", "standard_usage/population_genetics/phased_genotype_matrices.rst", "standard_usage/standard_usage.rst"], "titles": ["pybrops", "breed", "arch", "BreedingEdge", "BreedingEdge", "check_is_BreedingEdge", "BreedingGraph", "BreedingGraph", "check_is_BreedingGraph", "BreedingNode", "BreedingNode", "check_is_BreedingNode", "BreedingProgram", "BreedingProgram", "check_is_BreedingProgram", "EmigrationOperator", "EmigrationOperator", "check_is_EmigrationOperator", "GermplasmBank", "GermplasmBank", "check_is_GermplasmBank", "ImmigrationOperator", "ImmigrationOperator", "check_is_ImmigrationOperator", "RecurrentSelectionBreedingProgram", "RecurrentSelectionBreedingProgram", "check_is_RecurrentSelectionBreedingProgram", "op", "eval", "EvaluationOperator", "EvaluationOperator", "check_is_EvaluationOperator", "init", "InitializationOperator", "InitializationOperator", "check_is_InitializationOperator", "log", "Logbook", "Logbook", "check_is_Logbook", "mate", "MatingOperator", "MatingOperator", "check_is_MatingOperator", "psel", "ParentSelectionOperator", "ParentSelectionOperator", "check_is_ParentSelectionOperator", "ssel", "SurvivorSelectionOperator", "SurvivorSelectionOperator", "check_is_SurvivorSelectionOperator", "prot", "bv", "BreedingValueProtocol", "BreedingValueProtocol", "check_is_BreedingValueProtocol", "MeanPhenotypicBreedingValue", "MeanPhenotypicBreedingValue", "TrueBreedingValue", "TrueBreedingValue", "gt", "DenseUnphasedGenotyping", "DenseUnphasedGenotyping", "GenotypingProtocol", "GenotypingProtocol", "check_is_GenotypingProtocol", "mate", "FourWayCross", "FourWayCross", "check_is_FourWayCross", "FourWayDHCross", "FourWayDHCross", "check_is_FourWayDHCross", "MatingProtocol", "MatingProtocol", "check_is_MatingProtocol", "SelfCross", "SelfCross", "check_is_SelfCross", "ThreeWayCross", "ThreeWayCross", "check_is_ThreeWayCross", "ThreeWayDHCross", "ThreeWayDHCross", "check_is_ThreeWayDHCross", "TwoWayCross", "TwoWayCross", "check_is_TwoWayCross", "TwoWayDHCross", "TwoWayDHCross", "check_is_TwoWayDHCross", "util", "mat_dh", "mat_mate", "mat_meiosis", "pt", "G_E_Phenotyping", "G_E_Phenotyping", "PhenotypingProtocol", "PhenotypingProtocol", "check_is_PhenotypingProtocol", "TruePhenotyping", "TruePhenotyping", "sel", "BinaryMateSelectionProtocol", "BinaryMateSelectionProtocol", "check_is_BinaryMateSelectionProtocol", "BinarySelectionProtocol", "BinarySelectionProtocol", "check_is_BinarySelectionProtocol", "EstimatedBreedingValueSelection", "EstimatedBreedingValueBinarySelection", "EstimatedBreedingValueIntegerSelection", "EstimatedBreedingValueRealSelection", "EstimatedBreedingValueSelectionMixin", "EstimatedBreedingValueSubsetSelection", "ExpectedMaximumBreedingValueSelection", "ExpectedMaximumBreedingValueBinarySelection", "ExpectedMaximumBreedingValueIntegerSelection", "ExpectedMaximumBreedingValueRealSelection", "ExpectedMaximumBreedingValueSelectionMixin", "ExpectedMaximumBreedingValueSubsetSelection", "FamilyEstimatedBreedingValueSelection", "FamilyEstimatedBreedingValueBinarySelection", "FamilyEstimatedBreedingValueIntegerSelection", "FamilyEstimatedBreedingValueRealSelection", "FamilyEstimatedBreedingValueSelectionMixin", "FamilyEstimatedBreedingValueSubsetSelection", "GeneralizedWeightedGenomicEstimatedBreedingValueSelection", "GeneralizedWeightedGenomicEstimatedBreedingValueBinarySelection", "GeneralizedWeightedGenomicEstimatedBreedingValueIntegerSelection", "GeneralizedWeightedGenomicEstimatedBreedingValueRealSelection", "GeneralizedWeightedGenomicEstimatedBreedingValueSelectionMixin", "GeneralizedWeightedGenomicEstimatedBreedingValueSubsetSelection", "GenomicEstimatedBreedingValueSelection", "GenomicEstimatedBreedingValueBinarySelection", "GenomicEstimatedBreedingValueIntegerSelection", "GenomicEstimatedBreedingValueRealSelection", "GenomicEstimatedBreedingValueSelectionMixin", "GenomicEstimatedBreedingValueSubsetSelection", "GenotypeBuilderSelection", "GenotypeBuilderSelectionMixin", "GenotypeBuilderSubsetSelection", "IntegerMateSelectionProtocol", "IntegerMateSelectionProtocol", "check_is_IntegerMateSelectionProtocol", "IntegerSelectionProtocol", "IntegerSelectionProtocol", "check_is_IntegerSelectionProtocol", "L1NormGenomicSelection", "L2NormGenomicSelection", "L2NormGenomicBinarySelection", "L2NormGenomicIntegerSelection", "L2NormGenomicRealSelection", "L2NormGenomicSelectionMixin", "L2NormGenomicSubsetSelection", "MateSelectionProtocol", "MateSelectionProtocol", "check_is_MateSelectionProtocol", "MeanExpectedHeterozygositySelection", "MeanExpectedHeterozygosityBinarySelection", "MeanExpectedHeterozygosityIntegerSelection", "MeanExpectedHeterozygosityRealSelection", "MeanExpectedHeterozygositySelectionMixin", "MeanExpectedHeterozygositySubsetSelection", "MeanGenomicRelationshipSelection", "MeanGenomicRelationshipBinarySelection", "MeanGenomicRelationshipIntegerSelection", "MeanGenomicRelationshipRealSelection", "MeanGenomicRelationshipSelectionMixin", "MeanGenomicRelationshipSubsetSelection", "MultiObjectiveGenomicSelection", "MultiObjectiveGenomicSelectionMixin", "MultiObjectiveGenomicSubsetSelection", "OptimalContributionSelection", "OptimalContributionBinarySelection", "OptimalContributionIntegerSelection", "OptimalContributionRealSelection", "OptimalContributionSelectionMixin", "OptimalContributionSubsetSelection", "OptimalHaploidValueSelection", "OptimalHaploidValueBinarySelection", "OptimalHaploidValueIntegerSelection", "OptimalHaploidValueRealSelection", "OptimalHaploidValueSelectionMixin", "OptimalHaploidValueSubsetSelection", "OptimalPopulationValueSelection", "OptimalPopulationValueSelectionMixin", "OptimalPopulationValueSubsetSelection", "RandomSelection", "RandomBinarySelection", "RandomIntegerSelection", "RandomRealSelection", "RandomSelectionMixin", "RandomSubsetSelection", "RealMateSelectionProtocol", "RealMateSelectionProtocol", "check_is_RealMateSelectionProtocol", "RealSelectionProtocol", "RealSelectionProtocol", "check_is_RealSelectionProtocol", "SelectionProtocol", "SelectionProtocol", "check_is_SelectionProtocol", "SubsetMateSelectionProtocol", "SubsetMateSelectionProtocol", "check_is_SubsetMateSelectionProtocol", "SubsetSelectionProtocol", "SubsetSelectionProtocol", "check_is_SubsetSelectionProtocol", "UnconstrainedGeneralized1NormGenomicSelection", "Generalized1NormGenomicSelection", "UnconstrainedMultiObjectiveGenomicMating", "MultiObjectiveGenomicMating", "UnconstrainedPopulationAlleleFrequencyDistanceSelection", "PopulationAlleleFrequencyDistanceSelection", "UnconstrainedPopulationAlleleUnavailabilitySelection", "PopulationAlleleUnavailabilitySelection", "UnconstrainedSelectionProtocol", "UnconstrainedSelectionProtocol", "check_is_SelectionProtocol", "UsefulnessCriterionSelection", "UsefulnessCriterionBinarySelection", "UsefulnessCriterionIntegerSelection", "UsefulnessCriterionRealSelection", "UsefulnessCriterionSelectionMixin", "UsefulnessCriterionSubsetSelection", "WeightedGenomicSelection", "WeightedGenomicBinarySelection", "WeightedGenomicIntegerSelection", "WeightedGenomicRealSelection", "WeightedGenomicSubsetSelection", "cfg", "BinaryMateSelectionConfiguration", "BinaryMateSelectionConfiguration", "BinarySelectionConfiguration", "BinarySelectionConfiguration", "IntegerMateSelectionConfiguration", "IntegerMateSelectionConfiguration", "IntegerSelectionConfiguration", "IntegerSelectionConfiguration", "MateSelectionConfiguration", "MateSelectionConfiguration", "check_is_MateSelectionConfiguration", "RealMateSelectionConfiguration", "RealMateSelectionConfiguration", "RealSelectionConfiguration", "RealSelectionConfiguration", "SampledSelectionConfigurationMixin", "SampledSelectionConfigurationMixin", "SelectionConfiguration", "SelectionConfiguration", "check_is_SelectionConfiguration", "SimpleMateSelectionConfiguration", "SimpleMateSelectionConfiguration", "SimpleSelectionConfiguration", "SimpleSelectionConfiguration", "SubsetMateSelectionConfiguration", "SubsetMateSelectionConfiguration", "SubsetSelectionConfiguration", "SubsetSelectionConfiguration", "prob", "BinaryMateSelectionProblem", "BinaryMateSelectionProblem", "BinarySelectionProblem", "BinarySelectionProblem", "check_is_BinarySelectionProblem", "EstimatedBreedingValueSelectionProblem", "EstimatedBreedingValueBinarySelectionProblem", "EstimatedBreedingValueIntegerSelectionProblem", "EstimatedBreedingValueRealSelectionProblem", "EstimatedBreedingValueSelectionProblemMixin", "EstimatedBreedingValueSubsetSelectionProblem", "ExpectedMaximumBreedingValueSelectionProblem", "ExpectedMaximumBreedingValueBinarySelectionProblem", "ExpectedMaximumBreedingValueIntegerSelectionProblem", "ExpectedMaximumBreedingValueRealSelectionProblem", "ExpectedMaximumBreedingValueSelectionProblemMixin", "ExpectedMaximumBreedingValueSubsetSelectionProblem", "FamilyEstimatedBreedingValueSelectionProblem", "FamilyEstimatedBreedingValueBinarySelectionProblem", "FamilyEstimatedBreedingValueIntegerSelectionProblem", "FamilyEstimatedBreedingValueRealSelectionProblem", "FamilyEstimatedBreedingValueSelectionProblemMixin", "FamilyEstimatedBreedingValueSubsetSelectionProblem", "GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem", "GeneralizedWeightedGenomicEstimatedBreedingValueBinarySelectionProblem", "GeneralizedWeightedGenomicEstimatedBreedingValueIntegerSelectionProblem", "GeneralizedWeightedGenomicEstimatedBreedingValueRealSelectionProblem", "GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblemMixin", "GeneralizedWeightedGenomicEstimatedBreedingValueSubsetSelectionProblem", "GenomicEstimatedBreedingValueSelectionProblem", "GenomicEstimatedBreedingValueBinarySelectionProblem", "GenomicEstimatedBreedingValueIntegerSelectionProblem", "GenomicEstimatedBreedingValueRealSelectionProblem", "GenomicEstimatedBreedingValueSelectionProblemMixin", "GenomicEstimatedBreedingValueSubsetSelectionProblem", "GenotypeBuilderSelectionProblem", "GenotypeBuilderSelectionProblemMixin", "GenotypeBuilderSubsetSelectionProblem", "IntegerMateSelectionProblem", "IntegerMateSelectionProblem", "IntegerSelectionProblem", "IntegerSelectionProblem", "check_is_IntegerSelectionProblem", "L1NormGenomicSelectionProblem", "L1NormGenomicBinarySelectionProblem", "L1NormGenomicIntegerSelectionProblem", "L1NormGenomicRealSelectionProblem", "L1NormGenomicSelectionProblemMixin", "L1NormGenomicSubsetSelectionProblem", "L2NormGenomicSelectionProblem", "L2NormGenomicBinarySelectionProblem", "L2NormGenomicIntegerSelectionProblem", "L2NormGenomicRealSelectionProblem", "L2NormGenomicSelectionProblemMixin", "L2NormGenomicSubsetSelectionProblem", "MateSelectionProblem", "MateSelectionProblem", "MeanExpectedHeterozygositySelectionProblem", "MeanExpectedHeterozygosityBinarySelectionProblem", "MeanExpectedHeterozygosityIntegerSelectionProblem", "MeanExpectedHeterozygosityRealSelectionProblem", "MeanExpectedHeterozygositySelectionProblemMixin", "MeanExpectedHeterozygositySubsetSelectionProblem", "MeanGenomicRelationshipSelectionProblem", "MeanGenomicRelationshipBinarySelectionProblem", "MeanGenomicRelationshipIntegerSelectionProblem", "MeanGenomicRelationshipRealSelectionProblem", "MeanGenomicRelationshipSelectionProblemMixin", "MeanGenomicRelationshipSubsetSelectionProblem", "MultiObjectiveGenomicMatingProblem", "MultiObjectiveGenomicMatingProblemMixin", "MultiObjectiveGenomicSubsetMatingProblem", "MultiObjectiveGenomicSelectionProblem", "MultiObjectiveGenomicSelectionProblemMixin", "MultiObjectiveGenomicSubsetSelectionProblem", "OptimalContributionSelectionProblem", "OptimalContributionBinarySelectionProblem", "OptimalContributionIntegerSelectionProblem", "OptimalContributionRealSelectionProblem", "OptimalContributionSelectionProblemMixin", "OptimalContributionSubsetSelectionProblem", "OptimalHaploidValueSelectionProblem", "OptimalHaploidValueBinarySelectionProblem", "OptimalHaploidValueIntegerSelectionProblem", "OptimalHaploidValueRealSelectionProblem", "OptimalHaploidValueSelectionProblemMixin", "OptimalHaploidValueSubsetSelectionProblem", "OptimalPopulationValueSelectionProblem", "OptimalPopulationValueSelectionProblemMixin", "OptimalPopulationValueSubsetSelectionProblem", "RandomSelectionProblem", "RandomBinarySelectionProblem", "RandomIntegerSelectionProblem", "RandomRealSelectionProblem", "RandomSelectionProblemMixin", "RandomSubsetSelectionProblem", "RealLookAheadGeneralizedWeightedGenomicSelectionProblem", "RealLookAheadGeneralizedWeightedGenomicSelectionProblem", "RealMateSelectionProblem", "RealMateSelectionProblem", "RealSelectionProblem", "RealSelectionProblem", "check_is_RealSelectionProblem", "SelectionProblem", "SelectionProblem", "check_is_SelectionProblem", "SubsetMateSelectionProblem", "SubsetMateSelectionProblem", "SubsetSelectionProblem", "SubsetSelectionProblem", "check_is_SubsetSelectionProblem", "UsefulnessCriterionSelectionProblem", "UsefulnessCriterionBinaryMateSelectionProblem", "UsefulnessCriterionIntegerMateSelectionProblem", "UsefulnessCriterionRealMateSelectionProblem", "UsefulnessCriterionSelectionProblemMixin", "UsefulnessCriterionSubsetMateSelectionProblem", "WeightedGenomicSelectionProblem", "WeightedGenomicBinarySelectionProblem", "WeightedGenomicIntegerSelectionProblem", "WeightedGenomicRealSelectionProblem", "WeightedGenomicSubsetSelectionProblem", "trans", "trans_decnvec_sum_eq", "trans_dot", "trans_empty", "trans_identity", "trans_ndpt_to_vec_dist", "trans_sum", "soln", "BinaryMateSelectionSolution", "BinaryMateSelectionSolution", "check_is_BinaryMateSelectionSolution", "BinarySelectionSolution", "BinarySelectionSolution", "check_is_BinarySelectionSolution", "IntegerMateSelectionSolution", "IntegerMateSelectionSolution", "check_is_IntegerMateSelectionSolution", "IntegerSelectionSolution", "IntegerSelectionSolution", "check_is_IntegerSelectionSolution", "MateSelectionSolution", "MateSelectionSolution", "check_is_MateSelectionSolution", "RealMateSelectionSolution", "RealMateSelectionSolution", "check_is_RealMateSelectionSolution", "RealSelectionSolution", "RealSelectionSolution", "check_is_RealSelectionSolution", "SelectionSolution", "SelectionSolution", "check_is_SelectionSolution", "SubsetMateSelectionSolution", "SubsetMateSelectionSolution", "check_is_SubsetMateSelectionSolution", "SubsetSelectionSolution", "SubsetSelectionSolution", "check_is_SubsetSelectionSolution", "targetfn", "target_negative", "target_positive", "target_stabilizing", "transfn", "trans_dot", "trans_flatten", "trans_identity_unconstrained", "trans_inbmax_penalty", "trans_max_inbreeding_constraint", "trans_ndpt_to_vec_dist", "trans_sum", "trans_sum_inbmax_penalty", "weightfn", "weight_absolute", "weight_one", "core", "error", "error_attr_python", "check_is_callable", "check_is_iterable", "error_readonly", "error_generic_numpy", "generic_check_ndarray_eq", "generic_check_ndarray_is_square", "generic_check_ndarray_ndim", "generic_check_ndarray_ndim_gteq", "generic_check_ndarray_shape", "generic_check_ndarray_size", "generic_check_ndarray_sum", "error_generic_python", "generic_check_isinstance", "error_io_python", "check_directory_exists", "check_file_exists", "check_path_exists", "error_type_h5py", "check_is_h5py_File", "error_type_numpy", "check_is_Generator", "check_is_Generator_or_RandomState", "check_is_Integral_or_ndarray", "check_is_Number_or_ndarray", "check_is_RandomState", "check_is_Real_or_ndarray", "check_is_ndarray", "check_is_str_or_ndarray", "check_ndarray_dtype", "check_ndarray_dtype_is_bool", "check_ndarray_dtype_is_bool_or_integer", "check_ndarray_dtype_is_bool_or_number", "check_ndarray_dtype_is_float16", "check_ndarray_dtype_is_float32", "check_ndarray_dtype_is_float64", "check_ndarray_dtype_is_floating", "check_ndarray_dtype_is_int16", "check_ndarray_dtype_is_int32", "check_ndarray_dtype_is_int64", "check_ndarray_dtype_is_int8", "check_ndarray_dtype_is_integer", "check_ndarray_dtype_is_integer_or_floating", "check_ndarray_dtype_is_number", "check_ndarray_dtype_is_object", "check_ndarray_dtype_is_object_or_string", "check_ndarray_dtype_is_real", "check_ndarray_dtype_is_string", "check_ndarray_dtype_is_unicode", "error_type_pandas", "check_Series_all_type", "check_is_pandas_DataFrame", "error_type_python", "check_Sequence_all_type", "check_inherits", "check_is_Callable", "check_is_Complex", "check_is_Container", "check_is_Integral", "check_is_Integral_or_None", "check_is_Integral_or_inf", "check_is_Number", "check_is_Real", "check_is_Sequence", "check_is_array_like", "check_is_bool", "check_is_bytes", "check_is_class", "check_is_dict", "check_is_float", "check_is_frozenset", "check_is_int", "check_is_int_or_None", "check_is_int_or_inf", "check_is_list", "check_is_list_or_tuple", "check_is_range", "check_is_set", "check_is_str", "check_is_str_or_Integral", "check_is_str_or_Sequence", "check_is_str_or_iterable", "check_is_tuple", "check_is_type", "check_isinstance", "error_value_h5py", "check_h5py_File_has_group", "check_h5py_File_has_groups", "check_h5py_File_is_writable", "error_value_numpy", "check_ndarray_all_gt", "check_ndarray_all_gteq", "check_ndarray_axis_len", "check_ndarray_axis_len_eq", "check_ndarray_axis_len_gt", "check_ndarray_axis_len_gteq", "check_ndarray_axis_len_lt", "check_ndarray_axis_len_lteq", "check_ndarray_eq", "check_ndarray_has_value", "check_ndarray_has_values", "check_ndarray_in_interval", "check_ndarray_is_binary", "check_ndarray_is_hypercube", "check_ndarray_is_square", "check_ndarray_is_triu", "check_ndarray_len_eq", "check_ndarray_len_gteq", "check_ndarray_len_is_multiple_of", "check_ndarray_mean_is_approx", "check_ndarray_ndim", "check_ndarray_ndim_gteq", "check_ndarray_shape_eq", "check_ndarray_size", "check_ndarray_std_is_approx", "check_ndarray_sum", "error_value_pandas", "check_pandas_DataFrame_has_column", "check_pandas_DataFrame_has_column_index", "check_pandas_DataFrame_has_column_indices", "check_pandas_DataFrame_has_columns", "check_pandas_Series_has_index", "check_pandas_Series_has_indices", "check_pandas_Series_has_value", "check_pandas_Series_has_values", "error_value_python", "check_Sequence_has_index", "check_Sequence_has_indices", "check_Sequence_has_value", "check_Sequence_has_values", "check_all_equal", "check_dict_has_keys", "check_dict_keys_all_type", "check_dict_values_all_type", "check_dict_values_have_equal_len", "check_dict_values_len_eq", "check_is_eq", "check_is_gt", "check_is_gteq", "check_is_in_interval_exclusive", "check_is_in_interval_inclusive", "check_is_lt", "check_is_lteq", "check_is_neq", "check_is_not_None", "check_len", "check_len_eq", "check_str_value", "check_tuple_len_eq", "io", "CSVDictInputOutput", "CSVDictInputOutput", "check_is_CSVDictInputOutput", "CSVInputOutput", "CSVInputOutput", "check_is_CSVInputOutput", "DictInputOutput", "DictInputOutput", "check_is_DictInputOutput", "HDF5InputOutput", "HDF5InputOutput", "check_is_HDF5InputOutput", "NPYInputOutput", "NPYInputOutput", "check_is_NPYInputOutput", "NPZInputOutput", "NPZInputOutput", "check_is_NPZInputOutput", "NumPyInputOutput", "NumPyInputOutput", "check_is_NumPyInputOutput", "PandasDictInputOutput", "PandasDictInputOutput", "check_is_PandasDictInputOutput", "PandasInputOutput", "PandasInputOutput", "check_is_PandasInputOutput", "mat", "DenseMatrix", "DenseMatrix", "check_is_DenseMatrix", "DenseMutableMatrix", "DenseMutableMatrix", "check_is_DenseMutableMatrix", "DensePhasedMatrix", "DensePhasedMatrix", "check_is_DensePhasedMatrix", "DensePhasedTaxaVariantMatrix", "DensePhasedTaxaVariantMatrix", "check_is_DensePhasedTaxaVariantMatrix", "DenseSquareMatrix", "DenseSquareMatrix", "check_is_DenseSquareMatrix", "DenseSquareTaxaMatrix", "DenseSquareTaxaMatrix", "check_is_DenseSquareTaxaMatrix", "DenseSquareTaxaSquareTraitMatrix", "DenseSquareTaxaSquareTraitMatrix", "check_is_DenseSquareTaxaSquareTraitMatrix", "DenseSquareTaxaTraitMatrix", "DenseSquareTaxaTraitMatrix", "check_is_DenseSquareTaxaTraitMatrix", "DenseSquareTraitMatrix", "DenseSquareTraitMatrix", "check_is_DenseSquareTraitMatrix", "DenseTaxaMatrix", "DenseTaxaMatrix", "check_is_DenseTaxaMatrix", "DenseTaxaTraitMatrix", "DenseTaxaTraitMatrix", "check_is_DenseTaxaTraitMatrix", "DenseTaxaVariantMatrix", "DenseTaxaVariantMatrix", "check_is_DenseTaxaVariantMatrix", "DenseTraitMatrix", "DenseTraitMatrix", "check_is_DenseTraitMatrix", "DenseVariantMatrix", "DenseVariantMatrix", "check_is_DenseVariantMatrix", "GroupableMatrix", "GroupableMatrix", "check_is_GroupableMatrix", "Matrix", "Matrix", "check_is_Matrix", "MutableMatrix", "MutableMatrix", "check_is_MutableMatrix", "PhasedMatrix", "PhasedMatrix", "check_is_PhasedMatrix", "PhasedTaxaVariantMatrix", "PhasedTaxaVariantMatrix", "check_is_PhasedTaxaVariantMatrix", "PrunableMatrix", "PrunableMatrix", "check_is_PrunableMatrix", "SortableMatrix", "SortableMatrix", "check_is_SortableMatrix", "SquareMatrix", "SquareMatrix", "check_is_SquareMatrix", "SquareTaxaMatrix", "SquareTaxaMatrix", "check_is_SquareTaxaMatrix", "SquareTaxaSquareTraitMatrix", "SquareTaxaSquareTraitMatrix", "check_is_SquareTaxaSquareTraitMatrix", "SquareTaxaTraitMatrix", "SquareTaxaTraitMatrix", "check_is_SquareTaxaTraitMatrix", "SquareTraitMatrix", "SquareTraitMatrix", "check_is_SquareTraitMatrix", "TaxaMatrix", "TaxaMatrix", "check_is_TaxaMatrix", "TaxaTraitMatrix", "TaxaTraitMatrix", "check_is_TaxaTraitMatrix", "TaxaVariantMatrix", "TaxaVariantMatrix", "check_is_TaxaVariantMatrix", "TraitMatrix", "TraitMatrix", "check_is_TraitMatrix", "VariantMatrix", "VariantMatrix", "check_is_VariantMatrix", "util", "get_axis", "random", "prng", "seed", "spawn", "sampling", "axis_shuffle", "outcross_shuffle", "stochastic_universal_sampling", "tiled_choice", "util", "arrayix", "flattenix", "sliceaxisix", "sqarrayix", "triudix", "triuix", "xmapix", "h5py", "h5py_File_is_writable", "save_dict_to_hdf5", "haplo", "haplobin", "haplobin_bounds", "haplomat", "nhaploblk_chrom", "iterator", "iterlen", "pareto", "is_pareto_efficient", "subroutines", "human2bytes", "matrix_is_sorted", "slice_to_list", "slice_to_range", "srange", "model", "gmod", "AdditiveDominanceEpistaticLinearGenomicModel", "AdditiveDominanceEpistaticLinearGenomicModel", "check_is_AdditiveDominanceEpistaticLinearGenomicModel", "AdditiveDominanceLinearGenomicModel", "AdditiveDominanceLinearGenomicModel", "check_is_AdditiveDominanceLinearGenomicModel", "AdditiveLinearGenomicModel", "AdditiveLinearGenomicModel", "check_is_AdditiveLinearGenomicModel", "CoancestryLinearGenomicModel", "CoancestryLinearGenomicModel", "check_is_CoancestryLinearGenomicModel", "DenseAdditiveDominanceLinearGenomicModel", "DenseAdditiveDominanceLinearGenomicModel", "check_is_DenseAdditiveDominanceLinearGenomicModel", "DenseAdditiveLinearGenomicModel", "DenseAdditiveLinearGenomicModel", "check_is_DenseAdditiveLinearGenomicModel", "DenseLinearGenomicModel", "DenseLinearGenomicModel", "check_is_DenseLinearGenomicModel", "GenomicModel", "GenomicModel", "check_is_GenomicModel", "LinearGenomicModel", "LinearGenomicModel", "check_is_LinearGenomicModel", "NonlinearGenomicModel", "NonlinearGenomicModel", "check_is_NonlinearGenomicModel", "rrBLUPModel0", "check_is_rrBLUPModel0", "gauss_seidel", "rrBLUPModel0", "rrBLUP_ML0", "rrBLUP_ML0_calc_G", "rrBLUP_ML0_calc_ZtZplI", "rrBLUP_ML0_calc_Zty", "rrBLUP_ML0_calc_d_V", "rrBLUP_ML0_calc_etasq", "rrBLUP_ML0_calc_ridge", "rrBLUP_ML0_center_y", "rrBLUP_ML0_neg2LogLik_fast", "rrBLUP_ML0_nonzero_d_V", "pcvmat", "AdditiveProgenyGeneticCovarianceMatrix", "AdditiveProgenyGeneticCovarianceMatrix", "check_is_AdditiveProgenyGeneticCovarianceMatrix", "AdditiveProgenyGenicCovarianceMatrix", "AdditiveProgenyGenicCovarianceMatrix", "check_is_AdditiveProgenyGenicCovarianceMatrix", "DenseAdditiveProgenyGeneticCovarianceMatrix", "DenseAdditiveProgenyGeneticCovarianceMatrix", "check_is_DenseAdditiveProgenyGeneticCovarianceMatrix", "DenseAdditiveProgenyGenicCovarianceMatrix", "DenseAdditiveProgenyGenicCovarianceMatrix", "check_is_DenseAdditiveProgenyGenicCovarianceMatrix", "DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix", "DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix", "check_is_DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix", "DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix", "DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix", "DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix", "DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix", "check_is_DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix", "DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix", "DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix", "DenseProgenyGeneticCovarianceMatrix", "DenseProgenyGeneticCovarianceMatrix", "check_is_DenseProgenyGeneticCovarianceMatrix", "DenseProgenyGenicCovarianceMatrix", "DenseProgenyGenicCovarianceMatrix", "check_is_DenseProgenyGenicCovarianceMatrix", "DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix", "DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix", "DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix", "DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix", "DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix", "DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix", "DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix", "DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix", "ProgenyGeneticCovarianceMatrix", "ProgenyGeneticCovarianceMatrix", "check_is_ProgenyGeneticCovarianceMatrix", "ProgenyGenicCovarianceMatrix", "ProgenyGenicCovarianceMatrix", "check_is_ProgenyGenicCovarianceMatrix", "vmat", "AdditiveGeneticVarianceMatrix", "AdditiveGeneticVarianceMatrix", "check_is_AdditiveGeneticVarianceMatrix", "AdditiveGenicVarianceMatrix", "AdditiveGenicVarianceMatrix", "check_is_AdditiveGenicVarianceMatrix", "DenseAdditiveGeneticVarianceMatrix", "DenseAdditiveGeneticVarianceMatrix", "check_is_DenseAdditiveGeneticVarianceMatrix", "DenseAdditiveGenicVarianceMatrix", "DenseAdditiveGenicVarianceMatrix", "check_is_DenseAdditiveGenicVarianceMatrix", "DenseDihybridDHAdditiveGeneticVarianceMatrix", "DenseDihybridDHAdditiveGeneticVarianceMatrix", "check_is_DenseDihybridDHAdditiveGeneticVarianceMatrix", "DenseDihybridDHAdditiveGenicVarianceMatrix", "DenseDihybridDHAdditiveGenicVarianceMatrix", "DenseFourWayDHAdditiveGeneticVarianceMatrix", "DenseFourWayDHAdditiveGeneticVarianceMatrix", "check_is_DenseFourWayDHAdditiveGeneticVarianceMatrix", "DenseFourWayDHAdditiveGenicVarianceMatrix", "DenseFourWayDHAdditiveGenicVarianceMatrix", "DenseGeneticVarianceMatrix", "DenseGeneticVarianceMatrix", "check_is_DenseGeneticVarianceMatrix", "DenseGenicVarianceMatrix", "DenseGenicVarianceMatrix", "check_is_DenseGenicVarianceMatrix", "DenseThreeWayDHAdditiveGeneticVarianceMatrix", "DenseThreeWayDHAdditiveGeneticVarianceMatrix", "DenseThreeWayDHAdditiveGenicVarianceMatrix", "DenseThreeWayDHAdditiveGenicVarianceMatrix", "DenseTwoWayDHAdditiveGeneticVarianceMatrix", "DenseTwoWayDHAdditiveGeneticVarianceMatrix", "DenseTwoWayDHAdditiveGenicVarianceMatrix", "DenseTwoWayDHAdditiveGenicVarianceMatrix", "GeneticVarianceMatrix", "GeneticVarianceMatrix", "check_is_GeneticVarianceMatrix", "GenicVarianceMatrix", "GenicVarianceMatrix", "check_is_GenicVarianceMatrix", "fcty", "AdditiveGeneticVarianceMatrixFactory", "AdditiveGeneticVarianceMatrixFactory", "check_is_AdditiveGeneticVarianceMatrixFactory", "AdditiveGenicVarianceMatrixFactory", "AdditiveGenicVarianceMatrixFactory", "check_is_AdditiveGenicVarianceMatrixFactory", "DenseDihybridDHAdditiveGeneticVarianceMatrixFactory", "DenseDihybridDHAdditiveGeneticVarianceMatrixFactory", "check_is_DenseDihybridDHAdditiveGeneticVarianceMatrixFactory", "DenseFourWayDHAdditiveGeneticVarianceMatrixFactory", "DenseFourWayDHAdditiveGeneticVarianceMatrixFactory", "check_is_DenseFourWayDHAdditiveGeneticVarianceMatrixFactory", "DenseThreeWayDHAdditiveGeneticVarianceMatrixFactory", "DenseThreeWayDHAdditiveGeneticVarianceMatrixFactory", "check_is_DenseThreeWayDHAdditiveGeneticVarianceMatrixFactory", "DenseTwoWayDHAdditiveGeneticVarianceMatrixFactory", "DenseTwoWayDHAdditiveGeneticVarianceMatrixFactory", "check_is_DenseTwoWayDHAdditiveGeneticVarianceMatrixFactory", "DenseTwoWayDHAdditiveGenicVarianceMatrixFactory", "DenseTwoWayDHAdditiveGenicVarianceMatrixFactory", "check_is_DenseTwoWayDHAdditiveGenicVarianceMatrixFactory", "GeneticVarianceMatrixFactory", "GeneticVarianceMatrixFactory", "check_is_GeneticVarianceMatrixFactory", "GenicVarianceMatrixFactory", "GenicVarianceMatrixFactory", "check_is_GenicVarianceMatrixFactory", "util", "cov_D1s", "cov_D1st", "cov_D2s", "cov_D2st", "rprob_filial", "opt", "algo", "BinaryGeneticAlgorithm", "BinaryGeneticAlgorithm", "BinaryOptimizationAlgorithm", "BinaryOptimizationAlgorithm", "check_is_BinaryOptimizationAlgorithm", "IntegerGeneticAlgorithm", "IntegerGeneticAlgorithm", "IntegerOptimizationAlgorithm", "IntegerOptimizationAlgorithm", "check_is_IntegerOptimizationAlgorithm", "NSGA2BinaryGeneticAlgorithm", "NSGA2BinaryGeneticAlgorithm", "NSGA2IntegerGeneticAlgorithm", "NSGA2IntegerGeneticAlgorithm", "NSGA2MemeticSubsetGeneticAlgorithm", "NSGA2MutatorASubsetGeneticAlgorithm", "NSGA2MutatorBSubsetGeneticAlgorithm", "NSGA2SteepestDescentSubsetGeneticAlgorithm", "NSGA2StochasticDescentSubsetGeneticAlgorithm", "NSGA2RealGeneticAlgorithm", "NSGA2RealGeneticAlgorithm", "NSGA2SubsetGeneticAlgorithm", "NSGA2SubsetGeneticAlgorithm", "NSGA3SubsetGeneticAlgorithm", "NSGA3SubsetGeneticAlgorithm", "OptimizationAlgorithm", "OptimizationAlgorithm", "check_is_OptimizationAlgorithm", "RealGeneticAlgorithm", "RealGeneticAlgorithm", "RealOptimizationAlgorithm", "RealOptimizationAlgorithm", "check_is_RealOptimizationAlgorithm", "SortingSteepestDescentSubsetHillClimber", "SortingSteepestDescentSubsetHillClimber", "SortingSubsetOptimizationAlgorithm", "SortingSubsetOptimizationAlgorithm", "SteepestDescentSubsetHillClimber", "SteepestDescentSubsetHillClimber", "SubsetGeneticAlgorithm", "SubsetGeneticAlgorithm", "SubsetOptimizationAlgorithm", "SubsetOptimizationAlgorithm", "check_is_SubsetOptimizationAlgorithm", "UnconstrainedNSGA2SetGeneticAlgorithm", "UnconstrainedNSGA2SetGeneticAlgorithm", "UnconstrainedOptimizationAlgorithm", "UnconstrainedOptimizationAlgorithm", "check_is_OptimizationAlgorithm", "UnconstrainedSetGeneticAlgorithm", "UnconstrainedSetGeneticAlgorithm", "UnconstrainedSteepestAscentSetHillClimber", "UnconstrainedSteepestAscentSetHillClimber", "pymoo_addon", "IntegerPolynomialMutation", "IntegerSimulatedBinaryCrossover", "MultiObjectiveSteepestDescentHillClimberMutation", "MultiObjectiveStochasticDescentHillClimberMutation", "MultiObjectiveStochasticHillClimberMutation", "MutatorA", "MutatorB", "MutatorF", "ReducedExchangeCrossover", "ReducedExchangeMutation", "StochasticHillClimberMutation", "SubsetRandomSampling", "dominates", "tiled_choice", "prob", "BinaryProblem", "BinaryProblem", "check_BinaryProblem_is_multi_objective", "check_BinaryProblem_is_single_objective", "check_is_BinaryProblem", "FunctionWeight", "FunctionWeight", "MaximizingFunctionWeight", "MinimizingFunctionWeight", "IntegerProblem", "IntegerProblem", "check_IntegerProblem_is_multi_objective", "check_IntegerProblem_is_single_objective", "check_is_IntegerProblem", "Problem", "Problem", "check_is_Problem", "RealProblem", "RealProblem", "check_RealProblem_is_multi_objective", "check_RealProblem_is_single_objective", "check_is_RealProblem", "SubsetProblem", "SubsetProblem", "check_SubsetProblem_is_multi_objective", "check_SubsetProblem_is_single_objective", "check_is_SubsetProblem", "soln", "BinarySolution", "BinarySolution", "check_is_BinarySolution", "IntegerSolution", "IntegerSolution", "check_is_IntegerSolution", "RealSolution", "RealSolution", "check_is_RealSolution", "Solution", "Solution", "check_is_Solution", "SubsetSolution", "SubsetSolution", "check_is_SubsetSolution", "popgen", "bvmat", "BreedingValueMatrix", "BreedingValueMatrix", "check_is_BreedingValueMatrix", "DenseBreedingValueMatrix", "DenseBreedingValueMatrix", "check_is_DenseBreedingValueMatrix", "DenseEstimatedBreedingValueMatrix", "DenseEstimatedBreedingValueMatrix", "check_is_DenseEstimatedBreedingValueMatrix", "DenseGenomicEstimatedBreedingValueMatrix", "DenseGenomicEstimatedBreedingValueMatrix", "check_is_DenseGenomicEstimatedBreedingValueMatrix", "cmat", "CoancestryMatrix", "CoancestryMatrix", "check_is_CoancestryMatrix", "DenseCoancestryMatrix", "DenseCoancestryMatrix", "check_is_DenseCoancestryMatrix", "DenseGeneralizedWeightedCoancestryMatrix", "DenseGeneralizedWeightedCoancestryMatrix", "check_is_DenseGeneralizedWeightedCoancestryMatrix", "DenseMolecularCoancestryMatrix", "DenseMolecularCoancestryMatrix", "check_is_DenseMolecularCoancestryMatrix", "DenseVanRadenCoancestryMatrix", "DenseVanRadenCoancestryMatrix", "check_is_DenseVanRadenCoancestryMatrix", "DenseYangCoancestryMatrix", "DenseYangCoancestryMatrix", "check_is_DenseYangCoancestryMatrix", "fcty", "CoancestryMatrixFactory", "CoancestryMatrixFactory", "check_is_CoancestryMatrixFactory", "DenseCoancestryMatrixFactory", "DenseCoancestryMatrixFactory", "check_is_DenseCoancestryMatrixFactory", "DenseGeneralizedWeightedCoancestryMatrixFactory", "DenseGeneralizedWeightedCoancestryMatrixFactory", "check_is_DenseGeneralizedWeightedCoancestryMatrixFactory", "DenseMolecularCoancestryMatrixFactory", "DenseMolecularCoancestryMatrixFactory", "check_is_DenseMolecularCoancestryMatrixFactory", "DenseVanRadenCoancestryMatrixFactory", "DenseVanRadenCoancestryMatrixFactory", "check_is_DenseVanRadenCoancestryMatrixFactory", "DenseYangCoancestryMatrixFactory", "DenseYangCoancestryMatrixFactory", "check_is_DenseYangCoancestryMatrixFactory", "gmap", "DenseGeneticMappableMatrix", "DenseGeneticMappableMatrix", "check_is_DenseGeneticMappableMatrix", "ExtendedGeneticMap", "ExtendedGeneticMap", "check_is_ExtendedGeneticMap", "GeneticMap", "GeneticMap", "check_is_GeneticMap", "GeneticMapFunction", "GeneticMapFunction", "check_is_GeneticMapFunction", "GeneticMappableMatrix", "GeneticMappableMatrix", "check_is_GeneticMappableMatrix", "HaldaneMapFunction", "HaldaneMapFunction", "check_is_HaldaneMapFunction", "KosambiMapFunction", "KosambiMapFunction", "check_is_KosambiMapFunction", "StandardGeneticMap", "StandardGeneticMap", "check_is_StandardGeneticMap", "util", "cM2d", "gmat", "DenseGenotypeMatrix", "DenseGenotypeMatrix", "check_is_DenseGenotypeMatrix", "DensePhasedGenotypeMatrix", "DensePhasedGenotypeMatrix", "check_DensePhasedGenotypeMatrix_has_vrnt_xoprob", "check_is_DensePhasedGenotypeMatrix", "GenotypeMatrix", "GenotypeMatrix", "check_GenotypeMatrix_has_taxa", "check_is_GenotypeMatrix", "HaplotypeMatrix", "HaplotypeMatrix", "check_is_HaplotypeMatrix", "PhasedGenotypeMatrix", "PhasedGenotypeMatrix", "check_is_PhasedGenotypeMatrix", "PhasedHaplotypeMatrix", "PhasedHaplotypeMatrix", "check_is_PhasedHaplotypeMatrix", "test", "assert_python", "assert_class_documentation", "assert_class_isabstract", "assert_class_isconcrete", "assert_class_ismixin", "assert_class_issemiabstract", "assert_classmethod_documentation", "assert_classmethod_isabstract", "assert_classmethod_isconcrete", "assert_classmethod_not_raises_NotImplementedError", "assert_classmethod_raises_NotImplementedError", "assert_docstring", "assert_function_documentation", "assert_function_isabstract", "assert_function_isconcrete", "assert_function_not_raises_NotImplementedError", "assert_function_raises_NotImplementedError", "assert_hasattr", "assert_method_documentation", "assert_method_isabstract", "assert_method_isconcrete", "assert_method_not_raises_NotImplementedError", "assert_method_raises_NotImplementedError", "assert_module_documentation", "assert_property_documentation", "assert_property_isabstract", "assert_property_isconcrete", "assert_property_not_raises_NotImplementedError", "assert_property_raises_NotImplementedError", "not_raises", "raises", "Advanced PyBrOpS Usage", "&lt;no title&gt;", "Contributing to PyBrOpS", "Frequently Asked Questions", "PyBrOpS Implemented Software Architecture", "PyBrOpS Software Architecture Philosophy", "PyBrOpS Fundamentals", "PyBrOpS Simulation Philosophy", "Getting Started", "PyBrOpS Main Page", "Evaluation Operators", "Initialization Operators", "Logbooks", "Mating Operators", "Parental Selection Operators", "Survivor Selection Operators", "Breeding Value Estimation Protocols", "Genotyping Protocols", "Mating Protocols", "Phenotyping Protocols", "Selection Protocols", "Random Number Generation", "Constrained Bi-Trait Phenotypic Selection", "Constrained Single-Trait Phenotypic Selection", "Multi-objective Genomic Selection", "Single-Trait Phenotypic Selection", "Examples", "Bi-Objective GEBV Selection Pareto Frontier Visualization", "Bi-Objective Weighted Genomic Selection Pareto Frontier Visualization", "Custom Bi-Objective Germplasm Panel Reduction Pareto Frontier Visualization", "Tri-Objective Optimal Contribution Selection Pareto Frontier Visualization", "Genomic Models", "Variance Matrices", "Optimization Algorithms", "Optimization Problems", "Optimization Solutions", "Breeding Value Matrices", "Coancestry Matrices", "Genetic Map Functions", "Genetic Maps", "Genotype Matrices", "Phased Genotype Matrices", "Standard PyBrOpS Usage"], "terms": {"softwar": [0, 677, 1167, 1170], "packag": [0, 1168, 1170, 1188, 1189, 1190, 1191], "numer": [0, 98, 580, 581, 604, 607, 764, 767, 784, 1035, 1038, 1041, 1169, 1181, 1185, 1197, 1198, 1201, 1202], "optim": [0, 106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 212, 214, 216, 218, 223, 224, 225, 227, 229, 230, 231, 232, 264, 266, 286, 298, 302, 304, 319, 332, 335, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 362, 364, 367, 370, 372, 380, 785, 793, 915, 916, 917, 918, 919, 920, 922, 923, 924, 925, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 945, 946, 947, 948, 951, 952, 953, 955, 956, 957, 958, 959, 961, 962, 963, 964, 966, 967, 968, 969, 970, 973, 974, 987, 991, 992, 993, 994, 996, 1001, 1004, 1009, 1015, 1018, 1021, 1027, 1168, 1170, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1198], "simul": [0, 13, 25, 63, 65, 67, 75, 97, 98, 100, 214, 360, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 883, 886, 889, 892, 895, 898, 901, 904, 907, 1167, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1178, 1180, 1182, 1188, 1189, 1190, 1191, 1192, 1199, 1200, 1201], "breed": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 16, 17, 19, 20, 22, 23, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 65, 66, 69, 70, 72, 73, 75, 76, 78, 79, 81, 82, 84, 85, 87, 88, 90, 91, 93, 94, 95, 98, 100, 101, 102, 103, 106, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 142, 143, 145, 146, 148, 149, 152, 153, 154, 155, 156, 158, 159, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 173, 174, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 188, 189, 191, 192, 193, 194, 195, 197, 198, 200, 201, 203, 204, 206, 207, 209, 210, 212, 214, 216, 218, 220, 221, 223, 224, 225, 226, 227, 229, 230, 231, 232, 235, 237, 239, 241, 243, 244, 246, 248, 250, 252, 253, 255, 257, 259, 261, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 299, 300, 302, 304, 305, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 319, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 333, 334, 336, 337, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 351, 352, 354, 355, 356, 357, 358, 360, 362, 364, 365, 367, 368, 370, 372, 373, 375, 376, 377, 378, 379, 381, 382, 383, 384, 386, 387, 388, 389, 390, 391, 394, 395, 397, 398, 400, 401, 403, 404, 406, 407, 409, 410, 412, 413, 415, 416, 418, 419, 421, 422, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 437, 438, 749, 752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 1030, 1031, 1032, 1034, 1035, 1037, 1038, 1040, 1041, 1166, 1169, 1170, 1188, 1189, 1190, 1200, 1201, 1202], "program": [0, 1, 2, 6, 7, 9, 10, 13, 19, 25, 27, 29, 30, 32, 33, 34, 37, 38, 40, 41, 42, 44, 45, 46, 48, 49, 50, 1166, 1168, 1170, 1188, 1189, 1192, 1201], "modul": [0, 1, 2, 3, 6, 9, 12, 15, 18, 21, 24, 27, 28, 29, 32, 33, 36, 37, 40, 41, 44, 45, 48, 49, 52, 53, 54, 57, 59, 61, 62, 64, 67, 68, 71, 74, 77, 80, 83, 86, 89, 92, 96, 97, 99, 102, 104, 105, 108, 111, 117, 123, 129, 135, 141, 144, 147, 151, 157, 160, 166, 172, 175, 181, 187, 190, 196, 199, 202, 205, 208, 211, 213, 214, 215, 216, 217, 218, 219, 222, 228, 233, 234, 236, 238, 240, 245, 247, 251, 254, 256, 258, 260, 262, 265, 268, 274, 280, 286, 292, 298, 303, 306, 312, 318, 320, 326, 332, 335, 338, 344, 350, 353, 363, 366, 371, 374, 380, 385, 392, 393, 399, 405, 408, 414, 417, 423, 427, 436, 439, 440, 441, 445, 453, 455, 461, 490, 493, 530, 557, 566, 590, 591, 594, 597, 600, 603, 604, 606, 609, 612, 615, 618, 619, 622, 625, 628, 631, 634, 637, 640, 643, 646, 649, 652, 655, 658, 661, 664, 667, 670, 673, 676, 679, 682, 685, 688, 691, 694, 697, 700, 703, 706, 709, 712, 714, 715, 716, 717, 718, 723, 724, 731, 734, 739, 741, 743, 749, 750, 751, 754, 757, 760, 763, 766, 769, 772, 775, 778, 781, 795, 796, 799, 802, 805, 808, 811, 813, 816, 818, 821, 824, 826, 828, 830, 832, 835, 838, 839, 842, 845, 848, 851, 854, 856, 859, 861, 864, 867, 869, 871, 873, 875, 878, 881, 903, 909, 915, 916, 917, 919, 922, 924, 927, 929, 931, 936, 938, 940, 942, 945, 947, 950, 952, 954, 956, 958, 961, 963, 966, 968, 970, 985, 991, 1013, 1029, 1030, 1031, 1034, 1037, 1040, 1043, 1044, 1047, 1050, 1053, 1056, 1059, 1062, 1063, 1066, 1069, 1072, 1075, 1078, 1081, 1082, 1085, 1088, 1091, 1094, 1097, 1100, 1103, 1106, 1108, 1109, 1112, 1116, 1120, 1123, 1126, 1129, 1153, 1166, 1170, 1182], "contain": [1, 10, 13, 19, 25, 27, 28, 32, 36, 40, 44, 48, 52, 53, 55, 58, 60, 61, 63, 64, 67, 69, 72, 75, 78, 81, 84, 87, 90, 92, 96, 98, 100, 103, 104, 106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 212, 214, 216, 218, 220, 223, 224, 225, 227, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 241, 245, 246, 248, 251, 254, 255, 256, 257, 258, 259, 261, 262, 264, 266, 269, 270, 271, 272, 273, 275, 276, 277, 279, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 300, 302, 304, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 319, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 334, 337, 339, 340, 341, 342, 343, 345, 346, 347, 349, 352, 354, 355, 356, 357, 358, 360, 362, 364, 367, 370, 372, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 387, 388, 389, 390, 391, 392, 393, 397, 399, 403, 405, 408, 412, 414, 417, 421, 423, 427, 430, 433, 439, 440, 441, 445, 453, 455, 461, 490, 493, 498, 527, 528, 530, 540, 541, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 568, 569, 570, 604, 607, 613, 620, 629, 635, 638, 641, 644, 647, 650, 653, 656, 659, 662, 665, 674, 680, 686, 689, 692, 695, 698, 701, 704, 707, 710, 712, 715, 718, 720, 721, 723, 726, 727, 728, 729, 730, 731, 734, 735, 736, 737, 738, 739, 741, 742, 743, 749, 750, 752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 781, 784, 788, 789, 790, 793, 794, 795, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 838, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 881, 909, 915, 916, 918, 920, 923, 925, 928, 930, 932, 933, 934, 935, 937, 939, 941, 943, 946, 948, 951, 953, 955, 957, 959, 962, 967, 970, 987, 996, 1001, 1004, 1009, 1015, 1018, 1021, 1027, 1029, 1030, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1062, 1081, 1083, 1086, 1089, 1095, 1104, 1106, 1108, 1110, 1113, 1117, 1121, 1124, 1127, 1129, 1168, 1172, 1190, 1192, 1195, 1196, 1199, 1200, 1201, 1202], "compon": [1, 785, 794, 951, 1168, 1195], "specifi": [2, 13, 25, 69, 72, 75, 78, 84, 87, 90, 106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 212, 214, 216, 218, 220, 223, 224, 225, 227, 229, 230, 231, 232, 235, 237, 239, 241, 246, 248, 255, 257, 259, 261, 307, 308, 309, 311, 313, 314, 315, 317, 397, 403, 412, 421, 580, 581, 592, 620, 623, 626, 629, 632, 635, 638, 641, 644, 647, 650, 653, 656, 659, 662, 665, 668, 671, 674, 677, 680, 683, 686, 689, 692, 695, 698, 701, 704, 707, 710, 752, 755, 758, 761, 764, 767, 770, 776, 784, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 914, 987, 996, 1004, 1009, 1015, 1018, 1021, 1027, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1083, 1086, 1089, 1095, 1104, 1110, 1113, 1117, 1121, 1124, 1127, 1166, 1170, 1179, 1181, 1184, 1190, 1197], "high": [2, 1086, 1089, 1104], "level": [2, 431, 1117, 1121, 1124, 1127, 1183, 1184, 1185, 1191, 1193, 1197, 1198, 1200, 1201], "architectur": [2, 1167, 1170, 1183, 1184, 1185, 1186], "defin": [3, 4, 6, 7, 9, 10, 12, 13, 15, 16, 18, 19, 21, 22, 29, 30, 33, 34, 37, 38, 41, 42, 45, 46, 49, 50, 54, 55, 58, 60, 63, 65, 69, 72, 74, 75, 78, 81, 84, 87, 90, 98, 99, 100, 103, 105, 106, 108, 109, 111, 112, 113, 114, 116, 118, 119, 120, 122, 123, 124, 125, 126, 128, 130, 131, 132, 134, 135, 136, 137, 138, 140, 141, 143, 144, 145, 147, 148, 151, 152, 153, 154, 156, 157, 158, 160, 161, 162, 163, 165, 166, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 196, 197, 199, 200, 202, 203, 205, 206, 208, 209, 212, 214, 216, 218, 219, 220, 223, 224, 225, 227, 229, 230, 231, 232, 236, 240, 247, 260, 264, 266, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 304, 307, 308, 309, 311, 313, 314, 315, 317, 318, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 338, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 360, 362, 364, 367, 370, 372, 375, 376, 377, 379, 381, 382, 383, 384, 591, 592, 594, 595, 597, 598, 600, 601, 603, 604, 606, 607, 609, 610, 612, 613, 615, 616, 620, 623, 626, 629, 632, 635, 638, 641, 644, 646, 647, 649, 650, 652, 653, 656, 659, 661, 662, 664, 665, 667, 668, 670, 671, 673, 674, 676, 677, 679, 680, 682, 683, 685, 686, 688, 689, 691, 692, 694, 695, 697, 698, 700, 701, 703, 704, 706, 707, 709, 710, 751, 752, 754, 755, 757, 758, 760, 761, 764, 767, 770, 772, 775, 776, 778, 784, 796, 797, 799, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 832, 833, 835, 836, 839, 840, 842, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 875, 876, 878, 879, 903, 919, 924, 942, 947, 958, 963, 991, 1024, 1031, 1032, 1035, 1038, 1041, 1044, 1045, 1048, 1051, 1054, 1057, 1060, 1063, 1066, 1069, 1072, 1075, 1078, 1083, 1088, 1091, 1092, 1094, 1095, 1098, 1101, 1110, 1113, 1116, 1117, 1120, 1121, 1123, 1124, 1126, 1127, 1132, 1134, 1155, 1156, 1168, 1177, 1178, 1181, 1183, 1184, 1192, 1195, 1198, 1200], "interfac": [3, 4, 6, 7, 9, 12, 15, 18, 21, 29, 30, 33, 34, 37, 38, 41, 42, 45, 46, 49, 50, 54, 55, 74, 99, 100, 219, 220, 265, 303, 318, 363, 367, 371, 405, 406, 414, 439, 590, 591, 594, 597, 600, 603, 606, 609, 612, 615, 618, 629, 635, 641, 644, 650, 653, 661, 664, 667, 670, 671, 673, 674, 676, 679, 682, 685, 686, 688, 689, 691, 692, 694, 695, 697, 700, 701, 703, 704, 706, 709, 751, 752, 754, 755, 757, 758, 760, 761, 772, 773, 775, 778, 779, 796, 797, 799, 800, 832, 833, 835, 836, 839, 840, 842, 843, 875, 876, 878, 879, 881, 903, 904, 907, 919, 924, 942, 947, 958, 963, 986, 987, 995, 996, 1000, 1003, 1004, 1008, 1009, 1014, 1017, 1020, 1023, 1024, 1026, 1031, 1044, 1062, 1063, 1066, 1069, 1072, 1075, 1078, 1088, 1091, 1094, 1116, 1120, 1123, 1124, 1126, 1127, 1169, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1190, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202], "associ": [3, 6, 9, 12, 15, 18, 21, 29, 33, 37, 41, 45, 49, 54, 74, 99, 446, 447, 448, 449, 450, 451, 452, 454, 492, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 591, 594, 597, 600, 609, 612, 615, 619, 622, 625, 628, 631, 632, 634, 637, 640, 643, 646, 649, 652, 655, 658, 661, 664, 667, 670, 673, 676, 679, 682, 683, 685, 688, 691, 694, 697, 700, 703, 706, 709, 722, 733, 796, 799, 802, 805, 808, 811, 813, 816, 818, 821, 824, 826, 828, 830, 835, 839, 842, 845, 848, 851, 854, 856, 859, 861, 864, 867, 869, 871, 873, 875, 878, 903, 942, 963, 1031, 1034, 1037, 1040, 1044, 1047, 1053, 1056, 1059, 1063, 1066, 1069, 1072, 1075, 1078, 1082, 1085, 1086, 1088, 1089, 1091, 1094, 1097, 1100, 1103, 1104, 1109, 1110, 1112, 1116, 1120, 1123, 1126, 1170, 1201, 1202], "error": [3, 6, 9, 12, 15, 18, 21, 29, 33, 37, 41, 45, 49, 54, 74, 98, 100, 103, 214, 216, 218, 219, 334, 337, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 491, 492, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 565, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 594, 597, 600, 603, 606, 609, 612, 615, 619, 622, 625, 628, 631, 634, 637, 640, 643, 646, 649, 652, 655, 658, 661, 664, 667, 670, 673, 676, 679, 682, 685, 688, 691, 694, 697, 700, 703, 706, 709, 751, 752, 754, 755, 757, 758, 760, 761, 763, 764, 766, 767, 769, 770, 772, 775, 776, 778, 784, 785, 791, 796, 799, 802, 805, 808, 809, 811, 813, 814, 816, 818, 821, 824, 825, 826, 828, 829, 830, 832, 835, 839, 842, 845, 848, 851, 852, 854, 856, 857, 859, 861, 864, 867, 868, 869, 871, 872, 873, 875, 878, 903, 919, 924, 942, 947, 958, 963, 1031, 1034, 1037, 1040, 1044, 1047, 1053, 1056, 1059, 1063, 1066, 1069, 1072, 1075, 1078, 1082, 1085, 1086, 1088, 1091, 1094, 1097, 1098, 1100, 1101, 1103, 1109, 1112, 1116, 1120, 1123, 1126, 1200], "check": [3, 5, 6, 8, 9, 11, 12, 14, 15, 17, 18, 20, 21, 23, 26, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 54, 56, 66, 70, 73, 74, 76, 79, 82, 85, 88, 91, 101, 107, 110, 146, 149, 159, 198, 201, 204, 207, 210, 214, 216, 218, 219, 244, 253, 264, 266, 267, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 304, 305, 307, 308, 309, 311, 313, 314, 315, 317, 319, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 360, 362, 364, 365, 367, 368, 370, 372, 373, 375, 376, 377, 379, 381, 382, 383, 384, 395, 398, 401, 404, 407, 410, 413, 416, 419, 422, 439, 440, 442, 443, 446, 447, 448, 449, 450, 451, 452, 454, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 492, 493, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 593, 594, 596, 597, 599, 600, 602, 603, 605, 606, 608, 609, 611, 612, 614, 615, 617, 619, 621, 622, 624, 625, 627, 628, 630, 631, 633, 634, 636, 637, 639, 640, 642, 643, 645, 646, 648, 649, 651, 652, 654, 655, 657, 658, 660, 661, 663, 664, 666, 667, 669, 670, 672, 673, 675, 676, 678, 679, 681, 682, 684, 685, 687, 688, 690, 691, 693, 694, 696, 697, 699, 700, 702, 703, 705, 706, 708, 709, 711, 732, 751, 753, 754, 756, 757, 759, 760, 762, 763, 765, 766, 768, 769, 771, 772, 774, 775, 777, 778, 780, 782, 796, 798, 799, 801, 802, 804, 805, 807, 808, 810, 811, 813, 815, 816, 818, 820, 821, 823, 824, 826, 828, 830, 832, 834, 835, 837, 839, 841, 842, 844, 845, 847, 848, 850, 851, 853, 854, 856, 858, 859, 861, 863, 864, 866, 867, 869, 871, 873, 875, 877, 878, 880, 884, 887, 890, 893, 896, 899, 902, 903, 905, 908, 919, 921, 924, 926, 942, 944, 947, 949, 958, 960, 963, 965, 987, 988, 989, 990, 996, 997, 998, 999, 1001, 1002, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1016, 1019, 1022, 1025, 1028, 1031, 1033, 1034, 1036, 1037, 1039, 1040, 1042, 1044, 1046, 1047, 1049, 1052, 1053, 1055, 1056, 1058, 1059, 1061, 1063, 1065, 1066, 1068, 1069, 1071, 1072, 1074, 1075, 1077, 1078, 1080, 1082, 1084, 1085, 1087, 1088, 1090, 1091, 1093, 1094, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1105, 1109, 1111, 1112, 1114, 1116, 1118, 1119, 1120, 1122, 1123, 1125, 1126, 1128, 1178], "routin": [3, 6, 9, 12, 13, 15, 18, 21, 29, 33, 37, 41, 45, 49, 74, 219, 439, 440, 459, 591, 594, 597, 600, 603, 606, 609, 612, 615, 619, 620, 622, 623, 625, 626, 628, 631, 634, 637, 640, 643, 646, 647, 649, 652, 655, 656, 658, 659, 661, 662, 664, 665, 667, 668, 670, 671, 673, 676, 679, 680, 682, 685, 688, 691, 694, 697, 698, 700, 703, 706, 707, 709, 710, 751, 754, 757, 760, 763, 766, 769, 772, 775, 778, 796, 799, 802, 805, 808, 811, 813, 816, 818, 821, 824, 826, 828, 830, 832, 835, 839, 842, 845, 848, 851, 854, 856, 859, 861, 864, 867, 869, 871, 873, 875, 878, 903, 919, 924, 942, 947, 958, 963, 1031, 1034, 1035, 1037, 1038, 1040, 1041, 1044, 1045, 1047, 1048, 1051, 1053, 1054, 1056, 1057, 1059, 1060, 1063, 1066, 1069, 1072, 1075, 1078, 1082, 1085, 1086, 1088, 1089, 1091, 1094, 1097, 1100, 1103, 1104, 1109, 1110, 1112, 1113, 1116, 1117, 1120, 1121, 1123, 1126, 1168, 1169, 1197, 1201], "edg": [3, 4, 6, 7], "how": [3, 4, 390, 433, 1169, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1181, 1183, 1184, 1186, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1197, 1198, 1201], "inform": [3, 4, 6, 7, 9, 10, 38, 106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 223, 224, 225, 227, 229, 230, 231, 232, 638, 644, 647, 650, 653, 656, 659, 982, 1035, 1038, 1041, 1110, 1113, 1168, 1170, 1173, 1181, 1195, 1197, 1200, 1201], "germplasm": [3, 4, 6, 7, 9, 10, 12, 18, 19, 1187], "flow": [3, 4], "between": [3, 4, 6, 7, 16, 22, 106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 214, 216, 218, 223, 224, 225, 227, 229, 230, 231, 232, 334, 337, 390, 433, 604, 720, 752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 783, 784, 785, 809, 814, 825, 829, 852, 857, 868, 872, 910, 911, 912, 914, 1045, 1048, 1051, 1054, 1057, 1060, 1083, 1086, 1089, 1092, 1095, 1098, 1101, 1104, 1110, 1113, 1117, 1124, 1168, 1179, 1183, 1185, 1191, 1193, 1197, 1198, 1199, 1201, 1202], "node": [3, 4, 6, 7, 9, 10, 16, 22], "class": [3, 4, 6, 7, 9, 10, 12, 13, 15, 16, 18, 19, 21, 22, 24, 25, 29, 30, 33, 34, 37, 38, 41, 42, 45, 46, 49, 50, 54, 55, 57, 58, 59, 60, 62, 63, 64, 65, 68, 69, 71, 72, 74, 75, 77, 78, 80, 81, 83, 84, 86, 87, 89, 90, 97, 98, 99, 100, 102, 103, 105, 106, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 147, 148, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 202, 203, 205, 206, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 393, 394, 396, 397, 399, 400, 402, 403, 405, 406, 408, 409, 411, 412, 414, 415, 417, 418, 420, 421, 508, 591, 592, 594, 595, 597, 598, 600, 601, 603, 604, 606, 607, 609, 610, 612, 613, 615, 616, 619, 620, 622, 623, 625, 626, 628, 629, 631, 632, 634, 635, 637, 638, 640, 641, 643, 644, 646, 647, 649, 650, 652, 653, 655, 656, 658, 659, 661, 662, 664, 665, 667, 668, 670, 671, 673, 674, 676, 677, 679, 680, 682, 683, 685, 686, 688, 689, 691, 692, 694, 695, 697, 698, 700, 701, 703, 704, 706, 707, 709, 710, 717, 751, 752, 754, 755, 757, 758, 760, 761, 763, 764, 766, 767, 769, 770, 772, 773, 775, 776, 778, 779, 781, 784, 796, 797, 799, 800, 802, 803, 805, 806, 808, 809, 811, 812, 813, 814, 816, 817, 818, 819, 821, 822, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 836, 839, 840, 842, 843, 845, 846, 848, 849, 851, 852, 854, 855, 856, 857, 859, 860, 861, 862, 864, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 878, 879, 882, 883, 885, 886, 888, 889, 891, 892, 894, 895, 897, 898, 900, 901, 903, 904, 906, 907, 917, 918, 919, 920, 922, 923, 924, 925, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 945, 946, 947, 948, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 961, 962, 963, 964, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 986, 987, 991, 992, 993, 994, 995, 996, 1000, 1001, 1003, 1004, 1008, 1009, 1014, 1015, 1017, 1018, 1020, 1021, 1023, 1024, 1026, 1027, 1031, 1032, 1034, 1035, 1037, 1038, 1040, 1041, 1044, 1045, 1047, 1048, 1050, 1051, 1053, 1054, 1056, 1057, 1059, 1060, 1063, 1064, 1066, 1067, 1069, 1070, 1072, 1073, 1075, 1076, 1078, 1079, 1082, 1083, 1085, 1086, 1088, 1089, 1091, 1092, 1094, 1095, 1097, 1098, 1100, 1101, 1103, 1104, 1109, 1110, 1112, 1113, 1116, 1117, 1120, 1121, 1123, 1124, 1126, 1127, 1131, 1132, 1133, 1134, 1135, 1166, 1183, 1184, 1185, 1186, 1188, 1189, 1191], "function": [3, 6, 7, 9, 10, 12, 13, 15, 16, 18, 19, 21, 22, 24, 29, 30, 33, 34, 37, 38, 41, 42, 45, 46, 49, 50, 54, 55, 64, 65, 68, 71, 74, 75, 77, 80, 83, 86, 89, 92, 99, 100, 105, 106, 108, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 144, 145, 147, 148, 152, 153, 154, 156, 157, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 196, 197, 199, 200, 202, 203, 205, 206, 208, 209, 212, 214, 216, 218, 219, 220, 223, 224, 225, 226, 227, 229, 230, 231, 232, 242, 243, 249, 250, 251, 264, 265, 266, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 303, 304, 307, 308, 309, 311, 313, 314, 315, 317, 319, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 360, 362, 363, 364, 366, 367, 370, 371, 372, 375, 376, 377, 379, 381, 382, 383, 384, 385, 387, 388, 389, 390, 391, 393, 394, 396, 397, 399, 400, 402, 403, 405, 406, 408, 409, 411, 412, 414, 415, 417, 418, 420, 421, 423, 427, 428, 429, 430, 432, 433, 434, 435, 436, 441, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 459, 461, 490, 493, 525, 526, 530, 557, 566, 591, 592, 594, 595, 597, 598, 600, 601, 603, 604, 606, 607, 609, 610, 612, 613, 615, 616, 618, 619, 620, 622, 623, 625, 626, 628, 631, 632, 634, 637, 640, 643, 646, 647, 649, 652, 655, 656, 658, 659, 661, 662, 664, 665, 667, 668, 670, 671, 673, 676, 677, 679, 680, 682, 683, 685, 688, 691, 694, 697, 698, 700, 703, 706, 707, 709, 710, 712, 715, 718, 720, 723, 724, 731, 734, 739, 741, 742, 743, 751, 754, 757, 760, 763, 766, 769, 772, 773, 775, 778, 781, 793, 796, 797, 799, 800, 802, 803, 805, 806, 808, 809, 812, 813, 814, 817, 818, 819, 821, 822, 825, 827, 829, 831, 832, 833, 835, 836, 839, 840, 842, 843, 845, 846, 848, 849, 851, 852, 855, 856, 857, 860, 861, 862, 864, 865, 868, 870, 872, 874, 875, 876, 878, 879, 882, 883, 885, 886, 888, 889, 891, 892, 894, 895, 897, 898, 900, 901, 903, 904, 906, 907, 909, 918, 919, 920, 923, 924, 925, 928, 930, 932, 933, 934, 935, 937, 939, 941, 942, 943, 946, 947, 948, 957, 958, 959, 962, 963, 964, 967, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 986, 987, 992, 993, 994, 995, 996, 1000, 1001, 1003, 1004, 1008, 1009, 1014, 1015, 1017, 1018, 1020, 1021, 1023, 1024, 1026, 1027, 1031, 1034, 1037, 1040, 1044, 1045, 1047, 1048, 1050, 1053, 1054, 1056, 1057, 1059, 1060, 1063, 1066, 1069, 1072, 1075, 1078, 1081, 1082, 1083, 1085, 1086, 1088, 1089, 1091, 1092, 1094, 1095, 1097, 1098, 1100, 1101, 1103, 1104, 1106, 1109, 1110, 1112, 1113, 1116, 1117, 1120, 1121, 1123, 1124, 1126, 1130, 1142, 1143, 1144, 1145, 1146, 1160, 1166, 1168, 1170, 1181, 1182, 1188, 1189, 1190, 1191, 1192, 1195, 1196, 1197, 1198, 1200, 1202, 1203], "pybrop": [4, 5, 7, 8, 10, 11, 13, 14, 16, 17, 19, 20, 22, 23, 25, 26, 30, 31, 34, 35, 38, 39, 42, 43, 46, 47, 50, 51, 55, 56, 58, 60, 63, 65, 66, 69, 70, 72, 73, 75, 76, 78, 79, 81, 82, 84, 85, 87, 88, 90, 91, 93, 94, 95, 98, 100, 101, 103, 106, 107, 109, 110, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 142, 143, 145, 146, 148, 149, 152, 153, 154, 155, 156, 158, 159, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 173, 174, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 188, 189, 191, 192, 193, 194, 195, 197, 198, 200, 201, 203, 204, 206, 207, 209, 210, 212, 214, 216, 218, 220, 221, 223, 224, 225, 226, 227, 229, 230, 231, 232, 235, 237, 239, 241, 243, 244, 246, 248, 250, 252, 253, 255, 257, 259, 261, 264, 266, 267, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 299, 300, 302, 304, 305, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 319, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 333, 334, 336, 337, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 351, 352, 354, 355, 356, 357, 358, 360, 362, 364, 365, 367, 368, 370, 372, 373, 375, 376, 377, 378, 379, 381, 382, 383, 384, 386, 387, 388, 389, 390, 391, 394, 395, 397, 398, 400, 401, 403, 404, 406, 407, 409, 410, 412, 413, 415, 416, 418, 419, 421, 422, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 437, 438, 439, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 454, 456, 457, 458, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 491, 492, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 527, 528, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 565, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 592, 593, 595, 596, 598, 599, 601, 602, 604, 605, 607, 608, 610, 611, 613, 614, 616, 617, 620, 621, 623, 624, 626, 627, 629, 630, 632, 633, 635, 636, 638, 639, 641, 642, 644, 645, 647, 648, 650, 651, 653, 654, 656, 657, 659, 660, 662, 663, 665, 666, 668, 669, 671, 672, 674, 675, 677, 678, 680, 681, 683, 684, 686, 687, 689, 690, 692, 693, 695, 696, 698, 699, 701, 702, 704, 705, 707, 708, 710, 711, 713, 716, 717, 719, 720, 721, 722, 725, 726, 727, 728, 729, 730, 732, 733, 735, 736, 737, 738, 740, 742, 744, 745, 746, 747, 748, 752, 753, 755, 756, 758, 759, 761, 762, 764, 765, 767, 768, 770, 771, 773, 774, 776, 777, 779, 780, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 797, 798, 800, 801, 803, 804, 806, 807, 809, 810, 812, 814, 815, 817, 819, 820, 822, 823, 825, 827, 829, 831, 833, 834, 836, 837, 840, 841, 843, 844, 846, 847, 849, 850, 852, 853, 855, 857, 858, 860, 862, 863, 865, 866, 868, 870, 872, 874, 876, 877, 879, 880, 883, 884, 886, 887, 889, 890, 892, 893, 895, 896, 898, 899, 901, 902, 904, 905, 907, 908, 910, 911, 912, 913, 914, 918, 920, 921, 923, 925, 926, 928, 930, 932, 933, 934, 935, 937, 939, 941, 943, 944, 946, 948, 949, 951, 953, 955, 957, 959, 960, 962, 964, 965, 967, 969, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 987, 988, 989, 990, 992, 993, 994, 996, 997, 998, 999, 1001, 1002, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1015, 1016, 1018, 1019, 1021, 1022, 1024, 1025, 1027, 1028, 1032, 1033, 1035, 1036, 1038, 1039, 1041, 1042, 1045, 1046, 1048, 1049, 1051, 1052, 1054, 1055, 1057, 1058, 1060, 1061, 1064, 1065, 1067, 1068, 1070, 1071, 1073, 1074, 1076, 1077, 1079, 1080, 1083, 1084, 1086, 1087, 1089, 1090, 1092, 1093, 1095, 1096, 1098, 1099, 1101, 1102, 1104, 1105, 1107, 1110, 1111, 1113, 1114, 1115, 1117, 1118, 1119, 1121, 1122, 1124, 1125, 1127, 1128, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1183, 1184, 1185, 1186, 1188, 1189, 1190, 1191], "arch": [4, 5, 7, 8, 10, 11, 13, 14, 16, 17, 19, 20, 22, 23, 25, 26, 1185], "sourc": [4, 5, 7, 8, 10, 11, 13, 14, 16, 17, 19, 20, 22, 23, 25, 26, 30, 31, 34, 35, 38, 39, 42, 43, 46, 47, 50, 51, 55, 56, 58, 60, 63, 65, 66, 69, 70, 72, 73, 75, 76, 78, 79, 81, 82, 84, 85, 87, 88, 90, 91, 93, 94, 95, 98, 100, 101, 103, 106, 107, 109, 110, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 142, 143, 145, 146, 148, 149, 152, 153, 154, 155, 156, 158, 159, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 173, 174, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 188, 189, 191, 192, 193, 194, 195, 197, 198, 200, 201, 203, 204, 206, 207, 209, 210, 212, 214, 216, 218, 220, 221, 223, 224, 225, 226, 227, 229, 230, 231, 232, 235, 237, 239, 241, 243, 244, 246, 248, 250, 252, 253, 255, 257, 259, 261, 264, 266, 267, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 299, 300, 302, 304, 305, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 319, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 333, 334, 336, 337, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 351, 352, 354, 355, 356, 357, 358, 360, 362, 364, 365, 367, 368, 370, 372, 373, 375, 376, 377, 378, 379, 381, 382, 383, 384, 386, 387, 388, 389, 390, 391, 394, 395, 397, 398, 400, 401, 403, 404, 406, 407, 409, 410, 412, 413, 415, 416, 418, 419, 421, 422, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 437, 438, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 454, 456, 457, 458, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 491, 492, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 527, 528, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 565, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 592, 593, 595, 596, 598, 599, 601, 602, 604, 605, 607, 608, 610, 611, 613, 614, 616, 617, 620, 621, 623, 624, 626, 627, 629, 630, 632, 633, 635, 636, 638, 639, 641, 642, 644, 645, 647, 648, 650, 651, 653, 654, 656, 657, 659, 660, 662, 663, 665, 666, 668, 669, 671, 672, 674, 675, 677, 678, 680, 681, 683, 684, 686, 687, 689, 690, 692, 693, 695, 696, 698, 699, 701, 702, 704, 705, 707, 708, 710, 711, 713, 716, 717, 719, 720, 721, 722, 725, 726, 727, 728, 729, 730, 732, 733, 735, 736, 737, 738, 740, 742, 744, 745, 746, 747, 748, 752, 753, 755, 756, 758, 759, 761, 762, 764, 765, 767, 768, 770, 771, 773, 774, 776, 777, 779, 780, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 797, 798, 800, 801, 803, 804, 806, 807, 809, 810, 812, 814, 815, 817, 819, 820, 822, 823, 825, 827, 829, 831, 833, 834, 836, 837, 840, 841, 843, 844, 846, 847, 849, 850, 852, 853, 855, 857, 858, 860, 862, 863, 865, 866, 868, 870, 872, 874, 876, 877, 879, 880, 883, 884, 886, 887, 889, 890, 892, 893, 895, 896, 898, 899, 901, 902, 904, 905, 907, 908, 910, 911, 912, 913, 914, 918, 920, 921, 923, 925, 926, 928, 930, 932, 933, 934, 935, 937, 939, 941, 943, 944, 946, 948, 949, 951, 953, 955, 957, 959, 960, 962, 964, 965, 967, 969, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 987, 988, 989, 990, 992, 993, 994, 996, 997, 998, 999, 1001, 1002, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1015, 1016, 1018, 1019, 1021, 1022, 1024, 1025, 1027, 1028, 1032, 1033, 1035, 1036, 1038, 1039, 1041, 1042, 1045, 1046, 1048, 1049, 1051, 1052, 1054, 1055, 1057, 1058, 1060, 1061, 1064, 1065, 1067, 1068, 1070, 1071, 1073, 1074, 1076, 1077, 1079, 1080, 1083, 1084, 1086, 1087, 1089, 1090, 1092, 1093, 1095, 1096, 1098, 1099, 1101, 1102, 1104, 1105, 1107, 1110, 1111, 1113, 1114, 1115, 1117, 1118, 1119, 1121, 1122, 1124, 1125, 1127, 1128, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1166, 1169, 1180, 1181, 1193, 1197, 1198, 1203], "base": [4, 7, 10, 13, 16, 19, 22, 25, 30, 34, 38, 42, 46, 50, 55, 58, 60, 63, 65, 69, 72, 75, 78, 81, 84, 87, 90, 98, 100, 103, 106, 109, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 142, 143, 145, 148, 152, 153, 154, 155, 156, 158, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 173, 174, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 188, 189, 191, 192, 193, 194, 195, 197, 200, 203, 206, 209, 212, 214, 216, 218, 220, 223, 224, 225, 226, 227, 229, 230, 231, 232, 235, 237, 239, 241, 243, 246, 248, 250, 252, 255, 257, 259, 261, 264, 266, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 299, 300, 302, 304, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 336, 337, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 351, 352, 354, 355, 356, 357, 358, 360, 362, 364, 367, 370, 372, 375, 376, 377, 378, 379, 381, 382, 383, 384, 394, 397, 400, 403, 406, 409, 412, 415, 418, 421, 592, 595, 598, 601, 604, 607, 610, 613, 616, 620, 623, 626, 629, 632, 635, 638, 641, 644, 647, 650, 653, 656, 659, 662, 665, 668, 671, 674, 677, 680, 683, 686, 689, 692, 695, 698, 701, 704, 707, 710, 735, 737, 738, 752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 883, 886, 889, 892, 895, 898, 901, 904, 907, 918, 920, 923, 925, 928, 930, 932, 933, 934, 935, 937, 939, 941, 943, 946, 948, 951, 953, 955, 957, 959, 962, 964, 967, 969, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 987, 992, 993, 994, 996, 1001, 1004, 1009, 1015, 1018, 1021, 1024, 1027, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1064, 1067, 1070, 1073, 1076, 1079, 1083, 1086, 1089, 1092, 1095, 1098, 1101, 1104, 1110, 1113, 1117, 1121, 1124, 1127, 1166, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1181, 1182, 1183, 1184, 1185, 1186, 1188, 1189, 1190, 1191, 1192, 1193, 1195, 1197, 1198, 1200], "object": [4, 5, 7, 8, 10, 11, 13, 14, 16, 17, 19, 20, 22, 23, 25, 26, 30, 31, 34, 35, 38, 39, 42, 43, 46, 47, 50, 51, 55, 56, 58, 60, 65, 66, 70, 73, 75, 76, 79, 82, 85, 88, 91, 100, 101, 106, 107, 109, 110, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 142, 143, 145, 146, 148, 149, 152, 153, 154, 155, 156, 158, 159, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 188, 189, 191, 192, 193, 194, 195, 197, 198, 200, 201, 203, 204, 206, 207, 209, 210, 212, 213, 214, 215, 216, 217, 218, 220, 223, 224, 225, 226, 227, 229, 230, 231, 232, 244, 250, 252, 253, 255, 257, 264, 266, 267, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 299, 300, 302, 304, 305, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 319, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 351, 352, 354, 355, 356, 357, 358, 360, 362, 364, 365, 367, 368, 370, 372, 373, 375, 376, 377, 378, 379, 381, 382, 383, 384, 389, 390, 392, 394, 395, 397, 398, 400, 401, 403, 404, 406, 407, 409, 410, 412, 413, 415, 416, 418, 419, 421, 422, 427, 430, 431, 432, 433, 441, 442, 443, 446, 447, 448, 449, 450, 451, 452, 454, 456, 457, 458, 460, 462, 463, 464, 465, 466, 467, 468, 469, 485, 486, 492, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 540, 558, 559, 562, 564, 567, 569, 571, 572, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 589, 592, 593, 595, 596, 598, 599, 601, 602, 604, 605, 607, 608, 610, 611, 613, 614, 616, 617, 620, 621, 623, 624, 626, 627, 629, 630, 632, 633, 635, 636, 638, 639, 641, 642, 644, 645, 647, 648, 650, 651, 653, 654, 656, 657, 659, 660, 662, 663, 665, 666, 668, 669, 671, 672, 674, 675, 677, 678, 680, 681, 683, 684, 686, 687, 689, 690, 692, 693, 695, 696, 698, 699, 701, 702, 704, 705, 707, 708, 710, 711, 717, 742, 746, 747, 748, 752, 753, 755, 756, 758, 759, 761, 762, 764, 765, 767, 768, 770, 771, 773, 774, 776, 777, 779, 780, 782, 784, 797, 798, 800, 801, 803, 804, 806, 807, 809, 810, 812, 814, 815, 817, 819, 820, 822, 823, 825, 827, 829, 831, 833, 834, 836, 837, 840, 841, 843, 844, 846, 847, 849, 850, 852, 853, 855, 857, 858, 860, 862, 863, 865, 866, 868, 870, 872, 874, 876, 877, 879, 880, 883, 884, 886, 887, 890, 893, 896, 899, 902, 904, 905, 907, 908, 918, 920, 921, 923, 925, 926, 928, 930, 932, 933, 934, 935, 937, 939, 941, 943, 944, 946, 948, 949, 951, 953, 955, 957, 959, 960, 962, 964, 965, 967, 969, 973, 974, 975, 976, 977, 978, 981, 983, 987, 988, 989, 990, 992, 996, 997, 998, 999, 1001, 1002, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1015, 1016, 1018, 1019, 1021, 1022, 1024, 1025, 1027, 1028, 1032, 1033, 1035, 1036, 1038, 1039, 1041, 1042, 1045, 1046, 1048, 1049, 1051, 1052, 1054, 1055, 1057, 1058, 1060, 1061, 1064, 1065, 1067, 1068, 1070, 1071, 1073, 1074, 1076, 1077, 1079, 1080, 1083, 1084, 1086, 1087, 1089, 1090, 1092, 1093, 1095, 1096, 1098, 1099, 1101, 1102, 1104, 1105, 1110, 1111, 1113, 1117, 1118, 1119, 1121, 1122, 1124, 1125, 1127, 1128, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1168, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1187, 1192, 1193, 1197, 1200, 1201, 1202], "abstract": [4, 7, 10, 13, 16, 19, 22, 30, 34, 38, 42, 46, 50, 55, 64, 65, 75, 100, 106, 109, 121, 124, 125, 126, 128, 139, 145, 148, 155, 158, 164, 170, 173, 179, 185, 188, 194, 197, 200, 203, 206, 209, 220, 223, 224, 225, 226, 227, 250, 251, 254, 256, 264, 266, 302, 304, 310, 316, 319, 362, 364, 367, 370, 372, 406, 592, 595, 598, 601, 604, 607, 610, 613, 616, 635, 641, 644, 662, 665, 668, 671, 674, 677, 680, 683, 686, 689, 692, 695, 698, 701, 704, 707, 710, 752, 755, 758, 761, 770, 773, 776, 779, 797, 800, 803, 806, 812, 817, 819, 822, 827, 831, 833, 836, 840, 843, 846, 849, 862, 865, 876, 879, 883, 886, 904, 907, 920, 925, 943, 948, 959, 964, 987, 996, 1001, 1004, 1009, 1024, 1032, 1045, 1048, 1064, 1089, 1092, 1095, 1117, 1121, 1124, 1127, 1132, 1133, 1135, 1137, 1143, 1144, 1149, 1155, 1166, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202], "method": [4, 7, 10, 13, 16, 19, 22, 25, 30, 34, 38, 42, 46, 50, 54, 55, 58, 60, 63, 65, 69, 72, 75, 78, 81, 84, 87, 90, 98, 100, 103, 106, 109, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 142, 143, 145, 148, 152, 153, 154, 155, 156, 158, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 173, 174, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 188, 189, 191, 192, 193, 194, 195, 197, 200, 203, 206, 209, 212, 214, 216, 218, 220, 223, 224, 225, 226, 227, 229, 230, 231, 232, 235, 237, 239, 241, 243, 246, 248, 250, 252, 255, 257, 259, 261, 264, 266, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 299, 300, 302, 304, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 319, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 333, 334, 336, 337, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 351, 352, 354, 355, 356, 357, 358, 360, 362, 364, 367, 370, 372, 375, 376, 377, 378, 379, 381, 382, 383, 384, 394, 397, 400, 403, 406, 409, 412, 415, 418, 421, 428, 495, 592, 595, 598, 601, 604, 607, 610, 613, 616, 620, 623, 626, 629, 632, 635, 638, 641, 644, 647, 650, 653, 656, 659, 662, 665, 668, 671, 674, 677, 680, 683, 686, 689, 692, 695, 698, 701, 704, 707, 710, 752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 783, 784, 785, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 883, 886, 889, 892, 895, 898, 901, 904, 907, 918, 920, 923, 925, 928, 930, 932, 933, 934, 935, 937, 939, 941, 943, 946, 948, 951, 953, 955, 957, 959, 962, 964, 967, 969, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 987, 992, 993, 994, 996, 1001, 1004, 1009, 1015, 1018, 1021, 1024, 1027, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1056, 1057, 1059, 1060, 1064, 1067, 1070, 1073, 1076, 1079, 1083, 1086, 1089, 1092, 1095, 1098, 1101, 1104, 1110, 1113, 1117, 1121, 1124, 1127, 1132, 1133, 1134, 1135, 1143, 1144, 1148, 1149, 1150, 1151, 1152, 1154, 1155, 1156, 1157, 1158, 1159, 1166, 1168, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1183, 1184, 1185, 1186, 1188, 1189, 1190, 1191, 1193, 1194, 1195, 1197, 1199, 1200, 1201, 1202], "breedingedg": [5, 16, 22], "v": [5, 8, 11, 14, 17, 20, 23, 26, 31, 35, 39, 43, 47, 51, 56, 66, 70, 73, 76, 79, 82, 85, 88, 91, 101, 106, 107, 109, 110, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 146, 148, 149, 152, 153, 154, 156, 159, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 198, 200, 201, 204, 207, 209, 210, 212, 214, 216, 218, 220, 221, 223, 225, 229, 230, 231, 232, 244, 253, 267, 305, 307, 308, 309, 310, 311, 365, 368, 373, 395, 398, 401, 404, 407, 410, 413, 416, 419, 422, 442, 443, 446, 447, 448, 449, 450, 451, 452, 454, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 491, 492, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 562, 563, 564, 565, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 593, 596, 599, 602, 605, 608, 611, 614, 617, 621, 624, 627, 630, 633, 636, 639, 642, 645, 648, 651, 654, 657, 660, 663, 666, 669, 672, 675, 678, 681, 684, 687, 690, 693, 696, 699, 702, 705, 708, 711, 753, 756, 759, 762, 765, 768, 771, 774, 777, 780, 782, 789, 790, 794, 798, 801, 804, 807, 810, 815, 820, 823, 834, 837, 841, 844, 847, 850, 853, 858, 863, 866, 877, 880, 884, 887, 890, 893, 896, 899, 902, 905, 908, 921, 926, 944, 949, 960, 965, 988, 989, 990, 997, 998, 999, 1002, 1005, 1006, 1007, 1010, 1011, 1012, 1016, 1019, 1022, 1025, 1028, 1033, 1036, 1039, 1042, 1046, 1049, 1052, 1055, 1058, 1061, 1065, 1068, 1071, 1074, 1077, 1080, 1084, 1086, 1087, 1090, 1093, 1096, 1099, 1102, 1105, 1111, 1114, 1115, 1118, 1119, 1122, 1125, 1128, 1183], "vname": [5, 8, 11, 14, 17, 20, 23, 26, 31, 35, 39, 43, 47, 51, 56, 66, 70, 73, 76, 79, 82, 85, 88, 91, 101, 107, 110, 146, 149, 159, 198, 201, 204, 207, 210, 221, 244, 253, 267, 305, 365, 368, 373, 395, 398, 401, 404, 407, 410, 413, 416, 419, 422, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 454, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 491, 492, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 562, 563, 564, 565, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 593, 596, 599, 602, 605, 608, 611, 614, 617, 621, 624, 627, 630, 633, 636, 639, 642, 645, 648, 651, 654, 657, 660, 663, 666, 669, 672, 675, 678, 681, 684, 687, 690, 693, 696, 699, 702, 705, 708, 711, 753, 756, 759, 762, 765, 768, 771, 774, 777, 780, 782, 798, 801, 804, 807, 810, 815, 820, 823, 834, 837, 841, 844, 847, 850, 853, 858, 863, 866, 877, 880, 884, 887, 890, 893, 896, 899, 902, 905, 908, 921, 926, 944, 949, 960, 965, 988, 989, 990, 997, 998, 999, 1002, 1005, 1006, 1007, 1010, 1011, 1012, 1016, 1019, 1022, 1025, 1028, 1033, 1036, 1039, 1042, 1046, 1049, 1052, 1055, 1058, 1061, 1065, 1068, 1071, 1074, 1077, 1080, 1084, 1087, 1090, 1093, 1096, 1099, 1102, 1105, 1111, 1114, 1115, 1118, 1119, 1122, 1125, 1128], "i": [5, 6, 7, 8, 10, 11, 13, 14, 16, 17, 19, 20, 22, 23, 25, 26, 30, 31, 34, 35, 38, 39, 42, 43, 46, 47, 50, 51, 55, 56, 58, 60, 63, 65, 66, 69, 70, 72, 73, 75, 76, 78, 79, 81, 82, 84, 85, 87, 88, 90, 91, 98, 100, 101, 103, 106, 107, 109, 110, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 146, 148, 149, 152, 153, 154, 156, 158, 159, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 198, 200, 201, 203, 204, 206, 207, 209, 210, 212, 214, 216, 218, 220, 223, 224, 225, 227, 229, 230, 231, 232, 235, 236, 237, 239, 240, 241, 243, 244, 246, 247, 248, 250, 252, 253, 255, 257, 259, 260, 261, 264, 266, 267, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 304, 305, 307, 308, 309, 310, 311, 313, 314, 315, 317, 319, 321, 322, 323, 325, 327, 328, 329, 331, 333, 334, 336, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 360, 362, 364, 365, 367, 368, 370, 372, 373, 375, 376, 377, 379, 381, 382, 383, 384, 390, 395, 397, 398, 401, 403, 404, 407, 410, 412, 413, 416, 419, 421, 422, 431, 433, 442, 443, 447, 460, 462, 463, 464, 465, 466, 467, 468, 469, 492, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 529, 544, 545, 546, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 589, 591, 593, 594, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 611, 612, 614, 615, 617, 620, 621, 623, 624, 626, 627, 629, 630, 632, 633, 635, 636, 638, 639, 640, 641, 642, 644, 645, 647, 648, 650, 651, 653, 654, 656, 657, 659, 660, 662, 663, 665, 666, 668, 669, 671, 672, 674, 675, 677, 678, 680, 681, 683, 684, 686, 687, 689, 690, 691, 692, 693, 695, 696, 698, 699, 701, 702, 704, 705, 707, 708, 710, 711, 721, 722, 732, 733, 735, 736, 737, 738, 740, 742, 745, 749, 752, 753, 755, 756, 758, 759, 761, 762, 764, 765, 767, 768, 770, 771, 773, 774, 776, 777, 779, 780, 782, 783, 784, 785, 787, 789, 793, 794, 797, 798, 800, 801, 803, 804, 806, 807, 809, 810, 812, 814, 815, 817, 819, 820, 822, 823, 825, 827, 829, 831, 833, 834, 836, 837, 840, 841, 843, 844, 846, 847, 849, 850, 852, 853, 855, 857, 858, 860, 862, 863, 865, 866, 868, 870, 872, 874, 876, 877, 879, 880, 884, 887, 890, 893, 896, 899, 902, 904, 905, 907, 908, 914, 918, 920, 921, 923, 925, 926, 928, 930, 932, 933, 934, 935, 937, 939, 941, 943, 944, 946, 948, 949, 957, 959, 960, 962, 964, 965, 967, 969, 976, 977, 978, 981, 983, 987, 988, 989, 990, 993, 994, 996, 997, 998, 999, 1001, 1002, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1015, 1016, 1018, 1019, 1021, 1022, 1024, 1025, 1027, 1028, 1032, 1033, 1035, 1036, 1038, 1039, 1041, 1042, 1045, 1046, 1048, 1049, 1051, 1052, 1054, 1055, 1057, 1058, 1060, 1061, 1065, 1068, 1071, 1074, 1077, 1080, 1083, 1084, 1086, 1087, 1089, 1090, 1092, 1093, 1095, 1096, 1098, 1099, 1101, 1102, 1104, 1105, 1110, 1111, 1113, 1117, 1119, 1121, 1122, 1124, 1125, 1127, 1128, 1132, 1133, 1134, 1135, 1136, 1139, 1140, 1148, 1151, 1152, 1154, 1157, 1158, 1166, 1168, 1169, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1185, 1186, 1188, 1189, 1190, 1191, 1192, 1193, 1195, 1196, 1197, 1199, 1200, 1201, 1202], "type": [5, 8, 11, 13, 14, 16, 17, 20, 22, 23, 25, 26, 30, 31, 34, 35, 38, 39, 42, 43, 46, 47, 50, 51, 55, 56, 58, 60, 63, 65, 66, 69, 70, 72, 73, 75, 76, 78, 79, 81, 82, 84, 85, 87, 88, 90, 91, 93, 94, 95, 98, 100, 101, 103, 106, 107, 109, 110, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 146, 148, 149, 152, 153, 154, 156, 158, 159, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 198, 200, 201, 203, 204, 206, 207, 209, 210, 212, 214, 216, 218, 220, 221, 223, 224, 225, 227, 229, 230, 231, 232, 235, 237, 239, 241, 244, 246, 248, 250, 253, 259, 261, 264, 266, 267, 268, 269, 270, 271, 273, 275, 276, 277, 279, 280, 281, 282, 283, 285, 287, 288, 289, 291, 292, 293, 294, 295, 297, 300, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 319, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 353, 354, 355, 356, 358, 360, 362, 364, 365, 367, 368, 370, 372, 373, 375, 376, 377, 379, 381, 382, 383, 384, 386, 387, 388, 389, 390, 391, 395, 398, 401, 404, 407, 410, 413, 416, 419, 422, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 437, 438, 442, 443, 446, 447, 448, 449, 450, 451, 452, 454, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 527, 528, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 565, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 592, 593, 595, 596, 598, 599, 601, 602, 604, 605, 607, 608, 610, 611, 613, 614, 616, 617, 620, 621, 623, 624, 626, 627, 629, 630, 632, 633, 635, 636, 638, 639, 641, 642, 644, 645, 647, 648, 650, 651, 653, 654, 656, 657, 659, 660, 662, 663, 665, 666, 668, 669, 671, 672, 674, 675, 677, 678, 680, 681, 683, 684, 686, 687, 689, 690, 692, 693, 695, 696, 698, 699, 701, 702, 704, 705, 707, 708, 710, 711, 713, 716, 717, 719, 720, 721, 722, 725, 726, 727, 728, 729, 730, 732, 733, 735, 736, 737, 738, 740, 742, 744, 745, 746, 747, 748, 749, 752, 753, 755, 756, 758, 759, 761, 762, 764, 765, 767, 768, 770, 771, 773, 774, 776, 777, 779, 780, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 797, 798, 800, 801, 803, 804, 806, 807, 809, 810, 812, 814, 815, 817, 819, 820, 822, 823, 825, 827, 829, 831, 833, 834, 836, 837, 840, 841, 843, 844, 846, 847, 849, 850, 852, 853, 855, 857, 858, 860, 862, 863, 865, 866, 868, 870, 872, 874, 876, 877, 879, 880, 883, 884, 886, 887, 889, 890, 892, 893, 895, 896, 898, 899, 901, 902, 904, 905, 907, 908, 910, 911, 912, 913, 914, 918, 920, 921, 923, 925, 926, 928, 930, 932, 933, 934, 935, 937, 939, 941, 943, 944, 946, 948, 949, 951, 953, 955, 957, 959, 960, 962, 964, 965, 967, 969, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 987, 988, 989, 990, 992, 993, 994, 996, 997, 998, 999, 1001, 1002, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1016, 1019, 1022, 1025, 1028, 1032, 1033, 1035, 1036, 1038, 1039, 1041, 1042, 1045, 1046, 1048, 1049, 1051, 1052, 1054, 1055, 1057, 1058, 1060, 1061, 1064, 1065, 1067, 1068, 1070, 1071, 1073, 1074, 1076, 1077, 1079, 1080, 1083, 1084, 1086, 1087, 1089, 1090, 1092, 1093, 1095, 1096, 1098, 1099, 1101, 1102, 1104, 1105, 1107, 1110, 1111, 1113, 1114, 1115, 1117, 1118, 1119, 1121, 1122, 1124, 1125, 1127, 1128, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1166, 1167, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1185, 1190, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202], "otherwis": [5, 8, 11, 14, 17, 20, 23, 26, 31, 35, 39, 43, 47, 51, 56, 66, 70, 73, 76, 79, 82, 85, 88, 91, 101, 107, 110, 146, 149, 159, 198, 201, 204, 207, 210, 214, 216, 218, 235, 237, 239, 241, 244, 246, 248, 250, 253, 259, 261, 267, 305, 334, 337, 365, 368, 373, 395, 398, 401, 404, 407, 410, 413, 416, 419, 422, 529, 593, 596, 599, 602, 605, 608, 611, 614, 617, 621, 624, 627, 630, 633, 636, 639, 642, 645, 648, 651, 654, 657, 660, 663, 666, 669, 672, 675, 678, 681, 684, 687, 690, 693, 696, 699, 702, 705, 708, 711, 742, 745, 753, 756, 759, 762, 765, 768, 771, 774, 777, 780, 782, 798, 801, 804, 807, 810, 815, 820, 823, 834, 837, 841, 844, 847, 850, 853, 858, 863, 866, 877, 880, 884, 887, 890, 893, 896, 899, 902, 905, 908, 921, 926, 944, 949, 960, 965, 988, 989, 990, 997, 998, 999, 1002, 1005, 1006, 1007, 1010, 1011, 1012, 1016, 1019, 1022, 1025, 1028, 1033, 1036, 1039, 1042, 1046, 1049, 1052, 1055, 1058, 1061, 1065, 1068, 1071, 1074, 1077, 1080, 1084, 1087, 1090, 1093, 1096, 1099, 1102, 1105, 1110, 1111, 1113, 1117, 1118, 1119, 1122, 1124, 1125, 1128], "rais": [5, 8, 11, 14, 17, 20, 23, 26, 31, 35, 39, 43, 47, 51, 56, 66, 70, 73, 76, 79, 82, 85, 88, 91, 101, 107, 110, 146, 149, 159, 198, 201, 204, 207, 210, 244, 253, 267, 305, 365, 368, 373, 395, 398, 401, 404, 407, 410, 413, 416, 419, 422, 442, 443, 444, 456, 457, 458, 492, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 529, 572, 585, 586, 587, 589, 593, 596, 599, 602, 605, 608, 611, 614, 617, 621, 624, 627, 630, 633, 636, 639, 642, 645, 648, 651, 654, 657, 660, 663, 666, 669, 672, 675, 678, 681, 684, 687, 690, 693, 696, 699, 702, 705, 708, 711, 713, 753, 756, 759, 762, 765, 768, 771, 774, 777, 780, 782, 798, 801, 804, 807, 810, 815, 820, 823, 834, 837, 841, 844, 847, 850, 853, 858, 863, 866, 877, 880, 884, 887, 890, 893, 896, 899, 902, 905, 908, 921, 926, 944, 949, 960, 965, 988, 989, 990, 997, 998, 999, 1002, 1005, 1006, 1007, 1010, 1011, 1012, 1016, 1019, 1022, 1025, 1028, 1033, 1036, 1039, 1042, 1046, 1049, 1052, 1055, 1058, 1061, 1065, 1068, 1071, 1074, 1077, 1080, 1084, 1087, 1090, 1093, 1096, 1099, 1102, 1105, 1111, 1118, 1119, 1122, 1125, 1128, 1137, 1138, 1139, 1140, 1143, 1144, 1145, 1146, 1149, 1150, 1151, 1152, 1157, 1158, 1159], "typeerror": [5, 8, 11, 14, 17, 20, 23, 26, 31, 35, 39, 43, 47, 51, 56, 66, 70, 73, 76, 79, 82, 85, 88, 91, 101, 107, 110, 146, 149, 159, 198, 201, 204, 207, 210, 244, 253, 267, 305, 365, 368, 373, 395, 398, 401, 404, 407, 410, 413, 416, 419, 422, 593, 596, 599, 602, 605, 608, 611, 614, 617, 621, 624, 627, 630, 633, 636, 639, 642, 645, 648, 651, 654, 657, 660, 663, 666, 669, 672, 675, 678, 681, 684, 687, 690, 693, 696, 699, 702, 705, 708, 711, 753, 756, 759, 762, 765, 768, 771, 774, 777, 780, 782, 798, 801, 804, 807, 810, 815, 820, 823, 834, 837, 841, 844, 847, 850, 853, 858, 863, 866, 877, 880, 884, 887, 890, 893, 896, 899, 902, 905, 908, 921, 926, 944, 949, 960, 965, 988, 989, 990, 997, 998, 999, 1002, 1005, 1006, 1007, 1010, 1011, 1012, 1016, 1019, 1022, 1025, 1028, 1033, 1036, 1039, 1042, 1046, 1049, 1052, 1055, 1058, 1061, 1065, 1068, 1071, 1074, 1077, 1080, 1084, 1087, 1090, 1093, 1096, 1099, 1102, 1105, 1111, 1118, 1119, 1122, 1125, 1128], "paramet": [5, 8, 11, 13, 14, 16, 17, 20, 22, 23, 25, 26, 30, 31, 34, 35, 38, 39, 42, 43, 46, 47, 50, 51, 55, 56, 58, 60, 63, 65, 66, 69, 70, 72, 73, 75, 76, 78, 79, 81, 82, 84, 85, 87, 88, 90, 91, 93, 94, 95, 98, 100, 101, 103, 106, 107, 109, 110, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 146, 148, 149, 152, 153, 154, 156, 158, 159, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 198, 200, 201, 203, 204, 206, 207, 209, 210, 212, 214, 216, 218, 220, 223, 224, 225, 227, 229, 230, 231, 232, 235, 237, 239, 241, 244, 246, 248, 250, 253, 255, 257, 259, 261, 264, 266, 267, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 304, 305, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 319, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 360, 362, 364, 365, 367, 368, 370, 372, 373, 375, 376, 377, 379, 381, 382, 383, 384, 387, 388, 389, 390, 391, 394, 395, 397, 398, 400, 401, 403, 404, 407, 409, 410, 412, 413, 416, 418, 419, 421, 422, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 437, 438, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 454, 456, 457, 458, 460, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 492, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 527, 528, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 565, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 592, 593, 595, 596, 598, 599, 601, 602, 604, 605, 607, 608, 610, 611, 613, 614, 616, 617, 620, 621, 623, 624, 626, 627, 629, 630, 632, 633, 635, 636, 638, 639, 641, 642, 644, 645, 647, 648, 650, 651, 653, 654, 656, 657, 659, 660, 662, 663, 665, 666, 668, 669, 671, 672, 674, 675, 677, 678, 680, 681, 683, 684, 686, 687, 689, 690, 692, 693, 695, 696, 698, 699, 701, 702, 704, 705, 707, 708, 710, 711, 713, 716, 717, 719, 720, 721, 722, 725, 726, 727, 728, 729, 730, 732, 733, 735, 736, 737, 738, 740, 742, 744, 745, 746, 747, 748, 752, 753, 755, 756, 758, 759, 761, 762, 764, 765, 767, 768, 770, 771, 773, 774, 776, 777, 779, 780, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 797, 798, 800, 801, 803, 804, 806, 807, 809, 810, 812, 814, 815, 817, 819, 820, 822, 823, 825, 827, 829, 831, 833, 834, 836, 837, 840, 841, 843, 844, 846, 847, 849, 850, 852, 853, 855, 857, 858, 860, 862, 863, 865, 866, 868, 870, 872, 874, 876, 877, 879, 880, 883, 884, 886, 887, 889, 890, 892, 893, 895, 896, 898, 899, 901, 902, 904, 905, 907, 908, 910, 911, 912, 913, 914, 918, 920, 921, 923, 925, 926, 928, 930, 932, 933, 934, 935, 937, 939, 941, 943, 944, 946, 948, 949, 951, 953, 955, 957, 959, 960, 962, 964, 965, 967, 969, 973, 974, 975, 976, 977, 978, 981, 982, 983, 987, 988, 989, 990, 992, 993, 994, 996, 997, 998, 999, 1001, 1002, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1015, 1016, 1018, 1019, 1021, 1022, 1025, 1027, 1028, 1032, 1033, 1035, 1036, 1038, 1039, 1041, 1042, 1045, 1046, 1048, 1049, 1051, 1052, 1054, 1055, 1057, 1058, 1060, 1061, 1064, 1065, 1067, 1068, 1070, 1071, 1073, 1074, 1076, 1077, 1079, 1080, 1083, 1084, 1086, 1087, 1089, 1090, 1092, 1093, 1095, 1096, 1098, 1099, 1101, 1102, 1104, 1105, 1107, 1110, 1111, 1113, 1117, 1118, 1119, 1121, 1122, 1124, 1125, 1127, 1128, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1186, 1188, 1189, 1190, 1191, 1192, 1193, 1195, 1196, 1197, 1198, 1202], "ani": [5, 8, 11, 14, 17, 20, 23, 26, 31, 35, 39, 43, 47, 51, 56, 66, 70, 73, 76, 79, 82, 85, 88, 91, 101, 107, 110, 146, 149, 159, 198, 201, 204, 207, 210, 244, 253, 267, 269, 270, 271, 275, 276, 277, 281, 282, 283, 287, 288, 289, 293, 294, 295, 305, 307, 308, 309, 313, 314, 315, 323, 329, 339, 340, 341, 345, 346, 347, 354, 355, 356, 365, 368, 373, 375, 376, 377, 381, 382, 383, 395, 398, 401, 404, 407, 410, 413, 416, 419, 422, 442, 443, 446, 572, 585, 586, 593, 596, 599, 602, 604, 605, 607, 608, 611, 614, 617, 621, 624, 627, 630, 633, 636, 638, 639, 642, 644, 645, 647, 648, 650, 651, 653, 654, 656, 657, 659, 660, 663, 666, 669, 672, 675, 678, 681, 684, 687, 690, 693, 696, 699, 702, 705, 708, 711, 753, 756, 759, 762, 764, 765, 767, 768, 771, 774, 777, 780, 782, 784, 798, 801, 804, 807, 810, 815, 820, 823, 834, 837, 841, 844, 847, 850, 853, 858, 863, 866, 877, 880, 884, 887, 890, 893, 896, 899, 902, 905, 908, 921, 926, 944, 949, 951, 953, 960, 965, 990, 999, 1002, 1007, 1012, 1016, 1019, 1022, 1025, 1028, 1033, 1035, 1036, 1038, 1039, 1041, 1042, 1046, 1049, 1052, 1055, 1058, 1061, 1065, 1068, 1071, 1074, 1077, 1080, 1084, 1086, 1087, 1090, 1093, 1096, 1098, 1099, 1101, 1102, 1104, 1105, 1110, 1111, 1113, 1119, 1122, 1125, 1128, 1137, 1138, 1141, 1147, 1149, 1150, 1155, 1156, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1188, 1189, 1190, 1191, 1192, 1201], "python": [5, 8, 11, 14, 17, 20, 23, 26, 31, 35, 39, 43, 47, 51, 56, 66, 70, 73, 76, 79, 82, 85, 88, 91, 101, 107, 110, 146, 149, 159, 198, 201, 204, 207, 210, 244, 253, 267, 305, 365, 368, 373, 395, 398, 401, 404, 407, 410, 413, 416, 419, 422, 441, 442, 443, 453, 460, 462, 463, 464, 465, 466, 467, 468, 469, 492, 493, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 566, 571, 577, 578, 579, 582, 583, 584, 585, 586, 587, 589, 593, 596, 598, 599, 602, 604, 605, 607, 608, 611, 613, 614, 617, 621, 624, 627, 630, 633, 636, 639, 642, 645, 648, 651, 654, 657, 660, 663, 666, 669, 672, 675, 678, 681, 684, 687, 690, 693, 696, 699, 702, 705, 708, 711, 752, 753, 755, 756, 758, 759, 761, 762, 764, 765, 767, 768, 770, 771, 774, 776, 777, 780, 782, 784, 798, 801, 804, 807, 810, 815, 820, 823, 834, 837, 841, 844, 847, 850, 853, 858, 863, 866, 877, 880, 884, 887, 890, 893, 896, 899, 902, 905, 908, 921, 926, 944, 949, 960, 965, 990, 999, 1002, 1007, 1012, 1016, 1019, 1022, 1025, 1028, 1033, 1036, 1039, 1042, 1046, 1049, 1052, 1055, 1058, 1061, 1065, 1068, 1071, 1074, 1077, 1080, 1084, 1087, 1090, 1093, 1096, 1099, 1102, 1105, 1111, 1119, 1122, 1125, 1128, 1132, 1133, 1134, 1135, 1137, 1138, 1141, 1147, 1149, 1150, 1155, 1156, 1166, 1170, 1182, 1183, 1184, 1185, 1186, 1188, 1189, 1190, 1191, 1192, 1193, 1197, 1198, 1200, 1201, 1203], "test": [5, 8, 11, 14, 17, 20, 23, 26, 31, 35, 39, 43, 47, 51, 56, 66, 70, 73, 76, 79, 82, 85, 88, 91, 101, 107, 110, 146, 149, 159, 198, 201, 204, 207, 210, 244, 253, 267, 305, 365, 368, 373, 395, 398, 401, 404, 407, 410, 413, 416, 419, 422, 446, 460, 462, 463, 464, 465, 466, 467, 468, 469, 580, 581, 593, 596, 599, 602, 605, 608, 611, 614, 617, 621, 624, 627, 629, 630, 633, 635, 636, 638, 639, 641, 642, 645, 648, 651, 654, 657, 660, 663, 666, 669, 672, 675, 678, 681, 684, 687, 690, 693, 696, 699, 702, 705, 708, 711, 753, 756, 759, 762, 765, 768, 771, 774, 777, 780, 782, 798, 801, 803, 804, 806, 807, 809, 810, 812, 814, 815, 817, 819, 820, 822, 823, 825, 827, 829, 831, 834, 837, 841, 844, 846, 847, 849, 850, 852, 853, 855, 857, 858, 860, 862, 863, 865, 866, 868, 870, 872, 874, 877, 880, 884, 887, 890, 893, 896, 899, 902, 905, 908, 921, 926, 944, 949, 951, 960, 965, 976, 977, 978, 983, 990, 999, 1002, 1007, 1012, 1016, 1019, 1022, 1025, 1028, 1033, 1036, 1039, 1042, 1046, 1048, 1049, 1051, 1052, 1054, 1055, 1057, 1058, 1060, 1061, 1065, 1068, 1071, 1074, 1077, 1080, 1084, 1087, 1090, 1093, 1096, 1099, 1102, 1105, 1111, 1113, 1118, 1119, 1122, 1125, 1128, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1169, 1181, 1183, 1184, 1185, 1186, 1192, 1200], "str": [5, 8, 11, 14, 17, 20, 23, 26, 31, 35, 38, 39, 43, 47, 51, 56, 58, 66, 70, 73, 76, 79, 82, 85, 88, 91, 101, 107, 110, 146, 149, 159, 198, 201, 204, 207, 210, 212, 214, 216, 218, 244, 253, 267, 305, 365, 368, 373, 395, 398, 401, 404, 407, 410, 413, 416, 419, 422, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 454, 456, 457, 458, 460, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 492, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 527, 528, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 565, 567, 568, 569, 570, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 592, 593, 595, 596, 599, 601, 602, 604, 605, 607, 608, 611, 614, 617, 620, 621, 623, 624, 626, 627, 629, 630, 632, 633, 635, 636, 638, 639, 641, 642, 644, 645, 647, 648, 650, 651, 653, 654, 656, 657, 659, 660, 662, 663, 665, 666, 668, 669, 671, 672, 674, 675, 677, 678, 680, 681, 683, 684, 686, 687, 689, 690, 692, 693, 695, 696, 698, 699, 701, 702, 704, 705, 707, 708, 710, 711, 733, 744, 752, 753, 755, 756, 758, 759, 761, 762, 764, 765, 767, 768, 770, 771, 773, 774, 776, 777, 779, 780, 782, 784, 797, 798, 800, 801, 803, 804, 806, 807, 809, 810, 812, 814, 815, 817, 819, 820, 822, 823, 825, 827, 829, 831, 833, 834, 836, 837, 840, 841, 843, 844, 846, 847, 849, 850, 852, 853, 855, 857, 858, 860, 862, 863, 865, 866, 868, 870, 872, 874, 876, 877, 879, 880, 884, 887, 890, 893, 896, 899, 902, 905, 908, 921, 926, 944, 949, 960, 965, 988, 989, 990, 992, 993, 994, 997, 998, 999, 1002, 1005, 1006, 1007, 1010, 1011, 1012, 1016, 1019, 1022, 1025, 1028, 1032, 1033, 1035, 1036, 1038, 1039, 1041, 1042, 1045, 1046, 1048, 1049, 1051, 1052, 1054, 1055, 1057, 1058, 1060, 1061, 1065, 1068, 1071, 1074, 1077, 1080, 1083, 1084, 1086, 1087, 1089, 1090, 1093, 1095, 1096, 1099, 1102, 1104, 1105, 1110, 1111, 1113, 1117, 1118, 1119, 1121, 1122, 1124, 1125, 1127, 1128, 1136, 1137, 1138, 1139, 1140, 1147, 1148, 1149, 1150, 1151, 1152, 1154, 1155, 1156, 1157, 1158, 1173, 1177, 1178, 1179, 1180, 1181, 1191, 1192, 1193, 1197, 1198, 1200, 1201, 1202], "name": [5, 8, 11, 14, 17, 20, 23, 26, 31, 35, 38, 39, 43, 47, 51, 56, 58, 66, 69, 70, 72, 73, 76, 78, 79, 81, 82, 84, 85, 87, 88, 90, 91, 101, 107, 110, 146, 149, 159, 198, 201, 204, 207, 210, 214, 244, 253, 267, 305, 365, 368, 373, 395, 398, 401, 404, 407, 410, 413, 416, 419, 422, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 454, 460, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 492, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 527, 528, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 565, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 592, 593, 595, 596, 599, 601, 602, 604, 605, 607, 608, 611, 614, 617, 620, 621, 623, 624, 626, 627, 629, 630, 632, 633, 635, 636, 638, 639, 641, 642, 644, 645, 647, 648, 650, 651, 653, 654, 656, 657, 659, 660, 662, 663, 665, 666, 668, 669, 671, 672, 674, 675, 677, 678, 680, 681, 683, 684, 686, 687, 689, 690, 692, 693, 695, 696, 698, 699, 701, 702, 704, 705, 707, 708, 710, 711, 733, 752, 753, 755, 756, 758, 759, 761, 762, 764, 765, 767, 768, 770, 771, 773, 774, 776, 777, 779, 780, 782, 784, 797, 798, 800, 801, 803, 804, 806, 807, 809, 810, 812, 814, 815, 817, 819, 820, 822, 823, 825, 827, 829, 831, 833, 834, 836, 837, 840, 841, 843, 844, 846, 847, 849, 850, 852, 853, 855, 857, 858, 860, 862, 863, 865, 866, 868, 870, 872, 874, 876, 877, 879, 880, 884, 887, 890, 893, 896, 899, 902, 905, 908, 921, 926, 944, 949, 960, 965, 988, 989, 990, 997, 998, 999, 1002, 1005, 1006, 1007, 1010, 1011, 1012, 1016, 1019, 1022, 1025, 1028, 1032, 1033, 1035, 1036, 1038, 1039, 1041, 1042, 1045, 1046, 1048, 1049, 1051, 1052, 1054, 1055, 1057, 1058, 1060, 1061, 1065, 1068, 1071, 1074, 1077, 1080, 1083, 1084, 1086, 1087, 1089, 1090, 1093, 1095, 1096, 1099, 1102, 1104, 1105, 1110, 1111, 1113, 1117, 1118, 1119, 1121, 1122, 1124, 1125, 1127, 1128, 1136, 1137, 1138, 1139, 1140, 1147, 1148, 1149, 1150, 1151, 1152, 1154, 1155, 1156, 1157, 1158, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1183, 1184, 1185, 1186, 1188, 1189, 1190, 1191, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202], "variabl": [5, 8, 11, 14, 17, 20, 23, 26, 31, 35, 39, 43, 47, 51, 56, 66, 70, 73, 76, 79, 82, 85, 88, 91, 101, 106, 107, 109, 110, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 146, 148, 149, 152, 153, 154, 156, 159, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 198, 200, 201, 204, 207, 209, 210, 212, 214, 216, 218, 220, 223, 225, 229, 230, 231, 232, 244, 253, 264, 266, 267, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 299, 300, 302, 304, 305, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 319, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 333, 334, 336, 337, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 351, 352, 354, 355, 356, 357, 358, 360, 362, 364, 365, 367, 368, 370, 372, 373, 375, 376, 377, 378, 379, 381, 382, 383, 384, 387, 388, 389, 391, 394, 395, 397, 398, 400, 401, 403, 404, 406, 407, 409, 410, 412, 413, 415, 416, 418, 419, 421, 422, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 454, 495, 525, 527, 528, 540, 541, 558, 559, 560, 561, 562, 563, 564, 565, 567, 568, 569, 570, 580, 581, 588, 593, 596, 599, 602, 605, 608, 611, 614, 617, 621, 624, 627, 630, 633, 636, 639, 642, 645, 648, 651, 654, 657, 660, 663, 666, 669, 672, 675, 678, 681, 684, 687, 690, 693, 696, 699, 702, 705, 708, 711, 752, 753, 755, 756, 758, 759, 761, 762, 764, 765, 767, 768, 770, 771, 773, 774, 776, 777, 779, 780, 782, 784, 798, 801, 804, 807, 810, 815, 820, 823, 834, 837, 841, 844, 847, 850, 853, 858, 863, 866, 877, 880, 884, 887, 890, 893, 896, 899, 902, 905, 908, 921, 926, 944, 949, 951, 953, 960, 962, 964, 965, 967, 969, 987, 988, 989, 990, 996, 997, 998, 999, 1001, 1002, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1015, 1016, 1018, 1019, 1021, 1022, 1024, 1025, 1027, 1028, 1033, 1036, 1039, 1042, 1046, 1049, 1052, 1055, 1058, 1061, 1065, 1068, 1071, 1074, 1077, 1080, 1084, 1087, 1090, 1093, 1096, 1099, 1102, 1105, 1110, 1111, 1113, 1117, 1118, 1119, 1122, 1124, 1125, 1128, 1192, 1195, 1196], "print": [5, 8, 11, 14, 17, 20, 23, 25, 26, 31, 35, 39, 43, 47, 51, 56, 66, 70, 73, 76, 79, 82, 85, 88, 91, 101, 107, 110, 146, 149, 159, 198, 201, 204, 207, 210, 244, 253, 267, 305, 365, 368, 373, 395, 398, 401, 404, 407, 410, 413, 416, 419, 422, 593, 596, 599, 602, 605, 608, 611, 614, 617, 621, 624, 627, 630, 633, 636, 639, 642, 645, 648, 651, 654, 657, 660, 663, 666, 669, 672, 675, 678, 681, 684, 687, 690, 693, 696, 699, 702, 705, 708, 711, 753, 756, 759, 762, 765, 768, 771, 774, 777, 780, 782, 798, 801, 804, 807, 810, 815, 820, 823, 834, 837, 841, 844, 847, 850, 853, 858, 863, 866, 877, 880, 884, 887, 890, 893, 896, 899, 902, 905, 908, 921, 926, 944, 949, 960, 965, 988, 989, 990, 997, 998, 999, 1002, 1005, 1006, 1007, 1010, 1011, 1012, 1016, 1019, 1022, 1025, 1028, 1033, 1036, 1039, 1042, 1046, 1049, 1052, 1055, 1058, 1061, 1065, 1068, 1071, 1074, 1077, 1080, 1084, 1087, 1090, 1093, 1096, 1099, 1102, 1105, 1111, 1118, 1119, 1122, 1125, 1128, 1183, 1184, 1185, 1186], "messag": [5, 8, 11, 14, 17, 20, 23, 26, 31, 35, 39, 43, 47, 51, 56, 66, 70, 73, 76, 79, 82, 85, 88, 91, 101, 107, 110, 146, 149, 159, 198, 201, 204, 207, 210, 244, 253, 267, 305, 365, 368, 373, 395, 398, 401, 404, 407, 410, 413, 416, 419, 422, 442, 443, 444, 456, 457, 458, 460, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 577, 578, 579, 582, 583, 584, 585, 586, 589, 593, 596, 599, 602, 605, 608, 611, 614, 617, 621, 624, 627, 630, 633, 636, 639, 642, 645, 648, 651, 654, 657, 660, 663, 666, 669, 672, 675, 678, 681, 684, 687, 690, 693, 696, 699, 702, 705, 708, 711, 753, 756, 759, 762, 765, 768, 771, 774, 777, 780, 782, 798, 801, 804, 807, 810, 815, 820, 823, 834, 837, 841, 844, 847, 850, 853, 858, 863, 866, 877, 880, 884, 887, 890, 893, 896, 899, 902, 905, 908, 921, 926, 944, 949, 960, 965, 988, 989, 990, 997, 998, 999, 1002, 1005, 1006, 1007, 1010, 1011, 1012, 1016, 1019, 1022, 1025, 1028, 1033, 1036, 1039, 1042, 1046, 1049, 1052, 1055, 1058, 1061, 1065, 1068, 1071, 1074, 1077, 1080, 1084, 1087, 1090, 1093, 1096, 1099, 1102, 1105, 1111, 1118, 1119, 1122, 1125, 1128], "return": [5, 8, 11, 13, 14, 16, 17, 20, 22, 23, 25, 26, 30, 31, 34, 35, 38, 39, 42, 43, 46, 47, 50, 51, 55, 56, 58, 60, 63, 65, 66, 69, 70, 72, 73, 75, 76, 78, 79, 81, 82, 84, 85, 87, 88, 90, 91, 93, 94, 95, 98, 100, 101, 103, 106, 107, 109, 110, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 146, 148, 149, 152, 153, 154, 156, 158, 159, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 198, 200, 201, 203, 204, 206, 207, 209, 210, 212, 214, 216, 218, 220, 221, 223, 224, 225, 227, 229, 230, 231, 232, 235, 237, 239, 241, 244, 246, 248, 250, 253, 259, 261, 264, 266, 267, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 304, 305, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 319, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 360, 362, 364, 365, 367, 368, 370, 372, 373, 375, 376, 377, 379, 381, 382, 383, 384, 386, 387, 388, 389, 390, 391, 395, 397, 398, 401, 403, 404, 407, 410, 412, 413, 416, 419, 421, 422, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 437, 438, 442, 443, 446, 447, 448, 449, 450, 451, 452, 454, 456, 457, 458, 460, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 491, 492, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 527, 528, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 565, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 592, 593, 595, 596, 598, 599, 601, 602, 604, 605, 607, 608, 610, 611, 613, 614, 616, 617, 620, 621, 623, 624, 626, 627, 629, 630, 632, 633, 635, 636, 638, 639, 641, 642, 644, 645, 647, 648, 650, 651, 653, 654, 656, 657, 659, 660, 662, 663, 665, 666, 668, 669, 671, 672, 674, 675, 677, 678, 680, 681, 683, 684, 686, 687, 689, 690, 692, 693, 695, 696, 698, 699, 701, 702, 704, 705, 707, 708, 710, 711, 713, 716, 717, 719, 720, 721, 722, 725, 726, 727, 728, 729, 730, 732, 733, 735, 736, 737, 738, 740, 742, 744, 745, 746, 747, 748, 752, 753, 755, 756, 758, 759, 761, 762, 764, 765, 767, 768, 770, 771, 773, 774, 776, 777, 779, 780, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 797, 798, 800, 801, 803, 804, 806, 807, 809, 810, 812, 814, 815, 817, 819, 820, 822, 823, 825, 827, 829, 831, 833, 834, 836, 837, 840, 841, 843, 844, 846, 847, 849, 850, 852, 853, 855, 857, 858, 860, 862, 863, 865, 866, 868, 870, 872, 874, 876, 877, 879, 880, 883, 884, 886, 887, 889, 890, 892, 893, 895, 896, 898, 899, 901, 902, 904, 905, 907, 908, 910, 911, 912, 913, 914, 918, 920, 921, 923, 925, 926, 928, 930, 932, 933, 934, 935, 937, 939, 941, 943, 944, 946, 948, 949, 951, 953, 955, 957, 959, 960, 962, 964, 965, 967, 969, 973, 974, 975, 976, 977, 978, 981, 982, 983, 987, 988, 989, 990, 996, 997, 998, 999, 1001, 1002, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1015, 1016, 1018, 1019, 1021, 1022, 1025, 1027, 1028, 1032, 1033, 1035, 1036, 1038, 1039, 1041, 1042, 1045, 1046, 1048, 1049, 1051, 1052, 1054, 1055, 1057, 1058, 1060, 1061, 1064, 1065, 1067, 1068, 1070, 1071, 1073, 1074, 1076, 1077, 1079, 1080, 1083, 1084, 1086, 1087, 1089, 1090, 1092, 1093, 1095, 1096, 1098, 1099, 1101, 1102, 1104, 1105, 1107, 1110, 1111, 1113, 1114, 1115, 1117, 1118, 1119, 1121, 1122, 1124, 1125, 1127, 1128, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1168, 1171, 1172, 1173, 1174, 1175, 1176, 1178, 1180, 1181, 1183, 1184, 1185, 1190, 1195, 1198], "none": [5, 8, 11, 13, 14, 16, 17, 20, 23, 25, 26, 30, 31, 34, 35, 38, 39, 42, 43, 46, 47, 50, 51, 55, 56, 58, 60, 63, 65, 66, 69, 70, 72, 73, 75, 76, 78, 79, 81, 82, 84, 85, 87, 88, 90, 91, 98, 100, 101, 103, 106, 107, 109, 110, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 146, 148, 149, 152, 153, 154, 156, 158, 159, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 198, 200, 201, 203, 204, 206, 207, 209, 210, 212, 214, 216, 218, 220, 221, 223, 224, 225, 227, 229, 230, 231, 232, 235, 237, 239, 241, 244, 246, 248, 250, 253, 255, 259, 261, 264, 266, 267, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 304, 305, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 319, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 360, 362, 364, 365, 367, 368, 370, 372, 373, 375, 376, 377, 379, 381, 382, 383, 384, 394, 395, 397, 398, 400, 401, 403, 404, 406, 407, 409, 410, 412, 413, 415, 416, 418, 419, 421, 422, 434, 435, 442, 443, 446, 447, 448, 449, 450, 451, 452, 454, 456, 457, 458, 460, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 491, 492, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 527, 528, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 565, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 582, 583, 584, 585, 586, 587, 588, 589, 592, 593, 595, 596, 599, 601, 602, 604, 605, 607, 608, 611, 614, 617, 620, 621, 623, 624, 626, 627, 629, 630, 632, 633, 635, 636, 638, 639, 641, 642, 644, 645, 647, 648, 650, 651, 653, 654, 656, 657, 659, 660, 662, 663, 665, 666, 668, 669, 671, 672, 674, 675, 677, 678, 680, 681, 683, 684, 686, 687, 689, 690, 692, 693, 695, 696, 698, 699, 701, 702, 704, 705, 707, 708, 710, 711, 716, 717, 719, 720, 721, 722, 733, 752, 753, 755, 756, 758, 759, 761, 762, 764, 765, 767, 768, 770, 771, 773, 774, 776, 777, 779, 780, 782, 784, 797, 798, 800, 801, 803, 804, 806, 807, 809, 810, 812, 814, 815, 817, 819, 820, 822, 823, 825, 827, 829, 831, 833, 834, 836, 837, 840, 841, 843, 844, 846, 847, 849, 850, 852, 853, 855, 857, 858, 860, 862, 863, 865, 866, 868, 870, 872, 874, 876, 877, 879, 880, 884, 887, 890, 893, 896, 899, 902, 905, 908, 918, 921, 923, 926, 928, 930, 932, 933, 934, 935, 937, 939, 941, 944, 946, 949, 951, 953, 955, 957, 960, 962, 965, 967, 974, 978, 987, 988, 989, 990, 996, 997, 998, 999, 1001, 1002, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1015, 1016, 1018, 1019, 1021, 1022, 1024, 1025, 1027, 1028, 1032, 1033, 1035, 1036, 1038, 1039, 1041, 1042, 1045, 1046, 1048, 1049, 1051, 1052, 1054, 1055, 1057, 1058, 1060, 1061, 1065, 1068, 1070, 1071, 1074, 1076, 1077, 1079, 1080, 1083, 1084, 1086, 1087, 1089, 1090, 1093, 1095, 1096, 1099, 1102, 1104, 1105, 1110, 1111, 1113, 1114, 1115, 1117, 1118, 1119, 1121, 1122, 1124, 1125, 1127, 1128, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1180, 1181, 1183, 1184, 1185, 1186, 1188, 1189, 1190, 1191, 1192, 1193, 1196, 1198, 1200, 1201], "graph": [6, 7, 9, 10], "repres": [6, 7, 63, 65, 212, 214, 216, 218, 235, 239, 246, 259, 266, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 304, 307, 308, 309, 311, 313, 314, 315, 317, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 354, 355, 356, 358, 364, 372, 375, 376, 377, 379, 394, 397, 400, 403, 409, 412, 415, 418, 421, 626, 629, 671, 674, 744, 746, 747, 752, 755, 758, 761, 764, 767, 770, 776, 784, 789, 794, 910, 911, 912, 913, 962, 967, 987, 992, 993, 994, 996, 1001, 1004, 1009, 1015, 1018, 1021, 1027, 1032, 1035, 1038, 1041, 1086, 1104, 1110, 1113, 1117, 1121, 1124, 1127, 1166, 1168, 1177, 1178, 1179, 1180, 1181, 1183, 1184, 1185, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202], "multipl": [6, 7, 158, 203, 268, 280, 292, 306, 312, 353, 549, 620, 623, 626, 629, 632, 635, 638, 641, 644, 647, 650, 653, 656, 659, 662, 665, 668, 671, 674, 677, 680, 683, 686, 689, 692, 695, 698, 701, 704, 707, 710, 722, 752, 755, 758, 761, 764, 767, 770, 776, 784, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1083, 1095, 1110, 1113, 1117, 1121, 1124, 1127, 1168, 1170, 1173, 1179, 1186, 1192, 1193, 1197, 1198, 1201], "sub": [6, 620, 623, 626, 629, 632, 635, 638, 641, 644, 647, 650, 653, 656, 659, 662, 665, 668, 671, 674, 677, 680, 683, 686, 689, 692, 695, 698, 701, 704, 707, 710, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1083, 1095, 1110, 1113, 1117, 1121, 1124, 1127], "popul": [6, 13, 25, 187, 188, 214, 216, 218, 269, 270, 271, 273, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 307, 308, 309, 311, 313, 314, 315, 317, 334, 337, 345, 346, 347, 349, 350, 352, 354, 355, 356, 358, 360, 381, 382, 383, 384, 629, 635, 638, 641, 647, 650, 653, 659, 662, 674, 686, 689, 692, 698, 701, 704, 710, 752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 918, 923, 928, 930, 932, 933, 934, 935, 937, 939, 941, 946, 957, 962, 967, 973, 974, 982, 1029, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1083, 1086, 1089, 1095, 1104, 1110, 1113, 1117, 1121, 1124, 1127, 1168, 1172, 1180, 1181, 1186, 1188, 1189, 1191, 1200, 1202], "pass": [6, 7, 69, 72, 78, 81, 84, 87, 90, 212, 214, 216, 218, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 307, 308, 309, 311, 313, 314, 315, 317, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 375, 376, 377, 379, 381, 382, 383, 384, 604, 607, 629, 632, 764, 767, 770, 784, 1035, 1038, 1041, 1171, 1172, 1173, 1174, 1175, 1176, 1181, 1185, 1188, 1189, 1191], "through": [6, 7, 428, 434, 435, 779, 1169, 1170, 1185], "subpopul": [7, 1168], "The": [7, 10, 13, 16, 19, 22, 25, 30, 34, 38, 42, 46, 50, 55, 65, 75, 100, 106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 212, 214, 216, 218, 220, 223, 224, 225, 227, 229, 230, 231, 232, 235, 237, 239, 241, 246, 248, 250, 255, 257, 259, 261, 264, 266, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 304, 307, 308, 309, 311, 313, 314, 315, 317, 319, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 360, 362, 364, 367, 370, 372, 375, 376, 377, 379, 381, 382, 383, 384, 431, 550, 555, 587, 620, 623, 626, 629, 632, 635, 638, 641, 644, 647, 650, 653, 656, 659, 662, 665, 668, 671, 674, 677, 680, 683, 686, 689, 692, 695, 698, 701, 704, 707, 710, 722, 726, 735, 737, 738, 748, 752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 787, 791, 793, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 904, 907, 918, 920, 923, 925, 928, 930, 932, 933, 934, 935, 937, 939, 941, 943, 946, 948, 951, 957, 959, 962, 964, 967, 969, 982, 983, 987, 992, 993, 994, 996, 1001, 1004, 1009, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1083, 1086, 1089, 1092, 1095, 1098, 1101, 1104, 1110, 1113, 1117, 1121, 1124, 1127, 1166, 1168, 1169, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202], "purpos": [7, 10, 13, 16, 19, 22, 30, 34, 38, 42, 46, 50, 55, 65, 75, 100, 220, 592, 595, 598, 601, 604, 607, 610, 613, 616, 620, 623, 626, 629, 632, 635, 641, 644, 647, 650, 653, 656, 659, 662, 665, 668, 671, 674, 677, 680, 683, 686, 689, 692, 695, 698, 701, 704, 707, 710, 773, 779, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 904, 907, 920, 925, 943, 948, 959, 964, 1045, 1048, 1054, 1057, 1060, 1086, 1089, 1092, 1098, 1101, 1104, 1110, 1113, 1117, 1121, 1124, 1127, 1166, 1171, 1172, 1173, 1174, 1175, 1176, 1186, 1191, 1192, 1193, 1196, 1200, 1201, 1202], "thi": [7, 10, 13, 16, 19, 22, 25, 30, 34, 38, 42, 46, 50, 55, 58, 63, 65, 69, 72, 75, 78, 81, 84, 87, 90, 100, 106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 212, 214, 216, 218, 220, 223, 224, 225, 227, 229, 230, 231, 232, 235, 237, 239, 241, 246, 248, 255, 257, 259, 261, 264, 266, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 304, 307, 308, 309, 311, 313, 314, 315, 317, 319, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 360, 362, 364, 367, 370, 372, 375, 376, 377, 379, 381, 382, 383, 384, 387, 388, 389, 390, 391, 397, 403, 412, 421, 428, 429, 430, 431, 432, 433, 434, 435, 592, 595, 598, 601, 604, 607, 610, 613, 616, 620, 623, 626, 629, 632, 635, 638, 641, 644, 647, 650, 653, 656, 659, 662, 665, 668, 671, 674, 677, 680, 683, 686, 689, 692, 695, 698, 701, 704, 707, 710, 713, 716, 720, 742, 749, 773, 779, 783, 784, 785, 793, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 904, 907, 910, 911, 912, 913, 920, 925, 943, 948, 959, 964, 987, 993, 994, 996, 1001, 1004, 1009, 1015, 1018, 1021, 1024, 1027, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1083, 1086, 1089, 1092, 1095, 1098, 1101, 1104, 1110, 1113, 1117, 1121, 1124, 1127, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1178, 1179, 1180, 1181, 1183, 1184, 1185, 1186, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1197, 1198, 1199, 1200, 1201, 1202], "provid": [7, 30, 34, 38, 42, 46, 50, 55, 75, 100, 106, 109, 112, 113, 114, 115, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 212, 214, 216, 218, 223, 224, 225, 227, 229, 230, 231, 232, 242, 243, 249, 250, 264, 266, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 304, 307, 308, 309, 311, 313, 314, 315, 317, 319, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 360, 362, 364, 367, 370, 372, 375, 376, 377, 379, 381, 382, 383, 384, 431, 439, 531, 532, 533, 534, 535, 536, 537, 538, 572, 586, 589, 590, 618, 629, 635, 638, 641, 644, 647, 650, 653, 656, 659, 662, 668, 671, 677, 680, 683, 698, 707, 710, 713, 735, 737, 738, 752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 904, 907, 918, 920, 923, 925, 928, 930, 932, 933, 934, 935, 937, 939, 941, 943, 946, 948, 951, 953, 955, 957, 959, 964, 987, 996, 1001, 1004, 1009, 1035, 1038, 1041, 1045, 1047, 1048, 1050, 1051, 1053, 1054, 1056, 1057, 1059, 1060, 1083, 1086, 1089, 1104, 1109, 1110, 1112, 1113, 1166, 1168, 1170, 1177, 1179, 1180, 1181, 1182, 1183, 1184, 1188, 1189, 1190, 1191, 1192, 1193, 1197, 1198, 1199, 1200, 1202], "represent": [7, 12, 18, 234, 238, 245, 258, 345, 346, 347, 349, 713, 733, 1086, 1089, 1104, 1110, 1113, 1117, 1121, 1124, 1127, 1168, 1192, 1193, 1198, 1199, 1202], "entir": [7, 30, 34, 38, 42, 46, 50, 604, 607, 716, 1168, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1198], "attribut": [7, 10, 13, 19, 25, 38, 58, 60, 69, 72, 75, 78, 81, 84, 87, 90, 98, 100, 103, 106, 109, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 142, 143, 145, 148, 152, 153, 154, 155, 156, 158, 161, 162, 163, 165, 167, 168, 169, 170, 171, 173, 174, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 188, 189, 191, 192, 193, 194, 195, 197, 200, 203, 206, 209, 212, 214, 216, 218, 223, 224, 225, 226, 227, 229, 230, 231, 232, 235, 237, 239, 241, 243, 246, 248, 250, 252, 255, 257, 259, 261, 264, 266, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 299, 300, 302, 304, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 319, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 333, 334, 336, 337, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 351, 352, 354, 355, 356, 357, 358, 360, 362, 364, 367, 370, 372, 375, 376, 377, 378, 379, 381, 382, 383, 384, 394, 397, 400, 403, 406, 409, 412, 415, 418, 421, 441, 620, 623, 626, 629, 632, 635, 638, 641, 644, 647, 650, 653, 656, 659, 662, 665, 668, 671, 674, 677, 680, 683, 686, 689, 692, 695, 698, 701, 704, 707, 710, 752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 918, 923, 928, 930, 932, 933, 934, 935, 937, 939, 941, 946, 955, 957, 962, 967, 969, 973, 974, 975, 976, 977, 978, 980, 981, 982, 987, 992, 993, 994, 996, 1001, 1004, 1009, 1015, 1018, 1021, 1024, 1027, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1083, 1086, 1089, 1095, 1104, 1110, 1113, 1117, 1121, 1124, 1127, 1132, 1133, 1134, 1135, 1137, 1138, 1143, 1144, 1147, 1149, 1150, 1155, 1156, 1183], "properti": [7, 10, 13, 19, 25, 38, 58, 60, 69, 72, 75, 78, 81, 84, 87, 90, 98, 100, 103, 106, 109, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 142, 143, 145, 148, 152, 153, 154, 155, 156, 158, 161, 162, 163, 165, 167, 168, 169, 170, 171, 173, 174, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 188, 189, 191, 192, 193, 194, 195, 197, 200, 203, 206, 209, 212, 214, 216, 218, 223, 224, 225, 226, 227, 229, 230, 231, 232, 235, 237, 239, 241, 243, 246, 248, 250, 252, 255, 257, 259, 261, 264, 266, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 299, 300, 302, 304, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 319, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 333, 334, 336, 337, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 351, 352, 354, 355, 356, 357, 358, 360, 362, 364, 367, 370, 372, 375, 376, 377, 378, 379, 381, 382, 383, 384, 394, 397, 400, 403, 406, 409, 412, 415, 418, 421, 620, 623, 626, 629, 632, 635, 638, 641, 644, 647, 650, 653, 656, 659, 662, 665, 668, 671, 674, 677, 680, 683, 686, 689, 692, 695, 698, 701, 704, 707, 710, 752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 918, 923, 928, 930, 932, 933, 934, 935, 937, 939, 941, 946, 955, 957, 962, 967, 969, 973, 974, 975, 976, 977, 978, 980, 981, 982, 987, 992, 993, 994, 996, 1001, 1004, 1009, 1015, 1018, 1021, 1024, 1027, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1083, 1086, 1089, 1095, 1104, 1110, 1113, 1117, 1121, 1124, 1127, 1154, 1155, 1156, 1158, 1185], "data": [7, 16, 22, 38, 55, 58, 60, 214, 264, 266, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 304, 307, 308, 309, 311, 313, 314, 315, 317, 319, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 360, 362, 364, 367, 370, 372, 375, 376, 377, 379, 381, 382, 383, 384, 601, 604, 607, 620, 623, 626, 629, 632, 635, 638, 641, 644, 647, 650, 653, 656, 659, 662, 665, 668, 671, 674, 677, 680, 683, 686, 689, 692, 695, 698, 701, 704, 707, 710, 752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 987, 996, 1001, 1004, 1009, 1032, 1035, 1037, 1038, 1040, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1083, 1086, 1089, 1095, 1104, 1110, 1113, 1117, 1121, 1124, 1127, 1166, 1167, 1169, 1172, 1173, 1179, 1192, 1193, 1197, 1198, 1200, 1201, 1202], "structur": [7, 9, 10, 1166, 1167, 1168, 1186], "breedinggraph": 8, "basal": [9, 367, 664, 772, 1001, 1031, 1044, 1063, 1066, 1069, 1072, 1075, 1078, 1088, 1091, 1116, 1120, 1123, 1126, 1199], "compos": [9, 10, 1168, 1183, 1184, 1185, 1186], "complex": [9, 10, 497, 1170, 1177, 1180, 1190], "like": [9, 10, 214, 216, 218, 452, 456, 457, 458, 505, 604, 607, 749, 1086, 1089, 1104, 1168, 1183, 1184, 1185, 1186, 1193, 1198, 1199, 1201, 1202], "thei": [9, 10, 604, 607, 809, 812, 814, 817, 825, 827, 829, 831, 852, 855, 857, 860, 868, 870, 872, 874, 1155, 1156, 1168, 1169, 1179, 1183, 1184, 1193, 1198], "ar": [9, 10, 69, 72, 78, 81, 84, 87, 90, 98, 106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 214, 216, 218, 223, 224, 225, 226, 227, 229, 230, 231, 232, 235, 237, 239, 241, 246, 248, 255, 257, 259, 261, 264, 266, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 304, 307, 308, 309, 311, 313, 314, 315, 317, 319, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 360, 362, 364, 367, 370, 372, 375, 376, 377, 379, 381, 382, 383, 384, 397, 403, 412, 421, 439, 531, 532, 539, 542, 543, 571, 573, 587, 604, 607, 620, 623, 626, 629, 631, 632, 634, 635, 637, 638, 640, 641, 643, 644, 647, 650, 653, 656, 659, 662, 665, 668, 671, 674, 677, 680, 682, 683, 685, 686, 689, 691, 692, 694, 695, 698, 701, 704, 707, 710, 716, 720, 721, 722, 735, 736, 752, 755, 758, 761, 764, 767, 770, 773, 775, 776, 778, 779, 784, 785, 789, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 883, 886, 889, 892, 895, 898, 901, 904, 907, 911, 913, 951, 953, 973, 974, 976, 977, 978, 981, 987, 992, 993, 994, 996, 1001, 1004, 1009, 1015, 1018, 1021, 1027, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1083, 1086, 1089, 1095, 1104, 1110, 1113, 1117, 1121, 1124, 1127, 1155, 1156, 1166, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1179, 1180, 1181, 1183, 1184, 1185, 1186, 1188, 1189, 1190, 1191, 1192, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203], "point": [9, 10, 106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 212, 214, 216, 218, 220, 223, 224, 225, 227, 229, 230, 231, 232, 307, 308, 309, 311, 313, 314, 315, 317, 390, 433, 741, 742, 941, 962, 967, 982, 1051, 1086, 1089, 1104, 1110, 1113, 1117, 1121, 1124, 1127, 1167, 1168, 1181, 1183, 1184, 1185, 1191], "were": [9, 10, 722, 1183, 1184, 1202], "locat": [9, 10, 1032, 1035, 1038, 1041, 1183, 1184, 1185, 1193, 1197, 1198, 1201], "storag": [10, 13, 19, 214, 620, 623, 626, 773, 809, 814, 825, 829, 852, 857, 868, 872, 1169], "time": [10, 13, 19, 25, 30, 38, 42, 46, 50, 87, 235, 237, 239, 241, 243, 246, 248, 252, 255, 257, 259, 261, 716, 722, 1045, 1048, 1051, 1054, 1057, 1060, 1171, 1173, 1174, 1175, 1176, 1183, 1184, 1186, 1188, 1189, 1190, 1191, 1200], "relat": [10, 441, 455, 739, 1029, 1045, 1168, 1192, 1193, 1197, 1198, 1201], "bval": [10, 13, 19, 25, 30, 34, 38, 42, 46, 50, 1171, 1172, 1173, 1174, 1175, 1176, 1183, 1184, 1185], "valu": [10, 13, 19, 25, 30, 34, 38, 42, 46, 50, 53, 54, 55, 57, 58, 59, 60, 63, 102, 103, 106, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 212, 214, 216, 218, 220, 223, 224, 225, 226, 227, 229, 230, 231, 232, 235, 237, 239, 241, 246, 247, 248, 250, 259, 261, 264, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 300, 302, 304, 307, 308, 309, 311, 313, 314, 315, 317, 319, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 354, 355, 356, 357, 358, 360, 362, 364, 367, 370, 372, 375, 376, 377, 379, 381, 382, 383, 384, 387, 388, 389, 390, 391, 394, 397, 400, 403, 406, 409, 412, 415, 418, 421, 432, 433, 437, 446, 526, 530, 531, 532, 539, 540, 541, 542, 557, 564, 565, 566, 569, 570, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 588, 589, 591, 592, 594, 604, 607, 620, 623, 626, 629, 632, 635, 638, 641, 644, 647, 650, 653, 656, 659, 662, 665, 668, 671, 674, 677, 680, 683, 686, 689, 692, 695, 698, 701, 704, 707, 710, 721, 722, 742, 752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 783, 784, 785, 790, 792, 793, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 952, 977, 987, 992, 993, 994, 996, 1001, 1004, 1009, 1015, 1018, 1021, 1024, 1027, 1030, 1031, 1032, 1034, 1035, 1037, 1038, 1040, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1083, 1086, 1089, 1095, 1104, 1107, 1110, 1113, 1117, 1121, 1124, 1127, 1168, 1171, 1172, 1173, 1174, 1175, 1176, 1179, 1180, 1181, 1188, 1189, 1190, 1193, 1194, 1195, 1196, 1200, 1201, 1202, 1203], "individu": [10, 13, 16, 19, 22, 25, 30, 42, 46, 63, 65, 69, 72, 75, 78, 81, 84, 87, 90, 98, 100, 103, 106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 212, 214, 216, 218, 220, 223, 224, 225, 227, 229, 230, 231, 232, 235, 237, 239, 241, 243, 246, 248, 252, 255, 257, 259, 261, 264, 266, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 304, 307, 308, 309, 311, 313, 314, 315, 317, 319, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 360, 362, 364, 367, 370, 372, 375, 376, 377, 379, 381, 382, 383, 384, 720, 737, 752, 755, 758, 761, 764, 767, 770, 776, 784, 797, 803, 809, 814, 819, 825, 829, 833, 840, 846, 852, 857, 862, 868, 872, 876, 883, 886, 889, 892, 895, 898, 901, 904, 907, 918, 923, 928, 930, 932, 933, 934, 935, 937, 939, 941, 946, 952, 953, 957, 962, 967, 973, 974, 975, 976, 977, 978, 981, 987, 996, 1001, 1004, 1009, 1035, 1045, 1048, 1051, 1054, 1057, 1060, 1110, 1113, 1117, 1121, 1124, 1127, 1168, 1174, 1175, 1177, 1181, 1183, 1184, 1185, 1186, 1188, 1189, 1191, 1193, 1195, 1197, 1198, 1201, 1202], "geno": [10, 13, 19, 25, 30, 34, 38, 42, 46, 50, 93, 95, 333, 334, 336, 337, 1171, 1172, 1173, 1174, 1175, 1176, 1183, 1184, 1185], "genotyp": [10, 13, 19, 25, 30, 34, 38, 42, 46, 50, 55, 58, 60, 61, 62, 63, 65, 75, 93, 94, 95, 98, 100, 103, 106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 141, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 212, 214, 216, 218, 220, 223, 224, 225, 227, 229, 230, 231, 232, 298, 300, 313, 314, 315, 316, 317, 333, 334, 336, 337, 360, 671, 752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 785, 786, 787, 788, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1064, 1067, 1070, 1073, 1076, 1079, 1108, 1109, 1110, 1112, 1113, 1116, 1117, 1121, 1123, 1124, 1127, 1168, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1179, 1180, 1181, 1183, 1184, 1186, 1187, 1193, 1198, 1203], "genom": [10, 13, 19, 25, 30, 34, 38, 42, 46, 50, 60, 63, 65, 98, 100, 103, 106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 143, 145, 148, 152, 153, 154, 155, 156, 158, 161, 162, 163, 165, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 211, 212, 213, 214, 215, 216, 217, 218, 220, 223, 224, 225, 227, 228, 229, 230, 231, 232, 235, 237, 239, 241, 243, 246, 248, 252, 255, 257, 259, 261, 269, 270, 271, 272, 273, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 327, 328, 329, 330, 331, 332, 334, 335, 337, 339, 340, 341, 343, 354, 355, 356, 360, 380, 381, 382, 383, 384, 424, 425, 426, 437, 438, 735, 736, 737, 738, 749, 750, 751, 752, 754, 755, 757, 758, 760, 761, 763, 764, 766, 767, 769, 770, 772, 773, 775, 776, 778, 779, 781, 784, 786, 789, 793, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 883, 886, 889, 892, 895, 898, 901, 904, 907, 910, 911, 912, 1040, 1050, 1051, 1057, 1060, 1086, 1089, 1104, 1110, 1168, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1179, 1181, 1190, 1197, 1198, 1200, 1201, 1202], "gmod": [10, 13, 19, 25, 30, 34, 38, 42, 46, 50, 752, 753, 755, 756, 758, 759, 761, 762, 764, 765, 767, 768, 770, 771, 773, 774, 776, 777, 779, 780, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 883, 886, 889, 892, 895, 898, 901, 904, 907, 1171, 1172, 1173, 1174, 1175, 1176, 1183, 1184, 1185, 1186, 1188, 1189, 1191, 1193], "model": [10, 13, 19, 25, 30, 34, 38, 42, 46, 50, 60, 98, 100, 103, 106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 212, 214, 216, 218, 220, 223, 224, 225, 227, 229, 230, 231, 232, 360, 737, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 797, 798, 800, 801, 803, 804, 806, 807, 809, 810, 812, 814, 815, 817, 819, 820, 822, 823, 825, 827, 829, 831, 833, 834, 836, 837, 840, 841, 843, 844, 846, 847, 849, 850, 852, 853, 855, 857, 858, 860, 862, 863, 865, 866, 868, 870, 872, 874, 876, 877, 879, 880, 883, 884, 886, 887, 889, 890, 892, 893, 895, 896, 898, 899, 901, 902, 904, 905, 907, 908, 910, 911, 912, 913, 914, 1168, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1181, 1197, 1198, 1200, 1201], "pheno": [10, 13, 19, 25, 30, 34, 38, 42, 46, 50, 1171, 1172, 1173, 1174, 1175, 1176, 1183, 1184, 1185], "phenotyp": [10, 13, 19, 25, 30, 34, 38, 42, 46, 50, 55, 58, 60, 96, 97, 98, 99, 100, 102, 103, 106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 212, 214, 216, 218, 220, 223, 224, 225, 227, 229, 230, 231, 232, 752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 1032, 1035, 1037, 1038, 1040, 1041, 1168, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1187, 1192, 1203], "t_cur": [10, 13, 19, 25, 30, 38, 42, 46, 50, 106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 212, 214, 216, 218, 220, 223, 224, 225, 227, 229, 230, 231, 232, 1171, 1173, 1174, 1175, 1176, 1181, 1183, 1184, 1185, 1186, 1188, 1189, 1191], "int": [10, 13, 19, 25, 30, 38, 42, 46, 50, 69, 72, 78, 81, 84, 87, 90, 98, 106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 212, 214, 216, 218, 220, 223, 224, 225, 227, 229, 230, 231, 232, 319, 367, 434, 435, 448, 449, 450, 451, 452, 512, 513, 514, 533, 534, 535, 536, 537, 538, 547, 548, 549, 550, 551, 552, 554, 555, 556, 576, 586, 589, 604, 607, 620, 623, 626, 629, 632, 635, 638, 641, 644, 647, 650, 653, 656, 659, 662, 665, 668, 671, 674, 677, 680, 683, 686, 689, 692, 695, 698, 701, 704, 707, 710, 713, 716, 717, 727, 728, 729, 730, 738, 740, 744, 746, 747, 748, 752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 883, 886, 889, 892, 895, 898, 901, 907, 910, 911, 912, 913, 914, 918, 923, 928, 930, 932, 933, 934, 935, 937, 939, 941, 946, 957, 962, 964, 967, 969, 976, 977, 978, 981, 982, 1001, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1083, 1086, 1089, 1095, 1104, 1110, 1113, 1117, 1121, 1124, 1127, 1171, 1173, 1174, 1175, 1176, 1183, 1184, 1185, 1186, 1200, 1201, 1202], "current": [10, 13, 19, 25, 30, 38, 42, 46, 50, 106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 212, 214, 216, 218, 220, 223, 224, 225, 227, 229, 230, 231, 232, 1086, 1089, 1104, 1166, 1171, 1173, 1174, 1175, 1176, 1178, 1185, 1201], "t_max": [10, 13, 19, 25, 30, 38, 42, 46, 50, 106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 212, 214, 216, 218, 220, 223, 224, 225, 227, 229, 230, 231, 232, 1171, 1173, 1174, 1175, 1176, 1181, 1183, 1184, 1185, 1186, 1188, 1189, 1191], "maximum": [10, 13, 19, 25, 106, 109, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 212, 214, 216, 218, 220, 223, 224, 225, 227, 229, 230, 231, 232, 274, 275, 276, 277, 278, 279, 431, 432, 537, 538, 580, 581, 604, 607, 783, 785, 978, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1168, 1170, 1181, 1183, 1184, 1185, 1192], "breedingnod": [11, 13, 16, 19, 22, 25], "bank": [12, 18, 19], "kwarg": [13, 16, 22, 25, 30, 34, 38, 42, 46, 50, 55, 58, 60, 63, 65, 69, 72, 75, 78, 81, 84, 87, 90, 98, 100, 103, 106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 212, 214, 216, 218, 220, 223, 224, 225, 227, 229, 230, 231, 232, 235, 237, 239, 241, 246, 248, 255, 257, 259, 261, 264, 266, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 304, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 319, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 360, 362, 364, 367, 370, 372, 375, 376, 377, 379, 381, 382, 383, 384, 386, 387, 388, 389, 390, 391, 394, 397, 400, 403, 409, 412, 418, 421, 428, 429, 430, 431, 432, 433, 434, 435, 592, 595, 598, 604, 607, 610, 613, 616, 620, 623, 626, 629, 632, 635, 638, 641, 644, 647, 650, 653, 656, 659, 662, 665, 668, 671, 674, 677, 680, 683, 686, 689, 692, 695, 698, 701, 704, 707, 710, 752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 883, 886, 889, 892, 895, 898, 901, 904, 907, 918, 920, 923, 925, 928, 930, 932, 933, 934, 935, 937, 939, 941, 943, 946, 948, 951, 953, 955, 957, 959, 962, 964, 967, 969, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 987, 996, 1001, 1004, 1009, 1015, 1018, 1021, 1027, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1064, 1067, 1070, 1073, 1076, 1079, 1083, 1086, 1089, 1095, 1098, 1101, 1104, 1110, 1113, 1117, 1121, 1124, 1127, 1171, 1172, 1173, 1174, 1175, 1176, 1181, 1183, 1184, 1185, 1190, 1195], "oper": [13, 15, 16, 21, 22, 25, 27, 28, 29, 32, 33, 36, 37, 40, 41, 44, 45, 48, 49, 212, 214, 216, 218, 620, 665, 797, 800, 803, 806, 809, 812, 814, 817, 825, 827, 829, 831, 840, 843, 846, 849, 852, 855, 857, 860, 868, 870, 872, 874, 883, 886, 889, 892, 895, 898, 901, 962, 967, 1173, 1179, 1192], "us": [13, 25, 57, 58, 60, 98, 100, 103, 106, 109, 112, 113, 114, 116, 118, 119, 120, 121, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 155, 156, 158, 161, 162, 163, 165, 167, 168, 169, 170, 171, 174, 176, 177, 178, 179, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 212, 214, 216, 218, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 264, 266, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 304, 307, 308, 309, 311, 313, 314, 315, 317, 319, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 360, 362, 364, 367, 370, 372, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 387, 388, 389, 390, 391, 394, 397, 400, 403, 409, 412, 418, 421, 428, 429, 430, 432, 433, 434, 435, 437, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 495, 577, 578, 579, 582, 583, 584, 585, 586, 589, 592, 595, 598, 604, 607, 610, 613, 616, 623, 626, 629, 632, 635, 638, 641, 644, 647, 650, 653, 656, 659, 662, 674, 680, 686, 689, 692, 695, 698, 701, 704, 707, 710, 716, 717, 719, 720, 721, 722, 726, 752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 783, 784, 785, 793, 797, 800, 803, 806, 808, 809, 811, 812, 813, 814, 816, 817, 819, 822, 824, 825, 826, 827, 828, 829, 830, 831, 833, 836, 840, 843, 846, 849, 851, 852, 854, 855, 856, 857, 859, 860, 862, 865, 867, 868, 869, 870, 871, 872, 873, 874, 876, 879, 883, 886, 889, 892, 895, 898, 901, 904, 907, 941, 951, 952, 953, 955, 973, 974, 975, 976, 977, 978, 979, 980, 981, 983, 987, 992, 996, 1001, 1004, 1009, 1015, 1018, 1021, 1027, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1056, 1057, 1059, 1060, 1067, 1070, 1073, 1076, 1079, 1083, 1086, 1089, 1092, 1095, 1098, 1101, 1104, 1110, 1113, 1117, 1121, 1124, 1127, 1168, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1186, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202], "initi": [13, 25, 32, 33, 34, 38, 78, 235, 237, 239, 241, 246, 248, 255, 257, 259, 261, 951, 962, 967, 1168, 1179, 1182, 1183, 1184, 1203], "advanc": [13, 25, 748, 1170, 1195], "constructor": [13, 25, 58, 60, 63, 69, 72, 78, 81, 84, 87, 90, 103, 106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 212, 214, 216, 218, 220, 223, 224, 225, 227, 229, 230, 231, 232, 235, 237, 239, 241, 246, 248, 255, 257, 259, 261, 264, 266, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 304, 307, 308, 309, 311, 313, 314, 315, 317, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 360, 362, 364, 370, 372, 375, 376, 377, 379, 381, 382, 383, 384, 394, 397, 400, 403, 409, 412, 418, 421, 623, 626, 629, 632, 635, 638, 641, 644, 647, 650, 653, 656, 717, 764, 767, 770, 784, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 889, 892, 895, 898, 901, 918, 923, 928, 930, 932, 933, 934, 935, 937, 939, 941, 946, 951, 953, 955, 957, 962, 964, 967, 969, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 987, 992, 993, 994, 996, 1001, 1004, 1009, 1015, 1018, 1021, 1024, 1027, 1035, 1038, 1041, 1048, 1051, 1054, 1057, 1060, 1067, 1070, 1073, 1076, 1079, 1083, 1086, 1098, 1101, 1104, 1113, 1171, 1172, 1173, 1174, 1175, 1176, 1180, 1181, 1190, 1192, 1193, 1195, 1196, 1197, 1198, 1200, 1202], "dict": [13, 16, 22, 25, 30, 34, 38, 42, 46, 50, 55, 58, 60, 63, 65, 69, 72, 75, 78, 81, 84, 87, 90, 98, 100, 103, 106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 212, 214, 216, 218, 220, 223, 224, 225, 227, 229, 230, 231, 232, 235, 237, 239, 241, 246, 248, 255, 257, 259, 261, 264, 266, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 304, 307, 308, 309, 311, 313, 314, 315, 317, 319, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 360, 362, 364, 367, 370, 372, 375, 376, 377, 379, 381, 382, 383, 384, 387, 388, 389, 390, 391, 394, 397, 400, 403, 409, 412, 418, 421, 428, 429, 430, 432, 433, 434, 435, 509, 572, 573, 574, 575, 576, 592, 595, 597, 598, 604, 607, 610, 613, 616, 620, 623, 626, 629, 632, 635, 638, 641, 644, 647, 650, 653, 656, 659, 662, 665, 668, 671, 674, 677, 680, 683, 686, 689, 692, 695, 698, 701, 704, 707, 710, 733, 752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 785, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 883, 886, 889, 892, 895, 898, 901, 904, 907, 918, 920, 923, 925, 928, 930, 932, 933, 934, 935, 937, 939, 941, 943, 946, 948, 951, 953, 955, 957, 959, 962, 964, 967, 969, 973, 974, 975, 976, 977, 978, 979, 980, 981, 987, 996, 1001, 1004, 1009, 1015, 1018, 1021, 1027, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1064, 1067, 1070, 1073, 1076, 1079, 1083, 1086, 1089, 1095, 1098, 1101, 1104, 1110, 1113, 1117, 1121, 1124, 1127, 1171, 1172, 1173, 1174, 1175, 1176, 1181, 1183, 1184, 1185, 1190, 1195], "addit": [13, 22, 25, 30, 34, 38, 42, 46, 50, 55, 58, 60, 63, 65, 69, 72, 75, 78, 81, 84, 87, 90, 98, 100, 103, 106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 212, 214, 216, 218, 220, 223, 224, 225, 227, 229, 230, 231, 232, 235, 237, 239, 241, 246, 248, 255, 257, 259, 261, 264, 266, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 304, 307, 308, 309, 311, 313, 314, 315, 317, 319, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 360, 362, 364, 367, 370, 372, 375, 376, 377, 379, 381, 382, 383, 384, 387, 388, 389, 390, 391, 394, 397, 400, 403, 409, 412, 418, 421, 424, 425, 426, 428, 429, 430, 432, 433, 434, 435, 437, 438, 592, 595, 598, 604, 607, 610, 613, 616, 620, 623, 626, 629, 632, 635, 638, 641, 644, 647, 650, 653, 656, 659, 662, 665, 668, 671, 674, 677, 680, 683, 686, 689, 692, 695, 698, 701, 704, 707, 710, 737, 751, 752, 754, 755, 757, 758, 761, 763, 764, 766, 767, 770, 773, 776, 779, 784, 796, 797, 799, 800, 802, 803, 805, 806, 808, 809, 811, 812, 813, 814, 816, 817, 819, 822, 824, 825, 826, 827, 828, 829, 830, 831, 833, 836, 839, 840, 842, 843, 845, 846, 848, 849, 851, 852, 854, 855, 856, 857, 859, 860, 862, 865, 867, 868, 869, 870, 871, 872, 873, 874, 876, 879, 883, 886, 889, 892, 895, 898, 901, 904, 907, 918, 920, 923, 925, 928, 930, 932, 933, 934, 935, 937, 939, 941, 943, 946, 948, 951, 953, 955, 957, 959, 962, 964, 967, 969, 973, 974, 975, 976, 977, 978, 979, 980, 981, 987, 996, 1001, 1004, 1009, 1015, 1018, 1021, 1027, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1064, 1067, 1070, 1073, 1076, 1079, 1083, 1086, 1089, 1095, 1098, 1101, 1104, 1110, 1113, 1117, 1121, 1124, 1127, 1169, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1179, 1180, 1181, 1183, 1184, 1185, 1186, 1188, 1189, 1190, 1191, 1193, 1195, 1197, 1198, 1200, 1201, 1202], "keyword": [13, 22, 25, 30, 34, 38, 42, 46, 50, 55, 58, 60, 63, 65, 69, 72, 75, 78, 81, 84, 87, 90, 98, 100, 103, 106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 212, 214, 216, 218, 220, 223, 224, 225, 227, 229, 230, 231, 232, 235, 237, 239, 241, 246, 248, 255, 257, 259, 261, 264, 266, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 304, 307, 308, 309, 311, 313, 314, 315, 317, 319, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 360, 362, 364, 367, 370, 372, 375, 376, 377, 379, 381, 382, 383, 384, 387, 388, 389, 390, 391, 394, 397, 400, 403, 409, 412, 418, 421, 428, 429, 430, 432, 433, 434, 435, 592, 595, 598, 604, 607, 610, 613, 616, 620, 623, 626, 629, 632, 635, 638, 641, 644, 647, 650, 653, 656, 659, 662, 665, 668, 671, 674, 677, 680, 683, 686, 689, 692, 695, 698, 701, 704, 707, 710, 752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 883, 886, 889, 892, 895, 898, 901, 904, 907, 918, 920, 923, 925, 928, 930, 932, 933, 934, 935, 937, 939, 941, 943, 946, 948, 951, 953, 955, 957, 959, 962, 964, 967, 969, 973, 974, 975, 976, 977, 978, 979, 980, 981, 987, 996, 1001, 1004, 1009, 1015, 1018, 1021, 1027, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1064, 1067, 1070, 1073, 1076, 1079, 1083, 1086, 1089, 1095, 1098, 1101, 1104, 1110, 1113, 1117, 1121, 1124, 1127, 1171, 1172, 1173, 1174, 1175, 1176, 1181, 1184, 1190, 1195], "argument": [13, 22, 25, 30, 34, 38, 42, 46, 50, 55, 58, 60, 63, 65, 69, 72, 75, 78, 81, 84, 87, 90, 98, 100, 103, 106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 212, 214, 216, 218, 220, 223, 224, 225, 227, 229, 230, 231, 232, 235, 237, 239, 241, 246, 248, 255, 257, 259, 261, 264, 266, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 304, 307, 308, 309, 311, 313, 314, 315, 317, 319, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 360, 362, 364, 367, 370, 372, 375, 376, 377, 379, 381, 382, 383, 384, 387, 388, 389, 390, 391, 394, 397, 400, 403, 409, 412, 418, 421, 428, 429, 430, 432, 433, 434, 435, 592, 595, 598, 604, 607, 610, 613, 616, 620, 623, 626, 629, 632, 635, 638, 641, 644, 647, 650, 653, 656, 659, 662, 665, 668, 671, 674, 677, 680, 683, 686, 689, 692, 695, 698, 701, 704, 707, 710, 752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 883, 886, 889, 892, 895, 898, 901, 904, 907, 918, 920, 923, 925, 928, 930, 932, 933, 934, 935, 937, 939, 941, 943, 946, 948, 951, 953, 955, 957, 959, 962, 964, 967, 969, 973, 974, 975, 976, 977, 978, 979, 980, 981, 987, 996, 1001, 1004, 1009, 1015, 1018, 1021, 1027, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1064, 1067, 1070, 1073, 1076, 1079, 1083, 1086, 1089, 1095, 1098, 1101, 1104, 1110, 1113, 1117, 1121, 1124, 1127, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1181, 1184, 1188, 1189, 1190, 1191, 1192, 1195, 1197, 1198, 1199], "ngen": [13, 25, 214, 216, 218, 918, 923, 928, 930, 932, 933, 934, 935, 937, 939, 941, 946, 957, 962, 967, 1185, 1186, 1188, 1189, 1190, 1191, 1194], "lbook": [13, 25, 1173, 1183, 1184, 1185, 1186], "number": [13, 25, 38, 69, 72, 75, 78, 81, 84, 87, 90, 93, 94, 95, 98, 106, 109, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 142, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 173, 174, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 188, 189, 191, 192, 193, 194, 195, 197, 200, 203, 206, 209, 212, 214, 216, 218, 220, 223, 224, 225, 226, 227, 229, 230, 231, 232, 235, 237, 239, 241, 243, 246, 248, 250, 252, 255, 257, 259, 261, 264, 266, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 299, 300, 302, 304, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 319, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 333, 334, 336, 337, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 351, 352, 354, 355, 356, 357, 358, 360, 362, 364, 367, 370, 372, 375, 376, 377, 378, 379, 381, 382, 383, 384, 390, 394, 397, 400, 403, 406, 409, 412, 415, 418, 421, 431, 433, 439, 448, 449, 452, 473, 484, 497, 499, 500, 501, 502, 503, 551, 552, 620, 623, 626, 629, 632, 635, 638, 641, 644, 647, 650, 653, 656, 659, 662, 665, 668, 671, 674, 677, 680, 683, 686, 689, 692, 695, 698, 701, 704, 707, 710, 713, 715, 716, 717, 719, 720, 721, 722, 727, 728, 729, 730, 735, 736, 737, 738, 742, 744, 752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 783, 784, 785, 793, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 883, 886, 889, 892, 895, 898, 901, 904, 907, 910, 911, 912, 913, 914, 918, 923, 928, 930, 932, 933, 934, 935, 937, 939, 941, 946, 955, 957, 962, 964, 967, 969, 976, 977, 978, 981, 982, 987, 988, 989, 996, 997, 998, 1001, 1004, 1005, 1006, 1009, 1010, 1011, 1015, 1018, 1021, 1024, 1027, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1083, 1086, 1089, 1095, 1104, 1110, 1113, 1117, 1121, 1124, 1127, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1179, 1180, 1181, 1183, 1184, 1185, 1186, 1191, 1192, 1193, 1195, 1196, 1197, 1198, 1200, 1201, 1202, 1203], "gener": [13, 25, 69, 72, 75, 78, 81, 84, 87, 90, 93, 94, 95, 98, 105, 106, 108, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 140, 143, 144, 145, 147, 148, 152, 153, 154, 156, 157, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 196, 197, 199, 200, 202, 203, 205, 206, 208, 209, 211, 212, 214, 216, 218, 220, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 235, 237, 239, 241, 246, 248, 250, 255, 259, 261, 286, 287, 288, 289, 290, 291, 334, 337, 381, 382, 383, 384, 423, 424, 425, 426, 439, 440, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 462, 463, 464, 465, 467, 495, 525, 604, 607, 715, 716, 717, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 748, 797, 803, 809, 814, 819, 825, 829, 833, 840, 846, 852, 857, 862, 868, 872, 876, 883, 886, 889, 892, 895, 898, 901, 904, 907, 910, 911, 912, 913, 914, 918, 923, 928, 930, 932, 933, 934, 935, 937, 939, 941, 946, 955, 957, 962, 967, 969, 992, 1001, 1045, 1048, 1050, 1051, 1054, 1057, 1060, 1086, 1159, 1160, 1168, 1172, 1180, 1190, 1191, 1194, 1203], "logbook": [13, 25, 36, 39, 1203], "which": [13, 22, 25, 38, 58, 60, 106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 133, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 212, 214, 216, 218, 223, 224, 225, 227, 229, 230, 231, 232, 243, 250, 255, 257, 264, 266, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 304, 307, 308, 309, 311, 313, 314, 315, 317, 319, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 360, 362, 364, 367, 370, 372, 375, 376, 377, 379, 381, 382, 383, 384, 431, 434, 435, 450, 452, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 495, 533, 534, 535, 536, 537, 538, 542, 550, 555, 556, 572, 573, 574, 575, 576, 580, 581, 587, 592, 595, 598, 601, 604, 607, 610, 613, 616, 620, 623, 626, 629, 632, 635, 638, 640, 641, 644, 647, 650, 653, 656, 659, 662, 665, 668, 671, 674, 677, 680, 683, 686, 689, 691, 692, 695, 698, 701, 704, 707, 710, 716, 719, 721, 722, 726, 740, 752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 785, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 883, 886, 889, 892, 895, 898, 901, 904, 907, 918, 920, 923, 925, 928, 930, 932, 933, 934, 935, 937, 939, 941, 943, 946, 948, 951, 953, 955, 957, 959, 962, 964, 967, 969, 973, 974, 975, 976, 977, 978, 980, 981, 982, 987, 988, 989, 992, 993, 994, 996, 997, 998, 1001, 1004, 1005, 1006, 1009, 1010, 1011, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1064, 1067, 1070, 1073, 1076, 1079, 1083, 1086, 1089, 1095, 1104, 1110, 1113, 1117, 1121, 1124, 1127, 1136, 1139, 1140, 1142, 1148, 1151, 1152, 1154, 1157, 1158, 1166, 1168, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1188, 1189, 1190, 1191, 1192, 1193, 1195, 1197, 1198, 1199, 1200, 1201, 1202, 1203], "write": [13, 25, 30, 34, 38, 42, 46, 50, 55, 58, 60, 63, 65, 69, 72, 75, 78, 81, 84, 87, 90, 98, 100, 103, 106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 212, 214, 216, 218, 220, 223, 224, 225, 227, 229, 230, 231, 232, 590, 592, 595, 601, 604, 607, 620, 623, 626, 629, 632, 635, 638, 641, 644, 647, 650, 653, 656, 659, 662, 665, 668, 671, 674, 677, 680, 683, 686, 689, 692, 695, 698, 701, 704, 707, 710, 752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1083, 1086, 1089, 1095, 1104, 1110, 1113, 1117, 1121, 1124, 1127, 1170, 1171, 1172, 1174, 1175, 1176, 1185, 1192, 1193, 1197, 1198, 1200, 1201], "statist": [13, 25, 38, 764, 767, 770, 784, 1173, 1192], "evalop": [13, 25, 1171, 1185], "evalu": [13, 25, 28, 29, 30, 34, 38, 264, 266, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 304, 307, 308, 309, 311, 313, 314, 315, 317, 319, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 360, 362, 364, 367, 370, 372, 375, 376, 377, 379, 381, 382, 383, 384, 983, 987, 996, 1001, 1004, 1009, 1168, 1170, 1181, 1183, 1184, 1186, 1190, 1203], "evolv": [13, 25, 214, 216, 218, 918, 923, 928, 930, 932, 933, 934, 935, 937, 939, 941, 946, 957, 962, 967, 1170, 1186, 1188, 1189, 1191], "nrep": [13, 25, 98, 118, 119, 120, 121, 122, 1177, 1180, 1185, 1186], "set": [13, 25, 98, 100, 103, 106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 212, 214, 216, 218, 223, 224, 225, 227, 229, 230, 231, 232, 235, 237, 239, 241, 246, 248, 250, 259, 261, 264, 266, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 304, 307, 308, 309, 311, 313, 314, 315, 317, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 362, 364, 370, 372, 375, 376, 377, 379, 381, 382, 383, 384, 390, 397, 403, 412, 421, 433, 518, 572, 592, 677, 719, 722, 726, 752, 755, 758, 761, 764, 767, 770, 776, 784, 809, 814, 825, 829, 852, 857, 868, 872, 962, 967, 969, 973, 974, 975, 976, 977, 978, 980, 981, 982, 987, 996, 1004, 1009, 1015, 1018, 1021, 1027, 1048, 1051, 1054, 1057, 1060, 1160, 1166, 1167, 1168, 1170, 1172, 1173, 1177, 1178, 1179, 1181, 1182, 1183, 1184, 1186, 1188, 1189, 1190, 1191, 1192, 1193, 1196, 1200, 1201], "replic": [13, 25, 38, 98, 118, 119, 120, 121, 122, 1173, 1177, 1180, 1183, 1184, 1185, 1186, 1188, 1189, 1190, 1191], "restart": [13, 25], "start": [13, 25, 214, 216, 218, 629, 635, 638, 641, 647, 650, 653, 659, 674, 686, 689, 692, 698, 701, 704, 710, 735, 736, 737, 738, 748, 764, 767, 784, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1083, 1086, 1089, 1095, 1104, 1110, 1113, 1117, 1121, 1124, 1127, 1167, 1168, 1170, 1172, 1183, 1184, 1185, 1186, 1193, 1197, 1198, 1199, 1200, 1201, 1202], "evolut": [13, 25, 1186], "each": [13, 25, 69, 72, 75, 78, 84, 87, 90, 98, 100, 103, 106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 212, 214, 216, 218, 220, 223, 224, 225, 227, 229, 230, 231, 232, 307, 308, 309, 311, 334, 339, 340, 341, 343, 390, 397, 403, 412, 421, 433, 539, 576, 632, 683, 722, 727, 728, 729, 735, 736, 738, 752, 755, 758, 761, 773, 776, 779, 784, 797, 803, 809, 814, 819, 825, 829, 833, 852, 857, 868, 872, 951, 953, 1015, 1018, 1021, 1027, 1032, 1035, 1038, 1041, 1086, 1089, 1092, 1104, 1110, 1113, 1117, 1121, 1124, 1127, 1166, 1177, 1180, 1181, 1183, 1184, 1185, 1186, 1192, 1193, 1198, 1200, 1201, 1202, 1203], "note": [13, 25, 390, 433, 620, 623, 626, 629, 632, 635, 638, 641, 644, 647, 650, 653, 656, 659, 662, 665, 668, 671, 674, 677, 680, 683, 686, 689, 692, 695, 698, 701, 704, 707, 710, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1001, 1024, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1083, 1086, 1089, 1095, 1104, 1110, 1113, 1117, 1121, 1124, 1127], "doe": [13, 25, 456, 457, 458, 620, 623, 626, 629, 632, 635, 638, 641, 644, 647, 650, 653, 656, 659, 662, 665, 668, 671, 674, 677, 680, 683, 686, 689, 692, 695, 698, 701, 704, 707, 710, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1083, 1095, 1098, 1101, 1110, 1113, 1117, 1121, 1124, 1127, 1139, 1145, 1151, 1157, 1159, 1181, 1184, 1186, 1192], "modifi": [13, 25, 629, 635, 638, 641, 644, 647, 650, 653, 656, 659, 662, 674, 680, 686, 689, 692, 695, 698, 701, 704, 707, 710, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 962, 967, 973, 974, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1083, 1086, 1089, 1095, 1104, 1110, 1113, 1117, 1121, 1124, 1127, 1166, 1168, 1183, 1184, 1201], "initop": [13, 25, 1172, 1185], "is_initi": [13, 25], "whether": [13, 25, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 136, 137, 138, 139, 140, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 212, 214, 216, 218, 223, 224, 225, 226, 227, 235, 237, 239, 241, 246, 248, 250, 259, 261, 264, 266, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 304, 307, 308, 309, 311, 313, 314, 315, 317, 319, 321, 322, 323, 325, 327, 328, 329, 331, 333, 334, 336, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 360, 362, 364, 367, 370, 372, 375, 376, 377, 379, 381, 382, 383, 384, 442, 443, 456, 457, 458, 460, 462, 463, 464, 465, 466, 467, 468, 469, 492, 542, 545, 546, 549, 571, 629, 632, 635, 638, 641, 644, 647, 650, 653, 659, 662, 674, 683, 686, 689, 692, 695, 698, 701, 704, 710, 722, 730, 732, 733, 752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 973, 974, 982, 983, 987, 996, 1001, 1004, 1009, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1083, 1086, 1089, 1095, 1104, 1110, 1113, 1114, 1117, 1121, 1124, 1127, 1185, 1190, 1191, 1197, 1198, 1200, 1201, 1202], "ha": [13, 25, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 505, 533, 534, 535, 536, 537, 538, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 586, 588, 589, 629, 632, 635, 638, 641, 644, 647, 650, 653, 656, 659, 662, 674, 683, 686, 689, 692, 698, 701, 704, 710, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1083, 1086, 1089, 1095, 1104, 1110, 1113, 1117, 1118, 1121, 1124, 1127, 1137, 1138, 1147, 1149, 1150, 1155, 1156, 1166, 1178, 1181, 1193, 1197, 1198, 1200, 1201, 1202, 1203], "been": [13, 25, 629, 635, 638, 641, 647, 650, 653, 659, 662, 674, 686, 689, 692, 698, 701, 704, 710, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1083, 1086, 1089, 1095, 1104, 1110, 1113, 1117, 1121, 1124, 1127, 1183, 1184, 1185, 1186, 1192, 1197, 1200, 1202], "condit": [13, 25, 1186], "out": [13, 25, 30, 34, 42, 46, 50, 55, 58, 60, 63, 65, 69, 72, 75, 78, 81, 84, 87, 90, 98, 100, 103, 106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 212, 214, 216, 218, 220, 223, 224, 225, 227, 229, 230, 231, 232, 235, 237, 239, 241, 246, 248, 250, 259, 261, 264, 266, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 304, 307, 308, 309, 311, 313, 314, 315, 317, 319, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 360, 362, 364, 367, 370, 372, 375, 376, 377, 379, 381, 382, 383, 384, 387, 388, 389, 390, 391, 424, 425, 426, 428, 429, 430, 431, 433, 434, 435, 437, 438, 580, 581, 592, 595, 598, 601, 604, 607, 610, 613, 616, 620, 623, 626, 629, 632, 635, 638, 641, 644, 647, 650, 653, 656, 659, 662, 665, 668, 671, 674, 677, 680, 683, 686, 689, 692, 695, 698, 701, 704, 707, 710, 721, 722, 725, 726, 727, 728, 729, 730, 732, 735, 736, 737, 738, 740, 742, 744, 745, 746, 747, 748, 752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 785, 787, 788, 789, 791, 792, 793, 794, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 883, 886, 889, 892, 895, 898, 901, 904, 907, 918, 920, 923, 925, 928, 930, 932, 933, 934, 935, 937, 939, 941, 943, 946, 948, 951, 953, 955, 957, 959, 962, 964, 967, 969, 973, 974, 975, 976, 977, 978, 981, 983, 987, 996, 1001, 1004, 1009, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1064, 1067, 1070, 1073, 1076, 1079, 1083, 1086, 1089, 1095, 1104, 1110, 1113, 1117, 1121, 1124, 1127, 1171, 1172, 1174, 1175, 1176, 1178, 1181, 1183, 1184, 1185, 1190, 1192, 1193, 1195, 1197, 1198, 1199, 1200, 1201, 1202], "true": [13, 25, 59, 60, 98, 102, 103, 214, 235, 237, 239, 241, 246, 248, 250, 259, 261, 264, 266, 302, 304, 319, 362, 364, 367, 370, 372, 604, 607, 629, 632, 635, 638, 641, 644, 647, 650, 653, 659, 662, 674, 683, 686, 689, 692, 695, 698, 701, 704, 710, 722, 733, 742, 745, 752, 755, 758, 761, 764, 767, 773, 776, 779, 784, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 973, 974, 983, 987, 996, 1001, 1004, 1009, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1083, 1086, 1089, 1095, 1104, 1110, 1113, 1117, 1121, 1124, 1127, 1177, 1180, 1181, 1185, 1188, 1189, 1190, 1191, 1195, 1200], "fals": [13, 25, 214, 261, 319, 367, 604, 607, 629, 632, 635, 638, 641, 644, 647, 650, 653, 659, 662, 674, 683, 686, 689, 692, 695, 698, 701, 704, 710, 730, 745, 764, 767, 784, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 1001, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1083, 1086, 1089, 1095, 1104, 1110, 1113, 1117, 1121, 1124, 1127, 1177, 1178, 1179, 1180, 1181, 1183, 1184, 1185, 1186, 1193, 1198, 1200, 1201, 1202], "boolean": [13, 25, 742, 752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 1086, 1089, 1104, 1193], "mateop": [13, 25, 1174, 1185], "mate": [13, 25, 38, 41, 42, 43, 46, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 106, 109, 112, 113, 114, 116, 118, 119, 120, 121, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 213, 214, 223, 224, 225, 227, 229, 230, 231, 232, 235, 237, 239, 241, 243, 246, 248, 252, 255, 257, 259, 261, 318, 332, 334, 394, 400, 405, 409, 418, 720, 1168, 1175, 1181, 1183, 1184, 1186, 1188, 1189, 1191, 1200, 1203], "pselop": [13, 25, 1175, 1185], "parent": [13, 25, 42, 44, 45, 46, 69, 72, 75, 78, 81, 84, 87, 90, 106, 109, 112, 113, 114, 116, 118, 119, 120, 121, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 185, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 212, 214, 216, 218, 220, 223, 224, 225, 226, 227, 229, 230, 231, 232, 235, 237, 239, 241, 243, 246, 248, 252, 255, 257, 259, 261, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 307, 308, 309, 311, 313, 314, 315, 317, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 375, 376, 377, 379, 381, 382, 383, 384, 629, 632, 730, 764, 767, 770, 784, 797, 800, 803, 809, 812, 814, 817, 819, 825, 827, 829, 831, 833, 836, 840, 843, 852, 855, 857, 860, 868, 870, 872, 874, 876, 879, 918, 923, 928, 930, 932, 933, 934, 935, 937, 939, 941, 946, 957, 962, 967, 1035, 1038, 1041, 1168, 1171, 1174, 1179, 1181, 1183, 1184, 1186, 1188, 1189, 1191, 1193, 1202, 1203], "select": [13, 22, 24, 25, 42, 44, 45, 46, 48, 49, 50, 69, 72, 81, 84, 87, 90, 93, 94, 95, 104, 105, 106, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 147, 148, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 202, 203, 205, 206, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 242, 243, 245, 246, 247, 249, 250, 251, 254, 255, 256, 257, 258, 259, 260, 262, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 300, 304, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 350, 352, 353, 354, 355, 356, 357, 358, 360, 364, 367, 372, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 394, 397, 400, 403, 405, 409, 412, 414, 415, 418, 421, 424, 425, 620, 623, 626, 629, 632, 635, 638, 641, 644, 647, 650, 653, 656, 659, 662, 665, 668, 671, 674, 677, 680, 683, 686, 689, 692, 695, 698, 701, 704, 707, 710, 722, 730, 752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 917, 918, 922, 923, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 945, 946, 952, 953, 956, 957, 961, 962, 966, 967, 968, 969, 987, 996, 1004, 1009, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1083, 1086, 1089, 1095, 1104, 1110, 1113, 1117, 1121, 1124, 1127, 1168, 1171, 1174, 1190, 1203], "reset": [13, 25, 38, 629, 635, 638, 641, 644, 647, 650, 653, 656, 659, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 1035, 1038, 1041, 1048, 1051, 1054, 1057, 1060, 1083, 1110, 1113, 1185], "back": [13, 25, 1032, 1035, 1038, 1041], "sselop": [13, 25, 1176, 1185], "survivor": [13, 25, 48, 49, 50, 1168, 1183, 1184, 1203], "start_bval": [13, 25], "start_geno": [13, 25], "start_genom": [13, 25], "start_gmod": [13, 25], "start_pheno": [13, 25], "breedingprogram": [14, 25], "emigr": [15, 16], "immigr": [16, 21, 22], "protocol": [16, 22, 52, 53, 54, 55, 61, 65, 67, 68, 69, 71, 72, 74, 75, 77, 78, 80, 81, 83, 84, 86, 87, 89, 90, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 108, 109, 111, 115, 117, 118, 119, 120, 121, 122, 123, 129, 135, 141, 144, 145, 147, 148, 151, 157, 158, 160, 166, 172, 175, 181, 187, 190, 196, 197, 199, 200, 202, 203, 205, 206, 208, 209, 211, 213, 214, 215, 216, 217, 218, 219, 220, 222, 228, 262, 320, 326, 1188, 1189, 1191], "differ": [16, 22, 214, 216, 218, 334, 337, 604, 629, 635, 638, 641, 644, 647, 650, 653, 656, 659, 662, 674, 680, 686, 689, 692, 695, 698, 701, 704, 707, 710, 752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 783, 784, 785, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1083, 1086, 1089, 1095, 1104, 1110, 1113, 1117, 1121, 1124, 1127, 1168, 1181, 1186, 1188, 1189, 1191, 1192, 1197], "bnode": [16, 22], "A": [16, 22, 30, 34, 42, 46, 50, 55, 58, 60, 63, 65, 69, 72, 75, 78, 81, 84, 87, 90, 98, 100, 103, 106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 212, 214, 216, 218, 220, 223, 224, 225, 227, 229, 230, 231, 232, 235, 237, 239, 241, 243, 246, 248, 250, 255, 257, 259, 261, 264, 266, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 304, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 319, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 360, 362, 364, 367, 370, 372, 375, 376, 377, 379, 381, 382, 383, 384, 390, 397, 403, 412, 421, 424, 425, 426, 428, 429, 430, 431, 433, 434, 435, 437, 438, 527, 540, 541, 558, 559, 560, 562, 564, 567, 569, 571, 572, 577, 578, 579, 582, 583, 584, 589, 604, 607, 620, 623, 626, 629, 632, 635, 638, 641, 644, 647, 650, 653, 656, 659, 662, 665, 668, 671, 674, 677, 680, 683, 686, 689, 692, 695, 698, 701, 704, 707, 710, 717, 719, 720, 722, 725, 726, 730, 736, 737, 742, 746, 747, 752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 883, 886, 889, 892, 895, 898, 901, 904, 907, 910, 911, 912, 913, 918, 920, 923, 925, 928, 930, 932, 933, 934, 935, 937, 939, 941, 943, 946, 948, 951, 953, 955, 957, 959, 962, 964, 967, 969, 973, 974, 979, 980, 983, 987, 988, 989, 992, 993, 994, 996, 997, 998, 1001, 1004, 1005, 1006, 1009, 1010, 1011, 1015, 1018, 1021, 1024, 1027, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1064, 1067, 1070, 1073, 1076, 1079, 1083, 1086, 1089, 1092, 1095, 1098, 1101, 1104, 1110, 1113, 1117, 1118, 1121, 1124, 1127, 1132, 1133, 1134, 1135, 1142, 1160, 1166, 1171, 1172, 1174, 1175, 1176, 1178, 1179, 1180, 1181, 1183, 1184, 1190, 1192, 1193, 1195, 1197, 1198, 1201, 1202], "add": [16, 214, 216, 218, 620, 623, 626, 629, 632, 635, 638, 641, 644, 647, 650, 653, 656, 659, 662, 665, 668, 671, 674, 677, 680, 683, 686, 689, 692, 695, 698, 701, 704, 707, 710, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1083, 1095, 1110, 1113, 1117, 1121, 1124, 1127, 1180, 1184, 1185, 1186, 1192], "dictionari": [16, 22, 30, 34, 38, 42, 46, 50, 55, 58, 60, 63, 65, 69, 72, 75, 78, 81, 84, 87, 90, 98, 100, 103, 106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 212, 214, 216, 218, 220, 223, 224, 225, 227, 229, 230, 231, 232, 264, 266, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 304, 307, 308, 309, 311, 313, 314, 315, 317, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 362, 364, 370, 372, 375, 376, 377, 379, 381, 382, 383, 384, 572, 573, 574, 575, 576, 592, 598, 612, 613, 620, 623, 626, 629, 632, 635, 638, 641, 644, 647, 650, 653, 656, 659, 662, 665, 668, 671, 674, 677, 680, 683, 686, 689, 692, 695, 698, 701, 704, 707, 710, 733, 752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 785, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 962, 967, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1083, 1086, 1089, 1095, 1104, 1110, 1113, 1117, 1121, 1124, 1127, 1171, 1172, 1173, 1174, 1175, 1176, 1183, 1184, 1186], "ad": [16, 98, 622, 1180, 1192, 1200], "emigrationoper": 17, "germplasmbank": 20, "from": [22, 55, 60, 69, 72, 75, 78, 81, 84, 87, 90, 106, 109, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 142, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 173, 174, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 188, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 212, 214, 216, 218, 220, 223, 224, 225, 226, 227, 229, 230, 231, 232, 234, 235, 237, 238, 239, 241, 243, 245, 246, 248, 250, 252, 255, 257, 258, 259, 261, 264, 266, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 304, 307, 308, 309, 311, 313, 314, 315, 316, 317, 319, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 360, 362, 364, 367, 370, 372, 375, 376, 377, 379, 381, 382, 383, 384, 397, 403, 412, 421, 495, 592, 595, 598, 601, 604, 607, 610, 613, 616, 620, 622, 623, 626, 629, 632, 635, 638, 641, 644, 647, 650, 653, 656, 659, 662, 665, 668, 671, 674, 677, 680, 683, 686, 689, 692, 695, 698, 701, 704, 707, 710, 713, 716, 717, 721, 722, 730, 737, 752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 786, 789, 794, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 883, 886, 889, 892, 895, 898, 901, 904, 907, 910, 911, 912, 913, 914, 918, 920, 923, 925, 928, 930, 932, 933, 934, 935, 937, 939, 941, 943, 946, 948, 951, 953, 955, 957, 959, 962, 964, 967, 969, 973, 974, 975, 976, 977, 978, 980, 981, 982, 987, 996, 1001, 1004, 1009, 1015, 1018, 1021, 1024, 1027, 1032, 1035, 1037, 1038, 1040, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1064, 1067, 1070, 1073, 1076, 1079, 1083, 1086, 1089, 1095, 1104, 1110, 1113, 1117, 1121, 1124, 1127, 1133, 1166, 1168, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1179, 1180, 1181, 1182, 1194, 1195, 1196, 1199], "pull": 22, "kwindiv": 22, "immigrationoper": 23, "implement": [24, 25, 58, 59, 60, 62, 63, 68, 69, 71, 72, 77, 78, 80, 81, 83, 84, 86, 87, 89, 90, 97, 98, 102, 103, 117, 129, 158, 172, 175, 181, 187, 190, 203, 211, 213, 214, 215, 216, 217, 218, 222, 228, 265, 268, 274, 278, 280, 286, 292, 298, 299, 303, 306, 312, 320, 326, 332, 333, 335, 336, 344, 348, 350, 351, 353, 363, 366, 371, 374, 380, 439, 619, 620, 622, 623, 625, 626, 628, 629, 631, 632, 634, 635, 637, 640, 641, 643, 644, 646, 647, 649, 650, 652, 653, 655, 656, 658, 659, 716, 766, 769, 802, 803, 805, 806, 808, 809, 811, 812, 813, 814, 816, 817, 818, 819, 821, 822, 824, 825, 826, 827, 828, 829, 830, 831, 845, 846, 848, 849, 851, 852, 854, 855, 856, 857, 859, 860, 861, 862, 864, 865, 867, 868, 869, 870, 871, 872, 873, 874, 881, 917, 918, 922, 923, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 945, 946, 950, 952, 954, 956, 957, 961, 962, 966, 967, 968, 969, 982, 986, 987, 995, 996, 1000, 1001, 1003, 1004, 1008, 1009, 1014, 1017, 1020, 1023, 1024, 1026, 1034, 1037, 1040, 1047, 1048, 1050, 1053, 1054, 1056, 1057, 1059, 1060, 1062, 1082, 1085, 1086, 1097, 1098, 1100, 1101, 1103, 1104, 1109, 1110, 1112, 1113, 1166, 1167, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1188, 1189, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1201, 1202], "recurr": [24, 25, 81, 84, 825, 827, 868, 870, 1183, 1184, 1185, 1186], "veri": [25, 781, 1186, 1192, 1194], "highli": 25, "modular": [25, 1166, 1170], "facilit": [25, 1168], "rapid": 25, "prototyp": [25, 784, 913], "concret": [25, 58, 60, 63, 69, 72, 78, 81, 84, 87, 90, 103, 112, 113, 114, 116, 118, 119, 120, 122, 130, 131, 132, 134, 136, 137, 138, 140, 143, 152, 153, 154, 156, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 620, 623, 626, 629, 632, 635, 641, 644, 647, 650, 653, 656, 659, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 1038, 1041, 1048, 1054, 1057, 1060, 1083, 1086, 1098, 1101, 1104, 1110, 1113, 1133, 1138, 1144, 1150, 1156, 1166, 1177, 1178, 1179, 1180, 1193, 1194, 1196, 1197, 1198, 1199, 1200, 1201, 1202], "initializationoper": [25, 35, 38, 1172, 1173, 1185], "parentselectionoper": [25, 38, 47, 1173, 1175, 1185], "matingoper": [25, 38, 43, 1173, 1174, 1185], "evaluationoper": [25, 31, 38, 1171, 1173, 1185], "survivorselectionoper": [25, 38, 51, 1173, 1176, 1185], "verbos": [25, 1185], "loginit": 25, "If": [25, 30, 34, 42, 46, 50, 55, 58, 60, 63, 65, 69, 72, 75, 78, 81, 84, 87, 90, 98, 100, 103, 106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 212, 214, 216, 218, 220, 223, 224, 225, 227, 229, 230, 231, 232, 264, 266, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 304, 307, 308, 309, 311, 313, 314, 315, 317, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 362, 364, 370, 372, 375, 376, 377, 379, 381, 382, 383, 384, 397, 403, 412, 421, 442, 443, 456, 457, 458, 572, 601, 604, 607, 620, 623, 626, 629, 632, 635, 638, 641, 644, 647, 650, 653, 656, 659, 662, 665, 668, 671, 674, 677, 680, 683, 686, 689, 692, 695, 698, 701, 704, 707, 710, 713, 716, 717, 719, 720, 721, 722, 730, 733, 742, 752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 785, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 911, 913, 978, 987, 993, 994, 996, 1004, 1009, 1015, 1018, 1021, 1027, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1083, 1086, 1089, 1095, 1104, 1110, 1113, 1117, 1121, 1124, 1127, 1166, 1169, 1171, 1172, 1174, 1175, 1176, 1181, 1183, 1186, 1193, 1197, 1198, 1200, 1202], "mai": [25, 30, 34, 42, 46, 50, 55, 58, 60, 63, 65, 69, 72, 75, 78, 81, 84, 87, 90, 98, 100, 103, 106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 212, 214, 216, 218, 220, 223, 224, 225, 227, 229, 230, 231, 232, 604, 607, 779, 1086, 1089, 1104, 1133, 1168, 1169, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1186, 1188, 1189, 1190, 1191, 1192, 1193, 1195, 1197, 1198, 1199, 1200, 1201, 1202], "affect": [25, 235, 237, 239, 241, 246, 248, 255, 257, 259, 261, 1193, 1197, 1198, 1200, 1201], "util": [25, 93, 94, 95, 439, 620, 623, 626, 713, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 740, 741, 742, 743, 744, 745, 746, 747, 748, 910, 911, 912, 913, 914, 1107, 1168, 1183, 1184, 1188, 1189, 1191, 1193, 1195, 1200], "bool": [25, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 136, 137, 138, 139, 140, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 214, 223, 224, 225, 226, 227, 235, 237, 239, 241, 246, 248, 250, 259, 261, 264, 266, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 304, 307, 308, 309, 311, 313, 314, 315, 317, 319, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 360, 362, 364, 367, 370, 372, 375, 376, 377, 379, 381, 382, 383, 384, 471, 472, 473, 506, 604, 607, 629, 632, 635, 638, 641, 644, 647, 650, 653, 659, 662, 674, 683, 686, 689, 692, 695, 698, 701, 704, 710, 722, 730, 732, 733, 742, 745, 752, 755, 758, 761, 764, 767, 773, 776, 779, 784, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 973, 974, 982, 983, 987, 996, 1001, 1004, 1009, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1083, 1086, 1089, 1095, 1104, 1110, 1113, 1117, 1121, 1124, 1127, 1181], "log": [25, 38, 39, 793, 1185, 1186], "state": [25, 992, 993, 994, 1053, 1054, 1168, 1185, 1190, 1191], "befor": [25, 72, 84, 87, 90, 214, 223, 224, 225, 226, 227, 620, 623, 626, 629, 632, 635, 638, 641, 644, 647, 650, 653, 656, 659, 662, 665, 668, 671, 674, 677, 680, 683, 686, 689, 692, 695, 698, 701, 704, 707, 710, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 883, 886, 889, 892, 895, 898, 901, 904, 907, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1083, 1095, 1110, 1113, 1117, 1121, 1124, 1127, 1169, 1183, 1184, 1186, 1193, 1197, 1198, 1200, 1201, 1202], "main": [25, 918, 923, 928, 930, 932, 933, 934, 935, 937, 939, 941, 946, 957, 962, 967, 1197, 1198, 1203], "loop": [25, 1185, 1191], "rep": [25, 38, 1173, 1185, 1186], "recurrentselectionbreedingprogram": [26, 1185], "op": [30, 31, 34, 35, 38, 39, 42, 43, 46, 47, 50, 51, 1185], "eval": [30, 31, 1185], "an": [30, 34, 38, 42, 46, 50, 55, 58, 60, 69, 72, 75, 78, 84, 87, 90, 98, 106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 212, 214, 216, 218, 220, 223, 224, 225, 227, 229, 230, 231, 232, 235, 237, 239, 241, 243, 246, 248, 252, 255, 257, 259, 261, 264, 266, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 304, 307, 308, 309, 311, 313, 314, 315, 316, 317, 319, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 362, 364, 367, 370, 372, 375, 376, 377, 379, 381, 382, 383, 384, 387, 388, 389, 390, 391, 428, 429, 430, 432, 433, 434, 435, 442, 443, 447, 456, 457, 458, 460, 462, 463, 464, 465, 466, 467, 468, 469, 513, 514, 546, 550, 555, 571, 572, 585, 586, 588, 592, 595, 598, 601, 604, 607, 610, 613, 616, 620, 623, 626, 629, 632, 635, 638, 641, 644, 647, 650, 653, 656, 659, 662, 665, 668, 671, 674, 676, 677, 680, 683, 686, 689, 692, 695, 698, 701, 704, 707, 710, 713, 719, 722, 725, 726, 733, 740, 742, 744, 752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 917, 918, 920, 922, 923, 925, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 943, 945, 946, 948, 951, 952, 953, 955, 956, 957, 959, 961, 962, 964, 966, 967, 969, 973, 974, 976, 977, 978, 981, 987, 996, 1001, 1004, 1009, 1032, 1035, 1038, 1041, 1045, 1048, 1050, 1051, 1054, 1057, 1060, 1083, 1086, 1089, 1092, 1095, 1098, 1101, 1104, 1107, 1110, 1113, 1117, 1121, 1124, 1127, 1132, 1133, 1134, 1135, 1137, 1138, 1141, 1143, 1144, 1147, 1149, 1150, 1155, 1156, 1159, 1160, 1166, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1185, 1186, 1188, 1189, 1190, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202], "miscout": [30, 34, 42, 46, 50, 55, 58, 60, 63, 65, 69, 72, 75, 78, 81, 84, 87, 90, 98, 100, 103, 106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 212, 214, 216, 218, 220, 223, 224, 225, 227, 229, 230, 231, 232, 918, 920, 923, 925, 928, 930, 932, 933, 934, 935, 937, 939, 941, 943, 946, 948, 951, 953, 955, 957, 959, 1171, 1172, 1174, 1175, 1176, 1185], "deadlin": [30, 38, 42, 46, 50, 106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 212, 214, 216, 218, 220, 223, 224, 225, 227, 229, 230, 231, 232, 1171, 1173, 1174, 1175, 1176], "pointer": [30, 34, 42, 46, 50, 55, 58, 60, 63, 65, 69, 72, 75, 78, 81, 84, 87, 90, 98, 100, 103, 106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 212, 214, 216, 218, 220, 223, 224, 225, 227, 229, 230, 231, 232, 620, 623, 626, 629, 632, 635, 638, 641, 644, 647, 650, 653, 656, 659, 662, 665, 668, 671, 674, 677, 680, 683, 686, 689, 692, 695, 698, 701, 704, 707, 710, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1083, 1095, 1110, 1113, 1117, 1121, 1124, 1127, 1171, 1172, 1174, 1175, 1176, 1193, 1197, 1198, 1201, 1202], "miscellan": [30, 34, 42, 46, 50, 55, 58, 60, 63, 65, 69, 72, 75, 78, 81, 84, 87, 90, 98, 100, 103, 106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 212, 214, 216, 218, 220, 223, 224, 225, 227, 229, 230, 231, 232, 439, 743, 752, 755, 758, 761, 764, 767, 784, 918, 920, 923, 925, 928, 930, 932, 933, 934, 935, 937, 939, 941, 943, 946, 948, 951, 953, 955, 957, 959, 962, 967, 1106, 1169, 1171, 1172, 1174, 1175, 1176, 1177, 1180, 1181, 1183, 1184, 1185, 1186, 1188, 1189, 1191, 1192, 1193], "user": [30, 34, 42, 46, 50, 55, 58, 60, 63, 65, 69, 72, 75, 78, 81, 84, 87, 90, 98, 100, 103, 106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 212, 214, 216, 218, 220, 223, 224, 225, 227, 229, 230, 231, 232, 1001, 1024, 1035, 1166, 1168, 1169, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1180, 1181, 1184, 1188, 1189, 1191, 1195, 1200], "output": [30, 34, 42, 46, 50, 55, 58, 60, 63, 65, 69, 72, 75, 78, 81, 84, 87, 90, 98, 100, 103, 106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 212, 214, 216, 218, 220, 223, 224, 225, 227, 229, 230, 231, 232, 264, 266, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 304, 307, 308, 309, 311, 313, 314, 315, 317, 319, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 360, 362, 364, 367, 370, 372, 375, 376, 377, 379, 381, 382, 383, 384, 385, 427, 439, 590, 592, 595, 598, 601, 604, 607, 610, 613, 616, 626, 629, 635, 638, 641, 644, 647, 650, 653, 656, 659, 662, 665, 668, 671, 674, 677, 680, 683, 686, 689, 692, 695, 698, 701, 704, 707, 710, 721, 722, 735, 748, 752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 785, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 918, 920, 923, 925, 928, 930, 932, 933, 934, 935, 937, 939, 941, 943, 946, 948, 951, 953, 955, 957, 959, 962, 964, 967, 969, 982, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1083, 1086, 1089, 1095, 1104, 1110, 1113, 1117, 1121, 1124, 1127, 1168, 1171, 1172, 1174, 1175, 1176, 1178, 1181, 1183, 1184, 1186, 1191, 1195], "overwrit": [30, 34, 42, 46, 50, 55, 58, 60, 63, 65, 69, 72, 75, 78, 81, 84, 87, 90, 98, 100, 103, 106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 212, 214, 216, 218, 220, 223, 224, 225, 227, 229, 230, 231, 232, 629, 635, 638, 641, 644, 647, 650, 653, 656, 659, 733, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 1035, 1038, 1041, 1048, 1051, 1054, 1057, 1060, 1083, 1110, 1113, 1171, 1172, 1174, 1175, 1176], "previous": [30, 34, 42, 46, 50, 55, 58, 60, 63, 65, 69, 72, 75, 78, 81, 84, 87, 90, 98, 100, 103, 106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 212, 214, 216, 218, 220, 223, 224, 225, 227, 229, 230, 231, 232, 1171, 1172, 1174, 1175, 1176, 1199, 1202], "field": [30, 34, 42, 46, 50, 55, 58, 60, 63, 65, 69, 72, 75, 78, 81, 84, 87, 90, 98, 100, 103, 106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 212, 214, 216, 218, 220, 223, 224, 225, 227, 229, 230, 231, 232, 604, 607, 629, 635, 638, 641, 644, 647, 650, 653, 656, 659, 733, 764, 767, 784, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 1035, 1038, 1041, 1048, 1051, 1054, 1057, 1060, 1083, 1086, 1110, 1113, 1168, 1171, 1172, 1174, 1175, 1176, 1183, 1192], "calcul": [30, 34, 42, 46, 50, 53, 54, 55, 58, 60, 63, 65, 69, 72, 75, 78, 81, 84, 87, 90, 98, 100, 103, 106, 109, 112, 113, 114, 116, 118, 119, 120, 121, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 212, 214, 216, 218, 220, 223, 224, 225, 226, 227, 229, 230, 231, 232, 235, 237, 239, 241, 246, 248, 250, 259, 261, 264, 266, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 304, 307, 308, 309, 311, 313, 314, 315, 317, 319, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 360, 362, 364, 367, 370, 372, 375, 376, 377, 379, 381, 382, 383, 384, 390, 433, 550, 555, 556, 677, 734, 736, 737, 752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 786, 787, 788, 789, 790, 791, 797, 803, 808, 809, 811, 812, 813, 814, 816, 817, 819, 824, 825, 826, 827, 828, 829, 830, 831, 833, 840, 846, 851, 852, 854, 855, 856, 857, 859, 860, 862, 867, 868, 869, 870, 871, 872, 873, 874, 876, 883, 886, 889, 892, 895, 898, 901, 904, 907, 910, 911, 912, 913, 914, 987, 992, 993, 994, 996, 1001, 1004, 1009, 1032, 1035, 1038, 1041, 1043, 1045, 1048, 1051, 1054, 1057, 1060, 1064, 1067, 1070, 1073, 1076, 1079, 1086, 1089, 1092, 1098, 1101, 1104, 1168, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1181, 1183, 1184, 1185, 1186, 1188, 1189, 1191, 1195, 1197, 1201, 1202], "store": [30, 34, 42, 46, 50, 55, 58, 60, 63, 65, 69, 72, 75, 78, 81, 84, 87, 90, 98, 100, 103, 106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 212, 214, 216, 218, 220, 223, 224, 225, 227, 229, 230, 231, 232, 334, 337, 601, 604, 607, 620, 623, 626, 629, 632, 635, 638, 641, 644, 647, 650, 653, 656, 659, 662, 665, 668, 671, 674, 677, 680, 683, 686, 689, 692, 695, 698, 701, 704, 707, 710, 752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 796, 797, 799, 800, 802, 803, 805, 806, 808, 809, 811, 812, 813, 814, 816, 817, 818, 819, 821, 822, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 836, 839, 840, 842, 843, 845, 846, 848, 849, 851, 852, 854, 855, 856, 857, 859, 860, 861, 862, 864, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 878, 879, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1083, 1086, 1095, 1104, 1110, 1113, 1117, 1121, 1124, 1127, 1168, 1171, 1172, 1173, 1174, 1175, 1176, 1181, 1183, 1184, 1193, 1196, 1197, 1198, 1201, 1202], "tupl": [30, 34, 42, 46, 50, 106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 148, 152, 153, 154, 156, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 209, 212, 214, 216, 218, 220, 223, 225, 229, 230, 231, 232, 264, 266, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 304, 307, 308, 309, 311, 313, 314, 315, 317, 319, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 360, 362, 364, 367, 370, 372, 375, 376, 377, 379, 381, 382, 383, 384, 430, 432, 434, 435, 450, 454, 516, 523, 525, 528, 541, 553, 560, 561, 563, 565, 568, 570, 572, 588, 589, 620, 623, 626, 629, 632, 635, 638, 641, 644, 647, 650, 653, 656, 659, 662, 665, 668, 671, 674, 677, 680, 683, 686, 689, 692, 695, 698, 701, 704, 707, 710, 719, 721, 722, 725, 726, 736, 789, 794, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 962, 964, 967, 969, 987, 996, 1001, 1004, 1009, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1083, 1086, 1089, 1095, 1104, 1110, 1113, 1117, 1121, 1124, 1127, 1160, 1171, 1172, 1173, 1174, 1175, 1176, 1190, 1191, 1195], "length": [30, 34, 42, 46, 50, 106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 214, 216, 218, 223, 224, 225, 227, 229, 230, 231, 232, 264, 266, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 304, 307, 308, 309, 311, 313, 314, 315, 317, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 362, 364, 370, 372, 375, 376, 377, 379, 381, 382, 383, 384, 397, 403, 412, 421, 533, 534, 535, 536, 537, 538, 547, 548, 549, 575, 576, 586, 587, 589, 629, 632, 635, 638, 641, 644, 647, 650, 653, 659, 674, 683, 686, 689, 692, 695, 698, 701, 704, 710, 727, 728, 729, 730, 736, 737, 740, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 918, 923, 928, 930, 932, 933, 934, 935, 937, 939, 941, 946, 957, 962, 964, 967, 969, 987, 996, 1004, 1009, 1015, 1018, 1021, 1027, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1083, 1086, 1089, 1095, 1104, 1110, 1113, 1117, 1121, 1124, 1127, 1171, 1172, 1174, 1175, 1176, 1183, 1184, 1185, 1195, 1197, 1198, 1201, 1202], "5": [30, 34, 42, 50, 69, 72, 81, 84, 87, 90, 214, 216, 218, 334, 337, 809, 814, 825, 829, 852, 857, 868, 872, 962, 967, 972, 1092, 1098, 1101, 1169, 1171, 1172, 1174, 1176, 1179, 1182, 1183, 1184, 1185, 1191, 1193, 1195, 1196, 1197, 1198, 1199, 1201, 1202], "where": [30, 34, 42, 46, 50, 69, 72, 78, 81, 84, 87, 90, 106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 212, 214, 216, 218, 220, 223, 224, 225, 227, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 240, 241, 245, 246, 247, 248, 255, 257, 258, 259, 260, 261, 264, 266, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 304, 307, 308, 309, 310, 311, 313, 314, 315, 317, 319, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 360, 362, 364, 367, 370, 372, 375, 376, 377, 379, 381, 382, 383, 384, 390, 431, 433, 629, 632, 635, 638, 641, 644, 647, 650, 653, 656, 659, 683, 721, 735, 736, 737, 738, 742, 752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 785, 789, 794, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 951, 953, 962, 967, 987, 996, 1001, 1004, 1009, 1032, 1035, 1038, 1041, 1048, 1051, 1054, 1057, 1060, 1083, 1086, 1089, 1104, 1110, 1113, 1117, 1121, 1124, 1127, 1169, 1171, 1172, 1174, 1175, 1176, 1181, 1183, 1184, 1185, 1186, 1190, 1191, 1192, 1195, 1200, 1202], "init": [34, 35, 1185, 1195], "about": [38, 214, 809, 814, 825, 829, 852, 857, 868, 872, 1169, 1181, 1200, 1201], "log_evalu": [38, 1173, 1185], "record": [38, 1168, 1173, 1185, 1186], "directli": [38, 1173, 1191], "after": [38, 214, 216, 218, 264, 266, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 304, 307, 308, 309, 311, 313, 314, 315, 317, 319, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 360, 362, 364, 367, 370, 372, 375, 376, 377, 379, 381, 382, 383, 384, 982, 987, 996, 1001, 1004, 1009, 1045, 1048, 1051, 1054, 1057, 1060, 1086, 1089, 1104, 1168, 1180, 1181, 1183, 1184, 1185, 1186, 1188, 1189, 1190, 1191, 1198, 1200], "call": [38, 220, 264, 266, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 304, 307, 308, 309, 311, 313, 314, 315, 317, 319, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 360, 362, 364, 367, 370, 372, 375, 376, 377, 379, 381, 382, 383, 384, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 987, 996, 1001, 1004, 1009, 1024, 1173, 1193, 1197, 1198], "log_initi": [38, 1173, 1185], "log_mat": [38, 1173, 1185], "log_pselect": [38, 1173, 1185], "mcfg": [38, 42, 46, 1173, 1174, 1175, 1185], "pselect": [38, 46, 1173, 1175, 1185], "configur": [38, 42, 46, 69, 72, 75, 78, 84, 87, 90, 93, 94, 95, 106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 212, 214, 216, 218, 220, 223, 224, 225, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 720, 1168, 1173, 1174, 1175, 1179, 1181, 1183, 1184, 1185, 1186], "log_sselect": [38, 1173, 1185], "sselect": [38, 50, 1173, 1176, 1185], "intern": [38, 1086, 1089, 1104, 1173, 1181, 1192, 1195, 1198], "filenam": [38, 592, 595, 601, 604, 607, 620, 623, 626, 629, 632, 635, 638, 641, 644, 647, 650, 653, 656, 659, 662, 665, 668, 671, 674, 677, 680, 683, 686, 689, 692, 695, 698, 701, 704, 707, 710, 752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1083, 1086, 1089, 1095, 1104, 1110, 1113, 1117, 1121, 1124, 1127, 1173, 1185, 1191, 1192, 1193, 1197, 1198], "file": [38, 455, 457, 460, 526, 527, 528, 529, 590, 592, 595, 601, 604, 607, 620, 623, 626, 629, 632, 635, 638, 641, 644, 647, 650, 653, 656, 659, 662, 665, 668, 671, 674, 677, 680, 683, 686, 689, 692, 695, 698, 701, 704, 707, 710, 731, 732, 733, 752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1083, 1086, 1089, 1095, 1104, 1110, 1113, 1117, 1121, 1124, 1127, 1169], "psel": [46, 47, 1185], "within": [46, 50, 98, 124, 125, 126, 127, 128, 572, 604, 720, 1032, 1035, 1038, 1041, 1083, 1095, 1110, 1113, 1117, 1121, 1124, 1127, 1132, 1134, 1166, 1168, 1171, 1174, 1177, 1180, 1181, 1182, 1192, 1194, 1195, 1196, 1197, 1198, 1199, 1201, 1202], "serv": [46, 1167, 1175, 1183, 1184, 1185, 1186, 1197, 1198], "6": [46, 214, 216, 218, 334, 337, 1169, 1175, 1183, 1184, 1185], "ssel": [50, 51, 1185], "progeni": [50, 69, 72, 75, 78, 81, 84, 87, 90, 93, 94, 106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 212, 214, 216, 218, 220, 223, 224, 225, 226, 227, 229, 230, 231, 232, 235, 237, 239, 241, 243, 246, 248, 252, 255, 257, 259, 261, 334, 795, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 832, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 883, 886, 889, 892, 895, 898, 901, 904, 907, 914, 918, 923, 928, 930, 932, 933, 934, 935, 937, 939, 941, 946, 957, 962, 967, 1168, 1176, 1181, 1183, 1184, 1185, 1186, 1188, 1189, 1191, 1193, 1199], "prot": [55, 56, 58, 60, 63, 65, 66, 69, 70, 72, 73, 75, 76, 78, 79, 81, 82, 84, 85, 87, 88, 90, 91, 93, 94, 95, 98, 100, 101, 103, 106, 107, 109, 110, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 142, 143, 145, 146, 148, 149, 152, 153, 154, 155, 156, 158, 159, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 173, 174, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 188, 189, 191, 192, 193, 194, 195, 197, 198, 200, 201, 203, 204, 206, 207, 209, 210, 212, 214, 216, 218, 220, 221, 223, 224, 225, 226, 227, 229, 230, 231, 232, 235, 237, 239, 241, 243, 244, 246, 248, 250, 252, 253, 255, 257, 259, 261, 264, 266, 267, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 299, 300, 302, 304, 305, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 319, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 333, 334, 336, 337, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 351, 352, 354, 355, 356, 357, 358, 360, 362, 364, 365, 367, 368, 370, 372, 373, 375, 376, 377, 378, 379, 381, 382, 383, 384, 386, 387, 388, 389, 390, 391, 394, 395, 397, 398, 400, 401, 403, 404, 406, 407, 409, 410, 412, 413, 415, 416, 418, 419, 421, 422, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 437, 438, 1183, 1184, 1185, 1186, 1188, 1189, 1191], "bv": [55, 56, 58, 60, 1032, 1035, 1038, 1041, 1183, 1184, 1185, 1186], "estim": [55, 57, 58, 60, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 133, 136, 137, 138, 139, 140, 214, 268, 269, 270, 271, 272, 273, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 354, 355, 356, 360, 381, 382, 383, 384, 737, 749, 752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 785, 793, 796, 797, 799, 800, 802, 803, 805, 806, 808, 809, 811, 812, 813, 814, 816, 817, 818, 819, 821, 822, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 836, 839, 840, 842, 843, 845, 846, 848, 849, 851, 852, 854, 855, 856, 857, 859, 860, 861, 862, 864, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 878, 879, 883, 886, 889, 892, 895, 898, 901, 904, 907, 909, 1037, 1040, 1057, 1060, 1086, 1089, 1104, 1168, 1181, 1197, 1198, 1199, 1200, 1201, 1203], "ptobj": [55, 58, 60, 752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 1186, 1192], "gtobj": [55, 58, 60, 752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 1191, 1192], "panda": [55, 58, 60, 98, 100, 103, 106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 212, 214, 216, 218, 220, 223, 224, 225, 227, 229, 230, 231, 232, 490, 492, 557, 558, 559, 560, 561, 562, 563, 564, 565, 612, 613, 615, 616, 752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1086, 1089, 1104, 1169, 1180, 1183, 1184, 1186], "datafram": [55, 58, 60, 98, 100, 103, 106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 212, 214, 216, 218, 220, 223, 224, 225, 227, 229, 230, 231, 232, 492, 558, 559, 560, 561, 610, 613, 615, 616, 752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1086, 1089, 1104, 1169, 1180, 1183, 1184, 1186], "must": [55, 58, 60, 98, 106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 133, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 212, 214, 216, 218, 223, 224, 225, 227, 229, 230, 231, 232, 264, 266, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 304, 307, 308, 309, 311, 313, 314, 315, 317, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 362, 364, 370, 372, 375, 376, 377, 379, 381, 382, 383, 384, 397, 403, 412, 421, 431, 448, 449, 450, 451, 452, 495, 527, 528, 540, 541, 558, 559, 560, 561, 562, 563, 564, 565, 567, 568, 569, 570, 620, 623, 626, 629, 632, 635, 638, 641, 644, 647, 650, 653, 656, 659, 662, 665, 668, 671, 674, 677, 680, 683, 686, 689, 692, 695, 698, 701, 704, 707, 710, 717, 721, 733, 735, 737, 738, 752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 783, 784, 785, 787, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 987, 992, 993, 994, 996, 1001, 1004, 1009, 1015, 1018, 1021, 1024, 1027, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1083, 1086, 1089, 1092, 1095, 1098, 1101, 1104, 1110, 1113, 1117, 1121, 1124, 1127, 1132, 1133, 1134, 1135, 1137, 1138, 1149, 1150, 1155, 1156, 1166, 1169, 1171, 1172, 1173, 1174, 1175, 1176, 1186, 1190, 1195, 1200, 1201, 1202], "frame": [55, 58, 60, 752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 1169, 1191], "genotypematrix": [55, 58, 60, 63, 65, 69, 72, 81, 84, 106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 212, 214, 216, 218, 220, 223, 224, 225, 227, 229, 230, 231, 232, 620, 623, 626, 629, 632, 635, 644, 647, 650, 653, 656, 659, 752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1064, 1067, 1070, 1073, 1076, 1079, 1083, 1110, 1113, 1118, 1119, 1124, 1178, 1192, 1202], "matrix": [55, 58, 60, 63, 65, 93, 94, 95, 106, 109, 112, 113, 114, 115, 116, 118, 119, 120, 122, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 142, 143, 145, 148, 152, 153, 154, 155, 156, 158, 161, 162, 163, 165, 167, 168, 169, 170, 171, 173, 174, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 188, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 212, 214, 216, 218, 220, 223, 224, 225, 226, 227, 229, 230, 231, 232, 235, 237, 239, 241, 243, 246, 248, 250, 252, 255, 257, 259, 261, 269, 270, 271, 273, 275, 276, 277, 278, 279, 281, 282, 283, 285, 287, 288, 289, 290, 291, 293, 294, 295, 297, 299, 300, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 333, 334, 336, 337, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 351, 352, 354, 355, 356, 358, 360, 375, 376, 377, 378, 379, 381, 382, 383, 384, 394, 397, 400, 403, 406, 409, 412, 415, 418, 421, 424, 425, 426, 437, 438, 439, 546, 618, 619, 620, 622, 623, 625, 626, 628, 629, 631, 632, 634, 635, 637, 638, 640, 641, 643, 644, 647, 650, 653, 655, 656, 658, 659, 662, 666, 667, 668, 670, 671, 673, 674, 677, 680, 683, 686, 689, 692, 695, 698, 701, 704, 707, 710, 712, 724, 737, 742, 745, 752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 783, 784, 785, 786, 787, 788, 789, 790, 793, 794, 795, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 838, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 881, 883, 886, 889, 892, 895, 898, 901, 903, 904, 907, 910, 911, 912, 913, 914, 962, 967, 1015, 1018, 1021, 1024, 1027, 1030, 1031, 1032, 1034, 1035, 1037, 1038, 1040, 1041, 1044, 1045, 1047, 1048, 1050, 1051, 1053, 1054, 1056, 1057, 1059, 1060, 1062, 1063, 1064, 1066, 1067, 1069, 1070, 1072, 1073, 1075, 1076, 1078, 1079, 1083, 1086, 1089, 1092, 1095, 1098, 1101, 1104, 1108, 1110, 1113, 1116, 1117, 1120, 1121, 1123, 1124, 1126, 1127, 1169, 1177, 1178, 1179, 1180, 1181, 1184, 1185, 1188, 1189, 1196], "breedingvaluematrix": [55, 58, 60, 106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 212, 214, 216, 218, 220, 223, 224, 225, 227, 229, 230, 231, 232, 752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 1033, 1035, 1038, 1041], "breedingvalueprotocol": [56, 58, 60, 1177], "mean": [57, 58, 151, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 175, 181, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 307, 308, 309, 311, 313, 314, 315, 317, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 339, 340, 341, 343, 354, 355, 356, 358, 375, 376, 377, 379, 381, 382, 383, 384, 550, 555, 722, 752, 755, 758, 761, 764, 767, 773, 776, 779, 784, 785, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1110, 1113, 1117, 1121, 1124, 1127, 1177, 1186, 1188, 1189, 1190, 1191, 1193, 1202], "across": [57, 58, 98, 434, 435, 735, 736, 737, 738, 752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 914, 1057, 1060, 1086, 1092, 1098, 1101, 1110, 1113, 1117, 1121, 1124, 1127, 1171, 1180, 1186, 1192, 1198, 1201, 1202], "all": [57, 58, 78, 106, 109, 112, 113, 114, 115, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 214, 216, 218, 223, 224, 225, 227, 229, 230, 231, 232, 287, 288, 289, 291, 319, 334, 337, 339, 340, 341, 343, 367, 381, 382, 383, 384, 387, 389, 391, 397, 403, 412, 421, 430, 531, 532, 541, 542, 543, 561, 565, 570, 571, 573, 574, 575, 576, 604, 632, 635, 638, 641, 644, 683, 686, 689, 692, 695, 722, 752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 953, 973, 974, 987, 996, 1001, 1004, 1009, 1015, 1018, 1021, 1024, 1027, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1086, 1089, 1104, 1110, 1113, 1117, 1121, 1124, 1127, 1166, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1185, 1186, 1191, 1192, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202], "environ": [57, 58, 98, 100, 103, 752, 755, 758, 761, 764, 767, 770, 776, 784, 1169, 1177, 1180, 1186], "taxa_col": [58, 1035, 1038, 1041, 1048, 1051, 1054, 1057, 1060, 1177, 1186, 1197, 1198], "taxa_grp_col": [58, 1035, 1038, 1041, 1048, 1051, 1054, 1057, 1060, 1177, 1186, 1197, 1198], "trait_col": [58, 764, 767, 784, 809, 814, 825, 829, 831, 852, 855, 857, 860, 868, 870, 872, 874, 1035, 1038, 1041, 1177, 1186, 1193, 1197], "take": [58, 214, 216, 218, 334, 337, 387, 391, 428, 434, 435, 911, 913, 976, 977, 978, 981, 1086, 1168, 1177, 1178, 1179, 1181, 1183, 1184, 1186, 1195], "perform": [58, 63, 69, 72, 78, 81, 84, 87, 90, 93, 94, 95, 118, 119, 120, 121, 122, 212, 214, 216, 218, 220, 629, 635, 638, 641, 644, 647, 650, 653, 656, 659, 662, 674, 680, 686, 689, 692, 695, 698, 701, 704, 707, 710, 719, 721, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 911, 913, 973, 974, 975, 976, 977, 978, 979, 980, 981, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1083, 1086, 1089, 1095, 1104, 1110, 1113, 1117, 1121, 1124, 1127, 1168, 1170, 1171, 1174, 1181, 1183, 1184, 1185, 1186, 1188, 1189, 1190, 1191, 1193, 1195, 1197, 1198, 1200, 1201], "taxa": [58, 287, 288, 289, 291, 307, 308, 309, 310, 311, 381, 382, 383, 384, 626, 628, 629, 632, 634, 635, 637, 638, 640, 641, 646, 647, 649, 650, 652, 653, 673, 674, 683, 685, 686, 688, 689, 691, 692, 697, 698, 700, 701, 703, 704, 752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1110, 1113, 1117, 1118, 1121, 1124, 1127, 1177, 1178, 1179, 1180, 1181, 1183, 1184, 1185, 1186, 1190], "column": [58, 558, 559, 560, 561, 622, 629, 635, 638, 641, 644, 647, 650, 653, 656, 659, 662, 674, 677, 680, 686, 689, 692, 695, 698, 701, 704, 707, 710, 764, 767, 784, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1083, 1086, 1089, 1095, 1104, 1110, 1113, 1117, 1121, 1124, 1127, 1177, 1183, 1185, 1192, 1193, 1197, 1198, 1201], "along": [58, 214, 216, 218, 434, 435, 450, 452, 533, 534, 535, 536, 537, 538, 545, 550, 555, 556, 620, 623, 626, 629, 632, 635, 638, 641, 644, 647, 650, 653, 656, 659, 662, 665, 668, 671, 674, 676, 677, 680, 683, 686, 689, 692, 695, 698, 701, 704, 707, 710, 713, 719, 725, 726, 727, 728, 729, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1083, 1086, 1089, 1092, 1095, 1098, 1101, 1104, 1110, 1113, 1117, 1121, 1124, 1127, 1185, 1193, 1197, 1201, 1202], "group": [58, 69, 72, 78, 81, 84, 87, 90, 527, 528, 601, 620, 623, 626, 629, 632, 635, 638, 641, 644, 647, 650, 653, 656, 659, 661, 662, 665, 668, 671, 674, 677, 680, 683, 686, 689, 692, 695, 698, 701, 704, 707, 710, 733, 735, 737, 738, 752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1083, 1086, 1089, 1092, 1095, 1098, 1101, 1104, 1110, 1113, 1117, 1121, 1124, 1127, 1177, 1178, 1179, 1180, 1181, 1183, 1184, 1185, 1186, 1188, 1189, 1190, 1191, 1192, 1199], "iter": [58, 264, 266, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 304, 307, 308, 309, 311, 313, 314, 315, 317, 319, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 360, 362, 364, 367, 370, 372, 375, 376, 377, 379, 381, 382, 383, 384, 443, 522, 677, 726, 740, 783, 785, 951, 987, 996, 1001, 1004, 1009, 1185], "trait": [58, 98, 100, 103, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 142, 143, 173, 174, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 188, 189, 191, 192, 193, 194, 195, 212, 214, 216, 218, 223, 224, 225, 226, 227, 229, 230, 231, 232, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 307, 308, 309, 310, 311, 313, 314, 315, 317, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 360, 375, 376, 377, 379, 381, 382, 383, 384, 637, 638, 640, 641, 643, 644, 649, 650, 655, 656, 688, 689, 691, 692, 694, 695, 700, 701, 706, 707, 737, 752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1032, 1035, 1038, 1041, 1168, 1175, 1176, 1177, 1181], "": [58, 78, 81, 212, 214, 216, 218, 275, 276, 277, 278, 279, 323, 329, 333, 334, 345, 346, 347, 348, 349, 375, 376, 377, 378, 379, 571, 604, 607, 620, 623, 626, 716, 744, 746, 747, 752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 911, 913, 962, 964, 967, 969, 978, 979, 980, 1035, 1038, 1041, 1048, 1051, 1054, 1057, 1060, 1086, 1089, 1104, 1160, 1166, 1168, 1169, 1170, 1172, 1173, 1181, 1183, 1184, 1188, 1189, 1191, 1192, 1193, 1195, 1196, 1197, 1198, 1200, 1201], "align": [58, 1177], "order": [58, 214, 216, 218, 495, 735, 737, 738, 745, 1086, 1089, 1104, 1183, 1184, 1185, 1200], "list": [58, 452, 515, 516, 620, 623, 626, 629, 632, 635, 638, 641, 644, 647, 650, 653, 656, 659, 662, 665, 668, 671, 674, 677, 680, 683, 686, 689, 692, 695, 698, 701, 704, 707, 710, 717, 727, 728, 729, 730, 746, 764, 767, 784, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 952, 953, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1083, 1086, 1089, 1095, 1104, 1110, 1113, 1117, 1121, 1124, 1127, 1168, 1195, 1200], "extract": [59, 60, 102, 103, 794, 1048, 1051, 1054, 1057, 1060, 1181, 1183, 1184, 1192, 1193, 1197, 1198, 1201], "gpmod": [60, 98, 100, 103, 106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 212, 214, 216, 218, 220, 223, 224, 225, 227, 229, 230, 231, 232, 1177, 1180, 1181, 1183, 1184, 1185, 1186, 1188, 1189, 1191], "genomicmodel": [60, 98, 100, 103, 106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 212, 214, 216, 218, 220, 223, 224, 225, 227, 229, 230, 231, 232, 752, 755, 758, 761, 764, 767, 770, 774, 776, 779, 784, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 883, 886, 889, 892, 895, 898, 901, 904, 907, 1193], "predict": [60, 98, 100, 103, 106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 212, 214, 216, 218, 220, 223, 224, 225, 227, 229, 230, 231, 232, 360, 749, 750, 751, 752, 754, 755, 757, 758, 760, 761, 764, 766, 767, 769, 770, 773, 776, 779, 781, 784, 1168, 1180, 1181, 1197, 1198, 1201], "numpi": [60, 69, 72, 75, 78, 81, 84, 87, 90, 93, 94, 95, 98, 100, 103, 106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 212, 214, 216, 218, 220, 223, 224, 225, 227, 229, 230, 231, 232, 235, 237, 239, 241, 246, 248, 250, 255, 257, 259, 261, 264, 266, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 304, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 319, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 360, 362, 364, 367, 370, 372, 375, 376, 377, 379, 381, 382, 383, 384, 387, 388, 389, 390, 391, 397, 403, 412, 421, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 437, 438, 445, 446, 447, 448, 449, 450, 451, 452, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 603, 604, 606, 607, 609, 610, 620, 623, 626, 629, 632, 635, 638, 641, 644, 647, 650, 653, 656, 659, 662, 665, 668, 671, 674, 677, 680, 683, 686, 689, 692, 695, 698, 701, 704, 707, 710, 716, 717, 719, 720, 721, 722, 725, 726, 735, 736, 737, 738, 742, 745, 752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 910, 911, 912, 913, 914, 918, 923, 928, 930, 932, 933, 934, 935, 937, 939, 941, 946, 957, 962, 964, 967, 969, 975, 976, 977, 978, 981, 982, 983, 987, 996, 1001, 1004, 1009, 1015, 1018, 1021, 1027, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1083, 1086, 1089, 1092, 1095, 1098, 1101, 1104, 1107, 1110, 1113, 1117, 1121, 1124, 1127, 1169, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1188, 1189, 1191, 1195, 1196, 1199], "ndarrai": [60, 69, 72, 75, 78, 81, 84, 87, 90, 93, 94, 95, 98, 100, 103, 106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 173, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 212, 214, 216, 218, 220, 223, 224, 225, 227, 229, 230, 231, 232, 235, 237, 239, 241, 243, 246, 248, 250, 252, 255, 257, 259, 261, 264, 266, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 299, 300, 302, 304, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 319, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 333, 334, 336, 337, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 351, 352, 354, 355, 356, 357, 358, 360, 362, 364, 367, 370, 372, 375, 376, 377, 378, 379, 381, 382, 383, 384, 386, 387, 388, 389, 390, 391, 394, 397, 400, 403, 406, 409, 412, 415, 418, 421, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 437, 438, 446, 447, 448, 449, 450, 451, 452, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 604, 607, 609, 610, 620, 623, 626, 629, 632, 635, 638, 641, 644, 647, 650, 653, 656, 659, 662, 665, 668, 671, 674, 677, 680, 683, 686, 689, 692, 695, 698, 701, 704, 707, 710, 719, 720, 721, 722, 725, 726, 735, 736, 737, 738, 742, 745, 752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 910, 911, 912, 913, 914, 962, 964, 967, 969, 973, 974, 975, 976, 977, 978, 980, 981, 982, 983, 987, 996, 1001, 1004, 1009, 1015, 1018, 1021, 1024, 1027, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1083, 1086, 1089, 1092, 1095, 1098, 1101, 1104, 1107, 1110, 1113, 1117, 1121, 1124, 1127, 1181, 1183, 1184, 1185, 1190, 1195], "unphas": [62, 63, 214, 216, 218, 1110, 1178, 1183, 1184, 1185, 1188, 1189, 1190, 1191, 1202], "dens": [62, 63, 619, 620, 622, 623, 625, 626, 628, 629, 631, 632, 634, 635, 637, 638, 640, 641, 643, 644, 646, 647, 649, 650, 652, 653, 655, 656, 658, 659, 764, 767, 770, 784, 802, 803, 805, 806, 808, 809, 811, 812, 813, 814, 816, 817, 818, 819, 821, 822, 824, 825, 826, 827, 828, 829, 830, 831, 845, 846, 848, 849, 851, 852, 854, 855, 856, 857, 859, 860, 861, 862, 864, 865, 867, 868, 869, 870, 871, 872, 873, 874, 1034, 1035, 1037, 1038, 1040, 1041, 1047, 1048, 1050, 1051, 1053, 1054, 1056, 1057, 1059, 1060, 1067, 1070, 1073, 1076, 1079, 1082, 1083, 1109, 1112, 1178, 1184, 1192, 1193, 1197, 1198, 1201, 1202], "matric": [62, 63, 75, 152, 153, 154, 155, 156, 167, 168, 169, 170, 171, 176, 177, 178, 180, 214, 223, 224, 225, 226, 227, 620, 623, 626, 629, 632, 635, 638, 641, 644, 646, 647, 649, 650, 652, 653, 656, 659, 661, 662, 665, 668, 671, 673, 674, 676, 677, 679, 680, 682, 683, 685, 686, 688, 689, 691, 692, 694, 695, 697, 698, 700, 701, 703, 704, 706, 707, 709, 710, 752, 755, 758, 761, 764, 767, 784, 796, 797, 799, 800, 802, 803, 805, 806, 808, 809, 811, 812, 813, 814, 816, 817, 818, 819, 821, 822, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 836, 839, 840, 842, 843, 845, 846, 848, 849, 851, 852, 854, 855, 856, 857, 859, 860, 861, 862, 864, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 878, 879, 904, 907, 1031, 1032, 1034, 1035, 1037, 1038, 1040, 1041, 1043, 1045, 1048, 1051, 1054, 1057, 1060, 1082, 1083, 1094, 1095, 1109, 1110, 1112, 1113, 1116, 1117, 1120, 1121, 1123, 1124, 1126, 1127, 1168, 1191, 1192, 1203], "gt": [63, 65, 66, 1183, 1185], "genotypingprotocol": [63, 66, 1178], "convert": [63, 65, 432, 744, 746, 747, 1092, 1098, 1101, 1107, 1181, 1183, 1184, 1185, 1186, 1190, 1195, 1199], "densephasedgenotypematrix": [63, 69, 72, 78, 81, 84, 87, 90, 647, 653, 1110, 1114, 1115, 1177, 1178, 1179, 1180, 1181, 1183, 1184, 1185, 1186, 1193, 1202], "densegenotypematrix": [63, 1111, 1113, 1178, 1181, 1183, 1184, 1185, 1188, 1189, 1190, 1191, 1198, 1201, 1202], "pgmat": [63, 65, 69, 72, 75, 78, 81, 84, 87, 90, 98, 100, 103, 106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 212, 214, 216, 218, 220, 223, 224, 225, 227, 229, 230, 231, 232, 235, 237, 239, 241, 243, 246, 248, 252, 255, 257, 259, 261, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 883, 886, 889, 892, 895, 898, 901, 904, 907, 1177, 1178, 1179, 1180, 1181, 1183, 1184, 1185, 1186, 1188, 1189, 1191, 1193, 1202], "0": [63, 69, 72, 78, 81, 84, 87, 90, 106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 133, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 212, 214, 216, 218, 223, 224, 225, 227, 229, 230, 231, 232, 319, 333, 334, 336, 337, 367, 386, 388, 390, 397, 403, 412, 421, 431, 433, 543, 629, 632, 683, 713, 721, 735, 736, 764, 767, 784, 785, 793, 809, 812, 814, 817, 825, 827, 829, 831, 852, 855, 857, 860, 868, 870, 872, 874, 910, 911, 912, 913, 932, 933, 934, 935, 971, 972, 983, 987, 996, 1001, 1004, 1009, 1015, 1018, 1021, 1027, 1035, 1038, 1041, 1048, 1051, 1054, 1057, 1060, 1086, 1089, 1092, 1098, 1101, 1104, 1110, 1113, 1117, 1121, 1124, 1127, 1169, 1171, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1185, 1186, 1188, 1189, 1190, 1191, 1192, 1193, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202], "1": [63, 69, 72, 78, 81, 84, 87, 90, 98, 106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 133, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 211, 212, 214, 216, 218, 223, 224, 225, 227, 229, 230, 231, 232, 319, 321, 322, 323, 325, 327, 328, 329, 331, 333, 334, 336, 337, 339, 340, 341, 343, 367, 386, 387, 390, 391, 397, 403, 412, 421, 431, 433, 543, 620, 623, 626, 629, 632, 635, 638, 641, 644, 647, 650, 653, 656, 659, 683, 722, 735, 736, 764, 784, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 910, 911, 912, 913, 914, 932, 933, 934, 935, 962, 967, 972, 983, 987, 996, 1001, 1004, 1009, 1015, 1018, 1021, 1027, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1083, 1086, 1089, 1092, 1098, 1101, 1104, 1110, 1113, 1117, 1121, 1124, 1127, 1169, 1173, 1177, 1178, 1179, 1180, 1181, 1183, 1184, 1185, 1186, 1188, 1189, 1191, 1192, 1193, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202], "2": [63, 69, 72, 78, 81, 84, 87, 90, 214, 216, 218, 235, 237, 239, 241, 246, 248, 255, 257, 259, 261, 264, 266, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 304, 307, 308, 309, 311, 313, 314, 315, 317, 321, 322, 323, 325, 327, 328, 329, 331, 333, 334, 336, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 362, 364, 370, 372, 375, 376, 377, 379, 381, 382, 383, 384, 604, 607, 629, 735, 736, 752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 793, 809, 814, 817, 825, 829, 852, 857, 860, 868, 872, 910, 911, 912, 913, 914, 962, 967, 972, 983, 1045, 1086, 1089, 1092, 1098, 1101, 1104, 1110, 1113, 1117, 1121, 1124, 1127, 1169, 1177, 1178, 1179, 1180, 1181, 1183, 1184, 1185, 1186, 1188, 1189, 1191, 1192, 1193, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202], "format": [63, 333, 334, 336, 337, 603, 606, 629, 1045, 1048, 1051, 1054, 1057, 1060, 1085, 1086, 1103, 1104, 1110, 1113, 1117, 1121, 1124, 1127, 1183, 1184, 1185, 1186, 1193, 1195, 1197, 1201, 1202], "phasedgenotypematrix": [63, 65, 75, 98, 100, 103, 106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 212, 214, 216, 218, 220, 223, 224, 225, 227, 229, 230, 231, 232, 235, 237, 239, 241, 243, 246, 248, 252, 255, 257, 259, 261, 360, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 883, 886, 889, 892, 895, 898, 901, 904, 907, 1113, 1125, 1178, 1193], "phase": [63, 65, 212, 214, 216, 218, 300, 334, 337, 352, 625, 626, 628, 629, 670, 671, 673, 674, 737, 1110, 1112, 1113, 1117, 1121, 1123, 1124, 1126, 1127, 1177, 1178, 1179, 1180, 1181, 1183, 1184, 1185, 1186, 1201, 1203], "whole": [63, 65, 1086, 1178, 1198, 1200, 1201], "its": [64, 212, 321, 322, 323, 325, 327, 328, 329, 331, 545, 722, 748, 993, 994, 1166, 1169, 1170, 1173, 1177, 1178, 1180, 1183, 1195, 1197, 1199, 1202], "servic": 64, "four": [68, 69, 71, 72, 212, 214, 216, 218, 220, 235, 237, 239, 241, 246, 248, 255, 257, 259, 261, 813, 814, 816, 856, 857, 859, 1179, 1192, 1193, 1199], "wai": [68, 69, 71, 72, 80, 81, 83, 84, 86, 87, 89, 90, 214, 235, 237, 239, 241, 246, 248, 255, 257, 259, 261, 604, 809, 811, 812, 813, 814, 816, 817, 824, 825, 826, 827, 828, 829, 830, 831, 852, 854, 855, 856, 857, 859, 860, 867, 868, 869, 870, 871, 872, 873, 874, 1179, 1181, 1183, 1184, 1185, 1186, 1193], "cross": [68, 69, 71, 72, 75, 78, 80, 81, 83, 84, 86, 87, 89, 90, 106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 212, 214, 216, 218, 220, 223, 224, 225, 226, 227, 229, 230, 231, 232, 234, 235, 237, 238, 239, 241, 242, 243, 245, 246, 248, 250, 252, 255, 257, 258, 259, 261, 264, 275, 276, 277, 279, 302, 319, 333, 334, 345, 346, 347, 349, 362, 370, 375, 376, 377, 379, 720, 730, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 883, 886, 889, 892, 895, 898, 901, 904, 907, 1168, 1174, 1179, 1181, 1183, 1184, 1185, 1186, 1188, 1189, 1191, 1193], "progeny_count": [69, 72, 78, 81, 84, 87, 90, 1179, 1183, 1184, 1185, 1186], "family_count": [69, 72, 78, 81, 84, 87, 90, 1179, 1183, 1184, 1185, 1186], "rng": [69, 72, 78, 81, 84, 87, 90, 93, 94, 95, 98, 106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 212, 214, 216, 218, 223, 224, 225, 227, 229, 230, 231, 232, 235, 237, 239, 241, 246, 248, 250, 255, 259, 261, 719, 720, 721, 722, 918, 923, 928, 930, 932, 933, 934, 935, 937, 939, 941, 946, 951, 953, 955, 957, 962, 967, 969, 1181], "randomst": [69, 72, 78, 81, 84, 87, 90, 93, 94, 95, 98, 106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 212, 214, 216, 218, 223, 224, 225, 227, 229, 230, 231, 232, 235, 237, 239, 241, 246, 248, 250, 255, 259, 261, 463, 464, 465, 466, 467, 719, 720, 721, 722, 918, 923, 928, 930, 932, 933, 934, 935, 937, 939, 941, 946, 955, 957, 962, 967, 969], "mt19937": [69, 72, 212, 216, 218, 918, 923, 928, 930, 932, 933, 934, 935, 937, 939, 941, 946, 957, 962, 967, 969], "0x7fd874178640": [69, 72, 212, 216, 218, 918, 923, 928, 930, 932, 933, 934, 935, 937, 939, 941, 946, 957, 962, 967, 969], "matingprotocol": [69, 72, 76, 78, 81, 84, 87, 90, 118, 119, 120, 121, 122, 360, 1183, 1184, 1185], "integr": [69, 72, 75, 78, 81, 84, 87, 90, 98, 106, 109, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 142, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 173, 174, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 188, 189, 191, 192, 193, 194, 195, 197, 200, 203, 206, 209, 223, 224, 225, 226, 227, 229, 230, 231, 232, 235, 237, 239, 241, 243, 246, 248, 252, 255, 257, 259, 261, 264, 266, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 299, 300, 302, 304, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 319, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 333, 334, 336, 337, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 351, 352, 354, 355, 356, 357, 358, 360, 362, 364, 367, 370, 372, 375, 376, 377, 378, 379, 381, 382, 383, 384, 394, 397, 400, 403, 406, 409, 412, 415, 418, 421, 499, 500, 501, 520, 719, 721, 722, 737, 752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 783, 784, 785, 793, 809, 812, 814, 817, 825, 827, 829, 831, 852, 855, 857, 860, 868, 870, 872, 874, 883, 904, 918, 923, 928, 930, 932, 933, 934, 935, 937, 939, 941, 946, 957, 987, 996, 1001, 1004, 1009, 1015, 1018, 1021, 1024, 1027, 1035, 1038, 1041, 1048, 1051, 1054, 1057, 1060, 1086, 1089, 1104, 1170], "counter": [69, 72, 78, 81, 84, 87, 90, 1179, 1183, 1184, 1186], "help": [69, 72, 78, 81, 84, 87, 90, 1168, 1181, 1183, 1184, 1185, 1197, 1198], "creat": [69, 72, 78, 81, 84, 87, 90, 106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 155, 156, 158, 161, 162, 163, 165, 167, 168, 169, 170, 171, 174, 176, 177, 178, 179, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 223, 224, 225, 227, 229, 230, 231, 232, 264, 266, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 304, 307, 308, 309, 311, 313, 314, 315, 317, 319, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 360, 362, 364, 367, 370, 372, 375, 376, 377, 379, 381, 382, 383, 384, 623, 653, 733, 987, 996, 1001, 1004, 1009, 1035, 1038, 1041, 1045, 1048, 1054, 1057, 1060, 1064, 1067, 1070, 1073, 1076, 1079, 1086, 1104, 1110, 1166, 1168, 1169, 1188, 1189, 1190, 1194, 1195, 1196, 1199], "famili": [69, 72, 78, 81, 84, 87, 90, 124, 125, 126, 127, 128, 281, 282, 283, 284, 285, 1166, 1191], "label": [69, 72, 78, 81, 84, 87, 90, 629, 635, 638, 641, 644, 647, 650, 653, 656, 659, 674, 686, 689, 692, 695, 698, 701, 704, 707, 710, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1083, 1086, 1089, 1095, 1104, 1110, 1113, 1117, 1118, 1121, 1124, 1127, 1183, 1184, 1186, 1193, 1197, 1198, 1200, 1201, 1202], "origin": [69, 72, 78, 81, 84, 87, 90, 234, 235, 238, 239, 245, 246, 258, 259, 620, 623, 626, 629, 632, 635, 638, 641, 644, 647, 650, 653, 656, 659, 662, 665, 668, 671, 674, 677, 680, 683, 686, 689, 692, 695, 698, 701, 704, 707, 710, 752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 993, 994, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1083, 1086, 1089, 1095, 1104, 1110, 1113, 1117, 1121, 1124, 1127, 1183, 1184, 1193, 1197, 1198, 1200, 1201, 1202], "same": [69, 72, 78, 81, 84, 87, 90, 388, 587, 620, 623, 626, 629, 632, 635, 638, 641, 644, 647, 650, 653, 656, 659, 662, 665, 668, 671, 674, 677, 680, 683, 686, 689, 692, 695, 698, 701, 704, 707, 710, 716, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1083, 1095, 1098, 1101, 1110, 1113, 1117, 1121, 1124, 1127, 1166, 1184, 1186, 1200, 1202], "random": [69, 72, 78, 81, 84, 87, 90, 93, 94, 95, 98, 106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 190, 191, 192, 193, 194, 195, 197, 200, 203, 206, 209, 212, 214, 216, 218, 223, 224, 225, 227, 229, 230, 231, 232, 235, 237, 239, 241, 243, 246, 248, 250, 255, 259, 261, 353, 354, 355, 356, 357, 358, 439, 462, 463, 464, 465, 466, 467, 715, 716, 717, 719, 720, 721, 722, 752, 755, 758, 761, 764, 767, 770, 776, 784, 910, 911, 912, 913, 918, 923, 928, 930, 932, 933, 934, 935, 937, 939, 941, 946, 955, 957, 962, 967, 969, 982, 1045, 1048, 1051, 1054, 1057, 1060, 1172, 1177, 1178, 1179, 1180, 1181, 1183, 1184, 1185, 1186, 1190, 1191, 1192, 1193, 1195, 1196, 1197, 1198, 1200, 1201, 1202, 1203], "descript": [69, 72, 78, 81, 84, 87, 90, 214, 216, 218, 604, 607, 764, 767, 784, 806, 809, 814, 822, 825, 829, 846, 849, 852, 857, 862, 865, 868, 872, 910, 911, 912, 913, 914, 1166, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1185, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202], "xconfig": [69, 72, 75, 78, 81, 84, 87, 90, 235, 237, 239, 241, 243, 246, 248, 250, 252, 255, 257, 259, 261, 720, 1179, 1181, 1183, 1184, 1185, 1186], "nmate": [69, 72, 75, 78, 81, 84, 87, 90, 106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 223, 224, 225, 227, 229, 230, 231, 232, 235, 237, 239, 241, 243, 246, 248, 252, 255, 257, 259, 261, 1179, 1181, 1183, 1184, 1185, 1186, 1188, 1189, 1191], "nprogeni": [69, 72, 75, 78, 81, 84, 87, 90, 106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 212, 214, 216, 218, 220, 223, 224, 225, 227, 229, 230, 231, 232, 235, 237, 239, 241, 243, 246, 248, 252, 255, 257, 259, 261, 360, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 883, 886, 889, 892, 895, 898, 901, 904, 907, 1179, 1181, 1183, 1184, 1185, 1186, 1188, 1189, 1191, 1193], "nself": [69, 72, 78, 81, 84, 87, 90, 214, 223, 224, 225, 226, 227, 797, 803, 809, 814, 819, 825, 829, 833, 840, 846, 852, 857, 862, 868, 872, 876, 883, 886, 889, 892, 895, 898, 901, 904, 907, 910, 911, 912, 913, 1179, 1185, 1193], "accord": [69, 72, 75, 81, 84, 87, 90, 212, 321, 322, 323, 325, 327, 328, 329, 331, 979, 980, 1201], "4": [69, 72, 214, 216, 218, 334, 337, 814, 857, 1169, 1177, 1178, 1179, 1180, 1181, 1183, 1184, 1185, 1186, 1188, 1189, 1191, 1193, 1197, 1198, 1199, 1201, 1202], "scheme": [69, 72, 75, 81, 84, 87, 90, 1086, 1104, 1168, 1183, 1184], "candid": [69, 72, 75, 78, 81, 84, 87, 90, 212, 214, 216, 218, 220, 235, 237, 239, 241, 243, 246, 248, 252, 255, 257, 259, 261, 264, 266, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 304, 307, 308, 309, 311, 313, 314, 315, 317, 319, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 360, 362, 364, 367, 370, 372, 375, 376, 377, 379, 381, 382, 383, 384, 730, 918, 923, 928, 930, 932, 933, 934, 935, 937, 939, 941, 946, 957, 962, 967, 987, 996, 1001, 1004, 1009, 1183, 1184, 1185, 1188, 1189, 1190, 1191], "arrai": [69, 72, 75, 78, 81, 84, 87, 90, 93, 94, 95, 98, 106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 214, 216, 218, 220, 223, 224, 225, 227, 229, 230, 231, 232, 264, 266, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 304, 307, 308, 309, 310, 311, 313, 314, 315, 317, 319, 321, 322, 323, 325, 327, 328, 329, 331, 333, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 362, 364, 367, 370, 372, 375, 376, 377, 379, 381, 382, 383, 384, 387, 388, 389, 390, 391, 397, 403, 412, 421, 428, 429, 430, 431, 432, 433, 434, 435, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 505, 531, 532, 533, 534, 535, 536, 537, 538, 539, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 604, 607, 610, 620, 623, 626, 629, 632, 635, 638, 641, 644, 647, 650, 653, 656, 659, 662, 665, 668, 671, 674, 677, 680, 683, 686, 689, 692, 695, 698, 701, 704, 707, 710, 719, 720, 721, 722, 725, 726, 727, 728, 729, 735, 736, 737, 738, 742, 752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 962, 967, 987, 996, 1001, 1004, 1009, 1015, 1018, 1021, 1027, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1083, 1086, 1089, 1092, 1095, 1098, 1101, 1104, 1107, 1110, 1113, 1117, 1121, 1124, 1127, 1168, 1169, 1177, 1178, 1179, 1180, 1181, 1183, 1184, 1185, 1186, 1188, 1189, 1191, 1195, 1199], "shape": [69, 72, 75, 78, 81, 84, 87, 90, 98, 106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 212, 214, 216, 218, 220, 223, 224, 225, 227, 229, 230, 231, 232, 235, 237, 239, 241, 246, 248, 255, 257, 259, 261, 264, 266, 269, 270, 271, 273, 275, 276, 277, 278, 279, 281, 282, 283, 285, 287, 288, 289, 290, 291, 293, 294, 295, 297, 299, 300, 302, 304, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 319, 321, 322, 323, 325, 327, 328, 329, 331, 333, 334, 336, 337, 339, 340, 341, 343, 345, 346, 347, 348, 349, 351, 352, 354, 355, 356, 358, 360, 362, 364, 367, 370, 372, 375, 376, 377, 378, 379, 381, 382, 383, 384, 387, 388, 389, 390, 391, 397, 403, 412, 421, 424, 425, 426, 428, 430, 432, 433, 437, 438, 450, 553, 620, 623, 626, 629, 632, 635, 638, 641, 644, 647, 650, 653, 656, 659, 662, 665, 668, 671, 674, 677, 680, 683, 686, 689, 692, 695, 698, 701, 704, 707, 710, 720, 721, 722, 726, 735, 736, 737, 738, 742, 752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 987, 996, 1001, 1004, 1009, 1015, 1018, 1021, 1027, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1083, 1086, 1089, 1095, 1098, 1101, 1104, 1110, 1113, 1117, 1121, 1124, 1127, 1177, 1178, 1179, 1180, 1181, 1183, 1184, 1185, 1188, 1189, 1190, 1191, 1192, 1193, 1195, 1197, 1198, 1201, 1202], "ncross": [69, 72, 75, 78, 84, 87, 90, 106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 212, 214, 216, 218, 220, 223, 224, 225, 227, 229, 230, 231, 232, 235, 237, 239, 241, 243, 246, 248, 252, 255, 257, 259, 261, 360, 720, 797, 803, 809, 814, 819, 825, 829, 833, 840, 846, 852, 857, 862, 868, 872, 876, 883, 886, 889, 892, 895, 898, 901, 904, 907, 1181, 1183, 1184, 1185, 1186, 1188, 1189, 1191, 1193], "nparent": [69, 72, 75, 78, 81, 84, 87, 90, 106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 212, 214, 216, 218, 223, 224, 225, 227, 229, 230, 231, 232, 235, 237, 239, 241, 243, 246, 248, 252, 255, 257, 259, 261, 360, 720, 730, 1179, 1181, 1183, 1184, 1185, 1186, 1188, 1189, 1191], "indic": [69, 72, 75, 78, 81, 84, 87, 90, 212, 214, 216, 218, 220, 235, 237, 239, 241, 246, 248, 255, 257, 259, 261, 275, 276, 277, 279, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 375, 376, 377, 379, 560, 563, 568, 620, 623, 626, 629, 632, 635, 638, 641, 644, 647, 650, 653, 656, 659, 662, 665, 668, 671, 674, 677, 680, 683, 686, 689, 692, 695, 698, 701, 704, 707, 710, 720, 724, 725, 726, 727, 728, 729, 730, 735, 736, 737, 738, 742, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1083, 1086, 1089, 1095, 1104, 1110, 1113, 1117, 1121, 1124, 1127, 1179, 1183, 1184, 1185, 1193, 1197, 1198, 1200, 1201, 1202], "index": [69, 72, 75, 78, 81, 84, 87, 90, 212, 214, 216, 218, 220, 339, 340, 341, 343, 559, 562, 567, 620, 623, 626, 629, 632, 635, 638, 641, 644, 647, 650, 653, 656, 659, 662, 665, 668, 671, 674, 677, 680, 683, 686, 689, 692, 695, 698, 701, 704, 707, 710, 713, 725, 727, 728, 729, 735, 736, 746, 747, 748, 764, 767, 784, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1083, 1086, 1089, 1095, 1104, 1110, 1113, 1117, 1121, 1124, 1127, 1170, 1183, 1184, 1185, 1186, 1193, 1197, 1198, 1201, 1202], "correspond": [69, 72, 75, 78, 84, 87, 90, 106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 148, 152, 153, 154, 156, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 209, 212, 214, 216, 218, 220, 223, 225, 229, 230, 231, 232, 235, 237, 239, 241, 243, 246, 248, 255, 257, 259, 261, 264, 302, 362, 370, 375, 376, 377, 379, 387, 388, 389, 391, 620, 623, 626, 629, 632, 635, 638, 641, 644, 647, 650, 653, 656, 659, 662, 665, 668, 671, 674, 677, 680, 683, 686, 689, 692, 695, 698, 701, 704, 707, 710, 725, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 962, 967, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1083, 1092, 1095, 1098, 1101, 1110, 1113, 1117, 1121, 1124, 1127, 1173, 1181, 1183, 1184, 1193, 1195, 1196, 1198, 1203], "requir": [69, 72, 75, 78, 81, 84, 87, 90, 106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 223, 224, 225, 227, 229, 230, 231, 232, 242, 243, 249, 250, 527, 528, 540, 541, 558, 559, 560, 561, 562, 563, 564, 565, 567, 568, 569, 570, 604, 607, 752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 1086, 1089, 1104, 1166, 1168, 1171, 1172, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1192, 1194, 1195, 1199, 1201], "pair": [69, 72, 81, 84, 87, 90, 1086, 1089, 1104, 1181, 1183, 1184, 1185, 1186, 1188, 1189, 1191, 1199], "follow": [69, 72, 78, 81, 84, 87, 90, 106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 212, 214, 216, 218, 223, 224, 225, 227, 229, 230, 231, 232, 592, 595, 598, 601, 604, 607, 610, 613, 616, 629, 635, 641, 644, 650, 653, 674, 686, 689, 692, 695, 701, 704, 764, 767, 784, 785, 1001, 1024, 1045, 1124, 1127, 1169, 1173, 1177, 1179, 1180, 1181, 1183, 1184, 1185, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1201, 1202], "first": [69, 72, 78, 81, 84, 87, 90, 214, 216, 218, 339, 340, 341, 343, 431, 432, 539, 587, 635, 638, 641, 644, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 951, 962, 967, 1048, 1051, 1054, 1057, 1060, 1086, 1089, 1104, 1169, 1181, 1183, 1184, 1185, 1190, 1191, 1193, 1197, 1198, 1201, 1202], "femal": [69, 72, 81, 84, 87, 90, 94, 809, 812, 814, 817, 825, 827, 829, 831, 852, 855, 857, 860, 868, 870, 872, 874, 1193], "second": [69, 72, 78, 81, 84, 87, 90, 214, 216, 218, 539, 587, 829, 962, 967, 1086, 1089, 1104, 1181, 1183, 1184, 1190], "male": [69, 72, 81, 84, 87, 90, 94, 809, 812, 814, 817, 825, 827, 829, 831, 852, 855, 857, 860, 868, 870, 872, 874, 1193], "third": [69, 72, 81, 84, 214, 626, 671, 1086, 1089, 1104], "fourth": [69, 72], "exampl": [69, 72, 78, 81, 84, 87, 90, 214, 216, 218, 235, 237, 239, 241, 246, 248, 255, 257, 259, 261, 334, 337, 604, 632, 683, 735, 736, 809, 814, 825, 829, 852, 857, 868, 872, 910, 911, 912, 913, 914, 1092, 1098, 1101, 1161, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202], "3": [69, 72, 78, 81, 84, 87, 90, 214, 216, 218, 334, 337, 604, 607, 735, 736, 809, 814, 825, 852, 857, 868, 914, 962, 964, 967, 969, 1092, 1098, 1101, 1121, 1127, 1169, 1177, 1178, 1179, 1180, 1181, 1183, 1184, 1185, 1186, 1191, 1193, 1197, 1198, 1200, 1201, 1202], "8": [69, 72, 81, 84, 87, 90, 214, 809, 814, 825, 829, 852, 857, 868, 872, 1169, 1183, 1185, 1199], "7": [69, 72, 81, 84, 87, 90, 214, 216, 218, 334, 337, 1169, 1177, 1180, 1184, 1185, 1193], "f2": [69, 72, 214, 809, 814, 825, 829, 852, 857, 868, 872, 910, 911, 912, 913, 914, 1190], "m2": [69, 72], "f1": [69, 72, 214, 235, 237, 239, 241, 246, 248, 255, 257, 259, 261, 809, 814, 825, 829, 852, 857, 868, 872, 910, 911, 912, 913, 914, 1190], "m1": [69, 72], "female2": [69, 72, 814, 817, 857, 860], "male2": [69, 72, 814, 817, 857, 860], "female1": [69, 72, 814, 817, 857, 860], "male1": [69, 72, 814, 817, 857, 860], "pattern": [69, 72, 75, 78, 81, 84, 87, 90, 212, 214, 216, 218, 220, 797, 803, 809, 814, 819, 825, 829, 833, 840, 846, 852, 857, 862, 868, 872, 876, 883, 886, 889, 892, 895, 898, 901, 904, 907, 1186], "doubl": [69, 72, 81, 84, 90, 93, 1179, 1183, 1184, 1185, 1186], "haploid": [69, 72, 81, 84, 90, 93, 174, 182, 183, 184, 185, 186, 189, 191, 192, 193, 195, 344, 345, 346, 347, 348, 349, 1179, 1181, 1183, 1184, 1185, 1186], "per": [69, 72, 75, 78, 81, 84, 87, 90, 98, 106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 212, 214, 216, 218, 220, 223, 224, 225, 227, 229, 230, 231, 232, 730, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 883, 886, 889, 892, 895, 898, 901, 904, 907, 1181, 1183, 1184, 1185, 1186, 1188, 1189, 1191], "default": [69, 72, 78, 81, 84, 87, 90, 98, 103, 106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 212, 214, 216, 218, 223, 224, 225, 227, 229, 230, 231, 232, 266, 304, 364, 372, 604, 607, 719, 720, 721, 722, 764, 767, 784, 809, 812, 814, 817, 825, 827, 829, 831, 852, 855, 857, 860, 868, 870, 872, 874, 1035, 1038, 1041, 1048, 1051, 1054, 1057, 1060, 1086, 1089, 1104, 1172, 1181, 1185, 1188, 1189, 1190, 1191, 1193, 1195, 1197, 1198, 1200], "self": [69, 72, 77, 78, 81, 84, 87, 90, 214, 216, 218, 223, 224, 225, 226, 227, 730, 797, 803, 809, 814, 819, 825, 829, 833, 840, 846, 852, 857, 862, 868, 872, 876, 883, 886, 889, 892, 895, 898, 901, 904, 907, 910, 911, 912, 913, 914, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 1171, 1172, 1173, 1174, 1175, 1176, 1179, 1185, 1190, 1195], "post": [69, 72, 78, 81, 84, 87, 90, 214, 223, 224, 225, 226, 227, 797, 803, 809, 814, 819, 825, 829, 833, 840, 846, 852, 857, 862, 868, 872, 876, 883, 886, 889, 892, 895, 898, 901, 904, 907, 1201, 1202], "fourwaycross": [70, 1179], "dh": [71, 72, 83, 84, 89, 90, 808, 809, 811, 812, 813, 814, 816, 817, 824, 825, 826, 827, 828, 829, 830, 831, 851, 852, 854, 855, 856, 857, 859, 860, 867, 868, 869, 870, 871, 872, 873, 874, 1183, 1184, 1185, 1186], "diagram": [72, 78, 84, 87, 90], "sel": [72, 78, 84, 87, 90, 93, 95, 106, 107, 109, 110, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 142, 143, 145, 146, 148, 149, 152, 153, 154, 155, 156, 158, 159, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 173, 174, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 188, 189, 191, 192, 193, 194, 195, 197, 198, 200, 201, 203, 204, 206, 207, 209, 210, 212, 214, 216, 218, 220, 221, 223, 224, 225, 226, 227, 229, 230, 231, 232, 235, 237, 239, 241, 243, 244, 246, 248, 250, 252, 253, 255, 257, 259, 261, 264, 266, 267, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 299, 300, 302, 304, 305, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 319, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 333, 334, 336, 337, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 351, 352, 354, 355, 356, 357, 358, 360, 362, 364, 365, 367, 368, 370, 372, 373, 375, 376, 377, 378, 379, 381, 382, 383, 384, 386, 387, 388, 389, 390, 391, 394, 395, 397, 398, 400, 401, 403, 404, 406, 407, 409, 410, 412, 413, 415, 416, 418, 419, 421, 422, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 437, 438, 1183, 1184, 1185, 1186, 1188, 1189, 1191], "f2xm2": 72, "x": [72, 214, 216, 218, 264, 266, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 304, 307, 308, 309, 311, 313, 314, 315, 317, 319, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 360, 362, 364, 367, 370, 372, 375, 376, 377, 379, 381, 382, 383, 384, 431, 752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 783, 784, 911, 913, 975, 976, 977, 978, 981, 987, 996, 1001, 1004, 1009, 1032, 1035, 1038, 1041, 1086, 1089, 1104, 1185, 1190, 1191, 1192, 1195], "f1xm1": 72, "duplic": [72, 84, 87, 90], "2x": [72, 84, 90], "s0": [72, 78, 84, 87, 90], "s1": [72, 78, 84, 87, 90], "final": [72, 78, 84, 87, 90, 214, 216, 218, 334, 337, 748, 1168, 1183, 1184, 1185, 1186, 1190, 1192, 1201], "result": [72, 78, 84, 87, 90, 214, 216, 218, 313, 314, 315, 317, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 620, 623, 626, 629, 632, 635, 638, 641, 644, 647, 650, 653, 656, 659, 662, 665, 668, 671, 674, 677, 680, 683, 686, 689, 692, 695, 698, 701, 704, 707, 710, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 962, 967, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1083, 1095, 1110, 1113, 1117, 1121, 1124, 1127, 1168, 1174, 1181, 1188, 1189, 1190, 1191, 1196], "fourwaydhcross": [73, 1179], "relev": 75, "situat": 75, "heterozyg": [75, 235, 237, 239, 241, 246, 248, 255, 257, 259, 261, 333, 334, 336, 337, 1110, 1113, 1117, 1121, 1124, 1127, 1185, 1201], "fertil": [77, 78, 214, 1179], "finish": [78, 716], "s2": 78, "organ": [78, 1110, 1200], "singl": [78, 106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 212, 214, 216, 218, 220, 223, 224, 225, 227, 229, 230, 231, 232, 264, 266, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 304, 307, 308, 309, 311, 313, 314, 315, 317, 319, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 360, 362, 364, 367, 370, 372, 375, 376, 377, 379, 381, 382, 383, 384, 720, 722, 784, 962, 967, 973, 974, 975, 976, 977, 978, 981, 987, 989, 996, 998, 1001, 1004, 1006, 1009, 1011, 1086, 1089, 1104, 1168, 1170, 1178, 1182, 1183, 1185, 1188, 1189, 1190, 1191], "seed": [78, 717], "descent": [78, 720, 951, 955, 973, 974, 1194], "selfcross": [79, 1179], "three": [80, 81, 83, 84, 89, 214, 264, 266, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 304, 307, 308, 309, 311, 313, 314, 315, 317, 319, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 360, 362, 364, 367, 370, 372, 375, 376, 377, 379, 381, 382, 383, 384, 811, 824, 825, 826, 830, 854, 867, 868, 869, 873, 987, 996, 1001, 1004, 1009, 1168, 1179, 1181, 1183, 1184, 1185, 1190, 1191, 1192, 1193, 1195, 1197, 1198, 1201], "1d": [81, 397, 403, 412, 421, 987, 996, 1004, 1009, 1015, 1018, 1021, 1027, 1086, 1089, 1092, 1098, 1101, 1104], "k": [81, 106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 148, 152, 153, 154, 156, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 209, 212, 214, 216, 218, 220, 223, 225, 229, 230, 231, 232, 269, 270, 271, 279, 281, 282, 283, 287, 288, 289, 293, 294, 295, 307, 308, 309, 313, 314, 315, 317, 321, 322, 323, 325, 327, 328, 329, 331, 339, 340, 341, 343, 345, 346, 347, 354, 355, 356, 379, 381, 382, 383, 629, 635, 638, 641, 644, 647, 650, 653, 656, 659, 662, 674, 680, 686, 689, 692, 695, 698, 701, 704, 707, 710, 722, 727, 728, 729, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 914, 962, 964, 967, 969, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1083, 1086, 1089, 1095, 1104, 1110, 1113, 1117, 1121, 1124, 1127, 1190, 1191], "threewaycross": [82, 1179], "r": [84, 194, 358, 604, 607, 752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 910, 911, 912, 913, 914, 1092, 1098, 1101, 1183, 1184], "f": [84, 87, 90, 214, 216, 218, 334, 337, 431, 978, 1001, 1195], "m": [84, 87, 90, 214, 216, 218, 299, 300, 351, 352, 549, 626, 629, 635, 638, 641, 644, 647, 650, 653, 656, 659, 722, 737, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 918, 923, 928, 930, 932, 933, 934, 935, 937, 939, 941, 946, 957, 962, 967, 979, 980, 1035, 1038, 1041, 1048, 1051, 1054, 1057, 1060, 1083, 1086, 1104, 1110, 1113, 1117, 1124, 1169, 1185, 1202], "rx": 84, "fxm": 84, "threewaydhcross": [85, 1179], "two": [86, 87, 90, 106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 148, 152, 153, 154, 156, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 209, 212, 214, 216, 218, 220, 223, 225, 229, 230, 231, 232, 235, 237, 239, 241, 246, 248, 255, 257, 259, 261, 334, 337, 390, 433, 539, 545, 587, 592, 595, 598, 601, 604, 607, 610, 613, 616, 632, 683, 812, 817, 827, 828, 829, 831, 855, 860, 870, 871, 872, 874, 912, 913, 914, 1086, 1089, 1098, 1101, 1104, 1166, 1171, 1173, 1175, 1176, 1179, 1180, 1181, 1183, 1184, 1185, 1186, 1188, 1189, 1190, 1191, 1192, 1193, 1195, 1196, 1197, 1198, 1199, 1200, 1201], "b": [87, 90, 299, 300, 737, 752, 755, 758, 761, 764, 767, 783, 784, 1183, 1184, 1192, 1193], "axb": [87, 90], "even": [87, 90, 438, 1169, 1186], "odd": [87, 90], "line": [87, 1169, 1179, 1183, 1185], "twowaycross": [88, 1179, 1183, 1184, 1185, 1186], "twowaydhcross": [91, 1179, 1183, 1184, 1185, 1186], "xoprob": [93, 94, 95, 1199], "product": [93, 106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 214, 216, 218, 223, 224, 225, 227, 229, 230, 231, 232, 334, 337, 387, 397, 403, 412, 421, 428, 987, 996, 1004, 1009, 1015, 1018, 1021, 1027], "input": [93, 94, 95, 106, 109, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 142, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 173, 174, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 188, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 212, 214, 216, 218, 220, 223, 224, 225, 226, 227, 229, 230, 231, 232, 388, 389, 390, 433, 439, 527, 528, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 565, 567, 568, 569, 570, 572, 577, 578, 579, 580, 581, 582, 583, 584, 588, 590, 592, 595, 598, 601, 604, 607, 610, 613, 616, 733, 735, 736, 737, 738, 745, 764, 767, 784, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 883, 886, 889, 892, 895, 898, 901, 904, 907, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1064, 1067, 1070, 1073, 1076, 1079, 1086, 1104, 1168, 1178, 1181, 1183, 1184, 1185, 1188, 1189, 1192, 1197, 1202], "crossov": [93, 94, 95, 214, 216, 218, 629, 653, 659, 674, 704, 710, 962, 967, 979, 1083, 1095, 1110, 1113, 1117, 1121, 1124, 1127, 1179, 1183, 1184, 1185, 1186, 1201, 1202], "porbabl": [93, 94, 95], "instanc": [93, 94, 95, 1086, 1089, 1104, 1182, 1199, 1200], "fgeno": 94, "mgeno": 94, "fsel": 94, "msel": 94, "meiosi": [95, 1168], "gamet": [95, 214, 809, 814, 825, 829, 852, 857, 868, 872, 910, 911, 912, 913, 914], "gxe": [97, 98, 1180], "interact": [97, 98, 1180, 1186], "pt": [98, 100, 101, 103, 1183, 1184, 1185, 1186], "nenv": [98, 1177, 1180, 1185, 1186], "var_env": 98, "var_rep": 98, "var_err": [98, 100, 103, 1180, 1185], "phenotypingprotocol": [98, 101, 103], "construct": [98, 106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 214, 220, 223, 224, 225, 227, 229, 230, 231, 232, 264, 266, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 304, 307, 308, 309, 311, 313, 314, 315, 316, 317, 321, 322, 323, 325, 327, 328, 329, 331, 332, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 362, 364, 370, 372, 375, 376, 377, 379, 381, 382, 383, 384, 437, 438, 620, 626, 635, 638, 641, 644, 647, 650, 653, 656, 659, 803, 805, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 904, 907, 982, 987, 996, 1004, 1009, 1035, 1038, 1041, 1051, 1057, 1060, 1086, 1089, 1104, 1161, 1165, 1168, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1192, 1193, 1197, 1198, 1200, 1201, 1202], "have": [98, 106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 214, 223, 224, 225, 227, 229, 230, 231, 232, 269, 270, 271, 275, 276, 277, 281, 282, 283, 287, 288, 289, 293, 294, 295, 307, 308, 309, 313, 314, 315, 323, 329, 339, 340, 341, 345, 346, 347, 354, 355, 356, 367, 375, 376, 377, 381, 382, 383, 390, 433, 448, 449, 450, 451, 452, 574, 575, 576, 587, 620, 623, 626, 629, 632, 635, 638, 641, 644, 647, 650, 653, 656, 659, 661, 662, 665, 668, 671, 674, 677, 679, 680, 683, 686, 689, 692, 695, 698, 701, 704, 707, 710, 764, 767, 784, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1082, 1083, 1086, 1089, 1094, 1095, 1104, 1110, 1113, 1117, 1121, 1124, 1127, 1132, 1133, 1134, 1135, 1137, 1138, 1143, 1144, 1149, 1150, 1155, 1156, 1166, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1183, 1184, 1185, 1186, 1190, 1192, 1193, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202], "fix": [98, 752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 1177, 1180, 1181, 1190, 1192, 1193], "effect": [98, 214, 216, 218, 299, 300, 351, 352, 424, 425, 426, 437, 438, 737, 751, 752, 754, 755, 757, 758, 760, 761, 763, 764, 766, 767, 769, 770, 773, 776, 779, 781, 784, 785, 1168, 1170, 1177, 1180, 1181, 1183, 1184, 1185, 1186, 1188, 1189, 1191, 1193], "varianc": [98, 100, 103, 214, 223, 224, 225, 226, 227, 334, 749, 752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 785, 791, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 838, 839, 840, 842, 843, 845, 846, 848, 849, 851, 852, 854, 855, 856, 857, 859, 860, 861, 862, 864, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 878, 879, 881, 883, 886, 889, 892, 895, 898, 901, 903, 904, 907, 909, 1032, 1035, 1038, 1041, 1168, 1184, 1185, 1199, 1203], "equal": [98, 106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 214, 216, 218, 223, 224, 225, 227, 229, 230, 231, 232, 264, 266, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 304, 307, 308, 309, 311, 313, 314, 315, 317, 319, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 360, 362, 364, 367, 370, 372, 375, 376, 377, 379, 381, 382, 383, 384, 394, 397, 400, 403, 406, 409, 412, 415, 418, 421, 426, 430, 446, 449, 532, 539, 550, 555, 575, 579, 583, 584, 586, 589, 752, 755, 758, 761, 764, 767, 784, 987, 996, 1001, 1004, 1009, 1015, 1018, 1021, 1024, 1027, 1035, 1038, 1041, 1048, 1051, 1054, 1057, 1060, 1086, 1181, 1185, 1190, 1195, 1196], "broadcast": [98, 106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 223, 224, 225, 227, 229, 230, 231, 232, 397, 403, 412, 421, 987, 996, 1004, 1009, 1015, 1018, 1021, 1027, 1086, 1089, 1104], "environment": [98, 100, 1180], "determin": [98, 103, 214, 216, 218, 334, 337, 390, 433, 629, 632, 635, 638, 641, 644, 647, 650, 653, 659, 662, 674, 683, 686, 689, 692, 695, 698, 701, 704, 710, 732, 738, 741, 745, 752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1083, 1086, 1089, 1095, 1104, 1110, 1113, 1117, 1121, 1124, 1127, 1168, 1181, 1184, 1185, 1197, 1200, 1201, 1202], "distribut": [98, 722, 784, 785, 1183, 1185, 1188, 1189, 1191], "ntrait": [98, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 142, 143, 173, 174, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 188, 189, 191, 192, 193, 194, 195, 223, 224, 225, 226, 227, 229, 230, 231, 232, 638, 641, 644, 650, 656, 689, 692, 695, 701, 707, 752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1032, 1035, 1038, 1041, 1177, 1180, 1181, 1183, 1184, 1185, 1186, 1188, 1189, 1191, 1192, 1193, 1197], "assum": [98, 106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 223, 224, 225, 227, 229, 230, 231, 232, 397, 403, 412, 421, 722, 742, 764, 767, 770, 784, 951, 953, 983, 987, 996, 1004, 1009, 1015, 1018, 1021, 1027, 1035, 1038, 1041, 1051, 1057, 1060, 1086, 1089, 1104, 1181, 1192, 1193, 1202], "constant": [98, 1057, 1060, 1183, 1184, 1185, 1186], "nest": 98, "set_h2": [98, 100, 103, 1177, 1180, 1183, 1184, 1185, 1186], "h2": [98, 100, 103, 1177, 1180, 1183], "broad": [98, 100, 103, 1180, 1192], "sens": [98, 100, 103, 1177, 1180, 1183, 1184, 1185, 1186], "herit": [98, 100, 103, 1177, 1183, 1184, 1185, 1186], "float": [98, 103, 212, 214, 216, 218, 319, 367, 477, 483, 487, 510, 550, 555, 764, 767, 784, 918, 923, 928, 930, 932, 933, 934, 935, 937, 939, 941, 946, 957, 962, 967, 976, 977, 978, 981, 983, 1001, 1045, 1048, 1051, 1054, 1057, 1060, 1086, 1089, 1104, 1110, 1113, 1117, 1121, 1124, 1127, 1181, 1183, 1184, 1185, 1186, 1190, 1195], "founder": [98, 100, 103, 142, 143, 300, 360, 1180], "narrow": [98, 100, 103, 1166, 1177, 1180, 1183, 1184, 1185, 1186], "metadata": [100, 495, 620, 623, 626, 628, 629, 632, 634, 635, 638, 641, 644, 646, 647, 649, 650, 652, 653, 655, 656, 658, 659, 662, 665, 668, 671, 673, 674, 677, 680, 683, 685, 686, 689, 692, 694, 695, 697, 698, 700, 701, 703, 704, 706, 707, 709, 710, 752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1083, 1086, 1089, 1095, 1104, 1110, 1113, 1117, 1121, 1124, 1127, 1193, 1195, 1196, 1197, 1198, 1200, 1201, 1202], "manipul": [100, 626, 647, 671, 707, 710, 1035, 1038, 1041, 1121], "real": [100, 106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 133, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 196, 197, 199, 200, 203, 206, 209, 214, 223, 224, 225, 226, 227, 229, 230, 231, 232, 247, 264, 266, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 304, 307, 308, 309, 311, 313, 314, 315, 317, 319, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 360, 362, 364, 367, 370, 372, 375, 376, 377, 379, 381, 382, 383, 384, 397, 403, 412, 421, 431, 432, 503, 531, 532, 542, 550, 555, 783, 785, 787, 791, 793, 809, 814, 825, 829, 852, 857, 868, 872, 947, 948, 987, 992, 993, 994, 996, 1001, 1004, 1009, 1015, 1018, 1021, 1027, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1110, 1113, 1117, 1124, 1172, 1181, 1184, 1186, 1194, 1195, 1196, 1200, 1201], "pure": [100, 1169, 1180], "binari": [105, 106, 108, 109, 176, 182, 191, 214, 216, 218, 223, 234, 236, 266, 269, 275, 281, 287, 293, 307, 313, 334, 337, 338, 345, 354, 603, 606, 919, 920, 982, 1015, 1181, 1190, 1194, 1195, 1196, 1202], "nobj": [106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 223, 224, 225, 227, 229, 230, 231, 232, 264, 266, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 304, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 319, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 360, 362, 364, 367, 370, 372, 375, 376, 377, 379, 381, 382, 383, 384, 390, 394, 397, 400, 403, 406, 409, 412, 415, 418, 421, 428, 433, 742, 987, 996, 1001, 1004, 1009, 1015, 1018, 1021, 1024, 1027, 1181, 1183, 1184, 1185, 1186, 1188, 1189, 1190, 1191, 1195, 1196], "obj_wt": [106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 223, 224, 225, 227, 229, 230, 231, 232, 264, 266, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 304, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 319, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 360, 362, 364, 367, 370, 372, 375, 376, 377, 379, 381, 382, 383, 384, 390, 394, 397, 400, 403, 406, 409, 412, 415, 418, 421, 987, 996, 1001, 1004, 1009, 1015, 1018, 1021, 1024, 1027, 1181, 1190, 1195, 1196], "obj_tran": [106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 223, 224, 225, 227, 229, 230, 231, 232, 264, 266, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 304, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 319, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 360, 362, 364, 367, 370, 372, 375, 376, 377, 379, 381, 382, 383, 384, 1181, 1183, 1184], "obj_trans_kwarg": [106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 223, 224, 225, 227, 229, 230, 231, 232, 264, 266, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 304, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 319, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 360, 362, 364, 367, 370, 372, 375, 376, 377, 379, 381, 382, 383, 384, 1181], "nineqcv": [106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 223, 224, 225, 227, 229, 230, 231, 232, 264, 266, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 304, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 319, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 360, 362, 364, 367, 370, 372, 375, 376, 377, 379, 381, 382, 383, 384, 394, 397, 400, 403, 406, 409, 412, 415, 418, 421, 987, 996, 1001, 1004, 1009, 1015, 1018, 1021, 1024, 1027, 1181, 1183, 1184, 1190, 1195, 1196], "ineqcv_wt": [106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 223, 224, 225, 227, 229, 230, 231, 232, 264, 266, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 304, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 319, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 360, 362, 364, 367, 370, 372, 375, 376, 377, 379, 381, 382, 383, 384, 394, 397, 400, 403, 406, 409, 412, 415, 418, 421, 987, 996, 1001, 1004, 1009, 1015, 1018, 1021, 1024, 1027, 1181, 1190, 1195, 1196], "ineqcv_tran": [106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 223, 224, 225, 227, 229, 230, 231, 232, 264, 266, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 304, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 319, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 360, 362, 364, 367, 370, 372, 375, 376, 377, 379, 381, 382, 383, 384, 397, 403, 412, 421, 987, 996, 1004, 1009, 1015, 1018, 1021, 1027, 1181, 1183, 1184], "ineqcv_trans_kwarg": [106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 223, 224, 225, 227, 229, 230, 231, 232, 264, 266, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 304, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 319, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 360, 362, 364, 367, 370, 372, 375, 376, 377, 379, 381, 382, 383, 384, 1181, 1184], "neqcv": [106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 223, 224, 225, 227, 229, 230, 231, 232, 264, 266, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 304, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 319, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 360, 362, 364, 367, 370, 372, 375, 376, 377, 379, 381, 382, 383, 384, 394, 397, 400, 403, 406, 409, 412, 415, 418, 421, 987, 996, 1001, 1004, 1009, 1015, 1018, 1021, 1024, 1027, 1181, 1190, 1195, 1196], "eqcv_wt": [106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 223, 224, 225, 227, 229, 230, 231, 232, 264, 266, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 304, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 319, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 360, 362, 364, 367, 370, 372, 375, 376, 377, 379, 381, 382, 383, 384, 394, 397, 400, 403, 406, 409, 412, 415, 418, 421, 987, 996, 1001, 1004, 1009, 1015, 1018, 1021, 1024, 1027, 1181, 1190, 1195, 1196], "eqcv_tran": [106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 223, 224, 225, 227, 229, 230, 231, 232, 264, 266, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 304, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 319, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 360, 362, 364, 367, 370, 372, 375, 376, 377, 379, 381, 382, 383, 384, 397, 403, 412, 421, 987, 996, 1004, 1009, 1015, 1018, 1021, 1027, 1181], "eqcv_trans_kwarg": [106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 223, 224, 225, 227, 229, 230, 231, 232, 264, 266, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 304, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 319, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 360, 362, 364, 367, 370, 372, 375, 376, 377, 379, 381, 382, 383, 384, 1181], "ndset_wt": [106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 212, 214, 216, 218, 223, 224, 225, 227, 229, 230, 231, 232, 1181, 1185], "ndset_tran": [106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 212, 214, 216, 218, 223, 224, 225, 227, 229, 230, 231, 232, 1181, 1185], "ndset_trans_kwarg": [106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 212, 214, 216, 218, 223, 224, 225, 227, 229, 230, 231, 232, 1181, 1185], "soalgo": [106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 212, 214, 216, 218, 223, 224, 225, 227, 229, 230, 231, 232, 1181, 1183, 1184, 1186, 1194], "moalgo": [106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 212, 214, 216, 218, 223, 224, 225, 227, 229, 230, 231, 232, 1181, 1188, 1189, 1191, 1194], "binaryselectionprotocol": [106, 110, 112, 118, 124, 130, 136, 152, 161, 167, 176, 182, 191, 1181], "mateselectionprotocol": [106, 145, 159, 197, 206, 1181], "semi": [106, 109, 121, 139, 145, 148, 155, 158, 164, 170, 173, 179, 185, 188, 194, 197, 200, 203, 206, 209, 226, 266, 304, 364, 367, 372, 406, 803, 806, 819, 822, 846, 849, 862, 865, 1001, 1024, 1193, 1195, 1196, 1198], "consid": [106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 142, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 185, 186, 188, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 214, 223, 224, 225, 227, 229, 230, 231, 232, 235, 237, 239, 241, 243, 246, 248, 252, 255, 257, 259, 261, 300, 1181, 1183], "deriv": [106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 212, 214, 216, 218, 223, 224, 225, 226, 227, 229, 230, 231, 232, 235, 237, 239, 241, 243, 246, 248, 252, 255, 257, 259, 261, 809, 814, 825, 829, 852, 857, 868, 872, 910, 911, 912, 913, 914, 1001, 1024, 1166, 1181, 1183, 1184, 1185, 1186, 1188, 1189, 1191, 1192, 1193, 1196, 1198, 1202], "event": [106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 223, 224, 225, 227, 229, 230, 231, 232, 235, 237, 239, 241, 243, 246, 248, 252, 255, 257, 259, 261, 752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 910, 912, 913, 1181, 1183, 1184, 1186, 1188, 1189, 1191, 1198], "when": [106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 223, 224, 225, 227, 229, 230, 231, 232, 604, 607, 982, 1192], "selectionproblem": [106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 223, 224, 225, 227, 229, 230, 231, 232, 266, 304, 319, 364, 368, 372], "equival": [106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 223, 224, 225, 227, 229, 230, 231, 232, 264, 266, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 304, 307, 308, 309, 311, 313, 314, 315, 317, 319, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 360, 362, 364, 367, 370, 372, 375, 376, 377, 379, 381, 382, 383, 384, 397, 403, 412, 421, 571, 577, 587, 987, 996, 1004, 1009, 1015, 1018, 1021, 1027, 1045, 1048, 1051, 1054, 1057, 1060, 1086, 1107, 1181, 1198], "vector": [106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 212, 214, 216, 218, 220, 223, 224, 225, 227, 229, 230, 231, 232, 235, 237, 239, 241, 246, 248, 250, 259, 261, 264, 266, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 304, 307, 308, 309, 311, 313, 314, 315, 317, 319, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 360, 362, 364, 367, 370, 372, 375, 376, 377, 379, 381, 382, 383, 384, 386, 387, 388, 389, 390, 391, 394, 397, 400, 403, 406, 409, 412, 415, 418, 421, 428, 430, 432, 433, 436, 721, 752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 783, 784, 785, 788, 789, 790, 792, 793, 794, 962, 964, 967, 969, 983, 987, 996, 1001, 1004, 1009, 1015, 1018, 1021, 1024, 1027, 1181, 1183, 1184, 1190, 1195, 1196], "greater": [106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 223, 224, 225, 227, 229, 230, 231, 232, 397, 403, 412, 421, 449, 531, 532, 578, 579, 785, 987, 996, 1004, 1009, 1015, 1018, 1021, 1027, 1181, 1183, 1184, 1185, 1186], "than": [106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 223, 224, 225, 227, 229, 230, 231, 232, 397, 403, 412, 421, 449, 531, 532, 578, 579, 582, 583, 604, 607, 783, 785, 987, 996, 1004, 1009, 1015, 1018, 1021, 1027, 1048, 1051, 1054, 1057, 1060, 1086, 1181, 1185, 1186], "weight": [106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 173, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 212, 214, 216, 218, 223, 224, 225, 227, 228, 229, 230, 231, 232, 264, 266, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 297, 300, 302, 304, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 319, 321, 322, 323, 325, 327, 328, 329, 331, 333, 334, 336, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 360, 362, 364, 367, 370, 372, 375, 376, 377, 379, 380, 381, 382, 383, 384, 390, 394, 397, 400, 403, 406, 409, 412, 415, 418, 421, 428, 433, 436, 437, 438, 742, 962, 964, 967, 969, 987, 991, 992, 993, 994, 996, 1001, 1004, 1009, 1015, 1018, 1021, 1024, 1027, 1050, 1051, 1181, 1185, 1191, 1195, 1196], "appli": [106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 214, 216, 218, 223, 224, 225, 227, 229, 230, 231, 232, 390, 397, 403, 412, 421, 431, 433, 632, 683, 742, 752, 755, 758, 761, 764, 767, 773, 776, 779, 784, 962, 964, 967, 969, 987, 996, 1004, 1009, 1015, 1018, 1021, 1027, 1045, 1048, 1051, 1054, 1057, 1060, 1185], "via": [106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 223, 224, 225, 227, 229, 230, 231, 232, 397, 403, 412, 421, 973, 974, 987, 996, 1004, 1009, 1015, 1018, 1021, 1027, 1180, 1182, 1198, 1200, 1201, 1202], "hadamard": [106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 223, 224, 225, 227, 229, 230, 231, 232, 397, 403, 412, 421, 987, 996, 1004, 1009, 1015, 1018, 1021, 1027], "can": [106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 214, 216, 218, 223, 224, 225, 227, 229, 230, 231, 232, 235, 237, 239, 241, 246, 248, 255, 257, 259, 261, 334, 337, 397, 403, 412, 421, 572, 604, 607, 661, 676, 677, 679, 713, 722, 726, 749, 752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 987, 996, 1004, 1009, 1015, 1018, 1021, 1027, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1082, 1083, 1094, 1095, 1098, 1101, 1166, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203], "minim": [106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 212, 214, 216, 218, 223, 224, 225, 227, 229, 230, 231, 232, 264, 266, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 304, 307, 308, 309, 311, 313, 314, 315, 317, 319, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 360, 362, 364, 367, 370, 372, 375, 376, 377, 379, 381, 382, 383, 384, 397, 403, 412, 421, 720, 793, 918, 920, 923, 925, 928, 930, 932, 933, 934, 935, 937, 939, 941, 943, 946, 948, 951, 953, 955, 957, 959, 987, 992, 993, 994, 996, 1001, 1004, 1009, 1015, 1018, 1021, 1027, 1086, 1181, 1188, 1189, 1191, 1195], "maxim": [106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 214, 216, 218, 223, 224, 225, 227, 229, 230, 231, 232, 339, 340, 341, 343, 397, 403, 412, 421, 720, 742, 987, 992, 993, 994, 996, 1004, 1009, 1015, 1018, 1021, 1027, 1166, 1181, 1183, 1185, 1188, 1189, 1191], "respect": [106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 223, 224, 225, 227, 229, 230, 231, 232, 397, 403, 412, 421, 735, 737, 738, 987, 992, 993, 994, 996, 1004, 1009, 1015, 1018, 1021, 1027, 1035, 1180, 1181, 1185, 1190, 1192, 1193, 1197, 1199], "callabl": [106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 173, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 212, 214, 216, 218, 223, 224, 225, 227, 229, 230, 231, 232, 264, 266, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 304, 307, 308, 309, 311, 313, 314, 315, 317, 319, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 360, 362, 364, 367, 370, 372, 375, 376, 377, 379, 381, 382, 383, 384, 442, 496, 962, 964, 967, 969, 987, 996, 1001, 1004, 1009], "transform": [106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 212, 214, 216, 218, 223, 224, 225, 227, 229, 230, 231, 232, 264, 266, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 304, 307, 308, 309, 311, 313, 314, 315, 317, 319, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 360, 362, 364, 367, 370, 372, 375, 376, 377, 379, 381, 382, 383, 384, 385, 387, 388, 389, 390, 391, 427, 428, 429, 430, 431, 432, 433, 434, 435, 1032, 1035, 1038, 1041, 1168, 1181, 1183, 1184, 1186, 1197], "latent": [106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 223, 224, 225, 227, 229, 230, 231, 232, 264, 266, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 299, 300, 302, 304, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 319, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 333, 334, 336, 337, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 351, 352, 354, 355, 356, 357, 358, 360, 362, 364, 367, 370, 372, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 387, 389, 391, 430, 432, 1181, 1183, 1184], "space": [106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 212, 214, 216, 218, 220, 223, 224, 225, 227, 229, 230, 231, 232, 235, 236, 239, 240, 243, 246, 247, 255, 259, 260, 264, 266, 268, 269, 270, 271, 273, 275, 276, 277, 279, 280, 281, 282, 283, 285, 287, 288, 289, 291, 292, 293, 294, 295, 297, 300, 302, 304, 306, 307, 308, 309, 311, 312, 313, 314, 315, 317, 319, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 353, 354, 355, 356, 358, 360, 362, 364, 367, 370, 372, 375, 376, 377, 379, 381, 382, 383, 384, 385, 394, 397, 400, 403, 406, 409, 412, 415, 418, 421, 793, 918, 920, 923, 925, 928, 930, 932, 933, 934, 935, 937, 939, 941, 946, 948, 951, 952, 953, 955, 957, 959, 962, 964, 967, 969, 973, 974, 975, 976, 977, 978, 980, 981, 982, 987, 996, 1001, 1004, 1009, 1015, 1018, 1021, 1024, 1027, 1181, 1183, 1184, 1188, 1189, 1190, 1191, 1194, 1195, 1196], "signatur": [106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 223, 224, 225, 227, 229, 230, 231, 232, 1166], "def": [106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 223, 224, 225, 227, 229, 230, 231, 232, 1171, 1172, 1173, 1174, 1175, 1176, 1181, 1183, 1184, 1185, 1190, 1195], "decnvec": [106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 223, 224, 225, 227, 229, 230, 231, 232, 386, 387, 388, 389, 391, 1181, 1183, 1184], "latentvec": [106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 223, 224, 225, 227, 229, 230, 231, 232, 386, 387, 388, 389, 391, 1181, 1183, 1184], "do": [106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 223, 224, 225, 227, 229, 230, 231, 232, 264, 266, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 304, 307, 308, 309, 311, 313, 314, 315, 317, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 362, 364, 370, 372, 375, 376, 377, 379, 381, 382, 383, 384, 638, 644, 647, 650, 653, 656, 659, 733, 764, 767, 784, 973, 974, 982, 1035, 1038, 1041, 1086, 1110, 1113, 1166, 1169, 1171, 1172, 1174, 1175, 1176, 1177, 1178, 1179, 1181, 1183, 1184, 1185, 1186, 1197, 1200], "stuff": [106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 223, 224, 225, 227, 229, 230, 231, 232], "decis": [106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 212, 214, 216, 218, 220, 223, 224, 225, 227, 229, 230, 231, 232, 235, 236, 237, 239, 240, 241, 243, 246, 247, 248, 250, 255, 259, 260, 261, 264, 266, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 304, 307, 308, 309, 311, 313, 314, 315, 317, 319, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 360, 362, 364, 367, 370, 372, 375, 376, 377, 379, 381, 382, 383, 384, 387, 388, 389, 391, 394, 397, 400, 403, 406, 409, 412, 415, 418, 421, 951, 953, 962, 964, 967, 969, 987, 996, 1001, 1004, 1009, 1015, 1018, 1021, 1024, 1027, 1166, 1168, 1170, 1181, 1183, 1184, 1185, 1186, 1190, 1194, 1195, 1196, 1197, 1198, 1201], "ident": [106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 223, 224, 225, 227, 229, 230, 231, 232, 264, 266, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 304, 307, 308, 309, 311, 313, 314, 315, 317, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 362, 364, 370, 372, 375, 376, 377, 379, 381, 382, 383, 384, 389, 632, 635, 638, 641, 644, 683, 686, 689, 692, 695, 720, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1045, 1048, 1051, 1053, 1054, 1057, 1060, 1166, 1190, 1191, 1193, 1197, 1198], "empti": [106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 223, 224, 225, 227, 229, 230, 231, 232, 264, 266, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 304, 307, 308, 309, 311, 313, 314, 315, 317, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 362, 364, 370, 372, 375, 376, 377, 379, 381, 382, 383, 384, 388, 764, 767, 784, 1171, 1172, 1173, 1174, 1175, 1176, 1183, 1184, 1185, 1186], "inequ": [106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 223, 224, 225, 227, 229, 230, 231, 232, 264, 266, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 304, 307, 308, 309, 311, 313, 314, 315, 317, 319, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 360, 362, 364, 367, 370, 372, 375, 376, 377, 379, 381, 382, 383, 384, 394, 397, 400, 403, 406, 409, 412, 415, 418, 421, 430, 432, 987, 996, 1001, 1004, 1009, 1015, 1018, 1021, 1024, 1027, 1181, 1183, 1184, 1190, 1195, 1196], "constraint": [106, 109, 112, 113, 114, 116, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 143, 145, 148, 152, 153, 154, 155, 156, 158, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 173, 174, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 188, 189, 191, 192, 193, 194, 195, 197, 200, 203, 206, 209, 223, 224, 225, 226, 227, 229, 230, 231, 232, 264, 266, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 304, 307, 308, 309, 311, 313, 314, 315, 317, 319, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 360, 362, 364, 367, 370, 372, 375, 376, 377, 379, 381, 382, 383, 384, 394, 397, 400, 403, 406, 409, 412, 415, 418, 421, 430, 432, 735, 950, 951, 953, 954, 955, 983, 987, 996, 1001, 1004, 1009, 1015, 1018, 1021, 1024, 1027, 1181, 1183, 1184, 1190, 1191, 1195, 1196], "violat": [106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 223, 224, 225, 227, 229, 230, 231, 232, 264, 266, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 304, 307, 308, 309, 311, 313, 314, 315, 317, 319, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 360, 362, 364, 367, 370, 372, 375, 376, 377, 379, 381, 382, 383, 384, 394, 397, 400, 403, 406, 409, 412, 415, 418, 421, 951, 953, 983, 987, 996, 1001, 1004, 1009, 1015, 1018, 1021, 1024, 1027, 1181, 1183, 1184, 1190, 1195, 1196], "zero": [106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 223, 224, 225, 227, 229, 230, 231, 232, 264, 266, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 304, 307, 308, 309, 311, 313, 314, 315, 317, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 362, 364, 370, 372, 375, 376, 377, 379, 381, 382, 383, 384, 397, 403, 412, 421, 717, 752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 785, 788, 790, 792, 793, 987, 996, 1004, 1009, 1015, 1018, 1021, 1027, 1035, 1038, 1041, 1048, 1051, 1054, 1057, 1060, 1086, 1089, 1104, 1110, 1113, 1117, 1121, 1124, 1127, 1179, 1181, 1184, 1185, 1190, 1195, 1197], "nondomin": [106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 212, 214, 216, 218, 223, 224, 225, 227, 229, 230, 231, 232, 1181], "non": [106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 214, 216, 218, 223, 224, 225, 227, 229, 230, 231, 232, 264, 266, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 304, 307, 308, 309, 311, 313, 314, 315, 317, 319, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 360, 362, 364, 367, 370, 372, 375, 376, 377, 379, 381, 382, 383, 384, 390, 433, 629, 635, 638, 641, 644, 647, 650, 653, 656, 659, 741, 778, 779, 783, 785, 787, 790, 793, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 973, 974, 976, 983, 987, 992, 993, 994, 996, 1001, 1004, 1009, 1035, 1038, 1041, 1048, 1051, 1054, 1057, 1060, 1083, 1086, 1089, 1104, 1110, 1113, 1117, 1121, 1124, 1127, 1179, 1181, 1185, 1186, 1188, 1189, 1190, 1191, 1192, 1195, 1202], "domin": [106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 223, 224, 225, 227, 229, 230, 231, 232, 390, 433, 741, 751, 752, 754, 755, 763, 764, 783, 973, 974, 976, 1181, 1201], "mat": [106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 214, 216, 218, 223, 224, 225, 227, 229, 230, 231, 232, 334, 337, 390, 428, 429, 431, 433, 434, 435, 439, 620, 621, 623, 624, 626, 627, 629, 630, 632, 633, 635, 636, 638, 639, 641, 642, 644, 645, 647, 648, 650, 651, 653, 654, 656, 657, 659, 660, 662, 663, 665, 666, 668, 669, 671, 672, 674, 675, 677, 678, 680, 681, 683, 684, 686, 687, 689, 690, 692, 693, 695, 696, 698, 699, 701, 702, 704, 705, 707, 708, 710, 711, 713, 745, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1083, 1095, 1110, 1113, 1117, 1121, 1124, 1127, 1177, 1178, 1179, 1180, 1181, 1183, 1184, 1185, 1192, 1193, 1197, 1198, 1201, 1202], "coordin": [106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 223, 224, 225, 227, 229, 230, 231, 232, 390, 433, 1198], "npt": [106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 223, 224, 225, 227, 229, 230, 231, 232, 390, 428, 433, 742], "dimens": [106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 223, 224, 225, 227, 229, 230, 231, 232, 390, 433, 448, 449, 551, 552, 620, 623, 626, 629, 632, 635, 638, 641, 644, 647, 650, 653, 656, 659, 662, 665, 668, 671, 674, 677, 680, 683, 686, 689, 692, 695, 698, 701, 704, 707, 710, 713, 727, 728, 729, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1083, 1086, 1089, 1095, 1104, 1110, 1113, 1117, 1121, 1124, 1127, 1193, 1197, 1198, 1201, 1202], "distanc": [106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 212, 214, 216, 218, 223, 224, 225, 227, 229, 230, 231, 232, 307, 308, 309, 311, 313, 314, 315, 317, 334, 337, 390, 433, 1086, 1089, 1092, 1098, 1101, 1104, 1107, 1181], "vec_wt": [106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 223, 224, 225, 227, 229, 230, 231, 232, 390], "repeat": [106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 223, 224, 225, 227, 229, 230, 231, 232, 1183, 1184, 1190, 1195, 1196, 1197], "global": [106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 223, 224, 225, 227, 229, 230, 231, 232, 716, 719, 720, 722], "binaryoptimizationalgorithm": [106, 109, 112, 118, 124, 130, 136, 152, 161, 167, 176, 182, 191, 223, 229, 918, 921, 928, 1194], "algorithm": [106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 212, 214, 216, 218, 223, 224, 225, 227, 229, 230, 231, 232, 915, 916, 917, 918, 919, 920, 922, 923, 924, 925, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 945, 946, 947, 948, 951, 952, 953, 955, 956, 957, 958, 959, 961, 962, 963, 964, 966, 967, 968, 969, 970, 979, 980, 1168, 1169, 1171, 1172, 1173, 1174, 1175, 1176, 1183, 1184, 1186, 1188, 1189, 1191, 1195, 1203], "multi": [106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 172, 173, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 212, 213, 214, 215, 216, 217, 218, 220, 223, 224, 225, 227, 229, 230, 231, 232, 332, 334, 335, 337, 988, 997, 1005, 1010, 1168, 1170, 1188, 1189, 1191], "opim": [106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 212, 216, 218, 223, 224, 225, 227, 229, 230, 231, 232, 1181], "latentfn": [106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 223, 224, 225, 227, 229, 230, 231, 232, 264, 266, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 304, 307, 308, 309, 311, 313, 314, 315, 317, 319, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 360, 362, 364, 367, 370, 372, 375, 376, 377, 379, 381, 382, 383, 384, 1181], "mosolv": [106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 223, 224, 225, 227, 229, 230, 231, 232, 1181, 1188, 1189, 1191], "gmat": [106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 212, 214, 216, 218, 220, 223, 224, 225, 227, 229, 230, 231, 232, 313, 314, 315, 316, 317, 752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1064, 1067, 1070, 1073, 1076, 1079, 1110, 1111, 1113, 1114, 1115, 1117, 1118, 1119, 1121, 1122, 1124, 1125, 1127, 1128, 1178, 1181, 1183, 1184, 1185, 1186, 1188, 1189, 1190, 1191, 1192, 1198], "ptdf": [106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 212, 214, 216, 218, 220, 223, 224, 225, 227, 229, 230, 231, 232, 1181, 1183, 1184, 1185, 1186, 1188, 1189, 1191], "bvmat": [106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 212, 214, 216, 218, 220, 223, 224, 225, 227, 229, 230, 231, 232, 1032, 1033, 1035, 1036, 1038, 1039, 1041, 1042, 1181, 1183, 1184, 1185, 1186, 1188, 1189, 1191], "pareto": [106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 212, 214, 216, 218, 220, 223, 224, 225, 227, 229, 230, 231, 232, 742, 962, 967, 1181, 1184], "frontier": [106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 212, 214, 216, 218, 220, 223, 224, 225, 227, 229, 230, 231, 232, 962, 967, 1181, 1184], "sel_config": [106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 148, 152, 153, 154, 156, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 209, 212, 214, 216, 218, 220, 223, 225, 229, 230, 231, 232, 962, 967], "q": [106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 148, 152, 153, 154, 156, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 209, 212, 214, 216, 218, 220, 223, 225, 229, 230, 231, 232, 752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784], "search": [106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 148, 152, 153, 154, 156, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 209, 212, 214, 216, 218, 220, 223, 224, 225, 227, 229, 230, 231, 232, 266, 268, 269, 270, 271, 273, 275, 276, 277, 279, 280, 281, 282, 283, 285, 287, 288, 289, 291, 292, 293, 294, 295, 297, 300, 304, 306, 307, 308, 309, 311, 312, 313, 314, 315, 317, 321, 322, 323, 325, 327, 328, 329, 331, 339, 340, 341, 343, 345, 346, 347, 349, 353, 354, 355, 356, 358, 364, 372, 375, 376, 377, 379, 394, 400, 409, 418, 572, 793, 918, 920, 923, 925, 928, 930, 932, 933, 934, 935, 937, 939, 941, 946, 948, 951, 952, 953, 955, 957, 959, 962, 964, 967, 969, 1048, 1051, 1054, 1057, 1060, 1170, 1181, 1188, 1189, 1191], "nselindiv": [106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 223, 224, 225, 227, 229, 230, 231, 232, 1181], "problem": [106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 212, 214, 216, 218, 220, 223, 224, 225, 227, 229, 230, 231, 232, 262, 264, 266, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 300, 302, 304, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 350, 352, 353, 354, 355, 356, 357, 358, 360, 362, 364, 367, 370, 372, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 394, 397, 400, 403, 406, 409, 412, 415, 418, 421, 918, 920, 923, 925, 928, 930, 932, 933, 934, 935, 937, 939, 941, 943, 946, 948, 951, 953, 955, 957, 959, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 987, 991, 992, 993, 994, 996, 1002, 1004, 1009, 1015, 1018, 1021, 1024, 1027, 1168, 1183, 1184, 1185, 1186, 1188, 1189, 1191, 1203], "definit": [106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 214, 216, 218, 223, 224, 225, 227, 229, 230, 231, 232, 233, 251, 254, 256, 334, 604, 607, 752, 755, 758, 761, 764, 767, 770, 776, 783, 784, 918, 920, 923, 925, 928, 930, 932, 933, 934, 935, 937, 939, 941, 943, 946, 948, 951, 953, 955, 957, 959, 1180, 1181, 1190, 1195, 1197, 1199, 1200, 1201, 1202], "binarymateselectionproblem": [106, 223, 375], "necessari": [106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 223, 224, 225, 227, 229, 230, 231, 232, 982, 1186, 1198, 1200], "binarymateselectionconfigur": [106, 223], "sosolv": [106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 223, 224, 225, 227, 229, 230, 231, 232, 1181], "solv": [106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 223, 224, 225, 227, 229, 230, 231, 232, 783, 785, 1168, 1183, 1184, 1186, 1190], "solut": [106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 223, 224, 225, 227, 229, 230, 231, 232, 264, 266, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 304, 307, 308, 309, 311, 313, 314, 315, 317, 319, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 360, 362, 364, 367, 370, 372, 375, 376, 377, 379, 381, 382, 383, 384, 392, 394, 397, 400, 403, 405, 406, 409, 412, 414, 415, 418, 421, 431, 783, 918, 920, 923, 925, 928, 930, 932, 933, 934, 935, 937, 939, 941, 943, 946, 948, 951, 952, 953, 955, 957, 959, 976, 977, 978, 983, 987, 996, 1001, 1004, 1009, 1015, 1018, 1021, 1025, 1027, 1168, 1181, 1185, 1190, 1194, 1203], "pose": [106, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 132, 134, 136, 137, 138, 140, 143, 145, 148, 152, 153, 154, 156, 158, 161, 162, 163, 165, 167, 168, 169, 171, 174, 176, 177, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 195, 197, 200, 203, 206, 209, 223, 224, 225, 227, 229, 230, 231, 232], "binarymateselectionprotocol": [107, 223, 1181], "selectionprotocol": [109, 148, 158, 200, 204, 209, 220], "binaryselectionproblem": [109, 112, 118, 124, 130, 136, 152, 161, 167, 176, 182, 191, 229, 264, 267, 269, 275, 281, 287, 293, 307, 313, 321, 327, 339, 345, 354], "binaryselectionconfigur": [109, 112, 118, 124, 130, 136, 152, 161, 167, 176, 182, 191, 229, 235], "estimatedbreedingvalueselect": [112, 113, 114, 115, 116, 1181, 1183, 1184, 1185, 1186], "unscal": [112, 113, 114, 115, 116, 136, 137, 138, 139, 140, 176, 177, 178, 179, 180, 752, 755, 758, 761, 764, 767, 773, 776, 779, 784, 1032, 1035, 1038, 1041, 1183, 1184, 1185, 1186, 1188, 1191], "estimatedbreedingvalueselectionmixin": [112, 113, 114, 116], "subset": [112, 116, 118, 119, 120, 122, 124, 128, 130, 134, 136, 140, 143, 152, 156, 161, 165, 167, 171, 174, 180, 186, 189, 195, 205, 206, 208, 209, 227, 229, 232, 235, 238, 239, 245, 246, 258, 259, 260, 273, 275, 276, 277, 279, 285, 286, 291, 297, 300, 311, 317, 321, 322, 323, 325, 327, 328, 329, 331, 343, 345, 346, 347, 349, 358, 372, 375, 376, 377, 379, 380, 384, 394, 397, 400, 403, 409, 412, 418, 421, 917, 918, 922, 923, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 945, 946, 951, 953, 955, 956, 957, 958, 959, 961, 962, 966, 967, 968, 969, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 987, 996, 1004, 1009, 1181, 1184, 1185, 1186, 1190, 1194, 1195, 1196], "expect": [112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 142, 143, 151, 160, 161, 162, 163, 164, 165, 166, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 223, 224, 225, 226, 227, 229, 230, 231, 232, 274, 275, 276, 277, 278, 279, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 533, 534, 547, 550, 551, 553, 554, 555, 556, 573, 574, 576, 577, 584, 586, 589, 797, 800, 803, 809, 812, 814, 817, 819, 825, 827, 829, 831, 833, 836, 840, 843, 852, 855, 857, 860, 868, 870, 872, 874, 876, 879, 914, 1086, 1104, 1110, 1113, 1117, 1121, 1124, 1127, 1160, 1181, 1186, 1188, 1189, 1191, 1193, 1199, 1202], "uncent": [112, 113, 114, 115, 116, 136, 137, 138, 139, 140], "ebv": [112, 113, 114, 115, 116, 269, 270, 271, 272, 273, 281, 282, 283, 284, 285, 339, 340, 341, 342, 343, 1181, 1184, 1191], "integerselectionprotocol": [113, 119, 125, 131, 137, 145, 149, 153, 162, 168, 177, 183, 192, 1181], "integ": [113, 125, 131, 137, 144, 145, 147, 148, 153, 162, 168, 177, 183, 192, 224, 230, 240, 270, 276, 282, 288, 294, 304, 308, 314, 319, 321, 322, 327, 328, 339, 340, 346, 355, 367, 376, 472, 482, 483, 487, 713, 717, 742, 744, 764, 767, 784, 924, 925, 1001, 1018, 1035, 1038, 1041, 1048, 1051, 1054, 1057, 1060, 1086, 1089, 1104, 1110, 1181, 1193, 1194, 1195, 1196, 1197, 1198, 1201, 1202], "integeroptimizationalgorithm": [113, 119, 125, 131, 137, 145, 148, 153, 162, 168, 177, 183, 192, 224, 230, 923, 926, 930, 1194], "integerselectionproblem": [113, 119, 125, 131, 137, 148, 153, 162, 168, 177, 183, 192, 230, 270, 275, 276, 282, 288, 294, 302, 305, 308, 314, 322, 328, 340, 346, 355], "integerselectionconfigur": [113, 119, 125, 131, 137, 148, 153, 162, 168, 177, 183, 192, 230, 239], "realselectionprotocol": [114, 120, 126, 132, 138, 154, 163, 169, 178, 184, 193, 197, 201, 1181], "realoptimizationalgorithm": [114, 120, 126, 132, 138, 154, 163, 169, 178, 184, 193, 197, 200, 225, 231, 937, 946, 949, 1194], "realselectionconfigur": [114, 120, 126, 132, 138, 154, 163, 169, 178, 184, 193, 200, 231, 246], "mixin": [115, 242, 243, 249, 250, 367, 378, 1134], "common": [115, 158, 203, 272, 278, 284, 290, 296, 299, 310, 316, 324, 330, 333, 336, 342, 348, 351, 357, 378, 1179, 1188, 1192, 1193, 1196, 1197, 1198, 1201], "subsetselectionprotocol": [116, 122, 128, 134, 140, 143, 156, 165, 171, 174, 180, 186, 189, 195, 206, 210, 1181], "subsetoptimizationalgorithm": [116, 122, 128, 134, 140, 143, 156, 165, 171, 174, 180, 186, 189, 195, 206, 209, 227, 232, 932, 933, 934, 935, 939, 941, 951, 953, 955, 957, 960, 1194], "subsetselectionconfigur": [116, 122, 128, 134, 140, 143, 156, 165, 171, 174, 180, 186, 189, 195, 209, 232, 241, 259], "embv": [117, 118, 119, 120, 121, 122, 274, 275, 276, 277, 278, 279, 375, 376, 377, 379, 1181], "expectedmaximumbreedingvalueselect": [118, 119, 120, 121, 122, 1181], "mateprot": [118, 119, 120, 121, 122, 1185], "unique_par": [118, 119, 120, 121, 122, 182, 183, 184, 185, 186, 214, 223, 224, 225, 226, 227, 730], "expectedmaximumbreedingvalueselectionmixin": [118, 119, 120, 122], "should": [118, 119, 120, 121, 122, 182, 183, 184, 185, 186, 223, 224, 225, 226, 227, 264, 266, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 304, 307, 308, 309, 311, 313, 314, 315, 317, 319, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 360, 362, 364, 367, 370, 372, 375, 376, 377, 379, 381, 382, 383, 384, 629, 635, 638, 641, 647, 650, 653, 659, 662, 665, 674, 677, 686, 689, 692, 698, 701, 704, 710, 730, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 982, 987, 996, 1001, 1004, 1009, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1083, 1086, 1095, 1110, 1113, 1117, 1121, 1124, 1127, 1166, 1194], "uniqu": [118, 119, 120, 121, 122, 182, 183, 184, 185, 186, 214, 223, 224, 225, 226, 227, 235, 237, 239, 241, 246, 248, 255, 257, 259, 261, 632, 683, 730, 1183, 1184, 1185], "realselectionproblem": [120, 126, 132, 138, 154, 163, 169, 178, 184, 193, 200, 231, 271, 277, 283, 289, 295, 309, 315, 323, 329, 341, 347, 356, 360, 362, 365], "subsetselectionproblem": [122, 128, 134, 140, 156, 165, 171, 174, 180, 186, 195, 209, 232, 269, 270, 271, 273, 279, 281, 282, 283, 285, 291, 293, 294, 295, 297, 300, 311, 317, 325, 331, 334, 337, 339, 340, 341, 343, 349, 352, 354, 355, 356, 358, 370, 373, 381, 382, 383, 384], "convent": [123, 135, 269, 270, 271, 273, 280, 281, 282, 283, 285, 292, 293, 294, 295, 297, 354, 355, 356, 360, 1185], "familyestimatedbreedingvalueselect": [124, 125, 126, 127, 128, 1181], "familyestimatedbreedingvalueselectionmixin": [124, 125, 126, 128], "constrainedselectionprotocol": [124, 125, 126, 128, 223, 224, 225, 227], "semiabstract": [127, 133], "gwgebv": [129, 130, 131, 132, 133, 134, 229, 230, 231, 232, 287, 288, 289, 290, 291, 381, 382, 383, 384], "generalizedweightedgenomicestimatedbreedingvalueselect": [130, 131, 132, 133, 134], "alpha": [130, 131, 132, 133, 134, 229, 230, 231, 232, 1191], "generalizedweightedgenomicestimatedbreedingvalueselectionmixin": [130, 131, 132, 134], "estiamt": [130, 131, 132, 134], "expon": [130, 131, 132, 133, 134, 229, 230, 231, 232], "adjust": [130, 131, 132, 133, 134, 229, 230, 231, 232], "allel": [130, 131, 132, 133, 134, 173, 174, 212, 214, 216, 218, 229, 230, 231, 232, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 333, 334, 336, 337, 423, 424, 425, 426, 653, 659, 752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 973, 974, 1051, 1057, 1060, 1110, 1113, 1117, 1124, 1183, 1184, 1185, 1186, 1202], "rang": [130, 131, 132, 133, 134, 229, 230, 231, 232, 390, 433, 517, 713, 747, 748, 1032, 1035, 1038, 1041, 1086, 1089, 1104, 1168, 1170, 1177, 1178, 1179, 1180, 1181, 1183, 1184, 1185, 1186, 1191, 1192, 1193, 1198, 1200, 1201, 1202], "genomicestimatedbreedingvalueselect": [136, 137, 138, 139, 140, 1181, 1185, 1188], "genomicestimatedbreedingvalueselectionmixin": [136, 137, 138, 140], "gebv": [136, 137, 138, 139, 140, 269, 270, 271, 273, 281, 282, 283, 285, 293, 294, 295, 296, 297, 354, 355, 356, 358, 360, 752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 1181, 1183, 1184, 1185, 1186, 1187, 1191, 1192], "builder": [141, 143, 298, 300, 1181], "gb": [141, 143, 298, 299, 300, 1181], "genotypebuilderselect": [142, 143, 1181], "docstr": [142, 212, 237, 241, 248, 252, 261, 264, 302, 319, 334, 337, 352, 360, 362, 370, 381, 382, 383, 384, 638, 784, 889, 892, 895, 898, 901, 1051, 1137, 1138, 1141, 1149, 1150, 1155, 1156], "genotypebuilderbaseselect": 142, "nbestfndr": [142, 143, 299, 300], "best": [142, 143, 158, 203, 300, 951, 1169, 1181, 1183, 1184, 1185, 1186], "nhaploblk": [142, 143, 182, 183, 184, 185, 186, 188, 189, 737, 738], "haplotyp": [142, 143, 182, 183, 184, 185, 186, 188, 189, 299, 300, 351, 352, 629, 653, 659, 674, 704, 710, 734, 735, 736, 737, 738, 1083, 1095, 1110, 1113, 1117, 1120, 1121, 1124, 1126, 1127, 1201, 1202], "block": [142, 143, 182, 183, 184, 185, 186, 188, 189, 300, 352, 735, 737, 738, 752, 755, 758, 761, 764, 767, 784, 1168, 1181, 1183, 1184, 1186, 1193, 1197, 1198], "genotypebuilderselectionmixin": 143, "integermateselectionsolut": [145, 224, 401], "integermateselectionproblem": [145, 224, 376], "integermateselectionconfigur": [145, 224], "integermateselectionprotocol": [146, 224, 1181], "heterozygos": [151, 160, 161, 162, 163, 164, 165, 166, 175, 181, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 1110, 1113, 1117, 1121, 1124, 1127, 1186, 1202], "l2normgenomicselect": [152, 153, 154, 155, 156], "cmatfcti": [152, 153, 154, 155, 156, 167, 168, 169, 170, 171, 176, 177, 178, 179, 180, 313, 314, 315, 316, 317, 1184, 1191], "l2normgenomicselectionmixin": [152, 153, 154, 156], "l2": [152, 153, 154, 155, 156, 312, 313, 314, 315, 316, 317], "norm": [152, 153, 154, 155, 156, 211, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 390, 433, 1190, 1192], "l2g": [152, 153, 154, 155, 156, 312, 313, 314, 315, 316, 317], "coancestrymatrixfactori": [152, 153, 154, 155, 156, 167, 168, 169, 170, 171, 176, 177, 178, 179, 180, 1065, 1067, 1073, 1076, 1079, 1191], "coancestri": [152, 153, 154, 155, 156, 167, 168, 169, 170, 171, 176, 177, 178, 179, 180, 760, 761, 1043, 1044, 1045, 1047, 1048, 1051, 1053, 1054, 1056, 1057, 1059, 1060, 1062, 1063, 1064, 1066, 1067, 1069, 1070, 1072, 1073, 1075, 1076, 1078, 1079, 1168, 1184, 1190, 1191, 1192, 1203], "factori": [152, 153, 154, 155, 156, 167, 168, 169, 170, 171, 176, 177, 178, 179, 180, 223, 224, 225, 226, 227, 881, 883, 886, 903, 904, 907, 1062, 1063, 1064, 1066, 1067, 1069, 1070, 1072, 1073, 1075, 1076, 1078, 1079, 1184, 1191], "sever": [158, 203, 991, 1024, 1132, 1133, 1134, 1135, 1137, 1138, 1143, 1144, 1149, 1150, 1155, 1156, 1168, 1169, 1170, 1173, 1177, 1180, 1185, 1192, 1193, 1194, 1195, 1197, 1198, 1199, 1200, 1201, 1202], "kei": [158, 203, 572, 573, 629, 635, 638, 641, 644, 647, 650, 653, 656, 659, 662, 674, 680, 686, 689, 692, 695, 698, 701, 704, 707, 710, 733, 764, 767, 784, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1083, 1086, 1089, 1095, 1104, 1110, 1113, 1117, 1121, 1124, 1127, 1168, 1193, 1197, 1198, 1200, 1201, 1202], "most": [158, 203, 214, 216, 218, 1166, 1168, 1179, 1181, 1186, 1192, 1193, 1197, 1199, 1201], "constrain": [158, 203, 918, 920, 923, 925, 928, 930, 932, 933, 934, 935, 937, 939, 941, 942, 943, 946, 948, 951, 953, 955, 957, 959, 1187], "optimizationalgorithm": [158, 203, 214, 216, 218, 920, 925, 944, 948, 959, 962, 964, 965, 967, 969, 1194], "identifi": [158, 203, 951, 1181, 1185, 1186, 1196, 1197], "find": [158, 203, 742, 1045, 1048, 1051, 1054, 1057, 1060, 1190], "among": [158, 203, 572, 1168], "selectionconfigur": [158, 203, 237, 241, 243, 248, 253, 255, 257, 261, 1186], "constrainedmateselectionprotocol": 159, "meanexpectedheterozygosityselect": [161, 162, 163, 164, 165], "meanexpectedheterozygosityselectionmixin": [161, 162, 163, 165], "meangenomicrelationshipselect": [167, 168, 169, 170, 171], "meangenomicrelationshipselectionmixin": [167, 168, 169, 171], "relationship": [167, 168, 169, 170, 171, 307, 308, 309, 311, 313, 314, 315, 317, 327, 328, 329, 330, 331, 339, 340, 341, 343, 786, 789, 793, 1043, 1050, 1051, 1057, 1060, 1184, 1191, 1192, 1198, 1201], "multiobjectivegenomicselect": [173, 174, 214], "target": [173, 174, 212, 214, 216, 218, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 333, 334, 336, 337, 423, 424, 425, 426, 721, 1086], "frequenc": [173, 174, 212, 214, 216, 218, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 333, 334, 336, 337, 423, 424, 425, 426, 752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 1051, 1057, 1060, 1110, 1113, 1117, 1121, 1124, 1127, 1183, 1184, 1185, 1186, 1190, 1192, 1202], "multiobjectivegenomicselectionmixin": 174, "ohv": [174, 182, 183, 184, 185, 186, 189, 191, 192, 193, 195, 344, 345, 346, 347, 348, 349, 1181], "optimalcontributionselect": [176, 177, 178, 179, 180, 1181, 1184, 1191], "optimalcontributionselectionmixin": [176, 177, 178, 180], "contribut": [176, 177, 178, 179, 180, 269, 270, 271, 281, 282, 283, 293, 294, 295, 339, 340, 341, 342, 343, 354, 355, 356, 721, 797, 800, 803, 809, 812, 814, 817, 819, 825, 827, 829, 831, 833, 836, 840, 843, 852, 855, 857, 860, 868, 870, 872, 874, 876, 879, 1170, 1181, 1187, 1190, 1193], "oc": [176, 177, 178, 179, 180, 1191], "decent": [176, 177, 178, 179, 180], "optimalhaploidvalueselect": [182, 183, 184, 185, 186, 1181], "optimalhaploidvalueselectionmixin": [182, 183, 184, 186], "optimalpopulationvalueselect": [188, 189, 1181], "opv": [188, 345, 346, 347, 349, 350, 351, 352, 1181], "optimalpopulationvalueselectionmixin": 189, "randomselect": [191, 192, 193, 194, 195, 1181], "randomselectionmixin": [191, 192, 193, 195], "realmateselectionproblem": [197, 225, 377], "realmateselectionconfigur": [197, 225], "realmateselectionprotocol": [198, 225, 1181], "subsetmateselectionsolut": [206, 227, 419], "subsetmateselectionproblem": [206, 227, 334, 379], "subsetmateselectionconfigur": [206, 227], "subsetmateselectionprotocol": [207, 227, 1181], "unconstrainedgeneralized1normgenomicselect": 212, "weight_absolut": [212, 214, 218], "target_posit": [212, 214, 218], "objfn_tran": [212, 214, 216, 218], "objfn_trans_kwarg": [212, 214, 216, 218], "objfn_wt": [212, 214, 216, 218, 433, 962, 964, 967, 969, 1185], "unconstrainedselectionprotocol": [212, 214, 216, 218, 221], "unconstrainedoptimizationalgorithm": [212, 214, 216, 218, 962, 965, 967, 969], "objfn": [212, 214, 216, 218, 220, 962, 964, 967, 969], "dataset": [212, 214, 216, 218, 1183, 1184, 1185, 1186], "Not": [212, 214, 216, 218, 387, 388, 389, 390, 391, 428, 429, 430, 432, 433, 434, 435, 784, 992], "lineargenomicmodel": [212, 758, 761, 770, 777], "linear": [212, 214, 216, 218, 752, 755, 758, 761, 764, 767, 769, 770, 775, 776, 778, 779, 784, 797, 800, 840, 843, 1086, 1089, 1104, 1177, 1180, 1181, 1183, 1184, 1186, 1188, 1189, 1191, 1193, 1200], "outfn": [212, 214, 216, 218], "static": [212, 214, 216, 218, 220, 620, 623, 632, 1183, 1184, 1186, 1188, 1189, 1190], "objfn_stat": [212, 214, 216, 218, 220], "tran": [212, 214, 216, 218, 386, 387, 388, 389, 390, 391], "score": [212, 214, 216, 218, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 307, 308, 309, 311, 313, 314, 315, 317, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 345, 346, 347, 349, 352, 354, 355, 356, 358, 360, 375, 376, 377, 379, 381, 382, 383, 384, 752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 951, 952, 953, 983, 1181], "utopian": [212, 307, 308, 309, 311, 313, 314, 315, 317], "goal": [212, 214, 216, 218, 334, 337, 987, 996, 1004, 1009, 1170], "row": [212, 214, 216, 218, 622, 629, 635, 638, 641, 644, 647, 650, 653, 656, 659, 662, 674, 677, 680, 686, 689, 692, 695, 698, 701, 704, 707, 710, 764, 767, 784, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1083, 1086, 1089, 1095, 1104, 1110, 1113, 1117, 1121, 1124, 1127, 1185, 1197, 1198, 1201], "n": [212, 214, 216, 218, 269, 270, 271, 273, 281, 282, 283, 285, 287, 288, 289, 290, 291, 293, 294, 295, 297, 299, 300, 307, 308, 309, 310, 311, 313, 314, 315, 317, 321, 322, 323, 325, 327, 328, 329, 331, 333, 334, 336, 337, 339, 340, 341, 343, 351, 352, 354, 355, 356, 358, 381, 382, 383, 384, 626, 629, 632, 635, 638, 641, 644, 647, 650, 653, 656, 659, 662, 674, 680, 683, 686, 689, 692, 695, 698, 701, 704, 707, 710, 717, 721, 722, 727, 728, 729, 737, 752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 793, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1083, 1086, 1089, 1095, 1104, 1110, 1113, 1117, 1121, 1124, 1127, 1190, 1201, 1202], "p": [212, 214, 216, 218, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 333, 334, 336, 337, 626, 629, 632, 635, 638, 641, 644, 647, 650, 653, 656, 659, 683, 721, 722, 735, 736, 737, 738, 752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 979, 980, 1035, 1038, 1041, 1048, 1051, 1054, 1057, 1060, 1083, 1110, 1113, 1117, 1124, 1190, 1192, 1201, 1202], "t": [212, 214, 216, 218, 269, 270, 271, 273, 275, 276, 277, 278, 279, 281, 282, 283, 285, 287, 288, 289, 290, 291, 293, 294, 295, 297, 299, 300, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 334, 337, 339, 340, 341, 343, 345, 346, 347, 348, 349, 351, 352, 354, 355, 356, 358, 360, 375, 376, 377, 378, 379, 381, 382, 383, 384, 424, 425, 426, 437, 438, 638, 644, 650, 656, 737, 752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 911, 913, 979, 980, 1032, 1035, 1038, 1041, 1181, 1183, 1184, 1185, 1186, 1190], "marker": [212, 214, 216, 218, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 333, 334, 336, 337, 424, 425, 426, 436, 437, 438, 735, 736, 737, 738, 752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 781, 784, 785, 786, 791, 1051, 1057, 1060, 1083, 1086, 1089, 1095, 1104, 1110, 1113, 1117, 1124, 1168, 1177, 1178, 1179, 1180, 1181, 1183, 1184, 1186, 1188, 1189, 1190, 1191, 1192, 1193, 1198, 1199], "alter": [212, 214, 216, 218], "adher": [212, 214, 216, 218, 1166, 1192], "standard": [212, 214, 216, 218, 334, 555, 1032, 1035, 1038, 1041, 1103, 1104, 1169, 1170, 1181, 1185, 1186], "accept": [212, 214, 216, 218, 454, 525, 588, 1179, 1180, 1192, 1200], "scalar": [212, 214, 216, 218, 220, 793, 1190], "dist": 212, "objfn_vec": [212, 214, 216, 218, 220], "objfn_vec_stat": [212, 214, 216, 218, 220], "j": [212, 214, 216, 218, 220, 1191], "cannot": [212, 214, 216, 218, 334, 337, 572, 722, 1048, 1051, 1054, 1057, 1060, 1133], "unconstrainedmultiobjectivegenomicm": 214, "nconfig": 214, "vmatfcti": [214, 223, 224, 225, 226, 227], "gmapfn": [214, 223, 224, 225, 226, 227, 797, 803, 809, 814, 819, 825, 829, 833, 840, 846, 852, 857, 862, 868, 872, 876, 883, 886, 889, 892, 895, 898, 901, 904, 907, 1083, 1095, 1110, 1113, 1117, 1124, 1183, 1184, 1185, 1186, 1193], "mem": [214, 797, 800, 803, 806, 809, 812, 814, 817, 825, 827, 829, 831, 840, 843, 846, 849, 852, 855, 857, 860, 868, 870, 872, 874, 883, 886, 889, 892, 895, 898, 901], "1024": [214, 809, 814, 825, 829, 852, 857, 868, 872, 889, 892, 895, 898, 901], "todo": [214, 216, 218], "formula": [214, 216, 218, 808, 811, 813, 816, 824, 826, 828, 830, 851, 854, 856, 859, 867, 869, 871, 873], "methodologi": [214, 216, 218, 1170, 1171], "20": [214, 971, 1177, 1178, 1179, 1180, 1181, 1183, 1184, 1185, 1188, 1189, 1191, 1193, 1197, 1198, 1200, 1202], "would": [214, 914], "vmatcl": 214, "f3": [214, 809, 814, 825, 829, 852, 857, 868, 872, 910, 911, 912, 913, 914], "etc": [214, 300, 352, 677, 809, 814, 825, 829, 852, 857, 868, 872, 910, 911, 912, 913, 914, 1183, 1184], "inf": [214, 793, 809, 814, 825, 829, 852, 857, 868, 872, 910, 911, 912, 913, 914, 1086, 1089, 1104, 1181], "ssd": [214, 809, 814, 825, 829, 852, 857, 868, 872, 910, 911, 912, 913, 914], "geneticmapfunct": [214, 223, 224, 225, 226, 227, 797, 803, 809, 814, 819, 825, 829, 833, 840, 846, 852, 857, 862, 868, 872, 876, 883, 886, 889, 892, 895, 898, 901, 904, 907, 1083, 1093, 1095, 1098, 1101, 1110, 1113, 1117, 1124, 1199], "covari": [214, 752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 795, 796, 797, 799, 800, 802, 803, 805, 806, 808, 809, 811, 812, 813, 814, 816, 817, 818, 819, 821, 822, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 836, 840, 846, 852, 857, 868, 872, 883, 886, 889, 892, 895, 898, 901, 910, 911, 912, 1168, 1183, 1185, 1188, 1189, 1191], "induc": [214, 797, 803, 809, 814, 825, 829, 840, 846, 852, 857, 868, 872, 883, 886, 889, 892, 895, 898, 901, 1180], "recombin": [214, 797, 803, 809, 814, 819, 825, 829, 833, 840, 846, 852, 857, 862, 868, 872, 876, 883, 886, 889, 892, 895, 898, 901, 904, 907, 910, 911, 912, 913, 914, 1092, 1098, 1101, 1168, 1179, 1183, 1184, 1185, 1186, 1200, 1201, 1202], "memori": [214, 604, 607, 744, 797, 800, 803, 806, 809, 812, 814, 817, 825, 827, 829, 831, 840, 843, 846, 849, 852, 855, 857, 860, 868, 870, 872, 874, 883, 886, 889, 892, 895, 898, 901, 1201, 1202], "chunk": [214, 797, 800, 803, 806, 809, 812, 814, 817, 825, 827, 829, 831, 840, 843, 846, 849, 852, 855, 857, 860, 868, 870, 872, 874, 883, 886, 889, 892, 895, 898, 901, 1197], "size": [214, 264, 266, 302, 304, 319, 345, 346, 347, 349, 362, 364, 367, 370, 372, 451, 554, 604, 607, 721, 722, 744, 797, 800, 803, 806, 809, 812, 814, 817, 825, 827, 829, 831, 840, 843, 846, 849, 852, 855, 857, 860, 868, 870, 872, 874, 883, 886, 889, 892, 895, 898, 901, 984, 1177, 1178, 1179, 1180, 1181, 1183, 1184, 1185, 1186, 1188, 1189, 1191, 1192, 1193, 1197, 1198, 1201, 1202], "dure": [214, 797, 800, 803, 806, 809, 812, 814, 817, 825, 827, 829, 831, 840, 843, 846, 849, 852, 855, 857, 860, 868, 870, 872, 874, 883, 886, 889, 892, 895, 898, 901, 976, 977, 981], "limit": [214, 264, 266, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 304, 307, 308, 309, 311, 313, 314, 315, 317, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 362, 364, 370, 372, 375, 376, 377, 379, 381, 382, 383, 384, 604, 607, 752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 809, 814, 825, 829, 852, 857, 868, 872, 1183, 1184, 1185, 1186], "warn": [214, 809, 814, 825, 829, 852, 857, 868, 872], "might": [214, 809, 814, 825, 829, 852, 857, 868, 872], "alloc": [214, 620, 623, 626, 629, 632, 635, 638, 641, 644, 647, 650, 653, 656, 659, 662, 665, 668, 671, 674, 677, 680, 683, 686, 689, 692, 695, 698, 701, 704, 707, 710, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1083, 1095, 1110, 1113, 1117, 1121, 1124, 1127], "For": [214, 390, 433, 632, 683, 784, 809, 814, 825, 829, 852, 857, 868, 872, 973, 974, 1045, 1048, 1051, 1054, 1057, 1060, 1086, 1104, 1161, 1171, 1172, 1173, 1174, 1175, 1176, 1181, 1186, 1188, 1189, 1190, 1191, 1192, 1193, 1195, 1198], "refer": [214, 446, 447, 448, 449, 450, 451, 452, 454, 622, 629, 653, 659, 674, 704, 710, 809, 814, 825, 829, 852, 857, 868, 872, 941, 1083, 1086, 1089, 1095, 1104, 1110, 1113, 1117, 1121, 1124, 1127, 1170, 1177, 1185, 1191, 1192, 1193, 1197, 1198, 1200, 1201, 1202], "1024x1024": [214, 809, 814, 825, 829, 852, 857, 868, 872], "need": [214, 809, 814, 825, 829, 852, 857, 868, 872, 970, 1168, 1169, 1170, 1180, 1181, 1183, 1184, 1186, 1190, 1192, 1200], "mb": [214, 744, 809, 814, 825, 829, 852, 857, 868, 872], "cours": [214, 809, 814, 825, 829, 852, 857, 868, 872, 1169, 1186], "quadrat": [214, 809, 814, 825, 829, 852, 857, 868, 872, 1086, 1089, 1104], "amount": [214, 809, 814, 825, 829, 852, 857, 868, 872, 1180], "o": [214, 216, 218, 220, 591, 594, 597, 600, 603, 606, 609, 612, 615, 716, 809, 814, 825, 829, 852, 857, 868, 872, 1191], "allow": [214, 604, 607, 730, 1166, 1168, 1170, 1184, 1185, 1186, 1192, 1193, 1197, 1198, 1199, 1200, 1201], "forc": [214, 604], "In": [214, 269, 604, 607, 713, 752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 793, 979, 980, 1086, 1089, 1104, 1169, 1181, 1182, 1186, 1188, 1189, 1190, 1191, 1192, 1195, 1199, 1200], "scenario": [214, 1177, 1180, 1183, 1184, 1185, 1186, 1191], "viabl": 214, "option": [214, 216, 218, 264, 266, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 304, 307, 308, 309, 311, 313, 314, 315, 317, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 362, 364, 370, 372, 375, 376, 377, 379, 381, 382, 383, 384, 604, 607, 784, 1045, 1048, 1051, 1054, 1057, 1060, 1086, 1089, 1104, 1110, 1113, 1117, 1121, 1124, 1127, 1169, 1171, 1172, 1174, 1175, 1176, 1179, 1185, 1188, 1189, 1190, 1191, 1193, 1197, 1198, 1200, 1201, 1202], "mogm": [214, 332], "done": [214, 216, 218, 334, 337, 390, 433, 1169, 1180, 1193, 1197, 1198, 1200, 1201], "NOT": [214, 216, 218, 1086, 1198], "reduc": [214, 216, 218, 976, 977, 978, 981, 1190], "map": [214, 216, 218, 220, 223, 224, 225, 226, 227, 234, 235, 238, 239, 242, 243, 245, 246, 255, 258, 259, 264, 302, 319, 333, 334, 362, 370, 375, 376, 377, 379, 604, 607, 730, 797, 803, 819, 833, 840, 846, 862, 876, 883, 886, 889, 892, 895, 898, 901, 904, 907, 918, 923, 928, 930, 932, 933, 934, 935, 937, 939, 941, 946, 957, 962, 967, 1081, 1082, 1083, 1085, 1086, 1088, 1089, 1091, 1092, 1094, 1095, 1097, 1098, 1100, 1101, 1103, 1104, 1106, 1107, 1110, 1113, 1117, 1124, 1168, 1201, 1202, 1203], "genet": [214, 216, 218, 223, 224, 225, 226, 227, 629, 653, 659, 674, 704, 710, 735, 737, 738, 752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 785, 796, 797, 800, 802, 803, 806, 808, 809, 813, 814, 818, 819, 822, 824, 825, 828, 829, 832, 833, 836, 839, 840, 843, 845, 846, 849, 851, 852, 856, 857, 861, 862, 865, 867, 868, 871, 872, 875, 876, 879, 881, 883, 886, 889, 892, 895, 898, 901, 903, 904, 907, 917, 918, 922, 923, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 945, 946, 956, 957, 961, 962, 966, 967, 979, 980, 1029, 1081, 1082, 1083, 1085, 1086, 1088, 1089, 1091, 1092, 1094, 1095, 1097, 1098, 1100, 1101, 1103, 1104, 1106, 1107, 1110, 1113, 1117, 1121, 1124, 1127, 1168, 1169, 1179, 1188, 1189, 1191, 1194, 1201, 1202], "scale": [214, 216, 218, 269, 270, 271, 275, 276, 277, 281, 282, 283, 287, 288, 289, 293, 294, 295, 307, 308, 309, 313, 314, 315, 323, 329, 339, 340, 341, 343, 345, 346, 347, 354, 355, 356, 375, 376, 377, 381, 382, 383, 390, 433, 793, 1032, 1035, 1038, 1041, 1181, 1184, 1185, 1186, 1190, 1197], "orthogon": [214, 216, 218], "hyperplan": [214, 216, 218], "extrem": [214, 216, 218, 339, 340, 341, 343, 977, 1171, 1174, 1175, 1176, 1192], "front": [214, 216, 218], "drawn": [214, 216, 218, 243, 250, 722, 1188, 1189], "closest": [214, 216, 218, 1181], "string": [214, 216, 218, 588, 604, 607, 733, 744, 764, 767, 784, 1035, 1038, 1041, 1048, 1051, 1054, 1057, 1060, 1086, 1089, 1104, 1147], "rule": [214, 216, 218], "posit": [214, 216, 218, 629, 653, 659, 674, 704, 710, 717, 725, 735, 737, 738, 783, 1045, 1048, 1051, 1054, 1057, 1060, 1083, 1086, 1089, 1092, 1094, 1095, 1098, 1101, 1104, 1110, 1113, 1117, 1121, 1124, 1127, 1177, 1178, 1179, 1180, 1181, 1183, 1184, 1185, 1186, 1188, 1189, 1190, 1191, 1193, 1199, 1201, 1202], "neg": [214, 216, 218, 275, 276, 277, 279, 287, 288, 289, 291, 321, 322, 323, 325, 334, 337, 375, 376, 377, 379, 381, 382, 383, 384, 783, 785, 787, 992, 993, 994, 1181, 1185, 1188, 1189, 1191], "negat": [214, 216, 218, 993, 994, 1181, 1183, 1185, 1188, 1189, 1191], "stabil": [214, 216, 218], "magnitud": [214, 216, 218], "assign": [214, 216, 218, 281, 282, 283, 285, 358, 460, 462, 463, 464, 465, 466, 467, 468, 469, 531, 532, 533, 534, 535, 536, 537, 538, 539, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 572, 573, 574, 575, 576, 735, 736, 738, 978, 991, 1057, 1060, 1086, 1092, 1098, 1101, 1104, 1177, 1178, 1179, 1180, 1181, 1188, 1189, 1190, 1191, 1192, 1193, 1198, 1199, 1200, 1201, 1202], "regress": [214, 216, 218, 752, 755, 758, 761, 764, 767, 770, 776, 784, 785, 1192], "coeffici": [214, 216, 218, 334, 337, 437, 752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784], "obj": [214, 216, 218, 264, 266, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 304, 307, 308, 309, 311, 313, 314, 315, 317, 319, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 360, 362, 364, 367, 370, 372, 375, 376, 377, 379, 381, 382, 383, 384, 430, 495, 620, 623, 626, 629, 632, 635, 638, 641, 644, 647, 650, 653, 656, 659, 662, 665, 668, 671, 674, 677, 680, 683, 686, 689, 692, 695, 698, 701, 704, 707, 710, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 987, 996, 1001, 1004, 1009, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1083, 1095, 1110, 1113, 1117, 1121, 1124, 1127, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1190, 1195], "ndset": [214, 216, 218], "steepestascentsethillclimb": [214, 216, 218], "prng": [214, 216, 218, 716, 717, 1182, 1188, 1189], "nsga2setgeneticalgorithm": [214, 216, 218], "250": [214, 216, 218, 918, 923, 928, 930, 932, 933, 934, 935, 937, 939, 941, 946, 957, 962, 967, 1188, 1189, 1190, 1191], "mu": [214, 216, 218, 918, 923, 928, 930, 932, 933, 934, 935, 937, 939, 941, 946, 957, 962, 967, 1032, 1035, 1038, 1041], "100": [214, 216, 218, 918, 923, 928, 930, 932, 933, 934, 935, 937, 939, 941, 946, 957, 962, 967, 1045, 1048, 1051, 1054, 1057, 1060, 1177, 1178, 1179, 1180, 1181, 1183, 1188, 1189, 1190, 1191, 1193, 1194, 1197, 1198, 1200, 1202], "lamb": [214, 216, 218, 918, 923, 928, 930, 932, 933, 934, 935, 937, 939, 941, 946, 957, 962, 967], "produc": [214, 216, 218, 752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 883, 886, 1064, 1067, 1070, 1073, 1076, 1079, 1168, 1178, 1179, 1183, 1184, 1185], "core": [214, 216, 218, 264, 266, 302, 304, 319, 362, 364, 367, 370, 372, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 454, 456, 457, 458, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 491, 492, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 527, 528, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 565, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 592, 593, 595, 596, 598, 599, 601, 602, 604, 605, 607, 608, 610, 611, 613, 614, 616, 617, 620, 621, 623, 624, 626, 627, 629, 630, 632, 633, 635, 636, 638, 639, 641, 642, 644, 645, 647, 648, 650, 651, 653, 654, 656, 657, 659, 660, 662, 663, 665, 666, 668, 669, 671, 672, 674, 675, 677, 678, 680, 681, 683, 684, 686, 687, 689, 690, 692, 693, 695, 696, 698, 699, 701, 702, 704, 705, 707, 708, 710, 711, 713, 716, 717, 719, 720, 721, 722, 725, 726, 727, 728, 729, 730, 732, 733, 735, 736, 737, 738, 740, 742, 744, 745, 746, 747, 748, 973, 974, 975, 976, 977, 978, 981, 987, 996, 1001, 1004, 1009, 1182, 1183, 1184, 1185, 1186, 1188, 1189, 1190, 1191], "thread": [214, 216, 218], "safe": [214, 216, 218, 604, 607], "get": [214, 223, 224, 225, 226, 227, 629, 650, 653, 740, 764, 767, 770, 784, 806, 809, 812, 814, 817, 822, 825, 827, 829, 831, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1110, 1113, 1117, 1124, 1170, 1178, 1183, 1184, 1185, 1186, 1188, 1189, 1190, 1191, 1193, 1194, 1197, 1198], "additivelineargenomicmodel": [214, 216, 218, 360, 755, 759, 767, 797, 803, 809, 814, 825, 829, 840, 843, 846, 849, 852, 857, 868, 872, 883, 886, 889, 892, 895, 898, 901, 1193], "xmap": [214, 333, 334], "ploidi": [214, 216, 218, 299, 300, 333, 334, 336, 337, 351, 352, 752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 1110, 1113, 1117, 1121, 1124, 1127, 1177, 1178, 1179, 1180, 1181, 1192, 1193, 1198, 1201, 1202], "tfreq": [214, 216, 218, 307, 308, 309, 310, 311, 333, 334, 336, 337], "mkrwt": [214, 216, 218, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 333, 334, 336, 337, 1051, 1070], "vmat": [214, 334, 840, 841, 843, 844, 846, 847, 849, 850, 852, 853, 855, 857, 858, 860, 862, 863, 865, 866, 868, 870, 872, 874, 876, 877, 879, 880, 883, 884, 886, 887, 889, 890, 892, 893, 895, 896, 898, 899, 901, 902, 904, 905, 907, 908, 910, 911, 912, 913, 914], "bare": [214, 216, 218, 334, 337, 1098, 1101, 1198], "bone": [214, 216, 218, 334, 337, 1098, 1101, 1198], "textbf": [214, 216, 218, 334, 337, 339, 340, 341, 343], "textup": [214, 216, 218, 334, 337], "pau": [214, 216, 218, 334, 337], "pafd": [214, 216, 218, 334, 337], "unavail": [214, 216, 218, 334, 337], "formal": [214, 334], "w": [214, 216, 218, 334, 337, 431, 446, 539, 587, 604, 607], "cdot": [214, 216, 218, 334, 337, 367], "u": [214, 216, 218, 334, 337, 752, 755, 758, 761, 764, 767, 770, 776, 784, 785, 1086, 1183, 1184, 1185, 1186, 1192, 1200], "given": [214, 216, 218, 235, 237, 239, 241, 243, 246, 248, 252, 255, 257, 259, 261, 264, 266, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 304, 307, 308, 309, 311, 313, 314, 315, 317, 319, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 360, 362, 364, 367, 370, 372, 375, 376, 377, 379, 381, 382, 383, 384, 456, 457, 458, 604, 607, 620, 623, 626, 629, 632, 635, 638, 641, 644, 647, 650, 653, 656, 659, 662, 665, 668, 671, 674, 677, 680, 683, 686, 689, 692, 695, 698, 701, 704, 707, 710, 722, 735, 738, 764, 767, 784, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 983, 987, 996, 1001, 1004, 1009, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1083, 1086, 1089, 1095, 1104, 1110, 1113, 1117, 1121, 1124, 1127, 1173, 1181, 1184, 1188, 1189, 1190, 1192], "attain": [214, 216, 218, 334, 337, 1045, 1048, 1051, 1054, 1057, 1060], "unlimit": [214, 216, 218, 334, 337, 911, 913], "locu": [214, 216, 218, 334, 337, 962, 967, 973, 974, 1110, 1113, 1117, 1124, 1192, 1201, 1202], "dot": [214, 216, 218, 334, 337, 387, 428, 1190], "left": [214, 216, 218, 334, 337, 1171, 1172, 1173, 1174, 1175, 1176, 1178], "_": [214, 216, 218, 334, 337, 1183, 1184, 1185, 1186, 1191], "right": [214, 216, 218, 334, 337], "absolut": [214, 216, 218, 334, 337, 437, 550, 555, 783, 785], "sum": [214, 269, 270, 271, 275, 276, 277, 281, 282, 283, 287, 288, 289, 293, 294, 295, 307, 308, 309, 313, 314, 315, 323, 329, 334, 339, 340, 341, 343, 345, 346, 347, 354, 355, 356, 360, 375, 376, 377, 381, 382, 383, 387, 391, 428, 452, 556, 721, 752, 755, 758, 761, 764, 767, 783, 784, 785, 1121, 1127, 1181, 1185, 1190, 1195], "deviat": [214, 334, 555, 1032, 1035, 1038, 1041, 1185, 1186], "spstda": [214, 334], "sum_": [214, 334, 1195], "c": [214, 313, 314, 315, 316, 317, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 334, 339, 340, 341, 342, 343, 604, 607, 735, 737, 738, 761, 979, 980, 1190], "sigma_": [214, 334], "squar": [214, 334, 447, 545, 631, 632, 634, 635, 637, 638, 640, 641, 643, 644, 682, 683, 685, 686, 688, 689, 691, 692, 694, 695, 727, 728, 729, 790, 793, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1045, 1048, 1051, 1054, 1057, 1060], "root": [214, 334], "sqrt": [214, 334], "d": [214, 333, 334, 345, 346, 347, 349, 431, 722, 752, 755, 764, 789, 793, 794, 1092, 1098, 1101, 1107, 1199], "sampl": [214, 235, 237, 239, 241, 243, 246, 248, 249, 250, 259, 261, 345, 346, 347, 349, 719, 720, 721, 722, 973, 974, 975, 976, 977, 978, 980, 981, 982, 1183, 1184], "combin": [214, 345, 346, 347, 349, 716, 1110, 1113, 1117, 1124, 1171, 1175, 1176, 1193], "onli": [214, 216, 218, 334, 337, 424, 425, 444, 604, 607, 620, 665, 1086, 1089, 1104, 1110, 1166, 1178, 1179, 1181, 1183, 1186, 1188, 1189, 1191, 1193, 1194, 1197, 1198, 1200, 1201], "biallel": [214, 216, 218, 334, 337], "loci": [214, 216, 218, 334, 337, 910, 911, 912, 914, 978, 1057, 1060, 1083, 1086, 1089, 1095, 1098, 1101, 1104, 1110, 1113, 1117, 1121, 1124, 1127, 1190, 1192, 1200, 1202], "One": [214, 216, 218, 334, 337, 1184], "code": [214, 216, 218, 334, 337, 604, 607, 764, 1086, 1110, 1113, 1117, 1121, 1124, 1127, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1179, 1180, 1181, 1183, 1184, 1185, 1186, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1197, 1198, 1199, 1200, 1201, 1202], "other": [214, 216, 218, 334, 337, 445, 453, 539, 604, 607, 749, 752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 953, 1086, 1089, 1104, 1166, 1168, 1170, 1180, 1181, 1183, 1184, 1186, 1188, 1189, 1190, 1191, 1192, 1193, 1197, 1198, 1201], "hold": [214, 216, 218, 334, 337], "count": [214, 216, 218, 334, 337, 752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 1110, 1113, 1117, 1121, 1124, 1127, 1192, 1202], "remark": [214, 216, 218, 334, 337, 752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 911, 913, 914], "some": [214, 1168, 1169, 1179, 1182, 1185, 1190, 1191, 1192, 1198, 1199, 1200], "sort": [214, 629, 635, 638, 641, 644, 647, 650, 653, 656, 659, 662, 674, 679, 680, 686, 689, 692, 695, 698, 701, 704, 707, 710, 735, 737, 738, 745, 789, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 951, 952, 953, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1083, 1086, 1089, 1092, 1095, 1098, 1101, 1104, 1110, 1113, 1117, 1121, 1124, 1127, 1177, 1178, 1179, 1180, 1181, 1183, 1184, 1185, 1186, 1188, 1189, 1190, 1191], "access": [214, 220, 604, 607, 1045, 1048, 1051, 1054, 1057, 1060, 1169, 1180, 1192, 1193, 1197, 1198, 1201], "element": [214, 216, 218, 387, 389, 391, 397, 403, 412, 421, 430, 431, 432, 531, 532, 543, 571, 620, 623, 626, 629, 632, 635, 638, 641, 644, 647, 650, 653, 656, 659, 662, 665, 668, 671, 674, 677, 680, 683, 686, 689, 692, 695, 698, 701, 704, 707, 710, 721, 722, 728, 729, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 951, 973, 974, 975, 976, 977, 978, 980, 981, 982, 987, 996, 1004, 1009, 1015, 1018, 1021, 1027, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1083, 1086, 1089, 1095, 1104, 1110, 1113, 1117, 1121, 1124, 1127], "un": [214, 216, 218, 1197], "geneticvariancematrixfactori": [214, 223, 224, 225, 226, 227, 883, 905], "unconstrainedpopulationallelefrequencydistanceselect": 216, "mog": [216, 218, 333, 334, 335, 336, 337], "ideal": 216, "unconstrainedpopulationalleleunavailabilityselect": 218, "tminor": [218, 333, 334, 336, 337], "thet": [218, 333, 334, 336, 337], "tmajor": [218, 333, 334, 336, 337], "both": [220, 390, 426, 433, 716, 1086, 1089, 1104, 1170, 1181, 1182, 1183, 1184, 1185, 1188, 1189, 1190, 1191, 1192, 1193, 1197, 1198, 1199], "fast": [220, 790], "arg": [220, 264, 266, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 304, 307, 308, 309, 311, 313, 314, 315, 317, 319, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 360, 362, 364, 367, 370, 372, 375, 376, 377, 379, 381, 382, 383, 384, 528, 541, 560, 561, 563, 565, 568, 570, 572, 588, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 987, 996, 1001, 1004, 1009, 1045, 1048, 1051, 1054, 1057, 1060, 1171, 1172, 1173, 1174, 1175, 1176, 1190, 1195], "criterion": [222, 223, 224, 225, 226, 227, 374, 375, 376, 377, 378, 379, 1181], "uc": [222, 223, 224, 225, 226, 227, 374, 375, 376, 377, 378, 379, 1181], "usefulnesscriterionselect": [223, 224, 225, 226, 227, 1181], "upper_percentil": [223, 224, 225, 226, 227], "usefulnesscriterionselectionmixin": [223, 224, 225, 227], "upper": [223, 224, 225, 226, 227, 264, 266, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 304, 307, 308, 309, 311, 313, 314, 315, 317, 319, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 360, 362, 364, 367, 370, 372, 375, 376, 377, 379, 381, 382, 383, 384, 394, 397, 400, 403, 406, 409, 412, 415, 418, 421, 542, 546, 582, 583, 728, 729, 752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 785, 982, 987, 996, 1001, 1004, 1009, 1015, 1018, 1021, 1024, 1027, 1183, 1184, 1185, 1186, 1190, 1195, 1196], "percentil": [223, 224, 225, 226, 227], "selection_intens": [223, 224, 225, 226, 227], "intens": [223, 224, 225, 226, 227], "weightedgenomicselect": [229, 230, 231, 232, 1181, 1189], "generalizedweightedgenomicestimatedbreedingvaluebinaryselect": 229, "generalizedweightedgenomicestimatedbreedingvalueintegerselect": 230, "generalizedweightedgenomicestimatedbreedingvaluerealselect": 231, "generalizedweightedgenomicestimatedbreedingvaluesubsetselect": 232, "cfg": [235, 237, 239, 241, 243, 244, 246, 248, 250, 252, 253, 255, 257, 259, 261], "xconfig_decn": [235, 237, 239, 241, 246, 248, 250, 259, 261], "xconfig_xmap": [235, 239, 243, 246, 255, 259], "mateselectionconfigur": [235, 239, 244, 246, 255, 259], "denseselectionconfigur": [235, 237, 239, 241, 246, 248, 255, 257, 259, 261], "10": [235, 237, 239, 241, 246, 248, 255, 257, 259, 261, 744, 1048, 1051, 1054, 1057, 1060, 1169, 1177, 1178, 1179, 1180, 1181, 1185, 1188, 1189, 1190, 1191, 1193, 1195, 1196, 1197, 1198, 1200, 1201, 1202], "execut": [235, 237, 239, 241, 243, 246, 248, 252, 255, 257, 259, 261, 604, 607, 1169, 1193, 1197, 1198], "becom": [235, 237, 239, 241, 246, 248, 255, 257, 259, 261, 784, 1190], "import": [235, 237, 239, 241, 246, 248, 255, 257, 259, 261, 592, 595, 598, 604, 607, 610, 613, 616, 752, 755, 758, 761, 764, 767, 770, 776, 784, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1086, 1089, 1104, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1186, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202], "hybrid": [235, 237, 239, 241, 246, 248, 255, 257, 259, 261, 1183, 1184, 1185, 1186], "dihybrid": [235, 237, 239, 241, 246, 248, 255, 257, 259, 261, 808, 809, 851, 852, 1193], "composit": [235, 237, 239, 241, 246, 248, 255, 257, 259, 261], "ndecn": [235, 237, 239, 241, 246, 248, 259, 261, 264, 266, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 304, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 319, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 360, 362, 364, 367, 370, 372, 375, 376, 377, 379, 381, 382, 383, 384, 387, 388, 389, 391, 394, 397, 400, 403, 406, 409, 412, 415, 418, 421, 987, 996, 1001, 1004, 1009, 1015, 1018, 1021, 1024, 1027, 1181, 1183, 1184, 1190, 1195, 1196], "sample_xconfig": [235, 237, 239, 241, 246, 248, 250, 259, 261], "return_xconfig": [235, 237, 239, 241, 246, 248, 250, 259, 261], "noth": [235, 237, 239, 241, 246, 248, 250, 259, 261], "natur": [236, 240, 247, 260, 775, 778, 918, 923, 928, 930, 932, 933, 934, 935, 937, 939, 941, 946, 957, 962, 967, 969, 988, 989, 992, 993, 994, 997, 998, 1005, 1006, 1010, 1011, 1168, 1181, 1185, 1188, 1189, 1191, 1192, 1193, 1194, 1198, 1202], "sampledselectionconfigurationmixin": [237, 241, 248, 261], "simpleselectionconfigur": 255, "simpl": [255, 257, 781, 784, 785, 1177, 1180, 1183, 1184, 1185, 1186], "basic": [255, 257, 618, 1168, 1180, 1192, 1201], "necess": [255, 257], "manner": [255, 257, 1045, 1110, 1192, 1193, 1198], "formul": [262, 785, 1001, 1168, 1181], "prob": [264, 266, 267, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 299, 300, 302, 304, 305, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 319, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 333, 334, 336, 337, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 351, 352, 354, 355, 356, 357, 358, 360, 362, 364, 365, 367, 368, 370, 372, 373, 375, 376, 377, 378, 379, 381, 382, 383, 384, 386, 387, 388, 389, 390, 391, 918, 920, 923, 925, 928, 930, 932, 933, 934, 935, 937, 939, 941, 943, 946, 948, 951, 953, 955, 957, 959, 971, 974, 987, 988, 989, 990, 992, 993, 994, 996, 997, 998, 999, 1001, 1002, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1190, 1194], "decn_spac": [264, 266, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 304, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 319, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 360, 362, 364, 367, 370, 372, 375, 376, 377, 379, 381, 382, 383, 384, 394, 397, 400, 403, 406, 409, 412, 415, 418, 421, 987, 996, 1001, 1004, 1009, 1015, 1018, 1021, 1024, 1027, 1181, 1190, 1195, 1196], "decn_space_low": [264, 266, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 304, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 319, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 360, 362, 364, 367, 370, 372, 375, 376, 377, 379, 381, 382, 383, 384, 394, 397, 400, 403, 406, 409, 412, 415, 418, 421, 987, 996, 1001, 1004, 1009, 1015, 1018, 1021, 1024, 1027, 1190, 1195, 1196], "decn_space_upp": [264, 266, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 304, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 319, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 360, 362, 364, 367, 370, 372, 375, 376, 377, 379, 381, 382, 383, 384, 394, 397, 400, 403, 406, 409, 412, 415, 418, 421, 987, 996, 1001, 1004, 1009, 1015, 1018, 1021, 1024, 1027, 1190, 1195, 1196], "decn_space_xmap": [264, 302, 319, 334, 362, 370, 375, 376, 377, 379, 394, 400, 406, 409, 418], "vtype": [264, 266, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 304, 307, 308, 309, 311, 313, 314, 315, 317, 319, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 360, 362, 364, 367, 370, 372, 375, 376, 377, 379, 381, 382, 383, 384, 454, 491, 494, 495, 525, 573, 574, 987, 996, 1001, 1004, 1009], "var": [264, 266, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 304, 307, 308, 309, 311, 313, 314, 315, 317, 319, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 360, 362, 364, 367, 370, 372, 375, 376, 377, 379, 381, 382, 383, 384, 987, 996, 1001, 1004, 1009, 1183, 1192], "elementwis": [264, 266, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 304, 307, 308, 309, 311, 313, 314, 315, 317, 319, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 360, 362, 364, 367, 370, 372, 375, 376, 377, 379, 381, 382, 383, 384, 620, 623, 626, 629, 632, 635, 638, 641, 644, 647, 650, 653, 656, 659, 662, 665, 668, 671, 674, 677, 680, 683, 686, 689, 692, 695, 698, 701, 704, 707, 710, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 987, 996, 1001, 1004, 1009, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1083, 1095, 1110, 1113, 1117, 1121, 1124, 1127, 1200], "elementwise_func": [264, 266, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 304, 307, 308, 309, 311, 313, 314, 315, 317, 319, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 360, 362, 364, 367, 370, 372, 375, 376, 377, 379, 381, 382, 383, 384, 987, 996, 1001, 1004, 1009], "pymoo": [264, 266, 302, 304, 319, 362, 364, 367, 370, 372, 970, 973, 974, 975, 976, 977, 978, 981, 987, 996, 1001, 1004, 1009, 1169, 1190], "elementwiseevaluationfunct": [264, 266, 302, 304, 319, 362, 364, 367, 370, 372, 987, 996, 1001, 1004, 1009], "elementwise_runn": [264, 266, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 304, 307, 308, 309, 311, 313, 314, 315, 317, 319, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 360, 362, 364, 367, 370, 372, 375, 376, 377, 379, 381, 382, 383, 384, 987, 996, 1001, 1004, 1009], "loopedelementwiseevalu": [264, 266, 302, 304, 319, 362, 364, 367, 370, 372, 987, 996, 1001, 1004, 1009], "replace_nan_values_bi": [264, 266, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 304, 307, 308, 309, 311, 313, 314, 315, 317, 319, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 360, 362, 364, 367, 370, 372, 375, 376, 377, 379, 381, 382, 383, 384, 987, 996, 1001, 1004, 1009], "exclude_from_seri": [264, 266, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 304, 307, 308, 309, 311, 313, 314, 315, 317, 319, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 360, 362, 364, 367, 370, 372, 375, 376, 377, 379, 381, 382, 383, 384, 987, 996, 1001, 1004, 1009], "callback": [264, 266, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 304, 307, 308, 309, 311, 313, 314, 315, 317, 319, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 360, 362, 364, 367, 370, 372, 375, 376, 377, 379, 381, 382, 383, 384, 987, 996, 1001, 1004, 1009], "strict": [264, 266, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 304, 307, 308, 309, 311, 313, 314, 315, 317, 319, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 360, 362, 364, 367, 370, 372, 375, 376, 377, 379, 381, 382, 383, 384, 987, 996, 1001, 1004, 1009], "mateselectionproblem": [264, 302, 362, 370], "lower": [264, 266, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 304, 307, 308, 309, 311, 313, 314, 315, 317, 319, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 360, 362, 364, 367, 370, 372, 375, 376, 377, 379, 381, 382, 383, 384, 394, 397, 400, 403, 406, 409, 412, 415, 418, 421, 542, 578, 579, 752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 785, 982, 987, 996, 1001, 1004, 1009, 1015, 1018, 1021, 1024, 1027, 1183, 1184, 1185, 1186, 1190, 1195, 1196], "form": [264, 266, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 304, 307, 308, 309, 311, 313, 314, 315, 317, 319, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 360, 362, 364, 367, 370, 372, 375, 376, 377, 379, 381, 382, 383, 384, 431, 962, 964, 967, 969, 987, 993, 994, 996, 1001, 1004, 1009, 1183, 1184, 1185], "copi": [264, 266, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 304, 307, 308, 309, 311, 313, 314, 315, 317, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 362, 364, 370, 372, 375, 376, 377, 379, 381, 382, 383, 384, 620, 623, 626, 629, 632, 635, 638, 641, 644, 647, 650, 653, 656, 659, 662, 665, 668, 671, 674, 677, 680, 683, 686, 689, 692, 695, 698, 701, 704, 707, 710, 752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1083, 1086, 1089, 1095, 1104, 1110, 1113, 1117, 1121, 1124, 1127], "so": [264, 266, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 304, 307, 308, 309, 311, 313, 314, 315, 317, 319, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 360, 362, 364, 367, 370, 372, 375, 376, 377, 379, 381, 382, 383, 384, 604, 987, 996, 1001, 1004, 1009, 1166, 1173, 1178, 1181, 1183, 1184, 1185, 1186, 1188, 1190, 1193, 1197, 1198, 1199, 1200, 1201], "far": [264, 266, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 304, 307, 308, 309, 311, 313, 314, 315, 317, 319, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 360, 362, 364, 367, 370, 372, 375, 376, 377, 379, 381, 382, 383, 384, 987, 996, 1001, 1004, 1009], "just": [264, 266, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 304, 307, 308, 309, 311, 313, 314, 315, 317, 319, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 360, 362, 364, 367, 370, 372, 375, 376, 377, 379, 381, 382, 383, 384, 987, 996, 1001, 1004, 1009, 1113, 1183, 1184, 1185, 1186, 1188, 1189, 1191], "hint": [264, 266, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 304, 307, 308, 309, 311, 313, 314, 315, 317, 319, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 360, 362, 364, 367, 370, 372, 375, 376, 377, 379, 381, 382, 383, 384, 987, 996, 1001, 1004, 1009], "see": [264, 266, 302, 304, 362, 364, 370, 372, 604, 607, 1086, 1104, 1161, 1169, 1185, 1190, 1191, 1195], "document": [264, 266, 302, 304, 362, 364, 370, 372, 1131, 1132, 1133, 1134, 1135, 1136, 1142, 1143, 1144, 1148, 1153, 1154, 1167], "sequenc": [264, 266, 302, 304, 362, 364, 370, 372, 504, 521, 567, 568, 569, 570, 604, 607, 620, 623, 626, 629, 632, 635, 638, 641, 644, 647, 650, 653, 656, 659, 662, 665, 668, 671, 674, 677, 680, 683, 686, 689, 692, 695, 698, 701, 704, 707, 710, 764, 767, 784, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 987, 996, 1004, 1009, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1083, 1086, 1089, 1095, 1104, 1110, 1113, 1117, 1121, 1124, 1127, 1193, 1197, 1198, 1201, 1202], "explicit": [264, 266, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 304, 307, 308, 309, 311, 313, 314, 315, 317, 319, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 360, 362, 364, 367, 370, 372, 375, 376, 377, 379, 381, 382, 383, 384, 987, 996, 1001, 1004, 1009, 1197], "run": [264, 266, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 304, 307, 308, 309, 311, 313, 314, 315, 317, 319, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 360, 362, 364, 367, 370, 372, 375, 376, 377, 379, 381, 382, 383, 384, 987, 996, 1001, 1004, 1009, 1190], "replac": [264, 266, 302, 304, 362, 364, 370, 372, 722, 982, 1177, 1178, 1179, 1180, 1181, 1183, 1184, 1185, 1186, 1193, 1198, 1201, 1202], "nan": [264, 266, 302, 304, 362, 364, 370, 372, 752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 1086, 1089, 1104], "exclud": [264, 266, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 304, 307, 308, 309, 311, 313, 314, 315, 317, 319, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 360, 362, 364, 367, 370, 372, 375, 376, 377, 379, 381, 382, 383, 384, 728, 987, 996, 1001, 1004, 1009], "being": [264, 266, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 304, 307, 308, 309, 311, 313, 314, 315, 317, 319, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 360, 362, 364, 367, 370, 372, 375, 376, 377, 379, 381, 382, 383, 384, 987, 996, 1001, 1004, 1009, 1183, 1184, 1185, 1186], "serial": [264, 266, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 304, 307, 308, 309, 311, 313, 314, 315, 317, 319, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 360, 362, 364, 367, 370, 372, 375, 376, 377, 379, 381, 382, 383, 384, 987, 996, 1001, 1004, 1009], "everi": [264, 266, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 304, 307, 308, 309, 311, 313, 314, 315, 317, 319, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 360, 362, 364, 367, 370, 372, 375, 376, 377, 379, 381, 382, 383, 384, 987, 996, 1001, 1004, 1009, 1086, 1089, 1104, 1166], "cooper": [264, 266, 302, 304, 360, 362, 364, 370, 372, 394, 400, 409, 418, 629, 632, 638, 644, 764, 767, 770, 784, 889, 892, 895, 898, 901, 951, 953, 955, 973, 974, 975, 976, 977, 978, 979, 980, 981, 987, 996, 1004, 1009, 1035, 1038, 1041, 1051, 1067, 1070, 1073, 1076, 1079], "inherit": [264, 266, 302, 304, 360, 362, 364, 370, 372, 394, 400, 409, 418, 495, 629, 632, 638, 644, 764, 767, 770, 784, 803, 806, 819, 822, 846, 849, 862, 865, 889, 892, 895, 898, 901, 951, 953, 955, 973, 974, 975, 976, 977, 978, 979, 980, 981, 987, 996, 1004, 1009, 1035, 1038, 1041, 1051, 1067, 1070, 1073, 1076, 1079, 1133, 1190, 1195], "boundari": [264, 266, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 304, 307, 308, 309, 311, 313, 314, 315, 317, 319, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 360, 362, 364, 367, 370, 372, 375, 376, 377, 379, 381, 382, 383, 384, 394, 397, 400, 403, 406, 409, 412, 415, 418, 421, 735, 736, 737, 738, 987, 996, 1001, 1004, 1009, 1015, 1018, 1021, 1024, 1027, 1195, 1196, 1199], "evalfn": [264, 266, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 304, 307, 308, 309, 311, 313, 314, 315, 317, 319, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 360, 362, 364, 367, 370, 372, 375, 376, 377, 379, 381, 382, 383, 384, 987, 996, 1001, 1004, 1009, 1181, 1190, 1195], "mathbf": [264, 266, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 304, 307, 308, 309, 311, 313, 314, 315, 317, 319, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 360, 362, 364, 367, 370, 372, 375, 376, 377, 379, 381, 382, 383, 384, 752, 755, 758, 761, 764, 767, 784, 987, 996, 1001, 1004, 1009, 1045, 1048, 1051, 1054, 1057, 1060, 1190, 1195], "v_": [264, 266, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 304, 307, 308, 309, 311, 313, 314, 315, 317, 319, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 360, 362, 364, 367, 370, 372, 375, 376, 377, 379, 381, 382, 383, 384, 987, 996, 1001, 1004, 1009, 1190, 1195], "w_": [264, 266, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 304, 307, 308, 309, 311, 313, 314, 315, 317, 319, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 360, 362, 364, 367, 370, 372, 375, 376, 377, 379, 381, 382, 383, 384, 987, 996, 1001, 1004, 1009, 1190, 1195], "odot": [264, 266, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 304, 307, 308, 309, 311, 313, 314, 315, 317, 319, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 360, 362, 364, 367, 370, 372, 375, 376, 377, 379, 381, 382, 383, 384, 987, 996, 1001, 1004, 1009, 1190, 1195], "t_": [264, 266, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 304, 307, 308, 309, 311, 313, 314, 315, 317, 319, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 360, 362, 364, 367, 370, 372, 375, 376, 377, 379, 381, 382, 383, 384], "l": [264, 266, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 304, 307, 308, 309, 311, 313, 314, 315, 317, 319, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 360, 362, 364, 367, 370, 372, 375, 376, 377, 379, 381, 382, 383, 384, 387, 388, 389, 391, 430, 432], "ineqcv": [264, 266, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 304, 307, 308, 309, 311, 313, 314, 315, 317, 319, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 360, 362, 364, 367, 370, 372, 375, 376, 377, 379, 381, 382, 383, 384, 430, 987, 996, 1001, 1004, 1009, 1190, 1195], "eqcv": [264, 266, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 304, 307, 308, 309, 311, 313, 314, 315, 317, 319, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 360, 362, 364, 367, 370, 372, 375, 376, 377, 379, 381, 382, 383, 384, 430, 987, 996, 1001, 1004, 1009, 1190, 1195], "encod": [264, 266, 302, 304, 319, 339, 340, 341, 343, 362, 364, 367, 370, 372, 604, 607], "dimension": [264, 266, 302, 304, 319, 339, 340, 341, 343, 362, 364, 367, 370, 372, 1192], "n_eq_constr": [264, 266, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 304, 307, 308, 309, 311, 313, 314, 315, 317, 319, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 360, 362, 364, 367, 370, 372, 375, 376, 377, 379, 381, 382, 383, 384, 987, 996, 1001, 1004, 1009], "n_ieq_constr": [264, 266, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 304, 307, 308, 309, 311, 313, 314, 315, 317, 319, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 360, 362, 364, 367, 370, 372, 375, 376, 377, 379, 381, 382, 383, 384, 987, 996, 1001, 1004, 1009], "n_obj": [264, 266, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 304, 307, 308, 309, 311, 313, 314, 315, 317, 319, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 360, 362, 364, 367, 370, 372, 375, 376, 377, 379, 381, 382, 383, 384, 987, 996, 1001, 1004, 1009], "n_var": [264, 266, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 304, 307, 308, 309, 311, 313, 314, 315, 317, 319, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 360, 362, 364, 367, 370, 372, 375, 376, 377, 379, 381, 382, 383, 384, 987, 996, 1001, 1004, 1009], "nlatent": [264, 266, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 299, 300, 302, 304, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 319, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 333, 334, 336, 337, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 351, 352, 354, 355, 356, 357, 358, 360, 362, 364, 367, 370, 372, 375, 376, 377, 378, 379, 381, 382, 383, 384], "strictli": [264, 266, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 304, 307, 308, 309, 311, 313, 314, 315, 317, 319, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 360, 362, 364, 367, 370, 372, 375, 376, 377, 379, 381, 382, 383, 384, 735, 736, 987, 996, 1001, 1004, 1009, 1183, 1184, 1185, 1186, 1192], "xl": [264, 266, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 304, 307, 308, 309, 311, 313, 314, 315, 317, 319, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 360, 362, 364, 367, 370, 372, 375, 376, 377, 379, 381, 382, 383, 384, 987, 996, 1001, 1004, 1009], "xu": [264, 266, 269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 291, 293, 294, 295, 297, 300, 302, 304, 307, 308, 309, 311, 313, 314, 315, 317, 319, 321, 322, 323, 325, 327, 328, 329, 331, 334, 337, 339, 340, 341, 343, 345, 346, 347, 349, 352, 354, 355, 356, 358, 360, 362, 364, 367, 370, 372, 375, 376, 377, 379, 381, 382, 383, 384, 987, 996, 1001, 1004, 1009], "partial": [265, 303, 363, 366, 371, 986, 987, 995, 996, 1000, 1003, 1004, 1008, 1009, 1014, 1017, 1020, 1026], "setselectionproblem": [265, 303, 363, 371], "binaryproblem": [266, 918, 920, 928, 988, 989, 990, 1190, 1195], "estimatedbreedingvalueselectionproblem": [269, 270, 271, 272, 273], "estimatedbreedingvalueselectionproblemmixin": [269, 270, 271, 273], "cg": [269, 270, 271, 273, 281, 282, 283, 285, 293, 294, 295, 296, 297, 354, 355, 356, 360], "meuwissen": [269, 270, 271, 273, 281, 282, 283, 285, 293, 294, 295, 297, 354, 355, 356, 360], "et": [269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 293, 294, 295, 297, 354, 355, 356, 360, 809, 814, 825, 829, 852, 857, 868, 872, 979, 980, 1059, 1060, 1183, 1184, 1185, 1186, 1200], "al": [269, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 285, 293, 294, 295, 297, 354, 355, 356, 360, 809, 814, 825, 829, 852, 857, 868, 872, 979, 980, 1059, 1060, 1183, 1184, 1185, 1186, 1200], "2001": [269, 270, 271, 273, 281, 282, 283, 285, 293, 294, 295, 297, 354, 355, 356, 360, 979, 980], "ntaxa": [269, 270, 271, 275, 276, 277, 281, 282, 283, 287, 288, 289, 293, 294, 295, 307, 308, 309, 313, 314, 315, 323, 329, 339, 340, 341, 354, 355, 356, 375, 376, 377, 381, 382, 383, 629, 635, 638, 641, 647, 650, 653, 674, 686, 689, 692, 698, 701, 704, 730, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1110, 1113, 1117, 1121, 1124, 1127, 1177, 1178, 1179, 1180, 1181, 1183, 1184, 1185, 1186, 1192, 1193, 1197, 1198, 1201, 1202], "On": [269, 270, 271, 275, 276, 277, 281, 282, 283, 287, 288, 289, 293, 294, 295, 307, 308, 309, 313, 314, 315, 323, 329, 339, 340, 341, 345, 346, 347, 354, 355, 356, 375, 376, 377, 381, 382, 383, 1168, 1169, 1200], "entri": [269, 270, 271, 275, 276, 277, 281, 282, 283, 287, 288, 289, 293, 294, 295, 307, 308, 309, 313, 314, 315, 323, 329, 339, 340, 341, 345, 346, 347, 354, 355, 356, 375, 376, 377, 381, 382, 383, 722, 789, 1092, 1098, 1101], "unit": [269, 270, 271, 275, 276, 277, 281, 282, 283, 287, 288, 289, 293, 294, 295, 307, 308, 309, 313, 314, 315, 323, 329, 339, 340, 341, 345, 346, 347, 354, 355, 356, 375, 376, 377, 381, 382, 383, 1032, 1035, 1038, 1041, 1086, 1104, 1107, 1168, 1169, 1183, 1185, 1188, 1197], "kx": [269, 270, 281, 282, 287, 288, 289, 293, 294, 339, 340, 341, 345, 346, 347, 354, 355, 381, 382, 383], "case": [269, 604, 607, 722, 764, 767, 784, 1086, 1104, 1183, 1192], "approxim": [269, 550, 555, 1184, 1185, 1190], "avoid": [269, 1168], "divis": 269, "ax": [271, 275, 276, 277, 283, 295, 307, 308, 309, 313, 314, 315, 323, 329, 356, 375, 376, 377, 450, 452, 545, 631, 632, 634, 635, 637, 638, 640, 641, 643, 644, 661, 679, 682, 683, 685, 686, 688, 689, 691, 692, 694, 695, 719, 726, 783, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1045, 1048, 1051, 1054, 1057, 1060, 1086, 1089, 1104, 1183, 1184, 1186, 1188, 1189, 1190, 1191, 1197, 1198, 1201], "helper": [272, 278, 284, 290, 296, 299, 310, 316, 324, 330, 333, 336, 342, 348, 351, 357, 991], "expectedmaximumbreedingvalueselectionproblem": [275, 276, 277, 278, 279], "expectedmaximumbreedingvalueselectionproblemmixin": [275, 276, 277, 279], "m\u00fcller": [275, 276, 277, 279], "2018": [275, 276, 277, 279], "smaller": [275, 276, 277, 279, 307, 308, 309, 311, 313, 314, 315, 317, 321, 322, 323, 325, 327, 328, 329, 331, 375, 376, 377, 379], "better": [275, 276, 277, 279, 287, 288, 289, 291, 321, 322, 323, 325, 327, 328, 329, 331, 375, 376, 377, 379, 381, 382, 383, 384, 1195], "integerexpectedmaximumbreedingvalueselectionproblem": [276, 322, 328], "realexpectedmaximumbreedingvalueselectionproblem": [277, 323, 329], "familyestimatedbreedingvalueselectionproblem": [281, 282, 283, 284, 285], "familyid": [281, 282, 283, 284, 285], "familyestimatedbreedingvalueselectionproblemmixin": [281, 282, 283, 285], "binaryconventionalgenomicselectionproblem": [281, 293, 313, 354], "id": [281, 282, 283, 285], "familyix": [281, 282, 283, 284, 285], "integerconventionalgenomicselectionproblem": [282, 294, 314, 355], "realconventionalgenomicselectionproblem": [283, 295, 315, 356], "subsetconventionalgenomicselectionproblem": [285, 297, 317], "generalizedweightedgenomicestimatedbreedingvalueselectionproblem": [287, 288, 289, 290, 291], "generalizedweightedgenomicestimatedbreedingvalueselectionproblemmixin": [287, 288, 289, 291], "binarygeneralizedweightedgenomicselectionproblem": 287, "gwg": [287, 288, 289, 291, 381, 382, 383, 384], "wgebv": [287, 288, 289, 291, 381, 382, 383, 384, 1187, 1189], "integergeneralizedweightedgenomicselectionproblem": 288, "realgeneralizedweightedgenomicselectionproblem": 289, "subsetgeneralizedweightedgenomicselectionproblem": 291, "genomicestimatedbreedingvalueselectionproblem": [293, 294, 295, 296, 297], "genomicestimatedbreedingvalueselectionproblemmixin": [293, 294, 295, 297], "genotypebuilderselectionproblem": [299, 300], "haplomat": [299, 300, 351, 352], "genotypebuilderselectionproblemmixin": 300, "subsetgenotypebuilderselectionproblem": 300, "chromosom": [300, 352, 626, 629, 653, 659, 671, 674, 704, 710, 735, 737, 738, 918, 923, 928, 930, 932, 933, 934, 935, 937, 939, 941, 946, 957, 962, 967, 973, 974, 975, 976, 977, 978, 981, 982, 1083, 1086, 1089, 1092, 1095, 1098, 1101, 1104, 1110, 1113, 1117, 1121, 1124, 1127, 1183, 1185, 1188, 1189, 1190, 1191, 1199, 1200, 1201, 1202], "diploid": [300, 352, 764, 767, 770, 784, 1110], "h": [300, 351, 352, 1001, 1086, 1121, 1127, 1191], "integerproblem": [304, 923, 925, 930, 997, 998, 999, 1195], "l1": [306, 307, 308, 309, 311], "l1g": [306, 307, 308, 309, 310, 311], "l1normgenomicselectionproblem": [307, 308, 309, 310, 311], "l1normgenomicselectionproblemmixin": [307, 308, 309, 311], "choleski": [307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 339, 340, 341, 342, 343, 1045, 1048, 1051, 1054, 1057, 1060, 1190], "decomposit": [307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 339, 340, 341, 342, 343, 789, 790, 794, 1045, 1048, 1051, 1054, 1057, 1060], "kinship": [307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 321, 322, 323, 324, 325, 339, 340, 341, 342, 343, 1043, 1045, 1048, 1051, 1054, 1057, 1060, 1184, 1191], "classmethod": [307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 592, 595, 598, 601, 604, 607, 610, 613, 616, 620, 623, 626, 629, 632, 635, 638, 641, 644, 647, 650, 653, 656, 659, 662, 665, 668, 671, 674, 677, 680, 683, 686, 689, 692, 695, 698, 701, 704, 707, 710, 752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1083, 1086, 1089, 1095, 1104, 1110, 1113, 1117, 1121, 1124, 1127, 1136, 1137, 1138, 1139, 1140], "from_numpi": [307, 308, 309, 310, 311, 610, 1035, 1038, 1041, 1197], "tafreq": [307, 308, 309, 310, 311, 1110, 1113, 1117, 1124, 1201, 1202], "metric": [307, 308, 309, 311, 313, 314, 315, 317, 1173, 1183, 1184, 1185, 1186], "l2normgenomicselectionproblem": [313, 314, 315, 316, 317], "l2normgenomicselectionproblemmixin": [313, 314, 315, 317], "triangl": [313, 314, 315, 317, 321, 322, 323, 325, 327, 328, 329, 331, 339, 340, 341, 343, 546, 728, 729, 1190], "from_gmat": [313, 314, 315, 316, 317, 1045, 1048, 1051, 1054, 1057, 1060, 1064, 1067, 1070, 1073, 1076, 1079, 1190, 1198], "afreq": [313, 314, 315, 316, 317, 1051, 1070, 1110, 1113, 1117, 1124, 1192, 1201, 1202], "requires_kwarg": [319, 367, 1001], "np": [319, 367, 722, 1001], "bound": [319, 367, 397, 403, 412, 421, 542, 785, 982, 987, 996, 1001, 1004, 1009, 1015, 1018, 1021, 1027, 1086, 1089, 1104, 1193, 1197, 1198], "meh": [320, 321, 322, 323, 325, 326, 327, 328, 329, 331, 1110, 1113, 1117, 1121, 1124, 1127, 1185, 1186, 1201, 1202], "meanexpectedheterozygosityselectionproblem": [321, 322, 323, 324, 325], "meanexpectedheterozygosityselectionproblemmixin": [321, 322, 323, 325], "binaryexpectedmaximumbreedingvalueselectionproblem": [321, 327], "subsetexpectedmaximumbreedingvalueselectionproblem": [325, 331], "meangenomicrelationshipselectionproblem": [327, 328, 329, 330, 331], "meangenomicrelationshipselectionproblemmixin": [327, 328, 329, 331], "mgr": [327, 328, 329, 331, 339, 340, 341, 343, 1184], "still": 332, "under": [332, 601, 620, 623, 626, 629, 632, 635, 638, 641, 644, 647, 650, 653, 656, 659, 662, 665, 668, 671, 674, 677, 680, 683, 686, 689, 692, 695, 698, 701, 704, 707, 710, 752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 797, 800, 803, 805, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1083, 1095, 1110, 1113, 1117, 1121, 1124, 1127, 1161, 1165, 1175, 1176, 1183, 1184], "multiobjectivegenomicmatingproblem": [333, 334], "fixat": [333, 334, 336, 337, 1192], "major": [333, 334, 336, 337, 1086, 1089, 1104, 1110, 1113, 1117, 1121, 1124, 1127, 1181, 1201, 1202], "minor": [333, 334, 336, 337, 1110, 1113, 1117, 1121, 1124, 1127, 1183, 1184, 1185, 1186, 1202], "multiobjectivegenomicmatingproblemmixin": 334, "multiobjectivegenomicselectionproblem": [336, 337], "multiobjectivegenomicselectionproblemmixin": 337, "subsetmultiobjectiveselectionproblem": 337, "constribut": 338, "optimalcontributionselectionproblem": [339, 340, 341, 342, 343], "optimalcontributionselectionproblemmixin": [339, 340, 341, 343], "binaryoptimalcontributionselectionproblem": 339, "you": [339, 340, 341, 343, 1169], "penal": [339, 340, 341, 343], "prefer": [339, 340, 341, 343, 983], "center": [339, 340, 341, 343, 784, 785, 788, 790, 792, 1032, 1035, 1038, 1041], "make": [339, 340, 341, 343, 620, 623, 626, 629, 632, 635, 638, 641, 644, 647, 650, 653, 656, 659, 662, 665, 668, 671, 674, 677, 680, 683, 686, 689, 692, 695, 698, 701, 704, 707, 710, 752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1083, 1086, 1089, 1095, 1104, 1110, 1113, 1117, 1121, 1124, 1127, 1166, 1169, 1170, 1179, 1181, 1185, 1186, 1188, 1189, 1190, 1191, 1197, 1198, 1200, 1201], "penali": [339, 340, 341, 343], "less": [339, 340, 341, 343, 582, 583, 783, 785, 1048, 1051, 1054, 1057, 1060], "_2": [339, 340, 341, 343], "next": [339, 340, 341, 343, 748, 1086, 1089, 1104, 1168, 1169, 1179, 1181, 1183, 1184, 1185, 1186, 1188, 1189, 1190, 1191], "integeroptimalcontributionselectionproblem": 340, "realoptimalcontributionselectionproblem": 341, "subsetoptimalcontributionselectionproblem": 343, "optimalhaploidvalueselectionproblem": [345, 346, 347, 348, 349], "ohvmat": [345, 346, 347, 348, 349], "optimalhaploidvalueselectionproblemmixin": [345, 346, 347, 349], "nxmapconfig": [345, 346, 347], "optimalpopulationvalueselectionproblem": [351, 352], "optimalpopulationvalueselectionproblemmixin": 352, "subsetoptimalpopulationvalueselectionproblem": 352, "randomselectionproblem": [354, 355, 356, 357, 358], "rbv": [354, 355, 356, 357, 358], "randomselectionproblemmixin": [354, 355, 356, 358], "randomli": [358, 976, 977, 1188, 1189], "fndr_pgmat": [360, 1183, 1184, 1185, 1186], "fndr_algmod": 360, "mtprot": [360, 1179], "nsimul": [360, 1183, 1184], "realproblem": [364, 937, 946, 948, 1005, 1006, 1007, 1195], "esqu": 367, "min_": [367, 1001, 1195], "Such": [367, 1001], "leq": [367, 1001], "subsetproblem": [372, 932, 933, 934, 935, 939, 941, 953, 957, 959, 1010, 1011, 1012, 1195], "usefulnesscriterionselectionproblem": [375, 376, 377, 378, 379], "ucmat": [375, 376, 377, 378, 379], "usefulnesscriterionselectionproblemmixin": [375, 376, 377, 379], "usefulnesscriterionbinaryselectionproblem": 375, "usefulnesscriterionintegerselectionproblem": 376, "usefulnesscriterionrealselectionproblem": 377, "usefulnesscriterionsubsetselectionproblem": 379, "weightedgenomicselectionproblem": [381, 382, 383, 384], "generalizedweightedgenomicestimatedbreedingvaluebinaryselectionproblem": 381, "binaryweightedgenomicselectionproblem": 381, "generalizedweightedgenomicestimatedbreedingvalueintegerselectionproblem": 382, "integerweightedgenomicselectionproblem": 382, "generalizedweightedgenomicestimatedbreedingvaluerealselectionproblem": 383, "realweightedgenomicselectionproblem": 383, "generalizedweightedgenomicestimatedbreedingvaluesubsetselectionproblem": 384, "subsetweightedgenomicselectionproblem": 384, "decnvec_sum": 386, "latentvec_wt": 387, "dtype": [388, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 1045, 1048, 1051, 1054, 1057, 1060, 1110, 1113, 1117, 1121, 1124, 1127, 1177, 1178, 1179, 1180, 1181, 1183, 1184, 1185, 1186, 1188, 1189, 1190, 1191, 1192, 1193, 1195, 1197, 1198, 1200, 1201, 1202], "treat": [389, 430, 1185], "unconstrain": [389, 430, 432], "increas": [390, 433, 735, 736, 1180, 1183, 1184, 1188, 1189, 1191], "decreas": [390, 433, 1183, 1184], "outsid": [390, 433, 713, 1086, 1089, 1104], "undefin": [390, 433], "behavior": [390, 433, 716, 1192], "plane": [390, 433], "perpendicular": [390, 433], "intersect": [390, 433], "soln": [394, 395, 397, 398, 400, 401, 403, 404, 406, 407, 409, 410, 412, 413, 415, 416, 418, 419, 421, 422, 964, 969, 1015, 1016, 1018, 1019, 1021, 1022, 1024, 1025, 1027, 1028, 1181, 1190], "nsoln": [394, 397, 400, 403, 406, 409, 412, 415, 418, 421, 1015, 1018, 1021, 1024, 1027, 1196], "soln_decn": [394, 397, 400, 403, 406, 409, 412, 415, 418, 421, 1015, 1018, 1021, 1024, 1027, 1181, 1196], "soln_obj": [394, 397, 400, 403, 406, 409, 412, 415, 418, 421, 1015, 1018, 1021, 1024, 1027, 1181, 1185, 1188, 1189, 1190, 1191, 1196], "soln_ineqcv": [394, 397, 400, 403, 406, 409, 412, 415, 418, 421, 1015, 1018, 1021, 1024, 1027, 1181, 1196], "soln_eqcv": [394, 397, 400, 403, 406, 409, 412, 415, 418, 421, 1015, 1018, 1021, 1024, 1027, 1181, 1196], "binaryselectionsolut": [394, 398], "mateselectionsolut": [394, 400, 407, 409, 418], "binarysolut": [394, 397, 918, 920, 928, 1016, 1196], "binarymateselectionsolut": 395, "selectionsolut": [397, 403, 406, 412, 416, 421], "avail": [397, 403, 412, 421, 604, 713, 752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 987, 996, 1004, 1009, 1015, 1018, 1021, 1027, 1169, 1179, 1181, 1192, 1201], "violiat": [397, 403, 412, 421, 1015, 1018, 1021, 1027], "integerselectionsolut": [400, 404], "integersolut": [400, 403, 923, 925, 930, 1019, 1196], "realselectionsolut": [409, 413], "realsolut": [409, 412, 937, 946, 948, 1022, 1196], "realmateselectionsolut": 410, "subsetselectionsolut": [418, 422], "subsetsolut": [418, 421, 932, 933, 934, 935, 939, 941, 951, 953, 955, 957, 959, 1028, 1196], "targetfn": [424, 425, 426], "u_a": [424, 425, 426, 437, 438, 737, 752, 755, 758, 764, 767, 784, 1177, 1180, 1181, 1183, 1184, 1185, 1186, 1188, 1189, 1191, 1192, 1193], "deleteri": [424, 752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784], "p_a": [424, 425, 426, 437, 438, 752, 755, 758, 764, 767, 784], "benefici": 425, "desir": [426, 1045, 1048, 1051, 1054, 1057, 1060, 1110, 1113, 1117, 1124, 1166, 1168, 1169, 1176, 1178, 1181, 1182, 1183, 1185, 1186, 1188, 1189, 1190, 1191, 1200], "proport": [426, 793], "transfn": [428, 429, 430, 431, 432, 433, 434, 435, 1185], "wt": [428, 433, 742, 992, 993, 994, 1185], "flatten": [429, 725], "vec": [430, 432], "inbmax": [431, 435], "penalty_wt": [431, 435], "penalti": 431, "exceed": 431, "inbreed": [431, 432, 1045, 1048, 1051, 1054, 1057, 1060, 1168, 1183, 1184, 1191], "max": [431, 992, 993, 994, 1045, 1048, 1051, 1054, 1057, 1060, 1183, 1184, 1186, 1191, 1198], "inb": 431, "ab": [431, 1190], "multipli": [431, 620, 623, 626, 629, 632, 635, 638, 641, 644, 647, 650, 653, 656, 659, 662, 665, 668, 671, 674, 677, 680, 683, 686, 689, 692, 695, 698, 701, 704, 707, 710, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1083, 1095, 1110, 1113, 1117, 1121, 1124, 1127], "applic": [431, 1045, 1048, 1051, 1054, 1057, 1060, 1170], "maxinb": [432, 1184], "leav": [432, 1188, 1189, 1191, 1201], "rest": [432, 1179, 1190], "axi": [434, 435, 450, 452, 533, 534, 535, 536, 537, 538, 550, 555, 556, 620, 623, 626, 629, 632, 635, 638, 640, 641, 644, 647, 650, 653, 656, 659, 662, 665, 668, 671, 674, 676, 677, 680, 683, 686, 689, 691, 692, 695, 698, 701, 704, 707, 710, 713, 719, 725, 726, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1083, 1086, 1089, 1095, 1104, 1110, 1113, 1117, 1121, 1124, 1127, 1191, 1193, 1195, 1197, 1198, 1201, 1202], "summat": [434, 435], "build": [436, 1086, 1089, 1104, 1168, 1169, 1185, 1186], "weightfn": [437, 438], "weigh": [438, 1181], "ones": [438, 784, 1170, 1191, 1192], "These": [439, 1166, 1168, 1173, 1179, 1181, 1182, 1185, 1192, 1193, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202], "io": [439, 592, 593, 595, 596, 598, 599, 601, 602, 604, 605, 607, 608, 610, 611, 613, 614, 616, 617], "subroutin": [441, 442, 443, 444, 445, 453, 455, 456, 457, 458, 461, 490, 493, 530, 557, 718, 744, 745, 746, 747, 748, 1106], "error_attr_python": [442, 443, 444], "attributeerror": [442, 443, 444], "custom": [442, 443, 444, 456, 457, 458, 1085, 1086, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1180, 1181, 1183, 1184, 1185, 1186, 1188, 1189, 1191, 1195], "read": [444, 590, 592, 595, 598, 601, 604, 607, 610, 613, 616, 620, 623, 626, 629, 632, 635, 638, 641, 644, 647, 650, 653, 656, 659, 662, 665, 668, 671, 674, 677, 680, 683, 686, 689, 692, 695, 698, 701, 704, 707, 710, 752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1083, 1086, 1089, 1095, 1104, 1110, 1113, 1117, 1121, 1124, 1127, 1169, 1172, 1183, 1184, 1185, 1186, 1188, 1189, 1190, 1191, 1192, 1193, 1197, 1198, 1201, 1202], "error_generic_numpi": [446, 447, 448, 449, 450, 451, 452], "wname": [446, 539, 587], "primit": 446, "vndim": [448, 449, 551, 552], "minimum": [449, 535, 536, 548, 552, 580, 581, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1181, 1183, 1184, 1192], "vshape": [450, 553], "vaxi": [450, 452, 533, 534, 535, 536, 537, 538, 550, 555, 556], "vsize": [451, 554], "vsum": [452, 556], "error_generic_python": 454, "logic": [454, 525, 620, 665], "path": [455, 456, 457, 458, 764, 767, 784, 1086, 1104, 1110, 1191], "error_io_python": [456, 457, 458], "directori": [456, 1191, 1203], "exist": [456, 457, 458, 951, 1170, 1185, 1193], "notadirectoryerror": 456, "filenotfounderror": [457, 458], "h5py": [459, 460, 526, 527, 528, 529, 732, 733, 809, 812, 814, 817, 825, 827, 829, 831, 852, 855, 857, 860, 868, 870, 872, 874, 1169], "error_type_h5pi": 460, "error_type_numpi": [462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489], "vdtype": 470, "float16": 474, "float32": [475, 1201, 1202], "float64": [476, 764, 767, 770, 784, 1035, 1038, 1041, 1113, 1121, 1127, 1188, 1189, 1191], "int16": 478, "int32": [479, 1201, 1202], "int64": [480, 1113, 1121, 1127], "int8": [481, 626, 629, 635, 638, 641, 644, 647, 650, 653, 656, 659, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 1035, 1038, 1041, 1048, 1051, 1054, 1057, 1060, 1083, 1110, 1113, 1177, 1178, 1179, 1180, 1181, 1192, 1193, 1198, 1201, 1202], "string_": [486, 488], "unicode_": 489, "error_type_panda": [491, 492], "error_type_python": [494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525], "resolut": 495, "infinit": [501, 514, 914], "__len__": 505, "__iter__": 505, "__getitem__": 505, "atribut": 505, "byte": [507, 604, 607, 744], "frozenset": 511, "error_value_h5pi": [527, 528, 529], "stream": [527, 528, 529, 604, 717, 732, 809, 812, 814, 817, 825, 827, 829, 831, 852, 855, 857, 860, 868, 870, 872, 874, 1182], "streamnam": [527, 528, 529], "writabl": [529, 732], "hdf5": [529, 600, 601, 620, 623, 626, 629, 632, 635, 638, 641, 644, 647, 650, 653, 656, 659, 662, 665, 668, 671, 674, 677, 680, 683, 686, 689, 692, 695, 698, 701, 704, 707, 710, 731, 732, 733, 752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1083, 1095, 1110, 1113, 1117, 1121, 1124, 1127, 1169], "error_value_numpi": [531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556], "vmin": [531, 532, 542, 580, 581], "minimium": [531, 532], "vlen": [533, 547, 548, 576, 586, 589], "specif": [533, 534, 535, 536, 537, 538, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 573, 574, 576, 833, 962, 967, 1045, 1048, 1051, 1054, 1057, 1060, 1086, 1110, 1113, 1117, 1124, 1168, 1170, 1179, 1183, 1184, 1193, 1197, 1200, 1201], "measur": [533, 534, 535, 536, 537, 538, 1168, 1192], "vaxislen": [534, 535, 536, 537, 538], "vmax": [542, 580, 581], "interv": [542, 580, 581], "inclus": [542, 581, 1086, 1089, 1104, 1193, 1197, 1198, 1201, 1202], "either": [543, 716, 992, 993, 994, 1169, 1192], "hypercub": 544, "last": [545, 629, 635, 638, 641, 644, 647, 650, 653, 656, 659, 662, 674, 680, 686, 689, 692, 695, 698, 701, 704, 707, 710, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1083, 1086, 1089, 1095, 1104, 1110, 1113, 1117, 1121, 1124, 1127], "least": [548, 552, 720, 983, 1166, 1190], "vmean": 550, "rtol": [550, 555], "1e": [550, 555, 783, 785, 794, 1048, 1051, 1054, 1057, 1060, 1190], "05": [550, 555, 785, 794, 1186], "atol": [550, 555, 783], "08": [550, 555, 783, 785], "rel": [550, 555], "toler": [550, 555, 783, 785, 1045, 1048, 1051, 1054, 1057, 1060], "vstd": 555, "error_value_panda": [558, 559, 560, 561, 562, 563, 564, 565], "df": [558, 559, 560, 561, 616, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1086, 1089, 1104, 1193, 1197, 1198], "dfname": [558, 559, 560, 561], "ix": [559, 562, 567, 1183, 1184, 1185], "seri": [562, 563, 564, 565, 1172, 1183, 1184, 1185], "error_value_python": [567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589], "found": [572, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1180, 1181, 1183, 1184, 1185, 1186, 1193, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203], "anoth": [577, 578, 579, 582, 583, 584, 1183, 1184, 1185, 1186, 1192, 1201], "exclus": [580, 1086, 1089, 1104, 1193, 1197, 1198, 1201, 1202], "outdesc": [580, 581], "outtyp": [580, 581], "compar": [587, 1183, 1184, 1186], "comma": [591, 594], "separ": [591, 594, 764, 767, 784, 809, 812, 814, 817, 825, 827, 829, 831, 852, 855, 857, 860, 868, 870, 872, 874, 953, 1035, 1038, 1041, 1048, 1051, 1054, 1057, 1060, 1086, 1104, 1183, 1185], "csv": [592, 595, 752, 755, 758, 761, 764, 767, 770, 776, 784, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1086, 1089, 1104, 1173, 1183, 1184, 1185, 1186], "to_csv_dict": [592, 752, 755, 758, 761, 764, 767, 770, 776, 784, 1192], "from_csv_dict": [592, 752, 755, 758, 761, 764, 767, 770, 776, 784, 1192], "load": [592, 595, 598, 601, 604, 607, 610, 613, 616, 764, 767, 784, 1035, 1038, 1041, 1110, 1113, 1168], "dictat": [592, 595, 598, 604, 607, 610, 613, 616, 752, 755, 758, 761, 764, 767, 770, 776, 784, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1086, 1089, 1104], "export": [592, 595, 598, 604, 607, 610, 613, 616, 752, 755, 758, 761, 764, 767, 770, 776, 784, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1086, 1089, 1104, 1173, 1186, 1202], "csvdictinputoutput": [593, 752, 755, 758, 761, 767, 770, 776], "to_csv": [595, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1086, 1089, 1104, 1183, 1184, 1185, 1186, 1193, 1197, 1198], "from_csv": [595, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1086, 1089, 1104, 1183, 1184, 1185, 1186, 1193, 1197, 1198], "csvinputoutput": [596, 797, 800, 803, 806, 809, 812, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 855, 862, 865, 868, 870, 872, 874, 876, 879, 1032, 1045, 1089], "to_dict": 598, "from_dict": 598, "dic": [598, 613, 752, 755, 758, 761, 764, 767, 770, 776, 784, 1192], "dictinputoutput": 599, "to_hdf5": [601, 620, 623, 626, 629, 632, 635, 638, 641, 644, 647, 650, 653, 656, 659, 662, 665, 668, 671, 674, 677, 680, 683, 686, 689, 692, 695, 698, 701, 704, 707, 710, 752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1083, 1095, 1110, 1113, 1117, 1121, 1124, 1127, 1192, 1193, 1197, 1198, 1201, 1202], "from_hdf5": [601, 620, 623, 626, 629, 632, 635, 638, 641, 644, 647, 650, 653, 656, 659, 662, 665, 668, 671, 674, 677, 680, 683, 686, 689, 692, 695, 698, 701, 704, 707, 710, 752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1083, 1095, 1110, 1113, 1117, 1121, 1124, 1127, 1192, 1193, 1197, 1198, 1201, 1202], "groupnam": [601, 620, 623, 626, 629, 632, 635, 638, 641, 644, 647, 650, 653, 656, 659, 662, 665, 668, 671, 674, 677, 680, 683, 686, 689, 692, 695, 698, 701, 704, 707, 710, 733, 752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1083, 1095, 1110, 1113, 1117, 1121, 1124, 1127], "written": [601, 620, 623, 626, 629, 632, 635, 638, 641, 644, 647, 650, 653, 656, 659, 662, 665, 668, 671, 674, 677, 680, 683, 686, 689, 692, 695, 698, 701, 704, 707, 710, 752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1083, 1095, 1110, 1113, 1117, 1121, 1124, 1127, 1169, 1193], "hdf5inputoutput": [602, 624, 662, 665, 668, 671, 674, 677, 680, 683, 686, 689, 692, 695, 698, 701, 704, 707, 710, 752, 755, 758, 761, 773, 776, 779, 797, 800, 833, 836, 840, 843, 876, 879, 1032, 1045, 1095, 1117, 1121, 1124, 1127], "assoc": [603, 606], "npy": 604, "to_npi": 604, "from_npi": 604, "fieldnam": 604, "mmap_mod": [604, 607], "allow_pickl": [604, 607], "fix_import": [604, 607], "max_header_s": [604, 607], "mode": [604, 607, 1168], "memmap": [604, 607], "detail": [604, 607, 1169, 1181, 1183, 1184, 1192, 1193, 1197, 1198], "kept": [604, 607], "disk": [604, 607, 1201], "howev": [604, 607], "slice": [604, 607, 620, 623, 626, 629, 632, 635, 638, 641, 644, 647, 650, 653, 656, 659, 662, 665, 668, 671, 674, 677, 680, 683, 686, 689, 692, 695, 698, 701, 704, 707, 710, 726, 746, 747, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1083, 1086, 1089, 1095, 1104, 1110, 1113, 1117, 1121, 1124, 1127, 1193, 1197, 1198, 1201, 1202], "especi": [604, 607, 1185], "small": [604, 607, 1168, 1183, 1184, 1185, 1186, 1190, 1198], "fragment": [604, 607], "larg": [604, 607, 1188, 1189, 1191], "without": [604, 607, 722, 740, 1177, 1180, 1186], "pickl": [604, 607], "reason": [604, 607, 1166], "disallow": [604, 607], "includ": [604, 607, 729, 749, 1086, 1104, 1168, 1181, 1185, 1186, 1188, 1189, 1191, 1192, 1193, 1197, 1198, 1201, 1202], "secur": [604, 607], "arbitrari": [604, 607, 1199], "fail": [604, 607, 1185], "npz": [604, 607], "try": [604, 607, 1198], "old": [604, 607], "new": [604, 607, 620, 623, 626, 629, 632, 635, 638, 641, 644, 647, 650, 653, 656, 659, 662, 665, 668, 671, 674, 677, 680, 683, 686, 689, 692, 695, 698, 701, 704, 707, 710, 717, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 978, 982, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1083, 1086, 1089, 1095, 1104, 1110, 1113, 1117, 1121, 1124, 1127, 1166, 1170, 1173, 1182, 1183, 1184, 1192, 1193, 1195, 1197, 1198, 1200, 1201, 1202], "ascii": [604, 607], "what": [604, 607, 914], "latin1": [604, 607], "corrupt": [604, 607], "header": [604, 607, 764, 767, 784, 809, 812, 814, 817, 825, 827, 829, 831, 852, 855, 857, 860, 868, 870, 872, 874, 1035, 1038, 1041, 1048, 1051, 1054, 1057, 1060, 1086, 1104, 1169, 1183, 1184, 1185, 1186], "thu": [604, 607], "explicitli": [604, 607], "larger": [604, 607], "ast": [604, 607, 1086, 1089, 1104], "literal_ev": [604, 607], "ignor": [604, 607, 953, 1183], "trust": [604, 607], "unnecessari": [604, 607, 1166], "10000": [604, 607], "save": [604, 733, 764, 767, 784, 809, 812, 814, 817, 825, 827, 829, 831, 852, 855, 857, 860, 868, 870, 872, 874, 1035, 1038, 1041, 1048, 1051, 1054, 1057, 1060, 1086, 1104, 1173, 1191, 1192, 1193, 1197, 1198], "portabl": 604, "loadabl": 604, "instal": 604, "librari": [604, 1183, 1184, 1186, 1188, 1189, 1190, 1191], "compat": [604, 677, 1195], "readabl": [604, 744, 1183, 1184], "npyinputoutput": 605, "archiv": 606, "to_npz": 607, "from_npz": 607, "npzinputoutput": 608, "to_numpi": [610, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982], "arr": [610, 725], "numpyinputoutput": 611, "to_pandas_dict": [613, 752, 755, 758, 761, 764, 767, 770, 776, 784, 1192], "from_pandas_dict": [613, 752, 755, 758, 761, 764, 767, 770, 776, 784, 1192], "pandasdictinputoutput": [614, 752, 755, 758, 761, 767, 770, 776], "to_panda": [616, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1086, 1089, 1104, 1185, 1193, 1197, 1198], "from_panda": [616, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1086, 1089, 1104, 1193, 1197, 1198], "pandasinputoutput": [617, 797, 800, 803, 806, 819, 822, 833, 836, 840, 843, 846, 849, 862, 865, 876, 879, 1032, 1045, 1089], "mathemat": [620, 665], "bitwis": [620, 665], "chang": [620, 623, 665, 668, 1166, 1181, 1184, 1185, 1193, 1197, 1198, 1200, 1201], "__add__": [620, 623, 626, 629, 632, 635, 638, 641, 644, 647, 650, 653, 656, 659, 662, 665, 668, 671, 674, 677, 680, 683, 686, 689, 692, 695, 698, 701, 704, 707, 710, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1083, 1095, 1110, 1113, 1117, 1121, 1124, 1127], "__mul__": [620, 623, 626, 629, 632, 635, 638, 641, 644, 647, 650, 653, 656, 659, 662, 665, 668, 671, 674, 677, 680, 683, 686, 689, 692, 695, 698, 701, 704, 707, 710, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1083, 1095, 1110, 1113, 1117, 1121, 1124, 1127], "adjoin": [620, 623, 626, 629, 632, 635, 638, 641, 644, 647, 650, 653, 656, 659, 662, 665, 668, 671, 674, 677, 680, 683, 686, 689, 692, 695, 698, 701, 704, 707, 710, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1083, 1095, 1110, 1113, 1117, 1121, 1124, 1127], "end": [620, 623, 626, 629, 632, 635, 638, 641, 644, 647, 650, 653, 656, 659, 662, 665, 668, 671, 674, 677, 680, 683, 686, 689, 692, 695, 698, 701, 704, 707, 710, 746, 747, 752, 755, 758, 761, 764, 767, 784, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1083, 1086, 1095, 1110, 1113, 1117, 1121, 1124, 1127, 1184, 1191], "append": [620, 623, 626, 629, 632, 635, 638, 641, 644, 647, 650, 653, 656, 659, 662, 665, 668, 671, 674, 677, 680, 683, 686, 689, 692, 695, 698, 701, 704, 707, 710, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1083, 1095, 1110, 1113, 1117, 1121, 1124, 1127, 1183, 1184, 1185, 1186, 1191], "occur": [620, 623, 626, 629, 632, 635, 638, 641, 644, 647, 650, 653, 656, 659, 662, 665, 668, 671, 674, 677, 680, 683, 686, 689, 692, 695, 698, 701, 704, 707, 710, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1083, 1095, 1110, 1113, 1117, 1121, 1124, 1127, 1193, 1197, 1198, 1200, 1201, 1202], "place": [620, 623, 626, 629, 632, 635, 638, 641, 644, 647, 650, 653, 656, 659, 662, 665, 668, 671, 674, 677, 680, 683, 686, 689, 692, 695, 698, 701, 704, 707, 710, 719, 735, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 962, 967, 973, 974, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1082, 1083, 1086, 1089, 1094, 1095, 1104, 1110, 1113, 1117, 1121, 1124, 1127, 1200], "fill": [620, 623, 626, 629, 632, 635, 638, 641, 644, 647, 650, 653, 656, 659, 662, 665, 668, 671, 674, 677, 680, 683, 686, 689, 692, 695, 698, 701, 704, 707, 710, 722, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1083, 1086, 1089, 1095, 1104, 1110, 1113, 1117, 1121, 1124, 1127, 1183, 1184, 1185, 1200], "concat": [620, 623, 626, 629, 632, 635, 638, 641, 644, 647, 650, 653, 656, 659, 662, 665, 668, 671, 674, 677, 680, 683, 686, 689, 692, 695, 698, 701, 704, 707, 710, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1083, 1095, 1110, 1113, 1117, 1121, 1124, 1127, 1183, 1184, 1185, 1190, 1193, 1197, 1198, 1201, 1202], "concaten": [620, 623, 626, 629, 632, 635, 638, 641, 644, 647, 650, 653, 656, 659, 662, 665, 668, 671, 674, 677, 680, 683, 686, 689, 692, 695, 698, 701, 704, 707, 710, 784, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1083, 1095, 1110, 1113, 1117, 1121, 1124, 1127, 1183, 1184, 1185, 1190], "togeth": [620, 623, 626, 629, 632, 635, 638, 641, 644, 647, 650, 653, 656, 659, 662, 665, 668, 671, 674, 677, 680, 683, 686, 689, 692, 695, 698, 701, 704, 707, 710, 784, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1083, 1095, 1110, 1113, 1117, 1121, 1124, 1127, 1193, 1197, 1198], "arraylik": [620, 623, 626, 632, 662, 665, 668, 671, 674, 677, 680, 683, 686, 689, 692, 695, 698, 701, 704, 707, 710, 797, 800, 833, 836, 840, 843, 876, 879, 1032, 1045, 1095, 1117, 1121, 1124, 1127], "except": [620, 623, 626, 629, 632, 635, 638, 641, 644, 647, 650, 653, 656, 659, 662, 665, 668, 671, 674, 677, 680, 683, 686, 689, 692, 695, 698, 701, 704, 707, 710, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1083, 1095, 1110, 1113, 1117, 1121, 1124, 1127, 1159, 1160, 1186, 1202], "join": [620, 623, 626, 629, 632, 635, 638, 641, 644, 647, 650, 653, 656, 659, 662, 665, 668, 671, 674, 677, 680, 683, 686, 689, 692, 695, 698, 701, 704, 707, 710, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1083, 1095, 1110, 1113, 1117, 1121, 1124, 1127], "shallow": [620, 623, 626, 629, 632, 635, 638, 641, 644, 647, 650, 653, 656, 659, 662, 665, 668, 671, 674, 677, 680, 683, 686, 689, 692, 695, 698, 701, 704, 707, 710, 752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1083, 1086, 1089, 1095, 1104, 1110, 1113, 1117, 1121, 1124, 1127], "deepcopi": [620, 623, 626, 629, 632, 635, 638, 641, 644, 647, 650, 653, 656, 659, 662, 665, 668, 671, 674, 677, 680, 683, 686, 689, 692, 695, 698, 701, 704, 707, 710, 752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1083, 1086, 1089, 1095, 1104, 1110, 1113, 1117, 1121, 1124, 1127, 1183, 1184, 1192, 1193, 1197, 1198, 1200, 1201, 1202], "memo": [620, 623, 626, 629, 632, 635, 638, 641, 644, 647, 650, 653, 656, 659, 662, 665, 668, 671, 674, 677, 680, 683, 686, 689, 692, 695, 698, 701, 704, 707, 710, 752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1083, 1086, 1089, 1095, 1104, 1110, 1113, 1117, 1121, 1124, 1127], "deep": [620, 623, 626, 629, 632, 635, 638, 641, 644, 647, 650, 653, 656, 659, 662, 665, 668, 671, 674, 677, 680, 683, 686, 689, 692, 695, 698, 701, 704, 707, 710, 752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1083, 1086, 1089, 1095, 1104, 1110, 1113, 1117, 1121, 1124, 1127, 1183, 1184, 1202], "delet": [620, 623, 626, 629, 632, 635, 638, 641, 644, 647, 650, 653, 656, 659, 662, 665, 668, 671, 674, 677, 680, 683, 686, 689, 692, 695, 698, 701, 704, 707, 710, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1083, 1095, 1110, 1113, 1117, 1121, 1124, 1127], "remov": [620, 622, 623, 626, 629, 632, 635, 638, 641, 644, 647, 650, 653, 656, 659, 662, 665, 668, 671, 674, 677, 680, 683, 686, 689, 692, 695, 698, 701, 704, 707, 710, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 973, 974, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1083, 1086, 1089, 1095, 1104, 1110, 1113, 1117, 1121, 1124, 1127, 1185], "subarrai": [620, 623, 626, 629, 632, 635, 638, 641, 644, 647, 650, 653, 656, 659, 662, 665, 668, 671, 674, 677, 680, 683, 686, 689, 692, 695, 698, 701, 704, 707, 710, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1083, 1095, 1110, 1113, 1117, 1121, 1124, 1127], "insert": [620, 623, 626, 629, 632, 635, 638, 641, 644, 647, 650, 653, 656, 659, 662, 665, 668, 671, 674, 677, 680, 683, 686, 689, 692, 695, 698, 701, 704, 707, 710, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1083, 1095, 1110, 1113, 1117, 1121, 1124, 1127], "raw": [620, 623, 626, 629, 632, 635, 638, 641, 644, 647, 650, 653, 656, 659, 662, 665, 668, 671, 674, 677, 680, 683, 686, 689, 692, 695, 698, 701, 704, 707, 710, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1083, 1095, 1110, 1113, 1117, 1121, 1124, 1127, 1190, 1193, 1197, 1198, 1200, 1201, 1202], "mat_ndim": [620, 623, 626, 629, 632, 635, 638, 641, 644, 647, 650, 653, 656, 659, 662, 665, 668, 671, 674, 677, 680, 683, 686, 689, 692, 695, 698, 701, 704, 707, 710, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1083, 1095, 1110, 1113, 1117, 1121, 1124, 1127, 1193, 1197, 1198, 1201, 1202], "mat_shap": [620, 623, 626, 629, 632, 635, 638, 641, 644, 647, 650, 653, 656, 659, 662, 665, 668, 671, 674, 677, 680, 683, 686, 689, 692, 695, 698, 701, 704, 707, 710, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1083, 1095, 1110, 1113, 1117, 1121, 1124, 1127, 1193, 1197, 1198, 1201, 1202], "certain": [620, 623, 626, 629, 632, 635, 638, 641, 644, 647, 650, 653, 656, 659, 662, 665, 668, 671, 674, 677, 680, 683, 686, 689, 692, 695, 698, 701, 704, 707, 710, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1083, 1095, 1110, 1113, 1117, 1121, 1124, 1127], "nj": [620, 623, 626, 629, 632, 635, 638, 641, 644, 647, 650, 653, 656, 659, 662, 665, 668, 671, 674, 677, 680, 683, 686, 689, 692, 695, 698, 701, 704, 707, 710, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1083, 1095, 1110, 1113, 1117, 1121, 1124, 1127], "densematrix": [621, 623, 626, 629, 632, 635, 638, 644, 647, 650, 653, 656, 659, 1035, 1038, 1041, 1048, 1051, 1054, 1057, 1060, 1083], "mutabl": [622, 623, 667, 668], "abil": [622, 1170, 1200], "mutablematrix": [623, 669, 671, 680], "incorp": [623, 626, 629, 635, 638, 641, 644, 647, 650, 653, 656, 659, 662, 668, 671, 674, 680, 686, 689, 692, 695, 698, 701, 704, 707, 710, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1083, 1095, 1110, 1113, 1117, 1121, 1124, 1127, 1193, 1197, 1198, 1201, 1202], "incorpor": [623, 626, 629, 635, 638, 641, 644, 647, 650, 653, 656, 659, 662, 668, 671, 674, 680, 686, 689, 692, 695, 698, 701, 704, 707, 710, 751, 752, 754, 755, 757, 758, 760, 761, 763, 764, 766, 767, 769, 770, 773, 776, 779, 784, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1083, 1095, 1110, 1113, 1117, 1121, 1124, 1127], "densemutablematrix": [624, 626, 647, 656, 659], "phasedmatrix": [626, 672, 674, 1124, 1127], "adjoin_phas": [626, 629, 671, 674, 1113, 1124, 1127], "densehaplotypematrix": [626, 629, 638, 644, 653, 803, 809, 814, 819, 825, 829, 1110, 1113], "append_phas": [626, 629, 671, 674, 1113, 1124, 1127], "concat_phas": [626, 629, 671, 674, 1113, 1124, 1127], "delete_phas": [626, 629, 671, 674, 1113, 1124, 1127], "array_lik": [626, 629, 635, 638, 641, 644, 647, 650, 653, 656, 659, 674, 686, 689, 692, 698, 701, 704, 710, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 962, 967, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1083, 1095, 1110, 1113, 1117, 1121, 1124, 1127], "incorp_phas": [626, 629, 671, 674, 1113, 1124, 1127], "insert_phas": [626, 629, 671, 674, 1113, 1124, 1127], "nphase": [626, 629, 671, 674, 1110, 1113, 1117, 1121, 1124, 1127, 1177, 1178, 1179, 1180, 1181, 1201, 1202], "phase_axi": [626, 629, 671, 674, 1113, 1124, 1127, 1202], "remove_phas": [626, 629, 671, 674, 1113, 1124, 1127], "select_phas": [626, 629, 671, 674, 1113, 1124, 1127], "densephasedmatrix": [627, 629], "variant": [628, 629, 650, 652, 653, 658, 659, 673, 674, 703, 704, 709, 710, 951, 1035, 1038, 1041, 1082, 1083, 1086, 1089, 1094, 1095, 1104, 1110, 1113, 1117, 1121, 1124, 1127, 1177, 1178, 1179, 1180, 1181, 1183, 1184, 1185, 1186, 1188, 1189, 1190, 1191, 1193, 1198], "taxa_grp": [629, 635, 638, 641, 647, 650, 653, 674, 686, 689, 692, 698, 701, 704, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1110, 1113, 1117, 1121, 1124, 1127, 1177, 1178, 1179, 1180, 1181, 1183, 1184, 1185, 1186, 1193, 1197, 1198, 1201, 1202], "vrnt_chrgrp": [629, 650, 653, 659, 674, 704, 710, 1035, 1038, 1041, 1083, 1086, 1089, 1092, 1095, 1098, 1101, 1104, 1110, 1113, 1117, 1121, 1124, 1127, 1177, 1178, 1179, 1180, 1181, 1193, 1198, 1199, 1200, 1201, 1202], "vrnt_phypo": [629, 650, 653, 659, 674, 704, 710, 1035, 1038, 1041, 1083, 1086, 1089, 1092, 1095, 1098, 1101, 1104, 1110, 1113, 1117, 1121, 1124, 1127, 1177, 1178, 1179, 1180, 1181, 1193, 1198, 1199, 1200, 1201, 1202], "vrnt_name": [629, 653, 659, 674, 704, 710, 1083, 1086, 1095, 1110, 1113, 1117, 1121, 1124, 1127, 1177, 1178, 1179, 1180, 1181, 1193, 1198, 1200, 1201, 1202], "vrnt_genpo": [629, 653, 659, 674, 704, 710, 1083, 1086, 1089, 1092, 1095, 1098, 1101, 1104, 1110, 1113, 1117, 1121, 1124, 1127, 1179, 1193, 1198, 1199, 1200, 1201, 1202], "vrnt_xoprob": [629, 653, 659, 674, 704, 710, 1083, 1095, 1110, 1113, 1117, 1121, 1124, 1127, 1179, 1198, 1201, 1202], "vrnt_hapgrp": [629, 653, 659, 674, 704, 710, 1083, 1095, 1110, 1113, 1117, 1121, 1124, 1127, 1198, 1201, 1202], "vrnt_hapalt": [629, 653, 659, 674, 704, 710, 1083, 1095, 1110, 1113, 1117, 1121, 1124, 1127, 1198, 1201, 1202], "vrnt_hapref": [629, 653, 659, 674, 704, 710, 1083, 1095, 1110, 1113, 1117, 1121, 1124, 1127, 1198, 1201, 1202], "vrnt_mask": [629, 653, 659, 674, 704, 710, 1083, 1095, 1110, 1113, 1117, 1121, 1124, 1127, 1198, 1201, 1202], "densetaxavariantmatrix": [629, 654, 1110], "phasedtaxavariantmatrix": [629, 675, 1124, 1127], "merg": [629, 635, 641, 644, 650, 653, 674, 686, 689, 692, 695, 701, 704, 1124, 1127, 1168], "unus": [629, 632, 764, 767, 770, 784, 1035, 1038, 1041], "adjoin_taxa": [629, 635, 638, 641, 647, 650, 653, 674, 686, 689, 692, 698, 701, 704, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1110, 1113, 1117, 1121, 1124, 1127, 1193, 1197, 1198, 1201, 1202], "adjoin_vrnt": [629, 653, 659, 674, 704, 710, 1083, 1095, 1110, 1113, 1117, 1121, 1124, 1127, 1201, 1202], "physic": [629, 653, 659, 674, 704, 710, 1083, 1086, 1089, 1092, 1095, 1098, 1101, 1104, 1110, 1113, 1117, 1121, 1124, 1127, 1177, 1178, 1179, 1180, 1181, 1183, 1185, 1188, 1189, 1190, 1191, 1193, 1198, 1199, 1200, 1201, 1202], "sequenti": [629, 653, 659, 674, 704, 710, 1083, 1086, 1089, 1092, 1095, 1098, 1101, 1104, 1110, 1113, 1117, 1121, 1124, 1127, 1183, 1184, 1185, 1186, 1201, 1202], "probabl": [629, 653, 659, 674, 704, 710, 721, 722, 797, 803, 819, 833, 840, 846, 862, 876, 883, 886, 889, 892, 895, 898, 901, 904, 907, 910, 911, 912, 913, 914, 932, 933, 934, 935, 962, 967, 976, 977, 978, 981, 1083, 1092, 1095, 1098, 1101, 1110, 1113, 1117, 1121, 1124, 1127, 1168, 1179, 1183, 1184, 1185, 1186, 1201, 1202], "mask": [629, 653, 659, 674, 704, 710, 742, 1083, 1095, 1110, 1113, 1117, 1121, 1124, 1127, 1181, 1183, 1184, 1185, 1190, 1192, 1201, 1202], "append_taxa": [629, 635, 638, 641, 647, 650, 653, 674, 686, 689, 692, 698, 701, 704, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1110, 1113, 1117, 1121, 1124, 1127, 1193, 1197, 1198, 1201, 1202], "append_vrnt": [629, 653, 659, 674, 704, 710, 1083, 1095, 1110, 1113, 1117, 1121, 1124, 1127, 1201, 1202], "densevariantmatrix": [629, 653, 660, 1083, 1110, 1113], "altern": [629, 653, 659, 720, 973, 974, 1083, 1110, 1113, 1166, 1169, 1201, 1202], "concat_taxa": [629, 635, 638, 641, 647, 650, 653, 674, 686, 689, 692, 698, 701, 704, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1110, 1113, 1117, 1121, 1124, 1127, 1183, 1184, 1185, 1193, 1197, 1201, 1202], "concat_vrnt": [629, 653, 659, 674, 704, 710, 1083, 1095, 1110, 1113, 1117, 1121, 1124, 1127, 1201, 1202], "delete_taxa": [629, 635, 638, 641, 647, 650, 653, 674, 686, 689, 692, 698, 701, 704, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1110, 1113, 1117, 1121, 1124, 1127, 1193, 1197, 1198, 1201, 1202], "delete_vrnt": [629, 653, 659, 674, 704, 710, 1083, 1095, 1110, 1113, 1117, 1121, 1124, 1127, 1201, 1202], "group_taxa": [629, 635, 638, 641, 647, 650, 653, 674, 686, 689, 692, 698, 701, 704, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1110, 1113, 1117, 1121, 1124, 1127, 1193, 1197, 1198, 1201, 1202], "group_vrnt": [629, 653, 659, 674, 704, 710, 1083, 1095, 1110, 1113, 1117, 1121, 1124, 1127, 1183, 1184, 1193, 1198, 1201, 1202], "incorp_taxa": [629, 635, 638, 641, 647, 650, 653, 674, 686, 689, 692, 698, 701, 704, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1110, 1113, 1117, 1121, 1124, 1127, 1193, 1197, 1198, 1201, 1202], "incorp_vrnt": [629, 653, 659, 674, 704, 710, 1083, 1095, 1110, 1113, 1117, 1121, 1124, 1127, 1201, 1202], "insert_taxa": [629, 635, 638, 641, 647, 650, 653, 674, 686, 689, 692, 698, 701, 704, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1110, 1113, 1117, 1121, 1124, 1127, 1193, 1197, 1201, 1202], "insert_vrnt": [629, 653, 659, 674, 704, 710, 1083, 1095, 1110, 1113, 1117, 1121, 1124, 1127, 1201, 1202], "is_group": [629, 635, 638, 641, 647, 650, 653, 659, 662, 674, 686, 689, 692, 698, 701, 704, 710, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1083, 1086, 1089, 1095, 1104, 1110, 1113, 1117, 1121, 1124, 1127, 1193, 1197, 1198, 1200, 1201, 1202], "geneticmap": [629, 635, 638, 641, 647, 650, 653, 659, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 1035, 1038, 1041, 1048, 1051, 1054, 1057, 1060, 1083, 1086, 1090, 1092, 1095, 1098, 1101, 1104, 1110, 1113, 1117, 1124], "is_grouped_taxa": [629, 635, 638, 641, 647, 650, 653, 674, 686, 689, 692, 698, 701, 704, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1110, 1113, 1117, 1121, 1124, 1127, 1193, 1197, 1198, 1201, 1202], "is_grouped_vrnt": [629, 653, 659, 674, 704, 710, 1083, 1095, 1110, 1113, 1117, 1121, 1124, 1127, 1201, 1202], "lexsort": [629, 635, 638, 641, 644, 647, 650, 653, 656, 659, 662, 674, 680, 686, 689, 692, 695, 698, 701, 704, 707, 710, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1083, 1086, 1089, 1095, 1104, 1110, 1113, 1117, 1121, 1124, 1127], "indirect": [629, 635, 638, 641, 644, 647, 650, 653, 656, 659, 662, 674, 680, 686, 689, 692, 695, 698, 701, 704, 707, 710, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1083, 1086, 1089, 1095, 1104, 1110, 1113, 1117, 1121, 1124, 1127, 1193, 1197, 1198, 1200, 1201], "stabl": [629, 635, 638, 641, 644, 647, 650, 653, 656, 659, 662, 674, 680, 686, 689, 692, 695, 698, 701, 704, 707, 710, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1083, 1086, 1089, 1095, 1104, 1110, 1113, 1117, 1121, 1124, 1127, 1193, 1195, 1198, 1200], "primari": [629, 635, 638, 641, 644, 647, 650, 653, 656, 659, 662, 674, 680, 686, 689, 692, 695, 698, 701, 704, 707, 710, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1083, 1086, 1089, 1095, 1104, 1110, 1113, 1117, 1121, 1124, 1127], "secondari": [629, 650, 653, 659, 1035, 1038, 1041, 1083, 1110, 1113], "over": [629, 635, 638, 641, 644, 647, 650, 653, 656, 659, 722, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 911, 913, 1035, 1038, 1041, 1048, 1051, 1054, 1057, 1060, 1083, 1110, 1113, 1183, 1184, 1186], "lexsort_taxa": [629, 635, 638, 641, 647, 650, 653, 674, 686, 689, 692, 698, 701, 704, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1110, 1113, 1117, 1121, 1124, 1127, 1193, 1197, 1198, 1201, 1202], "2d": [629, 635, 638, 641, 644, 647, 650, 653, 656, 659, 662, 674, 680, 686, 689, 692, 695, 698, 701, 704, 707, 710, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1083, 1086, 1089, 1092, 1095, 1098, 1101, 1104, 1110, 1113, 1117, 1121, 1124, 1127, 1195], "lexsort_vrnt": [629, 653, 659, 674, 704, 710, 1083, 1095, 1110, 1113, 1117, 1121, 1124, 1127, 1201, 1202], "nvrnt": [629, 653, 659, 674, 704, 710, 1083, 1086, 1089, 1095, 1104, 1110, 1113, 1117, 1121, 1124, 1127, 1177, 1178, 1179, 1180, 1181, 1183, 1184, 1185, 1186, 1188, 1189, 1191, 1192, 1193, 1198, 1200, 1201, 1202], "remove_taxa": [629, 635, 638, 641, 647, 650, 653, 674, 686, 689, 692, 698, 701, 704, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1110, 1113, 1117, 1121, 1124, 1127, 1193, 1197, 1198, 1201, 1202], "remove_vrnt": [629, 653, 659, 674, 704, 710, 1083, 1095, 1110, 1113, 1117, 1121, 1124, 1127, 1201, 1202], "reorder": [629, 635, 638, 641, 644, 647, 650, 653, 656, 659, 662, 674, 680, 686, 689, 692, 695, 698, 701, 704, 707, 710, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1083, 1086, 1089, 1095, 1104, 1110, 1113, 1117, 1121, 1124, 1127], "variantmatrix": [629, 635, 638, 641, 644, 647, 650, 653, 656, 659, 674, 704, 711, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 1035, 1038, 1041, 1048, 1051, 1054, 1057, 1060, 1083, 1095, 1110, 1113, 1117, 1121, 1124, 1127], "reorder_taxa": [629, 635, 638, 641, 647, 650, 653, 674, 686, 689, 692, 698, 701, 704, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1110, 1113, 1117, 1121, 1124, 1127, 1193, 1197, 1198, 1201, 1202], "reorder_vrnt": [629, 653, 659, 674, 704, 710, 1083, 1095, 1110, 1113, 1117, 1121, 1124, 1127, 1201, 1202], "select_taxa": [629, 635, 638, 641, 647, 650, 653, 674, 686, 689, 692, 698, 701, 704, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1110, 1113, 1117, 1121, 1124, 1127, 1183, 1184, 1185, 1190, 1193, 1197, 1198, 1201, 1202], "select_vrnt": [629, 653, 659, 674, 704, 710, 1083, 1095, 1110, 1113, 1117, 1121, 1124, 1127, 1183, 1184, 1185, 1201, 1202], "stix": [629, 635, 638, 641, 644, 647, 650, 653, 656, 659, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 1035, 1038, 1041, 1048, 1051, 1054, 1057, 1060, 1083, 1110, 1113], "spix": [629, 635, 638, 641, 644, 647, 650, 653, 656, 659, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 1035, 1038, 1041, 1048, 1051, 1054, 1057, 1060, 1083, 1110, 1113], "len": [629, 635, 638, 641, 644, 647, 650, 653, 656, 659, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 1035, 1038, 1041, 1048, 1051, 1054, 1057, 1060, 1083, 1110, 1113, 1185, 1190], "sort_taxa": [629, 635, 638, 641, 647, 650, 653, 674, 686, 689, 692, 698, 701, 704, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1110, 1113, 1117, 1121, 1124, 1127, 1193, 1197, 1198, 1201, 1202], "slement": [629, 635, 638, 641, 644, 647, 650, 653, 656, 659, 662, 674, 680, 686, 689, 692, 695, 698, 701, 704, 707, 710, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1083, 1086, 1089, 1095, 1104, 1110, 1113, 1117, 1121, 1124, 1127], "sort_vrnt": [629, 653, 659, 674, 704, 710, 1083, 1095, 1110, 1113, 1117, 1121, 1124, 1127, 1201, 1202], "taxa_axi": [629, 635, 638, 641, 647, 650, 653, 674, 686, 689, 692, 698, 701, 704, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1110, 1113, 1117, 1121, 1124, 1127, 1193, 1197, 1198, 1201, 1202], "taxa_grp_len": [629, 635, 638, 641, 647, 650, 653, 674, 686, 689, 692, 698, 701, 704, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1110, 1113, 1117, 1121, 1124, 1127, 1193, 1197, 1198, 1201, 1202], "taxa_grp_nam": [629, 635, 638, 641, 647, 650, 653, 674, 686, 689, 692, 698, 701, 704, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1110, 1113, 1117, 1121, 1124, 1127, 1193, 1197, 1198, 1201, 1202], "taxa_grp_spix": [629, 635, 638, 641, 647, 650, 653, 674, 686, 689, 692, 698, 701, 704, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1110, 1113, 1117, 1121, 1124, 1127, 1193, 1197, 1198, 1201, 1202], "stop": [629, 635, 638, 641, 647, 650, 653, 659, 674, 686, 689, 692, 698, 701, 704, 710, 735, 736, 737, 738, 748, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1083, 1086, 1089, 1095, 1104, 1110, 1113, 1117, 1121, 1124, 1127, 1193, 1197, 1198, 1200, 1201, 1202], "taxa_grp_stix": [629, 635, 638, 641, 647, 650, 653, 674, 686, 689, 692, 698, 701, 704, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1110, 1113, 1117, 1121, 1124, 1127, 1193, 1197, 1198, 1201, 1202], "ungroup": [629, 635, 638, 641, 647, 650, 653, 659, 662, 674, 686, 689, 692, 698, 701, 704, 710, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1083, 1086, 1089, 1095, 1104, 1110, 1113, 1117, 1121, 1124, 1127], "ungroup_taxa": [629, 635, 638, 641, 647, 650, 653, 674, 686, 689, 692, 698, 701, 704, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060, 1110, 1113, 1117, 1121, 1124, 1127], "densetaxamatrix": [629, 635, 638, 641, 648, 650, 653, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 1035, 1038, 1041, 1048, 1051, 1054, 1057, 1060, 1110, 1113], "ungroup_vrnt": [629, 653, 659, 674, 704, 710, 1083, 1095, 1110, 1113, 1117, 1121, 1124, 1127], "vrnt_axi": [629, 653, 659, 674, 704, 710, 1083, 1095, 1110, 1113, 1117, 1121, 1124, 1127, 1201, 1202], "vrnt_chrgrp_len": [629, 653, 659, 674, 704, 710, 1083, 1086, 1089, 1095, 1104, 1110, 1113, 1117, 1121, 1124, 1127, 1200, 1201, 1202], "vrnt_chrgrp_name": [629, 653, 659, 674, 704, 710, 1083, 1086, 1089, 1095, 1104, 1110, 1113, 1117, 1121, 1124, 1127, 1200, 1201, 1202], "vrnt_chrgrp_spix": [629, 653, 659, 674, 704, 710, 1083, 1086, 1089, 1095, 1104, 1110, 1113, 1117, 1121, 1124, 1127, 1200, 1201, 1202], "vrnt_chrgrp_stix": [629, 653, 659, 674, 704, 710, 1083, 1086, 1089, 1095, 1104, 1110, 1113, 1117, 1121, 1124, 1127, 1200, 1201, 1202], "densephasedtaxavariantmatrix": [630, 1113], "squarematrix": [632, 684, 686, 695], "more": [632, 683, 793, 1168, 1169, 1170, 1175, 1176, 1177, 1180, 1183, 1191, 1195], "sinc": [632, 683, 793, 1110, 1166, 1171, 1172, 1173, 1174, 1175, 1176, 1181, 1185, 1186, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1197, 1198], "vrnt": [632, 683, 1201, 1202], "conform": [632, 683], "is_squar": [632, 635, 638, 641, 644, 683, 686, 689, 692, 695, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1045, 1048, 1051, 1054, 1057, 1060, 1193], "nsquar": [632, 635, 638, 641, 644, 683, 686, 689, 692, 695, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1045, 1048, 1051, 1054, 1057, 1060, 1193, 1198], "square_ax": [632, 635, 638, 641, 644, 683, 686, 689, 692, 695, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1045, 1048, 1051, 1054, 1057, 1060, 1193, 1198], "square_axes_len": [632, 635, 638, 641, 644, 683, 686, 689, 692, 695, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1045, 1048, 1051, 1054, 1057, 1060, 1193, 1198], "densesquarematrix": [633, 635, 644], "squaretaxamatrix": [635, 687, 689, 692, 876, 879, 1045], "corpor": [635, 1048, 1051, 1054, 1057, 1060], "is_square_taxa": [635, 638, 641, 686, 689, 692, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1045, 1048, 1051, 1054, 1057, 1060], "nsquare_taxa": [635, 638, 641, 686, 689, 692, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1045, 1048, 1051, 1054, 1057, 1060], "square_taxa_ax": [635, 638, 641, 686, 689, 692, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1045, 1048, 1051, 1054, 1057, 1060], "square_taxa_axes_len": [635, 638, 641, 686, 689, 692, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1045, 1048, 1051, 1054, 1057, 1060], "densesquaretaxamatrix": [636, 638, 641, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 1048, 1051, 1054, 1057, 1060], "densesquaretraitmatrix": [638, 645, 803, 809, 814, 819, 825, 829], "squaretaxasquaretraitmatrix": [638, 690, 833, 836], "adjoin_trait": [638, 641, 644, 650, 656, 689, 692, 695, 701, 707, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1032, 1035, 1038, 1041, 1193, 1197], "append_trait": [638, 641, 644, 650, 656, 689, 692, 695, 701, 707, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1032, 1035, 1038, 1041, 1193, 1197], "concat_trait": [638, 641, 644, 650, 656, 689, 692, 695, 701, 707, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1032, 1035, 1038, 1041, 1193, 1197], "delete_trait": [638, 641, 644, 650, 656, 689, 692, 695, 701, 707, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1032, 1035, 1038, 1041, 1193, 1197], "incorp_trait": [638, 641, 644, 650, 656, 689, 692, 695, 701, 707, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1032, 1035, 1038, 1041, 1193, 1197], "insert_trait": [638, 641, 644, 650, 656, 689, 692, 695, 701, 707, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1032, 1035, 1038, 1041, 1193, 1197], "is_square_trait": [638, 644, 689, 695, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836], "lexsort_trait": [638, 641, 644, 650, 656, 689, 692, 695, 701, 707, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1032, 1035, 1038, 1041], "nsquare_trait": [638, 644, 689, 695, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836], "remove_trait": [638, 641, 644, 650, 656, 689, 692, 695, 701, 707, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1032, 1035, 1038, 1041, 1193, 1197], "reorder_trait": [638, 641, 644, 650, 656, 689, 692, 695, 701, 707, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1032, 1035, 1038, 1041, 1193, 1197], "select_trait": [638, 641, 644, 650, 656, 689, 692, 695, 701, 707, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1032, 1035, 1038, 1041, 1193, 1197], "sort_trait": [638, 641, 644, 650, 656, 689, 692, 695, 701, 707, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1032, 1035, 1038, 1041, 1193, 1197], "square_trait_ax": [638, 644, 689, 695, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836], "square_trait_axes_len": [638, 644, 689, 695, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836], "trait_axi": [638, 641, 644, 650, 656, 689, 692, 695, 701, 707, 797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1032, 1035, 1038, 1041, 1193, 1197], "densesquaretaxasquaretraitmatrix": [639, 803, 809, 814, 819, 825, 829], "densetraitmatrix": [641, 644, 650, 657, 806, 812, 817, 822, 827, 831, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874], "squaretaxatraitmatrix": [641, 693], "densesquaretaxatraitmatrix": [642, 806, 812, 817, 822, 827, 831, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874], "squaretraitmatrix": [644, 689, 696], "taxamatrix": [647, 674, 686, 689, 692, 699, 701, 704, 797, 800, 833, 836, 840, 843, 876, 879, 1032, 1035, 1038, 1041, 1045, 1117, 1121, 1124, 1127], "taxatraitmatrix": [650, 702, 1032], "densetaxatraitmatrix": [651, 1035, 1038, 1041], "taxavariantmatrix": [653, 674, 705, 1117, 1121], "traitmatrix": [656, 689, 692, 695, 701, 708, 797, 800, 833, 836, 840, 843, 876, 879, 1032], "sortablematrix": [662, 681, 707], "groupabl": 662, "wrapper": [662, 665, 668, 671, 674, 677, 680, 686, 689, 692, 695, 698, 701, 704, 707, 710, 715], "indirectli": [662, 674, 680, 686, 689, 692, 695, 698, 701, 704, 707, 710, 797, 800, 833, 836, 840, 843, 876, 879, 1032, 1045, 1095, 1117, 1121, 1124, 1127], "groupablematrix": [663, 674, 686, 689, 692, 698, 701, 704, 710, 797, 800, 833, 836, 840, 843, 876, 879, 1032, 1045, 1095, 1117, 1121, 1124, 1127], "immut": [665, 677], "mostli": 671, "pertain": [671, 752, 755, 758, 761, 764, 767, 784, 1192, 1195, 1196], "prune": [676, 677, 1086], "prunabl": 677, "backward": 677, "previou": [677, 1086, 1089, 1104, 1190, 1201, 1202], "made": [677, 1183, 1184, 1185, 1192, 1193, 1197, 1198, 1200], "prunablematrix": 678, "sortabl": 680, "ndim": 713, "unsign": 713, "sign": [713, 992, 993, 994], "axiserror": 713, "pseudo": 716, "begin": [716, 752, 755, 758, 761, 764, 767, 784, 1086, 1089, 1104, 1182, 1183, 1184, 1186, 1188, 1189, 1190, 1191], "process": [716, 1168, 1172, 1191, 1193, 1197, 1198, 1201], "ensur": [716, 720, 1035, 1045, 1048, 1051, 1054, 1057, 1060, 1113, 1159, 1160, 1166, 1170], "ti": 716, "entropi": [716, 717], "system": [716, 783, 1169], "bit": [716, 717, 1110, 1113, 1117, 1121, 1124, 1127], "urandom": 716, "depend": [716, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1180, 1181, 1183, 1184, 1192, 1198], "bitgener": 717, "_pcg64": 717, "pcg64": 717, "sbit": 717, "64": [717, 1110, 1113, 1117, 1121, 1124, 1127], "one": [717, 910, 976, 977, 1045, 1048, 1051, 1054, 1057, 1060, 1160, 1166, 1168, 1173, 1175, 1176, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1190, 1191, 1193, 1195, 1197, 1198, 1200, 1201], "shuffl": [719, 720, 1193, 1197, 1198, 1200, 1201, 1202], "local": 720, "outcross": 720, "stochast": [720, 721, 1170], "hillclimb": [720, 932, 933, 934, 935, 951, 953, 955, 973, 974, 975, 976, 977, 978, 981, 1183, 1184, 1186], "univers": [721, 1168, 1171, 1172, 1173, 1174, 1175, 1176], "restrict": [721, 749, 1171, 1172, 1173, 1174, 1175, 1176], "infti": 721, "item": [721, 733, 838, 1029, 1086, 1089, 1104], "tile": 722, "complet": [722, 1086, 1131, 1136, 1142, 1148, 1153, 1154, 1169, 1173, 1184, 1185, 1192], "until": [722, 783, 785, 1045, 1048, 1051, 1054, 1057, 1060], "put": [722, 1185], "remain": [722, 803, 806, 819, 822, 846, 849, 862, 865, 1035, 1038, 1041, 1182, 1191], "arang": [722, 1183, 1184, 1185, 1190, 1193, 1197, 1198, 1200, 1201, 1202], "e": [722, 744, 752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 785, 979, 980, 1086, 1089, 1104, 1110, 1168, 1183, 1184, 1185, 1186, 1191, 1192], "g": [722, 744, 752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 786, 789, 1001, 1045, 1048, 1051, 1054, 1057, 1060, 1086, 1089, 1104, 1110, 1113, 1117, 1124, 1168, 1183, 1184, 1185, 1186, 1191, 1192], "uniform": [722, 1179, 1193, 1195, 1196, 1198], "arrayix": [725, 726, 727, 728, 729, 730], "flatarr": 725, "axisix": 725, "yield": [726, 727, 728, 729, 748, 1183, 1184, 1185, 1193], "diagon": [728, 729, 783, 789, 794, 1045, 1048, 1051, 1054, 1057, 1060], "handl": [731, 950, 951, 953, 954, 955, 1168], "h5file": 733, "in_dict": 733, "recurs": [733, 1192, 1193, 1197, 1198, 1200, 1201], "content": 733, "open": [733, 1178, 1186, 1191], "termin": 733, "skip": 733, "haplo": [735, 736, 737, 738], "nhaploblk_chrom": 735, "genpo": [735, 737, 738, 1200], "chrgrp_stix": [735, 737, 738], "chrgrp_spix": [735, 737, 738], "give": [735, 738, 1045, 1048, 1051, 1054, 1057, 1060], "bin": [735, 736, 1169], "total": [735, 738, 1181, 1188, 1189, 1191], "contraint": [735, 737, 738, 951], "ascend": [735, 737, 738, 745, 1086, 1089, 1104], "due": 735, "haplobin": 736, "hstix": 736, "hspix": 736, "hlen": 736, "genomemat": 737, "chrgrp_len": 737, "chromsom": [737, 1177, 1178, 1179, 1180, 1181, 1193, 1198, 1201, 1202], "tool": [739, 1129, 1170], "destroi": 740, "itertor": 740, "effici": [741, 742, 793, 1186], "fmat": 742, "return_mask": 742, "fit": [742, 752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 1186, 1192], "n_efficient_point": 742, "human": [744, 1183, 1184], "step": [748, 976, 977, 978, 981, 1171, 1173, 1174, 1175, 1176, 1179, 1183, 1184, 1185, 1186, 1188, 1189, 1191], "similar": [748, 1086, 1192, 1193, 1198], "normal": [748, 1183, 1184, 1185, 1186, 1188, 1189, 1191, 1192, 1197], "also": [748, 1086, 1089, 1104, 1169, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1190, 1191, 1192, 1193, 1195, 1197, 1198, 1200, 1201], "simpli": [749, 1086, 1089, 1104, 1166, 1183, 1184, 1185, 1186, 1188, 1189, 1191], "epistat": [751, 752], "additivedominancelineargenomicmodel": [752, 756, 764], "multivari": [752, 755, 758, 761, 764, 767, 770, 776, 784, 1032, 1035, 1038, 1041, 1183], "y": [752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 785, 788, 790, 792, 1185, 1191, 1192], "xb": [752, 755, 758, 761, 764, 767, 784], "zu": [752, 755, 758, 761, 764, 767, 770, 776, 784, 785], "respons": [752, 755, 758, 761, 764, 767, 770, 776, 784, 803, 806, 819, 822, 846, 849, 862, 865, 1035, 1166, 1168, 1181, 1195], "predictor": [752, 755, 758, 761, 764, 767, 770, 776, 784, 1192], "z": [752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 785, 786, 787, 788, 1191, 1192], "term": [752, 755, 758, 761, 764, 767, 770, 776, 784, 1184], "modif": [752, 755, 758, 761, 764, 767, 784, 983, 1166, 1193, 1197, 1198], "decompos": [752, 755, 758, 761, 764, 767, 784, 1045, 1048, 1051, 1054, 1057, 1060], "bmatrix": [752, 755, 758, 761, 764, 767, 784], "z_": [752, 755, 758, 761, 764, 767, 784], "misc": [752, 755, 758, 761, 764, 767, 784, 962, 964, 967, 969], "p_misc": [752, 755, 758, 761, 764, 767, 784], "p_d": [752, 755, 764], "p_i": 752, "u_": [752, 755, 758, 761, 764, 767, 784], "beta": [752, 755, 758, 761, 764, 767, 770, 776, 784, 1177, 1180, 1181, 1183, 1184, 1185, 1186, 1188, 1189, 1191, 1192, 1193], "bulmer": [752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 1185], "speci": [752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 1171, 1174], "contian": [752, 755, 758, 761, 773, 776, 779], "genic": [752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 799, 800, 805, 806, 811, 812, 816, 817, 821, 822, 826, 827, 830, 831, 835, 836, 842, 843, 848, 849, 854, 855, 859, 860, 864, 865, 869, 870, 873, 874, 878, 879, 881, 886, 901, 1184, 1185], "bulmer_numpi": [752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 1192], "daavail": [752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 1192], "present": [752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 809, 812, 814, 817, 825, 827, 829, 831, 852, 855, 857, 860, 868, 870, 872, 874, 1192], "datatyp": [752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784], "nativ": [752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 1045, 1048, 1051, 1054, 1057, 1060, 1110, 1113, 1117, 1121, 1124, 1127], "dacount": [752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 1192], "dafix": [752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 1192], "dafreq": [752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 1192], "faavail": [752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 1192], "favor": [752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784], "facount": [752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 1192], "fafix": [752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 1192], "fafreq": [752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 1192], "cvobj": [752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 1192], "fit_numpi": [752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784], "factor": [752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784], "gebvmat_hat": [752, 755, 758, 761, 773, 776, 779], "gebv_numpi": [752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 1192], "predict_numpi": [752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 1192], "gebv_hat": [752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784], "gegv": [752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 1192], "gegv_numpi": [752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 1192], "hyperparam": [752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 1183, 1184, 1186, 1188, 1189, 1191, 1192], "lsl": [752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 1183, 1184, 1185, 1186, 1192], "lsl_numpi": [752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 1192], "model_nam": [752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 1177, 1180, 1181, 1183, 1184, 1186, 1188, 1189, 1191, 1192, 1193], "nexplan": [752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 1192], "explanatori": [752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 1192], "nexplan_beta": [752, 755, 758, 761, 764, 767, 770, 776, 784, 1192], "nexplan_u": [752, 755, 758, 761, 764, 767, 770, 776, 784, 1192], "nexplan_u_a": [752, 755, 758, 764, 767, 784, 1192], "nexplan_u_d": [752, 755, 764, 1192], "nexplan_u_i": [752, 1192], "nexplan_u_misc": [752, 755, 758, 764, 767, 784, 1192], "nparam": [752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 1192], "nparam_beta": [752, 755, 758, 761, 764, 767, 770, 776, 784, 1192], "nparam_u": [752, 755, 758, 761, 764, 767, 770, 776, 784, 1192], "nparam_u_a": [752, 755, 758, 764, 767, 784, 1192], "nparam_u_d": [752, 755, 764, 1192], "nparam_u_i": [752, 1192], "nparam_u_misc": [752, 755, 758, 764, 767, 784, 1192], "bvmat_hat": [752, 755, 758, 761, 773, 776, 779], "y_hat": [752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784], "rsq": [752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784], "score_numpi": [752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 1192], "u_d": [752, 755, 764, 1192], "u_i": [752, 1192], "u_misc": [752, 755, 758, 761, 764, 767, 784, 1177, 1180, 1181, 1183, 1184, 1185, 1186, 1188, 1189, 1191, 1192, 1193], "usl": [752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 1183, 1184, 1185, 1186, 1192], "usl_numpi": [752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 1192], "var_a": [752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 1183, 1184, 1185, 1192], "var_a_numpi": [752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 1192], "var_g": [752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 1192], "var_g_numpi": [752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 784, 1192], "additivedominanceepistaticlineargenomicmodel": 753, "p_c": 761, "u_c": 761, "coancestrylineargenomicmodel": [762, 1192], "implementign": 763, "prediciton": 763, "denseadditivelineargenomicmodel": [764, 768, 784, 1177, 1180, 1181, 1183, 1184, 1185, 1186, 1188, 1189, 1191, 1192, 1193], "fo": 764, "object_": [764, 767, 770], "sep": [764, 767, 784, 809, 812, 814, 817, 825, 827, 829, 831, 852, 855, 857, 860, 868, 870, 872, 874, 1035, 1038, 1041, 1048, 1051, 1054, 1057, 1060, 1086, 1104, 1183, 1184, 1185, 1186], "infer": [764, 767, 784, 1035, 1038, 1041, 1086], "delimit": [764, 767, 784, 1035, 1038, 1041, 1048, 1051, 1054, 1057, 1060, 1086, 1104], "sensit": [764, 767, 784, 1086, 1104], "denseadditivedominancelineargenomicmodel": 765, "denselineargenomicmodel": [771, 1192], "neural": 779, "network": 779, "nonlineargenomicmodel": [780, 1192], "rr": [781, 784], "blup": [781, 784, 785], "intercept": [781, 784, 1183, 1184, 1185, 1186, 1188, 1189, 1191], "rrblupmodel0": [782, 783, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794], "maxit": [783, 785], "1000": [783, 785, 831, 874, 1178, 1179, 1183, 1184, 1185, 1188, 1189, 1191, 1198, 1202], "equat": [783, 1193], "gauss": [783, 785], "seidel": [783, 785], "symmetr": [783, 789, 809, 814, 825, 829, 852, 857, 868, 872], "nmkr": [783, 785, 786, 787, 788], "success": [783, 785, 1092, 1098, 1101, 1199], "reach": [783, 785, 1183, 1184, 1185], "ml": [784, 793], "independ": [784, 1182], "observ": [784, 785, 788, 790, 792, 793, 914, 1186], "incid": 784, "slope": 784, "design": [784, 785, 1167, 1168, 1169, 1170, 1193], "mvn": [784, 785, 1185], "varu": [784, 785, 791, 793], "vare": [784, 785, 791, 793], "varlb": 785, "varub": 785, "100000": 785, "gsatol": 785, "gsmaxit": 785, "ridg": [785, 787, 791], "emma": 785, "nelder": 785, "mead": 785, "nob": [785, 786, 787, 788, 789, 790, 792, 793, 794], "around": [785, 792, 1197], "permit": 785, "lambda": 787, "nmrk": 788, "spectral": [789, 790, 794], "orthonorm": [789, 794], "basi": [789, 794], "highest": 789, "eigenvalu": [789, 793, 794, 1045, 1048, 1051, 1054, 1057, 1060], "lowest": [789, 1192], "eta": [790, 793, 971, 972], "comput": [790, 979, 980, 1045, 1048, 1051, 1054, 1057, 1060, 1190], "likelihood": [790, 793], "ncomp": [790, 793, 794], "eigenvector": [790, 794], "etasq": [790, 793], "logvarcomp": 793, "tol": 794, "nonzero": 794, "submodul": [795, 1195, 1196, 1199], "pcvmat": [797, 798, 800, 801, 803, 804, 806, 807, 809, 810, 812, 814, 815, 817, 819, 820, 822, 823, 825, 827, 829, 831, 833, 834, 836, 837], "progenygeneticcovariancematrix": [797, 803, 809, 814, 819, 825, 829, 834], "epgc": [797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 1193], "offspr": [797, 800, 803, 819, 833, 836, 840, 843, 876, 879, 1168, 1174, 1179], "from_algmod": [797, 800, 803, 806, 809, 812, 814, 817, 825, 827, 829, 831, 840, 843, 846, 849, 852, 855, 857, 860, 868, 870, 872, 874, 883, 886, 889, 892, 895, 898, 901, 1193], "algmod": [797, 800, 803, 806, 809, 812, 814, 817, 825, 827, 829, 831, 840, 843, 846, 849, 852, 855, 857, 860, 868, 870, 872, 874, 883, 886, 889, 892, 895, 898, 901, 1177, 1180, 1181, 1183, 1184, 1186, 1188, 1189, 1191, 1192, 1193], "from_gmod": [797, 800, 803, 806, 809, 812, 814, 817, 819, 822, 825, 827, 829, 831, 833, 836, 840, 843, 846, 849, 852, 855, 857, 860, 862, 865, 868, 870, 872, 874, 876, 879, 883, 886, 889, 892, 895, 898, 901, 904, 907, 1193], "additiveprogenygeneticcovariancematrix": [798, 803], "progenygeniccovariancematrix": [800, 806, 812, 817, 822, 827, 831, 837], "additiveprogenygeniccovariancematrix": [801, 806], "denseprogenygeneticcovariancematrix": [803, 809, 814, 820, 825, 829], "denseadditiveprogenygeneticcovariancematrix": [804, 809, 814, 825, 829], "denseprogenygeniccovariancematrix": [806, 812, 817, 823, 827, 831], "denseadditiveprogenygeniccovariancematrix": [807, 812, 817, 827, 831], "densefourwaydhadditiveprogenygeneticcovariancematrix": [809, 815], "female_axi": [809, 812, 825, 827, 829, 831, 852, 855, 868, 870, 872, 874], "possibl": [809, 814, 825, 852, 857, 868, 1001, 1024, 1170, 1183, 1185, 1201], "pairwis": [809, 829, 852, 872, 1086, 1089, 1092, 1098, 1101, 1104], "inbr": [809, 814, 825, 829, 852, 857, 868, 872, 1185, 1186], "lehermei": [809, 814, 825, 852, 857, 868, 914], "2019": [809, 814, 825, 852, 857, 868], "female_col": [809, 812, 825, 827, 829, 831, 852, 855, 868, 870, 872, 874, 1193], "female_grp_col": [809, 812, 825, 827, 829, 831, 852, 855, 868, 870, 872, 874, 1193], "female_grp": [809, 812, 825, 827, 829, 831, 852, 855, 868, 870, 872, 874], "male_col": [809, 812, 825, 827, 829, 831, 852, 855, 868, 870, 872, 874, 1193], "male_grp_col": [809, 812, 825, 827, 829, 831, 852, 855, 868, 870, 872, 874, 1193], "male_grp": [809, 812, 825, 827, 829, 831, 852, 855, 868, 870, 872, 874], "trait1_col": [809, 812, 814, 817, 825, 827, 829, 831], "trait1": [809, 812, 814, 817, 825, 827, 829, 831, 1197], "trait2_col": [809, 812, 814, 817, 825, 827, 829, 831], "trait2": [809, 812, 814, 817, 825, 827, 829, 831, 1197], "covariance_col": [809, 812, 814, 817, 825, 827, 829, 831], "variance_col": [809, 814, 825, 829, 852, 855, 857, 860, 868, 870, 872, 874, 1193], "tensor": [809, 814, 825, 852, 857, 868], "male_axi": [809, 812, 825, 827, 829, 831, 852, 855, 868, 870, 872, 874], "nfemal": [809, 812, 825, 827, 829, 831, 852, 855, 868, 870, 872, 874], "nmale": [809, 812, 825, 827, 829, 831, 852, 855, 868, 870, 872, 874], "densedihybriddhadditiveprogenygeneticcovariancematrix": 810, "female1_axi": [814, 817, 857, 860], "female2_axi": [814, 817, 857, 860], "female2_col": [814, 817, 857, 860], "female2_grp_col": [814, 817, 857, 860], "female2_grp": [814, 817, 857, 860], "male2_col": [814, 817, 857, 860], "male2_grp_col": [814, 817, 857, 860], "male2_grp": [814, 817, 857, 860], "female1_col": [814, 817, 857, 860], "female1_grp_col": [814, 817, 857, 860], "female1_grp": [814, 817, 857, 860], "male1_col": [814, 817, 857, 860], "male1_grp_col": [814, 817, 857, 860], "male1_grp": [814, 817, 857, 860], "densetwowaydhadditiveprogenygeneticcovariancematrix": 814, "male1_axi": [814, 817, 857, 860], "male2_axi": [814, 817, 857, 860], "nfemale1": [814, 817, 857, 860], "nfemale2": [814, 817, 857, 860], "nmale1": [814, 817, 857, 860], "nmale2": [814, 817, 857, 860], "recurrent_col": [825, 827, 868, 870], "recurrent_grp_col": [825, 827, 868, 870], "recurrent_grp": [825, 827, 868, 870], "nrecurr": [825, 827, 868, 870], "recurrent_axi": [825, 827, 868, 870], "osthushenrich": [829, 872], "2017": [829, 872, 914], "experiment": 838, "geneticvariancematrix": [840, 846, 852, 857, 862, 868, 872, 877, 883, 886, 904], "additivegeneticvariancematrix": [841, 846, 883, 1193], "genicvariancematrix": [843, 849, 855, 860, 865, 870, 874, 880, 886, 907], "additivegenicvariancematrix": [844, 849, 886, 1193], "densegeneticvariancematrix": [846, 852, 857, 863, 868, 872, 1193], "denseadditivegeneticvariancematrix": [847, 852, 857, 868, 872, 1193], "densegenicvariancematrix": [849, 855, 860, 866, 870, 874, 1193], "denseadditivegenicvariancematrix": [850, 855, 860, 870, 874, 1193], "densefourwaydhadditivegeneticvariancematrix": [852, 858, 892, 1193], "densedihybriddhadditivegeneticvariancematrix": [853, 889, 1193], "densetwowaydhadditivegeneticvariancematrix": [857, 898, 1193], "fcty": [883, 884, 886, 887, 889, 890, 892, 893, 895, 896, 898, 899, 901, 902, 904, 905, 907, 908, 1064, 1065, 1067, 1068, 1070, 1071, 1073, 1074, 1076, 1077, 1079, 1080, 1184, 1191], "additivegeneticvariancematrixfactori": [884, 889, 892, 895, 898], "genicvariancematrixfactori": [886, 908], "additivegenicvariancematrixfactori": [887, 901], "densedihybriddhadditivegeneticvariancematrixfactori": 890, "densefourwaydhadditivegeneticvariancematrixfactori": 893, "densethreewaydhadditivegeneticvariancematrix": [895, 1193], "densethreewaydhadditivegeneticvariancematrixfactori": 896, "densetwowaydhadditivegeneticvariancematrixfactori": 899, "densetwowaydhadditivegenicvariancematrix": [901, 1193], "densetwowaydhadditivegenicvariancematrixfactori": 902, "d1": [910, 911], "caus": [910, 911, 912, 1086, 1089, 1104, 1200], "linkag": [910, 911, 912, 913, 1086, 1089, 1104, 1186, 1192, 1193, 1200], "disequilibrium": [910, 911, 912, 913, 1193], "prior": [910, 912, 913, 1086, 1089, 1104, 1185], "interm": [910, 911, 912, 913], "prioriti": [911, 913, 1086, 1200], "d_1": 911, "d2": 912, "d_2": 913, "rate": 914, "filial": 914, "r_k": 914, "infrastructur": [915, 1030], "nsga": [917, 918, 922, 923, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 945, 946, 956, 957, 961, 962, 966, 967, 1188, 1189, 1190, 1194], "ii": [917, 918, 922, 923, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 945, 946, 956, 957, 961, 962, 966, 967, 1188, 1189, 1190, 1194], "adapt": [917, 918, 922, 923, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 945, 946, 956, 957, 961, 962, 966, 967, 968, 969, 1170], "opt": [918, 920, 921, 923, 925, 926, 928, 930, 932, 933, 934, 935, 937, 939, 941, 943, 944, 946, 948, 949, 951, 953, 955, 957, 959, 960, 962, 964, 965, 967, 969, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 987, 988, 989, 990, 992, 993, 994, 996, 997, 998, 999, 1001, 1002, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1015, 1016, 1018, 1019, 1021, 1022, 1024, 1025, 1027, 1028, 1183, 1184, 1186, 1188, 1189, 1190, 1191], "algo": [918, 920, 921, 923, 925, 926, 928, 930, 932, 933, 934, 935, 937, 939, 941, 943, 944, 946, 948, 949, 951, 953, 955, 957, 959, 960, 962, 964, 965, 967, 969, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 1183, 1184, 1186, 1188, 1189, 1190, 1191], "pop_siz": [918, 923, 928, 930, 932, 933, 934, 935, 937, 939, 941, 946, 957, 1188, 1189, 1190, 1191, 1194], "discret": [918, 923, 928, 930, 932, 933, 934, 935, 937, 939, 941, 946, 957, 962, 967, 969, 976, 977, 978, 981, 982, 1185], "nomin": [918, 923, 928, 930, 932, 933, 934, 935, 937, 939, 941, 946, 957, 962, 967, 969, 987, 996, 1004, 1009, 1027], "keep": [918, 923, 928, 930, 932, 933, 934, 935, 937, 939, 941, 946, 957, 962, 967, 1086, 1089, 1104, 1183, 1184, 1185, 1186, 1190], "morgan": [918, 923, 928, 930, 932, 933, 934, 935, 937, 939, 941, 946, 957, 962, 967, 979, 980, 1086, 1092, 1098, 1101, 1104, 1107, 1199], "optimizaiont": [918, 920, 923, 925, 928, 930, 932, 933, 934, 935, 937, 939, 941, 943, 946, 948, 951, 953, 955, 957, 959], "nsga2memeticsubsetgeneticalgorithm": [932, 933, 934, 935], "phc": [932, 933, 934, 935, 974, 976, 977, 978, 981], "nhcstep": [932, 933, 935, 976, 977, 981], "experi": [932, 933, 934, 935], "iii": [940, 941], "nrefpt": [941, 1191], "steepest": [950, 951, 953, 954, 955, 968, 969, 973, 974, 1194], "ascent": [950, 951, 953, 954, 955, 968, 969], "hill": [950, 951, 954, 955, 968, 969, 1194], "climber": [950, 951, 954, 955, 968, 969, 1194], "capabl": [950, 951, 953, 954, 955, 1170], "improv": [951, 1166, 1170, 1183], "convex": [951, 953, 1185, 1198], "setproblem": [951, 955], "union": 955, "cxset": [962, 967], "ind1": [962, 967], "ind2": [962, 967], "indpb": [962, 967], "mutset": [962, 967], "ind": [962, 967], "sspace": [962, 964, 967, 969], "mutat": [962, 967, 973, 974, 975, 976, 977, 978, 980, 981, 1168], "decn": [964, 969, 1195], "addon": 970, "pymoo_addon": [971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984], "9": [971, 1200], "at_least_onc": 971, "polynomialmut": 971, "__call__": [971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982], "elem": [971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982], "prob_var": 972, "15": 972, "prob_exch": 972, "prob_bin": 972, "n_offspr": 972, "simulatedbinarycrossov": 972, "setspac": [973, 974, 975, 976, 977, 978, 980, 981, 982], "p_hillclimb": [973, 975], "memet": [973, 974, 975, 978, 981], "exchang": [973, 974, 975, 976, 977, 978, 980, 981], "subsetmut": [973, 975, 976, 977, 978, 980, 981], "pop": [973, 974, 982, 1183, 1184, 1185], "inplac": [973, 974], "indiv": [973, 974], "pick": [973, 974], "nhc": [974, 976, 977, 981], "nearbi": [976, 977], "choos": [976, 977, 1168, 1185, 1188, 1189, 1191, 1200], "individiu": [976, 977, 978, 981], "reduced_exchang": [976, 977, 978, 981], "exhibit": [977, 1192], "maxhc": 978, "maxhcstep": 978, "leader": 978, "correa": [979, 980], "steiner": [979, 980], "freita": [979, 980], "carnieri": [979, 980], "median": [979, 980], "evolutionari": [979, 980], "confer": [979, 980], "gecco": [979, 980], "san": [979, 980], "francisco": [979, 980], "california": [979, 980], "proceed": [979, 980], "kaufmann": [979, 980], "publish": [979, 980, 1200], "subsetcrossov": 979, "param": [979, 980, 1177, 1180, 1181, 1192, 1193], "n_sampl": 982, "obj1": [983, 1195], "cv1": 983, "obj2": [983, 1195], "cv2": [983, 1183], "constaint": 983, "f_": [987, 996, 1001, 1004, 1009, 1190, 1195], "g_": [987, 996, 1001, 1004, 1009, 1190, 1195], "h_": [987, 996, 1001, 1004, 1009, 1190, 1195], "optimization_typ": [992, 993, 994], "min": [992, 993, 994, 1045, 1048, 1051, 1054, 1057, 1060, 1186, 1191, 1198], "intend": [992, 1168, 1192], "pleas": 992, "minimizingfunctionweight": 992, "maximizingfunctionweight": 992, "functionweight": [993, 994], "unalt": [993, 994, 1201], "extend": [1001, 1085, 1086, 1166, 1170, 1171, 1172, 1173, 1174, 1175, 1176], "w_f": 1001, "w_g": 1001, "w_h": 1001, "__init__": [1001, 1024, 1132, 1134, 1171, 1172, 1173, 1174, 1175, 1176, 1185, 1190], "_evalu": [1001, 1190, 1195], "It": [1001, 1024, 1035, 1168, 1169, 1171, 1175, 1176, 1183, 1184, 1185], "setsolut": [1014, 1017, 1020, 1026], "essenti": [1024, 1168, 1169, 1181, 1182, 1196, 1202], "popgen": [1032, 1033, 1035, 1036, 1038, 1039, 1041, 1042, 1045, 1046, 1048, 1049, 1051, 1052, 1054, 1055, 1057, 1058, 1060, 1061, 1064, 1065, 1067, 1068, 1070, 1071, 1073, 1074, 1076, 1077, 1079, 1080, 1083, 1084, 1086, 1087, 1089, 1090, 1092, 1093, 1095, 1096, 1098, 1099, 1101, 1102, 1104, 1105, 1107, 1110, 1111, 1113, 1114, 1115, 1117, 1118, 1119, 1121, 1122, 1124, 1125, 1127, 1128, 1183, 1184, 1185, 1186, 1188, 1189, 1190, 1191], "frac": [1032, 1035, 1038, 1041, 1045, 1048, 1051, 1054, 1057, 1060], "sigma": [1032, 1035, 1038, 1041], "reconstitut": [1032, 1035, 1038, 1041, 1197], "targmax": [1032, 1035, 1038, 1041, 1197], "targmin": [1032, 1035, 1038, 1041, 1197], "tmax": [1032, 1035, 1038, 1041, 1183, 1184, 1197], "tmean": [1032, 1035, 1038, 1041, 1183, 1184, 1185, 1197], "tmin": [1032, 1035, 1038, 1041, 1183, 1184, 1197], "trang": [1032, 1035, 1038, 1041, 1197], "tstd": [1032, 1035, 1038, 1041, 1183, 1184, 1185, 1197], "tvar": [1032, 1035, 1038, 1041, 1197], "de": [1032, 1035, 1038, 1041], "re": [1035, 1038, 1041, 1086, 1089, 1104], "densebreedingvaluematrix": [1036, 1038, 1041, 1183, 1184, 1185, 1197], "denseestimatedbreedingvaluematrix": 1039, "densegenomicestimatedbreedingvaluematrix": 1042, "cmat": [1045, 1046, 1048, 1049, 1051, 1052, 1054, 1055, 1057, 1058, 1060, 1061, 1064, 1065, 1067, 1068, 1070, 1071, 1073, 1074, 1076, 1077, 1079, 1080, 1184, 1190, 1191], "math": [1045, 1048, 1051, 1054, 1057, 1060, 1121, 1190, 1195], "apply_jitt": [1045, 1048, 1051, 1054, 1057, 1060, 1198], "eigvaltol": [1045, 1048, 1051, 1054, 1057, 1060], "minjitt": [1045, 1048, 1051, 1054, 1057, 1060], "maxjitt": [1045, 1048, 1051, 1054, 1057, 1060], "nattempt": [1045, 1048, 1051, 1054, 1057, 1060], "jitter": [1045, 1048, 1051, 1054, 1057, 1060], "exce": [1045, 1048, 1051, 1054, 1057, 1060, 1086, 1183, 1184], "attempt": [1045, 1048, 1051, 1054, 1057, 1060, 1183, 1184, 1185], "up": [1045, 1048, 1051, 1054, 1057, 1060, 1183, 1184], "wa": [1045, 1048, 1051, 1054, 1057, 1060, 1086, 1089, 1104, 1188, 1189], "successfulli": [1045, 1048, 1051, 1054, 1057, 1060], "retriev": [1045, 1048, 1051, 1054, 1057, 1060], "invers": [1045, 1048, 1051, 1054, 1057, 1060, 1086, 1191, 1199, 1201], "is_positive_semidefinit": [1045, 1048, 1051, 1054, 1057, 1060, 1198], "semidefinit": [1045, 1048, 1051, 1054, 1057, 1060], "mat_asformat": [1045, 1048, 1051, 1054, 1057, 1060, 1110, 1113, 1117, 1124, 1190, 1198], "max_inbreed": [1045, 1048, 1051, 1054, 1057, 1060, 1198], "mathrm": [1045, 1048, 1051, 1054, 1057, 1060], "trace": 1045, "dtypelik": [1045, 1048, 1051, 1054, 1057, 1060, 1117, 1124], "min_inbreed": [1045, 1048, 1051, 1054, 1057, 1060, 1198], "g1": [1045, 1048, 1051, 1054, 1057, 1060], "k1": [1045, 1048, 1051, 1054, 1057, 1060], "coancestrymatrix": [1046, 1048, 1051, 1054, 1057, 1060, 1064, 1067, 1070, 1073, 1076, 1079], "2e": [1048, 1051, 1054, 1057, 1060], "14": [1048, 1051, 1054, 1057, 1060, 1169], "06": [1048, 1051, 1054, 1057, 1060], "interpret": [1048, 1051, 1054, 1057, 1060], "diag": [1048, 1051, 1054, 1057, 1060], "densecoancestrymatrix": [1049, 1051, 1054, 1057, 1060, 1067, 1198], "densegeneralizedweightedcoancestrymatrix": [1052, 1070], "molecular": [1054, 1184, 1190, 1198], "densemolecularcoancestrymatrix": [1055, 1073, 1190, 1198], "vanraden": [1056, 1057, 1060, 1191, 1198], "p_anc": [1057, 1060, 1076, 1079], "ancestr": [1057, 1060], "densevanradencoancestrymatrix": [1058, 1076, 1198], "yang": [1059, 1060, 1191, 1198], "2010": [1059, 1060], "denseyangcoancestrymatrix": [1061, 1079, 1198], "densecoancestrymatrixfactori": [1068, 1070], "densegeneralizedweightedcoancestrymatrixfactori": 1071, "densemolecularcoancestrymatrixfactori": [1074, 1184, 1191], "densevanradencoancestrymatrixfactori": 1077, "denseyangcoancestrymatrixfactori": 1080, "gmap": [1083, 1084, 1086, 1087, 1089, 1090, 1092, 1093, 1095, 1096, 1098, 1099, 1101, 1102, 1104, 1105, 1107, 1110, 1113, 1117, 1124, 1183, 1184, 1185, 1186], "geneticmappablematrix": [1083, 1096, 1117], "interpol": [1083, 1086, 1089, 1095, 1104, 1110, 1113, 1117, 1124, 1183, 1184, 1185, 1186], "interp_genpo": [1083, 1086, 1089, 1095, 1104, 1110, 1113, 1117, 1124, 1200], "postion": [1083, 1095, 1110, 1113, 1117, 1124], "interopol": [1083, 1095, 1110, 1113, 1117, 1124], "interp_xoprob": [1083, 1095, 1110, 1113, 1117, 1124, 1183, 1184, 1185, 1186], "AND": [1083, 1095, 1110, 1113, 1117, 1124], "densegeneticmappablematrix": [1084, 1110], "vrnt_stop": [1086, 1200], "vrnt_fncode": [1086, 1200], "spline": [1086, 1089, 1104, 1183, 1185], "spline_kind": [1086, 1089, 1104, 1200], "spline_fill_valu": [1086, 1089, 1104, 1200], "extrapol": [1086, 1089, 1104], "vrnt_genpos_unit": [1086, 1104, 1183, 1184, 1185, 1186], "auto_group": [1086, 1104, 1183, 1184, 1185, 1186, 1200], "auto_build_splin": [1086, 1104, 1183, 1184, 1185, 1186, 1200], "longer": 1086, "nucleotid": 1086, "pre": [1086, 1104, 1179, 1194], "built": [1086, 1089, 1104, 1170, 1179, 1194, 1200], "automat": [1086, 1104, 1179, 1183, 1185, 1186, 1188, 1189, 1190, 1191, 1197, 1200], "kind": [1086, 1089, 1104], "nearest": [1086, 1089, 1104], "slinear": [1086, 1089, 1104], "cubic": [1086, 1089, 1104], "zeroth": [1086, 1089, 1104], "request": [1086, 1089, 1104], "properli": [1086, 1089, 1104], "x_new": [1086, 1089, 1104], "anyth": [1086, 1089, 1104], "regardless": [1086, 1089, 1104, 1194], "taken": [1086, 1089, 1104], "meant": [1086, 1089, 1104], "below": [1086, 1089, 1104, 1168, 1169, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203], "abov": [1086, 1089, 1104, 1171, 1172, 1173, 1174, 1175, 1176, 1181, 1183, 1184, 1185, 1186, 1190, 1195, 1200], "fill_valu": [1086, 1089, 1104], "cm": [1086, 1104, 1107, 1183, 1184, 1185, 1186], "centimorgan": [1086, 1104, 1107], "overwritten": [1086, 1104], "build_splin": [1086, 1089, 1104, 1200], "congruenc": [1086, 1089, 1104], "assess": [1086, 1089, 1104, 1168, 1192], "site": [1086, 1089, 1104], "concord": [1086, 1089, 1104], "map_po": [1086, 1089, 1104], "contigu": [1086, 1089, 1104], "qualiti": [1086, 1089, 1104], "assumpt": [1086, 1089, 1104, 1169, 1186], "issu": [1086, 1089, 1104, 1200], "incorrect": [1086, 1089, 1104], "correctli": [1086, 1089, 1104, 1202], "vrnt_chrgrp_col": [1086, 1104, 1183, 1184, 1185, 1186], "chr": [1086, 1104, 1183, 1184, 1185, 1186], "vrnt_phypos_col": [1086, 1104, 1183, 1184, 1185, 1186], "po": [1086, 1104, 1183, 1184, 1185, 1186], "vrnt_stop_col": 1086, "vrnt_genpos_col": [1086, 1104, 1183, 1184, 1185, 1186], "vrnt_name_col": 1086, "vrnt_fncode_col": 1086, "valid": [1086, 1104], "url": [1086, 1104], "http": [1086, 1104, 1169], "ftp": [1086, 1104], "s3": [1086, 1104], "host": [1086, 1104], "doc": [1086, 1104], "from_egmap": [1086, 1200], "egmap": [1086, 1200], "bed": 1086, "we": [1086, 1181, 1183, 1184, 1185, 1186, 1188, 1189, 1190, 1191], "assembli": [1086, 1200], "pseudomolecul": 1086, "low": 1086, "mi": 1086, "our": [1086, 1181, 1183, 1184, 1185, 1186, 1188, 1189, 1190, 1191], "discrep": [1086, 1089, 1104], "correct": [1086, 1089, 1104, 1198, 1200], "headerless": 1086, "tab": [1086, 1183], "chrom": [1086, 1200], "chr_start": 1086, "featur": [1086, 1166, 1170, 1179], "scaffold": 1086, "chr_stop": 1086, "mkr_name": 1086, "map_fncod": 1086, "gentic": [1086, 1200], "haldan": [1086, 1097, 1098, 1183, 1184, 1185, 1186, 1199], "kosambi": [1086, 1100, 1101, 1199], "unknown": 1086, "gdist1g": [1086, 1089, 1104], "asp": [1086, 1089, 1104], "jointli": [1086, 1089, 1104], "gdist1p": [1086, 1089, 1104], "beforehand": [1086, 1089, 1104], "gdist2g": [1086, 1089, 1104], "rst": [1086, 1089, 1104], "rsp": [1086, 1089, 1104], "cst": [1086, 1089, 1104], "csp": [1086, 1089, 1104], "gdist2p": [1086, 1089, 1104], "has_splin": [1086, 1089, 1104, 1200], "interp_gmap": [1086, 1089, 1104], "share": [1086, 1089, 1104, 1179, 1181, 1182, 1192, 1193, 1197, 1198, 1200, 1201], "is_congru": [1086, 1089, 1104, 1200], "demonstr": [1086, 1089, 1104, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1183, 1184, 1185, 1186, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1197, 1198, 1199, 1200, 1201, 1202], "suppos": [1086, 1089, 1104, 1181], "nt": 1086, "evenli": 1086, "sought": 1086, "those": [1086, 1166, 1186, 1190, 1200], "region": 1086, "remove_discrep": [1086, 1089, 1104, 1200], "conflict": [1086, 1089, 1104], "fncode": 1086, "to_egmap": 1086, "extendedgeneticmap": [1087, 1200], "invmapfn": [1092, 1098, 1101, 1199], "mapfn": [1092, 1098, 1101, 1199], "rprob1g": [1092, 1098, 1101, 1199], "suppli": [1092, 1098, 1101], "xo": [1092, 1098, 1101], "rprob1p": [1092, 1098, 1101, 1199], "rprob2g": [1092, 1098, 1101, 1199], "rprob2p": [1092, 1098, 1101, 1199], "1919": 1098, "haldanemapfunct": [1099, 1183, 1184, 1185, 1186, 1193, 1199], "1944": 1101, "kosambimapfunct": [1102, 1199], "standardgeneticmap": [1105, 1183, 1184, 1185, 1186], "genoypt": [1110, 1113, 1117, 1124, 1127], "convers": [1110, 1113, 1117], "vcf": [1110, 1113, 1169], "reproduct": [1110, 1168], "habit": 1110, "allopolyploid": 1110, "hexaploid": 1110, "wheat": 1110, "reproduc": [1110, 1182, 1185], "acount": [1110, 1113, 1117, 1124, 1201, 1202], "accumul": [1110, 1113, 1117, 1121, 1124, 1127], "apoli": [1110, 1113, 1117, 1124, 1201, 1202], "polymorph": [1110, 1113, 1117, 1124, 1202], "presenc": [1110, 1113, 1117, 1124, 1141], "absens": [1110, 1113, 1117, 1124], "from_vcf": [1110, 1113, 1183, 1184, 1185, 1186, 1188, 1189, 1190, 1191, 1201, 1202], "auto_group_vrnt": [1110, 1113, 1183, 1184, 1185, 1186, 1188, 1189, 1190, 1191], "gtcount": [1110, 1113, 1117, 1121, 1124, 1127, 1201, 1202], "gather": [1110, 1113, 1117, 1121, 1124, 1127, 1173], "homozyg": [1110, 1113, 1117, 1121, 1124, 1127, 1201, 1202], "gtfreq": [1110, 1113, 1117, 1121, 1124, 1127, 1201, 1202], "maf": [1110, 1113, 1117, 1124, 1201, 1202], "mat_format": [1110, 1113, 1117, 1121, 1124, 1127, 1201, 1202], "tacount": [1110, 1113, 1117, 1124, 1201, 1202], "taxon": [1110, 1113, 1117, 1121, 1124, 1127, 1177, 1178, 1179, 1180, 1181, 1193, 1197, 1198, 1201, 1202], "valueerror": 1118, "prove": 1121, "hcount": [1121, 1127], "hfreq": [1121, 1127], "mhf": [1121, 1127], "thcount": [1121, 1127], "thfreq": [1121, 1127], "haplotypematrix": [1122, 1127], "phasedhaplotypematrix": 1128, "assert": [1129, 1132, 1133, 1134, 1135, 1137, 1138, 1143, 1144, 1147, 1149, 1150, 1155, 1156], "assert_python": [1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160], "abcmeta": [1132, 1133, 1135], "attach": [1136, 1139, 1140, 1148, 1151, 1152, 1154, 1157, 1158], "notimplementederror": [1137, 1138, 1139, 1140, 1143, 1144, 1145, 1146, 1149, 1150, 1151, 1152, 1157, 1158], "met": [1137, 1138, 1149, 1150, 1155, 1156], "fn": [1142, 1143, 1144, 1145, 1146], "attr": 1147, "fget": [1155, 1156], "fset": [1155, 1156], "fdel": [1155, 1156], "forbiddenexcept": 1159, "forbidden": 1159, "expectedexcept": 1160, "full": 1161, "api": [1161, 1170], "page": 1161, "guid": [1166, 1169], "By": 1166, "easili": 1166, "comprehens": [1166, 1170], "extent": 1166, "maintain": [1166, 1183], "mani": [1166, 1186, 1190, 1192], "commonli": [1166, 1191], "plant": [1166, 1170, 1183], "anim": [1166, 1170], "commun": 1166, "develop": [1166, 1169], "robust": 1166, "them": [1166, 1170, 1181, 1183, 1184, 1185, 1186, 1188, 1189, 1195], "difficult": [1166, 1191], "understand": [1166, 1167, 1169], "aim": 1166, "remedi": 1166, "briefli": 1166, "summar": [1166, 1177, 1179, 1180, 1181, 1192, 1193, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202], "task": [1166, 1168, 1181, 1183, 1184, 1188, 1193, 1198], "exens": 1166, "substitut": [1166, 1191], "focu": 1166, "prevent": 1166, "To": [1166, 1169, 1171, 1172, 1173, 1174, 1175, 1176, 1181, 1183, 1184, 1185, 1186, 1188, 1189, 1190, 1191, 1193, 1195, 1197, 1198, 1200], "heavi": 1166, "duck": 1166, "manual": [1166, 1169, 1181, 1183, 1184, 1200], "enforc": 1166, "seek": [1166, 1183, 1188, 1189, 1190, 1191], "singular": 1166, "focus": [1166, 1193, 1197, 1198, 1201], "fundament": [1166, 1169, 1170], "entiti": 1166, "almost": 1166, "instead": [1166, 1184, 1185], "lean": 1166, "As": [1166, 1183, 1184, 1192, 1193, 1198], "mention": 1166, "section": [1166, 1169, 1183, 1184, 1185, 1192, 1193, 1197, 1198, 1201], "decoupl": 1166, "describ": [1167, 1181, 1183, 1184, 1197], "crucial": [1167, 1168], "concept": 1167, "philosophi": [1167, 1169], "adopt": [1168, 1170], "script": [1168, 1169, 1170, 1203], "strategi": [1168, 1170, 1174, 1181, 1183, 1184, 1186, 1189, 1191], "flexibl": [1168, 1170], "accomplish": [1168, 1180, 1181, 1183, 1184, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1200], "equip": 1168, "rich": 1168, "plai": 1168, "role": 1168, "conduct": [1168, 1184, 1185, 1186, 1192, 1200], "framework": [1168, 1169, 1170], "offer": [1168, 1170, 1197, 1201], "work": [1168, 1169], "tandem": 1168, "enabl": [1168, 1170], "pivot": 1168, "merit": 1168, "vital": 1168, "quantifi": [1168, 1180], "related": [1168, 1184], "indispens": 1168, "manag": 1168, "divers": [1168, 1171, 1172, 1174, 1175, 1176, 1183, 1184, 1185, 1186, 1189, 1190, 1191, 1192, 1194], "control": [1168, 1170], "interest": 1168, "support": [1168, 1169, 1199, 1200], "variou": [1168, 1170, 1183, 1184, 1185, 1186, 1192, 1197, 1200, 1201], "approach": [1168, 1170, 1190], "techniqu": [1168, 1192], "involv": [1168, 1171, 1172, 1175, 1176], "hous": 1168, "breeder": [1168, 1170, 1183], "decid": 1168, "tackl": 1168, "face": 1168, "special": [1168, 1173], "five": [1168, 1182, 1193, 1197, 1198, 1201, 1202], "potenti": 1168, "extern": 1168, "lme4": 1168, "trial": 1168, "lastli": 1168, "versatil": [1168, 1170], "encompass": 1168, "assembl": 1168, "hand": 1168, "burn": [1168, 1172], "mimick": 1168, "cycl": 1168, "download": 1169, "websit": 1169, "reli": [1169, 1180], "22": 1169, "algebra": 1169, "scipi": 1169, "matplotlib": [1169, 1185], "graphic": 1169, "cyvcf2": 1169, "30": [1169, 1191], "pytest": 1169, "datadir": 1169, "setuptool": 1169, "wheel": 1169, "pip": 1169, "tabl": [1169, 1177, 1179, 1180, 1181, 1192, 1193, 1196, 1197, 1198, 1199, 1200, 1201, 1202], "link": [1169, 1203], "refresh": 1169, "languag": 1169, "tutori": 1169, "minut": 1169, "org": 1169, "learn": [1169, 1192], "your": 1169, "own": [1169, 1177, 1178, 1180, 1200], "immedi": 1169, "want": [1169, 1181, 1183, 1184, 1185, 1186, 1188, 1189, 1190, 1191], "gain": [1169, 1184], "depth": 1169, "embark": 1169, "usag": [1169, 1170, 1180, 1181, 1193, 1198, 1199], "instruct": 1169, "though": 1169, "compil": 1169, "distro": 1169, "fedora": 1169, "sudo": 1169, "dnf": 1169, "python3": 1169, "devel": 1169, "ubuntu": 1169, "apt": 1169, "dev": 1169, "clone": 1169, "repositori": [1169, 1203], "git": 1169, "github": [1169, 1170], "com": 1169, "rzshrote": 1169, "practic": 1169, "virtual": 1169, "makefil": 1169, "venv": 1169, "env": 1169, "activ": [1169, 1171], "edit": 1169, "sh": 1169, "bash": 1169, "now": 1169, "prompt": 1169, "empow": 1170, "research": [1170, 1182], "explor": 1170, "silico": 1170, "studi": 1170, "novel": 1170, "establish": 1170, "drive": 1170, "signific": 1170, "although": 1170, "extant": 1170, "apart": 1170, "wide": 1170, "simultan": [1170, 1185, 1188, 1189, 1191], "visual": 1170, "tradeoff": 1170, "inher": [1170, 1193], "lead": [1170, 1180, 1184], "solid": 1170, "principl": 1170, "extens": [1170, 1173, 1181], "meet": 1170, "expans": [1170, 1181], "seamlessli": 1170, "aspect": 1170, "easi": 1170, "precis": 1170, "fine": 1170, "tune": 1170, "overview": 1170, "explain": 1170, "frequent": 1170, "ask": 1170, "question": 1170, "job": [1171, 1172, 1174, 1175, 1176], "evalut": 1171, "evalutationoper": 1171, "pybropo": [1171, 1172, 1173, 1174, 1175, 1176], "incredibli": [1171, 1172, 1174, 1175, 1176], "hi": [1171, 1172, 1174, 1175, 1176, 1177, 1180], "her": [1171, 1172, 1174, 1175, 1176, 1177, 1180], "overrid": [1171, 1172, 1173, 1174, 1175, 1176, 1190, 1193, 1195, 1197, 1198], "myevaluationoper": [1171, 1185], "There": [1171, 1172, 1173, 1174, 1175, 1176, 1179, 1200, 1201], "scratch": [1172, 1177, 1178, 1179, 1180, 1181, 1193, 1198, 1201, 1202], "typic": [1172, 1178, 1180, 1197], "world": [1172, 1201], "prepar": 1172, "myinitializationoper": [1172, 1185], "examin": [1173, 1181, 1184], "could": 1173, "collect": [1173, 1181], "mylogbook": [1173, 1185], "_data": [1173, 1185], "setter": [1173, 1185], "_rep": [1173, 1185], "eras": 1173, "mymatingoper": [1174, 1185], "myparentselectionoper": [1175, 1185], "discard": [1176, 1183, 1184, 1190], "undesir": [1176, 1192], "addition": [1176, 1183], "surivor": [1176, 1185], "mysurvivorselectionoper": [1176, 1185], "truebreedingvalu": 1177, "meanphenotypicbreedingvalu": [1177, 1183, 1184, 1185, 1186], "statement": [1177, 1192, 1193, 1194, 1195, 1196, 1198], "bvprot": [1177, 1183, 1184, 1185, 1186], "trait01": 1177, "trait02": 1177, "nfix": [1177, 1180, 1181, 1192, 1193], "nmisc": [1177, 1180, 1181, 1192, 1193], "naddit": [1177, 1180, 1181, 1192, 1193], "50": [1177, 1179, 1180, 1181, 1183, 1185, 1191, 1192, 1193], "dummi": [1177, 1180, 1181, 1192, 1193, 1197], "zfill": [1177, 1178, 1179, 1180, 1181, 1191, 1192, 1193, 1197, 1198, 1200, 1201, 1202], "ngroup": [1177, 1178, 1179, 1180, 1181, 1193, 1197, 1198, 1201, 1202], "nchrom": [1177, 1178, 1179, 1180, 1181, 1193, 1198, 1201, 1202], "randint": [1177, 1178, 1179, 1180, 1181, 1192, 1193, 1197, 1198, 1200, 1201, 1202], "astyp": [1177, 1178, 1179, 1180, 1181, 1190, 1192, 1193, 1198, 1200, 1201, 1202], "choic": [1177, 1178, 1179, 1180, 1181, 1183, 1184, 1185, 1186, 1193, 1198, 1200, 1201, 1202], "1000000": [1177, 1178, 1179, 1180, 1181, 1193, 1198, 1201, 1202], "snp": [1177, 1178, 1179, 1180, 1181, 1183, 1184, 1185, 1186, 1188, 1189, 1190, 1191, 1193, 1198, 1200, 1201, 1202], "ptprot": [1177, 1180, 1183, 1184, 1185, 1186], "g_e_phenotyp": [1177, 1180, 1183, 1184, 1185, 1186], "pheno_df": [1177, 1180, 1186], "bvmat1": 1177, "bvmat2": 1177, "genotypeprotocol": 1178, "denseunphasedgenotyp": [1178, 1183, 1184, 1185], "flawless": 1178, "deliber": 1178, "illustr": [1178, 1179, 1182, 1193, 1194, 1195, 1196, 1197, 1198, 1200, 1201, 1202], "creation": [1178, 1180, 1182, 1186, 1192, 1193, 1197, 1198], "gtprot": [1178, 1183, 1184, 1185], "shown": 1178, "isinst": 1178, "child": [1179, 1180, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202], "subsect": [1179, 1180, 1181, 1183, 1184, 1192, 1193, 1197, 1198], "straightforward": 1179, "mate_self": 1179, "mate_2w": 1179, "mate_2wdh": 1179, "mate_3w": 1179, "mate_3wdh": 1179, "mate_4w": 1179, "mate_4wdh": 1179, "configu": 1179, "realism": [1180, 1200], "truephenotyp": 1180, "coupl": [1180, 1183, 1184, 1185, 1186], "implment": 1180, "said": [1181, 1192], "matter": 1181, "broken": 1181, "subtyp": [1181, 1192], "estimatedbreedingvaluebinaryselect": 1181, "estimatedbreedingvalueintegerselect": 1181, "estimatedbreedingvaluerealselect": 1181, "estimatedbreedingvaluesubsetselect": [1181, 1183, 1184, 1185, 1186], "expectedmaximumbreedingvaluebinaryselect": 1181, "expectedmaximumbreedingvalueintegerselect": 1181, "expectedmaximumbreedingvaluerealselect": 1181, "expectedmaximumbreedingvaluesubsetselect": 1181, "familyestimatedbreedingvaluebinaryselect": 1181, "familyestimatedbreedingvalueintegerselect": 1181, "familyestimatedbreedingvaluerealselect": 1181, "familyestimatedbreedingvaluesubsetselect": 1181, "genomicestimatedbreedingvaluebinaryselect": 1181, "genomicestimatedbreedingvalueintegerselect": 1181, "genomicestimatedbreedingvaluerealselect": 1181, "genomicestimatedbreedingvaluesubsetselect": [1181, 1185, 1188], "genotypebuildersubsetselect": 1181, "optimalcontributionbinaryselect": 1181, "optimalcontributionintegerselect": 1181, "optimalcontributionrealselect": 1181, "optimalcontributionsubsetselect": [1181, 1184, 1191], "optimalhaploidvaluebinaryselect": 1181, "optimalhaploidvalueintegerselect": 1181, "optimalhaploidvaluerealselect": 1181, "optimalhaploidvaluesubsetselect": 1181, "optimalpopulationvaluesubsetselect": 1181, "randombinaryselect": 1181, "randomintegerselect": 1181, "randomrealselect": 1181, "randomsubsetselect": 1181, "usefulnesscriterionbinaryselect": 1181, "usefulnesscriterionintegerselect": 1181, "usefulnesscriterionrealselect": 1181, "usefulnesscriterionsubsetselect": 1181, "weightedgenomicbinaryselect": 1181, "weightedgenomicintegerselect": 1181, "weightedgenomicrealselect": 1181, "weightedgenomicsubsetselect": [1181, 1189], "categori": [1181, 1192, 1193, 1200], "later": [1181, 1183, 1184, 1185, 1186, 1192, 1201, 1202], "selprot": [1181, 1186, 1188, 1189, 1191], "40": [1181, 1183, 1184, 1185, 1186, 1188, 1189, 1191], "here": [1181, 1185, 1188, 1189, 1191, 1201], "selprot_unconstrain": 1181, "ten": 1181, "wish": 1181, "while": [1181, 1183, 1184, 1190, 1192, 1195, 1200], "maskvec": 1181, "minvec": [1181, 1184], "don": [1181, 1183, 1184], "care": 1181, "selprot_constrain": 1181, "prob_unconstrain": 1181, "prob_constrain": 1181, "eval_unconstrain": 1181, "eval_constrain": 1181, "soln_constrain": 1181, "soltuion": 1181, "soln_unconstrain": 1181, "appropri": 1181, "invari": 1181, "selcfg_constrain": 1181, "view": 1181, "project": [1181, 1191], "selcfg_unconstrain": 1181, "bulk": 1182, "synchron": 1182, "underneath": 1182, "despit": 1182, "mechan": [1182, 1192], "48823": 1182, "spawn": 1182, "prng_list": 1182, "often": [1183, 1200], "maiz": [1183, 1184, 1185, 1186, 1200], "ear": 1183, "height": 1183, "stalk": 1183, "lodg": 1183, "lose": 1183, "preserv": [1183, 1189, 1191], "against": 1183, "namespac": [1183, 1184, 1185, 1186, 1188, 1189, 1190, 1191], "pyplot": [1183, 1184, 1185, 1186, 1188, 1189, 1190, 1191], "sortingsubsetoptimizationalgorithm": [1183, 1184, 1186], "steepestdescentsubsethillclimb": [1183, 1184, 1194], "82651560": 1183, "nfndr": [1183, 1184, 1185, 1186], "nqtl": [1183, 1184, 1185], "qtl": [1183, 1184, 1185], "qlen": [1183, 1184, 1185], "queue": [1183, 1184, 1185], "80": [1183, 1184, 1185, 1186], "Then": [1183, 1184, 1185], "nam": [1183, 1184, 1185, 1186, 1200], "mcmullen": [1183, 1184, 1185, 1186, 1200], "2009": [1183, 1184, 1185, 1186, 1200], "mcmullen_2009_us_nam": [1183, 1184, 1185, 1186, 1200], "wisconsin": [1183, 1184, 1185, 1186], "panel": [1183, 1184, 1185, 1186, 1187], "942": [1183, 1184, 1185, 1186, 1188, 1189, 1191], "2000": [1183, 1184, 1185, 1186, 1190], "synthet": [1183, 1184, 1185, 1186, 1188, 1189, 1191], "widiv_2000snp": [1183, 1184, 1186, 1188, 1189, 1190, 1191, 1201, 1202], "gz": [1183, 1184, 1185, 1186, 1188, 1189, 1190, 1191, 1201, 1202], "ll": [1183, 1184, 1185, 1186, 1188, 1189, 1190, 1191], "earht": 1183, "pleiotropi": [1183, 1185], "draw": [1183, 1188, 1189, 1191], "correl": 1183, "word": 1183, "higher": 1183, "indefinit": [1183, 1191], "impos": 1183, "00010": 1183, "sd": [1183, 1184], "01": [1183, 1184], "cov": [1183, 1185, 1188, 1189, 1191], "00004": 1183, "nvnrt": 1183, "mkreffect": [1183, 1184, 1185, 1186, 1188, 1189, 1191], "multivariate_norm": [1183, 1185, 1188, 1189, 1191], "mock": 1183, "much": [1183, 1192], "bitrait_model": 1183, "year": [1183, 1184, 1185], "oldest": [1183, 1184, 1185], "aggreg": [1183, 1184, 1185], "youngest": [1183, 1184, 1185], "pipelin": [1183, 1184, 1185], "top": [1183, 1184, 1185, 1186, 1192], "cand": [1183, 1184, 1185, 1195], "segment": [1183, 1184, 1185, 1193, 1197, 1198, 1199, 1201], "continu": [1183, 1184], "readi": [1183, 1184, 1185], "1600": [1183, 1184], "mate2wai": [1183, 1184, 1185, 1186], "reshap": [1183, 1184, 1185, 1186], "held": [1183, 1184, 1185, 1186], "gen": [1183, 1184, 1185, 1186], "stage": [1183, 1184, 1185], "mate2waydh": [1183, 1184, 1185, 1186], "plot": [1183, 1184, 1186, 1188, 1189, 1190, 1191], "nindiv": [1183, 1184, 1185, 1190], "within_family_select": [1183, 1184, 1185], "tmp_order": [1183, 1184, 1185], "tmp_valu": [1183, 1184, 1185], "value_argsort": [1183, 1184, 1185], "argsort": [1183, 1184, 1185], "track": [1183, 1184], "fndr_genom": [1183, 1184, 1185], "fndr_geno": [1183, 1184, 1185], "fndr_pheno": [1183, 1184, 1185], "fndr_bval": [1183, 1184, 1185], "fndr_gmod": [1183, 1184, 1185], "indici": [1183, 1184, 1185], "xconfix": [1183, 1184, 1185], "receiv": [1183, 1184, 1190], "incom": [1183, 1184, 1185], "bv1": [1183, 1184], "bv2": 1183, "nth": [1183, 1184], "sole": [1183, 1184], "burnin_selprot": [1183, 1184], "selcfg": [1183, 1184, 1186], "new_genom": [1183, 1184], "new_geno": [1183, 1184], "subject": [1183, 1184, 1191], "const_selprot": [1183, 1184], "unconst_selprot": [1183, 1184], "assist": [1183, 1184], "main_meh": [1183, 1184, 1185], "tmp": [1183, 1184, 1185, 1192, 1193, 1197, 1198, 1200, 1201, 1202], "main_yield_lsl": 1183, "main_earht_lsl": 1183, "main_yield_usl": 1183, "main_earht_usl": 1183, "main_yield_tbv_min": 1183, "main_earht_tbv_min": 1183, "main_yield_tbv_mean": 1183, "main_earht_tbv_mean": 1183, "main_yield_tbv_max": 1183, "main_earht_tbv_max": 1183, "main_yield_tbv_std": 1183, "main_earht_tbv_std": 1183, "main_yield_tbv_var_a": 1183, "main_earht_tbv_var_a": 1183, "main_yield_ebv_min": 1183, "main_earht_ebv_min": 1183, "main_yield_ebv_mean": 1183, "main_earht_ebv_mean": 1183, "main_yield_ebv_max": 1183, "main_earht_ebv_max": 1183, "main_yield_ebv_std": 1183, "main_earht_ebv_std": 1183, "simul_genom": [1183, 1184], "simul_geno": [1183, 1184], "simul_pheno": [1183, 1184], "simul_bv": [1183, 1184], "simul_gmod": [1183, 1184], "const_lbook": [1183, 1184], "const_lbook_df": [1183, 1184], "unconst_lbook": [1183, 1184], "unconst_lbook_df": [1183, 1184], "depict": [1183, 1184], "diver": [1183, 1184], "figur": [1183, 1184, 1185, 1186, 1188, 1189, 1190, 1191], "fig": [1183, 1184, 1186, 1188, 1189, 1190, 1191], "const": [1183, 1184], "unconst": [1183, 1184], "set_titl": [1183, 1184, 1186, 1188, 1189, 1190, 1191], "set_xlabel": [1183, 1184, 1186, 1188, 1189, 1190, 1191], "set_ylabel": [1183, 1184, 1186, 1188, 1189, 1190, 1191], "legend": [1183, 1184, 1185, 1186], "savefig": [1183, 1184, 1185, 1186, 1188, 1189, 1190, 1191], "constr_vs_unconst_bitrait_phenotypic_selection_yield_tbv": 1183, "png": [1183, 1184, 1185, 1186, 1188, 1189, 1190, 1191], "dpi": [1183, 1184, 1186, 1188, 1189, 1190, 1191], "300": [1183, 1184, 1186], "close": [1183, 1184, 1185, 1186, 1188, 1189, 1190, 1191], "alongsid": 1183, "constr_vs_unconst_bitrait_phenotypic_selection_earht_tbv": 1183, "trajectori": 1183, "constr_vs_unconst_bitrait_phenotypic_selection_bitrait_tbv": 1183, "constr_vs_unconst_bitrait_phenotypic_selection_yield_ebv": 1183, "constr_vs_unconst_bitrait_phenotypic_selection_earht_ebv": 1183, "constr_vs_unconst_bitrait_phenotypic_selection_bitrait_ebv": 1183, "constr_vs_unconst_bitrait_phenotypic_selection_mean_expected_heterozygos": 1183, "constr_vs_unconst_bitrait_phenotypic_selection_bitrait_tbv_standard_devi": 1183, "constr_vs_unconst_bitrait_phenotypic_selection_bitrait_ebv_standard_devi": 1183, "constr_vs_unconst_bitrait_phenotypic_selection_bitrait_genetic_vari": 1183, "constr_vs_unconst_bitrait_phenotypic_selection_bitrait_genic_vari": 1183, "unfortun": [1184, 1200], "greedi": 1184, "quickli": [1184, 1186], "deplet": 1184, "poorer": 1184, "long": 1184, "combat": 1184, "52347529": 1184, "loc": [1184, 1186], "syn1": [1184, 1185, 1186, 1188, 1189, 1191], "synthetic_model": [1184, 1186, 1188, 1189, 1191], "With": 1184, "bvn": 1184, "main_syn1_lsl": 1184, "main_syn1_usl": 1184, "main_syn1_tbv_min": 1184, "main_syn1_tbv_mean": 1184, "main_syn1_tbv_max": 1184, "main_syn1_tbv_std": 1184, "main_syn1_tbv_var_a": 1184, "main_syn1_ebv_min": 1184, "main_syn1_ebv_mean": 1184, "main_syn1_ebv_max": 1184, "main_syn1_ebv_std": 1184, "84": 1184, "gradual": 1184, "homozygos": 1184, "linspac": 1184, "furthermor": 1184, "constrained_single_trait_phenotypic_selection_true_breeding_valu": 1184, "constrained_single_trait_phenotypic_selection_estimated_breeding_valu": 1184, "valuabl": [1184, 1192], "constrained_single_trait_phenotypic_selection_mean_expected_heterozygos": 1184, "constrained_single_trait_phenotypic_selection_true_breeding_value_standard_devi": 1184, "thing": [1184, 1186], "constrained_single_trait_phenotypic_selection_estimated_breeding_value_standard_devi": 1184, "advantag": 1185, "lie": 1185, "concav": 1185, "portion": 1185, "trans_ndpt_to_vec_dist": 1185, "17320132226": 1185, "nburnin": 1185, "fndr_herit": 1185, "nindiv_fam": 1185, "nmating_fam": 1185, "nprogeny_fam": 1185, "auto": 1185, "widiv_2000snps_q0": 1185, "2_q0": 1185, "nfounder": 1185, "25": [1185, 1188, 1189, 1191], "pleiotrop": 1185, "compet": [1185, 1188, 1189, 1191], "syn2": [1185, 1188, 1189, 1191], "algmod_tru": 1185, "proce": 1185, "satisfi": 1185, "recent": 1185, "rescal": 1185, "myinitparentselectionoper": 1185, "pselprot": 1185, "myinitmatingoper": 1185, "pcnt": 1185, "fcnt": 1185, "super": [1185, 1190], "mprot": 1185, "myinitevaluationoper": 1185, "myinitsurvivorselectionoper": 1185, "increment": 1185, "gevb": 1185, "analysi": [1185, 1186], "data_fronti": 1185, "_data_fronti": 1185, "cand_bval_tru": 1185, "main_bval_tru": 1185, "cand_meh": 1185, "cand_mean_syn1": 1185, "cand_mean_syn2": 1185, "cand_true_mean_syn1": 1185, "cand_true_mean_syn2": 1185, "cand_std_syn1": 1185, "cand_std_syn2": 1185, "cand_true_std_syn1": 1185, "cand_true_std_syn2": 1185, "cand_true_var_a_syn1": 1185, "cand_true_var_a_syn2": 1185, "ratio": 1185, "cand_true_bulmer_syn1": 1185, "cand_true_bulmer_syn2": 1185, "cand_true_usl_syn1": 1185, "cand_true_usl_syn2": 1185, "cand_true_lsl_syn1": 1185, "cand_true_lsl_syn2": 1185, "main_mean_syn1": 1185, "main_mean_syn2": 1185, "main_true_mean_syn1": 1185, "main_true_mean_syn2": 1185, "main_std_syn1": 1185, "main_std_syn2": 1185, "main_true_std_syn1": 1185, "main_true_std_syn2": 1185, "main_true_var_a_syn1": 1185, "main_true_var_a_syn2": 1185, "main_true_bulmer_syn1": 1185, "main_true_bulmer_syn2": 1185, "main_true_usl_syn1": 1185, "main_true_usl_syn2": 1185, "main_true_lsl_syn1": 1185, "main_true_lsl_syn2": 1185, "mosoln": [1185, 1194, 1196], "els": [1185, 1190], "out_df": [1185, 1193], "write_fronti": 1185, "to_pandas_fronti": 1185, "tmp_df_l": 1185, "tmp_df": 1185, "init_pselop": 1185, "init_mateop": 1185, "init_evalop": 1185, "init_sselop": 1185, "rsprog": 1185, "program_df": 1185, "program_frontier_df": 1185, "multiobjective_genomic_selection_program": 1185, "multiobjective_genomic_selection_program_fronti": 1185, "font": [1185, 1191], "seaborn": 1185, "someth": 1185, "isn": 1185, "ugli": 1185, "rcparam": [1185, 1191], "liber": [1185, 1191], "serif": [1185, 1191], "read_csv": 1185, "reflect": [1185, 1201], "figsiz": [1185, 1191], "scatterplot": 1185, "hue": 1185, "titl": 1185, "xlabel": 1185, "h\u00b2": 1185, "ylabel": 1185, "lineplot": 1185, "suptitl": 1185, "multiobjective_genomic_selection_mean_expected_heterozygos": 1185, "color": [1185, 1191], "black": 1185, "multiobjective_genomic_selection_breeding_valu": 1185, "aid": 1186, "comparison": 1186, "overlap": 1186, "648201539": 1186, "panel_pgmat": 1186, "realist": 1186, "akin": 1186, "pollin": 1186, "varieti": 1186, "fndr_nmate": 1186, "fndr_nprogeni": 1186, "fndr_nrandmat": 1186, "simplic": 1186, "tbv_min_syn1": 1186, "tbv_mean_syn1": 1186, "tbv_max_syn1": 1186, "tbv_std_syn1": 1186, "ebv_min_syn1": 1186, "ebv_mean_syn1": 1186, "ebv_max_syn1": 1186, "ebv_std_syn1": 1186, "jump": 1186, "std": 1186, "did": 1186, "lbook_df": 1186, "single_trait_phenotypic_selection_true_breeding_valu": 1186, "imag": [1186, 1188, 1189, 1190], "single_trait_phenotypic_selection_estimated_breeding_valu": 1186, "bi": 1187, "tri": 1187, "reduct": 1187, "nsga2subsetgeneticalgorithm": [1188, 1189, 1191, 1194], "31621463": [1188, 1191], "variat": [1188, 1189, 1191, 1192], "pleiotroph": [1188, 1189, 1191], "abl": [1188, 1189, 1191], "slight": [1188, 1189, 1191], "constuct": [1188, 1189, 1191], "selsoln": [1188, 1189, 1191], "alwai": [1188, 1189, 1199], "xdata": [1188, 1189], "ydata": [1188, 1189], "scatter": [1188, 1189, 1190, 1191], "biobjective_gebv_pareto_fronti": 1188, "23947952": 1189, "biobjective_wgebv_pareto_fronti": 1189, "mainten": 1190, "classifi": 1190, "trade": 1190, "off": 1190, "nsga2binarygeneticalgorithm": [1190, 1194], "194711822": 1190, "gmat_reduc": 1190, "propos": 1190, "germplasmpanelreduction1": 1190, "stack": [1190, 1195, 1196], "denom": 1190, "contrib": 1190, "norm2": 1190, "keepdim": [1190, 1195], "linalg": 1190, "ord": 1190, "moea": 1190, "germplasm_panel_reduction1": 1190, "onc": 1190, "again": 1190, "germplasmpanelreduction2": 1190, "nmarker": 1190, "xsum": 1190, "bitwise_or": 1190, "germplasm_panel_reduction2": 1190, "optimi": 1191, "pil": 1191, "nsga3subsetgeneticalgorithm": 1191, "ibscmatfcti": 1191, "1500": 1191, "91": 1191, "basenam": 1191, "triobjective_ocs_pareto_fronti": 1191, "z2": 1191, "3d": 1191, "blue": 1191, "zip": [1191, 1195], "cornflowerblu": 1191, "set_zlabel": 1191, "view_init": 1191, "elev": 1191, "azim": 1191, "32": 1191, "vantag": 1191, "outdir": 1191, "isdir": 1191, "mkdir": 1191, "360": 1191, "scatter3d": 1191, "resiz": 1191, "images_res": 1191, "img": 1191, "px": 1191, "gif": 1191, "save_al": 1191, "append_imag": 1191, "durat": 1191, "55": 1191, "speed": 1191, "central": 1192, "suggest": 1192, "former": [1192, 1200], "latter": [1192, 1200], "machin": 1192, "epistasi": 1192, "addititivelineargenomicmodel": 1192, "additivedomin": 1192, "additivedominanceepistat": 1192, "categor": 1192, "extra": 1192, "hyperparamet": 1192, "intension": 1192, "becaus": 1192, "mix": 1192, "subdivid": 1192, "subdivis": 1192, "aforement": 1192, "denomin": 1192, "freedom": 1192, "impract": 1192, "df_dict": 1192, "mod": 1192, "reload": 1192, "h5": [1192, 1193, 1197, 1198, 1201, 1202], "equilibrium": [1192, 1193], "achiev": [1192, 1195], "saved_algmod": 1192, "agnost": 1193, "determinist": 1193, "respectfulli": 1193, "densethreewaydhadditivegenicvariancematrix": 1193, "densefourwaydhadditivegenicvariancematrix": 1193, "densedihybriddhadditivegenicvariancematrix": 1193, "quick": [1193, 1197, 1198], "regard": [1193, 1195, 1198], "gvmat": 1193, "tmp_vmat": 1193, "tmp_gvmat": 1193, "saved_df": 1193, "saved_vmat": 1193, "saved_gvmat": 1193, "down": [1193, 1197, 1198, 1200], "deepest": [1193, 1197, 1198, 1200, 1201], "newvmat": 1193, "newgvmat": 1193, "seen": [1193, 1197, 1198, 1199, 1201], "alphanumer": [1193, 1197, 1198, 1201], "key1": [1193, 1197, 1198, 1200, 1201, 1202], "key2": [1193, 1197, 1198, 1200, 1201, 1202], "deal": 1193, "binarygeneticalgorithm": 1194, "integergeneticalgorithm": 1194, "realgeneticalgorithm": 1194, "subsetgeneticalgorithm": 1194, "nsga2integergeneticalgorithm": 1194, "nsga2realgeneticalgorithm": 1194, "climb": 1194, "intuit": 1194, "sosoln": [1194, 1196], "soprob": [1194, 1195], "moprob": [1194, 1195], "express": 1195, "webpag": [1195, 1203], "overlai": 1195, "overriden": 1195, "perhap": [1195, 1201], "sphere": 1195, "n_": 1195, "x_": 1195, "dummysingleobjectiverealproblem": 1195, "unchang": 1195, "dual": 1195, "dummymultiobjectiverealproblem": 1195, "ineqcv1": 1195, "eqcv1": 1195, "ineqcv2": 1195, "eqcv2": 1195, "unpack": 1195, "impli": 1197, "sometim": [1197, 1200], "101": 1197, "trait3": 1197, "sample_breeding_valu": 1197, "largest": 1197, "smallest": 1197, "saved_breeding_valu": 1197, "maodul": 1198, "2008": 1198, "fiel": 1198, "saved_coancestry_matrix": 1198, "sample_coancestry_matrix": 1198, "guarante": 1198, "vari": 1198, "particular": 1198, "popular": 1199, "box": 1199, "r_haldan": 1199, "r_kosambi": 1199, "invert": 1199, "d_haldan": 1199, "d_kosambi": 1199, "inter": 1199, "wise": 1200, "scope": [1200, 1201], "123456789": 1200, "28": 1200, "who": 1200, "empir": 1200, "constitut": 1200, "At": 1200, "occasion": 1200, "disagr": 1200, "congruent": 1200, "agreement": 1200, "Be": 1200, "mind": 1200, "inspect": 1200, "superior": 1200, "everyth": 1200, "chrgrp": 1200, "phypo": 1200, "18203210": 1200, "19293034": 1200, "20110347": 1200, "20474722": 1200, "21398386": 1200, "ploid": 1201, "primarili": 1201, "itself": 1201, "belong": [1201, 1202], "presens": 1201, "recess": 1201, "saved_genotyp": [1201, 1202], "member": 1202, "problemat": 1202, "regular": 1202}, "objects": {"": [[0, 0, 0, "-", "pybrops"]], "pybrops": [[1, 0, 0, "-", "breed"], [439, 0, 0, "-", "core"], [749, 0, 0, "-", "model"], [915, 0, 0, "-", "opt"], [1029, 0, 0, "-", "popgen"], [1129, 0, 0, "-", "test"]], "pybrops.breed": [[2, 0, 0, "-", "arch"], [27, 0, 0, "-", "op"], [52, 0, 0, "-", "prot"]], "pybrops.breed.arch": [[3, 0, 0, "-", "BreedingEdge"], [6, 0, 0, "-", "BreedingGraph"], [9, 0, 0, "-", "BreedingNode"], [12, 0, 0, "-", "BreedingProgram"], [15, 0, 0, "-", "EmigrationOperator"], [18, 0, 0, "-", "GermplasmBank"], [21, 0, 0, "-", "ImmigrationOperator"], [24, 0, 0, "-", "RecurrentSelectionBreedingProgram"]], "pybrops.breed.arch.BreedingEdge": [[4, 1, 1, "", "BreedingEdge"], [5, 2, 1, "", "check_is_BreedingEdge"]], "pybrops.breed.arch.BreedingGraph": [[7, 1, 1, "", "BreedingGraph"], [8, 2, 1, "", "check_is_BreedingGraph"]], "pybrops.breed.arch.BreedingGraph.BreedingGraph": [[7, 3, 1, "", "graph"]], "pybrops.breed.arch.BreedingNode": [[10, 1, 1, "", "BreedingNode"], [11, 2, 1, "", "check_is_BreedingNode"]], "pybrops.breed.arch.BreedingNode.BreedingNode": [[10, 3, 1, "", "bval"], [10, 3, 1, "", "geno"], [10, 3, 1, "", "genome"], [10, 3, 1, "", "gmod"], [10, 3, 1, "", "pheno"], [10, 3, 1, "", "t_cur"], [10, 3, 1, "", "t_max"]], "pybrops.breed.arch.BreedingProgram": [[13, 1, 1, "", "BreedingProgram"], [14, 2, 1, "", "check_is_BreedingProgram"]], "pybrops.breed.arch.BreedingProgram.BreedingProgram": [[13, 4, 1, "", "advance"], [13, 3, 1, "", "bval"], [13, 3, 1, "", "evalop"], [13, 4, 1, "", "evolve"], [13, 3, 1, "", "geno"], [13, 3, 1, "", "genome"], [13, 3, 1, "", "gmod"], [13, 4, 1, "", "initialize"], [13, 3, 1, "", "initop"], [13, 4, 1, "", "is_initialized"], [13, 3, 1, "", "mateop"], [13, 3, 1, "", "pheno"], [13, 3, 1, "", "pselop"], [13, 4, 1, "", "reset"], [13, 3, 1, "", "sselop"], [13, 3, 1, "", "start_bval"], [13, 3, 1, "", "start_geno"], [13, 3, 1, "", "start_genome"], [13, 3, 1, "", "start_gmod"], [13, 3, 1, "", "start_pheno"], [13, 3, 1, "", "t_cur"], [13, 3, 1, "", "t_max"]], "pybrops.breed.arch.EmigrationOperator": [[16, 1, 1, "", "EmigrationOperator"], [17, 2, 1, "", "check_is_EmigrationOperator"]], "pybrops.breed.arch.EmigrationOperator.EmigrationOperator": [[16, 4, 1, "", "emigrate"]], "pybrops.breed.arch.GermplasmBank": [[19, 1, 1, "", "GermplasmBank"], [20, 2, 1, "", "check_is_GermplasmBank"]], "pybrops.breed.arch.GermplasmBank.GermplasmBank": [[19, 3, 1, "", "bval"], [19, 3, 1, "", "geno"], [19, 3, 1, "", "genome"], [19, 3, 1, "", "gmod"], [19, 3, 1, "", "pheno"], [19, 3, 1, "", "t_cur"], [19, 3, 1, "", "t_max"]], "pybrops.breed.arch.ImmigrationOperator": [[22, 1, 1, "", "ImmigrationOperator"], [23, 2, 1, "", "check_is_ImmigrationOperator"]], "pybrops.breed.arch.ImmigrationOperator.ImmigrationOperator": [[22, 4, 1, "", "immigrate"]], "pybrops.breed.arch.RecurrentSelectionBreedingProgram": [[25, 1, 1, "", "RecurrentSelectionBreedingProgram"], [26, 2, 1, "", "check_is_RecurrentSelectionBreedingProgram"]], "pybrops.breed.arch.RecurrentSelectionBreedingProgram.RecurrentSelectionBreedingProgram": [[25, 4, 1, "", "advance"], [25, 3, 1, "", "bval"], [25, 3, 1, "", "evalop"], [25, 4, 1, "", "evolve"], [25, 3, 1, "", "geno"], [25, 3, 1, "", "genome"], [25, 3, 1, "", "gmod"], [25, 4, 1, "", "initialize"], [25, 3, 1, "", "initop"], [25, 4, 1, "", "is_initialized"], [25, 3, 1, "", "mateop"], [25, 3, 1, "", "pheno"], [25, 3, 1, "", "pselop"], [25, 4, 1, "", "reset"], [25, 3, 1, "", "sselop"], [25, 3, 1, "", "start_bval"], [25, 3, 1, "", "start_geno"], [25, 3, 1, "", "start_genome"], [25, 3, 1, "", "start_gmod"], [25, 3, 1, "", "start_pheno"], [25, 3, 1, "", "t_cur"], [25, 3, 1, "", "t_max"]], "pybrops.breed.op": [[28, 0, 0, "-", "eval"], [32, 0, 0, "-", "init"], [36, 0, 0, "-", "log"], [40, 0, 0, "-", "mate"], [44, 0, 0, "-", "psel"], [48, 0, 0, "-", "ssel"]], "pybrops.breed.op.eval": [[29, 0, 0, "-", "EvaluationOperator"]], "pybrops.breed.op.eval.EvaluationOperator": [[30, 1, 1, "", "EvaluationOperator"], [31, 2, 1, "", "check_is_EvaluationOperator"]], "pybrops.breed.op.eval.EvaluationOperator.EvaluationOperator": [[30, 4, 1, "", "evaluate"]], "pybrops.breed.op.init": [[33, 0, 0, "-", "InitializationOperator"]], "pybrops.breed.op.init.InitializationOperator": [[34, 1, 1, "", "InitializationOperator"], [35, 2, 1, "", "check_is_InitializationOperator"]], "pybrops.breed.op.init.InitializationOperator.InitializationOperator": [[34, 4, 1, "", "initialize"]], "pybrops.breed.op.log": [[37, 0, 0, "-", "Logbook"]], "pybrops.breed.op.log.Logbook": [[38, 1, 1, "", "Logbook"], [39, 2, 1, "", "check_is_Logbook"]], "pybrops.breed.op.log.Logbook.Logbook": [[38, 3, 1, "", "data"], [38, 4, 1, "", "log_evaluate"], [38, 4, 1, "", "log_initialize"], [38, 4, 1, "", "log_mate"], [38, 4, 1, "", "log_pselect"], [38, 4, 1, "", "log_sselect"], [38, 3, 1, "", "rep"], [38, 4, 1, "", "reset"], [38, 4, 1, "", "write"]], "pybrops.breed.op.mate": [[41, 0, 0, "-", "MatingOperator"]], "pybrops.breed.op.mate.MatingOperator": [[42, 1, 1, "", "MatingOperator"], [43, 2, 1, "", "check_is_MatingOperator"]], "pybrops.breed.op.mate.MatingOperator.MatingOperator": [[42, 4, 1, "", "mate"]], "pybrops.breed.op.psel": [[45, 0, 0, "-", "ParentSelectionOperator"]], "pybrops.breed.op.psel.ParentSelectionOperator": [[46, 1, 1, "", "ParentSelectionOperator"], [47, 2, 1, "", "check_is_ParentSelectionOperator"]], "pybrops.breed.op.psel.ParentSelectionOperator.ParentSelectionOperator": [[46, 4, 1, "", "pselect"]], "pybrops.breed.op.ssel": [[49, 0, 0, "-", "SurvivorSelectionOperator"]], "pybrops.breed.op.ssel.SurvivorSelectionOperator": [[50, 1, 1, "", "SurvivorSelectionOperator"], [51, 2, 1, "", "check_is_SurvivorSelectionOperator"]], "pybrops.breed.op.ssel.SurvivorSelectionOperator.SurvivorSelectionOperator": [[50, 4, 1, "", "sselect"]], "pybrops.breed.prot": [[53, 0, 0, "-", "bv"], [61, 0, 0, "-", "gt"], [67, 0, 0, "-", "mate"], [96, 0, 0, "-", "pt"], [104, 0, 0, "-", "sel"]], "pybrops.breed.prot.bv": [[54, 0, 0, "-", "BreedingValueProtocol"], [57, 0, 0, "-", "MeanPhenotypicBreedingValue"], [59, 0, 0, "-", "TrueBreedingValue"]], "pybrops.breed.prot.bv.BreedingValueProtocol": [[55, 1, 1, "", "BreedingValueProtocol"], [56, 2, 1, "", "check_is_BreedingValueProtocol"]], "pybrops.breed.prot.bv.BreedingValueProtocol.BreedingValueProtocol": [[55, 4, 1, "", "estimate"]], "pybrops.breed.prot.bv.MeanPhenotypicBreedingValue": [[58, 1, 1, "", "MeanPhenotypicBreedingValue"]], "pybrops.breed.prot.bv.MeanPhenotypicBreedingValue.MeanPhenotypicBreedingValue": [[58, 4, 1, "", "estimate"], [58, 3, 1, "", "taxa_col"], [58, 3, 1, "", "taxa_grp_col"], [58, 3, 1, "", "trait_cols"]], "pybrops.breed.prot.bv.TrueBreedingValue": [[60, 1, 1, "", "TrueBreedingValue"]], "pybrops.breed.prot.bv.TrueBreedingValue.TrueBreedingValue": [[60, 4, 1, "", "estimate"], [60, 3, 1, "", "gpmod"]], "pybrops.breed.prot.gt": [[62, 0, 0, "-", "DenseUnphasedGenotyping"], [64, 0, 0, "-", "GenotypingProtocol"]], "pybrops.breed.prot.gt.DenseUnphasedGenotyping": [[63, 1, 1, "", "DenseUnphasedGenotyping"]], "pybrops.breed.prot.gt.DenseUnphasedGenotyping.DenseUnphasedGenotyping": [[63, 4, 1, "", "genotype"]], "pybrops.breed.prot.gt.GenotypingProtocol": [[65, 1, 1, "", "GenotypingProtocol"], [66, 2, 1, "", "check_is_GenotypingProtocol"]], "pybrops.breed.prot.gt.GenotypingProtocol.GenotypingProtocol": [[65, 4, 1, "", "genotype"]], "pybrops.breed.prot.mate": [[68, 0, 0, "-", "FourWayCross"], [71, 0, 0, "-", "FourWayDHCross"], [74, 0, 0, "-", "MatingProtocol"], [77, 0, 0, "-", "SelfCross"], [80, 0, 0, "-", "ThreeWayCross"], [83, 0, 0, "-", "ThreeWayDHCross"], [86, 0, 0, "-", "TwoWayCross"], [89, 0, 0, "-", "TwoWayDHCross"], [92, 0, 0, "-", "util"]], "pybrops.breed.prot.mate.FourWayCross": [[69, 1, 1, "", "FourWayCross"], [70, 2, 1, "", "check_is_FourWayCross"]], "pybrops.breed.prot.mate.FourWayCross.FourWayCross": [[69, 3, 1, "", "family_counter"], [69, 4, 1, "", "mate"], [69, 3, 1, "", "nparent"], [69, 3, 1, "", "progeny_counter"], [69, 3, 1, "", "rng"]], "pybrops.breed.prot.mate.FourWayDHCross": [[72, 1, 1, "", "FourWayDHCross"], [73, 2, 1, "", "check_is_FourWayDHCross"]], "pybrops.breed.prot.mate.FourWayDHCross.FourWayDHCross": [[72, 3, 1, "", "family_counter"], [72, 4, 1, "", "mate"], [72, 3, 1, "", "nparent"], [72, 3, 1, "", "progeny_counter"], [72, 3, 1, "", "rng"]], "pybrops.breed.prot.mate.MatingProtocol": [[75, 1, 1, "", "MatingProtocol"], [76, 2, 1, "", "check_is_MatingProtocol"]], "pybrops.breed.prot.mate.MatingProtocol.MatingProtocol": [[75, 4, 1, "", "mate"], [75, 3, 1, "", "nparent"]], "pybrops.breed.prot.mate.SelfCross": [[78, 1, 1, "", "SelfCross"], [79, 2, 1, "", "check_is_SelfCross"]], "pybrops.breed.prot.mate.SelfCross.SelfCross": [[78, 3, 1, "", "family_counter"], [78, 4, 1, "", "mate"], [78, 3, 1, "", "nparent"], [78, 3, 1, "", "progeny_counter"], [78, 3, 1, "", "rng"]], "pybrops.breed.prot.mate.ThreeWayCross": [[81, 1, 1, "", "ThreeWayCross"], [82, 2, 1, "", "check_is_ThreeWayCross"]], "pybrops.breed.prot.mate.ThreeWayCross.ThreeWayCross": [[81, 3, 1, "", "family_counter"], [81, 4, 1, "", "mate"], [81, 3, 1, "", "nparent"], [81, 3, 1, "", "progeny_counter"], [81, 3, 1, "", "rng"]], "pybrops.breed.prot.mate.ThreeWayDHCross": [[84, 1, 1, "", "ThreeWayDHCross"], [85, 2, 1, "", "check_is_ThreeWayDHCross"]], "pybrops.breed.prot.mate.ThreeWayDHCross.ThreeWayDHCross": [[84, 3, 1, "", "family_counter"], [84, 4, 1, "", "mate"], [84, 3, 1, "", "nparent"], [84, 3, 1, "", "progeny_counter"], [84, 3, 1, "", "rng"]], "pybrops.breed.prot.mate.TwoWayCross": [[87, 1, 1, "", "TwoWayCross"], [88, 2, 1, "", "check_is_TwoWayCross"]], "pybrops.breed.prot.mate.TwoWayCross.TwoWayCross": [[87, 3, 1, "", "family_counter"], [87, 4, 1, "", "mate"], [87, 3, 1, "", "nparent"], [87, 3, 1, "", "progeny_counter"], [87, 3, 1, "", "rng"]], "pybrops.breed.prot.mate.TwoWayDHCross": [[90, 1, 1, "", "TwoWayDHCross"], [91, 2, 1, "", "check_is_TwoWayDHCross"]], "pybrops.breed.prot.mate.TwoWayDHCross.TwoWayDHCross": [[90, 3, 1, "", "family_counter"], [90, 4, 1, "", "mate"], [90, 3, 1, "", "nparent"], [90, 3, 1, "", "progeny_counter"], [90, 3, 1, "", "rng"]], "pybrops.breed.prot.mate.util": [[93, 2, 1, "", "mat_dh"], [94, 2, 1, "", "mat_mate"], [95, 2, 1, "", "mat_meiosis"]], "pybrops.breed.prot.pt": [[97, 0, 0, "-", "G_E_Phenotyping"], [99, 0, 0, "-", "PhenotypingProtocol"], [102, 0, 0, "-", "TruePhenotyping"]], "pybrops.breed.prot.pt.G_E_Phenotyping": [[98, 1, 1, "", "G_E_Phenotyping"]], "pybrops.breed.prot.pt.G_E_Phenotyping.G_E_Phenotyping": [[98, 3, 1, "", "gpmod"], [98, 3, 1, "", "nenv"], [98, 3, 1, "", "nrep"], [98, 4, 1, "", "phenotype"], [98, 3, 1, "", "rng"], [98, 4, 1, "", "set_H2"], [98, 4, 1, "", "set_h2"], [98, 3, 1, "", "var_env"], [98, 3, 1, "", "var_err"], [98, 3, 1, "", "var_rep"]], "pybrops.breed.prot.pt.PhenotypingProtocol": [[100, 1, 1, "", "PhenotypingProtocol"], [101, 2, 1, "", "check_is_PhenotypingProtocol"]], "pybrops.breed.prot.pt.PhenotypingProtocol.PhenotypingProtocol": [[100, 3, 1, "", "gpmod"], [100, 4, 1, "", "phenotype"], [100, 4, 1, "", "set_H2"], [100, 4, 1, "", "set_h2"], [100, 3, 1, "", "var_err"]], "pybrops.breed.prot.pt.TruePhenotyping": [[103, 1, 1, "", "TruePhenotyping"]], "pybrops.breed.prot.pt.TruePhenotyping.TruePhenotyping": [[103, 3, 1, "", "gpmod"], [103, 4, 1, "", "phenotype"], [103, 4, 1, "", "set_H2"], [103, 4, 1, "", "set_h2"], [103, 3, 1, "", "var_err"]], "pybrops.breed.prot.sel": [[105, 0, 0, "-", "BinaryMateSelectionProtocol"], [108, 0, 0, "-", "BinarySelectionProtocol"], [111, 0, 0, "-", "EstimatedBreedingValueSelection"], [117, 0, 0, "-", "ExpectedMaximumBreedingValueSelection"], [123, 0, 0, "-", "FamilyEstimatedBreedingValueSelection"], [129, 0, 0, "-", "GeneralizedWeightedGenomicEstimatedBreedingValueSelection"], [135, 0, 0, "-", "GenomicEstimatedBreedingValueSelection"], [141, 0, 0, "-", "GenotypeBuilderSelection"], [144, 0, 0, "-", "IntegerMateSelectionProtocol"], [147, 0, 0, "-", "IntegerSelectionProtocol"], [150, 0, 0, "-", "L1NormGenomicSelection"], [151, 0, 0, "-", "L2NormGenomicSelection"], [157, 0, 0, "-", "MateSelectionProtocol"], [160, 0, 0, "-", "MeanExpectedHeterozygositySelection"], [166, 0, 0, "-", "MeanGenomicRelationshipSelection"], [172, 0, 0, "-", "MultiObjectiveGenomicSelection"], [175, 0, 0, "-", "OptimalContributionSelection"], [181, 0, 0, "-", "OptimalHaploidValueSelection"], [187, 0, 0, "-", "OptimalPopulationValueSelection"], [190, 0, 0, "-", "RandomSelection"], [196, 0, 0, "-", "RealMateSelectionProtocol"], [199, 0, 0, "-", "RealSelectionProtocol"], [202, 0, 0, "-", "SelectionProtocol"], [205, 0, 0, "-", "SubsetMateSelectionProtocol"], [208, 0, 0, "-", "SubsetSelectionProtocol"], [211, 0, 0, "-", "UnconstrainedGeneralized1NormGenomicSelection"], [213, 0, 0, "-", "UnconstrainedMultiObjectiveGenomicMating"], [215, 0, 0, "-", "UnconstrainedPopulationAlleleFrequencyDistanceSelection"], [217, 0, 0, "-", "UnconstrainedPopulationAlleleUnavailabilitySelection"], [219, 0, 0, "-", "UnconstrainedSelectionProtocol"], [222, 0, 0, "-", "UsefulnessCriterionSelection"], [228, 0, 0, "-", "WeightedGenomicSelection"], [233, 0, 0, "-", "cfg"], [262, 0, 0, "-", "prob"], [392, 0, 0, "-", "soln"], [423, 0, 0, "-", "targetfn"], [427, 0, 0, "-", "transfn"], [436, 0, 0, "-", "weightfn"]], "pybrops.breed.prot.sel.BinaryMateSelectionProtocol": [[106, 1, 1, "", "BinaryMateSelectionProtocol"], [107, 2, 1, "", "check_is_BinaryMateSelectionProtocol"]], "pybrops.breed.prot.sel.BinaryMateSelectionProtocol.BinaryMateSelectionProtocol": [[106, 3, 1, "", "eqcv_trans"], [106, 3, 1, "", "eqcv_trans_kwargs"], [106, 3, 1, "", "eqcv_wt"], [106, 3, 1, "", "ineqcv_trans"], [106, 3, 1, "", "ineqcv_trans_kwargs"], [106, 3, 1, "", "ineqcv_wt"], [106, 3, 1, "", "moalgo"], [106, 4, 1, "", "mosolve"], [106, 3, 1, "", "ncross"], [106, 3, 1, "", "ndset_trans"], [106, 3, 1, "", "ndset_trans_kwargs"], [106, 3, 1, "", "ndset_wt"], [106, 3, 1, "", "neqcv"], [106, 3, 1, "", "nineqcv"], [106, 3, 1, "", "nmating"], [106, 3, 1, "", "nobj"], [106, 3, 1, "", "nparent"], [106, 3, 1, "", "nprogeny"], [106, 3, 1, "", "nselindiv"], [106, 3, 1, "", "obj_trans"], [106, 3, 1, "", "obj_trans_kwargs"], [106, 3, 1, "", "obj_wt"], [106, 4, 1, "", "problem"], [106, 3, 1, "", "rng"], [106, 4, 1, "", "select"], [106, 3, 1, "", "soalgo"], [106, 4, 1, "", "sosolve"]], "pybrops.breed.prot.sel.BinarySelectionProtocol": [[109, 1, 1, "", "BinarySelectionProtocol"], [110, 2, 1, "", "check_is_BinarySelectionProtocol"]], "pybrops.breed.prot.sel.BinarySelectionProtocol.BinarySelectionProtocol": [[109, 3, 1, "", "eqcv_trans"], [109, 3, 1, "", "eqcv_trans_kwargs"], [109, 3, 1, "", "eqcv_wt"], [109, 3, 1, "", "ineqcv_trans"], [109, 3, 1, "", "ineqcv_trans_kwargs"], [109, 3, 1, "", "ineqcv_wt"], [109, 3, 1, "", "moalgo"], [109, 4, 1, "", "mosolve"], [109, 3, 1, "", "ncross"], [109, 3, 1, "", "ndset_trans"], [109, 3, 1, "", "ndset_trans_kwargs"], [109, 3, 1, "", "ndset_wt"], [109, 3, 1, "", "neqcv"], [109, 3, 1, "", "nineqcv"], [109, 3, 1, "", "nmating"], [109, 3, 1, "", "nobj"], [109, 3, 1, "", "nparent"], [109, 3, 1, "", "nprogeny"], [109, 3, 1, "", "nselindiv"], [109, 3, 1, "", "obj_trans"], [109, 3, 1, "", "obj_trans_kwargs"], [109, 3, 1, "", "obj_wt"], [109, 4, 1, "", "problem"], [109, 3, 1, "", "rng"], [109, 4, 1, "", "select"], [109, 3, 1, "", "soalgo"], [109, 4, 1, "", "sosolve"]], "pybrops.breed.prot.sel.EstimatedBreedingValueSelection": [[112, 1, 1, "", "EstimatedBreedingValueBinarySelection"], [113, 1, 1, "", "EstimatedBreedingValueIntegerSelection"], [114, 1, 1, "", "EstimatedBreedingValueRealSelection"], [115, 1, 1, "", "EstimatedBreedingValueSelectionMixin"], [116, 1, 1, "", "EstimatedBreedingValueSubsetSelection"]], "pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueBinarySelection": [[112, 3, 1, "", "eqcv_trans"], [112, 3, 1, "", "eqcv_trans_kwargs"], [112, 3, 1, "", "eqcv_wt"], [112, 3, 1, "", "ineqcv_trans"], [112, 3, 1, "", "ineqcv_trans_kwargs"], [112, 3, 1, "", "ineqcv_wt"], [112, 3, 1, "", "moalgo"], [112, 4, 1, "", "mosolve"], [112, 3, 1, "", "ncross"], [112, 3, 1, "", "ndset_trans"], [112, 3, 1, "", "ndset_trans_kwargs"], [112, 3, 1, "", "ndset_wt"], [112, 3, 1, "", "neqcv"], [112, 3, 1, "", "nineqcv"], [112, 3, 1, "", "nmating"], [112, 3, 1, "", "nobj"], [112, 3, 1, "", "nparent"], [112, 3, 1, "", "nprogeny"], [112, 3, 1, "", "nselindiv"], [112, 3, 1, "", "ntrait"], [112, 3, 1, "", "obj_trans"], [112, 3, 1, "", "obj_trans_kwargs"], [112, 3, 1, "", "obj_wt"], [112, 4, 1, "", "problem"], [112, 3, 1, "", "rng"], [112, 4, 1, "", "select"], [112, 3, 1, "", "soalgo"], [112, 4, 1, "", "sosolve"], [112, 3, 1, "", "unscale"]], "pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueIntegerSelection": [[113, 3, 1, "", "eqcv_trans"], [113, 3, 1, "", "eqcv_trans_kwargs"], [113, 3, 1, "", "eqcv_wt"], [113, 3, 1, "", "ineqcv_trans"], [113, 3, 1, "", "ineqcv_trans_kwargs"], [113, 3, 1, "", "ineqcv_wt"], [113, 3, 1, "", "moalgo"], [113, 4, 1, "", "mosolve"], [113, 3, 1, "", "ncross"], [113, 3, 1, "", "ndset_trans"], [113, 3, 1, "", "ndset_trans_kwargs"], [113, 3, 1, "", "ndset_wt"], [113, 3, 1, "", "neqcv"], [113, 3, 1, "", "nineqcv"], [113, 3, 1, "", "nmating"], [113, 3, 1, "", "nobj"], [113, 3, 1, "", "nparent"], [113, 3, 1, "", "nprogeny"], [113, 3, 1, "", "nselindiv"], [113, 3, 1, "", "ntrait"], [113, 3, 1, "", "obj_trans"], [113, 3, 1, "", "obj_trans_kwargs"], [113, 3, 1, "", "obj_wt"], [113, 4, 1, "", "problem"], [113, 3, 1, "", "rng"], [113, 4, 1, "", "select"], [113, 3, 1, "", "soalgo"], [113, 4, 1, "", "sosolve"], [113, 3, 1, "", "unscale"]], "pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueRealSelection": [[114, 3, 1, "", "eqcv_trans"], [114, 3, 1, "", "eqcv_trans_kwargs"], [114, 3, 1, "", "eqcv_wt"], [114, 3, 1, "", "ineqcv_trans"], [114, 3, 1, "", "ineqcv_trans_kwargs"], [114, 3, 1, "", "ineqcv_wt"], [114, 3, 1, "", "moalgo"], [114, 4, 1, "", "mosolve"], [114, 3, 1, "", "ncross"], [114, 3, 1, "", "ndset_trans"], [114, 3, 1, "", "ndset_trans_kwargs"], [114, 3, 1, "", "ndset_wt"], [114, 3, 1, "", "neqcv"], [114, 3, 1, "", "nineqcv"], [114, 3, 1, "", "nmating"], [114, 3, 1, "", "nobj"], [114, 3, 1, "", "nparent"], [114, 3, 1, "", "nprogeny"], [114, 3, 1, "", "nselindiv"], [114, 3, 1, "", "ntrait"], [114, 3, 1, "", "obj_trans"], [114, 3, 1, "", "obj_trans_kwargs"], [114, 3, 1, "", "obj_wt"], [114, 4, 1, "", "problem"], [114, 3, 1, "", "rng"], [114, 4, 1, "", "select"], [114, 3, 1, "", "soalgo"], [114, 4, 1, "", "sosolve"], [114, 3, 1, "", "unscale"]], "pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueSelectionMixin": [[115, 3, 1, "", "ntrait"], [115, 3, 1, "", "unscale"]], "pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueSubsetSelection": [[116, 3, 1, "", "eqcv_trans"], [116, 3, 1, "", "eqcv_trans_kwargs"], [116, 3, 1, "", "eqcv_wt"], [116, 3, 1, "", "ineqcv_trans"], [116, 3, 1, "", "ineqcv_trans_kwargs"], [116, 3, 1, "", "ineqcv_wt"], [116, 3, 1, "", "moalgo"], [116, 4, 1, "", "mosolve"], [116, 3, 1, "", "ncross"], [116, 3, 1, "", "ndset_trans"], [116, 3, 1, "", "ndset_trans_kwargs"], [116, 3, 1, "", "ndset_wt"], [116, 3, 1, "", "neqcv"], [116, 3, 1, "", "nineqcv"], [116, 3, 1, "", "nmating"], [116, 3, 1, "", "nobj"], [116, 3, 1, "", "nparent"], [116, 3, 1, "", "nprogeny"], [116, 3, 1, "", "nselindiv"], [116, 3, 1, "", "ntrait"], [116, 3, 1, "", "obj_trans"], [116, 3, 1, "", "obj_trans_kwargs"], [116, 3, 1, "", "obj_wt"], [116, 4, 1, "", "problem"], [116, 3, 1, "", "rng"], [116, 4, 1, "", "select"], [116, 3, 1, "", "soalgo"], [116, 4, 1, "", "sosolve"], [116, 3, 1, "", "unscale"]], "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection": [[118, 1, 1, "", "ExpectedMaximumBreedingValueBinarySelection"], [119, 1, 1, "", "ExpectedMaximumBreedingValueIntegerSelection"], [120, 1, 1, "", "ExpectedMaximumBreedingValueRealSelection"], [121, 1, 1, "", "ExpectedMaximumBreedingValueSelectionMixin"], [122, 1, 1, "", "ExpectedMaximumBreedingValueSubsetSelection"]], "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueBinarySelection": [[118, 3, 1, "", "eqcv_trans"], [118, 3, 1, "", "eqcv_trans_kwargs"], [118, 3, 1, "", "eqcv_wt"], [118, 3, 1, "", "ineqcv_trans"], [118, 3, 1, "", "ineqcv_trans_kwargs"], [118, 3, 1, "", "ineqcv_wt"], [118, 3, 1, "", "mateprot"], [118, 3, 1, "", "moalgo"], [118, 4, 1, "", "mosolve"], [118, 3, 1, "", "ncross"], [118, 3, 1, "", "ndset_trans"], [118, 3, 1, "", "ndset_trans_kwargs"], [118, 3, 1, "", "ndset_wt"], [118, 3, 1, "", "neqcv"], [118, 3, 1, "", "nineqcv"], [118, 3, 1, "", "nmating"], [118, 3, 1, "", "nobj"], [118, 3, 1, "", "nparent"], [118, 3, 1, "", "nprogeny"], [118, 3, 1, "", "nrep"], [118, 3, 1, "", "nselindiv"], [118, 3, 1, "", "ntrait"], [118, 3, 1, "", "obj_trans"], [118, 3, 1, "", "obj_trans_kwargs"], [118, 3, 1, "", "obj_wt"], [118, 4, 1, "", "problem"], [118, 3, 1, "", "rng"], [118, 4, 1, "", "select"], [118, 3, 1, "", "soalgo"], [118, 4, 1, "", "sosolve"], [118, 3, 1, "", "unique_parents"]], "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueIntegerSelection": [[119, 3, 1, "", "eqcv_trans"], [119, 3, 1, "", "eqcv_trans_kwargs"], [119, 3, 1, "", "eqcv_wt"], [119, 3, 1, "", "ineqcv_trans"], [119, 3, 1, "", "ineqcv_trans_kwargs"], [119, 3, 1, "", "ineqcv_wt"], [119, 3, 1, "", "mateprot"], [119, 3, 1, "", "moalgo"], [119, 4, 1, "", "mosolve"], [119, 3, 1, "", "ncross"], [119, 3, 1, "", "ndset_trans"], [119, 3, 1, "", "ndset_trans_kwargs"], [119, 3, 1, "", "ndset_wt"], [119, 3, 1, "", "neqcv"], [119, 3, 1, "", "nineqcv"], [119, 3, 1, "", "nmating"], [119, 3, 1, "", "nobj"], [119, 3, 1, "", "nparent"], [119, 3, 1, "", "nprogeny"], [119, 3, 1, "", "nrep"], [119, 3, 1, "", "nselindiv"], [119, 3, 1, "", "ntrait"], [119, 3, 1, "", "obj_trans"], [119, 3, 1, "", "obj_trans_kwargs"], [119, 3, 1, "", "obj_wt"], [119, 4, 1, "", "problem"], [119, 3, 1, "", "rng"], [119, 4, 1, "", "select"], [119, 3, 1, "", "soalgo"], [119, 4, 1, "", "sosolve"], [119, 3, 1, "", "unique_parents"]], "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueRealSelection": [[120, 3, 1, "", "eqcv_trans"], [120, 3, 1, "", "eqcv_trans_kwargs"], [120, 3, 1, "", "eqcv_wt"], [120, 3, 1, "", "ineqcv_trans"], [120, 3, 1, "", "ineqcv_trans_kwargs"], [120, 3, 1, "", "ineqcv_wt"], [120, 3, 1, "", "mateprot"], [120, 3, 1, "", "moalgo"], [120, 4, 1, "", "mosolve"], [120, 3, 1, "", "ncross"], [120, 3, 1, "", "ndset_trans"], [120, 3, 1, "", "ndset_trans_kwargs"], [120, 3, 1, "", "ndset_wt"], [120, 3, 1, "", "neqcv"], [120, 3, 1, "", "nineqcv"], [120, 3, 1, "", "nmating"], [120, 3, 1, "", "nobj"], [120, 3, 1, "", "nparent"], [120, 3, 1, "", "nprogeny"], [120, 3, 1, "", "nrep"], [120, 3, 1, "", "nselindiv"], [120, 3, 1, "", "ntrait"], [120, 3, 1, "", "obj_trans"], [120, 3, 1, "", "obj_trans_kwargs"], [120, 3, 1, "", "obj_wt"], [120, 4, 1, "", "problem"], [120, 3, 1, "", "rng"], [120, 4, 1, "", "select"], [120, 3, 1, "", "soalgo"], [120, 4, 1, "", "sosolve"], [120, 3, 1, "", "unique_parents"]], "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueSelectionMixin": [[121, 3, 1, "", "mateprot"], [121, 3, 1, "", "nrep"], [121, 3, 1, "", "ntrait"], [121, 3, 1, "", "unique_parents"]], "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueSubsetSelection": [[122, 3, 1, "", "eqcv_trans"], [122, 3, 1, "", "eqcv_trans_kwargs"], [122, 3, 1, "", "eqcv_wt"], [122, 3, 1, "", "ineqcv_trans"], [122, 3, 1, "", "ineqcv_trans_kwargs"], [122, 3, 1, "", "ineqcv_wt"], [122, 3, 1, "", "mateprot"], [122, 3, 1, "", "moalgo"], [122, 4, 1, "", "mosolve"], [122, 3, 1, "", "ncross"], [122, 3, 1, "", "ndset_trans"], [122, 3, 1, "", "ndset_trans_kwargs"], [122, 3, 1, "", "ndset_wt"], [122, 3, 1, "", "neqcv"], [122, 3, 1, "", "nineqcv"], [122, 3, 1, "", "nmating"], [122, 3, 1, "", "nobj"], [122, 3, 1, "", "nparent"], [122, 3, 1, "", "nprogeny"], [122, 3, 1, "", "nrep"], [122, 3, 1, "", "nselindiv"], [122, 3, 1, "", "ntrait"], [122, 3, 1, "", "obj_trans"], [122, 3, 1, "", "obj_trans_kwargs"], [122, 3, 1, "", "obj_wt"], [122, 4, 1, "", "problem"], [122, 3, 1, "", "rng"], [122, 4, 1, "", "select"], [122, 3, 1, "", "soalgo"], [122, 4, 1, "", "sosolve"], [122, 3, 1, "", "unique_parents"]], "pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection": [[124, 1, 1, "", "FamilyEstimatedBreedingValueBinarySelection"], [125, 1, 1, "", "FamilyEstimatedBreedingValueIntegerSelection"], [126, 1, 1, "", "FamilyEstimatedBreedingValueRealSelection"], [127, 1, 1, "", "FamilyEstimatedBreedingValueSelectionMixin"], [128, 1, 1, "", "FamilyEstimatedBreedingValueSubsetSelection"]], "pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueBinarySelection": [[124, 3, 1, "", "eqcv_trans"], [124, 3, 1, "", "eqcv_trans_kwargs"], [124, 3, 1, "", "eqcv_wt"], [124, 3, 1, "", "ineqcv_trans"], [124, 3, 1, "", "ineqcv_trans_kwargs"], [124, 3, 1, "", "ineqcv_wt"], [124, 3, 1, "", "moalgo"], [124, 4, 1, "", "mosolve"], [124, 3, 1, "", "ncross"], [124, 3, 1, "", "ndset_trans"], [124, 3, 1, "", "ndset_trans_kwargs"], [124, 3, 1, "", "ndset_wt"], [124, 3, 1, "", "neqcv"], [124, 3, 1, "", "nineqcv"], [124, 3, 1, "", "nmating"], [124, 3, 1, "", "nobj"], [124, 3, 1, "", "nparent"], [124, 3, 1, "", "nprogeny"], [124, 3, 1, "", "nselindiv"], [124, 3, 1, "", "ntrait"], [124, 3, 1, "", "obj_trans"], [124, 3, 1, "", "obj_trans_kwargs"], [124, 3, 1, "", "obj_wt"], [124, 4, 1, "", "problem"], [124, 3, 1, "", "rng"], [124, 4, 1, "", "select"], [124, 3, 1, "", "soalgo"], [124, 4, 1, "", "sosolve"]], "pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueIntegerSelection": [[125, 3, 1, "", "eqcv_trans"], [125, 3, 1, "", "eqcv_trans_kwargs"], [125, 3, 1, "", "eqcv_wt"], [125, 3, 1, "", "ineqcv_trans"], [125, 3, 1, "", "ineqcv_trans_kwargs"], [125, 3, 1, "", "ineqcv_wt"], [125, 3, 1, "", "moalgo"], [125, 4, 1, "", "mosolve"], [125, 3, 1, "", "ncross"], [125, 3, 1, "", "ndset_trans"], [125, 3, 1, "", "ndset_trans_kwargs"], [125, 3, 1, "", "ndset_wt"], [125, 3, 1, "", "neqcv"], [125, 3, 1, "", "nineqcv"], [125, 3, 1, "", "nmating"], [125, 3, 1, "", "nobj"], [125, 3, 1, "", "nparent"], [125, 3, 1, "", "nprogeny"], [125, 3, 1, "", "nselindiv"], [125, 3, 1, "", "ntrait"], [125, 3, 1, "", "obj_trans"], [125, 3, 1, "", "obj_trans_kwargs"], [125, 3, 1, "", "obj_wt"], [125, 4, 1, "", "problem"], [125, 3, 1, "", "rng"], [125, 4, 1, "", "select"], [125, 3, 1, "", "soalgo"], [125, 4, 1, "", "sosolve"]], "pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueRealSelection": [[126, 3, 1, "", "eqcv_trans"], [126, 3, 1, "", "eqcv_trans_kwargs"], [126, 3, 1, "", "eqcv_wt"], [126, 3, 1, "", "ineqcv_trans"], [126, 3, 1, "", "ineqcv_trans_kwargs"], [126, 3, 1, "", "ineqcv_wt"], [126, 3, 1, "", "moalgo"], [126, 4, 1, "", "mosolve"], [126, 3, 1, "", "ncross"], [126, 3, 1, "", "ndset_trans"], [126, 3, 1, "", "ndset_trans_kwargs"], [126, 3, 1, "", "ndset_wt"], [126, 3, 1, "", "neqcv"], [126, 3, 1, "", "nineqcv"], [126, 3, 1, "", "nmating"], [126, 3, 1, "", "nobj"], [126, 3, 1, "", "nparent"], [126, 3, 1, "", "nprogeny"], [126, 3, 1, "", "nselindiv"], [126, 3, 1, "", "ntrait"], [126, 3, 1, "", "obj_trans"], [126, 3, 1, "", "obj_trans_kwargs"], [126, 3, 1, "", "obj_wt"], [126, 4, 1, "", "problem"], [126, 3, 1, "", "rng"], [126, 4, 1, "", "select"], [126, 3, 1, "", "soalgo"], [126, 4, 1, "", "sosolve"]], "pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueSelectionMixin": [[127, 3, 1, "", "ntrait"]], "pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueSubsetSelection": [[128, 3, 1, "", "eqcv_trans"], [128, 3, 1, "", "eqcv_trans_kwargs"], [128, 3, 1, "", "eqcv_wt"], [128, 3, 1, "", "ineqcv_trans"], [128, 3, 1, "", "ineqcv_trans_kwargs"], [128, 3, 1, "", "ineqcv_wt"], [128, 3, 1, "", "moalgo"], [128, 4, 1, "", "mosolve"], [128, 3, 1, "", "ncross"], [128, 3, 1, "", "ndset_trans"], [128, 3, 1, "", "ndset_trans_kwargs"], [128, 3, 1, "", "ndset_wt"], [128, 3, 1, "", "neqcv"], [128, 3, 1, "", "nineqcv"], [128, 3, 1, "", "nmating"], [128, 3, 1, "", "nobj"], [128, 3, 1, "", "nparent"], [128, 3, 1, "", "nprogeny"], [128, 3, 1, "", "nselindiv"], [128, 3, 1, "", "ntrait"], [128, 3, 1, "", "obj_trans"], [128, 3, 1, "", "obj_trans_kwargs"], [128, 3, 1, "", "obj_wt"], [128, 4, 1, "", "problem"], [128, 3, 1, "", "rng"], [128, 4, 1, "", "select"], [128, 3, 1, "", "soalgo"], [128, 4, 1, "", "sosolve"]], "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection": [[130, 1, 1, "", "GeneralizedWeightedGenomicEstimatedBreedingValueBinarySelection"], [131, 1, 1, "", "GeneralizedWeightedGenomicEstimatedBreedingValueIntegerSelection"], [132, 1, 1, "", "GeneralizedWeightedGenomicEstimatedBreedingValueRealSelection"], [133, 1, 1, "", "GeneralizedWeightedGenomicEstimatedBreedingValueSelectionMixin"], [134, 1, 1, "", "GeneralizedWeightedGenomicEstimatedBreedingValueSubsetSelection"]], "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueBinarySelection": [[130, 3, 1, "", "alpha"], [130, 3, 1, "", "eqcv_trans"], [130, 3, 1, "", "eqcv_trans_kwargs"], [130, 3, 1, "", "eqcv_wt"], [130, 3, 1, "", "ineqcv_trans"], [130, 3, 1, "", "ineqcv_trans_kwargs"], [130, 3, 1, "", "ineqcv_wt"], [130, 3, 1, "", "moalgo"], [130, 4, 1, "", "mosolve"], [130, 3, 1, "", "ncross"], [130, 3, 1, "", "ndset_trans"], [130, 3, 1, "", "ndset_trans_kwargs"], [130, 3, 1, "", "ndset_wt"], [130, 3, 1, "", "neqcv"], [130, 3, 1, "", "nineqcv"], [130, 3, 1, "", "nmating"], [130, 3, 1, "", "nobj"], [130, 3, 1, "", "nparent"], [130, 3, 1, "", "nprogeny"], [130, 3, 1, "", "nselindiv"], [130, 3, 1, "", "ntrait"], [130, 3, 1, "", "obj_trans"], [130, 3, 1, "", "obj_trans_kwargs"], [130, 3, 1, "", "obj_wt"], [130, 4, 1, "", "problem"], [130, 3, 1, "", "rng"], [130, 4, 1, "", "select"], [130, 3, 1, "", "soalgo"], [130, 4, 1, "", "sosolve"]], "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueIntegerSelection": [[131, 3, 1, "", "alpha"], [131, 3, 1, "", "eqcv_trans"], [131, 3, 1, "", "eqcv_trans_kwargs"], [131, 3, 1, "", "eqcv_wt"], [131, 3, 1, "", "ineqcv_trans"], [131, 3, 1, "", "ineqcv_trans_kwargs"], [131, 3, 1, "", "ineqcv_wt"], [131, 3, 1, "", "moalgo"], [131, 4, 1, "", "mosolve"], [131, 3, 1, "", "ncross"], [131, 3, 1, "", "ndset_trans"], [131, 3, 1, "", "ndset_trans_kwargs"], [131, 3, 1, "", "ndset_wt"], [131, 3, 1, "", "neqcv"], [131, 3, 1, "", "nineqcv"], [131, 3, 1, "", "nmating"], [131, 3, 1, "", "nobj"], [131, 3, 1, "", "nparent"], [131, 3, 1, "", "nprogeny"], [131, 3, 1, "", "nselindiv"], [131, 3, 1, "", "ntrait"], [131, 3, 1, "", "obj_trans"], [131, 3, 1, "", "obj_trans_kwargs"], [131, 3, 1, "", "obj_wt"], [131, 4, 1, "", "problem"], [131, 3, 1, "", "rng"], [131, 4, 1, "", "select"], [131, 3, 1, "", "soalgo"], [131, 4, 1, "", "sosolve"]], "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueRealSelection": [[132, 3, 1, "", "alpha"], [132, 3, 1, "", "eqcv_trans"], [132, 3, 1, "", "eqcv_trans_kwargs"], [132, 3, 1, "", "eqcv_wt"], [132, 3, 1, "", "ineqcv_trans"], [132, 3, 1, "", "ineqcv_trans_kwargs"], [132, 3, 1, "", "ineqcv_wt"], [132, 3, 1, "", "moalgo"], [132, 4, 1, "", "mosolve"], [132, 3, 1, "", "ncross"], [132, 3, 1, "", "ndset_trans"], [132, 3, 1, "", "ndset_trans_kwargs"], [132, 3, 1, "", "ndset_wt"], [132, 3, 1, "", "neqcv"], [132, 3, 1, "", "nineqcv"], [132, 3, 1, "", "nmating"], [132, 3, 1, "", "nobj"], [132, 3, 1, "", "nparent"], [132, 3, 1, "", "nprogeny"], [132, 3, 1, "", "nselindiv"], [132, 3, 1, "", "ntrait"], [132, 3, 1, "", "obj_trans"], [132, 3, 1, "", "obj_trans_kwargs"], [132, 3, 1, "", "obj_wt"], [132, 4, 1, "", "problem"], [132, 3, 1, "", "rng"], [132, 4, 1, "", "select"], [132, 3, 1, "", "soalgo"], [132, 4, 1, "", "sosolve"]], "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionMixin": [[133, 3, 1, "", "alpha"], [133, 3, 1, "", "ntrait"]], "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueSubsetSelection": [[134, 3, 1, "", "alpha"], [134, 3, 1, "", "eqcv_trans"], [134, 3, 1, "", "eqcv_trans_kwargs"], [134, 3, 1, "", "eqcv_wt"], [134, 3, 1, "", "ineqcv_trans"], [134, 3, 1, "", "ineqcv_trans_kwargs"], [134, 3, 1, "", "ineqcv_wt"], [134, 3, 1, "", "moalgo"], [134, 4, 1, "", "mosolve"], [134, 3, 1, "", "ncross"], [134, 3, 1, "", "ndset_trans"], [134, 3, 1, "", "ndset_trans_kwargs"], [134, 3, 1, "", "ndset_wt"], [134, 3, 1, "", "neqcv"], [134, 3, 1, "", "nineqcv"], [134, 3, 1, "", "nmating"], [134, 3, 1, "", "nobj"], [134, 3, 1, "", "nparent"], [134, 3, 1, "", "nprogeny"], [134, 3, 1, "", "nselindiv"], [134, 3, 1, "", "ntrait"], [134, 3, 1, "", "obj_trans"], [134, 3, 1, "", "obj_trans_kwargs"], [134, 3, 1, "", "obj_wt"], [134, 4, 1, "", "problem"], [134, 3, 1, "", "rng"], [134, 4, 1, "", "select"], [134, 3, 1, "", "soalgo"], [134, 4, 1, "", "sosolve"]], "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection": [[136, 1, 1, "", "GenomicEstimatedBreedingValueBinarySelection"], [137, 1, 1, "", "GenomicEstimatedBreedingValueIntegerSelection"], [138, 1, 1, "", "GenomicEstimatedBreedingValueRealSelection"], [139, 1, 1, "", "GenomicEstimatedBreedingValueSelectionMixin"], [140, 1, 1, "", "GenomicEstimatedBreedingValueSubsetSelection"]], "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueBinarySelection": [[136, 3, 1, "", "eqcv_trans"], [136, 3, 1, "", "eqcv_trans_kwargs"], [136, 3, 1, "", "eqcv_wt"], [136, 3, 1, "", "ineqcv_trans"], [136, 3, 1, "", "ineqcv_trans_kwargs"], [136, 3, 1, "", "ineqcv_wt"], [136, 3, 1, "", "moalgo"], [136, 4, 1, "", "mosolve"], [136, 3, 1, "", "ncross"], [136, 3, 1, "", "ndset_trans"], [136, 3, 1, "", "ndset_trans_kwargs"], [136, 3, 1, "", "ndset_wt"], [136, 3, 1, "", "neqcv"], [136, 3, 1, "", "nineqcv"], [136, 3, 1, "", "nmating"], [136, 3, 1, "", "nobj"], [136, 3, 1, "", "nparent"], [136, 3, 1, "", "nprogeny"], [136, 3, 1, "", "nselindiv"], [136, 3, 1, "", "ntrait"], [136, 3, 1, "", "obj_trans"], [136, 3, 1, "", "obj_trans_kwargs"], [136, 3, 1, "", "obj_wt"], [136, 4, 1, "", "problem"], [136, 3, 1, "", "rng"], [136, 4, 1, "", "select"], [136, 3, 1, "", "soalgo"], [136, 4, 1, "", "sosolve"], [136, 3, 1, "", "unscale"]], "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueIntegerSelection": [[137, 3, 1, "", "eqcv_trans"], [137, 3, 1, "", "eqcv_trans_kwargs"], [137, 3, 1, "", "eqcv_wt"], [137, 3, 1, "", "ineqcv_trans"], [137, 3, 1, "", "ineqcv_trans_kwargs"], [137, 3, 1, "", "ineqcv_wt"], [137, 3, 1, "", "moalgo"], [137, 4, 1, "", "mosolve"], [137, 3, 1, "", "ncross"], [137, 3, 1, "", "ndset_trans"], [137, 3, 1, "", "ndset_trans_kwargs"], [137, 3, 1, "", "ndset_wt"], [137, 3, 1, "", "neqcv"], [137, 3, 1, "", "nineqcv"], [137, 3, 1, "", "nmating"], [137, 3, 1, "", "nobj"], [137, 3, 1, "", "nparent"], [137, 3, 1, "", "nprogeny"], [137, 3, 1, "", "nselindiv"], [137, 3, 1, "", "ntrait"], [137, 3, 1, "", "obj_trans"], [137, 3, 1, "", "obj_trans_kwargs"], [137, 3, 1, "", "obj_wt"], [137, 4, 1, "", "problem"], [137, 3, 1, "", "rng"], [137, 4, 1, "", "select"], [137, 3, 1, "", "soalgo"], [137, 4, 1, "", "sosolve"], [137, 3, 1, "", "unscale"]], "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueRealSelection": [[138, 3, 1, "", "eqcv_trans"], [138, 3, 1, "", "eqcv_trans_kwargs"], [138, 3, 1, "", "eqcv_wt"], [138, 3, 1, "", "ineqcv_trans"], [138, 3, 1, "", "ineqcv_trans_kwargs"], [138, 3, 1, "", "ineqcv_wt"], [138, 3, 1, "", "moalgo"], [138, 4, 1, "", "mosolve"], [138, 3, 1, "", "ncross"], [138, 3, 1, "", "ndset_trans"], [138, 3, 1, "", "ndset_trans_kwargs"], [138, 3, 1, "", "ndset_wt"], [138, 3, 1, "", "neqcv"], [138, 3, 1, "", "nineqcv"], [138, 3, 1, "", "nmating"], [138, 3, 1, "", "nobj"], [138, 3, 1, "", "nparent"], [138, 3, 1, "", "nprogeny"], [138, 3, 1, "", "nselindiv"], [138, 3, 1, "", "ntrait"], [138, 3, 1, "", "obj_trans"], [138, 3, 1, "", "obj_trans_kwargs"], [138, 3, 1, "", "obj_wt"], [138, 4, 1, "", "problem"], [138, 3, 1, "", "rng"], [138, 4, 1, "", "select"], [138, 3, 1, "", "soalgo"], [138, 4, 1, "", "sosolve"], [138, 3, 1, "", "unscale"]], "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueSelectionMixin": [[139, 3, 1, "", "ntrait"], [139, 3, 1, "", "unscale"]], "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueSubsetSelection": [[140, 3, 1, "", "eqcv_trans"], [140, 3, 1, "", "eqcv_trans_kwargs"], [140, 3, 1, "", "eqcv_wt"], [140, 3, 1, "", "ineqcv_trans"], [140, 3, 1, "", "ineqcv_trans_kwargs"], [140, 3, 1, "", "ineqcv_wt"], [140, 3, 1, "", "moalgo"], [140, 4, 1, "", "mosolve"], [140, 3, 1, "", "ncross"], [140, 3, 1, "", "ndset_trans"], [140, 3, 1, "", "ndset_trans_kwargs"], [140, 3, 1, "", "ndset_wt"], [140, 3, 1, "", "neqcv"], [140, 3, 1, "", "nineqcv"], [140, 3, 1, "", "nmating"], [140, 3, 1, "", "nobj"], [140, 3, 1, "", "nparent"], [140, 3, 1, "", "nprogeny"], [140, 3, 1, "", "nselindiv"], [140, 3, 1, "", "ntrait"], [140, 3, 1, "", "obj_trans"], [140, 3, 1, "", "obj_trans_kwargs"], [140, 3, 1, "", "obj_wt"], [140, 4, 1, "", "problem"], [140, 3, 1, "", "rng"], [140, 4, 1, "", "select"], [140, 3, 1, "", "soalgo"], [140, 4, 1, "", "sosolve"], [140, 3, 1, "", "unscale"]], "pybrops.breed.prot.sel.GenotypeBuilderSelection": [[142, 1, 1, "", "GenotypeBuilderSelectionMixin"], [143, 1, 1, "", "GenotypeBuilderSubsetSelection"]], "pybrops.breed.prot.sel.GenotypeBuilderSelection.GenotypeBuilderSelectionMixin": [[142, 3, 1, "", "nbestfndr"], [142, 3, 1, "", "nhaploblk"], [142, 3, 1, "", "ntrait"]], "pybrops.breed.prot.sel.GenotypeBuilderSelection.GenotypeBuilderSubsetSelection": [[143, 3, 1, "", "eqcv_trans"], [143, 3, 1, "", "eqcv_trans_kwargs"], [143, 3, 1, "", "eqcv_wt"], [143, 3, 1, "", "ineqcv_trans"], [143, 3, 1, "", "ineqcv_trans_kwargs"], [143, 3, 1, "", "ineqcv_wt"], [143, 3, 1, "", "moalgo"], [143, 4, 1, "", "mosolve"], [143, 3, 1, "", "nbestfndr"], [143, 3, 1, "", "ncross"], [143, 3, 1, "", "ndset_trans"], [143, 3, 1, "", "ndset_trans_kwargs"], [143, 3, 1, "", "ndset_wt"], [143, 3, 1, "", "neqcv"], [143, 3, 1, "", "nhaploblk"], [143, 3, 1, "", "nineqcv"], [143, 3, 1, "", "nmating"], [143, 3, 1, "", "nobj"], [143, 3, 1, "", "nparent"], [143, 3, 1, "", "nprogeny"], [143, 3, 1, "", "nselindiv"], [143, 3, 1, "", "ntrait"], [143, 3, 1, "", "obj_trans"], [143, 3, 1, "", "obj_trans_kwargs"], [143, 3, 1, "", "obj_wt"], [143, 4, 1, "", "problem"], [143, 3, 1, "", "rng"], [143, 4, 1, "", "select"], [143, 3, 1, "", "soalgo"], [143, 4, 1, "", "sosolve"]], "pybrops.breed.prot.sel.IntegerMateSelectionProtocol": [[145, 1, 1, "", "IntegerMateSelectionProtocol"], [146, 2, 1, "", "check_is_IntegerMateSelectionProtocol"]], "pybrops.breed.prot.sel.IntegerMateSelectionProtocol.IntegerMateSelectionProtocol": [[145, 3, 1, "", "eqcv_trans"], [145, 3, 1, "", "eqcv_trans_kwargs"], [145, 3, 1, "", "eqcv_wt"], [145, 3, 1, "", "ineqcv_trans"], [145, 3, 1, "", "ineqcv_trans_kwargs"], [145, 3, 1, "", "ineqcv_wt"], [145, 3, 1, "", "moalgo"], [145, 4, 1, "", "mosolve"], [145, 3, 1, "", "ncross"], [145, 3, 1, "", "ndset_trans"], [145, 3, 1, "", "ndset_trans_kwargs"], [145, 3, 1, "", "ndset_wt"], [145, 3, 1, "", "neqcv"], [145, 3, 1, "", "nineqcv"], [145, 3, 1, "", "nmating"], [145, 3, 1, "", "nobj"], [145, 3, 1, "", "nparent"], [145, 3, 1, "", "nprogeny"], [145, 3, 1, "", "nselindiv"], [145, 3, 1, "", "obj_trans"], [145, 3, 1, "", "obj_trans_kwargs"], [145, 3, 1, "", "obj_wt"], [145, 4, 1, "", "problem"], [145, 3, 1, "", "rng"], [145, 4, 1, "", "select"], [145, 3, 1, "", "soalgo"], [145, 4, 1, "", "sosolve"]], "pybrops.breed.prot.sel.IntegerSelectionProtocol": [[148, 1, 1, "", "IntegerSelectionProtocol"], [149, 2, 1, "", "check_is_IntegerSelectionProtocol"]], "pybrops.breed.prot.sel.IntegerSelectionProtocol.IntegerSelectionProtocol": [[148, 3, 1, "", "eqcv_trans"], [148, 3, 1, "", "eqcv_trans_kwargs"], [148, 3, 1, "", "eqcv_wt"], [148, 3, 1, "", "ineqcv_trans"], [148, 3, 1, "", "ineqcv_trans_kwargs"], [148, 3, 1, "", "ineqcv_wt"], [148, 3, 1, "", "moalgo"], [148, 4, 1, "", "mosolve"], [148, 3, 1, "", "ncross"], [148, 3, 1, "", "ndset_trans"], [148, 3, 1, "", "ndset_trans_kwargs"], [148, 3, 1, "", "ndset_wt"], [148, 3, 1, "", "neqcv"], [148, 3, 1, "", "nineqcv"], [148, 3, 1, "", "nmating"], [148, 3, 1, "", "nobj"], [148, 3, 1, "", "nparent"], [148, 3, 1, "", "nprogeny"], [148, 3, 1, "", "nselindiv"], [148, 3, 1, "", "obj_trans"], [148, 3, 1, "", "obj_trans_kwargs"], [148, 3, 1, "", "obj_wt"], [148, 4, 1, "", "problem"], [148, 3, 1, "", "rng"], [148, 4, 1, "", "select"], [148, 3, 1, "", "soalgo"], [148, 4, 1, "", "sosolve"]], "pybrops.breed.prot.sel.L2NormGenomicSelection": [[152, 1, 1, "", "L2NormGenomicBinarySelection"], [153, 1, 1, "", "L2NormGenomicIntegerSelection"], [154, 1, 1, "", "L2NormGenomicRealSelection"], [155, 1, 1, "", "L2NormGenomicSelectionMixin"], [156, 1, 1, "", "L2NormGenomicSubsetSelection"]], "pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicBinarySelection": [[152, 3, 1, "", "cmatfcty"], [152, 3, 1, "", "eqcv_trans"], [152, 3, 1, "", "eqcv_trans_kwargs"], [152, 3, 1, "", "eqcv_wt"], [152, 3, 1, "", "ineqcv_trans"], [152, 3, 1, "", "ineqcv_trans_kwargs"], [152, 3, 1, "", "ineqcv_wt"], [152, 3, 1, "", "moalgo"], [152, 4, 1, "", "mosolve"], [152, 3, 1, "", "ncross"], [152, 3, 1, "", "ndset_trans"], [152, 3, 1, "", "ndset_trans_kwargs"], [152, 3, 1, "", "ndset_wt"], [152, 3, 1, "", "neqcv"], [152, 3, 1, "", "nineqcv"], [152, 3, 1, "", "nmating"], [152, 3, 1, "", "nobj"], [152, 3, 1, "", "nparent"], [152, 3, 1, "", "nprogeny"], [152, 3, 1, "", "nselindiv"], [152, 3, 1, "", "obj_trans"], [152, 3, 1, "", "obj_trans_kwargs"], [152, 3, 1, "", "obj_wt"], [152, 4, 1, "", "problem"], [152, 3, 1, "", "rng"], [152, 4, 1, "", "select"], [152, 3, 1, "", "soalgo"], [152, 4, 1, "", "sosolve"]], "pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicIntegerSelection": [[153, 3, 1, "", "cmatfcty"], [153, 3, 1, "", "eqcv_trans"], [153, 3, 1, "", "eqcv_trans_kwargs"], [153, 3, 1, "", "eqcv_wt"], [153, 3, 1, "", "ineqcv_trans"], [153, 3, 1, "", "ineqcv_trans_kwargs"], [153, 3, 1, "", "ineqcv_wt"], [153, 3, 1, "", "moalgo"], [153, 4, 1, "", "mosolve"], [153, 3, 1, "", "ncross"], [153, 3, 1, "", "ndset_trans"], [153, 3, 1, "", "ndset_trans_kwargs"], [153, 3, 1, "", "ndset_wt"], [153, 3, 1, "", "neqcv"], [153, 3, 1, "", "nineqcv"], [153, 3, 1, "", "nmating"], [153, 3, 1, "", "nobj"], [153, 3, 1, "", "nparent"], [153, 3, 1, "", "nprogeny"], [153, 3, 1, "", "nselindiv"], [153, 3, 1, "", "obj_trans"], [153, 3, 1, "", "obj_trans_kwargs"], [153, 3, 1, "", "obj_wt"], [153, 4, 1, "", "problem"], [153, 3, 1, "", "rng"], [153, 4, 1, "", "select"], [153, 3, 1, "", "soalgo"], [153, 4, 1, "", "sosolve"]], "pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicRealSelection": [[154, 3, 1, "", "cmatfcty"], [154, 3, 1, "", "eqcv_trans"], [154, 3, 1, "", "eqcv_trans_kwargs"], [154, 3, 1, "", "eqcv_wt"], [154, 3, 1, "", "ineqcv_trans"], [154, 3, 1, "", "ineqcv_trans_kwargs"], [154, 3, 1, "", "ineqcv_wt"], [154, 3, 1, "", "moalgo"], [154, 4, 1, "", "mosolve"], [154, 3, 1, "", "ncross"], [154, 3, 1, "", "ndset_trans"], [154, 3, 1, "", "ndset_trans_kwargs"], [154, 3, 1, "", "ndset_wt"], [154, 3, 1, "", "neqcv"], [154, 3, 1, "", "nineqcv"], [154, 3, 1, "", "nmating"], [154, 3, 1, "", "nobj"], [154, 3, 1, "", "nparent"], [154, 3, 1, "", "nprogeny"], [154, 3, 1, "", "nselindiv"], [154, 3, 1, "", "obj_trans"], [154, 3, 1, "", "obj_trans_kwargs"], [154, 3, 1, "", "obj_wt"], [154, 4, 1, "", "problem"], [154, 3, 1, "", "rng"], [154, 4, 1, "", "select"], [154, 3, 1, "", "soalgo"], [154, 4, 1, "", "sosolve"]], "pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicSelectionMixin": [[155, 3, 1, "", "cmatfcty"]], "pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicSubsetSelection": [[156, 3, 1, "", "cmatfcty"], [156, 3, 1, "", "eqcv_trans"], [156, 3, 1, "", "eqcv_trans_kwargs"], [156, 3, 1, "", "eqcv_wt"], [156, 3, 1, "", "ineqcv_trans"], [156, 3, 1, "", "ineqcv_trans_kwargs"], [156, 3, 1, "", "ineqcv_wt"], [156, 3, 1, "", "moalgo"], [156, 4, 1, "", "mosolve"], [156, 3, 1, "", "ncross"], [156, 3, 1, "", "ndset_trans"], [156, 3, 1, "", "ndset_trans_kwargs"], [156, 3, 1, "", "ndset_wt"], [156, 3, 1, "", "neqcv"], [156, 3, 1, "", "nineqcv"], [156, 3, 1, "", "nmating"], [156, 3, 1, "", "nobj"], [156, 3, 1, "", "nparent"], [156, 3, 1, "", "nprogeny"], [156, 3, 1, "", "nselindiv"], [156, 3, 1, "", "obj_trans"], [156, 3, 1, "", "obj_trans_kwargs"], [156, 3, 1, "", "obj_wt"], [156, 4, 1, "", "problem"], [156, 3, 1, "", "rng"], [156, 4, 1, "", "select"], [156, 3, 1, "", "soalgo"], [156, 4, 1, "", "sosolve"]], "pybrops.breed.prot.sel.MateSelectionProtocol": [[158, 1, 1, "", "MateSelectionProtocol"], [159, 2, 1, "", "check_is_MateSelectionProtocol"]], "pybrops.breed.prot.sel.MateSelectionProtocol.MateSelectionProtocol": [[158, 3, 1, "", "eqcv_trans"], [158, 3, 1, "", "eqcv_trans_kwargs"], [158, 3, 1, "", "eqcv_wt"], [158, 3, 1, "", "ineqcv_trans"], [158, 3, 1, "", "ineqcv_trans_kwargs"], [158, 3, 1, "", "ineqcv_wt"], [158, 3, 1, "", "moalgo"], [158, 4, 1, "", "mosolve"], [158, 3, 1, "", "ncross"], [158, 3, 1, "", "ndset_trans"], [158, 3, 1, "", "ndset_trans_kwargs"], [158, 3, 1, "", "ndset_wt"], [158, 3, 1, "", "neqcv"], [158, 3, 1, "", "nineqcv"], [158, 3, 1, "", "nmating"], [158, 3, 1, "", "nobj"], [158, 3, 1, "", "nparent"], [158, 3, 1, "", "nprogeny"], [158, 3, 1, "", "nselindiv"], [158, 3, 1, "", "obj_trans"], [158, 3, 1, "", "obj_trans_kwargs"], [158, 3, 1, "", "obj_wt"], [158, 4, 1, "", "problem"], [158, 3, 1, "", "rng"], [158, 4, 1, "", "select"], [158, 3, 1, "", "soalgo"], [158, 4, 1, "", "sosolve"]], "pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection": [[161, 1, 1, "", "MeanExpectedHeterozygosityBinarySelection"], [162, 1, 1, "", "MeanExpectedHeterozygosityIntegerSelection"], [163, 1, 1, "", "MeanExpectedHeterozygosityRealSelection"], [164, 1, 1, "", "MeanExpectedHeterozygositySelectionMixin"], [165, 1, 1, "", "MeanExpectedHeterozygositySubsetSelection"]], "pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection.MeanExpectedHeterozygosityBinarySelection": [[161, 3, 1, "", "eqcv_trans"], [161, 3, 1, "", "eqcv_trans_kwargs"], [161, 3, 1, "", "eqcv_wt"], [161, 3, 1, "", "ineqcv_trans"], [161, 3, 1, "", "ineqcv_trans_kwargs"], [161, 3, 1, "", "ineqcv_wt"], [161, 3, 1, "", "moalgo"], [161, 4, 1, "", "mosolve"], [161, 3, 1, "", "ncross"], [161, 3, 1, "", "ndset_trans"], [161, 3, 1, "", "ndset_trans_kwargs"], [161, 3, 1, "", "ndset_wt"], [161, 3, 1, "", "neqcv"], [161, 3, 1, "", "nineqcv"], [161, 3, 1, "", "nmating"], [161, 3, 1, "", "nobj"], [161, 3, 1, "", "nparent"], [161, 3, 1, "", "nprogeny"], [161, 3, 1, "", "nselindiv"], [161, 3, 1, "", "obj_trans"], [161, 3, 1, "", "obj_trans_kwargs"], [161, 3, 1, "", "obj_wt"], [161, 4, 1, "", "problem"], [161, 3, 1, "", "rng"], [161, 4, 1, "", "select"], [161, 3, 1, "", "soalgo"], [161, 4, 1, "", "sosolve"]], "pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection.MeanExpectedHeterozygosityIntegerSelection": [[162, 3, 1, "", "eqcv_trans"], [162, 3, 1, "", "eqcv_trans_kwargs"], [162, 3, 1, "", "eqcv_wt"], [162, 3, 1, "", "ineqcv_trans"], [162, 3, 1, "", "ineqcv_trans_kwargs"], [162, 3, 1, "", "ineqcv_wt"], [162, 3, 1, "", "moalgo"], [162, 4, 1, "", "mosolve"], [162, 3, 1, "", "ncross"], [162, 3, 1, "", "ndset_trans"], [162, 3, 1, "", "ndset_trans_kwargs"], [162, 3, 1, "", "ndset_wt"], [162, 3, 1, "", "neqcv"], [162, 3, 1, "", "nineqcv"], [162, 3, 1, "", "nmating"], [162, 3, 1, "", "nobj"], [162, 3, 1, "", "nparent"], [162, 3, 1, "", "nprogeny"], [162, 3, 1, "", "nselindiv"], [162, 3, 1, "", "obj_trans"], [162, 3, 1, "", "obj_trans_kwargs"], [162, 3, 1, "", "obj_wt"], [162, 4, 1, "", "problem"], [162, 3, 1, "", "rng"], [162, 4, 1, "", "select"], [162, 3, 1, "", "soalgo"], [162, 4, 1, "", "sosolve"]], "pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection.MeanExpectedHeterozygosityRealSelection": [[163, 3, 1, "", "eqcv_trans"], [163, 3, 1, "", "eqcv_trans_kwargs"], [163, 3, 1, "", "eqcv_wt"], [163, 3, 1, "", "ineqcv_trans"], [163, 3, 1, "", "ineqcv_trans_kwargs"], [163, 3, 1, "", "ineqcv_wt"], [163, 3, 1, "", "moalgo"], [163, 4, 1, "", "mosolve"], [163, 3, 1, "", "ncross"], [163, 3, 1, "", "ndset_trans"], [163, 3, 1, "", "ndset_trans_kwargs"], [163, 3, 1, "", "ndset_wt"], [163, 3, 1, "", "neqcv"], [163, 3, 1, "", "nineqcv"], [163, 3, 1, "", "nmating"], [163, 3, 1, "", "nobj"], [163, 3, 1, "", "nparent"], [163, 3, 1, "", "nprogeny"], [163, 3, 1, "", "nselindiv"], [163, 3, 1, "", "obj_trans"], [163, 3, 1, "", "obj_trans_kwargs"], [163, 3, 1, "", "obj_wt"], [163, 4, 1, "", "problem"], [163, 3, 1, "", "rng"], [163, 4, 1, "", "select"], [163, 3, 1, "", "soalgo"], [163, 4, 1, "", "sosolve"]], "pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection.MeanExpectedHeterozygositySubsetSelection": [[165, 3, 1, "", "eqcv_trans"], [165, 3, 1, "", "eqcv_trans_kwargs"], [165, 3, 1, "", "eqcv_wt"], [165, 3, 1, "", "ineqcv_trans"], [165, 3, 1, "", "ineqcv_trans_kwargs"], [165, 3, 1, "", "ineqcv_wt"], [165, 3, 1, "", "moalgo"], [165, 4, 1, "", "mosolve"], [165, 3, 1, "", "ncross"], [165, 3, 1, "", "ndset_trans"], [165, 3, 1, "", "ndset_trans_kwargs"], [165, 3, 1, "", "ndset_wt"], [165, 3, 1, "", "neqcv"], [165, 3, 1, "", "nineqcv"], [165, 3, 1, "", "nmating"], [165, 3, 1, "", "nobj"], [165, 3, 1, "", "nparent"], [165, 3, 1, "", "nprogeny"], [165, 3, 1, "", "nselindiv"], [165, 3, 1, "", "obj_trans"], [165, 3, 1, "", "obj_trans_kwargs"], [165, 3, 1, "", "obj_wt"], [165, 4, 1, "", "problem"], [165, 3, 1, "", "rng"], [165, 4, 1, "", "select"], [165, 3, 1, "", "soalgo"], [165, 4, 1, "", "sosolve"]], "pybrops.breed.prot.sel.MeanGenomicRelationshipSelection": [[167, 1, 1, "", "MeanGenomicRelationshipBinarySelection"], [168, 1, 1, "", "MeanGenomicRelationshipIntegerSelection"], [169, 1, 1, "", "MeanGenomicRelationshipRealSelection"], [170, 1, 1, "", "MeanGenomicRelationshipSelectionMixin"], [171, 1, 1, "", "MeanGenomicRelationshipSubsetSelection"]], "pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipBinarySelection": [[167, 3, 1, "", "cmatfcty"], [167, 3, 1, "", "eqcv_trans"], [167, 3, 1, "", "eqcv_trans_kwargs"], [167, 3, 1, "", "eqcv_wt"], [167, 3, 1, "", "ineqcv_trans"], [167, 3, 1, "", "ineqcv_trans_kwargs"], [167, 3, 1, "", "ineqcv_wt"], [167, 3, 1, "", "moalgo"], [167, 4, 1, "", "mosolve"], [167, 3, 1, "", "ncross"], [167, 3, 1, "", "ndset_trans"], [167, 3, 1, "", "ndset_trans_kwargs"], [167, 3, 1, "", "ndset_wt"], [167, 3, 1, "", "neqcv"], [167, 3, 1, "", "nineqcv"], [167, 3, 1, "", "nmating"], [167, 3, 1, "", "nobj"], [167, 3, 1, "", "nparent"], [167, 3, 1, "", "nprogeny"], [167, 3, 1, "", "nselindiv"], [167, 3, 1, "", "obj_trans"], [167, 3, 1, "", "obj_trans_kwargs"], [167, 3, 1, "", "obj_wt"], [167, 4, 1, "", "problem"], [167, 3, 1, "", "rng"], [167, 4, 1, "", "select"], [167, 3, 1, "", "soalgo"], [167, 4, 1, "", "sosolve"]], "pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipIntegerSelection": [[168, 3, 1, "", "cmatfcty"], [168, 3, 1, "", "eqcv_trans"], [168, 3, 1, "", "eqcv_trans_kwargs"], [168, 3, 1, "", "eqcv_wt"], [168, 3, 1, "", "ineqcv_trans"], [168, 3, 1, "", "ineqcv_trans_kwargs"], [168, 3, 1, "", "ineqcv_wt"], [168, 3, 1, "", "moalgo"], [168, 4, 1, "", "mosolve"], [168, 3, 1, "", "ncross"], [168, 3, 1, "", "ndset_trans"], [168, 3, 1, "", "ndset_trans_kwargs"], [168, 3, 1, "", "ndset_wt"], [168, 3, 1, "", "neqcv"], [168, 3, 1, "", "nineqcv"], [168, 3, 1, "", "nmating"], [168, 3, 1, "", "nobj"], [168, 3, 1, "", "nparent"], [168, 3, 1, "", "nprogeny"], [168, 3, 1, "", "nselindiv"], [168, 3, 1, "", "obj_trans"], [168, 3, 1, "", "obj_trans_kwargs"], [168, 3, 1, "", "obj_wt"], [168, 4, 1, "", "problem"], [168, 3, 1, "", "rng"], [168, 4, 1, "", "select"], [168, 3, 1, "", "soalgo"], [168, 4, 1, "", "sosolve"]], "pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipRealSelection": [[169, 3, 1, "", "cmatfcty"], [169, 3, 1, "", "eqcv_trans"], [169, 3, 1, "", "eqcv_trans_kwargs"], [169, 3, 1, "", "eqcv_wt"], [169, 3, 1, "", "ineqcv_trans"], [169, 3, 1, "", "ineqcv_trans_kwargs"], [169, 3, 1, "", "ineqcv_wt"], [169, 3, 1, "", "moalgo"], [169, 4, 1, "", "mosolve"], [169, 3, 1, "", "ncross"], [169, 3, 1, "", "ndset_trans"], [169, 3, 1, "", "ndset_trans_kwargs"], [169, 3, 1, "", "ndset_wt"], [169, 3, 1, "", "neqcv"], [169, 3, 1, "", "nineqcv"], [169, 3, 1, "", "nmating"], [169, 3, 1, "", "nobj"], [169, 3, 1, "", "nparent"], [169, 3, 1, "", "nprogeny"], [169, 3, 1, "", "nselindiv"], [169, 3, 1, "", "obj_trans"], [169, 3, 1, "", "obj_trans_kwargs"], [169, 3, 1, "", "obj_wt"], [169, 4, 1, "", "problem"], [169, 3, 1, "", "rng"], [169, 4, 1, "", "select"], [169, 3, 1, "", "soalgo"], [169, 4, 1, "", "sosolve"]], "pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipSelectionMixin": [[170, 3, 1, "", "cmatfcty"]], "pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipSubsetSelection": [[171, 3, 1, "", "cmatfcty"], [171, 3, 1, "", "eqcv_trans"], [171, 3, 1, "", "eqcv_trans_kwargs"], [171, 3, 1, "", "eqcv_wt"], [171, 3, 1, "", "ineqcv_trans"], [171, 3, 1, "", "ineqcv_trans_kwargs"], [171, 3, 1, "", "ineqcv_wt"], [171, 3, 1, "", "moalgo"], [171, 4, 1, "", "mosolve"], [171, 3, 1, "", "ncross"], [171, 3, 1, "", "ndset_trans"], [171, 3, 1, "", "ndset_trans_kwargs"], [171, 3, 1, "", "ndset_wt"], [171, 3, 1, "", "neqcv"], [171, 3, 1, "", "nineqcv"], [171, 3, 1, "", "nmating"], [171, 3, 1, "", "nobj"], [171, 3, 1, "", "nparent"], [171, 3, 1, "", "nprogeny"], [171, 3, 1, "", "nselindiv"], [171, 3, 1, "", "obj_trans"], [171, 3, 1, "", "obj_trans_kwargs"], [171, 3, 1, "", "obj_wt"], [171, 4, 1, "", "problem"], [171, 3, 1, "", "rng"], [171, 4, 1, "", "select"], [171, 3, 1, "", "soalgo"], [171, 4, 1, "", "sosolve"]], "pybrops.breed.prot.sel.MultiObjectiveGenomicSelection": [[173, 1, 1, "", "MultiObjectiveGenomicSelectionMixin"], [174, 1, 1, "", "MultiObjectiveGenomicSubsetSelection"]], "pybrops.breed.prot.sel.MultiObjectiveGenomicSelection.MultiObjectiveGenomicSelectionMixin": [[173, 3, 1, "", "ntrait"], [173, 3, 1, "", "target"], [173, 3, 1, "", "weight"]], "pybrops.breed.prot.sel.MultiObjectiveGenomicSelection.MultiObjectiveGenomicSubsetSelection": [[174, 3, 1, "", "eqcv_trans"], [174, 3, 1, "", "eqcv_trans_kwargs"], [174, 3, 1, "", "eqcv_wt"], [174, 3, 1, "", "ineqcv_trans"], [174, 3, 1, "", "ineqcv_trans_kwargs"], [174, 3, 1, "", "ineqcv_wt"], [174, 3, 1, "", "moalgo"], [174, 4, 1, "", "mosolve"], [174, 3, 1, "", "ncross"], [174, 3, 1, "", "ndset_trans"], [174, 3, 1, "", "ndset_trans_kwargs"], [174, 3, 1, "", "ndset_wt"], [174, 3, 1, "", "neqcv"], [174, 3, 1, "", "nineqcv"], [174, 3, 1, "", "nmating"], [174, 3, 1, "", "nobj"], [174, 3, 1, "", "nparent"], [174, 3, 1, "", "nprogeny"], [174, 3, 1, "", "nselindiv"], [174, 3, 1, "", "ntrait"], [174, 3, 1, "", "obj_trans"], [174, 3, 1, "", "obj_trans_kwargs"], [174, 3, 1, "", "obj_wt"], [174, 4, 1, "", "problem"], [174, 3, 1, "", "rng"], [174, 4, 1, "", "select"], [174, 3, 1, "", "soalgo"], [174, 4, 1, "", "sosolve"], [174, 3, 1, "", "target"], [174, 3, 1, "", "weight"]], "pybrops.breed.prot.sel.OptimalContributionSelection": [[176, 1, 1, "", "OptimalContributionBinarySelection"], [177, 1, 1, "", "OptimalContributionIntegerSelection"], [178, 1, 1, "", "OptimalContributionRealSelection"], [179, 1, 1, "", "OptimalContributionSelectionMixin"], [180, 1, 1, "", "OptimalContributionSubsetSelection"]], "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionBinarySelection": [[176, 3, 1, "", "cmatfcty"], [176, 3, 1, "", "eqcv_trans"], [176, 3, 1, "", "eqcv_trans_kwargs"], [176, 3, 1, "", "eqcv_wt"], [176, 3, 1, "", "ineqcv_trans"], [176, 3, 1, "", "ineqcv_trans_kwargs"], [176, 3, 1, "", "ineqcv_wt"], [176, 3, 1, "", "moalgo"], [176, 4, 1, "", "mosolve"], [176, 3, 1, "", "ncross"], [176, 3, 1, "", "ndset_trans"], [176, 3, 1, "", "ndset_trans_kwargs"], [176, 3, 1, "", "ndset_wt"], [176, 3, 1, "", "neqcv"], [176, 3, 1, "", "nineqcv"], [176, 3, 1, "", "nmating"], [176, 3, 1, "", "nobj"], [176, 3, 1, "", "nparent"], [176, 3, 1, "", "nprogeny"], [176, 3, 1, "", "nselindiv"], [176, 3, 1, "", "ntrait"], [176, 3, 1, "", "obj_trans"], [176, 3, 1, "", "obj_trans_kwargs"], [176, 3, 1, "", "obj_wt"], [176, 4, 1, "", "problem"], [176, 3, 1, "", "rng"], [176, 4, 1, "", "select"], [176, 3, 1, "", "soalgo"], [176, 4, 1, "", "sosolve"], [176, 3, 1, "", "unscale"]], "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionIntegerSelection": [[177, 3, 1, "", "cmatfcty"], [177, 3, 1, "", "eqcv_trans"], [177, 3, 1, "", "eqcv_trans_kwargs"], [177, 3, 1, "", "eqcv_wt"], [177, 3, 1, "", "ineqcv_trans"], [177, 3, 1, "", "ineqcv_trans_kwargs"], [177, 3, 1, "", "ineqcv_wt"], [177, 3, 1, "", "moalgo"], [177, 4, 1, "", "mosolve"], [177, 3, 1, "", "ncross"], [177, 3, 1, "", "ndset_trans"], [177, 3, 1, "", "ndset_trans_kwargs"], [177, 3, 1, "", "ndset_wt"], [177, 3, 1, "", "neqcv"], [177, 3, 1, "", "nineqcv"], [177, 3, 1, "", "nmating"], [177, 3, 1, "", "nobj"], [177, 3, 1, "", "nparent"], [177, 3, 1, "", "nprogeny"], [177, 3, 1, "", "nselindiv"], [177, 3, 1, "", "ntrait"], [177, 3, 1, "", "obj_trans"], [177, 3, 1, "", "obj_trans_kwargs"], [177, 3, 1, "", "obj_wt"], [177, 4, 1, "", "problem"], [177, 3, 1, "", "rng"], [177, 4, 1, "", "select"], [177, 3, 1, "", "soalgo"], [177, 4, 1, "", "sosolve"], [177, 3, 1, "", "unscale"]], "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionRealSelection": [[178, 3, 1, "", "cmatfcty"], [178, 3, 1, "", "eqcv_trans"], [178, 3, 1, "", "eqcv_trans_kwargs"], [178, 3, 1, "", "eqcv_wt"], [178, 3, 1, "", "ineqcv_trans"], [178, 3, 1, "", "ineqcv_trans_kwargs"], [178, 3, 1, "", "ineqcv_wt"], [178, 3, 1, "", "moalgo"], [178, 4, 1, "", "mosolve"], [178, 3, 1, "", "ncross"], [178, 3, 1, "", "ndset_trans"], [178, 3, 1, "", "ndset_trans_kwargs"], [178, 3, 1, "", "ndset_wt"], [178, 3, 1, "", "neqcv"], [178, 3, 1, "", "nineqcv"], [178, 3, 1, "", "nmating"], [178, 3, 1, "", "nobj"], [178, 3, 1, "", "nparent"], [178, 3, 1, "", "nprogeny"], [178, 3, 1, "", "nselindiv"], [178, 3, 1, "", "ntrait"], [178, 3, 1, "", "obj_trans"], [178, 3, 1, "", "obj_trans_kwargs"], [178, 3, 1, "", "obj_wt"], [178, 4, 1, "", "problem"], [178, 3, 1, "", "rng"], [178, 4, 1, "", "select"], [178, 3, 1, "", "soalgo"], [178, 4, 1, "", "sosolve"], [178, 3, 1, "", "unscale"]], "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionSelectionMixin": [[179, 3, 1, "", "cmatfcty"], [179, 3, 1, "", "ntrait"], [179, 3, 1, "", "unscale"]], "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionSubsetSelection": [[180, 3, 1, "", "cmatfcty"], [180, 3, 1, "", "eqcv_trans"], [180, 3, 1, "", "eqcv_trans_kwargs"], [180, 3, 1, "", "eqcv_wt"], [180, 3, 1, "", "ineqcv_trans"], [180, 3, 1, "", "ineqcv_trans_kwargs"], [180, 3, 1, "", "ineqcv_wt"], [180, 3, 1, "", "moalgo"], [180, 4, 1, "", "mosolve"], [180, 3, 1, "", "ncross"], [180, 3, 1, "", "ndset_trans"], [180, 3, 1, "", "ndset_trans_kwargs"], [180, 3, 1, "", "ndset_wt"], [180, 3, 1, "", "neqcv"], [180, 3, 1, "", "nineqcv"], [180, 3, 1, "", "nmating"], [180, 3, 1, "", "nobj"], [180, 3, 1, "", "nparent"], [180, 3, 1, "", "nprogeny"], [180, 3, 1, "", "nselindiv"], [180, 3, 1, "", "ntrait"], [180, 3, 1, "", "obj_trans"], [180, 3, 1, "", "obj_trans_kwargs"], [180, 3, 1, "", "obj_wt"], [180, 4, 1, "", "problem"], [180, 3, 1, "", "rng"], [180, 4, 1, "", "select"], [180, 3, 1, "", "soalgo"], [180, 4, 1, "", "sosolve"], [180, 3, 1, "", "unscale"]], "pybrops.breed.prot.sel.OptimalHaploidValueSelection": [[182, 1, 1, "", "OptimalHaploidValueBinarySelection"], [183, 1, 1, "", "OptimalHaploidValueIntegerSelection"], [184, 1, 1, "", "OptimalHaploidValueRealSelection"], [185, 1, 1, "", "OptimalHaploidValueSelectionMixin"], [186, 1, 1, "", "OptimalHaploidValueSubsetSelection"]], "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueBinarySelection": [[182, 3, 1, "", "eqcv_trans"], [182, 3, 1, "", "eqcv_trans_kwargs"], [182, 3, 1, "", "eqcv_wt"], [182, 3, 1, "", "ineqcv_trans"], [182, 3, 1, "", "ineqcv_trans_kwargs"], [182, 3, 1, "", "ineqcv_wt"], [182, 3, 1, "", "moalgo"], [182, 4, 1, "", "mosolve"], [182, 3, 1, "", "ncross"], [182, 3, 1, "", "ndset_trans"], [182, 3, 1, "", "ndset_trans_kwargs"], [182, 3, 1, "", "ndset_wt"], [182, 3, 1, "", "neqcv"], [182, 3, 1, "", "nhaploblk"], [182, 3, 1, "", "nineqcv"], [182, 3, 1, "", "nmating"], [182, 3, 1, "", "nobj"], [182, 3, 1, "", "nparent"], [182, 3, 1, "", "nprogeny"], [182, 3, 1, "", "nselindiv"], [182, 3, 1, "", "ntrait"], [182, 3, 1, "", "obj_trans"], [182, 3, 1, "", "obj_trans_kwargs"], [182, 3, 1, "", "obj_wt"], [182, 4, 1, "", "problem"], [182, 3, 1, "", "rng"], [182, 4, 1, "", "select"], [182, 3, 1, "", "soalgo"], [182, 4, 1, "", "sosolve"], [182, 3, 1, "", "unique_parents"]], "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueIntegerSelection": [[183, 3, 1, "", "eqcv_trans"], [183, 3, 1, "", "eqcv_trans_kwargs"], [183, 3, 1, "", "eqcv_wt"], [183, 3, 1, "", "ineqcv_trans"], [183, 3, 1, "", "ineqcv_trans_kwargs"], [183, 3, 1, "", "ineqcv_wt"], [183, 3, 1, "", "moalgo"], [183, 4, 1, "", "mosolve"], [183, 3, 1, "", "ncross"], [183, 3, 1, "", "ndset_trans"], [183, 3, 1, "", "ndset_trans_kwargs"], [183, 3, 1, "", "ndset_wt"], [183, 3, 1, "", "neqcv"], [183, 3, 1, "", "nhaploblk"], [183, 3, 1, "", "nineqcv"], [183, 3, 1, "", "nmating"], [183, 3, 1, "", "nobj"], [183, 3, 1, "", "nparent"], [183, 3, 1, "", "nprogeny"], [183, 3, 1, "", "nselindiv"], [183, 3, 1, "", "ntrait"], [183, 3, 1, "", "obj_trans"], [183, 3, 1, "", "obj_trans_kwargs"], [183, 3, 1, "", "obj_wt"], [183, 4, 1, "", "problem"], [183, 3, 1, "", "rng"], [183, 4, 1, "", "select"], [183, 3, 1, "", "soalgo"], [183, 4, 1, "", "sosolve"], [183, 3, 1, "", "unique_parents"]], "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueRealSelection": [[184, 3, 1, "", "eqcv_trans"], [184, 3, 1, "", "eqcv_trans_kwargs"], [184, 3, 1, "", "eqcv_wt"], [184, 3, 1, "", "ineqcv_trans"], [184, 3, 1, "", "ineqcv_trans_kwargs"], [184, 3, 1, "", "ineqcv_wt"], [184, 3, 1, "", "moalgo"], [184, 4, 1, "", "mosolve"], [184, 3, 1, "", "ncross"], [184, 3, 1, "", "ndset_trans"], [184, 3, 1, "", "ndset_trans_kwargs"], [184, 3, 1, "", "ndset_wt"], [184, 3, 1, "", "neqcv"], [184, 3, 1, "", "nhaploblk"], [184, 3, 1, "", "nineqcv"], [184, 3, 1, "", "nmating"], [184, 3, 1, "", "nobj"], [184, 3, 1, "", "nparent"], [184, 3, 1, "", "nprogeny"], [184, 3, 1, "", "nselindiv"], [184, 3, 1, "", "ntrait"], [184, 3, 1, "", "obj_trans"], [184, 3, 1, "", "obj_trans_kwargs"], [184, 3, 1, "", "obj_wt"], [184, 4, 1, "", "problem"], [184, 3, 1, "", "rng"], [184, 4, 1, "", "select"], [184, 3, 1, "", "soalgo"], [184, 4, 1, "", "sosolve"], [184, 3, 1, "", "unique_parents"]], "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueSelectionMixin": [[185, 3, 1, "", "nhaploblk"], [185, 3, 1, "", "ntrait"], [185, 3, 1, "", "unique_parents"]], "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueSubsetSelection": [[186, 3, 1, "", "eqcv_trans"], [186, 3, 1, "", "eqcv_trans_kwargs"], [186, 3, 1, "", "eqcv_wt"], [186, 3, 1, "", "ineqcv_trans"], [186, 3, 1, "", "ineqcv_trans_kwargs"], [186, 3, 1, "", "ineqcv_wt"], [186, 3, 1, "", "moalgo"], [186, 4, 1, "", "mosolve"], [186, 3, 1, "", "ncross"], [186, 3, 1, "", "ndset_trans"], [186, 3, 1, "", "ndset_trans_kwargs"], [186, 3, 1, "", "ndset_wt"], [186, 3, 1, "", "neqcv"], [186, 3, 1, "", "nhaploblk"], [186, 3, 1, "", "nineqcv"], [186, 3, 1, "", "nmating"], [186, 3, 1, "", "nobj"], [186, 3, 1, "", "nparent"], [186, 3, 1, "", "nprogeny"], [186, 3, 1, "", "nselindiv"], [186, 3, 1, "", "ntrait"], [186, 3, 1, "", "obj_trans"], [186, 3, 1, "", "obj_trans_kwargs"], [186, 3, 1, "", "obj_wt"], [186, 4, 1, "", "problem"], [186, 3, 1, "", "rng"], [186, 4, 1, "", "select"], [186, 3, 1, "", "soalgo"], [186, 4, 1, "", "sosolve"], [186, 3, 1, "", "unique_parents"]], "pybrops.breed.prot.sel.OptimalPopulationValueSelection": [[188, 1, 1, "", "OptimalPopulationValueSelectionMixin"], [189, 1, 1, "", "OptimalPopulationValueSubsetSelection"]], "pybrops.breed.prot.sel.OptimalPopulationValueSelection.OptimalPopulationValueSelectionMixin": [[188, 3, 1, "", "nhaploblk"], [188, 3, 1, "", "ntrait"]], "pybrops.breed.prot.sel.OptimalPopulationValueSelection.OptimalPopulationValueSubsetSelection": [[189, 3, 1, "", "eqcv_trans"], [189, 3, 1, "", "eqcv_trans_kwargs"], [189, 3, 1, "", "eqcv_wt"], [189, 3, 1, "", "ineqcv_trans"], [189, 3, 1, "", "ineqcv_trans_kwargs"], [189, 3, 1, "", "ineqcv_wt"], [189, 3, 1, "", "moalgo"], [189, 4, 1, "", "mosolve"], [189, 3, 1, "", "ncross"], [189, 3, 1, "", "ndset_trans"], [189, 3, 1, "", "ndset_trans_kwargs"], [189, 3, 1, "", "ndset_wt"], [189, 3, 1, "", "neqcv"], [189, 3, 1, "", "nhaploblk"], [189, 3, 1, "", "nineqcv"], [189, 3, 1, "", "nmating"], [189, 3, 1, "", "nobj"], [189, 3, 1, "", "nparent"], [189, 3, 1, "", "nprogeny"], [189, 3, 1, "", "nselindiv"], [189, 3, 1, "", "ntrait"], [189, 3, 1, "", "obj_trans"], [189, 3, 1, "", "obj_trans_kwargs"], [189, 3, 1, "", "obj_wt"], [189, 4, 1, "", "problem"], [189, 3, 1, "", "rng"], [189, 4, 1, "", "select"], [189, 3, 1, "", "soalgo"], [189, 4, 1, "", "sosolve"]], "pybrops.breed.prot.sel.RandomSelection": [[191, 1, 1, "", "RandomBinarySelection"], [192, 1, 1, "", "RandomIntegerSelection"], [193, 1, 1, "", "RandomRealSelection"], [194, 1, 1, "", "RandomSelectionMixin"], [195, 1, 1, "", "RandomSubsetSelection"]], "pybrops.breed.prot.sel.RandomSelection.RandomBinarySelection": [[191, 3, 1, "", "eqcv_trans"], [191, 3, 1, "", "eqcv_trans_kwargs"], [191, 3, 1, "", "eqcv_wt"], [191, 3, 1, "", "ineqcv_trans"], [191, 3, 1, "", "ineqcv_trans_kwargs"], [191, 3, 1, "", "ineqcv_wt"], [191, 3, 1, "", "moalgo"], [191, 4, 1, "", "mosolve"], [191, 3, 1, "", "ncross"], [191, 3, 1, "", "ndset_trans"], [191, 3, 1, "", "ndset_trans_kwargs"], [191, 3, 1, "", "ndset_wt"], [191, 3, 1, "", "neqcv"], [191, 3, 1, "", "nineqcv"], [191, 3, 1, "", "nmating"], [191, 3, 1, "", "nobj"], [191, 3, 1, "", "nparent"], [191, 3, 1, "", "nprogeny"], [191, 3, 1, "", "nselindiv"], [191, 3, 1, "", "ntrait"], [191, 3, 1, "", "obj_trans"], [191, 3, 1, "", "obj_trans_kwargs"], [191, 3, 1, "", "obj_wt"], [191, 4, 1, "", "problem"], [191, 3, 1, "", "rng"], [191, 4, 1, "", "select"], [191, 3, 1, "", "soalgo"], [191, 4, 1, "", "sosolve"]], "pybrops.breed.prot.sel.RandomSelection.RandomIntegerSelection": [[192, 3, 1, "", "eqcv_trans"], [192, 3, 1, "", "eqcv_trans_kwargs"], [192, 3, 1, "", "eqcv_wt"], [192, 3, 1, "", "ineqcv_trans"], [192, 3, 1, "", "ineqcv_trans_kwargs"], [192, 3, 1, "", "ineqcv_wt"], [192, 3, 1, "", "moalgo"], [192, 4, 1, "", "mosolve"], [192, 3, 1, "", "ncross"], [192, 3, 1, "", "ndset_trans"], [192, 3, 1, "", "ndset_trans_kwargs"], [192, 3, 1, "", "ndset_wt"], [192, 3, 1, "", "neqcv"], [192, 3, 1, "", "nineqcv"], [192, 3, 1, "", "nmating"], [192, 3, 1, "", "nobj"], [192, 3, 1, "", "nparent"], [192, 3, 1, "", "nprogeny"], [192, 3, 1, "", "nselindiv"], [192, 3, 1, "", "ntrait"], [192, 3, 1, "", "obj_trans"], [192, 3, 1, "", "obj_trans_kwargs"], [192, 3, 1, "", "obj_wt"], [192, 4, 1, "", "problem"], [192, 3, 1, "", "rng"], [192, 4, 1, "", "select"], [192, 3, 1, "", "soalgo"], [192, 4, 1, "", "sosolve"]], "pybrops.breed.prot.sel.RandomSelection.RandomRealSelection": [[193, 3, 1, "", "eqcv_trans"], [193, 3, 1, "", "eqcv_trans_kwargs"], [193, 3, 1, "", "eqcv_wt"], [193, 3, 1, "", "ineqcv_trans"], [193, 3, 1, "", "ineqcv_trans_kwargs"], [193, 3, 1, "", "ineqcv_wt"], [193, 3, 1, "", "moalgo"], [193, 4, 1, "", "mosolve"], [193, 3, 1, "", "ncross"], [193, 3, 1, "", "ndset_trans"], [193, 3, 1, "", "ndset_trans_kwargs"], [193, 3, 1, "", "ndset_wt"], [193, 3, 1, "", "neqcv"], [193, 3, 1, "", "nineqcv"], [193, 3, 1, "", "nmating"], [193, 3, 1, "", "nobj"], [193, 3, 1, "", "nparent"], [193, 3, 1, "", "nprogeny"], [193, 3, 1, "", "nselindiv"], [193, 3, 1, "", "ntrait"], [193, 3, 1, "", "obj_trans"], [193, 3, 1, "", "obj_trans_kwargs"], [193, 3, 1, "", "obj_wt"], [193, 4, 1, "", "problem"], [193, 3, 1, "", "rng"], [193, 4, 1, "", "select"], [193, 3, 1, "", "soalgo"], [193, 4, 1, "", "sosolve"]], "pybrops.breed.prot.sel.RandomSelection.RandomSelectionMixin": [[194, 3, 1, "", "ntrait"]], "pybrops.breed.prot.sel.RandomSelection.RandomSubsetSelection": [[195, 3, 1, "", "eqcv_trans"], [195, 3, 1, "", "eqcv_trans_kwargs"], [195, 3, 1, "", "eqcv_wt"], [195, 3, 1, "", "ineqcv_trans"], [195, 3, 1, "", "ineqcv_trans_kwargs"], [195, 3, 1, "", "ineqcv_wt"], [195, 3, 1, "", "moalgo"], [195, 4, 1, "", "mosolve"], [195, 3, 1, "", "ncross"], [195, 3, 1, "", "ndset_trans"], [195, 3, 1, "", "ndset_trans_kwargs"], [195, 3, 1, "", "ndset_wt"], [195, 3, 1, "", "neqcv"], [195, 3, 1, "", "nineqcv"], [195, 3, 1, "", "nmating"], [195, 3, 1, "", "nobj"], [195, 3, 1, "", "nparent"], [195, 3, 1, "", "nprogeny"], [195, 3, 1, "", "nselindiv"], [195, 3, 1, "", "ntrait"], [195, 3, 1, "", "obj_trans"], [195, 3, 1, "", "obj_trans_kwargs"], [195, 3, 1, "", "obj_wt"], [195, 4, 1, "", "problem"], [195, 3, 1, "", "rng"], [195, 4, 1, "", "select"], [195, 3, 1, "", "soalgo"], [195, 4, 1, "", "sosolve"]], "pybrops.breed.prot.sel.RealMateSelectionProtocol": [[197, 1, 1, "", "RealMateSelectionProtocol"], [198, 2, 1, "", "check_is_RealMateSelectionProtocol"]], "pybrops.breed.prot.sel.RealMateSelectionProtocol.RealMateSelectionProtocol": [[197, 3, 1, "", "eqcv_trans"], [197, 3, 1, "", "eqcv_trans_kwargs"], [197, 3, 1, "", "eqcv_wt"], [197, 3, 1, "", "ineqcv_trans"], [197, 3, 1, "", "ineqcv_trans_kwargs"], [197, 3, 1, "", "ineqcv_wt"], [197, 3, 1, "", "moalgo"], [197, 4, 1, "", "mosolve"], [197, 3, 1, "", "ncross"], [197, 3, 1, "", "ndset_trans"], [197, 3, 1, "", "ndset_trans_kwargs"], [197, 3, 1, "", "ndset_wt"], [197, 3, 1, "", "neqcv"], [197, 3, 1, "", "nineqcv"], [197, 3, 1, "", "nmating"], [197, 3, 1, "", "nobj"], [197, 3, 1, "", "nparent"], [197, 3, 1, "", "nprogeny"], [197, 3, 1, "", "nselindiv"], [197, 3, 1, "", "obj_trans"], [197, 3, 1, "", "obj_trans_kwargs"], [197, 3, 1, "", "obj_wt"], [197, 4, 1, "", "problem"], [197, 3, 1, "", "rng"], [197, 4, 1, "", "select"], [197, 3, 1, "", "soalgo"], [197, 4, 1, "", "sosolve"]], "pybrops.breed.prot.sel.RealSelectionProtocol": [[200, 1, 1, "", "RealSelectionProtocol"], [201, 2, 1, "", "check_is_RealSelectionProtocol"]], "pybrops.breed.prot.sel.RealSelectionProtocol.RealSelectionProtocol": [[200, 3, 1, "", "eqcv_trans"], [200, 3, 1, "", "eqcv_trans_kwargs"], [200, 3, 1, "", "eqcv_wt"], [200, 3, 1, "", "ineqcv_trans"], [200, 3, 1, "", "ineqcv_trans_kwargs"], [200, 3, 1, "", "ineqcv_wt"], [200, 3, 1, "", "moalgo"], [200, 4, 1, "", "mosolve"], [200, 3, 1, "", "ncross"], [200, 3, 1, "", "ndset_trans"], [200, 3, 1, "", "ndset_trans_kwargs"], [200, 3, 1, "", "ndset_wt"], [200, 3, 1, "", "neqcv"], [200, 3, 1, "", "nineqcv"], [200, 3, 1, "", "nmating"], [200, 3, 1, "", "nobj"], [200, 3, 1, "", "nparent"], [200, 3, 1, "", "nprogeny"], [200, 3, 1, "", "nselindiv"], [200, 3, 1, "", "obj_trans"], [200, 3, 1, "", "obj_trans_kwargs"], [200, 3, 1, "", "obj_wt"], [200, 4, 1, "", "problem"], [200, 3, 1, "", "rng"], [200, 4, 1, "", "select"], [200, 3, 1, "", "soalgo"], [200, 4, 1, "", "sosolve"]], "pybrops.breed.prot.sel.SelectionProtocol": [[203, 1, 1, "", "SelectionProtocol"], [204, 2, 1, "", "check_is_SelectionProtocol"]], "pybrops.breed.prot.sel.SelectionProtocol.SelectionProtocol": [[203, 3, 1, "", "eqcv_trans"], [203, 3, 1, "", "eqcv_trans_kwargs"], [203, 3, 1, "", "eqcv_wt"], [203, 3, 1, "", "ineqcv_trans"], [203, 3, 1, "", "ineqcv_trans_kwargs"], [203, 3, 1, "", "ineqcv_wt"], [203, 3, 1, "", "moalgo"], [203, 4, 1, "", "mosolve"], [203, 3, 1, "", "ncross"], [203, 3, 1, "", "ndset_trans"], [203, 3, 1, "", "ndset_trans_kwargs"], [203, 3, 1, "", "ndset_wt"], [203, 3, 1, "", "neqcv"], [203, 3, 1, "", "nineqcv"], [203, 3, 1, "", "nmating"], [203, 3, 1, "", "nobj"], [203, 3, 1, "", "nparent"], [203, 3, 1, "", "nprogeny"], [203, 3, 1, "", "nselindiv"], [203, 3, 1, "", "obj_trans"], [203, 3, 1, "", "obj_trans_kwargs"], [203, 3, 1, "", "obj_wt"], [203, 4, 1, "", "problem"], [203, 3, 1, "", "rng"], [203, 4, 1, "", "select"], [203, 3, 1, "", "soalgo"], [203, 4, 1, "", "sosolve"]], "pybrops.breed.prot.sel.SubsetMateSelectionProtocol": [[206, 1, 1, "", "SubsetMateSelectionProtocol"], [207, 2, 1, "", "check_is_SubsetMateSelectionProtocol"]], "pybrops.breed.prot.sel.SubsetMateSelectionProtocol.SubsetMateSelectionProtocol": [[206, 3, 1, "", "eqcv_trans"], [206, 3, 1, "", "eqcv_trans_kwargs"], [206, 3, 1, "", "eqcv_wt"], [206, 3, 1, "", "ineqcv_trans"], [206, 3, 1, "", "ineqcv_trans_kwargs"], [206, 3, 1, "", "ineqcv_wt"], [206, 3, 1, "", "moalgo"], [206, 4, 1, "", "mosolve"], [206, 3, 1, "", "ncross"], [206, 3, 1, "", "ndset_trans"], [206, 3, 1, "", "ndset_trans_kwargs"], [206, 3, 1, "", "ndset_wt"], [206, 3, 1, "", "neqcv"], [206, 3, 1, "", "nineqcv"], [206, 3, 1, "", "nmating"], [206, 3, 1, "", "nobj"], [206, 3, 1, "", "nparent"], [206, 3, 1, "", "nprogeny"], [206, 3, 1, "", "nselindiv"], [206, 3, 1, "", "obj_trans"], [206, 3, 1, "", "obj_trans_kwargs"], [206, 3, 1, "", "obj_wt"], [206, 4, 1, "", "problem"], [206, 3, 1, "", "rng"], [206, 4, 1, "", "select"], [206, 3, 1, "", "soalgo"], [206, 4, 1, "", "sosolve"]], "pybrops.breed.prot.sel.SubsetSelectionProtocol": [[209, 1, 1, "", "SubsetSelectionProtocol"], [210, 2, 1, "", "check_is_SubsetSelectionProtocol"]], "pybrops.breed.prot.sel.SubsetSelectionProtocol.SubsetSelectionProtocol": [[209, 3, 1, "", "eqcv_trans"], [209, 3, 1, "", "eqcv_trans_kwargs"], [209, 3, 1, "", "eqcv_wt"], [209, 3, 1, "", "ineqcv_trans"], [209, 3, 1, "", "ineqcv_trans_kwargs"], [209, 3, 1, "", "ineqcv_wt"], [209, 3, 1, "", "moalgo"], [209, 4, 1, "", "mosolve"], [209, 3, 1, "", "ncross"], [209, 3, 1, "", "ndset_trans"], [209, 3, 1, "", "ndset_trans_kwargs"], [209, 3, 1, "", "ndset_wt"], [209, 3, 1, "", "neqcv"], [209, 3, 1, "", "nineqcv"], [209, 3, 1, "", "nmating"], [209, 3, 1, "", "nobj"], [209, 3, 1, "", "nparent"], [209, 3, 1, "", "nprogeny"], [209, 3, 1, "", "nselindiv"], [209, 3, 1, "", "obj_trans"], [209, 3, 1, "", "obj_trans_kwargs"], [209, 3, 1, "", "obj_wt"], [209, 4, 1, "", "problem"], [209, 3, 1, "", "rng"], [209, 4, 1, "", "select"], [209, 3, 1, "", "soalgo"], [209, 4, 1, "", "sosolve"]], "pybrops.breed.prot.sel.UnconstrainedGeneralized1NormGenomicSelection": [[212, 1, 1, "", "Generalized1NormGenomicSelection"]], "pybrops.breed.prot.sel.UnconstrainedGeneralized1NormGenomicSelection.Generalized1NormGenomicSelection": [[212, 3, 1, "", "method"], [212, 3, 1, "", "moalgo"], [212, 3, 1, "", "ncross"], [212, 3, 1, "", "ndset_trans"], [212, 3, 1, "", "ndset_trans_kwargs"], [212, 3, 1, "", "ndset_wt"], [212, 3, 1, "", "nparent"], [212, 3, 1, "", "nprogeny"], [212, 4, 1, "", "objfn"], [212, 4, 1, "", "objfn_static"], [212, 3, 1, "", "objfn_trans"], [212, 3, 1, "", "objfn_trans_kwargs"], [212, 4, 1, "", "objfn_vec"], [212, 4, 1, "", "objfn_vec_static"], [212, 3, 1, "", "objfn_wt"], [212, 4, 1, "", "pareto"], [212, 3, 1, "", "rng"], [212, 4, 1, "", "select"], [212, 3, 1, "", "soalgo"], [212, 3, 1, "", "target"], [212, 3, 1, "", "weight"]], "pybrops.breed.prot.sel.UnconstrainedMultiObjectiveGenomicMating": [[214, 1, 1, "", "MultiObjectiveGenomicMating"]], "pybrops.breed.prot.sel.UnconstrainedMultiObjectiveGenomicMating.MultiObjectiveGenomicMating": [[214, 3, 1, "", "gmapfn"], [214, 3, 1, "", "mem"], [214, 3, 1, "", "method"], [214, 3, 1, "", "moalgo"], [214, 3, 1, "", "nconfig"], [214, 3, 1, "", "ncross"], [214, 3, 1, "", "ndset_trans"], [214, 3, 1, "", "ndset_trans_kwargs"], [214, 3, 1, "", "ndset_wt"], [214, 3, 1, "", "nparent"], [214, 3, 1, "", "nprogeny"], [214, 3, 1, "", "nself"], [214, 4, 1, "", "objfn"], [214, 4, 1, "", "objfn_static"], [214, 3, 1, "", "objfn_trans"], [214, 3, 1, "", "objfn_trans_kwargs"], [214, 4, 1, "", "objfn_vec"], [214, 4, 1, "", "objfn_vec_static"], [214, 3, 1, "", "objfn_wt"], [214, 4, 1, "", "pareto"], [214, 3, 1, "", "rng"], [214, 4, 1, "", "select"], [214, 3, 1, "", "soalgo"], [214, 3, 1, "", "target"], [214, 3, 1, "", "unique_parents"], [214, 3, 1, "", "vmatfcty"], [214, 3, 1, "", "weight"]], "pybrops.breed.prot.sel.UnconstrainedPopulationAlleleFrequencyDistanceSelection": [[216, 1, 1, "", "PopulationAlleleFrequencyDistanceSelection"]], "pybrops.breed.prot.sel.UnconstrainedPopulationAlleleFrequencyDistanceSelection.PopulationAlleleFrequencyDistanceSelection": [[216, 3, 1, "", "method"], [216, 3, 1, "", "moalgo"], [216, 3, 1, "", "ncross"], [216, 3, 1, "", "ndset_trans"], [216, 3, 1, "", "ndset_trans_kwargs"], [216, 3, 1, "", "ndset_wt"], [216, 3, 1, "", "nparent"], [216, 3, 1, "", "nprogeny"], [216, 4, 1, "", "objfn"], [216, 4, 1, "", "objfn_static"], [216, 3, 1, "", "objfn_trans"], [216, 3, 1, "", "objfn_trans_kwargs"], [216, 4, 1, "", "objfn_vec"], [216, 4, 1, "", "objfn_vec_static"], [216, 3, 1, "", "objfn_wt"], [216, 4, 1, "", "pareto"], [216, 3, 1, "", "rng"], [216, 4, 1, "", "select"], [216, 3, 1, "", "soalgo"], [216, 3, 1, "", "target"], [216, 3, 1, "", "weight"]], "pybrops.breed.prot.sel.UnconstrainedPopulationAlleleUnavailabilitySelection": [[218, 1, 1, "", "PopulationAlleleUnavailabilitySelection"]], "pybrops.breed.prot.sel.UnconstrainedPopulationAlleleUnavailabilitySelection.PopulationAlleleUnavailabilitySelection": [[218, 3, 1, "", "method"], [218, 3, 1, "", "moalgo"], [218, 3, 1, "", "ncross"], [218, 3, 1, "", "ndset_trans"], [218, 3, 1, "", "ndset_trans_kwargs"], [218, 3, 1, "", "ndset_wt"], [218, 3, 1, "", "nparent"], [218, 3, 1, "", "nprogeny"], [218, 4, 1, "", "objfn"], [218, 4, 1, "", "objfn_static"], [218, 3, 1, "", "objfn_trans"], [218, 3, 1, "", "objfn_trans_kwargs"], [218, 4, 1, "", "objfn_vec"], [218, 4, 1, "", "objfn_vec_static"], [218, 3, 1, "", "objfn_wt"], [218, 4, 1, "", "pareto"], [218, 3, 1, "", "rng"], [218, 4, 1, "", "select"], [218, 3, 1, "", "soalgo"], [218, 3, 1, "", "target"], [218, 3, 1, "", "weight"]], "pybrops.breed.prot.sel.UnconstrainedSelectionProtocol": [[220, 1, 1, "", "UnconstrainedSelectionProtocol"], [221, 2, 1, "", "check_is_SelectionProtocol"]], "pybrops.breed.prot.sel.UnconstrainedSelectionProtocol.UnconstrainedSelectionProtocol": [[220, 4, 1, "", "objfn"], [220, 4, 1, "", "objfn_static"], [220, 4, 1, "", "objfn_vec"], [220, 4, 1, "", "objfn_vec_static"], [220, 4, 1, "", "pareto"], [220, 4, 1, "", "select"]], "pybrops.breed.prot.sel.UsefulnessCriterionSelection": [[223, 1, 1, "", "UsefulnessCriterionBinarySelection"], [224, 1, 1, "", "UsefulnessCriterionIntegerSelection"], [225, 1, 1, "", "UsefulnessCriterionRealSelection"], [226, 1, 1, "", "UsefulnessCriterionSelectionMixin"], [227, 1, 1, "", "UsefulnessCriterionSubsetSelection"]], "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionBinarySelection": [[223, 3, 1, "", "eqcv_trans"], [223, 3, 1, "", "eqcv_trans_kwargs"], [223, 3, 1, "", "eqcv_wt"], [223, 3, 1, "", "gmapfn"], [223, 3, 1, "", "ineqcv_trans"], [223, 3, 1, "", "ineqcv_trans_kwargs"], [223, 3, 1, "", "ineqcv_wt"], [223, 3, 1, "", "moalgo"], [223, 4, 1, "", "mosolve"], [223, 3, 1, "", "ncross"], [223, 3, 1, "", "ndset_trans"], [223, 3, 1, "", "ndset_trans_kwargs"], [223, 3, 1, "", "ndset_wt"], [223, 3, 1, "", "neqcv"], [223, 3, 1, "", "nineqcv"], [223, 3, 1, "", "nmating"], [223, 3, 1, "", "nobj"], [223, 3, 1, "", "nparent"], [223, 3, 1, "", "nprogeny"], [223, 3, 1, "", "nself"], [223, 3, 1, "", "nselindiv"], [223, 3, 1, "", "ntrait"], [223, 3, 1, "", "obj_trans"], [223, 3, 1, "", "obj_trans_kwargs"], [223, 3, 1, "", "obj_wt"], [223, 4, 1, "", "problem"], [223, 3, 1, "", "rng"], [223, 4, 1, "", "select"], [223, 3, 1, "", "selection_intensity"], [223, 3, 1, "", "soalgo"], [223, 4, 1, "", "sosolve"], [223, 3, 1, "", "unique_parents"], [223, 3, 1, "", "upper_percentile"], [223, 3, 1, "", "vmatfcty"]], "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionIntegerSelection": [[224, 3, 1, "", "eqcv_trans"], [224, 3, 1, "", "eqcv_trans_kwargs"], [224, 3, 1, "", "eqcv_wt"], [224, 3, 1, "", "gmapfn"], [224, 3, 1, "", "ineqcv_trans"], [224, 3, 1, "", "ineqcv_trans_kwargs"], [224, 3, 1, "", "ineqcv_wt"], [224, 3, 1, "", "moalgo"], [224, 4, 1, "", "mosolve"], [224, 3, 1, "", "ncross"], [224, 3, 1, "", "ndset_trans"], [224, 3, 1, "", "ndset_trans_kwargs"], [224, 3, 1, "", "ndset_wt"], [224, 3, 1, "", "neqcv"], [224, 3, 1, "", "nineqcv"], [224, 3, 1, "", "nmating"], [224, 3, 1, "", "nobj"], [224, 3, 1, "", "nparent"], [224, 3, 1, "", "nprogeny"], [224, 3, 1, "", "nself"], [224, 3, 1, "", "nselindiv"], [224, 3, 1, "", "ntrait"], [224, 3, 1, "", "obj_trans"], [224, 3, 1, "", "obj_trans_kwargs"], [224, 3, 1, "", "obj_wt"], [224, 4, 1, "", "problem"], [224, 3, 1, "", "rng"], [224, 4, 1, "", "select"], [224, 3, 1, "", "selection_intensity"], [224, 3, 1, "", "soalgo"], [224, 4, 1, "", "sosolve"], [224, 3, 1, "", "unique_parents"], [224, 3, 1, "", "upper_percentile"], [224, 3, 1, "", "vmatfcty"]], "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionRealSelection": [[225, 3, 1, "", "eqcv_trans"], [225, 3, 1, "", "eqcv_trans_kwargs"], [225, 3, 1, "", "eqcv_wt"], [225, 3, 1, "", "gmapfn"], [225, 3, 1, "", "ineqcv_trans"], [225, 3, 1, "", "ineqcv_trans_kwargs"], [225, 3, 1, "", "ineqcv_wt"], [225, 3, 1, "", "moalgo"], [225, 4, 1, "", "mosolve"], [225, 3, 1, "", "ncross"], [225, 3, 1, "", "ndset_trans"], [225, 3, 1, "", "ndset_trans_kwargs"], [225, 3, 1, "", "ndset_wt"], [225, 3, 1, "", "neqcv"], [225, 3, 1, "", "nineqcv"], [225, 3, 1, "", "nmating"], [225, 3, 1, "", "nobj"], [225, 3, 1, "", "nparent"], [225, 3, 1, "", "nprogeny"], [225, 3, 1, "", "nself"], [225, 3, 1, "", "nselindiv"], [225, 3, 1, "", "ntrait"], [225, 3, 1, "", "obj_trans"], [225, 3, 1, "", "obj_trans_kwargs"], [225, 3, 1, "", "obj_wt"], [225, 4, 1, "", "problem"], [225, 3, 1, "", "rng"], [225, 4, 1, "", "select"], [225, 3, 1, "", "selection_intensity"], [225, 3, 1, "", "soalgo"], [225, 4, 1, "", "sosolve"], [225, 3, 1, "", "unique_parents"], [225, 3, 1, "", "upper_percentile"], [225, 3, 1, "", "vmatfcty"]], "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionSelectionMixin": [[226, 3, 1, "", "gmapfn"], [226, 3, 1, "", "nself"], [226, 3, 1, "", "ntrait"], [226, 3, 1, "", "selection_intensity"], [226, 3, 1, "", "unique_parents"], [226, 3, 1, "", "upper_percentile"], [226, 3, 1, "", "vmatfcty"]], "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionSubsetSelection": [[227, 3, 1, "", "eqcv_trans"], [227, 3, 1, "", "eqcv_trans_kwargs"], [227, 3, 1, "", "eqcv_wt"], [227, 3, 1, "", "gmapfn"], [227, 3, 1, "", "ineqcv_trans"], [227, 3, 1, "", "ineqcv_trans_kwargs"], [227, 3, 1, "", "ineqcv_wt"], [227, 3, 1, "", "moalgo"], [227, 4, 1, "", "mosolve"], [227, 3, 1, "", "ncross"], [227, 3, 1, "", "ndset_trans"], [227, 3, 1, "", "ndset_trans_kwargs"], [227, 3, 1, "", "ndset_wt"], [227, 3, 1, "", "neqcv"], [227, 3, 1, "", "nineqcv"], [227, 3, 1, "", "nmating"], [227, 3, 1, "", "nobj"], [227, 3, 1, "", "nparent"], [227, 3, 1, "", "nprogeny"], [227, 3, 1, "", "nself"], [227, 3, 1, "", "nselindiv"], [227, 3, 1, "", "ntrait"], [227, 3, 1, "", "obj_trans"], [227, 3, 1, "", "obj_trans_kwargs"], [227, 3, 1, "", "obj_wt"], [227, 4, 1, "", "problem"], [227, 3, 1, "", "rng"], [227, 4, 1, "", "select"], [227, 3, 1, "", "selection_intensity"], [227, 3, 1, "", "soalgo"], [227, 4, 1, "", "sosolve"], [227, 3, 1, "", "unique_parents"], [227, 3, 1, "", "upper_percentile"], [227, 3, 1, "", "vmatfcty"]], "pybrops.breed.prot.sel.WeightedGenomicSelection": [[229, 1, 1, "", "WeightedGenomicBinarySelection"], [230, 1, 1, "", "WeightedGenomicIntegerSelection"], [231, 1, 1, "", "WeightedGenomicRealSelection"], [232, 1, 1, "", "WeightedGenomicSubsetSelection"]], "pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicBinarySelection": [[229, 3, 1, "", "alpha"], [229, 3, 1, "", "eqcv_trans"], [229, 3, 1, "", "eqcv_trans_kwargs"], [229, 3, 1, "", "eqcv_wt"], [229, 3, 1, "", "ineqcv_trans"], [229, 3, 1, "", "ineqcv_trans_kwargs"], [229, 3, 1, "", "ineqcv_wt"], [229, 3, 1, "", "moalgo"], [229, 4, 1, "", "mosolve"], [229, 3, 1, "", "ncross"], [229, 3, 1, "", "ndset_trans"], [229, 3, 1, "", "ndset_trans_kwargs"], [229, 3, 1, "", "ndset_wt"], [229, 3, 1, "", "neqcv"], [229, 3, 1, "", "nineqcv"], [229, 3, 1, "", "nmating"], [229, 3, 1, "", "nobj"], [229, 3, 1, "", "nparent"], [229, 3, 1, "", "nprogeny"], [229, 3, 1, "", "nselindiv"], [229, 3, 1, "", "ntrait"], [229, 3, 1, "", "obj_trans"], [229, 3, 1, "", "obj_trans_kwargs"], [229, 3, 1, "", "obj_wt"], [229, 4, 1, "", "problem"], [229, 3, 1, "", "rng"], [229, 4, 1, "", "select"], [229, 3, 1, "", "soalgo"], [229, 4, 1, "", "sosolve"]], "pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicIntegerSelection": [[230, 3, 1, "", "alpha"], [230, 3, 1, "", "eqcv_trans"], [230, 3, 1, "", "eqcv_trans_kwargs"], [230, 3, 1, "", "eqcv_wt"], [230, 3, 1, "", "ineqcv_trans"], [230, 3, 1, "", "ineqcv_trans_kwargs"], [230, 3, 1, "", "ineqcv_wt"], [230, 3, 1, "", "moalgo"], [230, 4, 1, "", "mosolve"], [230, 3, 1, "", "ncross"], [230, 3, 1, "", "ndset_trans"], [230, 3, 1, "", "ndset_trans_kwargs"], [230, 3, 1, "", "ndset_wt"], [230, 3, 1, "", "neqcv"], [230, 3, 1, "", "nineqcv"], [230, 3, 1, "", "nmating"], [230, 3, 1, "", "nobj"], [230, 3, 1, "", "nparent"], [230, 3, 1, "", "nprogeny"], [230, 3, 1, "", "nselindiv"], [230, 3, 1, "", "ntrait"], [230, 3, 1, "", "obj_trans"], [230, 3, 1, "", "obj_trans_kwargs"], [230, 3, 1, "", "obj_wt"], [230, 4, 1, "", "problem"], [230, 3, 1, "", "rng"], [230, 4, 1, "", "select"], [230, 3, 1, "", "soalgo"], [230, 4, 1, "", "sosolve"]], "pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicRealSelection": [[231, 3, 1, "", "alpha"], [231, 3, 1, "", "eqcv_trans"], [231, 3, 1, "", "eqcv_trans_kwargs"], [231, 3, 1, "", "eqcv_wt"], [231, 3, 1, "", "ineqcv_trans"], [231, 3, 1, "", "ineqcv_trans_kwargs"], [231, 3, 1, "", "ineqcv_wt"], [231, 3, 1, "", "moalgo"], [231, 4, 1, "", "mosolve"], [231, 3, 1, "", "ncross"], [231, 3, 1, "", "ndset_trans"], [231, 3, 1, "", "ndset_trans_kwargs"], [231, 3, 1, "", "ndset_wt"], [231, 3, 1, "", "neqcv"], [231, 3, 1, "", "nineqcv"], [231, 3, 1, "", "nmating"], [231, 3, 1, "", "nobj"], [231, 3, 1, "", "nparent"], [231, 3, 1, "", "nprogeny"], [231, 3, 1, "", "nselindiv"], [231, 3, 1, "", "ntrait"], [231, 3, 1, "", "obj_trans"], [231, 3, 1, "", "obj_trans_kwargs"], [231, 3, 1, "", "obj_wt"], [231, 4, 1, "", "problem"], [231, 3, 1, "", "rng"], [231, 4, 1, "", "select"], [231, 3, 1, "", "soalgo"], [231, 4, 1, "", "sosolve"]], "pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicSubsetSelection": [[232, 3, 1, "", "alpha"], [232, 3, 1, "", "eqcv_trans"], [232, 3, 1, "", "eqcv_trans_kwargs"], [232, 3, 1, "", "eqcv_wt"], [232, 3, 1, "", "ineqcv_trans"], [232, 3, 1, "", "ineqcv_trans_kwargs"], [232, 3, 1, "", "ineqcv_wt"], [232, 3, 1, "", "moalgo"], [232, 4, 1, "", "mosolve"], [232, 3, 1, "", "ncross"], [232, 3, 1, "", "ndset_trans"], [232, 3, 1, "", "ndset_trans_kwargs"], [232, 3, 1, "", "ndset_wt"], [232, 3, 1, "", "neqcv"], [232, 3, 1, "", "nineqcv"], [232, 3, 1, "", "nmating"], [232, 3, 1, "", "nobj"], [232, 3, 1, "", "nparent"], [232, 3, 1, "", "nprogeny"], [232, 3, 1, "", "nselindiv"], [232, 3, 1, "", "ntrait"], [232, 3, 1, "", "obj_trans"], [232, 3, 1, "", "obj_trans_kwargs"], [232, 3, 1, "", "obj_wt"], [232, 4, 1, "", "problem"], [232, 3, 1, "", "rng"], [232, 4, 1, "", "select"], [232, 3, 1, "", "soalgo"], [232, 4, 1, "", "sosolve"]], "pybrops.breed.prot.sel.cfg": [[234, 0, 0, "-", "BinaryMateSelectionConfiguration"], [236, 0, 0, "-", "BinarySelectionConfiguration"], [238, 0, 0, "-", "IntegerMateSelectionConfiguration"], [240, 0, 0, "-", "IntegerSelectionConfiguration"], [242, 0, 0, "-", "MateSelectionConfiguration"], [245, 0, 0, "-", "RealMateSelectionConfiguration"], [247, 0, 0, "-", "RealSelectionConfiguration"], [249, 0, 0, "-", "SampledSelectionConfigurationMixin"], [251, 0, 0, "-", "SelectionConfiguration"], [254, 0, 0, "-", "SimpleMateSelectionConfiguration"], [256, 0, 0, "-", "SimpleSelectionConfiguration"], [258, 0, 0, "-", "SubsetMateSelectionConfiguration"], [260, 0, 0, "-", "SubsetSelectionConfiguration"]], "pybrops.breed.prot.sel.cfg.BinaryMateSelectionConfiguration": [[235, 1, 1, "", "BinaryMateSelectionConfiguration"]], "pybrops.breed.prot.sel.cfg.BinaryMateSelectionConfiguration.BinaryMateSelectionConfiguration": [[235, 3, 1, "", "ncross"], [235, 3, 1, "", "nmating"], [235, 3, 1, "", "nparent"], [235, 3, 1, "", "nprogeny"], [235, 3, 1, "", "pgmat"], [235, 3, 1, "", "rng"], [235, 4, 1, "", "sample_xconfig"], [235, 3, 1, "", "xconfig"], [235, 3, 1, "", "xconfig_decn"], [235, 3, 1, "", "xconfig_xmap"]], "pybrops.breed.prot.sel.cfg.BinarySelectionConfiguration": [[237, 1, 1, "", "BinarySelectionConfiguration"]], "pybrops.breed.prot.sel.cfg.BinarySelectionConfiguration.BinarySelectionConfiguration": [[237, 3, 1, "", "ncross"], [237, 3, 1, "", "nmating"], [237, 3, 1, "", "nparent"], [237, 3, 1, "", "nprogeny"], [237, 3, 1, "", "pgmat"], [237, 3, 1, "", "rng"], [237, 4, 1, "", "sample_xconfig"], [237, 3, 1, "", "xconfig"], [237, 3, 1, "", "xconfig_decn"]], "pybrops.breed.prot.sel.cfg.IntegerMateSelectionConfiguration": [[239, 1, 1, "", "IntegerMateSelectionConfiguration"]], "pybrops.breed.prot.sel.cfg.IntegerMateSelectionConfiguration.IntegerMateSelectionConfiguration": [[239, 3, 1, "", "ncross"], [239, 3, 1, "", "nmating"], [239, 3, 1, "", "nparent"], [239, 3, 1, "", "nprogeny"], [239, 3, 1, "", "pgmat"], [239, 3, 1, "", "rng"], [239, 4, 1, "", "sample_xconfig"], [239, 3, 1, "", "xconfig"], [239, 3, 1, "", "xconfig_decn"], [239, 3, 1, "", "xconfig_xmap"]], "pybrops.breed.prot.sel.cfg.IntegerSelectionConfiguration": [[241, 1, 1, "", "IntegerSelectionConfiguration"]], "pybrops.breed.prot.sel.cfg.IntegerSelectionConfiguration.IntegerSelectionConfiguration": [[241, 3, 1, "", "ncross"], [241, 3, 1, "", "nmating"], [241, 3, 1, "", "nparent"], [241, 3, 1, "", "nprogeny"], [241, 3, 1, "", "pgmat"], [241, 3, 1, "", "rng"], [241, 4, 1, "", "sample_xconfig"], [241, 3, 1, "", "xconfig"], [241, 3, 1, "", "xconfig_decn"]], "pybrops.breed.prot.sel.cfg.MateSelectionConfiguration": [[243, 1, 1, "", "MateSelectionConfiguration"], [244, 2, 1, "", "check_is_MateSelectionConfiguration"]], "pybrops.breed.prot.sel.cfg.MateSelectionConfiguration.MateSelectionConfiguration": [[243, 3, 1, "", "ncross"], [243, 3, 1, "", "nmating"], [243, 3, 1, "", "nparent"], [243, 3, 1, "", "nprogeny"], [243, 3, 1, "", "pgmat"], [243, 3, 1, "", "xconfig"], [243, 3, 1, "", "xconfig_xmap"]], "pybrops.breed.prot.sel.cfg.RealMateSelectionConfiguration": [[246, 1, 1, "", "RealMateSelectionConfiguration"]], "pybrops.breed.prot.sel.cfg.RealMateSelectionConfiguration.RealMateSelectionConfiguration": [[246, 3, 1, "", "ncross"], [246, 3, 1, "", "nmating"], [246, 3, 1, "", "nparent"], [246, 3, 1, "", "nprogeny"], [246, 3, 1, "", "pgmat"], [246, 3, 1, "", "rng"], [246, 4, 1, "", "sample_xconfig"], [246, 3, 1, "", "xconfig"], [246, 3, 1, "", "xconfig_decn"], [246, 3, 1, "", "xconfig_xmap"]], "pybrops.breed.prot.sel.cfg.RealSelectionConfiguration": [[248, 1, 1, "", "RealSelectionConfiguration"]], "pybrops.breed.prot.sel.cfg.RealSelectionConfiguration.RealSelectionConfiguration": [[248, 3, 1, "", "ncross"], [248, 3, 1, "", "nmating"], [248, 3, 1, "", "nparent"], [248, 3, 1, "", "nprogeny"], [248, 3, 1, "", "pgmat"], [248, 3, 1, "", "rng"], [248, 4, 1, "", "sample_xconfig"], [248, 3, 1, "", "xconfig"], [248, 3, 1, "", "xconfig_decn"]], "pybrops.breed.prot.sel.cfg.SampledSelectionConfigurationMixin": [[250, 1, 1, "", "SampledSelectionConfigurationMixin"]], "pybrops.breed.prot.sel.cfg.SampledSelectionConfigurationMixin.SampledSelectionConfigurationMixin": [[250, 3, 1, "", "rng"], [250, 4, 1, "", "sample_xconfig"], [250, 3, 1, "", "xconfig_decn"]], "pybrops.breed.prot.sel.cfg.SelectionConfiguration": [[252, 1, 1, "", "SelectionConfiguration"], [253, 2, 1, "", "check_is_SelectionConfiguration"]], "pybrops.breed.prot.sel.cfg.SelectionConfiguration.SelectionConfiguration": [[252, 3, 1, "", "ncross"], [252, 3, 1, "", "nmating"], [252, 3, 1, "", "nparent"], [252, 3, 1, "", "nprogeny"], [252, 3, 1, "", "pgmat"], [252, 3, 1, "", "xconfig"]], "pybrops.breed.prot.sel.cfg.SimpleMateSelectionConfiguration": [[255, 1, 1, "", "SimpleMateSelectionConfiguration"]], "pybrops.breed.prot.sel.cfg.SimpleMateSelectionConfiguration.SimpleMateSelectionConfiguration": [[255, 3, 1, "", "ncross"], [255, 3, 1, "", "nmating"], [255, 3, 1, "", "nparent"], [255, 3, 1, "", "nprogeny"], [255, 3, 1, "", "pgmat"], [255, 3, 1, "", "xconfig"], [255, 3, 1, "", "xconfig_xmap"]], "pybrops.breed.prot.sel.cfg.SimpleSelectionConfiguration": [[257, 1, 1, "", "SimpleSelectionConfiguration"]], "pybrops.breed.prot.sel.cfg.SimpleSelectionConfiguration.SimpleSelectionConfiguration": [[257, 3, 1, "", "ncross"], [257, 3, 1, "", "nmating"], [257, 3, 1, "", "nparent"], [257, 3, 1, "", "nprogeny"], [257, 3, 1, "", "pgmat"], [257, 3, 1, "", "xconfig"]], "pybrops.breed.prot.sel.cfg.SubsetMateSelectionConfiguration": [[259, 1, 1, "", "SubsetMateSelectionConfiguration"]], "pybrops.breed.prot.sel.cfg.SubsetMateSelectionConfiguration.SubsetMateSelectionConfiguration": [[259, 3, 1, "", "ncross"], [259, 3, 1, "", "nmating"], [259, 3, 1, "", "nparent"], [259, 3, 1, "", "nprogeny"], [259, 3, 1, "", "pgmat"], [259, 3, 1, "", "rng"], [259, 4, 1, "", "sample_xconfig"], [259, 3, 1, "", "xconfig"], [259, 3, 1, "", "xconfig_decn"], [259, 3, 1, "", "xconfig_xmap"]], "pybrops.breed.prot.sel.cfg.SubsetSelectionConfiguration": [[261, 1, 1, "", "SubsetSelectionConfiguration"]], "pybrops.breed.prot.sel.cfg.SubsetSelectionConfiguration.SubsetSelectionConfiguration": [[261, 3, 1, "", "ncross"], [261, 3, 1, "", "nmating"], [261, 3, 1, "", "nparent"], [261, 3, 1, "", "nprogeny"], [261, 3, 1, "", "pgmat"], [261, 3, 1, "", "rng"], [261, 4, 1, "", "sample_xconfig"], [261, 3, 1, "", "xconfig"], [261, 3, 1, "", "xconfig_decn"]], "pybrops.breed.prot.sel.prob": [[263, 0, 0, "-", "BinaryMateSelectionProblem"], [265, 0, 0, "-", "BinarySelectionProblem"], [268, 0, 0, "-", "EstimatedBreedingValueSelectionProblem"], [274, 0, 0, "-", "ExpectedMaximumBreedingValueSelectionProblem"], [280, 0, 0, "-", "FamilyEstimatedBreedingValueSelectionProblem"], [286, 0, 0, "-", "GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem"], [292, 0, 0, "-", "GenomicEstimatedBreedingValueSelectionProblem"], [298, 0, 0, "-", "GenotypeBuilderSelectionProblem"], [301, 0, 0, "-", "IntegerMateSelectionProblem"], [303, 0, 0, "-", "IntegerSelectionProblem"], [306, 0, 0, "-", "L1NormGenomicSelectionProblem"], [312, 0, 0, "-", "L2NormGenomicSelectionProblem"], [318, 0, 0, "-", "MateSelectionProblem"], [320, 0, 0, "-", "MeanExpectedHeterozygositySelectionProblem"], [326, 0, 0, "-", "MeanGenomicRelationshipSelectionProblem"], [332, 0, 0, "-", "MultiObjectiveGenomicMatingProblem"], [335, 0, 0, "-", "MultiObjectiveGenomicSelectionProblem"], [338, 0, 0, "-", "OptimalContributionSelectionProblem"], [344, 0, 0, "-", "OptimalHaploidValueSelectionProblem"], [350, 0, 0, "-", "OptimalPopulationValueSelectionProblem"], [353, 0, 0, "-", "RandomSelectionProblem"], [359, 0, 0, "-", "RealLookAheadGeneralizedWeightedGenomicSelectionProblem"], [361, 0, 0, "-", "RealMateSelectionProblem"], [363, 0, 0, "-", "RealSelectionProblem"], [366, 0, 0, "-", "SelectionProblem"], [369, 0, 0, "-", "SubsetMateSelectionProblem"], [371, 0, 0, "-", "SubsetSelectionProblem"], [374, 0, 0, "-", "UsefulnessCriterionSelectionProblem"], [380, 0, 0, "-", "WeightedGenomicSelectionProblem"], [385, 0, 0, "-", "trans"]], "pybrops.breed.prot.sel.prob.BinaryMateSelectionProblem": [[264, 1, 1, "", "BinaryMateSelectionProblem"]], "pybrops.breed.prot.sel.prob.BinaryMateSelectionProblem.BinaryMateSelectionProblem": [[264, 3, 1, "", "callback"], [264, 3, 1, "", "data"], [264, 3, 1, "", "decn_space"], [264, 3, 1, "", "decn_space_lower"], [264, 3, 1, "", "decn_space_upper"], [264, 3, 1, "", "decn_space_xmap"], [264, 3, 1, "", "elementwise"], [264, 3, 1, "", "elementwise_func"], [264, 3, 1, "", "elementwise_runner"], [264, 3, 1, "", "eqcv_trans"], [264, 3, 1, "", "eqcv_trans_kwargs"], [264, 3, 1, "", "eqcv_wt"], [264, 4, 1, "", "evalfn"], [264, 3, 1, "", "exclude_from_serialization"], [264, 3, 1, "", "ineqcv_trans"], [264, 3, 1, "", "ineqcv_trans_kwargs"], [264, 3, 1, "", "ineqcv_wt"], [264, 4, 1, "", "latentfn"], [264, 3, 1, "", "n_eq_constr"], [264, 3, 1, "", "n_ieq_constr"], [264, 3, 1, "", "n_obj"], [264, 3, 1, "", "n_var"], [264, 3, 1, "", "ndecn"], [264, 3, 1, "", "neqcv"], [264, 3, 1, "", "nineqcv"], [264, 3, 1, "", "nlatent"], [264, 3, 1, "", "nobj"], [264, 3, 1, "", "obj_trans"], [264, 3, 1, "", "obj_trans_kwargs"], [264, 3, 1, "", "obj_wt"], [264, 3, 1, "", "replace_nan_values_by"], [264, 3, 1, "", "strict"], [264, 3, 1, "", "vars"], [264, 3, 1, "", "vtype"], [264, 3, 1, "", "xl"], [264, 3, 1, "", "xu"]], "pybrops.breed.prot.sel.prob.BinarySelectionProblem": [[266, 1, 1, "", "BinarySelectionProblem"], [267, 2, 1, "", "check_is_BinarySelectionProblem"]], "pybrops.breed.prot.sel.prob.BinarySelectionProblem.BinarySelectionProblem": [[266, 3, 1, "", "callback"], [266, 3, 1, "", "data"], [266, 3, 1, "", "decn_space"], [266, 3, 1, "", "decn_space_lower"], [266, 3, 1, "", "decn_space_upper"], [266, 3, 1, "", "elementwise"], [266, 3, 1, "", "elementwise_func"], [266, 3, 1, "", "elementwise_runner"], [266, 3, 1, "", "eqcv_trans"], [266, 3, 1, "", "eqcv_trans_kwargs"], [266, 3, 1, "", "eqcv_wt"], [266, 4, 1, "", "evalfn"], [266, 3, 1, "", "exclude_from_serialization"], [266, 3, 1, "", "ineqcv_trans"], [266, 3, 1, "", "ineqcv_trans_kwargs"], [266, 3, 1, "", "ineqcv_wt"], [266, 4, 1, "", "latentfn"], [266, 3, 1, "", "n_eq_constr"], [266, 3, 1, "", "n_ieq_constr"], [266, 3, 1, "", "n_obj"], [266, 3, 1, "", "n_var"], [266, 3, 1, "", "ndecn"], [266, 3, 1, "", "neqcv"], [266, 3, 1, "", "nineqcv"], [266, 3, 1, "", "nlatent"], [266, 3, 1, "", "nobj"], [266, 3, 1, "", "obj_trans"], [266, 3, 1, "", "obj_trans_kwargs"], [266, 3, 1, "", "obj_wt"], [266, 3, 1, "", "replace_nan_values_by"], [266, 3, 1, "", "strict"], [266, 3, 1, "", "vars"], [266, 3, 1, "", "vtype"], [266, 3, 1, "", "xl"], [266, 3, 1, "", "xu"]], "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem": [[269, 1, 1, "", "EstimatedBreedingValueBinarySelectionProblem"], [270, 1, 1, "", "EstimatedBreedingValueIntegerSelectionProblem"], [271, 1, 1, "", "EstimatedBreedingValueRealSelectionProblem"], [272, 1, 1, "", "EstimatedBreedingValueSelectionProblemMixin"], [273, 1, 1, "", "EstimatedBreedingValueSubsetSelectionProblem"]], "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueBinarySelectionProblem": [[269, 3, 1, "", "callback"], [269, 3, 1, "", "data"], [269, 3, 1, "", "decn_space"], [269, 3, 1, "", "decn_space_lower"], [269, 3, 1, "", "decn_space_upper"], [269, 3, 1, "", "ebv"], [269, 3, 1, "", "elementwise"], [269, 3, 1, "", "elementwise_func"], [269, 3, 1, "", "elementwise_runner"], [269, 3, 1, "", "eqcv_trans"], [269, 3, 1, "", "eqcv_trans_kwargs"], [269, 3, 1, "", "eqcv_wt"], [269, 4, 1, "", "evalfn"], [269, 3, 1, "", "exclude_from_serialization"], [269, 3, 1, "", "ineqcv_trans"], [269, 3, 1, "", "ineqcv_trans_kwargs"], [269, 3, 1, "", "ineqcv_wt"], [269, 4, 1, "", "latentfn"], [269, 3, 1, "", "n_eq_constr"], [269, 3, 1, "", "n_ieq_constr"], [269, 3, 1, "", "n_obj"], [269, 3, 1, "", "n_var"], [269, 3, 1, "", "ndecn"], [269, 3, 1, "", "neqcv"], [269, 3, 1, "", "nineqcv"], [269, 3, 1, "", "nlatent"], [269, 3, 1, "", "nobj"], [269, 3, 1, "", "obj_trans"], [269, 3, 1, "", "obj_trans_kwargs"], [269, 3, 1, "", "obj_wt"], [269, 3, 1, "", "replace_nan_values_by"], [269, 3, 1, "", "strict"], [269, 3, 1, "", "vars"], [269, 3, 1, "", "vtype"], [269, 3, 1, "", "xl"], [269, 3, 1, "", "xu"]], "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueIntegerSelectionProblem": [[270, 3, 1, "", "callback"], [270, 3, 1, "", "data"], [270, 3, 1, "", "decn_space"], [270, 3, 1, "", "decn_space_lower"], [270, 3, 1, "", "decn_space_upper"], [270, 3, 1, "", "ebv"], [270, 3, 1, "", "elementwise"], [270, 3, 1, "", "elementwise_func"], [270, 3, 1, "", "elementwise_runner"], [270, 3, 1, "", "eqcv_trans"], [270, 3, 1, "", "eqcv_trans_kwargs"], [270, 3, 1, "", "eqcv_wt"], [270, 4, 1, "", "evalfn"], [270, 3, 1, "", "exclude_from_serialization"], [270, 3, 1, "", "ineqcv_trans"], [270, 3, 1, "", "ineqcv_trans_kwargs"], [270, 3, 1, "", "ineqcv_wt"], [270, 4, 1, "", "latentfn"], [270, 3, 1, "", "n_eq_constr"], [270, 3, 1, "", "n_ieq_constr"], [270, 3, 1, "", "n_obj"], [270, 3, 1, "", "n_var"], [270, 3, 1, "", "ndecn"], [270, 3, 1, "", "neqcv"], [270, 3, 1, "", "nineqcv"], [270, 3, 1, "", "nlatent"], [270, 3, 1, "", "nobj"], [270, 3, 1, "", "obj_trans"], [270, 3, 1, "", "obj_trans_kwargs"], [270, 3, 1, "", "obj_wt"], [270, 3, 1, "", "replace_nan_values_by"], [270, 3, 1, "", "strict"], [270, 3, 1, "", "vars"], [270, 3, 1, "", "vtype"], [270, 3, 1, "", "xl"], [270, 3, 1, "", "xu"]], "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueRealSelectionProblem": [[271, 3, 1, "", "callback"], [271, 3, 1, "", "data"], [271, 3, 1, "", "decn_space"], [271, 3, 1, "", "decn_space_lower"], [271, 3, 1, "", "decn_space_upper"], [271, 3, 1, "", "ebv"], [271, 3, 1, "", "elementwise"], [271, 3, 1, "", "elementwise_func"], [271, 3, 1, "", "elementwise_runner"], [271, 3, 1, "", "eqcv_trans"], [271, 3, 1, "", "eqcv_trans_kwargs"], [271, 3, 1, "", "eqcv_wt"], [271, 4, 1, "", "evalfn"], [271, 3, 1, "", "exclude_from_serialization"], [271, 3, 1, "", "ineqcv_trans"], [271, 3, 1, "", "ineqcv_trans_kwargs"], [271, 3, 1, "", "ineqcv_wt"], [271, 4, 1, "", "latentfn"], [271, 3, 1, "", "n_eq_constr"], [271, 3, 1, "", "n_ieq_constr"], [271, 3, 1, "", "n_obj"], [271, 3, 1, "", "n_var"], [271, 3, 1, "", "ndecn"], [271, 3, 1, "", "neqcv"], [271, 3, 1, "", "nineqcv"], [271, 3, 1, "", "nlatent"], [271, 3, 1, "", "nobj"], [271, 3, 1, "", "obj_trans"], [271, 3, 1, "", "obj_trans_kwargs"], [271, 3, 1, "", "obj_wt"], [271, 3, 1, "", "replace_nan_values_by"], [271, 3, 1, "", "strict"], [271, 3, 1, "", "vars"], [271, 3, 1, "", "vtype"], [271, 3, 1, "", "xl"], [271, 3, 1, "", "xu"]], "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueSelectionProblemMixin": [[272, 3, 1, "", "ebv"], [272, 3, 1, "", "nlatent"]], "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueSubsetSelectionProblem": [[273, 3, 1, "", "callback"], [273, 3, 1, "", "data"], [273, 3, 1, "", "decn_space"], [273, 3, 1, "", "decn_space_lower"], [273, 3, 1, "", "decn_space_upper"], [273, 3, 1, "", "ebv"], [273, 3, 1, "", "elementwise"], [273, 3, 1, "", "elementwise_func"], [273, 3, 1, "", "elementwise_runner"], [273, 3, 1, "", "eqcv_trans"], [273, 3, 1, "", "eqcv_trans_kwargs"], [273, 3, 1, "", "eqcv_wt"], [273, 4, 1, "", "evalfn"], [273, 3, 1, "", "exclude_from_serialization"], [273, 3, 1, "", "ineqcv_trans"], [273, 3, 1, "", "ineqcv_trans_kwargs"], [273, 3, 1, "", "ineqcv_wt"], [273, 4, 1, "", "latentfn"], [273, 3, 1, "", "n_eq_constr"], [273, 3, 1, "", "n_ieq_constr"], [273, 3, 1, "", "n_obj"], [273, 3, 1, "", "n_var"], [273, 3, 1, "", "ndecn"], [273, 3, 1, "", "neqcv"], [273, 3, 1, "", "nineqcv"], [273, 3, 1, "", "nlatent"], [273, 3, 1, "", "nobj"], [273, 3, 1, "", "obj_trans"], [273, 3, 1, "", "obj_trans_kwargs"], [273, 3, 1, "", "obj_wt"], [273, 3, 1, "", "replace_nan_values_by"], [273, 3, 1, "", "strict"], [273, 3, 1, "", "vars"], [273, 3, 1, "", "vtype"], [273, 3, 1, "", "xl"], [273, 3, 1, "", "xu"]], "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem": [[275, 1, 1, "", "ExpectedMaximumBreedingValueBinarySelectionProblem"], [276, 1, 1, "", "ExpectedMaximumBreedingValueIntegerSelectionProblem"], [277, 1, 1, "", "ExpectedMaximumBreedingValueRealSelectionProblem"], [278, 1, 1, "", "ExpectedMaximumBreedingValueSelectionProblemMixin"], [279, 1, 1, "", "ExpectedMaximumBreedingValueSubsetSelectionProblem"]], "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueBinarySelectionProblem": [[275, 3, 1, "", "callback"], [275, 3, 1, "", "data"], [275, 3, 1, "", "decn_space"], [275, 3, 1, "", "decn_space_lower"], [275, 3, 1, "", "decn_space_upper"], [275, 3, 1, "", "elementwise"], [275, 3, 1, "", "elementwise_func"], [275, 3, 1, "", "elementwise_runner"], [275, 3, 1, "", "embv"], [275, 3, 1, "", "eqcv_trans"], [275, 3, 1, "", "eqcv_trans_kwargs"], [275, 3, 1, "", "eqcv_wt"], [275, 4, 1, "", "evalfn"], [275, 3, 1, "", "exclude_from_serialization"], [275, 3, 1, "", "ineqcv_trans"], [275, 3, 1, "", "ineqcv_trans_kwargs"], [275, 3, 1, "", "ineqcv_wt"], [275, 4, 1, "", "latentfn"], [275, 3, 1, "", "n_eq_constr"], [275, 3, 1, "", "n_ieq_constr"], [275, 3, 1, "", "n_obj"], [275, 3, 1, "", "n_var"], [275, 3, 1, "", "ndecn"], [275, 3, 1, "", "neqcv"], [275, 3, 1, "", "nineqcv"], [275, 3, 1, "", "nlatent"], [275, 3, 1, "", "nobj"], [275, 3, 1, "", "obj_trans"], [275, 3, 1, "", "obj_trans_kwargs"], [275, 3, 1, "", "obj_wt"], [275, 3, 1, "", "replace_nan_values_by"], [275, 3, 1, "", "strict"], [275, 3, 1, "", "vars"], [275, 3, 1, "", "vtype"], [275, 3, 1, "", "xl"], [275, 3, 1, "", "xu"]], "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueIntegerSelectionProblem": [[276, 3, 1, "", "callback"], [276, 3, 1, "", "data"], [276, 3, 1, "", "decn_space"], [276, 3, 1, "", "decn_space_lower"], [276, 3, 1, "", "decn_space_upper"], [276, 3, 1, "", "elementwise"], [276, 3, 1, "", "elementwise_func"], [276, 3, 1, "", "elementwise_runner"], [276, 3, 1, "", "embv"], [276, 3, 1, "", "eqcv_trans"], [276, 3, 1, "", "eqcv_trans_kwargs"], [276, 3, 1, "", "eqcv_wt"], [276, 4, 1, "", "evalfn"], [276, 3, 1, "", "exclude_from_serialization"], [276, 3, 1, "", "ineqcv_trans"], [276, 3, 1, "", "ineqcv_trans_kwargs"], [276, 3, 1, "", "ineqcv_wt"], [276, 4, 1, "", "latentfn"], [276, 3, 1, "", "n_eq_constr"], [276, 3, 1, "", "n_ieq_constr"], [276, 3, 1, "", "n_obj"], [276, 3, 1, "", "n_var"], [276, 3, 1, "", "ndecn"], [276, 3, 1, "", "neqcv"], [276, 3, 1, "", "nineqcv"], [276, 3, 1, "", "nlatent"], [276, 3, 1, "", "nobj"], [276, 3, 1, "", "obj_trans"], [276, 3, 1, "", "obj_trans_kwargs"], [276, 3, 1, "", "obj_wt"], [276, 3, 1, "", "replace_nan_values_by"], [276, 3, 1, "", "strict"], [276, 3, 1, "", "vars"], [276, 3, 1, "", "vtype"], [276, 3, 1, "", "xl"], [276, 3, 1, "", "xu"]], "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueRealSelectionProblem": [[277, 3, 1, "", "callback"], [277, 3, 1, "", "data"], [277, 3, 1, "", "decn_space"], [277, 3, 1, "", "decn_space_lower"], [277, 3, 1, "", "decn_space_upper"], [277, 3, 1, "", "elementwise"], [277, 3, 1, "", "elementwise_func"], [277, 3, 1, "", "elementwise_runner"], [277, 3, 1, "", "embv"], [277, 3, 1, "", "eqcv_trans"], [277, 3, 1, "", "eqcv_trans_kwargs"], [277, 3, 1, "", "eqcv_wt"], [277, 4, 1, "", "evalfn"], [277, 3, 1, "", "exclude_from_serialization"], [277, 3, 1, "", "ineqcv_trans"], [277, 3, 1, "", "ineqcv_trans_kwargs"], [277, 3, 1, "", "ineqcv_wt"], [277, 4, 1, "", "latentfn"], [277, 3, 1, "", "n_eq_constr"], [277, 3, 1, "", "n_ieq_constr"], [277, 3, 1, "", "n_obj"], [277, 3, 1, "", "n_var"], [277, 3, 1, "", "ndecn"], [277, 3, 1, "", "neqcv"], [277, 3, 1, "", "nineqcv"], [277, 3, 1, "", "nlatent"], [277, 3, 1, "", "nobj"], [277, 3, 1, "", "obj_trans"], [277, 3, 1, "", "obj_trans_kwargs"], [277, 3, 1, "", "obj_wt"], [277, 3, 1, "", "replace_nan_values_by"], [277, 3, 1, "", "strict"], [277, 3, 1, "", "vars"], [277, 3, 1, "", "vtype"], [277, 3, 1, "", "xl"], [277, 3, 1, "", "xu"]], "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueSelectionProblemMixin": [[278, 3, 1, "", "embv"], [278, 3, 1, "", "nlatent"]], "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueSubsetSelectionProblem": [[279, 3, 1, "", "callback"], [279, 3, 1, "", "data"], [279, 3, 1, "", "decn_space"], [279, 3, 1, "", "decn_space_lower"], [279, 3, 1, "", "decn_space_upper"], [279, 3, 1, "", "elementwise"], [279, 3, 1, "", "elementwise_func"], [279, 3, 1, "", "elementwise_runner"], [279, 3, 1, "", "embv"], [279, 3, 1, "", "eqcv_trans"], [279, 3, 1, "", "eqcv_trans_kwargs"], [279, 3, 1, "", "eqcv_wt"], [279, 4, 1, "", "evalfn"], [279, 3, 1, "", "exclude_from_serialization"], [279, 3, 1, "", "ineqcv_trans"], [279, 3, 1, "", "ineqcv_trans_kwargs"], [279, 3, 1, "", "ineqcv_wt"], [279, 4, 1, "", "latentfn"], [279, 3, 1, "", "n_eq_constr"], [279, 3, 1, "", "n_ieq_constr"], [279, 3, 1, "", "n_obj"], [279, 3, 1, "", "n_var"], [279, 3, 1, "", "ndecn"], [279, 3, 1, "", "neqcv"], [279, 3, 1, "", "nineqcv"], [279, 3, 1, "", "nlatent"], [279, 3, 1, "", "nobj"], [279, 3, 1, "", "obj_trans"], [279, 3, 1, "", "obj_trans_kwargs"], [279, 3, 1, "", "obj_wt"], [279, 3, 1, "", "replace_nan_values_by"], [279, 3, 1, "", "strict"], [279, 3, 1, "", "vars"], [279, 3, 1, "", "vtype"], [279, 3, 1, "", "xl"], [279, 3, 1, "", "xu"]], "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem": [[281, 1, 1, "", "FamilyEstimatedBreedingValueBinarySelectionProblem"], [282, 1, 1, "", "FamilyEstimatedBreedingValueIntegerSelectionProblem"], [283, 1, 1, "", "FamilyEstimatedBreedingValueRealSelectionProblem"], [284, 1, 1, "", "FamilyEstimatedBreedingValueSelectionProblemMixin"], [285, 1, 1, "", "FamilyEstimatedBreedingValueSubsetSelectionProblem"]], "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueBinarySelectionProblem": [[281, 3, 1, "", "callback"], [281, 3, 1, "", "data"], [281, 3, 1, "", "decn_space"], [281, 3, 1, "", "decn_space_lower"], [281, 3, 1, "", "decn_space_upper"], [281, 3, 1, "", "ebv"], [281, 3, 1, "", "elementwise"], [281, 3, 1, "", "elementwise_func"], [281, 3, 1, "", "elementwise_runner"], [281, 3, 1, "", "eqcv_trans"], [281, 3, 1, "", "eqcv_trans_kwargs"], [281, 3, 1, "", "eqcv_wt"], [281, 4, 1, "", "evalfn"], [281, 3, 1, "", "exclude_from_serialization"], [281, 3, 1, "", "family"], [281, 3, 1, "", "familyid"], [281, 3, 1, "", "familyix"], [281, 3, 1, "", "ineqcv_trans"], [281, 3, 1, "", "ineqcv_trans_kwargs"], [281, 3, 1, "", "ineqcv_wt"], [281, 4, 1, "", "latentfn"], [281, 3, 1, "", "n_eq_constr"], [281, 3, 1, "", "n_ieq_constr"], [281, 3, 1, "", "n_obj"], [281, 3, 1, "", "n_var"], [281, 3, 1, "", "ndecn"], [281, 3, 1, "", "neqcv"], [281, 3, 1, "", "nineqcv"], [281, 3, 1, "", "nlatent"], [281, 3, 1, "", "nobj"], [281, 3, 1, "", "obj_trans"], [281, 3, 1, "", "obj_trans_kwargs"], [281, 3, 1, "", "obj_wt"], [281, 3, 1, "", "replace_nan_values_by"], [281, 3, 1, "", "strict"], [281, 3, 1, "", "vars"], [281, 3, 1, "", "vtype"], [281, 3, 1, "", "xl"], [281, 3, 1, "", "xu"]], "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueIntegerSelectionProblem": [[282, 3, 1, "", "callback"], [282, 3, 1, "", "data"], [282, 3, 1, "", "decn_space"], [282, 3, 1, "", "decn_space_lower"], [282, 3, 1, "", "decn_space_upper"], [282, 3, 1, "", "ebv"], [282, 3, 1, "", "elementwise"], [282, 3, 1, "", "elementwise_func"], [282, 3, 1, "", "elementwise_runner"], [282, 3, 1, "", "eqcv_trans"], [282, 3, 1, "", "eqcv_trans_kwargs"], [282, 3, 1, "", "eqcv_wt"], [282, 4, 1, "", "evalfn"], [282, 3, 1, "", "exclude_from_serialization"], [282, 3, 1, "", "family"], [282, 3, 1, "", "familyid"], [282, 3, 1, "", "familyix"], [282, 3, 1, "", "ineqcv_trans"], [282, 3, 1, "", "ineqcv_trans_kwargs"], [282, 3, 1, "", "ineqcv_wt"], [282, 4, 1, "", "latentfn"], [282, 3, 1, "", "n_eq_constr"], [282, 3, 1, "", "n_ieq_constr"], [282, 3, 1, "", "n_obj"], [282, 3, 1, "", "n_var"], [282, 3, 1, "", "ndecn"], [282, 3, 1, "", "neqcv"], [282, 3, 1, "", "nineqcv"], [282, 3, 1, "", "nlatent"], [282, 3, 1, "", "nobj"], [282, 3, 1, "", "obj_trans"], [282, 3, 1, "", "obj_trans_kwargs"], [282, 3, 1, "", "obj_wt"], [282, 3, 1, "", "replace_nan_values_by"], [282, 3, 1, "", "strict"], [282, 3, 1, "", "vars"], [282, 3, 1, "", "vtype"], [282, 3, 1, "", "xl"], [282, 3, 1, "", "xu"]], "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueRealSelectionProblem": [[283, 3, 1, "", "callback"], [283, 3, 1, "", "data"], [283, 3, 1, "", "decn_space"], [283, 3, 1, "", "decn_space_lower"], [283, 3, 1, "", "decn_space_upper"], [283, 3, 1, "", "ebv"], [283, 3, 1, "", "elementwise"], [283, 3, 1, "", "elementwise_func"], [283, 3, 1, "", "elementwise_runner"], [283, 3, 1, "", "eqcv_trans"], [283, 3, 1, "", "eqcv_trans_kwargs"], [283, 3, 1, "", "eqcv_wt"], [283, 4, 1, "", "evalfn"], [283, 3, 1, "", "exclude_from_serialization"], [283, 3, 1, "", "family"], [283, 3, 1, "", "familyid"], [283, 3, 1, "", "familyix"], [283, 3, 1, "", "ineqcv_trans"], [283, 3, 1, "", "ineqcv_trans_kwargs"], [283, 3, 1, "", "ineqcv_wt"], [283, 4, 1, "", "latentfn"], [283, 3, 1, "", "n_eq_constr"], [283, 3, 1, "", "n_ieq_constr"], [283, 3, 1, "", "n_obj"], [283, 3, 1, "", "n_var"], [283, 3, 1, "", "ndecn"], [283, 3, 1, "", "neqcv"], [283, 3, 1, "", "nineqcv"], [283, 3, 1, "", "nlatent"], [283, 3, 1, "", "nobj"], [283, 3, 1, "", "obj_trans"], [283, 3, 1, "", "obj_trans_kwargs"], [283, 3, 1, "", "obj_wt"], [283, 3, 1, "", "replace_nan_values_by"], [283, 3, 1, "", "strict"], [283, 3, 1, "", "vars"], [283, 3, 1, "", "vtype"], [283, 3, 1, "", "xl"], [283, 3, 1, "", "xu"]], "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueSelectionProblemMixin": [[284, 3, 1, "", "ebv"], [284, 3, 1, "", "family"], [284, 3, 1, "", "familyid"], [284, 3, 1, "", "familyix"], [284, 3, 1, "", "nlatent"]], "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueSubsetSelectionProblem": [[285, 3, 1, "", "callback"], [285, 3, 1, "", "data"], [285, 3, 1, "", "decn_space"], [285, 3, 1, "", "decn_space_lower"], [285, 3, 1, "", "decn_space_upper"], [285, 3, 1, "", "ebv"], [285, 3, 1, "", "elementwise"], [285, 3, 1, "", "elementwise_func"], [285, 3, 1, "", "elementwise_runner"], [285, 3, 1, "", "eqcv_trans"], [285, 3, 1, "", "eqcv_trans_kwargs"], [285, 3, 1, "", "eqcv_wt"], [285, 4, 1, "", "evalfn"], [285, 3, 1, "", "exclude_from_serialization"], [285, 3, 1, "", "family"], [285, 3, 1, "", "familyid"], [285, 3, 1, "", "familyix"], [285, 3, 1, "", "ineqcv_trans"], [285, 3, 1, "", "ineqcv_trans_kwargs"], [285, 3, 1, "", "ineqcv_wt"], [285, 4, 1, "", "latentfn"], [285, 3, 1, "", "n_eq_constr"], [285, 3, 1, "", "n_ieq_constr"], [285, 3, 1, "", "n_obj"], [285, 3, 1, "", "n_var"], [285, 3, 1, "", "ndecn"], [285, 3, 1, "", "neqcv"], [285, 3, 1, "", "nineqcv"], [285, 3, 1, "", "nlatent"], [285, 3, 1, "", "nobj"], [285, 3, 1, "", "obj_trans"], [285, 3, 1, "", "obj_trans_kwargs"], [285, 3, 1, "", "obj_wt"], [285, 3, 1, "", "replace_nan_values_by"], [285, 3, 1, "", "strict"], [285, 3, 1, "", "vars"], [285, 3, 1, "", "vtype"], [285, 3, 1, "", "xl"], [285, 3, 1, "", "xu"]], "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem": [[287, 1, 1, "", "GeneralizedWeightedGenomicEstimatedBreedingValueBinarySelectionProblem"], [288, 1, 1, "", "GeneralizedWeightedGenomicEstimatedBreedingValueIntegerSelectionProblem"], [289, 1, 1, "", "GeneralizedWeightedGenomicEstimatedBreedingValueRealSelectionProblem"], [290, 1, 1, "", "GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblemMixin"], [291, 1, 1, "", "GeneralizedWeightedGenomicEstimatedBreedingValueSubsetSelectionProblem"]], "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueBinarySelectionProblem": [[287, 3, 1, "", "callback"], [287, 3, 1, "", "data"], [287, 3, 1, "", "decn_space"], [287, 3, 1, "", "decn_space_lower"], [287, 3, 1, "", "decn_space_upper"], [287, 3, 1, "", "elementwise"], [287, 3, 1, "", "elementwise_func"], [287, 3, 1, "", "elementwise_runner"], [287, 3, 1, "", "eqcv_trans"], [287, 3, 1, "", "eqcv_trans_kwargs"], [287, 3, 1, "", "eqcv_wt"], [287, 4, 1, "", "evalfn"], [287, 3, 1, "", "exclude_from_serialization"], [287, 3, 1, "", "gwgebv"], [287, 3, 1, "", "ineqcv_trans"], [287, 3, 1, "", "ineqcv_trans_kwargs"], [287, 3, 1, "", "ineqcv_wt"], [287, 4, 1, "", "latentfn"], [287, 3, 1, "", "n_eq_constr"], [287, 3, 1, "", "n_ieq_constr"], [287, 3, 1, "", "n_obj"], [287, 3, 1, "", "n_var"], [287, 3, 1, "", "ndecn"], [287, 3, 1, "", "neqcv"], [287, 3, 1, "", "nineqcv"], [287, 3, 1, "", "nlatent"], [287, 3, 1, "", "nobj"], [287, 3, 1, "", "obj_trans"], [287, 3, 1, "", "obj_trans_kwargs"], [287, 3, 1, "", "obj_wt"], [287, 3, 1, "", "replace_nan_values_by"], [287, 3, 1, "", "strict"], [287, 3, 1, "", "vars"], [287, 3, 1, "", "vtype"], [287, 3, 1, "", "xl"], [287, 3, 1, "", "xu"]], "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueIntegerSelectionProblem": [[288, 3, 1, "", "callback"], [288, 3, 1, "", "data"], [288, 3, 1, "", "decn_space"], [288, 3, 1, "", "decn_space_lower"], [288, 3, 1, "", "decn_space_upper"], [288, 3, 1, "", "elementwise"], [288, 3, 1, "", "elementwise_func"], [288, 3, 1, "", "elementwise_runner"], [288, 3, 1, "", "eqcv_trans"], [288, 3, 1, "", "eqcv_trans_kwargs"], [288, 3, 1, "", "eqcv_wt"], [288, 4, 1, "", "evalfn"], [288, 3, 1, "", "exclude_from_serialization"], [288, 3, 1, "", "gwgebv"], [288, 3, 1, "", "ineqcv_trans"], [288, 3, 1, "", "ineqcv_trans_kwargs"], [288, 3, 1, "", "ineqcv_wt"], [288, 4, 1, "", "latentfn"], [288, 3, 1, "", "n_eq_constr"], [288, 3, 1, "", "n_ieq_constr"], [288, 3, 1, "", "n_obj"], [288, 3, 1, "", "n_var"], [288, 3, 1, "", "ndecn"], [288, 3, 1, "", "neqcv"], [288, 3, 1, "", "nineqcv"], [288, 3, 1, "", "nlatent"], [288, 3, 1, "", "nobj"], [288, 3, 1, "", "obj_trans"], [288, 3, 1, "", "obj_trans_kwargs"], [288, 3, 1, "", "obj_wt"], [288, 3, 1, "", "replace_nan_values_by"], [288, 3, 1, "", "strict"], [288, 3, 1, "", "vars"], [288, 3, 1, "", "vtype"], [288, 3, 1, "", "xl"], [288, 3, 1, "", "xu"]], "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueRealSelectionProblem": [[289, 3, 1, "", "callback"], [289, 3, 1, "", "data"], [289, 3, 1, "", "decn_space"], [289, 3, 1, "", "decn_space_lower"], [289, 3, 1, "", "decn_space_upper"], [289, 3, 1, "", "elementwise"], [289, 3, 1, "", "elementwise_func"], [289, 3, 1, "", "elementwise_runner"], [289, 3, 1, "", "eqcv_trans"], [289, 3, 1, "", "eqcv_trans_kwargs"], [289, 3, 1, "", "eqcv_wt"], [289, 4, 1, "", "evalfn"], [289, 3, 1, "", "exclude_from_serialization"], [289, 3, 1, "", "gwgebv"], [289, 3, 1, "", "ineqcv_trans"], [289, 3, 1, "", "ineqcv_trans_kwargs"], [289, 3, 1, "", "ineqcv_wt"], [289, 4, 1, "", "latentfn"], [289, 3, 1, "", "n_eq_constr"], [289, 3, 1, "", "n_ieq_constr"], [289, 3, 1, "", "n_obj"], [289, 3, 1, "", "n_var"], [289, 3, 1, "", "ndecn"], [289, 3, 1, "", "neqcv"], [289, 3, 1, "", "nineqcv"], [289, 3, 1, "", "nlatent"], [289, 3, 1, "", "nobj"], [289, 3, 1, "", "obj_trans"], [289, 3, 1, "", "obj_trans_kwargs"], [289, 3, 1, "", "obj_wt"], [289, 3, 1, "", "replace_nan_values_by"], [289, 3, 1, "", "strict"], [289, 3, 1, "", "vars"], [289, 3, 1, "", "vtype"], [289, 3, 1, "", "xl"], [289, 3, 1, "", "xu"]], "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblemMixin": [[290, 3, 1, "", "gwgebv"], [290, 3, 1, "", "nlatent"]], "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueSubsetSelectionProblem": [[291, 3, 1, "", "callback"], [291, 3, 1, "", "data"], [291, 3, 1, "", "decn_space"], [291, 3, 1, "", "decn_space_lower"], [291, 3, 1, "", "decn_space_upper"], [291, 3, 1, "", "elementwise"], [291, 3, 1, "", "elementwise_func"], [291, 3, 1, "", "elementwise_runner"], [291, 3, 1, "", "eqcv_trans"], [291, 3, 1, "", "eqcv_trans_kwargs"], [291, 3, 1, "", "eqcv_wt"], [291, 4, 1, "", "evalfn"], [291, 3, 1, "", "exclude_from_serialization"], [291, 3, 1, "", "gwgebv"], [291, 3, 1, "", "ineqcv_trans"], [291, 3, 1, "", "ineqcv_trans_kwargs"], [291, 3, 1, "", "ineqcv_wt"], [291, 4, 1, "", "latentfn"], [291, 3, 1, "", "n_eq_constr"], [291, 3, 1, "", "n_ieq_constr"], [291, 3, 1, "", "n_obj"], [291, 3, 1, "", "n_var"], [291, 3, 1, "", "ndecn"], [291, 3, 1, "", "neqcv"], [291, 3, 1, "", "nineqcv"], [291, 3, 1, "", "nlatent"], [291, 3, 1, "", "nobj"], [291, 3, 1, "", "obj_trans"], [291, 3, 1, "", "obj_trans_kwargs"], [291, 3, 1, "", "obj_wt"], [291, 3, 1, "", "replace_nan_values_by"], [291, 3, 1, "", "strict"], [291, 3, 1, "", "vars"], [291, 3, 1, "", "vtype"], [291, 3, 1, "", "xl"], [291, 3, 1, "", "xu"]], "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem": [[293, 1, 1, "", "GenomicEstimatedBreedingValueBinarySelectionProblem"], [294, 1, 1, "", "GenomicEstimatedBreedingValueIntegerSelectionProblem"], [295, 1, 1, "", "GenomicEstimatedBreedingValueRealSelectionProblem"], [296, 1, 1, "", "GenomicEstimatedBreedingValueSelectionProblemMixin"], [297, 1, 1, "", "GenomicEstimatedBreedingValueSubsetSelectionProblem"]], "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueBinarySelectionProblem": [[293, 3, 1, "", "callback"], [293, 3, 1, "", "data"], [293, 3, 1, "", "decn_space"], [293, 3, 1, "", "decn_space_lower"], [293, 3, 1, "", "decn_space_upper"], [293, 3, 1, "", "elementwise"], [293, 3, 1, "", "elementwise_func"], [293, 3, 1, "", "elementwise_runner"], [293, 3, 1, "", "eqcv_trans"], [293, 3, 1, "", "eqcv_trans_kwargs"], [293, 3, 1, "", "eqcv_wt"], [293, 4, 1, "", "evalfn"], [293, 3, 1, "", "exclude_from_serialization"], [293, 3, 1, "", "gebv"], [293, 3, 1, "", "ineqcv_trans"], [293, 3, 1, "", "ineqcv_trans_kwargs"], [293, 3, 1, "", "ineqcv_wt"], [293, 4, 1, "", "latentfn"], [293, 3, 1, "", "n_eq_constr"], [293, 3, 1, "", "n_ieq_constr"], [293, 3, 1, "", "n_obj"], [293, 3, 1, "", "n_var"], [293, 3, 1, "", "ndecn"], [293, 3, 1, "", "neqcv"], [293, 3, 1, "", "nineqcv"], [293, 3, 1, "", "nlatent"], [293, 3, 1, "", "nobj"], [293, 3, 1, "", "obj_trans"], [293, 3, 1, "", "obj_trans_kwargs"], [293, 3, 1, "", "obj_wt"], [293, 3, 1, "", "replace_nan_values_by"], [293, 3, 1, "", "strict"], [293, 3, 1, "", "vars"], [293, 3, 1, "", "vtype"], [293, 3, 1, "", "xl"], [293, 3, 1, "", "xu"]], "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueIntegerSelectionProblem": [[294, 3, 1, "", "callback"], [294, 3, 1, "", "data"], [294, 3, 1, "", "decn_space"], [294, 3, 1, "", "decn_space_lower"], [294, 3, 1, "", "decn_space_upper"], [294, 3, 1, "", "elementwise"], [294, 3, 1, "", "elementwise_func"], [294, 3, 1, "", "elementwise_runner"], [294, 3, 1, "", "eqcv_trans"], [294, 3, 1, "", "eqcv_trans_kwargs"], [294, 3, 1, "", "eqcv_wt"], [294, 4, 1, "", "evalfn"], [294, 3, 1, "", "exclude_from_serialization"], [294, 3, 1, "", "gebv"], [294, 3, 1, "", "ineqcv_trans"], [294, 3, 1, "", "ineqcv_trans_kwargs"], [294, 3, 1, "", "ineqcv_wt"], [294, 4, 1, "", "latentfn"], [294, 3, 1, "", "n_eq_constr"], [294, 3, 1, "", "n_ieq_constr"], [294, 3, 1, "", "n_obj"], [294, 3, 1, "", "n_var"], [294, 3, 1, "", "ndecn"], [294, 3, 1, "", "neqcv"], [294, 3, 1, "", "nineqcv"], [294, 3, 1, "", "nlatent"], [294, 3, 1, "", "nobj"], [294, 3, 1, "", "obj_trans"], [294, 3, 1, "", "obj_trans_kwargs"], [294, 3, 1, "", "obj_wt"], [294, 3, 1, "", "replace_nan_values_by"], [294, 3, 1, "", "strict"], [294, 3, 1, "", "vars"], [294, 3, 1, "", "vtype"], [294, 3, 1, "", "xl"], [294, 3, 1, "", "xu"]], "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueRealSelectionProblem": [[295, 3, 1, "", "callback"], [295, 3, 1, "", "data"], [295, 3, 1, "", "decn_space"], [295, 3, 1, "", "decn_space_lower"], [295, 3, 1, "", "decn_space_upper"], [295, 3, 1, "", "elementwise"], [295, 3, 1, "", "elementwise_func"], [295, 3, 1, "", "elementwise_runner"], [295, 3, 1, "", "eqcv_trans"], [295, 3, 1, "", "eqcv_trans_kwargs"], [295, 3, 1, "", "eqcv_wt"], [295, 4, 1, "", "evalfn"], [295, 3, 1, "", "exclude_from_serialization"], [295, 3, 1, "", "gebv"], [295, 3, 1, "", "ineqcv_trans"], [295, 3, 1, "", "ineqcv_trans_kwargs"], [295, 3, 1, "", "ineqcv_wt"], [295, 4, 1, "", "latentfn"], [295, 3, 1, "", "n_eq_constr"], [295, 3, 1, "", "n_ieq_constr"], [295, 3, 1, "", "n_obj"], [295, 3, 1, "", "n_var"], [295, 3, 1, "", "ndecn"], [295, 3, 1, "", "neqcv"], [295, 3, 1, "", "nineqcv"], [295, 3, 1, "", "nlatent"], [295, 3, 1, "", "nobj"], [295, 3, 1, "", "obj_trans"], [295, 3, 1, "", "obj_trans_kwargs"], [295, 3, 1, "", "obj_wt"], [295, 3, 1, "", "replace_nan_values_by"], [295, 3, 1, "", "strict"], [295, 3, 1, "", "vars"], [295, 3, 1, "", "vtype"], [295, 3, 1, "", "xl"], [295, 3, 1, "", "xu"]], "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueSelectionProblemMixin": [[296, 3, 1, "", "gebv"], [296, 3, 1, "", "nlatent"]], "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueSubsetSelectionProblem": [[297, 3, 1, "", "callback"], [297, 3, 1, "", "data"], [297, 3, 1, "", "decn_space"], [297, 3, 1, "", "decn_space_lower"], [297, 3, 1, "", "decn_space_upper"], [297, 3, 1, "", "elementwise"], [297, 3, 1, "", "elementwise_func"], [297, 3, 1, "", "elementwise_runner"], [297, 3, 1, "", "eqcv_trans"], [297, 3, 1, "", "eqcv_trans_kwargs"], [297, 3, 1, "", "eqcv_wt"], [297, 4, 1, "", "evalfn"], [297, 3, 1, "", "exclude_from_serialization"], [297, 3, 1, "", "gebv"], [297, 3, 1, "", "ineqcv_trans"], [297, 3, 1, "", "ineqcv_trans_kwargs"], [297, 3, 1, "", "ineqcv_wt"], [297, 4, 1, "", "latentfn"], [297, 3, 1, "", "n_eq_constr"], [297, 3, 1, "", "n_ieq_constr"], [297, 3, 1, "", "n_obj"], [297, 3, 1, "", "n_var"], [297, 3, 1, "", "ndecn"], [297, 3, 1, "", "neqcv"], [297, 3, 1, "", "nineqcv"], [297, 3, 1, "", "nlatent"], [297, 3, 1, "", "nobj"], [297, 3, 1, "", "obj_trans"], [297, 3, 1, "", "obj_trans_kwargs"], [297, 3, 1, "", "obj_wt"], [297, 3, 1, "", "replace_nan_values_by"], [297, 3, 1, "", "strict"], [297, 3, 1, "", "vars"], [297, 3, 1, "", "vtype"], [297, 3, 1, "", "xl"], [297, 3, 1, "", "xu"]], "pybrops.breed.prot.sel.prob.GenotypeBuilderSelectionProblem": [[299, 1, 1, "", "GenotypeBuilderSelectionProblemMixin"], [300, 1, 1, "", "GenotypeBuilderSubsetSelectionProblem"]], "pybrops.breed.prot.sel.prob.GenotypeBuilderSelectionProblem.GenotypeBuilderSelectionProblemMixin": [[299, 3, 1, "", "haplomat"], [299, 3, 1, "", "nbestfndr"], [299, 3, 1, "", "nlatent"], [299, 3, 1, "", "ploidy"]], "pybrops.breed.prot.sel.prob.GenotypeBuilderSelectionProblem.GenotypeBuilderSubsetSelectionProblem": [[300, 3, 1, "", "callback"], [300, 3, 1, "", "data"], [300, 3, 1, "", "decn_space"], [300, 3, 1, "", "decn_space_lower"], [300, 3, 1, "", "decn_space_upper"], [300, 3, 1, "", "elementwise"], [300, 3, 1, "", "elementwise_func"], [300, 3, 1, "", "elementwise_runner"], [300, 3, 1, "", "eqcv_trans"], [300, 3, 1, "", "eqcv_trans_kwargs"], [300, 3, 1, "", "eqcv_wt"], [300, 4, 1, "", "evalfn"], [300, 3, 1, "", "exclude_from_serialization"], [300, 3, 1, "", "haplomat"], [300, 3, 1, "", "ineqcv_trans"], [300, 3, 1, "", "ineqcv_trans_kwargs"], [300, 3, 1, "", "ineqcv_wt"], [300, 4, 1, "", "latentfn"], [300, 3, 1, "", "n_eq_constr"], [300, 3, 1, "", "n_ieq_constr"], [300, 3, 1, "", "n_obj"], [300, 3, 1, "", "n_var"], [300, 3, 1, "", "nbestfndr"], [300, 3, 1, "", "ndecn"], [300, 3, 1, "", "neqcv"], [300, 3, 1, "", "nineqcv"], [300, 3, 1, "", "nlatent"], [300, 3, 1, "", "nobj"], [300, 3, 1, "", "obj_trans"], [300, 3, 1, "", "obj_trans_kwargs"], [300, 3, 1, "", "obj_wt"], [300, 3, 1, "", "ploidy"], [300, 3, 1, "", "replace_nan_values_by"], [300, 3, 1, "", "strict"], [300, 3, 1, "", "vars"], [300, 3, 1, "", "vtype"], [300, 3, 1, "", "xl"], [300, 3, 1, "", "xu"]], "pybrops.breed.prot.sel.prob.IntegerMateSelectionProblem": [[302, 1, 1, "", "IntegerMateSelectionProblem"]], "pybrops.breed.prot.sel.prob.IntegerMateSelectionProblem.IntegerMateSelectionProblem": [[302, 3, 1, "", "callback"], [302, 3, 1, "", "data"], [302, 3, 1, "", "decn_space"], [302, 3, 1, "", "decn_space_lower"], [302, 3, 1, "", "decn_space_upper"], [302, 3, 1, "", "decn_space_xmap"], [302, 3, 1, "", "elementwise"], [302, 3, 1, "", "elementwise_func"], [302, 3, 1, "", "elementwise_runner"], [302, 3, 1, "", "eqcv_trans"], [302, 3, 1, "", "eqcv_trans_kwargs"], [302, 3, 1, "", "eqcv_wt"], [302, 4, 1, "", "evalfn"], [302, 3, 1, "", "exclude_from_serialization"], [302, 3, 1, "", "ineqcv_trans"], [302, 3, 1, "", "ineqcv_trans_kwargs"], [302, 3, 1, "", "ineqcv_wt"], [302, 4, 1, "", "latentfn"], [302, 3, 1, "", "n_eq_constr"], [302, 3, 1, "", "n_ieq_constr"], [302, 3, 1, "", "n_obj"], [302, 3, 1, "", "n_var"], [302, 3, 1, "", "ndecn"], [302, 3, 1, "", "neqcv"], [302, 3, 1, "", "nineqcv"], [302, 3, 1, "", "nlatent"], [302, 3, 1, "", "nobj"], [302, 3, 1, "", "obj_trans"], [302, 3, 1, "", "obj_trans_kwargs"], [302, 3, 1, "", "obj_wt"], [302, 3, 1, "", "replace_nan_values_by"], [302, 3, 1, "", "strict"], [302, 3, 1, "", "vars"], [302, 3, 1, "", "vtype"], [302, 3, 1, "", "xl"], [302, 3, 1, "", "xu"]], "pybrops.breed.prot.sel.prob.IntegerSelectionProblem": [[304, 1, 1, "", "IntegerSelectionProblem"], [305, 2, 1, "", "check_is_IntegerSelectionProblem"]], "pybrops.breed.prot.sel.prob.IntegerSelectionProblem.IntegerSelectionProblem": [[304, 3, 1, "", "callback"], [304, 3, 1, "", "data"], [304, 3, 1, "", "decn_space"], [304, 3, 1, "", "decn_space_lower"], [304, 3, 1, "", "decn_space_upper"], [304, 3, 1, "", "elementwise"], [304, 3, 1, "", "elementwise_func"], [304, 3, 1, "", "elementwise_runner"], [304, 3, 1, "", "eqcv_trans"], [304, 3, 1, "", "eqcv_trans_kwargs"], [304, 3, 1, "", "eqcv_wt"], [304, 4, 1, "", "evalfn"], [304, 3, 1, "", "exclude_from_serialization"], [304, 3, 1, "", "ineqcv_trans"], [304, 3, 1, "", "ineqcv_trans_kwargs"], [304, 3, 1, "", "ineqcv_wt"], [304, 4, 1, "", "latentfn"], [304, 3, 1, "", "n_eq_constr"], [304, 3, 1, "", "n_ieq_constr"], [304, 3, 1, "", "n_obj"], [304, 3, 1, "", "n_var"], [304, 3, 1, "", "ndecn"], [304, 3, 1, "", "neqcv"], [304, 3, 1, "", "nineqcv"], [304, 3, 1, "", "nlatent"], [304, 3, 1, "", "nobj"], [304, 3, 1, "", "obj_trans"], [304, 3, 1, "", "obj_trans_kwargs"], [304, 3, 1, "", "obj_wt"], [304, 3, 1, "", "replace_nan_values_by"], [304, 3, 1, "", "strict"], [304, 3, 1, "", "vars"], [304, 3, 1, "", "vtype"], [304, 3, 1, "", "xl"], [304, 3, 1, "", "xu"]], "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem": [[307, 1, 1, "", "L1NormGenomicBinarySelectionProblem"], [308, 1, 1, "", "L1NormGenomicIntegerSelectionProblem"], [309, 1, 1, "", "L1NormGenomicRealSelectionProblem"], [310, 1, 1, "", "L1NormGenomicSelectionProblemMixin"], [311, 1, 1, "", "L1NormGenomicSubsetSelectionProblem"]], "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicBinarySelectionProblem": [[307, 3, 1, "", "V"], [307, 3, 1, "", "callback"], [307, 3, 1, "", "data"], [307, 3, 1, "", "decn_space"], [307, 3, 1, "", "decn_space_lower"], [307, 3, 1, "", "decn_space_upper"], [307, 3, 1, "", "elementwise"], [307, 3, 1, "", "elementwise_func"], [307, 3, 1, "", "elementwise_runner"], [307, 3, 1, "", "eqcv_trans"], [307, 3, 1, "", "eqcv_trans_kwargs"], [307, 3, 1, "", "eqcv_wt"], [307, 4, 1, "", "evalfn"], [307, 3, 1, "", "exclude_from_serialization"], [307, 4, 1, "", "from_numpy"], [307, 3, 1, "", "ineqcv_trans"], [307, 3, 1, "", "ineqcv_trans_kwargs"], [307, 3, 1, "", "ineqcv_wt"], [307, 4, 1, "", "latentfn"], [307, 3, 1, "", "n_eq_constr"], [307, 3, 1, "", "n_ieq_constr"], [307, 3, 1, "", "n_obj"], [307, 3, 1, "", "n_var"], [307, 3, 1, "", "ndecn"], [307, 3, 1, "", "neqcv"], [307, 3, 1, "", "nineqcv"], [307, 3, 1, "", "nlatent"], [307, 3, 1, "", "nobj"], [307, 3, 1, "", "obj_trans"], [307, 3, 1, "", "obj_trans_kwargs"], [307, 3, 1, "", "obj_wt"], [307, 3, 1, "", "replace_nan_values_by"], [307, 3, 1, "", "strict"], [307, 3, 1, "", "vars"], [307, 3, 1, "", "vtype"], [307, 3, 1, "", "xl"], [307, 3, 1, "", "xu"]], "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicIntegerSelectionProblem": [[308, 3, 1, "", "V"], [308, 3, 1, "", "callback"], [308, 3, 1, "", "data"], [308, 3, 1, "", "decn_space"], [308, 3, 1, "", "decn_space_lower"], [308, 3, 1, "", "decn_space_upper"], [308, 3, 1, "", "elementwise"], [308, 3, 1, "", "elementwise_func"], [308, 3, 1, "", "elementwise_runner"], [308, 3, 1, "", "eqcv_trans"], [308, 3, 1, "", "eqcv_trans_kwargs"], [308, 3, 1, "", "eqcv_wt"], [308, 4, 1, "", "evalfn"], [308, 3, 1, "", "exclude_from_serialization"], [308, 4, 1, "", "from_numpy"], [308, 3, 1, "", "ineqcv_trans"], [308, 3, 1, "", "ineqcv_trans_kwargs"], [308, 3, 1, "", "ineqcv_wt"], [308, 4, 1, "", "latentfn"], [308, 3, 1, "", "n_eq_constr"], [308, 3, 1, "", "n_ieq_constr"], [308, 3, 1, "", "n_obj"], [308, 3, 1, "", "n_var"], [308, 3, 1, "", "ndecn"], [308, 3, 1, "", "neqcv"], [308, 3, 1, "", "nineqcv"], [308, 3, 1, "", "nlatent"], [308, 3, 1, "", "nobj"], [308, 3, 1, "", "obj_trans"], [308, 3, 1, "", "obj_trans_kwargs"], [308, 3, 1, "", "obj_wt"], [308, 3, 1, "", "replace_nan_values_by"], [308, 3, 1, "", "strict"], [308, 3, 1, "", "vars"], [308, 3, 1, "", "vtype"], [308, 3, 1, "", "xl"], [308, 3, 1, "", "xu"]], "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicRealSelectionProblem": [[309, 3, 1, "", "V"], [309, 3, 1, "", "callback"], [309, 3, 1, "", "data"], [309, 3, 1, "", "decn_space"], [309, 3, 1, "", "decn_space_lower"], [309, 3, 1, "", "decn_space_upper"], [309, 3, 1, "", "elementwise"], [309, 3, 1, "", "elementwise_func"], [309, 3, 1, "", "elementwise_runner"], [309, 3, 1, "", "eqcv_trans"], [309, 3, 1, "", "eqcv_trans_kwargs"], [309, 3, 1, "", "eqcv_wt"], [309, 4, 1, "", "evalfn"], [309, 3, 1, "", "exclude_from_serialization"], [309, 4, 1, "", "from_numpy"], [309, 3, 1, "", "ineqcv_trans"], [309, 3, 1, "", "ineqcv_trans_kwargs"], [309, 3, 1, "", "ineqcv_wt"], [309, 4, 1, "", "latentfn"], [309, 3, 1, "", "n_eq_constr"], [309, 3, 1, "", "n_ieq_constr"], [309, 3, 1, "", "n_obj"], [309, 3, 1, "", "n_var"], [309, 3, 1, "", "ndecn"], [309, 3, 1, "", "neqcv"], [309, 3, 1, "", "nineqcv"], [309, 3, 1, "", "nlatent"], [309, 3, 1, "", "nobj"], [309, 3, 1, "", "obj_trans"], [309, 3, 1, "", "obj_trans_kwargs"], [309, 3, 1, "", "obj_wt"], [309, 3, 1, "", "replace_nan_values_by"], [309, 3, 1, "", "strict"], [309, 3, 1, "", "vars"], [309, 3, 1, "", "vtype"], [309, 3, 1, "", "xl"], [309, 3, 1, "", "xu"]], "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicSelectionProblemMixin": [[310, 3, 1, "", "V"], [310, 4, 1, "", "from_numpy"], [310, 3, 1, "", "nlatent"]], "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicSubsetSelectionProblem": [[311, 3, 1, "", "V"], [311, 3, 1, "", "callback"], [311, 3, 1, "", "data"], [311, 3, 1, "", "decn_space"], [311, 3, 1, "", "decn_space_lower"], [311, 3, 1, "", "decn_space_upper"], [311, 3, 1, "", "elementwise"], [311, 3, 1, "", "elementwise_func"], [311, 3, 1, "", "elementwise_runner"], [311, 3, 1, "", "eqcv_trans"], [311, 3, 1, "", "eqcv_trans_kwargs"], [311, 3, 1, "", "eqcv_wt"], [311, 4, 1, "", "evalfn"], [311, 3, 1, "", "exclude_from_serialization"], [311, 4, 1, "", "from_numpy"], [311, 3, 1, "", "ineqcv_trans"], [311, 3, 1, "", "ineqcv_trans_kwargs"], [311, 3, 1, "", "ineqcv_wt"], [311, 4, 1, "", "latentfn"], [311, 3, 1, "", "n_eq_constr"], [311, 3, 1, "", "n_ieq_constr"], [311, 3, 1, "", "n_obj"], [311, 3, 1, "", "n_var"], [311, 3, 1, "", "ndecn"], [311, 3, 1, "", "neqcv"], [311, 3, 1, "", "nineqcv"], [311, 3, 1, "", "nlatent"], [311, 3, 1, "", "nobj"], [311, 3, 1, "", "obj_trans"], [311, 3, 1, "", "obj_trans_kwargs"], [311, 3, 1, "", "obj_wt"], [311, 3, 1, "", "replace_nan_values_by"], [311, 3, 1, "", "strict"], [311, 3, 1, "", "vars"], [311, 3, 1, "", "vtype"], [311, 3, 1, "", "xl"], [311, 3, 1, "", "xu"]], "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem": [[313, 1, 1, "", "L2NormGenomicBinarySelectionProblem"], [314, 1, 1, "", "L2NormGenomicIntegerSelectionProblem"], [315, 1, 1, "", "L2NormGenomicRealSelectionProblem"], [316, 1, 1, "", "L2NormGenomicSelectionProblemMixin"], [317, 1, 1, "", "L2NormGenomicSubsetSelectionProblem"]], "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicBinarySelectionProblem": [[313, 3, 1, "", "C"], [313, 3, 1, "", "callback"], [313, 3, 1, "", "data"], [313, 3, 1, "", "decn_space"], [313, 3, 1, "", "decn_space_lower"], [313, 3, 1, "", "decn_space_upper"], [313, 3, 1, "", "elementwise"], [313, 3, 1, "", "elementwise_func"], [313, 3, 1, "", "elementwise_runner"], [313, 3, 1, "", "eqcv_trans"], [313, 3, 1, "", "eqcv_trans_kwargs"], [313, 3, 1, "", "eqcv_wt"], [313, 4, 1, "", "evalfn"], [313, 3, 1, "", "exclude_from_serialization"], [313, 4, 1, "", "from_gmat"], [313, 3, 1, "", "ineqcv_trans"], [313, 3, 1, "", "ineqcv_trans_kwargs"], [313, 3, 1, "", "ineqcv_wt"], [313, 4, 1, "", "latentfn"], [313, 3, 1, "", "n_eq_constr"], [313, 3, 1, "", "n_ieq_constr"], [313, 3, 1, "", "n_obj"], [313, 3, 1, "", "n_var"], [313, 3, 1, "", "ndecn"], [313, 3, 1, "", "neqcv"], [313, 3, 1, "", "nineqcv"], [313, 3, 1, "", "nlatent"], [313, 3, 1, "", "nobj"], [313, 3, 1, "", "obj_trans"], [313, 3, 1, "", "obj_trans_kwargs"], [313, 3, 1, "", "obj_wt"], [313, 3, 1, "", "replace_nan_values_by"], [313, 3, 1, "", "strict"], [313, 3, 1, "", "vars"], [313, 3, 1, "", "vtype"], [313, 3, 1, "", "xl"], [313, 3, 1, "", "xu"]], "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicIntegerSelectionProblem": [[314, 3, 1, "", "C"], [314, 3, 1, "", "callback"], [314, 3, 1, "", "data"], [314, 3, 1, "", "decn_space"], [314, 3, 1, "", "decn_space_lower"], [314, 3, 1, "", "decn_space_upper"], [314, 3, 1, "", "elementwise"], [314, 3, 1, "", "elementwise_func"], [314, 3, 1, "", "elementwise_runner"], [314, 3, 1, "", "eqcv_trans"], [314, 3, 1, "", "eqcv_trans_kwargs"], [314, 3, 1, "", "eqcv_wt"], [314, 4, 1, "", "evalfn"], [314, 3, 1, "", "exclude_from_serialization"], [314, 4, 1, "", "from_gmat"], [314, 3, 1, "", "ineqcv_trans"], [314, 3, 1, "", "ineqcv_trans_kwargs"], [314, 3, 1, "", "ineqcv_wt"], [314, 4, 1, "", "latentfn"], [314, 3, 1, "", "n_eq_constr"], [314, 3, 1, "", "n_ieq_constr"], [314, 3, 1, "", "n_obj"], [314, 3, 1, "", "n_var"], [314, 3, 1, "", "ndecn"], [314, 3, 1, "", "neqcv"], [314, 3, 1, "", "nineqcv"], [314, 3, 1, "", "nlatent"], [314, 3, 1, "", "nobj"], [314, 3, 1, "", "obj_trans"], [314, 3, 1, "", "obj_trans_kwargs"], [314, 3, 1, "", "obj_wt"], [314, 3, 1, "", "replace_nan_values_by"], [314, 3, 1, "", "strict"], [314, 3, 1, "", "vars"], [314, 3, 1, "", "vtype"], [314, 3, 1, "", "xl"], [314, 3, 1, "", "xu"]], "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicRealSelectionProblem": [[315, 3, 1, "", "C"], [315, 3, 1, "", "callback"], [315, 3, 1, "", "data"], [315, 3, 1, "", "decn_space"], [315, 3, 1, "", "decn_space_lower"], [315, 3, 1, "", "decn_space_upper"], [315, 3, 1, "", "elementwise"], [315, 3, 1, "", "elementwise_func"], [315, 3, 1, "", "elementwise_runner"], [315, 3, 1, "", "eqcv_trans"], [315, 3, 1, "", "eqcv_trans_kwargs"], [315, 3, 1, "", "eqcv_wt"], [315, 4, 1, "", "evalfn"], [315, 3, 1, "", "exclude_from_serialization"], [315, 4, 1, "", "from_gmat"], [315, 3, 1, "", "ineqcv_trans"], [315, 3, 1, "", "ineqcv_trans_kwargs"], [315, 3, 1, "", "ineqcv_wt"], [315, 4, 1, "", "latentfn"], [315, 3, 1, "", "n_eq_constr"], [315, 3, 1, "", "n_ieq_constr"], [315, 3, 1, "", "n_obj"], [315, 3, 1, "", "n_var"], [315, 3, 1, "", "ndecn"], [315, 3, 1, "", "neqcv"], [315, 3, 1, "", "nineqcv"], [315, 3, 1, "", "nlatent"], [315, 3, 1, "", "nobj"], [315, 3, 1, "", "obj_trans"], [315, 3, 1, "", "obj_trans_kwargs"], [315, 3, 1, "", "obj_wt"], [315, 3, 1, "", "replace_nan_values_by"], [315, 3, 1, "", "strict"], [315, 3, 1, "", "vars"], [315, 3, 1, "", "vtype"], [315, 3, 1, "", "xl"], [315, 3, 1, "", "xu"]], "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicSelectionProblemMixin": [[316, 3, 1, "", "C"], [316, 4, 1, "", "from_gmat"], [316, 3, 1, "", "nlatent"]], "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicSubsetSelectionProblem": [[317, 3, 1, "", "C"], [317, 3, 1, "", "callback"], [317, 3, 1, "", "data"], [317, 3, 1, "", "decn_space"], [317, 3, 1, "", "decn_space_lower"], [317, 3, 1, "", "decn_space_upper"], [317, 3, 1, "", "elementwise"], [317, 3, 1, "", "elementwise_func"], [317, 3, 1, "", "elementwise_runner"], [317, 3, 1, "", "eqcv_trans"], [317, 3, 1, "", "eqcv_trans_kwargs"], [317, 3, 1, "", "eqcv_wt"], [317, 4, 1, "", "evalfn"], [317, 3, 1, "", "exclude_from_serialization"], [317, 4, 1, "", "from_gmat"], [317, 3, 1, "", "ineqcv_trans"], [317, 3, 1, "", "ineqcv_trans_kwargs"], [317, 3, 1, "", "ineqcv_wt"], [317, 4, 1, "", "latentfn"], [317, 3, 1, "", "n_eq_constr"], [317, 3, 1, "", "n_ieq_constr"], [317, 3, 1, "", "n_obj"], [317, 3, 1, "", "n_var"], [317, 3, 1, "", "ndecn"], [317, 3, 1, "", "neqcv"], [317, 3, 1, "", "nineqcv"], [317, 3, 1, "", "nlatent"], [317, 3, 1, "", "nobj"], [317, 3, 1, "", "obj_trans"], [317, 3, 1, "", "obj_trans_kwargs"], [317, 3, 1, "", "obj_wt"], [317, 3, 1, "", "replace_nan_values_by"], [317, 3, 1, "", "strict"], [317, 3, 1, "", "vars"], [317, 3, 1, "", "vtype"], [317, 3, 1, "", "xl"], [317, 3, 1, "", "xu"]], "pybrops.breed.prot.sel.prob.MateSelectionProblem": [[319, 1, 1, "", "MateSelectionProblem"]], "pybrops.breed.prot.sel.prob.MateSelectionProblem.MateSelectionProblem": [[319, 3, 1, "", "callback"], [319, 3, 1, "", "data"], [319, 3, 1, "", "decn_space"], [319, 3, 1, "", "decn_space_lower"], [319, 3, 1, "", "decn_space_upper"], [319, 3, 1, "", "decn_space_xmap"], [319, 3, 1, "", "elementwise"], [319, 3, 1, "", "elementwise_func"], [319, 3, 1, "", "elementwise_runner"], [319, 3, 1, "", "eqcv_trans"], [319, 3, 1, "", "eqcv_trans_kwargs"], [319, 3, 1, "", "eqcv_wt"], [319, 4, 1, "", "evalfn"], [319, 3, 1, "", "exclude_from_serialization"], [319, 3, 1, "", "ineqcv_trans"], [319, 3, 1, "", "ineqcv_trans_kwargs"], [319, 3, 1, "", "ineqcv_wt"], [319, 4, 1, "", "latentfn"], [319, 3, 1, "", "n_eq_constr"], [319, 3, 1, "", "n_ieq_constr"], [319, 3, 1, "", "n_obj"], [319, 3, 1, "", "n_var"], [319, 3, 1, "", "ndecn"], [319, 3, 1, "", "neqcv"], [319, 3, 1, "", "nineqcv"], [319, 3, 1, "", "nlatent"], [319, 3, 1, "", "nobj"], [319, 3, 1, "", "obj_trans"], [319, 3, 1, "", "obj_trans_kwargs"], [319, 3, 1, "", "obj_wt"], [319, 3, 1, "", "replace_nan_values_by"], [319, 3, 1, "", "strict"], [319, 3, 1, "", "vars"], [319, 3, 1, "", "vtype"], [319, 3, 1, "", "xl"], [319, 3, 1, "", "xu"]], "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem": [[321, 1, 1, "", "MeanExpectedHeterozygosityBinarySelectionProblem"], [322, 1, 1, "", "MeanExpectedHeterozygosityIntegerSelectionProblem"], [323, 1, 1, "", "MeanExpectedHeterozygosityRealSelectionProblem"], [324, 1, 1, "", "MeanExpectedHeterozygositySelectionProblemMixin"], [325, 1, 1, "", "MeanExpectedHeterozygositySubsetSelectionProblem"]], "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygosityBinarySelectionProblem": [[321, 3, 1, "", "C"], [321, 3, 1, "", "callback"], [321, 3, 1, "", "data"], [321, 3, 1, "", "decn_space"], [321, 3, 1, "", "decn_space_lower"], [321, 3, 1, "", "decn_space_upper"], [321, 3, 1, "", "elementwise"], [321, 3, 1, "", "elementwise_func"], [321, 3, 1, "", "elementwise_runner"], [321, 3, 1, "", "eqcv_trans"], [321, 3, 1, "", "eqcv_trans_kwargs"], [321, 3, 1, "", "eqcv_wt"], [321, 4, 1, "", "evalfn"], [321, 3, 1, "", "exclude_from_serialization"], [321, 3, 1, "", "ineqcv_trans"], [321, 3, 1, "", "ineqcv_trans_kwargs"], [321, 3, 1, "", "ineqcv_wt"], [321, 4, 1, "", "latentfn"], [321, 3, 1, "", "n_eq_constr"], [321, 3, 1, "", "n_ieq_constr"], [321, 3, 1, "", "n_obj"], [321, 3, 1, "", "n_var"], [321, 3, 1, "", "ndecn"], [321, 3, 1, "", "neqcv"], [321, 3, 1, "", "nineqcv"], [321, 3, 1, "", "nlatent"], [321, 3, 1, "", "nobj"], [321, 3, 1, "", "obj_trans"], [321, 3, 1, "", "obj_trans_kwargs"], [321, 3, 1, "", "obj_wt"], [321, 3, 1, "", "replace_nan_values_by"], [321, 3, 1, "", "strict"], [321, 3, 1, "", "vars"], [321, 3, 1, "", "vtype"], [321, 3, 1, "", "xl"], [321, 3, 1, "", "xu"]], "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygosityIntegerSelectionProblem": [[322, 3, 1, "", "C"], [322, 3, 1, "", "callback"], [322, 3, 1, "", "data"], [322, 3, 1, "", "decn_space"], [322, 3, 1, "", "decn_space_lower"], [322, 3, 1, "", "decn_space_upper"], [322, 3, 1, "", "elementwise"], [322, 3, 1, "", "elementwise_func"], [322, 3, 1, "", "elementwise_runner"], [322, 3, 1, "", "eqcv_trans"], [322, 3, 1, "", "eqcv_trans_kwargs"], [322, 3, 1, "", "eqcv_wt"], [322, 4, 1, "", "evalfn"], [322, 3, 1, "", "exclude_from_serialization"], [322, 3, 1, "", "ineqcv_trans"], [322, 3, 1, "", "ineqcv_trans_kwargs"], [322, 3, 1, "", "ineqcv_wt"], [322, 4, 1, "", "latentfn"], [322, 3, 1, "", "n_eq_constr"], [322, 3, 1, "", "n_ieq_constr"], [322, 3, 1, "", "n_obj"], [322, 3, 1, "", "n_var"], [322, 3, 1, "", "ndecn"], [322, 3, 1, "", "neqcv"], [322, 3, 1, "", "nineqcv"], [322, 3, 1, "", "nlatent"], [322, 3, 1, "", "nobj"], [322, 3, 1, "", "obj_trans"], [322, 3, 1, "", "obj_trans_kwargs"], [322, 3, 1, "", "obj_wt"], [322, 3, 1, "", "replace_nan_values_by"], [322, 3, 1, "", "strict"], [322, 3, 1, "", "vars"], [322, 3, 1, "", "vtype"], [322, 3, 1, "", "xl"], [322, 3, 1, "", "xu"]], "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygosityRealSelectionProblem": [[323, 3, 1, "", "C"], [323, 3, 1, "", "callback"], [323, 3, 1, "", "data"], [323, 3, 1, "", "decn_space"], [323, 3, 1, "", "decn_space_lower"], [323, 3, 1, "", "decn_space_upper"], [323, 3, 1, "", "elementwise"], [323, 3, 1, "", "elementwise_func"], [323, 3, 1, "", "elementwise_runner"], [323, 3, 1, "", "eqcv_trans"], [323, 3, 1, "", "eqcv_trans_kwargs"], [323, 3, 1, "", "eqcv_wt"], [323, 4, 1, "", "evalfn"], [323, 3, 1, "", "exclude_from_serialization"], [323, 3, 1, "", "ineqcv_trans"], [323, 3, 1, "", "ineqcv_trans_kwargs"], [323, 3, 1, "", "ineqcv_wt"], [323, 4, 1, "", "latentfn"], [323, 3, 1, "", "n_eq_constr"], [323, 3, 1, "", "n_ieq_constr"], [323, 3, 1, "", "n_obj"], [323, 3, 1, "", "n_var"], [323, 3, 1, "", "ndecn"], [323, 3, 1, "", "neqcv"], [323, 3, 1, "", "nineqcv"], [323, 3, 1, "", "nlatent"], [323, 3, 1, "", "nobj"], [323, 3, 1, "", "obj_trans"], [323, 3, 1, "", "obj_trans_kwargs"], [323, 3, 1, "", "obj_wt"], [323, 3, 1, "", "replace_nan_values_by"], [323, 3, 1, "", "strict"], [323, 3, 1, "", "vars"], [323, 3, 1, "", "vtype"], [323, 3, 1, "", "xl"], [323, 3, 1, "", "xu"]], "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygositySelectionProblemMixin": [[324, 3, 1, "", "C"], [324, 3, 1, "", "nlatent"]], "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygositySubsetSelectionProblem": [[325, 3, 1, "", "C"], [325, 3, 1, "", "callback"], [325, 3, 1, "", "data"], [325, 3, 1, "", "decn_space"], [325, 3, 1, "", "decn_space_lower"], [325, 3, 1, "", "decn_space_upper"], [325, 3, 1, "", "elementwise"], [325, 3, 1, "", "elementwise_func"], [325, 3, 1, "", "elementwise_runner"], [325, 3, 1, "", "eqcv_trans"], [325, 3, 1, "", "eqcv_trans_kwargs"], [325, 3, 1, "", "eqcv_wt"], [325, 4, 1, "", "evalfn"], [325, 3, 1, "", "exclude_from_serialization"], [325, 3, 1, "", "ineqcv_trans"], [325, 3, 1, "", "ineqcv_trans_kwargs"], [325, 3, 1, "", "ineqcv_wt"], [325, 4, 1, "", "latentfn"], [325, 3, 1, "", "n_eq_constr"], [325, 3, 1, "", "n_ieq_constr"], [325, 3, 1, "", "n_obj"], [325, 3, 1, "", "n_var"], [325, 3, 1, "", "ndecn"], [325, 3, 1, "", "neqcv"], [325, 3, 1, "", "nineqcv"], [325, 3, 1, "", "nlatent"], [325, 3, 1, "", "nobj"], [325, 3, 1, "", "obj_trans"], [325, 3, 1, "", "obj_trans_kwargs"], [325, 3, 1, "", "obj_wt"], [325, 3, 1, "", "replace_nan_values_by"], [325, 3, 1, "", "strict"], [325, 3, 1, "", "vars"], [325, 3, 1, "", "vtype"], [325, 3, 1, "", "xl"], [325, 3, 1, "", "xu"]], "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem": [[327, 1, 1, "", "MeanGenomicRelationshipBinarySelectionProblem"], [328, 1, 1, "", "MeanGenomicRelationshipIntegerSelectionProblem"], [329, 1, 1, "", "MeanGenomicRelationshipRealSelectionProblem"], [330, 1, 1, "", "MeanGenomicRelationshipSelectionProblemMixin"], [331, 1, 1, "", "MeanGenomicRelationshipSubsetSelectionProblem"]], "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipBinarySelectionProblem": [[327, 3, 1, "", "C"], [327, 3, 1, "", "callback"], [327, 3, 1, "", "data"], [327, 3, 1, "", "decn_space"], [327, 3, 1, "", "decn_space_lower"], [327, 3, 1, "", "decn_space_upper"], [327, 3, 1, "", "elementwise"], [327, 3, 1, "", "elementwise_func"], [327, 3, 1, "", "elementwise_runner"], [327, 3, 1, "", "eqcv_trans"], [327, 3, 1, "", "eqcv_trans_kwargs"], [327, 3, 1, "", "eqcv_wt"], [327, 4, 1, "", "evalfn"], [327, 3, 1, "", "exclude_from_serialization"], [327, 3, 1, "", "ineqcv_trans"], [327, 3, 1, "", "ineqcv_trans_kwargs"], [327, 3, 1, "", "ineqcv_wt"], [327, 4, 1, "", "latentfn"], [327, 3, 1, "", "n_eq_constr"], [327, 3, 1, "", "n_ieq_constr"], [327, 3, 1, "", "n_obj"], [327, 3, 1, "", "n_var"], [327, 3, 1, "", "ndecn"], [327, 3, 1, "", "neqcv"], [327, 3, 1, "", "nineqcv"], [327, 3, 1, "", "nlatent"], [327, 3, 1, "", "nobj"], [327, 3, 1, "", "obj_trans"], [327, 3, 1, "", "obj_trans_kwargs"], [327, 3, 1, "", "obj_wt"], [327, 3, 1, "", "replace_nan_values_by"], [327, 3, 1, "", "strict"], [327, 3, 1, "", "vars"], [327, 3, 1, "", "vtype"], [327, 3, 1, "", "xl"], [327, 3, 1, "", "xu"]], "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipIntegerSelectionProblem": [[328, 3, 1, "", "C"], [328, 3, 1, "", "callback"], [328, 3, 1, "", "data"], [328, 3, 1, "", "decn_space"], [328, 3, 1, "", "decn_space_lower"], [328, 3, 1, "", "decn_space_upper"], [328, 3, 1, "", "elementwise"], [328, 3, 1, "", "elementwise_func"], [328, 3, 1, "", "elementwise_runner"], [328, 3, 1, "", "eqcv_trans"], [328, 3, 1, "", "eqcv_trans_kwargs"], [328, 3, 1, "", "eqcv_wt"], [328, 4, 1, "", "evalfn"], [328, 3, 1, "", "exclude_from_serialization"], [328, 3, 1, "", "ineqcv_trans"], [328, 3, 1, "", "ineqcv_trans_kwargs"], [328, 3, 1, "", "ineqcv_wt"], [328, 4, 1, "", "latentfn"], [328, 3, 1, "", "n_eq_constr"], [328, 3, 1, "", "n_ieq_constr"], [328, 3, 1, "", "n_obj"], [328, 3, 1, "", "n_var"], [328, 3, 1, "", "ndecn"], [328, 3, 1, "", "neqcv"], [328, 3, 1, "", "nineqcv"], [328, 3, 1, "", "nlatent"], [328, 3, 1, "", "nobj"], [328, 3, 1, "", "obj_trans"], [328, 3, 1, "", "obj_trans_kwargs"], [328, 3, 1, "", "obj_wt"], [328, 3, 1, "", "replace_nan_values_by"], [328, 3, 1, "", "strict"], [328, 3, 1, "", "vars"], [328, 3, 1, "", "vtype"], [328, 3, 1, "", "xl"], [328, 3, 1, "", "xu"]], "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipRealSelectionProblem": [[329, 3, 1, "", "C"], [329, 3, 1, "", "callback"], [329, 3, 1, "", "data"], [329, 3, 1, "", "decn_space"], [329, 3, 1, "", "decn_space_lower"], [329, 3, 1, "", "decn_space_upper"], [329, 3, 1, "", "elementwise"], [329, 3, 1, "", "elementwise_func"], [329, 3, 1, "", "elementwise_runner"], [329, 3, 1, "", "eqcv_trans"], [329, 3, 1, "", "eqcv_trans_kwargs"], [329, 3, 1, "", "eqcv_wt"], [329, 4, 1, "", "evalfn"], [329, 3, 1, "", "exclude_from_serialization"], [329, 3, 1, "", "ineqcv_trans"], [329, 3, 1, "", "ineqcv_trans_kwargs"], [329, 3, 1, "", "ineqcv_wt"], [329, 4, 1, "", "latentfn"], [329, 3, 1, "", "n_eq_constr"], [329, 3, 1, "", "n_ieq_constr"], [329, 3, 1, "", "n_obj"], [329, 3, 1, "", "n_var"], [329, 3, 1, "", "ndecn"], [329, 3, 1, "", "neqcv"], [329, 3, 1, "", "nineqcv"], [329, 3, 1, "", "nlatent"], [329, 3, 1, "", "nobj"], [329, 3, 1, "", "obj_trans"], [329, 3, 1, "", "obj_trans_kwargs"], [329, 3, 1, "", "obj_wt"], [329, 3, 1, "", "replace_nan_values_by"], [329, 3, 1, "", "strict"], [329, 3, 1, "", "vars"], [329, 3, 1, "", "vtype"], [329, 3, 1, "", "xl"], [329, 3, 1, "", "xu"]], "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipSelectionProblemMixin": [[330, 3, 1, "", "C"], [330, 3, 1, "", "nlatent"]], "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipSubsetSelectionProblem": [[331, 3, 1, "", "C"], [331, 3, 1, "", "callback"], [331, 3, 1, "", "data"], [331, 3, 1, "", "decn_space"], [331, 3, 1, "", "decn_space_lower"], [331, 3, 1, "", "decn_space_upper"], [331, 3, 1, "", "elementwise"], [331, 3, 1, "", "elementwise_func"], [331, 3, 1, "", "elementwise_runner"], [331, 3, 1, "", "eqcv_trans"], [331, 3, 1, "", "eqcv_trans_kwargs"], [331, 3, 1, "", "eqcv_wt"], [331, 4, 1, "", "evalfn"], [331, 3, 1, "", "exclude_from_serialization"], [331, 3, 1, "", "ineqcv_trans"], [331, 3, 1, "", "ineqcv_trans_kwargs"], [331, 3, 1, "", "ineqcv_wt"], [331, 4, 1, "", "latentfn"], [331, 3, 1, "", "n_eq_constr"], [331, 3, 1, "", "n_ieq_constr"], [331, 3, 1, "", "n_obj"], [331, 3, 1, "", "n_var"], [331, 3, 1, "", "ndecn"], [331, 3, 1, "", "neqcv"], [331, 3, 1, "", "nineqcv"], [331, 3, 1, "", "nlatent"], [331, 3, 1, "", "nobj"], [331, 3, 1, "", "obj_trans"], [331, 3, 1, "", "obj_trans_kwargs"], [331, 3, 1, "", "obj_wt"], [331, 3, 1, "", "replace_nan_values_by"], [331, 3, 1, "", "strict"], [331, 3, 1, "", "vars"], [331, 3, 1, "", "vtype"], [331, 3, 1, "", "xl"], [331, 3, 1, "", "xu"]], "pybrops.breed.prot.sel.prob.MultiObjectiveGenomicMatingProblem": [[333, 1, 1, "", "MultiObjectiveGenomicMatingProblemMixin"], [334, 1, 1, "", "MultiObjectiveGenomicSubsetMatingProblem"]], "pybrops.breed.prot.sel.prob.MultiObjectiveGenomicMatingProblem.MultiObjectiveGenomicMatingProblemMixin": [[333, 3, 1, "", "geno"], [333, 3, 1, "", "mkrwt"], [333, 3, 1, "", "nlatent"], [333, 3, 1, "", "ploidy"], [333, 3, 1, "", "tfreq"], [333, 3, 1, "", "thet"], [333, 3, 1, "", "tmajor"], [333, 3, 1, "", "tminor"], [333, 3, 1, "", "xmap"]], "pybrops.breed.prot.sel.prob.MultiObjectiveGenomicMatingProblem.MultiObjectiveGenomicSubsetMatingProblem": [[334, 3, 1, "", "callback"], [334, 3, 1, "", "data"], [334, 3, 1, "", "decn_space"], [334, 3, 1, "", "decn_space_lower"], [334, 3, 1, "", "decn_space_upper"], [334, 3, 1, "", "decn_space_xmap"], [334, 3, 1, "", "elementwise"], [334, 3, 1, "", "elementwise_func"], [334, 3, 1, "", "elementwise_runner"], [334, 3, 1, "", "eqcv_trans"], [334, 3, 1, "", "eqcv_trans_kwargs"], [334, 3, 1, "", "eqcv_wt"], [334, 4, 1, "", "evalfn"], [334, 3, 1, "", "exclude_from_serialization"], [334, 3, 1, "", "geno"], [334, 3, 1, "", "ineqcv_trans"], [334, 3, 1, "", "ineqcv_trans_kwargs"], [334, 3, 1, "", "ineqcv_wt"], [334, 4, 1, "", "latentfn"], [334, 3, 1, "", "mkrwt"], [334, 3, 1, "", "n_eq_constr"], [334, 3, 1, "", "n_ieq_constr"], [334, 3, 1, "", "n_obj"], [334, 3, 1, "", "n_var"], [334, 3, 1, "", "ndecn"], [334, 3, 1, "", "neqcv"], [334, 3, 1, "", "nineqcv"], [334, 3, 1, "", "nlatent"], [334, 3, 1, "", "nobj"], [334, 3, 1, "", "obj_trans"], [334, 3, 1, "", "obj_trans_kwargs"], [334, 3, 1, "", "obj_wt"], [334, 3, 1, "", "ploidy"], [334, 3, 1, "", "replace_nan_values_by"], [334, 3, 1, "", "strict"], [334, 3, 1, "", "tfreq"], [334, 3, 1, "", "thet"], [334, 3, 1, "", "tmajor"], [334, 3, 1, "", "tminor"], [334, 3, 1, "", "vars"], [334, 3, 1, "", "vtype"], [334, 3, 1, "", "xl"], [334, 3, 1, "", "xmap"], [334, 3, 1, "", "xu"]], "pybrops.breed.prot.sel.prob.MultiObjectiveGenomicSelectionProblem": [[336, 1, 1, "", "MultiObjectiveGenomicSelectionProblemMixin"], [337, 1, 1, "", "MultiObjectiveGenomicSubsetSelectionProblem"]], "pybrops.breed.prot.sel.prob.MultiObjectiveGenomicSelectionProblem.MultiObjectiveGenomicSelectionProblemMixin": [[336, 3, 1, "", "geno"], [336, 3, 1, "", "mkrwt"], [336, 3, 1, "", "nlatent"], [336, 3, 1, "", "ploidy"], [336, 3, 1, "", "tfreq"], [336, 3, 1, "", "thet"], [336, 3, 1, "", "tmajor"], [336, 3, 1, "", "tminor"]], "pybrops.breed.prot.sel.prob.MultiObjectiveGenomicSelectionProblem.MultiObjectiveGenomicSubsetSelectionProblem": [[337, 3, 1, "", "callback"], [337, 3, 1, "", "data"], [337, 3, 1, "", "decn_space"], [337, 3, 1, "", "decn_space_lower"], [337, 3, 1, "", "decn_space_upper"], [337, 3, 1, "", "elementwise"], [337, 3, 1, "", "elementwise_func"], [337, 3, 1, "", "elementwise_runner"], [337, 3, 1, "", "eqcv_trans"], [337, 3, 1, "", "eqcv_trans_kwargs"], [337, 3, 1, "", "eqcv_wt"], [337, 4, 1, "", "evalfn"], [337, 3, 1, "", "exclude_from_serialization"], [337, 3, 1, "", "geno"], [337, 3, 1, "", "ineqcv_trans"], [337, 3, 1, "", "ineqcv_trans_kwargs"], [337, 3, 1, "", "ineqcv_wt"], [337, 4, 1, "", "latentfn"], [337, 3, 1, "", "mkrwt"], [337, 3, 1, "", "n_eq_constr"], [337, 3, 1, "", "n_ieq_constr"], [337, 3, 1, "", "n_obj"], [337, 3, 1, "", "n_var"], [337, 3, 1, "", "ndecn"], [337, 3, 1, "", "neqcv"], [337, 3, 1, "", "nineqcv"], [337, 3, 1, "", "nlatent"], [337, 3, 1, "", "nobj"], [337, 3, 1, "", "obj_trans"], [337, 3, 1, "", "obj_trans_kwargs"], [337, 3, 1, "", "obj_wt"], [337, 3, 1, "", "ploidy"], [337, 3, 1, "", "replace_nan_values_by"], [337, 3, 1, "", "strict"], [337, 3, 1, "", "tfreq"], [337, 3, 1, "", "thet"], [337, 3, 1, "", "tmajor"], [337, 3, 1, "", "tminor"], [337, 3, 1, "", "vars"], [337, 3, 1, "", "vtype"], [337, 3, 1, "", "xl"], [337, 3, 1, "", "xu"]], "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem": [[339, 1, 1, "", "OptimalContributionBinarySelectionProblem"], [340, 1, 1, "", "OptimalContributionIntegerSelectionProblem"], [341, 1, 1, "", "OptimalContributionRealSelectionProblem"], [342, 1, 1, "", "OptimalContributionSelectionProblemMixin"], [343, 1, 1, "", "OptimalContributionSubsetSelectionProblem"]], "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionBinarySelectionProblem": [[339, 3, 1, "", "C"], [339, 3, 1, "", "callback"], [339, 3, 1, "", "data"], [339, 3, 1, "", "decn_space"], [339, 3, 1, "", "decn_space_lower"], [339, 3, 1, "", "decn_space_upper"], [339, 3, 1, "", "ebv"], [339, 3, 1, "", "elementwise"], [339, 3, 1, "", "elementwise_func"], [339, 3, 1, "", "elementwise_runner"], [339, 3, 1, "", "eqcv_trans"], [339, 3, 1, "", "eqcv_trans_kwargs"], [339, 3, 1, "", "eqcv_wt"], [339, 4, 1, "", "evalfn"], [339, 3, 1, "", "exclude_from_serialization"], [339, 3, 1, "", "ineqcv_trans"], [339, 3, 1, "", "ineqcv_trans_kwargs"], [339, 3, 1, "", "ineqcv_wt"], [339, 4, 1, "", "latentfn"], [339, 3, 1, "", "n_eq_constr"], [339, 3, 1, "", "n_ieq_constr"], [339, 3, 1, "", "n_obj"], [339, 3, 1, "", "n_var"], [339, 3, 1, "", "ndecn"], [339, 3, 1, "", "neqcv"], [339, 3, 1, "", "nineqcv"], [339, 3, 1, "", "nlatent"], [339, 3, 1, "", "nobj"], [339, 3, 1, "", "obj_trans"], [339, 3, 1, "", "obj_trans_kwargs"], [339, 3, 1, "", "obj_wt"], [339, 3, 1, "", "replace_nan_values_by"], [339, 3, 1, "", "strict"], [339, 3, 1, "", "vars"], [339, 3, 1, "", "vtype"], [339, 3, 1, "", "xl"], [339, 3, 1, "", "xu"]], "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionIntegerSelectionProblem": [[340, 3, 1, "", "C"], [340, 3, 1, "", "callback"], [340, 3, 1, "", "data"], [340, 3, 1, "", "decn_space"], [340, 3, 1, "", "decn_space_lower"], [340, 3, 1, "", "decn_space_upper"], [340, 3, 1, "", "ebv"], [340, 3, 1, "", "elementwise"], [340, 3, 1, "", "elementwise_func"], [340, 3, 1, "", "elementwise_runner"], [340, 3, 1, "", "eqcv_trans"], [340, 3, 1, "", "eqcv_trans_kwargs"], [340, 3, 1, "", "eqcv_wt"], [340, 4, 1, "", "evalfn"], [340, 3, 1, "", "exclude_from_serialization"], [340, 3, 1, "", "ineqcv_trans"], [340, 3, 1, "", "ineqcv_trans_kwargs"], [340, 3, 1, "", "ineqcv_wt"], [340, 4, 1, "", "latentfn"], [340, 3, 1, "", "n_eq_constr"], [340, 3, 1, "", "n_ieq_constr"], [340, 3, 1, "", "n_obj"], [340, 3, 1, "", "n_var"], [340, 3, 1, "", "ndecn"], [340, 3, 1, "", "neqcv"], [340, 3, 1, "", "nineqcv"], [340, 3, 1, "", "nlatent"], [340, 3, 1, "", "nobj"], [340, 3, 1, "", "obj_trans"], [340, 3, 1, "", "obj_trans_kwargs"], [340, 3, 1, "", "obj_wt"], [340, 3, 1, "", "replace_nan_values_by"], [340, 3, 1, "", "strict"], [340, 3, 1, "", "vars"], [340, 3, 1, "", "vtype"], [340, 3, 1, "", "xl"], [340, 3, 1, "", "xu"]], "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionRealSelectionProblem": [[341, 3, 1, "", "C"], [341, 3, 1, "", "callback"], [341, 3, 1, "", "data"], [341, 3, 1, "", "decn_space"], [341, 3, 1, "", "decn_space_lower"], [341, 3, 1, "", "decn_space_upper"], [341, 3, 1, "", "ebv"], [341, 3, 1, "", "elementwise"], [341, 3, 1, "", "elementwise_func"], [341, 3, 1, "", "elementwise_runner"], [341, 3, 1, "", "eqcv_trans"], [341, 3, 1, "", "eqcv_trans_kwargs"], [341, 3, 1, "", "eqcv_wt"], [341, 4, 1, "", "evalfn"], [341, 3, 1, "", "exclude_from_serialization"], [341, 3, 1, "", "ineqcv_trans"], [341, 3, 1, "", "ineqcv_trans_kwargs"], [341, 3, 1, "", "ineqcv_wt"], [341, 4, 1, "", "latentfn"], [341, 3, 1, "", "n_eq_constr"], [341, 3, 1, "", "n_ieq_constr"], [341, 3, 1, "", "n_obj"], [341, 3, 1, "", "n_var"], [341, 3, 1, "", "ndecn"], [341, 3, 1, "", "neqcv"], [341, 3, 1, "", "nineqcv"], [341, 3, 1, "", "nlatent"], [341, 3, 1, "", "nobj"], [341, 3, 1, "", "obj_trans"], [341, 3, 1, "", "obj_trans_kwargs"], [341, 3, 1, "", "obj_wt"], [341, 3, 1, "", "replace_nan_values_by"], [341, 3, 1, "", "strict"], [341, 3, 1, "", "vars"], [341, 3, 1, "", "vtype"], [341, 3, 1, "", "xl"], [341, 3, 1, "", "xu"]], "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionSelectionProblemMixin": [[342, 3, 1, "", "C"], [342, 3, 1, "", "ebv"], [342, 3, 1, "", "nlatent"]], "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionSubsetSelectionProblem": [[343, 3, 1, "", "C"], [343, 3, 1, "", "callback"], [343, 3, 1, "", "data"], [343, 3, 1, "", "decn_space"], [343, 3, 1, "", "decn_space_lower"], [343, 3, 1, "", "decn_space_upper"], [343, 3, 1, "", "ebv"], [343, 3, 1, "", "elementwise"], [343, 3, 1, "", "elementwise_func"], [343, 3, 1, "", "elementwise_runner"], [343, 3, 1, "", "eqcv_trans"], [343, 3, 1, "", "eqcv_trans_kwargs"], [343, 3, 1, "", "eqcv_wt"], [343, 4, 1, "", "evalfn"], [343, 3, 1, "", "exclude_from_serialization"], [343, 3, 1, "", "ineqcv_trans"], [343, 3, 1, "", "ineqcv_trans_kwargs"], [343, 3, 1, "", "ineqcv_wt"], [343, 4, 1, "", "latentfn"], [343, 3, 1, "", "n_eq_constr"], [343, 3, 1, "", "n_ieq_constr"], [343, 3, 1, "", "n_obj"], [343, 3, 1, "", "n_var"], [343, 3, 1, "", "ndecn"], [343, 3, 1, "", "neqcv"], [343, 3, 1, "", "nineqcv"], [343, 3, 1, "", "nlatent"], [343, 3, 1, "", "nobj"], [343, 3, 1, "", "obj_trans"], [343, 3, 1, "", "obj_trans_kwargs"], [343, 3, 1, "", "obj_wt"], [343, 3, 1, "", "replace_nan_values_by"], [343, 3, 1, "", "strict"], [343, 3, 1, "", "vars"], [343, 3, 1, "", "vtype"], [343, 3, 1, "", "xl"], [343, 3, 1, "", "xu"]], "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem": [[345, 1, 1, "", "OptimalHaploidValueBinarySelectionProblem"], [346, 1, 1, "", "OptimalHaploidValueIntegerSelectionProblem"], [347, 1, 1, "", "OptimalHaploidValueRealSelectionProblem"], [348, 1, 1, "", "OptimalHaploidValueSelectionProblemMixin"], [349, 1, 1, "", "OptimalHaploidValueSubsetSelectionProblem"]], "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueBinarySelectionProblem": [[345, 3, 1, "", "callback"], [345, 3, 1, "", "data"], [345, 3, 1, "", "decn_space"], [345, 3, 1, "", "decn_space_lower"], [345, 3, 1, "", "decn_space_upper"], [345, 3, 1, "", "elementwise"], [345, 3, 1, "", "elementwise_func"], [345, 3, 1, "", "elementwise_runner"], [345, 3, 1, "", "eqcv_trans"], [345, 3, 1, "", "eqcv_trans_kwargs"], [345, 3, 1, "", "eqcv_wt"], [345, 4, 1, "", "evalfn"], [345, 3, 1, "", "exclude_from_serialization"], [345, 3, 1, "", "ineqcv_trans"], [345, 3, 1, "", "ineqcv_trans_kwargs"], [345, 3, 1, "", "ineqcv_wt"], [345, 4, 1, "", "latentfn"], [345, 3, 1, "", "n_eq_constr"], [345, 3, 1, "", "n_ieq_constr"], [345, 3, 1, "", "n_obj"], [345, 3, 1, "", "n_var"], [345, 3, 1, "", "ndecn"], [345, 3, 1, "", "neqcv"], [345, 3, 1, "", "nineqcv"], [345, 3, 1, "", "nlatent"], [345, 3, 1, "", "nobj"], [345, 3, 1, "", "obj_trans"], [345, 3, 1, "", "obj_trans_kwargs"], [345, 3, 1, "", "obj_wt"], [345, 3, 1, "", "ohvmat"], [345, 3, 1, "", "replace_nan_values_by"], [345, 3, 1, "", "strict"], [345, 3, 1, "", "vars"], [345, 3, 1, "", "vtype"], [345, 3, 1, "", "xl"], [345, 3, 1, "", "xu"]], "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueIntegerSelectionProblem": [[346, 3, 1, "", "callback"], [346, 3, 1, "", "data"], [346, 3, 1, "", "decn_space"], [346, 3, 1, "", "decn_space_lower"], [346, 3, 1, "", "decn_space_upper"], [346, 3, 1, "", "elementwise"], [346, 3, 1, "", "elementwise_func"], [346, 3, 1, "", "elementwise_runner"], [346, 3, 1, "", "eqcv_trans"], [346, 3, 1, "", "eqcv_trans_kwargs"], [346, 3, 1, "", "eqcv_wt"], [346, 4, 1, "", "evalfn"], [346, 3, 1, "", "exclude_from_serialization"], [346, 3, 1, "", "ineqcv_trans"], [346, 3, 1, "", "ineqcv_trans_kwargs"], [346, 3, 1, "", "ineqcv_wt"], [346, 4, 1, "", "latentfn"], [346, 3, 1, "", "n_eq_constr"], [346, 3, 1, "", "n_ieq_constr"], [346, 3, 1, "", "n_obj"], [346, 3, 1, "", "n_var"], [346, 3, 1, "", "ndecn"], [346, 3, 1, "", "neqcv"], [346, 3, 1, "", "nineqcv"], [346, 3, 1, "", "nlatent"], [346, 3, 1, "", "nobj"], [346, 3, 1, "", "obj_trans"], [346, 3, 1, "", "obj_trans_kwargs"], [346, 3, 1, "", "obj_wt"], [346, 3, 1, "", "ohvmat"], [346, 3, 1, "", "replace_nan_values_by"], [346, 3, 1, "", "strict"], [346, 3, 1, "", "vars"], [346, 3, 1, "", "vtype"], [346, 3, 1, "", "xl"], [346, 3, 1, "", "xu"]], "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueRealSelectionProblem": [[347, 3, 1, "", "callback"], [347, 3, 1, "", "data"], [347, 3, 1, "", "decn_space"], [347, 3, 1, "", "decn_space_lower"], [347, 3, 1, "", "decn_space_upper"], [347, 3, 1, "", "elementwise"], [347, 3, 1, "", "elementwise_func"], [347, 3, 1, "", "elementwise_runner"], [347, 3, 1, "", "eqcv_trans"], [347, 3, 1, "", "eqcv_trans_kwargs"], [347, 3, 1, "", "eqcv_wt"], [347, 4, 1, "", "evalfn"], [347, 3, 1, "", "exclude_from_serialization"], [347, 3, 1, "", "ineqcv_trans"], [347, 3, 1, "", "ineqcv_trans_kwargs"], [347, 3, 1, "", "ineqcv_wt"], [347, 4, 1, "", "latentfn"], [347, 3, 1, "", "n_eq_constr"], [347, 3, 1, "", "n_ieq_constr"], [347, 3, 1, "", "n_obj"], [347, 3, 1, "", "n_var"], [347, 3, 1, "", "ndecn"], [347, 3, 1, "", "neqcv"], [347, 3, 1, "", "nineqcv"], [347, 3, 1, "", "nlatent"], [347, 3, 1, "", "nobj"], [347, 3, 1, "", "obj_trans"], [347, 3, 1, "", "obj_trans_kwargs"], [347, 3, 1, "", "obj_wt"], [347, 3, 1, "", "ohvmat"], [347, 3, 1, "", "replace_nan_values_by"], [347, 3, 1, "", "strict"], [347, 3, 1, "", "vars"], [347, 3, 1, "", "vtype"], [347, 3, 1, "", "xl"], [347, 3, 1, "", "xu"]], "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueSelectionProblemMixin": [[348, 3, 1, "", "nlatent"], [348, 3, 1, "", "ohvmat"]], "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueSubsetSelectionProblem": [[349, 3, 1, "", "callback"], [349, 3, 1, "", "data"], [349, 3, 1, "", "decn_space"], [349, 3, 1, "", "decn_space_lower"], [349, 3, 1, "", "decn_space_upper"], [349, 3, 1, "", "elementwise"], [349, 3, 1, "", "elementwise_func"], [349, 3, 1, "", "elementwise_runner"], [349, 3, 1, "", "eqcv_trans"], [349, 3, 1, "", "eqcv_trans_kwargs"], [349, 3, 1, "", "eqcv_wt"], [349, 4, 1, "", "evalfn"], [349, 3, 1, "", "exclude_from_serialization"], [349, 3, 1, "", "ineqcv_trans"], [349, 3, 1, "", "ineqcv_trans_kwargs"], [349, 3, 1, "", "ineqcv_wt"], [349, 4, 1, "", "latentfn"], [349, 3, 1, "", "n_eq_constr"], [349, 3, 1, "", "n_ieq_constr"], [349, 3, 1, "", "n_obj"], [349, 3, 1, "", "n_var"], [349, 3, 1, "", "ndecn"], [349, 3, 1, "", "neqcv"], [349, 3, 1, "", "nineqcv"], [349, 3, 1, "", "nlatent"], [349, 3, 1, "", "nobj"], [349, 3, 1, "", "obj_trans"], [349, 3, 1, "", "obj_trans_kwargs"], [349, 3, 1, "", "obj_wt"], [349, 3, 1, "", "ohvmat"], [349, 3, 1, "", "replace_nan_values_by"], [349, 3, 1, "", "strict"], [349, 3, 1, "", "vars"], [349, 3, 1, "", "vtype"], [349, 3, 1, "", "xl"], [349, 3, 1, "", "xu"]], "pybrops.breed.prot.sel.prob.OptimalPopulationValueSelectionProblem": [[351, 1, 1, "", "OptimalPopulationValueSelectionProblemMixin"], [352, 1, 1, "", "OptimalPopulationValueSubsetSelectionProblem"]], "pybrops.breed.prot.sel.prob.OptimalPopulationValueSelectionProblem.OptimalPopulationValueSelectionProblemMixin": [[351, 3, 1, "", "haplomat"], [351, 3, 1, "", "nlatent"], [351, 3, 1, "", "ploidy"]], "pybrops.breed.prot.sel.prob.OptimalPopulationValueSelectionProblem.OptimalPopulationValueSubsetSelectionProblem": [[352, 3, 1, "", "callback"], [352, 3, 1, "", "data"], [352, 3, 1, "", "decn_space"], [352, 3, 1, "", "decn_space_lower"], [352, 3, 1, "", "decn_space_upper"], [352, 3, 1, "", "elementwise"], [352, 3, 1, "", "elementwise_func"], [352, 3, 1, "", "elementwise_runner"], [352, 3, 1, "", "eqcv_trans"], [352, 3, 1, "", "eqcv_trans_kwargs"], [352, 3, 1, "", "eqcv_wt"], [352, 4, 1, "", "evalfn"], [352, 3, 1, "", "exclude_from_serialization"], [352, 3, 1, "", "haplomat"], [352, 3, 1, "", "ineqcv_trans"], [352, 3, 1, "", "ineqcv_trans_kwargs"], [352, 3, 1, "", "ineqcv_wt"], [352, 4, 1, "", "latentfn"], [352, 3, 1, "", "n_eq_constr"], [352, 3, 1, "", "n_ieq_constr"], [352, 3, 1, "", "n_obj"], [352, 3, 1, "", "n_var"], [352, 3, 1, "", "ndecn"], [352, 3, 1, "", "neqcv"], [352, 3, 1, "", "nineqcv"], [352, 3, 1, "", "nlatent"], [352, 3, 1, "", "nobj"], [352, 3, 1, "", "obj_trans"], [352, 3, 1, "", "obj_trans_kwargs"], [352, 3, 1, "", "obj_wt"], [352, 3, 1, "", "ploidy"], [352, 3, 1, "", "replace_nan_values_by"], [352, 3, 1, "", "strict"], [352, 3, 1, "", "vars"], [352, 3, 1, "", "vtype"], [352, 3, 1, "", "xl"], [352, 3, 1, "", "xu"]], "pybrops.breed.prot.sel.prob.RandomSelectionProblem": [[354, 1, 1, "", "RandomBinarySelectionProblem"], [355, 1, 1, "", "RandomIntegerSelectionProblem"], [356, 1, 1, "", "RandomRealSelectionProblem"], [357, 1, 1, "", "RandomSelectionProblemMixin"], [358, 1, 1, "", "RandomSubsetSelectionProblem"]], "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomBinarySelectionProblem": [[354, 3, 1, "", "callback"], [354, 3, 1, "", "data"], [354, 3, 1, "", "decn_space"], [354, 3, 1, "", "decn_space_lower"], [354, 3, 1, "", "decn_space_upper"], [354, 3, 1, "", "elementwise"], [354, 3, 1, "", "elementwise_func"], [354, 3, 1, "", "elementwise_runner"], [354, 3, 1, "", "eqcv_trans"], [354, 3, 1, "", "eqcv_trans_kwargs"], [354, 3, 1, "", "eqcv_wt"], [354, 4, 1, "", "evalfn"], [354, 3, 1, "", "exclude_from_serialization"], [354, 3, 1, "", "ineqcv_trans"], [354, 3, 1, "", "ineqcv_trans_kwargs"], [354, 3, 1, "", "ineqcv_wt"], [354, 4, 1, "", "latentfn"], [354, 3, 1, "", "n_eq_constr"], [354, 3, 1, "", "n_ieq_constr"], [354, 3, 1, "", "n_obj"], [354, 3, 1, "", "n_var"], [354, 3, 1, "", "ndecn"], [354, 3, 1, "", "neqcv"], [354, 3, 1, "", "nineqcv"], [354, 3, 1, "", "nlatent"], [354, 3, 1, "", "nobj"], [354, 3, 1, "", "obj_trans"], [354, 3, 1, "", "obj_trans_kwargs"], [354, 3, 1, "", "obj_wt"], [354, 3, 1, "", "rbv"], [354, 3, 1, "", "replace_nan_values_by"], [354, 3, 1, "", "strict"], [354, 3, 1, "", "vars"], [354, 3, 1, "", "vtype"], [354, 3, 1, "", "xl"], [354, 3, 1, "", "xu"]], "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomIntegerSelectionProblem": [[355, 3, 1, "", "callback"], [355, 3, 1, "", "data"], [355, 3, 1, "", "decn_space"], [355, 3, 1, "", "decn_space_lower"], [355, 3, 1, "", "decn_space_upper"], [355, 3, 1, "", "elementwise"], [355, 3, 1, "", "elementwise_func"], [355, 3, 1, "", "elementwise_runner"], [355, 3, 1, "", "eqcv_trans"], [355, 3, 1, "", "eqcv_trans_kwargs"], [355, 3, 1, "", "eqcv_wt"], [355, 4, 1, "", "evalfn"], [355, 3, 1, "", "exclude_from_serialization"], [355, 3, 1, "", "ineqcv_trans"], [355, 3, 1, "", "ineqcv_trans_kwargs"], [355, 3, 1, "", "ineqcv_wt"], [355, 4, 1, "", "latentfn"], [355, 3, 1, "", "n_eq_constr"], [355, 3, 1, "", "n_ieq_constr"], [355, 3, 1, "", "n_obj"], [355, 3, 1, "", "n_var"], [355, 3, 1, "", "ndecn"], [355, 3, 1, "", "neqcv"], [355, 3, 1, "", "nineqcv"], [355, 3, 1, "", "nlatent"], [355, 3, 1, "", "nobj"], [355, 3, 1, "", "obj_trans"], [355, 3, 1, "", "obj_trans_kwargs"], [355, 3, 1, "", "obj_wt"], [355, 3, 1, "", "rbv"], [355, 3, 1, "", "replace_nan_values_by"], [355, 3, 1, "", "strict"], [355, 3, 1, "", "vars"], [355, 3, 1, "", "vtype"], [355, 3, 1, "", "xl"], [355, 3, 1, "", "xu"]], "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomRealSelectionProblem": [[356, 3, 1, "", "callback"], [356, 3, 1, "", "data"], [356, 3, 1, "", "decn_space"], [356, 3, 1, "", "decn_space_lower"], [356, 3, 1, "", "decn_space_upper"], [356, 3, 1, "", "elementwise"], [356, 3, 1, "", "elementwise_func"], [356, 3, 1, "", "elementwise_runner"], [356, 3, 1, "", "eqcv_trans"], [356, 3, 1, "", "eqcv_trans_kwargs"], [356, 3, 1, "", "eqcv_wt"], [356, 4, 1, "", "evalfn"], [356, 3, 1, "", "exclude_from_serialization"], [356, 3, 1, "", "ineqcv_trans"], [356, 3, 1, "", "ineqcv_trans_kwargs"], [356, 3, 1, "", "ineqcv_wt"], [356, 4, 1, "", "latentfn"], [356, 3, 1, "", "n_eq_constr"], [356, 3, 1, "", "n_ieq_constr"], [356, 3, 1, "", "n_obj"], [356, 3, 1, "", "n_var"], [356, 3, 1, "", "ndecn"], [356, 3, 1, "", "neqcv"], [356, 3, 1, "", "nineqcv"], [356, 3, 1, "", "nlatent"], [356, 3, 1, "", "nobj"], [356, 3, 1, "", "obj_trans"], [356, 3, 1, "", "obj_trans_kwargs"], [356, 3, 1, "", "obj_wt"], [356, 3, 1, "", "rbv"], [356, 3, 1, "", "replace_nan_values_by"], [356, 3, 1, "", "strict"], [356, 3, 1, "", "vars"], [356, 3, 1, "", "vtype"], [356, 3, 1, "", "xl"], [356, 3, 1, "", "xu"]], "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomSelectionProblemMixin": [[357, 3, 1, "", "nlatent"], [357, 3, 1, "", "rbv"]], "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomSubsetSelectionProblem": [[358, 3, 1, "", "callback"], [358, 3, 1, "", "data"], [358, 3, 1, "", "decn_space"], [358, 3, 1, "", "decn_space_lower"], [358, 3, 1, "", "decn_space_upper"], [358, 3, 1, "", "elementwise"], [358, 3, 1, "", "elementwise_func"], [358, 3, 1, "", "elementwise_runner"], [358, 3, 1, "", "eqcv_trans"], [358, 3, 1, "", "eqcv_trans_kwargs"], [358, 3, 1, "", "eqcv_wt"], [358, 4, 1, "", "evalfn"], [358, 3, 1, "", "exclude_from_serialization"], [358, 3, 1, "", "ineqcv_trans"], [358, 3, 1, "", "ineqcv_trans_kwargs"], [358, 3, 1, "", "ineqcv_wt"], [358, 4, 1, "", "latentfn"], [358, 3, 1, "", "n_eq_constr"], [358, 3, 1, "", "n_ieq_constr"], [358, 3, 1, "", "n_obj"], [358, 3, 1, "", "n_var"], [358, 3, 1, "", "ndecn"], [358, 3, 1, "", "neqcv"], [358, 3, 1, "", "nineqcv"], [358, 3, 1, "", "nlatent"], [358, 3, 1, "", "nobj"], [358, 3, 1, "", "obj_trans"], [358, 3, 1, "", "obj_trans_kwargs"], [358, 3, 1, "", "obj_wt"], [358, 3, 1, "", "rbv"], [358, 3, 1, "", "replace_nan_values_by"], [358, 3, 1, "", "strict"], [358, 3, 1, "", "vars"], [358, 3, 1, "", "vtype"], [358, 3, 1, "", "xl"], [358, 3, 1, "", "xu"]], "pybrops.breed.prot.sel.prob.RealLookAheadGeneralizedWeightedGenomicSelectionProblem": [[360, 1, 1, "", "RealLookAheadGeneralizedWeightedGenomicSelectionProblem"]], "pybrops.breed.prot.sel.prob.RealLookAheadGeneralizedWeightedGenomicSelectionProblem.RealLookAheadGeneralizedWeightedGenomicSelectionProblem": [[360, 3, 1, "", "callback"], [360, 3, 1, "", "data"], [360, 3, 1, "", "decn_space"], [360, 3, 1, "", "decn_space_lower"], [360, 3, 1, "", "decn_space_upper"], [360, 3, 1, "", "elementwise"], [360, 3, 1, "", "elementwise_func"], [360, 3, 1, "", "elementwise_runner"], [360, 3, 1, "", "eqcv_trans"], [360, 3, 1, "", "eqcv_trans_kwargs"], [360, 3, 1, "", "eqcv_wt"], [360, 4, 1, "", "evalfn"], [360, 3, 1, "", "exclude_from_serialization"], [360, 3, 1, "", "fndr_algmod"], [360, 3, 1, "", "fndr_pgmat"], [360, 3, 1, "", "ineqcv_trans"], [360, 3, 1, "", "ineqcv_trans_kwargs"], [360, 3, 1, "", "ineqcv_wt"], [360, 4, 1, "", "latentfn"], [360, 3, 1, "", "mtprot"], [360, 3, 1, "", "n_eq_constr"], [360, 3, 1, "", "n_ieq_constr"], [360, 3, 1, "", "n_obj"], [360, 3, 1, "", "n_var"], [360, 3, 1, "", "ncross"], [360, 3, 1, "", "ndecn"], [360, 3, 1, "", "neqcv"], [360, 3, 1, "", "nineqcv"], [360, 3, 1, "", "nlatent"], [360, 3, 1, "", "nobj"], [360, 3, 1, "", "nparent"], [360, 3, 1, "", "nprogeny"], [360, 3, 1, "", "nsimul"], [360, 3, 1, "", "obj_trans"], [360, 3, 1, "", "obj_trans_kwargs"], [360, 3, 1, "", "obj_wt"], [360, 3, 1, "", "replace_nan_values_by"], [360, 3, 1, "", "strict"], [360, 3, 1, "", "vars"], [360, 3, 1, "", "vtype"], [360, 3, 1, "", "xl"], [360, 3, 1, "", "xu"]], "pybrops.breed.prot.sel.prob.RealMateSelectionProblem": [[362, 1, 1, "", "RealMateSelectionProblem"]], "pybrops.breed.prot.sel.prob.RealMateSelectionProblem.RealMateSelectionProblem": [[362, 3, 1, "", "callback"], [362, 3, 1, "", "data"], [362, 3, 1, "", "decn_space"], [362, 3, 1, "", "decn_space_lower"], [362, 3, 1, "", "decn_space_upper"], [362, 3, 1, "", "decn_space_xmap"], [362, 3, 1, "", "elementwise"], [362, 3, 1, "", "elementwise_func"], [362, 3, 1, "", "elementwise_runner"], [362, 3, 1, "", "eqcv_trans"], [362, 3, 1, "", "eqcv_trans_kwargs"], [362, 3, 1, "", "eqcv_wt"], [362, 4, 1, "", "evalfn"], [362, 3, 1, "", "exclude_from_serialization"], [362, 3, 1, "", "ineqcv_trans"], [362, 3, 1, "", "ineqcv_trans_kwargs"], [362, 3, 1, "", "ineqcv_wt"], [362, 4, 1, "", "latentfn"], [362, 3, 1, "", "n_eq_constr"], [362, 3, 1, "", "n_ieq_constr"], [362, 3, 1, "", "n_obj"], [362, 3, 1, "", "n_var"], [362, 3, 1, "", "ndecn"], [362, 3, 1, "", "neqcv"], [362, 3, 1, "", "nineqcv"], [362, 3, 1, "", "nlatent"], [362, 3, 1, "", "nobj"], [362, 3, 1, "", "obj_trans"], [362, 3, 1, "", "obj_trans_kwargs"], [362, 3, 1, "", "obj_wt"], [362, 3, 1, "", "replace_nan_values_by"], [362, 3, 1, "", "strict"], [362, 3, 1, "", "vars"], [362, 3, 1, "", "vtype"], [362, 3, 1, "", "xl"], [362, 3, 1, "", "xu"]], "pybrops.breed.prot.sel.prob.RealSelectionProblem": [[364, 1, 1, "", "RealSelectionProblem"], [365, 2, 1, "", "check_is_RealSelectionProblem"]], "pybrops.breed.prot.sel.prob.RealSelectionProblem.RealSelectionProblem": [[364, 3, 1, "", "callback"], [364, 3, 1, "", "data"], [364, 3, 1, "", "decn_space"], [364, 3, 1, "", "decn_space_lower"], [364, 3, 1, "", "decn_space_upper"], [364, 3, 1, "", "elementwise"], [364, 3, 1, "", "elementwise_func"], [364, 3, 1, "", "elementwise_runner"], [364, 3, 1, "", "eqcv_trans"], [364, 3, 1, "", "eqcv_trans_kwargs"], [364, 3, 1, "", "eqcv_wt"], [364, 4, 1, "", "evalfn"], [364, 3, 1, "", "exclude_from_serialization"], [364, 3, 1, "", "ineqcv_trans"], [364, 3, 1, "", "ineqcv_trans_kwargs"], [364, 3, 1, "", "ineqcv_wt"], [364, 4, 1, "", "latentfn"], [364, 3, 1, "", "n_eq_constr"], [364, 3, 1, "", "n_ieq_constr"], [364, 3, 1, "", "n_obj"], [364, 3, 1, "", "n_var"], [364, 3, 1, "", "ndecn"], [364, 3, 1, "", "neqcv"], [364, 3, 1, "", "nineqcv"], [364, 3, 1, "", "nlatent"], [364, 3, 1, "", "nobj"], [364, 3, 1, "", "obj_trans"], [364, 3, 1, "", "obj_trans_kwargs"], [364, 3, 1, "", "obj_wt"], [364, 3, 1, "", "replace_nan_values_by"], [364, 3, 1, "", "strict"], [364, 3, 1, "", "vars"], [364, 3, 1, "", "vtype"], [364, 3, 1, "", "xl"], [364, 3, 1, "", "xu"]], "pybrops.breed.prot.sel.prob.SelectionProblem": [[367, 1, 1, "", "SelectionProblem"], [368, 2, 1, "", "check_is_SelectionProblem"]], "pybrops.breed.prot.sel.prob.SelectionProblem.SelectionProblem": [[367, 3, 1, "", "callback"], [367, 3, 1, "", "data"], [367, 3, 1, "", "decn_space"], [367, 3, 1, "", "decn_space_lower"], [367, 3, 1, "", "decn_space_upper"], [367, 3, 1, "", "elementwise"], [367, 3, 1, "", "elementwise_func"], [367, 3, 1, "", "elementwise_runner"], [367, 3, 1, "", "eqcv_trans"], [367, 3, 1, "", "eqcv_trans_kwargs"], [367, 3, 1, "", "eqcv_wt"], [367, 4, 1, "", "evalfn"], [367, 3, 1, "", "exclude_from_serialization"], [367, 3, 1, "", "ineqcv_trans"], [367, 3, 1, "", "ineqcv_trans_kwargs"], [367, 3, 1, "", "ineqcv_wt"], [367, 4, 1, "", "latentfn"], [367, 3, 1, "", "n_eq_constr"], [367, 3, 1, "", "n_ieq_constr"], [367, 3, 1, "", "n_obj"], [367, 3, 1, "", "n_var"], [367, 3, 1, "", "ndecn"], [367, 3, 1, "", "neqcv"], [367, 3, 1, "", "nineqcv"], [367, 3, 1, "", "nlatent"], [367, 3, 1, "", "nobj"], [367, 3, 1, "", "obj_trans"], [367, 3, 1, "", "obj_trans_kwargs"], [367, 3, 1, "", "obj_wt"], [367, 3, 1, "", "replace_nan_values_by"], [367, 3, 1, "", "strict"], [367, 3, 1, "", "vars"], [367, 3, 1, "", "vtype"], [367, 3, 1, "", "xl"], [367, 3, 1, "", "xu"]], "pybrops.breed.prot.sel.prob.SubsetMateSelectionProblem": [[370, 1, 1, "", "SubsetMateSelectionProblem"]], "pybrops.breed.prot.sel.prob.SubsetMateSelectionProblem.SubsetMateSelectionProblem": [[370, 3, 1, "", "callback"], [370, 3, 1, "", "data"], [370, 3, 1, "", "decn_space"], [370, 3, 1, "", "decn_space_lower"], [370, 3, 1, "", "decn_space_upper"], [370, 3, 1, "", "decn_space_xmap"], [370, 3, 1, "", "elementwise"], [370, 3, 1, "", "elementwise_func"], [370, 3, 1, "", "elementwise_runner"], [370, 3, 1, "", "eqcv_trans"], [370, 3, 1, "", "eqcv_trans_kwargs"], [370, 3, 1, "", "eqcv_wt"], [370, 4, 1, "", "evalfn"], [370, 3, 1, "", "exclude_from_serialization"], [370, 3, 1, "", "ineqcv_trans"], [370, 3, 1, "", "ineqcv_trans_kwargs"], [370, 3, 1, "", "ineqcv_wt"], [370, 4, 1, "", "latentfn"], [370, 3, 1, "", "n_eq_constr"], [370, 3, 1, "", "n_ieq_constr"], [370, 3, 1, "", "n_obj"], [370, 3, 1, "", "n_var"], [370, 3, 1, "", "ndecn"], [370, 3, 1, "", "neqcv"], [370, 3, 1, "", "nineqcv"], [370, 3, 1, "", "nlatent"], [370, 3, 1, "", "nobj"], [370, 3, 1, "", "obj_trans"], [370, 3, 1, "", "obj_trans_kwargs"], [370, 3, 1, "", "obj_wt"], [370, 3, 1, "", "replace_nan_values_by"], [370, 3, 1, "", "strict"], [370, 3, 1, "", "vars"], [370, 3, 1, "", "vtype"], [370, 3, 1, "", "xl"], [370, 3, 1, "", "xu"]], "pybrops.breed.prot.sel.prob.SubsetSelectionProblem": [[372, 1, 1, "", "SubsetSelectionProblem"], [373, 2, 1, "", "check_is_SubsetSelectionProblem"]], "pybrops.breed.prot.sel.prob.SubsetSelectionProblem.SubsetSelectionProblem": [[372, 3, 1, "", "callback"], [372, 3, 1, "", "data"], [372, 3, 1, "", "decn_space"], [372, 3, 1, "", "decn_space_lower"], [372, 3, 1, "", "decn_space_upper"], [372, 3, 1, "", "elementwise"], [372, 3, 1, "", "elementwise_func"], [372, 3, 1, "", "elementwise_runner"], [372, 3, 1, "", "eqcv_trans"], [372, 3, 1, "", "eqcv_trans_kwargs"], [372, 3, 1, "", "eqcv_wt"], [372, 4, 1, "", "evalfn"], [372, 3, 1, "", "exclude_from_serialization"], [372, 3, 1, "", "ineqcv_trans"], [372, 3, 1, "", "ineqcv_trans_kwargs"], [372, 3, 1, "", "ineqcv_wt"], [372, 4, 1, "", "latentfn"], [372, 3, 1, "", "n_eq_constr"], [372, 3, 1, "", "n_ieq_constr"], [372, 3, 1, "", "n_obj"], [372, 3, 1, "", "n_var"], [372, 3, 1, "", "ndecn"], [372, 3, 1, "", "neqcv"], [372, 3, 1, "", "nineqcv"], [372, 3, 1, "", "nlatent"], [372, 3, 1, "", "nobj"], [372, 3, 1, "", "obj_trans"], [372, 3, 1, "", "obj_trans_kwargs"], [372, 3, 1, "", "obj_wt"], [372, 3, 1, "", "replace_nan_values_by"], [372, 3, 1, "", "strict"], [372, 3, 1, "", "vars"], [372, 3, 1, "", "vtype"], [372, 3, 1, "", "xl"], [372, 3, 1, "", "xu"]], "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem": [[375, 1, 1, "", "UsefulnessCriterionBinaryMateSelectionProblem"], [376, 1, 1, "", "UsefulnessCriterionIntegerMateSelectionProblem"], [377, 1, 1, "", "UsefulnessCriterionRealMateSelectionProblem"], [378, 1, 1, "", "UsefulnessCriterionSelectionProblemMixin"], [379, 1, 1, "", "UsefulnessCriterionSubsetMateSelectionProblem"]], "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionBinaryMateSelectionProblem": [[375, 3, 1, "", "callback"], [375, 3, 1, "", "data"], [375, 3, 1, "", "decn_space"], [375, 3, 1, "", "decn_space_lower"], [375, 3, 1, "", "decn_space_upper"], [375, 3, 1, "", "decn_space_xmap"], [375, 3, 1, "", "elementwise"], [375, 3, 1, "", "elementwise_func"], [375, 3, 1, "", "elementwise_runner"], [375, 3, 1, "", "eqcv_trans"], [375, 3, 1, "", "eqcv_trans_kwargs"], [375, 3, 1, "", "eqcv_wt"], [375, 4, 1, "", "evalfn"], [375, 3, 1, "", "exclude_from_serialization"], [375, 3, 1, "", "ineqcv_trans"], [375, 3, 1, "", "ineqcv_trans_kwargs"], [375, 3, 1, "", "ineqcv_wt"], [375, 4, 1, "", "latentfn"], [375, 3, 1, "", "n_eq_constr"], [375, 3, 1, "", "n_ieq_constr"], [375, 3, 1, "", "n_obj"], [375, 3, 1, "", "n_var"], [375, 3, 1, "", "ndecn"], [375, 3, 1, "", "neqcv"], [375, 3, 1, "", "nineqcv"], [375, 3, 1, "", "nlatent"], [375, 3, 1, "", "nobj"], [375, 3, 1, "", "obj_trans"], [375, 3, 1, "", "obj_trans_kwargs"], [375, 3, 1, "", "obj_wt"], [375, 3, 1, "", "replace_nan_values_by"], [375, 3, 1, "", "strict"], [375, 3, 1, "", "ucmat"], [375, 3, 1, "", "vars"], [375, 3, 1, "", "vtype"], [375, 3, 1, "", "xl"], [375, 3, 1, "", "xu"]], "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionIntegerMateSelectionProblem": [[376, 3, 1, "", "callback"], [376, 3, 1, "", "data"], [376, 3, 1, "", "decn_space"], [376, 3, 1, "", "decn_space_lower"], [376, 3, 1, "", "decn_space_upper"], [376, 3, 1, "", "decn_space_xmap"], [376, 3, 1, "", "elementwise"], [376, 3, 1, "", "elementwise_func"], [376, 3, 1, "", "elementwise_runner"], [376, 3, 1, "", "eqcv_trans"], [376, 3, 1, "", "eqcv_trans_kwargs"], [376, 3, 1, "", "eqcv_wt"], [376, 4, 1, "", "evalfn"], [376, 3, 1, "", "exclude_from_serialization"], [376, 3, 1, "", "ineqcv_trans"], [376, 3, 1, "", "ineqcv_trans_kwargs"], [376, 3, 1, "", "ineqcv_wt"], [376, 4, 1, "", "latentfn"], [376, 3, 1, "", "n_eq_constr"], [376, 3, 1, "", "n_ieq_constr"], [376, 3, 1, "", "n_obj"], [376, 3, 1, "", "n_var"], [376, 3, 1, "", "ndecn"], [376, 3, 1, "", "neqcv"], [376, 3, 1, "", "nineqcv"], [376, 3, 1, "", "nlatent"], [376, 3, 1, "", "nobj"], [376, 3, 1, "", "obj_trans"], [376, 3, 1, "", "obj_trans_kwargs"], [376, 3, 1, "", "obj_wt"], [376, 3, 1, "", "replace_nan_values_by"], [376, 3, 1, "", "strict"], [376, 3, 1, "", "ucmat"], [376, 3, 1, "", "vars"], [376, 3, 1, "", "vtype"], [376, 3, 1, "", "xl"], [376, 3, 1, "", "xu"]], "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionRealMateSelectionProblem": [[377, 3, 1, "", "callback"], [377, 3, 1, "", "data"], [377, 3, 1, "", "decn_space"], [377, 3, 1, "", "decn_space_lower"], [377, 3, 1, "", "decn_space_upper"], [377, 3, 1, "", "decn_space_xmap"], [377, 3, 1, "", "elementwise"], [377, 3, 1, "", "elementwise_func"], [377, 3, 1, "", "elementwise_runner"], [377, 3, 1, "", "eqcv_trans"], [377, 3, 1, "", "eqcv_trans_kwargs"], [377, 3, 1, "", "eqcv_wt"], [377, 4, 1, "", "evalfn"], [377, 3, 1, "", "exclude_from_serialization"], [377, 3, 1, "", "ineqcv_trans"], [377, 3, 1, "", "ineqcv_trans_kwargs"], [377, 3, 1, "", "ineqcv_wt"], [377, 4, 1, "", "latentfn"], [377, 3, 1, "", "n_eq_constr"], [377, 3, 1, "", "n_ieq_constr"], [377, 3, 1, "", "n_obj"], [377, 3, 1, "", "n_var"], [377, 3, 1, "", "ndecn"], [377, 3, 1, "", "neqcv"], [377, 3, 1, "", "nineqcv"], [377, 3, 1, "", "nlatent"], [377, 3, 1, "", "nobj"], [377, 3, 1, "", "obj_trans"], [377, 3, 1, "", "obj_trans_kwargs"], [377, 3, 1, "", "obj_wt"], [377, 3, 1, "", "replace_nan_values_by"], [377, 3, 1, "", "strict"], [377, 3, 1, "", "ucmat"], [377, 3, 1, "", "vars"], [377, 3, 1, "", "vtype"], [377, 3, 1, "", "xl"], [377, 3, 1, "", "xu"]], "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionSelectionProblemMixin": [[378, 3, 1, "", "nlatent"], [378, 3, 1, "", "ucmat"]], "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionSubsetMateSelectionProblem": [[379, 3, 1, "", "callback"], [379, 3, 1, "", "data"], [379, 3, 1, "", "decn_space"], [379, 3, 1, "", "decn_space_lower"], [379, 3, 1, "", "decn_space_upper"], [379, 3, 1, "", "decn_space_xmap"], [379, 3, 1, "", "elementwise"], [379, 3, 1, "", "elementwise_func"], [379, 3, 1, "", "elementwise_runner"], [379, 3, 1, "", "eqcv_trans"], [379, 3, 1, "", "eqcv_trans_kwargs"], [379, 3, 1, "", "eqcv_wt"], [379, 4, 1, "", "evalfn"], [379, 3, 1, "", "exclude_from_serialization"], [379, 3, 1, "", "ineqcv_trans"], [379, 3, 1, "", "ineqcv_trans_kwargs"], [379, 3, 1, "", "ineqcv_wt"], [379, 4, 1, "", "latentfn"], [379, 3, 1, "", "n_eq_constr"], [379, 3, 1, "", "n_ieq_constr"], [379, 3, 1, "", "n_obj"], [379, 3, 1, "", "n_var"], [379, 3, 1, "", "ndecn"], [379, 3, 1, "", "neqcv"], [379, 3, 1, "", "nineqcv"], [379, 3, 1, "", "nlatent"], [379, 3, 1, "", "nobj"], [379, 3, 1, "", "obj_trans"], [379, 3, 1, "", "obj_trans_kwargs"], [379, 3, 1, "", "obj_wt"], [379, 3, 1, "", "replace_nan_values_by"], [379, 3, 1, "", "strict"], [379, 3, 1, "", "ucmat"], [379, 3, 1, "", "vars"], [379, 3, 1, "", "vtype"], [379, 3, 1, "", "xl"], [379, 3, 1, "", "xu"]], "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem": [[381, 1, 1, "", "WeightedGenomicBinarySelectionProblem"], [382, 1, 1, "", "WeightedGenomicIntegerSelectionProblem"], [383, 1, 1, "", "WeightedGenomicRealSelectionProblem"], [384, 1, 1, "", "WeightedGenomicSubsetSelectionProblem"]], "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicBinarySelectionProblem": [[381, 3, 1, "", "callback"], [381, 3, 1, "", "data"], [381, 3, 1, "", "decn_space"], [381, 3, 1, "", "decn_space_lower"], [381, 3, 1, "", "decn_space_upper"], [381, 3, 1, "", "elementwise"], [381, 3, 1, "", "elementwise_func"], [381, 3, 1, "", "elementwise_runner"], [381, 3, 1, "", "eqcv_trans"], [381, 3, 1, "", "eqcv_trans_kwargs"], [381, 3, 1, "", "eqcv_wt"], [381, 4, 1, "", "evalfn"], [381, 3, 1, "", "exclude_from_serialization"], [381, 3, 1, "", "gwgebv"], [381, 3, 1, "", "ineqcv_trans"], [381, 3, 1, "", "ineqcv_trans_kwargs"], [381, 3, 1, "", "ineqcv_wt"], [381, 4, 1, "", "latentfn"], [381, 3, 1, "", "n_eq_constr"], [381, 3, 1, "", "n_ieq_constr"], [381, 3, 1, "", "n_obj"], [381, 3, 1, "", "n_var"], [381, 3, 1, "", "ndecn"], [381, 3, 1, "", "neqcv"], [381, 3, 1, "", "nineqcv"], [381, 3, 1, "", "nlatent"], [381, 3, 1, "", "nobj"], [381, 3, 1, "", "obj_trans"], [381, 3, 1, "", "obj_trans_kwargs"], [381, 3, 1, "", "obj_wt"], [381, 3, 1, "", "replace_nan_values_by"], [381, 3, 1, "", "strict"], [381, 3, 1, "", "vars"], [381, 3, 1, "", "vtype"], [381, 3, 1, "", "xl"], [381, 3, 1, "", "xu"]], "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicIntegerSelectionProblem": [[382, 3, 1, "", "callback"], [382, 3, 1, "", "data"], [382, 3, 1, "", "decn_space"], [382, 3, 1, "", "decn_space_lower"], [382, 3, 1, "", "decn_space_upper"], [382, 3, 1, "", "elementwise"], [382, 3, 1, "", "elementwise_func"], [382, 3, 1, "", "elementwise_runner"], [382, 3, 1, "", "eqcv_trans"], [382, 3, 1, "", "eqcv_trans_kwargs"], [382, 3, 1, "", "eqcv_wt"], [382, 4, 1, "", "evalfn"], [382, 3, 1, "", "exclude_from_serialization"], [382, 3, 1, "", "gwgebv"], [382, 3, 1, "", "ineqcv_trans"], [382, 3, 1, "", "ineqcv_trans_kwargs"], [382, 3, 1, "", "ineqcv_wt"], [382, 4, 1, "", "latentfn"], [382, 3, 1, "", "n_eq_constr"], [382, 3, 1, "", "n_ieq_constr"], [382, 3, 1, "", "n_obj"], [382, 3, 1, "", "n_var"], [382, 3, 1, "", "ndecn"], [382, 3, 1, "", "neqcv"], [382, 3, 1, "", "nineqcv"], [382, 3, 1, "", "nlatent"], [382, 3, 1, "", "nobj"], [382, 3, 1, "", "obj_trans"], [382, 3, 1, "", "obj_trans_kwargs"], [382, 3, 1, "", "obj_wt"], [382, 3, 1, "", "replace_nan_values_by"], [382, 3, 1, "", "strict"], [382, 3, 1, "", "vars"], [382, 3, 1, "", "vtype"], [382, 3, 1, "", "xl"], [382, 3, 1, "", "xu"]], "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicRealSelectionProblem": [[383, 3, 1, "", "callback"], [383, 3, 1, "", "data"], [383, 3, 1, "", "decn_space"], [383, 3, 1, "", "decn_space_lower"], [383, 3, 1, "", "decn_space_upper"], [383, 3, 1, "", "elementwise"], [383, 3, 1, "", "elementwise_func"], [383, 3, 1, "", "elementwise_runner"], [383, 3, 1, "", "eqcv_trans"], [383, 3, 1, "", "eqcv_trans_kwargs"], [383, 3, 1, "", "eqcv_wt"], [383, 4, 1, "", "evalfn"], [383, 3, 1, "", "exclude_from_serialization"], [383, 3, 1, "", "gwgebv"], [383, 3, 1, "", "ineqcv_trans"], [383, 3, 1, "", "ineqcv_trans_kwargs"], [383, 3, 1, "", "ineqcv_wt"], [383, 4, 1, "", "latentfn"], [383, 3, 1, "", "n_eq_constr"], [383, 3, 1, "", "n_ieq_constr"], [383, 3, 1, "", "n_obj"], [383, 3, 1, "", "n_var"], [383, 3, 1, "", "ndecn"], [383, 3, 1, "", "neqcv"], [383, 3, 1, "", "nineqcv"], [383, 3, 1, "", "nlatent"], [383, 3, 1, "", "nobj"], [383, 3, 1, "", "obj_trans"], [383, 3, 1, "", "obj_trans_kwargs"], [383, 3, 1, "", "obj_wt"], [383, 3, 1, "", "replace_nan_values_by"], [383, 3, 1, "", "strict"], [383, 3, 1, "", "vars"], [383, 3, 1, "", "vtype"], [383, 3, 1, "", "xl"], [383, 3, 1, "", "xu"]], "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicSubsetSelectionProblem": [[384, 3, 1, "", "callback"], [384, 3, 1, "", "data"], [384, 3, 1, "", "decn_space"], [384, 3, 1, "", "decn_space_lower"], [384, 3, 1, "", "decn_space_upper"], [384, 3, 1, "", "elementwise"], [384, 3, 1, "", "elementwise_func"], [384, 3, 1, "", "elementwise_runner"], [384, 3, 1, "", "eqcv_trans"], [384, 3, 1, "", "eqcv_trans_kwargs"], [384, 3, 1, "", "eqcv_wt"], [384, 4, 1, "", "evalfn"], [384, 3, 1, "", "exclude_from_serialization"], [384, 3, 1, "", "gwgebv"], [384, 3, 1, "", "ineqcv_trans"], [384, 3, 1, "", "ineqcv_trans_kwargs"], [384, 3, 1, "", "ineqcv_wt"], [384, 4, 1, "", "latentfn"], [384, 3, 1, "", "n_eq_constr"], [384, 3, 1, "", "n_ieq_constr"], [384, 3, 1, "", "n_obj"], [384, 3, 1, "", "n_var"], [384, 3, 1, "", "ndecn"], [384, 3, 1, "", "neqcv"], [384, 3, 1, "", "nineqcv"], [384, 3, 1, "", "nlatent"], [384, 3, 1, "", "nobj"], [384, 3, 1, "", "obj_trans"], [384, 3, 1, "", "obj_trans_kwargs"], [384, 3, 1, "", "obj_wt"], [384, 3, 1, "", "replace_nan_values_by"], [384, 3, 1, "", "strict"], [384, 3, 1, "", "vars"], [384, 3, 1, "", "vtype"], [384, 3, 1, "", "xl"], [384, 3, 1, "", "xu"]], "pybrops.breed.prot.sel.prob.trans": [[386, 2, 1, "", "trans_decnvec_sum_eq"], [387, 2, 1, "", "trans_dot"], [388, 2, 1, "", "trans_empty"], [389, 2, 1, "", "trans_identity"], [390, 2, 1, "", "trans_ndpt_to_vec_dist"], [391, 2, 1, "", "trans_sum"]], "pybrops.breed.prot.sel.soln": [[393, 0, 0, "-", "BinaryMateSelectionSolution"], [396, 0, 0, "-", "BinarySelectionSolution"], [399, 0, 0, "-", "IntegerMateSelectionSolution"], [402, 0, 0, "-", "IntegerSelectionSolution"], [405, 0, 0, "-", "MateSelectionSolution"], [408, 0, 0, "-", "RealMateSelectionSolution"], [411, 0, 0, "-", "RealSelectionSolution"], [414, 0, 0, "-", "SelectionSolution"], [417, 0, 0, "-", "SubsetMateSelectionSolution"], [420, 0, 0, "-", "SubsetSelectionSolution"]], "pybrops.breed.prot.sel.soln.BinaryMateSelectionSolution": [[394, 1, 1, "", "BinaryMateSelectionSolution"], [395, 2, 1, "", "check_is_BinaryMateSelectionSolution"]], "pybrops.breed.prot.sel.soln.BinaryMateSelectionSolution.BinaryMateSelectionSolution": [[394, 3, 1, "", "decn_space"], [394, 3, 1, "", "decn_space_lower"], [394, 3, 1, "", "decn_space_upper"], [394, 3, 1, "", "decn_space_xmap"], [394, 3, 1, "", "eqcv_wt"], [394, 3, 1, "", "ineqcv_wt"], [394, 3, 1, "", "ndecn"], [394, 3, 1, "", "neqcv"], [394, 3, 1, "", "nineqcv"], [394, 3, 1, "", "nobj"], [394, 3, 1, "", "nsoln"], [394, 3, 1, "", "obj_wt"], [394, 3, 1, "", "soln_decn"], [394, 3, 1, "", "soln_eqcv"], [394, 3, 1, "", "soln_ineqcv"], [394, 3, 1, "", "soln_obj"]], "pybrops.breed.prot.sel.soln.BinarySelectionSolution": [[397, 1, 1, "", "BinarySelectionSolution"], [398, 2, 1, "", "check_is_BinarySelectionSolution"]], "pybrops.breed.prot.sel.soln.BinarySelectionSolution.BinarySelectionSolution": [[397, 3, 1, "", "decn_space"], [397, 3, 1, "", "decn_space_lower"], [397, 3, 1, "", "decn_space_upper"], [397, 3, 1, "", "eqcv_wt"], [397, 3, 1, "", "ineqcv_wt"], [397, 3, 1, "", "ndecn"], [397, 3, 1, "", "neqcv"], [397, 3, 1, "", "nineqcv"], [397, 3, 1, "", "nobj"], [397, 3, 1, "", "nsoln"], [397, 3, 1, "", "obj_wt"], [397, 3, 1, "", "soln_decn"], [397, 3, 1, "", "soln_eqcv"], [397, 3, 1, "", "soln_ineqcv"], [397, 3, 1, "", "soln_obj"]], "pybrops.breed.prot.sel.soln.IntegerMateSelectionSolution": [[400, 1, 1, "", "IntegerMateSelectionSolution"], [401, 2, 1, "", "check_is_IntegerMateSelectionSolution"]], "pybrops.breed.prot.sel.soln.IntegerMateSelectionSolution.IntegerMateSelectionSolution": [[400, 3, 1, "", "decn_space"], [400, 3, 1, "", "decn_space_lower"], [400, 3, 1, "", "decn_space_upper"], [400, 3, 1, "", "decn_space_xmap"], [400, 3, 1, "", "eqcv_wt"], [400, 3, 1, "", "ineqcv_wt"], [400, 3, 1, "", "ndecn"], [400, 3, 1, "", "neqcv"], [400, 3, 1, "", "nineqcv"], [400, 3, 1, "", "nobj"], [400, 3, 1, "", "nsoln"], [400, 3, 1, "", "obj_wt"], [400, 3, 1, "", "soln_decn"], [400, 3, 1, "", "soln_eqcv"], [400, 3, 1, "", "soln_ineqcv"], [400, 3, 1, "", "soln_obj"]], "pybrops.breed.prot.sel.soln.IntegerSelectionSolution": [[403, 1, 1, "", "IntegerSelectionSolution"], [404, 2, 1, "", "check_is_IntegerSelectionSolution"]], "pybrops.breed.prot.sel.soln.IntegerSelectionSolution.IntegerSelectionSolution": [[403, 3, 1, "", "decn_space"], [403, 3, 1, "", "decn_space_lower"], [403, 3, 1, "", "decn_space_upper"], [403, 3, 1, "", "eqcv_wt"], [403, 3, 1, "", "ineqcv_wt"], [403, 3, 1, "", "ndecn"], [403, 3, 1, "", "neqcv"], [403, 3, 1, "", "nineqcv"], [403, 3, 1, "", "nobj"], [403, 3, 1, "", "nsoln"], [403, 3, 1, "", "obj_wt"], [403, 3, 1, "", "soln_decn"], [403, 3, 1, "", "soln_eqcv"], [403, 3, 1, "", "soln_ineqcv"], [403, 3, 1, "", "soln_obj"]], "pybrops.breed.prot.sel.soln.MateSelectionSolution": [[406, 1, 1, "", "MateSelectionSolution"], [407, 2, 1, "", "check_is_MateSelectionSolution"]], "pybrops.breed.prot.sel.soln.MateSelectionSolution.MateSelectionSolution": [[406, 3, 1, "", "decn_space"], [406, 3, 1, "", "decn_space_lower"], [406, 3, 1, "", "decn_space_upper"], [406, 3, 1, "", "decn_space_xmap"], [406, 3, 1, "", "eqcv_wt"], [406, 3, 1, "", "ineqcv_wt"], [406, 3, 1, "", "ndecn"], [406, 3, 1, "", "neqcv"], [406, 3, 1, "", "nineqcv"], [406, 3, 1, "", "nobj"], [406, 3, 1, "", "nsoln"], [406, 3, 1, "", "obj_wt"], [406, 3, 1, "", "soln_decn"], [406, 3, 1, "", "soln_eqcv"], [406, 3, 1, "", "soln_ineqcv"], [406, 3, 1, "", "soln_obj"]], "pybrops.breed.prot.sel.soln.RealMateSelectionSolution": [[409, 1, 1, "", "RealMateSelectionSolution"], [410, 2, 1, "", "check_is_RealMateSelectionSolution"]], "pybrops.breed.prot.sel.soln.RealMateSelectionSolution.RealMateSelectionSolution": [[409, 3, 1, "", "decn_space"], [409, 3, 1, "", "decn_space_lower"], [409, 3, 1, "", "decn_space_upper"], [409, 3, 1, "", "decn_space_xmap"], [409, 3, 1, "", "eqcv_wt"], [409, 3, 1, "", "ineqcv_wt"], [409, 3, 1, "", "ndecn"], [409, 3, 1, "", "neqcv"], [409, 3, 1, "", "nineqcv"], [409, 3, 1, "", "nobj"], [409, 3, 1, "", "nsoln"], [409, 3, 1, "", "obj_wt"], [409, 3, 1, "", "soln_decn"], [409, 3, 1, "", "soln_eqcv"], [409, 3, 1, "", "soln_ineqcv"], [409, 3, 1, "", "soln_obj"]], "pybrops.breed.prot.sel.soln.RealSelectionSolution": [[412, 1, 1, "", "RealSelectionSolution"], [413, 2, 1, "", "check_is_RealSelectionSolution"]], "pybrops.breed.prot.sel.soln.RealSelectionSolution.RealSelectionSolution": [[412, 3, 1, "", "decn_space"], [412, 3, 1, "", "decn_space_lower"], [412, 3, 1, "", "decn_space_upper"], [412, 3, 1, "", "eqcv_wt"], [412, 3, 1, "", "ineqcv_wt"], [412, 3, 1, "", "ndecn"], [412, 3, 1, "", "neqcv"], [412, 3, 1, "", "nineqcv"], [412, 3, 1, "", "nobj"], [412, 3, 1, "", "nsoln"], [412, 3, 1, "", "obj_wt"], [412, 3, 1, "", "soln_decn"], [412, 3, 1, "", "soln_eqcv"], [412, 3, 1, "", "soln_ineqcv"], [412, 3, 1, "", "soln_obj"]], "pybrops.breed.prot.sel.soln.SelectionSolution": [[415, 1, 1, "", "SelectionSolution"], [416, 2, 1, "", "check_is_SelectionSolution"]], "pybrops.breed.prot.sel.soln.SelectionSolution.SelectionSolution": [[415, 3, 1, "", "decn_space"], [415, 3, 1, "", "decn_space_lower"], [415, 3, 1, "", "decn_space_upper"], [415, 3, 1, "", "eqcv_wt"], [415, 3, 1, "", "ineqcv_wt"], [415, 3, 1, "", "ndecn"], [415, 3, 1, "", "neqcv"], [415, 3, 1, "", "nineqcv"], [415, 3, 1, "", "nobj"], [415, 3, 1, "", "nsoln"], [415, 3, 1, "", "obj_wt"], [415, 3, 1, "", "soln_decn"], [415, 3, 1, "", "soln_eqcv"], [415, 3, 1, "", "soln_ineqcv"], [415, 3, 1, "", "soln_obj"]], "pybrops.breed.prot.sel.soln.SubsetMateSelectionSolution": [[418, 1, 1, "", "SubsetMateSelectionSolution"], [419, 2, 1, "", "check_is_SubsetMateSelectionSolution"]], "pybrops.breed.prot.sel.soln.SubsetMateSelectionSolution.SubsetMateSelectionSolution": [[418, 3, 1, "", "decn_space"], [418, 3, 1, "", "decn_space_lower"], [418, 3, 1, "", "decn_space_upper"], [418, 3, 1, "", "decn_space_xmap"], [418, 3, 1, "", "eqcv_wt"], [418, 3, 1, "", "ineqcv_wt"], [418, 3, 1, "", "ndecn"], [418, 3, 1, "", "neqcv"], [418, 3, 1, "", "nineqcv"], [418, 3, 1, "", "nobj"], [418, 3, 1, "", "nsoln"], [418, 3, 1, "", "obj_wt"], [418, 3, 1, "", "soln_decn"], [418, 3, 1, "", "soln_eqcv"], [418, 3, 1, "", "soln_ineqcv"], [418, 3, 1, "", "soln_obj"]], "pybrops.breed.prot.sel.soln.SubsetSelectionSolution": [[421, 1, 1, "", "SubsetSelectionSolution"], [422, 2, 1, "", "check_is_SubsetSelectionSolution"]], "pybrops.breed.prot.sel.soln.SubsetSelectionSolution.SubsetSelectionSolution": [[421, 3, 1, "", "decn_space"], [421, 3, 1, "", "decn_space_lower"], [421, 3, 1, "", "decn_space_upper"], [421, 3, 1, "", "eqcv_wt"], [421, 3, 1, "", "ineqcv_wt"], [421, 3, 1, "", "ndecn"], [421, 3, 1, "", "neqcv"], [421, 3, 1, "", "nineqcv"], [421, 3, 1, "", "nobj"], [421, 3, 1, "", "nsoln"], [421, 3, 1, "", "obj_wt"], [421, 3, 1, "", "soln_decn"], [421, 3, 1, "", "soln_eqcv"], [421, 3, 1, "", "soln_ineqcv"], [421, 3, 1, "", "soln_obj"]], "pybrops.breed.prot.sel.targetfn": [[424, 2, 1, "", "target_negative"], [425, 2, 1, "", "target_positive"], [426, 2, 1, "", "target_stabilizing"]], "pybrops.breed.prot.sel.transfn": [[428, 2, 1, "", "trans_dot"], [429, 2, 1, "", "trans_flatten"], [430, 2, 1, "", "trans_identity_unconstrained"], [431, 2, 1, "", "trans_inbmax_penalty"], [432, 2, 1, "", "trans_max_inbreeding_constraint"], [433, 2, 1, "", "trans_ndpt_to_vec_dist"], [434, 2, 1, "", "trans_sum"], [435, 2, 1, "", "trans_sum_inbmax_penalty"]], "pybrops.breed.prot.sel.weightfn": [[437, 2, 1, "", "weight_absolute"], [438, 2, 1, "", "weight_one"]], "pybrops.core": [[440, 0, 0, "-", "error"], [590, 0, 0, "-", "io"], [618, 0, 0, "-", "mat"], [714, 0, 0, "-", "random"], [723, 0, 0, "-", "util"]], "pybrops.core.error": [[441, 0, 0, "-", "error_attr_python"], [445, 0, 0, "-", "error_generic_numpy"], [453, 0, 0, "-", "error_generic_python"], [455, 0, 0, "-", "error_io_python"], [459, 0, 0, "-", "error_type_h5py"], [461, 0, 0, "-", "error_type_numpy"], [490, 0, 0, "-", "error_type_pandas"], [493, 0, 0, "-", "error_type_python"], [526, 0, 0, "-", "error_value_h5py"], [530, 0, 0, "-", "error_value_numpy"], [557, 0, 0, "-", "error_value_pandas"], [566, 0, 0, "-", "error_value_python"]], "pybrops.core.error.error_attr_python": [[442, 2, 1, "", "check_is_callable"], [443, 2, 1, "", "check_is_iterable"], [444, 2, 1, "", "error_readonly"]], "pybrops.core.error.error_generic_numpy": [[446, 2, 1, "", "generic_check_ndarray_eq"], [447, 2, 1, "", "generic_check_ndarray_is_square"], [448, 2, 1, "", "generic_check_ndarray_ndim"], [449, 2, 1, "", "generic_check_ndarray_ndim_gteq"], [450, 2, 1, "", "generic_check_ndarray_shape"], [451, 2, 1, "", "generic_check_ndarray_size"], [452, 2, 1, "", "generic_check_ndarray_sum"]], "pybrops.core.error.error_generic_python": [[454, 2, 1, "", "generic_check_isinstance"]], "pybrops.core.error.error_io_python": [[456, 2, 1, "", "check_directory_exists"], [457, 2, 1, "", "check_file_exists"], [458, 2, 1, "", "check_path_exists"]], "pybrops.core.error.error_type_h5py": [[460, 2, 1, "", "check_is_h5py_File"]], "pybrops.core.error.error_type_numpy": [[462, 2, 1, "", "check_is_Generator"], [463, 2, 1, "", "check_is_Generator_or_RandomState"], [464, 2, 1, "", "check_is_Integral_or_ndarray"], [465, 2, 1, "", "check_is_Number_or_ndarray"], [466, 2, 1, "", "check_is_RandomState"], [467, 2, 1, "", "check_is_Real_or_ndarray"], [468, 2, 1, "", "check_is_ndarray"], [469, 2, 1, "", "check_is_str_or_ndarray"], [470, 2, 1, "", "check_ndarray_dtype"], [471, 2, 1, "", "check_ndarray_dtype_is_bool"], [472, 2, 1, "", "check_ndarray_dtype_is_bool_or_integer"], [473, 2, 1, "", "check_ndarray_dtype_is_bool_or_number"], [474, 2, 1, "", "check_ndarray_dtype_is_float16"], [475, 2, 1, "", "check_ndarray_dtype_is_float32"], [476, 2, 1, "", "check_ndarray_dtype_is_float64"], [477, 2, 1, "", "check_ndarray_dtype_is_floating"], [478, 2, 1, "", "check_ndarray_dtype_is_int16"], [479, 2, 1, "", "check_ndarray_dtype_is_int32"], [480, 2, 1, "", "check_ndarray_dtype_is_int64"], [481, 2, 1, "", "check_ndarray_dtype_is_int8"], [482, 2, 1, "", "check_ndarray_dtype_is_integer"], [483, 2, 1, "", "check_ndarray_dtype_is_integer_or_floating"], [484, 2, 1, "", "check_ndarray_dtype_is_number"], [485, 2, 1, "", "check_ndarray_dtype_is_object"], [486, 2, 1, "", "check_ndarray_dtype_is_object_or_string"], [487, 2, 1, "", "check_ndarray_dtype_is_real"], [488, 2, 1, "", "check_ndarray_dtype_is_string"], [489, 2, 1, "", "check_ndarray_dtype_is_unicode"]], "pybrops.core.error.error_type_pandas": [[491, 2, 1, "", "check_Series_all_type"], [492, 2, 1, "", "check_is_pandas_DataFrame"]], "pybrops.core.error.error_type_python": [[494, 2, 1, "", "check_Sequence_all_type"], [495, 2, 1, "", "check_inherits"], [496, 2, 1, "", "check_is_Callable"], [497, 2, 1, "", "check_is_Complex"], [498, 2, 1, "", "check_is_Container"], [499, 2, 1, "", "check_is_Integral"], [500, 2, 1, "", "check_is_Integral_or_None"], [501, 2, 1, "", "check_is_Integral_or_inf"], [502, 2, 1, "", "check_is_Number"], [503, 2, 1, "", "check_is_Real"], [504, 2, 1, "", "check_is_Sequence"], [505, 2, 1, "", "check_is_array_like"], [506, 2, 1, "", "check_is_bool"], [507, 2, 1, "", "check_is_bytes"], [508, 2, 1, "", "check_is_class"], [509, 2, 1, "", "check_is_dict"], [510, 2, 1, "", "check_is_float"], [511, 2, 1, "", "check_is_frozenset"], [512, 2, 1, "", "check_is_int"], [513, 2, 1, "", "check_is_int_or_None"], [514, 2, 1, "", "check_is_int_or_inf"], [515, 2, 1, "", "check_is_list"], [516, 2, 1, "", "check_is_list_or_tuple"], [517, 2, 1, "", "check_is_range"], [518, 2, 1, "", "check_is_set"], [519, 2, 1, "", "check_is_str"], [520, 2, 1, "", "check_is_str_or_Integral"], [521, 2, 1, "", "check_is_str_or_Sequence"], [522, 2, 1, "", "check_is_str_or_iterable"], [523, 2, 1, "", "check_is_tuple"], [524, 2, 1, "", "check_is_type"], [525, 2, 1, "", "check_isinstance"]], "pybrops.core.error.error_value_h5py": [[527, 2, 1, "", "check_h5py_File_has_group"], [528, 2, 1, "", "check_h5py_File_has_groups"], [529, 2, 1, "", "check_h5py_File_is_writable"]], "pybrops.core.error.error_value_numpy": [[531, 2, 1, "", "check_ndarray_all_gt"], [532, 2, 1, "", "check_ndarray_all_gteq"], [533, 2, 1, "", "check_ndarray_axis_len"], [534, 2, 1, "", "check_ndarray_axis_len_eq"], [535, 2, 1, "", "check_ndarray_axis_len_gt"], [536, 2, 1, "", "check_ndarray_axis_len_gteq"], [537, 2, 1, "", "check_ndarray_axis_len_lt"], [538, 2, 1, "", "check_ndarray_axis_len_lteq"], [539, 2, 1, "", "check_ndarray_eq"], [540, 2, 1, "", "check_ndarray_has_value"], [541, 2, 1, "", "check_ndarray_has_values"], [542, 2, 1, "", "check_ndarray_in_interval"], [543, 2, 1, "", "check_ndarray_is_binary"], [544, 2, 1, "", "check_ndarray_is_hypercube"], [545, 2, 1, "", "check_ndarray_is_square"], [546, 2, 1, "", "check_ndarray_is_triu"], [547, 2, 1, "", "check_ndarray_len_eq"], [548, 2, 1, "", "check_ndarray_len_gteq"], [549, 2, 1, "", "check_ndarray_len_is_multiple_of"], [550, 2, 1, "", "check_ndarray_mean_is_approx"], [551, 2, 1, "", "check_ndarray_ndim"], [552, 2, 1, "", "check_ndarray_ndim_gteq"], [553, 2, 1, "", "check_ndarray_shape_eq"], [554, 2, 1, "", "check_ndarray_size"], [555, 2, 1, "", "check_ndarray_std_is_approx"], [556, 2, 1, "", "check_ndarray_sum"]], "pybrops.core.error.error_value_pandas": [[558, 2, 1, "", "check_pandas_DataFrame_has_column"], [559, 2, 1, "", "check_pandas_DataFrame_has_column_index"], [560, 2, 1, "", "check_pandas_DataFrame_has_column_indices"], [561, 2, 1, "", "check_pandas_DataFrame_has_columns"], [562, 2, 1, "", "check_pandas_Series_has_index"], [563, 2, 1, "", "check_pandas_Series_has_indices"], [564, 2, 1, "", "check_pandas_Series_has_value"], [565, 2, 1, "", "check_pandas_Series_has_values"]], "pybrops.core.error.error_value_python": [[567, 2, 1, "", "check_Sequence_has_index"], [568, 2, 1, "", "check_Sequence_has_indices"], [569, 2, 1, "", "check_Sequence_has_value"], [570, 2, 1, "", "check_Sequence_has_values"], [571, 2, 1, "", "check_all_equal"], [572, 2, 1, "", "check_dict_has_keys"], [573, 2, 1, "", "check_dict_keys_all_type"], [574, 2, 1, "", "check_dict_values_all_type"], [575, 2, 1, "", "check_dict_values_have_equal_len"], [576, 2, 1, "", "check_dict_values_len_eq"], [577, 2, 1, "", "check_is_eq"], [578, 2, 1, "", "check_is_gt"], [579, 2, 1, "", "check_is_gteq"], [580, 2, 1, "", "check_is_in_interval_exclusive"], [581, 2, 1, "", "check_is_in_interval_inclusive"], [582, 2, 1, "", "check_is_lt"], [583, 2, 1, "", "check_is_lteq"], [584, 2, 1, "", "check_is_neq"], [585, 2, 1, "", "check_is_not_None"], [586, 2, 1, "", "check_len"], [587, 2, 1, "", "check_len_eq"], [588, 2, 1, "", "check_str_value"], [589, 2, 1, "", "check_tuple_len_eq"]], "pybrops.core.io": [[591, 0, 0, "-", "CSVDictInputOutput"], [594, 0, 0, "-", "CSVInputOutput"], [597, 0, 0, "-", "DictInputOutput"], [600, 0, 0, "-", "HDF5InputOutput"], [603, 0, 0, "-", "NPYInputOutput"], [606, 0, 0, "-", "NPZInputOutput"], [609, 0, 0, "-", "NumPyInputOutput"], [612, 0, 0, "-", "PandasDictInputOutput"], [615, 0, 0, "-", "PandasInputOutput"]], "pybrops.core.io.CSVDictInputOutput": [[592, 1, 1, "", "CSVDictInputOutput"], [593, 2, 1, "", "check_is_CSVDictInputOutput"]], "pybrops.core.io.CSVDictInputOutput.CSVDictInputOutput": [[592, 4, 1, "", "from_csv_dict"], [592, 4, 1, "", "to_csv_dict"]], "pybrops.core.io.CSVInputOutput": [[595, 1, 1, "", "CSVInputOutput"], [596, 2, 1, "", "check_is_CSVInputOutput"]], "pybrops.core.io.CSVInputOutput.CSVInputOutput": [[595, 4, 1, "", "from_csv"], [595, 4, 1, "", "to_csv"]], "pybrops.core.io.DictInputOutput": [[598, 1, 1, "", "DictInputOutput"], [599, 2, 1, "", "check_is_DictInputOutput"]], "pybrops.core.io.DictInputOutput.DictInputOutput": [[598, 4, 1, "", "from_dict"], [598, 4, 1, "", "to_dict"]], "pybrops.core.io.HDF5InputOutput": [[601, 1, 1, "", "HDF5InputOutput"], [602, 2, 1, "", "check_is_HDF5InputOutput"]], "pybrops.core.io.HDF5InputOutput.HDF5InputOutput": [[601, 4, 1, "", "from_hdf5"], [601, 4, 1, "", "to_hdf5"]], "pybrops.core.io.NPYInputOutput": [[604, 1, 1, "", "NPYInputOutput"], [605, 2, 1, "", "check_is_NPYInputOutput"]], "pybrops.core.io.NPYInputOutput.NPYInputOutput": [[604, 4, 1, "", "from_npy"], [604, 4, 1, "", "to_npy"]], "pybrops.core.io.NPZInputOutput": [[607, 1, 1, "", "NPZInputOutput"], [608, 2, 1, "", "check_is_NPZInputOutput"]], "pybrops.core.io.NPZInputOutput.NPZInputOutput": [[607, 4, 1, "", "from_npz"], [607, 4, 1, "", "to_npz"]], "pybrops.core.io.NumPyInputOutput": [[610, 1, 1, "", "NumPyInputOutput"], [611, 2, 1, "", "check_is_NumPyInputOutput"]], "pybrops.core.io.NumPyInputOutput.NumPyInputOutput": [[610, 4, 1, "", "from_numpy"], [610, 4, 1, "", "to_numpy"]], "pybrops.core.io.PandasDictInputOutput": [[613, 1, 1, "", "PandasDictInputOutput"], [614, 2, 1, "", "check_is_PandasDictInputOutput"]], "pybrops.core.io.PandasDictInputOutput.PandasDictInputOutput": [[613, 4, 1, "", "from_pandas_dict"], [613, 4, 1, "", "to_pandas_dict"]], "pybrops.core.io.PandasInputOutput": [[616, 1, 1, "", "PandasInputOutput"], [617, 2, 1, "", "check_is_PandasInputOutput"]], "pybrops.core.io.PandasInputOutput.PandasInputOutput": [[616, 4, 1, "", "from_pandas"], [616, 4, 1, "", "to_pandas"]], "pybrops.core.mat": [[619, 0, 0, "-", "DenseMatrix"], [622, 0, 0, "-", "DenseMutableMatrix"], [625, 0, 0, "-", "DensePhasedMatrix"], [628, 0, 0, "-", "DensePhasedTaxaVariantMatrix"], [631, 0, 0, "-", "DenseSquareMatrix"], [634, 0, 0, "-", "DenseSquareTaxaMatrix"], [637, 0, 0, "-", "DenseSquareTaxaSquareTraitMatrix"], [640, 0, 0, "-", "DenseSquareTaxaTraitMatrix"], [643, 0, 0, "-", "DenseSquareTraitMatrix"], [646, 0, 0, "-", "DenseTaxaMatrix"], [649, 0, 0, "-", "DenseTaxaTraitMatrix"], [652, 0, 0, "-", "DenseTaxaVariantMatrix"], [655, 0, 0, "-", "DenseTraitMatrix"], [658, 0, 0, "-", "DenseVariantMatrix"], [661, 0, 0, "-", "GroupableMatrix"], [664, 0, 0, "-", "Matrix"], [667, 0, 0, "-", "MutableMatrix"], [670, 0, 0, "-", "PhasedMatrix"], [673, 0, 0, "-", "PhasedTaxaVariantMatrix"], [676, 0, 0, "-", "PrunableMatrix"], [679, 0, 0, "-", "SortableMatrix"], [682, 0, 0, "-", "SquareMatrix"], [685, 0, 0, "-", "SquareTaxaMatrix"], [688, 0, 0, "-", "SquareTaxaSquareTraitMatrix"], [691, 0, 0, "-", "SquareTaxaTraitMatrix"], [694, 0, 0, "-", "SquareTraitMatrix"], [697, 0, 0, "-", "TaxaMatrix"], [700, 0, 0, "-", "TaxaTraitMatrix"], [703, 0, 0, "-", "TaxaVariantMatrix"], [706, 0, 0, "-", "TraitMatrix"], [709, 0, 0, "-", "VariantMatrix"], [712, 0, 0, "-", "util"]], "pybrops.core.mat.DenseMatrix": [[620, 1, 1, "", "DenseMatrix"], [621, 2, 1, "", "check_is_DenseMatrix"]], "pybrops.core.mat.DenseMatrix.DenseMatrix": [[620, 4, 1, "", "__add__"], [620, 4, 1, "", "__mul__"], [620, 4, 1, "", "adjoin"], [620, 4, 1, "", "concat"], [620, 4, 1, "", "copy"], [620, 4, 1, "", "deepcopy"], [620, 4, 1, "", "delete"], [620, 4, 1, "", "from_hdf5"], [620, 4, 1, "", "insert"], [620, 3, 1, "", "mat"], [620, 3, 1, "", "mat_ndim"], [620, 3, 1, "", "mat_shape"], [620, 4, 1, "", "select"], [620, 4, 1, "", "to_hdf5"]], "pybrops.core.mat.DenseMutableMatrix": [[623, 1, 1, "", "DenseMutableMatrix"], [624, 2, 1, "", "check_is_DenseMutableMatrix"]], "pybrops.core.mat.DenseMutableMatrix.DenseMutableMatrix": [[623, 4, 1, "", "__add__"], [623, 4, 1, "", "__mul__"], [623, 4, 1, "", "adjoin"], [623, 4, 1, "", "append"], [623, 4, 1, "", "concat"], [623, 4, 1, "", "copy"], [623, 4, 1, "", "deepcopy"], [623, 4, 1, "", "delete"], [623, 4, 1, "", "from_hdf5"], [623, 4, 1, "", "incorp"], [623, 4, 1, "", "insert"], [623, 3, 1, "", "mat"], [623, 3, 1, "", "mat_ndim"], [623, 3, 1, "", "mat_shape"], [623, 4, 1, "", "remove"], [623, 4, 1, "", "select"], [623, 4, 1, "", "to_hdf5"]], "pybrops.core.mat.DensePhasedMatrix": [[626, 1, 1, "", "DensePhasedMatrix"], [627, 2, 1, "", "check_is_DensePhasedMatrix"]], "pybrops.core.mat.DensePhasedMatrix.DensePhasedMatrix": [[626, 4, 1, "", "__add__"], [626, 4, 1, "", "__mul__"], [626, 4, 1, "", "adjoin"], [626, 4, 1, "", "adjoin_phase"], [626, 4, 1, "", "append"], [626, 4, 1, "", "append_phase"], [626, 4, 1, "", "concat"], [626, 4, 1, "", "concat_phase"], [626, 4, 1, "", "copy"], [626, 4, 1, "", "deepcopy"], [626, 4, 1, "", "delete"], [626, 4, 1, "", "delete_phase"], [626, 4, 1, "", "from_hdf5"], [626, 4, 1, "", "incorp"], [626, 4, 1, "", "incorp_phase"], [626, 4, 1, "", "insert"], [626, 4, 1, "", "insert_phase"], [626, 3, 1, "", "mat"], [626, 3, 1, "", "mat_ndim"], [626, 3, 1, "", "mat_shape"], [626, 3, 1, "", "nphase"], [626, 3, 1, "", "phase_axis"], [626, 4, 1, "", "remove"], [626, 4, 1, "", "remove_phase"], [626, 4, 1, "", "select"], [626, 4, 1, "", "select_phase"], [626, 4, 1, "", "to_hdf5"]], "pybrops.core.mat.DensePhasedTaxaVariantMatrix": [[629, 1, 1, "", "DensePhasedTaxaVariantMatrix"], [630, 2, 1, "", "check_is_DensePhasedTaxaVariantMatrix"]], "pybrops.core.mat.DensePhasedTaxaVariantMatrix.DensePhasedTaxaVariantMatrix": [[629, 4, 1, "", "__add__"], [629, 4, 1, "", "__mul__"], [629, 4, 1, "", "adjoin"], [629, 4, 1, "", "adjoin_phase"], [629, 4, 1, "", "adjoin_taxa"], [629, 4, 1, "", "adjoin_vrnt"], [629, 4, 1, "", "append"], [629, 4, 1, "", "append_phase"], [629, 4, 1, "", "append_taxa"], [629, 4, 1, "", "append_vrnt"], [629, 4, 1, "", "concat"], [629, 4, 1, "", "concat_phase"], [629, 4, 1, "", "concat_taxa"], [629, 4, 1, "", "concat_vrnt"], [629, 4, 1, "", "copy"], [629, 4, 1, "", "deepcopy"], [629, 4, 1, "", "delete"], [629, 4, 1, "", "delete_phase"], [629, 4, 1, "", "delete_taxa"], [629, 4, 1, "", "delete_vrnt"], [629, 4, 1, "", "from_hdf5"], [629, 4, 1, "", "group"], [629, 4, 1, "", "group_taxa"], [629, 4, 1, "", "group_vrnt"], [629, 4, 1, "", "incorp"], [629, 4, 1, "", "incorp_phase"], [629, 4, 1, "", "incorp_taxa"], [629, 4, 1, "", "incorp_vrnt"], [629, 4, 1, "", "insert"], [629, 4, 1, "", "insert_phase"], [629, 4, 1, "", "insert_taxa"], [629, 4, 1, "", "insert_vrnt"], [629, 4, 1, "", "is_grouped"], [629, 4, 1, "", "is_grouped_taxa"], [629, 4, 1, "", "is_grouped_vrnt"], [629, 4, 1, "", "lexsort"], [629, 4, 1, "", "lexsort_taxa"], [629, 4, 1, "", "lexsort_vrnt"], [629, 3, 1, "", "mat"], [629, 3, 1, "", "mat_ndim"], [629, 3, 1, "", "mat_shape"], [629, 3, 1, "", "nphase"], [629, 3, 1, "", "ntaxa"], [629, 3, 1, "", "nvrnt"], [629, 3, 1, "", "phase_axis"], [629, 4, 1, "", "remove"], [629, 4, 1, "", "remove_phase"], [629, 4, 1, "", "remove_taxa"], [629, 4, 1, "", "remove_vrnt"], [629, 4, 1, "", "reorder"], [629, 4, 1, "", "reorder_taxa"], [629, 4, 1, "", "reorder_vrnt"], [629, 4, 1, "", "select"], [629, 4, 1, "", "select_phase"], [629, 4, 1, "", "select_taxa"], [629, 4, 1, "", "select_vrnt"], [629, 4, 1, "", "sort"], [629, 4, 1, "", "sort_taxa"], [629, 4, 1, "", "sort_vrnt"], [629, 3, 1, "", "taxa"], [629, 3, 1, "", "taxa_axis"], [629, 3, 1, "", "taxa_grp"], [629, 3, 1, "", "taxa_grp_len"], [629, 3, 1, "", "taxa_grp_name"], [629, 3, 1, "", "taxa_grp_spix"], [629, 3, 1, "", "taxa_grp_stix"], [629, 4, 1, "", "to_hdf5"], [629, 4, 1, "", "ungroup"], [629, 4, 1, "", "ungroup_taxa"], [629, 4, 1, "", "ungroup_vrnt"], [629, 3, 1, "", "vrnt_axis"], [629, 3, 1, "", "vrnt_chrgrp"], [629, 3, 1, "", "vrnt_chrgrp_len"], [629, 3, 1, "", "vrnt_chrgrp_name"], [629, 3, 1, "", "vrnt_chrgrp_spix"], [629, 3, 1, "", "vrnt_chrgrp_stix"], [629, 3, 1, "", "vrnt_genpos"], [629, 3, 1, "", "vrnt_hapalt"], [629, 3, 1, "", "vrnt_hapgrp"], [629, 3, 1, "", "vrnt_hapref"], [629, 3, 1, "", "vrnt_mask"], [629, 3, 1, "", "vrnt_name"], [629, 3, 1, "", "vrnt_phypos"], [629, 3, 1, "", "vrnt_xoprob"]], "pybrops.core.mat.DenseSquareMatrix": [[632, 1, 1, "", "DenseSquareMatrix"], [633, 2, 1, "", "check_is_DenseSquareMatrix"]], "pybrops.core.mat.DenseSquareMatrix.DenseSquareMatrix": [[632, 4, 1, "", "__add__"], [632, 4, 1, "", "__mul__"], [632, 4, 1, "", "adjoin"], [632, 4, 1, "", "concat"], [632, 4, 1, "", "copy"], [632, 4, 1, "", "deepcopy"], [632, 4, 1, "", "delete"], [632, 4, 1, "", "from_hdf5"], [632, 4, 1, "", "insert"], [632, 4, 1, "", "is_square"], [632, 3, 1, "", "mat"], [632, 3, 1, "", "mat_ndim"], [632, 3, 1, "", "mat_shape"], [632, 3, 1, "", "nsquare"], [632, 4, 1, "", "select"], [632, 3, 1, "", "square_axes"], [632, 3, 1, "", "square_axes_len"], [632, 4, 1, "", "to_hdf5"]], "pybrops.core.mat.DenseSquareTaxaMatrix": [[635, 1, 1, "", "DenseSquareTaxaMatrix"], [636, 2, 1, "", "check_is_DenseSquareTaxaMatrix"]], "pybrops.core.mat.DenseSquareTaxaMatrix.DenseSquareTaxaMatrix": [[635, 4, 1, "", "__add__"], [635, 4, 1, "", "__mul__"], [635, 4, 1, "", "adjoin"], [635, 4, 1, "", "adjoin_taxa"], [635, 4, 1, "", "append"], [635, 4, 1, "", "append_taxa"], [635, 4, 1, "", "concat"], [635, 4, 1, "", "concat_taxa"], [635, 4, 1, "", "copy"], [635, 4, 1, "", "deepcopy"], [635, 4, 1, "", "delete"], [635, 4, 1, "", "delete_taxa"], [635, 4, 1, "", "from_hdf5"], [635, 4, 1, "", "group"], [635, 4, 1, "", "group_taxa"], [635, 4, 1, "", "incorp"], [635, 4, 1, "", "incorp_taxa"], [635, 4, 1, "", "insert"], [635, 4, 1, "", "insert_taxa"], [635, 4, 1, "", "is_grouped"], [635, 4, 1, "", "is_grouped_taxa"], [635, 4, 1, "", "is_square"], [635, 4, 1, "", "is_square_taxa"], [635, 4, 1, "", "lexsort"], [635, 4, 1, "", "lexsort_taxa"], [635, 3, 1, "", "mat"], [635, 3, 1, "", "mat_ndim"], [635, 3, 1, "", "mat_shape"], [635, 3, 1, "", "nsquare"], [635, 3, 1, "", "nsquare_taxa"], [635, 3, 1, "", "ntaxa"], [635, 4, 1, "", "remove"], [635, 4, 1, "", "remove_taxa"], [635, 4, 1, "", "reorder"], [635, 4, 1, "", "reorder_taxa"], [635, 4, 1, "", "select"], [635, 4, 1, "", "select_taxa"], [635, 4, 1, "", "sort"], [635, 4, 1, "", "sort_taxa"], [635, 3, 1, "", "square_axes"], [635, 3, 1, "", "square_axes_len"], [635, 3, 1, "", "square_taxa_axes"], [635, 3, 1, "", "square_taxa_axes_len"], [635, 3, 1, "", "taxa"], [635, 3, 1, "", "taxa_axis"], [635, 3, 1, "", "taxa_grp"], [635, 3, 1, "", "taxa_grp_len"], [635, 3, 1, "", "taxa_grp_name"], [635, 3, 1, "", "taxa_grp_spix"], [635, 3, 1, "", "taxa_grp_stix"], [635, 4, 1, "", "to_hdf5"], [635, 4, 1, "", "ungroup"], [635, 4, 1, "", "ungroup_taxa"]], "pybrops.core.mat.DenseSquareTaxaSquareTraitMatrix": [[638, 1, 1, "", "DenseSquareTaxaSquareTraitMatrix"], [639, 2, 1, "", "check_is_DenseSquareTaxaSquareTraitMatrix"]], "pybrops.core.mat.DenseSquareTaxaSquareTraitMatrix.DenseSquareTaxaSquareTraitMatrix": [[638, 4, 1, "", "__add__"], [638, 4, 1, "", "__mul__"], [638, 4, 1, "", "adjoin"], [638, 4, 1, "", "adjoin_taxa"], [638, 4, 1, "", "adjoin_trait"], [638, 4, 1, "", "append"], [638, 4, 1, "", "append_taxa"], [638, 4, 1, "", "append_trait"], [638, 4, 1, "", "concat"], [638, 4, 1, "", "concat_taxa"], [638, 4, 1, "", "concat_trait"], [638, 4, 1, "", "copy"], [638, 4, 1, "", "deepcopy"], [638, 4, 1, "", "delete"], [638, 4, 1, "", "delete_taxa"], [638, 4, 1, "", "delete_trait"], [638, 4, 1, "", "from_hdf5"], [638, 4, 1, "", "group"], [638, 4, 1, "", "group_taxa"], [638, 4, 1, "", "incorp"], [638, 4, 1, "", "incorp_taxa"], [638, 4, 1, "", "incorp_trait"], [638, 4, 1, "", "insert"], [638, 4, 1, "", "insert_taxa"], [638, 4, 1, "", "insert_trait"], [638, 4, 1, "", "is_grouped"], [638, 4, 1, "", "is_grouped_taxa"], [638, 4, 1, "", "is_square"], [638, 4, 1, "", "is_square_taxa"], [638, 4, 1, "", "is_square_trait"], [638, 4, 1, "", "lexsort"], [638, 4, 1, "", "lexsort_taxa"], [638, 4, 1, "", "lexsort_trait"], [638, 3, 1, "", "mat"], [638, 3, 1, "", "mat_ndim"], [638, 3, 1, "", "mat_shape"], [638, 3, 1, "", "nsquare"], [638, 3, 1, "", "nsquare_taxa"], [638, 3, 1, "", "nsquare_trait"], [638, 3, 1, "", "ntaxa"], [638, 3, 1, "", "ntrait"], [638, 4, 1, "", "remove"], [638, 4, 1, "", "remove_taxa"], [638, 4, 1, "", "remove_trait"], [638, 4, 1, "", "reorder"], [638, 4, 1, "", "reorder_taxa"], [638, 4, 1, "", "reorder_trait"], [638, 4, 1, "", "select"], [638, 4, 1, "", "select_taxa"], [638, 4, 1, "", "select_trait"], [638, 4, 1, "", "sort"], [638, 4, 1, "", "sort_taxa"], [638, 4, 1, "", "sort_trait"], [638, 3, 1, "", "square_axes"], [638, 3, 1, "", "square_axes_len"], [638, 3, 1, "", "square_taxa_axes"], [638, 3, 1, "", "square_taxa_axes_len"], [638, 3, 1, "", "square_trait_axes"], [638, 3, 1, "", "square_trait_axes_len"], [638, 3, 1, "", "taxa"], [638, 3, 1, "", "taxa_axis"], [638, 3, 1, "", "taxa_grp"], [638, 3, 1, "", "taxa_grp_len"], [638, 3, 1, "", "taxa_grp_name"], [638, 3, 1, "", "taxa_grp_spix"], [638, 3, 1, "", "taxa_grp_stix"], [638, 4, 1, "", "to_hdf5"], [638, 3, 1, "", "trait"], [638, 3, 1, "", "trait_axis"], [638, 4, 1, "", "ungroup"], [638, 4, 1, "", "ungroup_taxa"]], "pybrops.core.mat.DenseSquareTaxaTraitMatrix": [[641, 1, 1, "", "DenseSquareTaxaTraitMatrix"], [642, 2, 1, "", "check_is_DenseSquareTaxaTraitMatrix"]], "pybrops.core.mat.DenseSquareTaxaTraitMatrix.DenseSquareTaxaTraitMatrix": [[641, 4, 1, "", "__add__"], [641, 4, 1, "", "__mul__"], [641, 4, 1, "", "adjoin"], [641, 4, 1, "", "adjoin_taxa"], [641, 4, 1, "", "adjoin_trait"], [641, 4, 1, "", "append"], [641, 4, 1, "", "append_taxa"], [641, 4, 1, "", "append_trait"], [641, 4, 1, "", "concat"], [641, 4, 1, "", "concat_taxa"], [641, 4, 1, "", "concat_trait"], [641, 4, 1, "", "copy"], [641, 4, 1, "", "deepcopy"], [641, 4, 1, "", "delete"], [641, 4, 1, "", "delete_taxa"], [641, 4, 1, "", "delete_trait"], [641, 4, 1, "", "from_hdf5"], [641, 4, 1, "", "group"], [641, 4, 1, "", "group_taxa"], [641, 4, 1, "", "incorp"], [641, 4, 1, "", "incorp_taxa"], [641, 4, 1, "", "incorp_trait"], [641, 4, 1, "", "insert"], [641, 4, 1, "", "insert_taxa"], [641, 4, 1, "", "insert_trait"], [641, 4, 1, "", "is_grouped"], [641, 4, 1, "", "is_grouped_taxa"], [641, 4, 1, "", "is_square"], [641, 4, 1, "", "is_square_taxa"], [641, 4, 1, "", "lexsort"], [641, 4, 1, "", "lexsort_taxa"], [641, 4, 1, "", "lexsort_trait"], [641, 3, 1, "", "mat"], [641, 3, 1, "", "mat_ndim"], [641, 3, 1, "", "mat_shape"], [641, 3, 1, "", "nsquare"], [641, 3, 1, "", "nsquare_taxa"], [641, 3, 1, "", "ntaxa"], [641, 3, 1, "", "ntrait"], [641, 4, 1, "", "remove"], [641, 4, 1, "", "remove_taxa"], [641, 4, 1, "", "remove_trait"], [641, 4, 1, "", "reorder"], [641, 4, 1, "", "reorder_taxa"], [641, 4, 1, "", "reorder_trait"], [641, 4, 1, "", "select"], [641, 4, 1, "", "select_taxa"], [641, 4, 1, "", "select_trait"], [641, 4, 1, "", "sort"], [641, 4, 1, "", "sort_taxa"], [641, 4, 1, "", "sort_trait"], [641, 3, 1, "", "square_axes"], [641, 3, 1, "", "square_axes_len"], [641, 3, 1, "", "square_taxa_axes"], [641, 3, 1, "", "square_taxa_axes_len"], [641, 3, 1, "", "taxa"], [641, 3, 1, "", "taxa_axis"], [641, 3, 1, "", "taxa_grp"], [641, 3, 1, "", "taxa_grp_len"], [641, 3, 1, "", "taxa_grp_name"], [641, 3, 1, "", "taxa_grp_spix"], [641, 3, 1, "", "taxa_grp_stix"], [641, 4, 1, "", "to_hdf5"], [641, 3, 1, "", "trait"], [641, 3, 1, "", "trait_axis"], [641, 4, 1, "", "ungroup"], [641, 4, 1, "", "ungroup_taxa"]], "pybrops.core.mat.DenseSquareTraitMatrix": [[644, 1, 1, "", "DenseSquareTraitMatrix"], [645, 2, 1, "", "check_is_DenseSquareTraitMatrix"]], "pybrops.core.mat.DenseSquareTraitMatrix.DenseSquareTraitMatrix": [[644, 4, 1, "", "__add__"], [644, 4, 1, "", "__mul__"], [644, 4, 1, "", "adjoin"], [644, 4, 1, "", "adjoin_trait"], [644, 4, 1, "", "append"], [644, 4, 1, "", "append_trait"], [644, 4, 1, "", "concat"], [644, 4, 1, "", "concat_trait"], [644, 4, 1, "", "copy"], [644, 4, 1, "", "deepcopy"], [644, 4, 1, "", "delete"], [644, 4, 1, "", "delete_trait"], [644, 4, 1, "", "from_hdf5"], [644, 4, 1, "", "incorp"], [644, 4, 1, "", "incorp_trait"], [644, 4, 1, "", "insert"], [644, 4, 1, "", "insert_trait"], [644, 4, 1, "", "is_square"], [644, 4, 1, "", "is_square_trait"], [644, 4, 1, "", "lexsort"], [644, 4, 1, "", "lexsort_trait"], [644, 3, 1, "", "mat"], [644, 3, 1, "", "mat_ndim"], [644, 3, 1, "", "mat_shape"], [644, 3, 1, "", "nsquare"], [644, 3, 1, "", "nsquare_trait"], [644, 3, 1, "", "ntrait"], [644, 4, 1, "", "remove"], [644, 4, 1, "", "remove_trait"], [644, 4, 1, "", "reorder"], [644, 4, 1, "", "reorder_trait"], [644, 4, 1, "", "select"], [644, 4, 1, "", "select_trait"], [644, 4, 1, "", "sort"], [644, 4, 1, "", "sort_trait"], [644, 3, 1, "", "square_axes"], [644, 3, 1, "", "square_axes_len"], [644, 3, 1, "", "square_trait_axes"], [644, 3, 1, "", "square_trait_axes_len"], [644, 4, 1, "", "to_hdf5"], [644, 3, 1, "", "trait"], [644, 3, 1, "", "trait_axis"]], "pybrops.core.mat.DenseTaxaMatrix": [[647, 1, 1, "", "DenseTaxaMatrix"], [648, 2, 1, "", "check_is_DenseTaxaMatrix"]], "pybrops.core.mat.DenseTaxaMatrix.DenseTaxaMatrix": [[647, 4, 1, "", "__add__"], [647, 4, 1, "", "__mul__"], [647, 4, 1, "", "adjoin"], [647, 4, 1, "", "adjoin_taxa"], [647, 4, 1, "", "append"], [647, 4, 1, "", "append_taxa"], [647, 4, 1, "", "concat"], [647, 4, 1, "", "concat_taxa"], [647, 4, 1, "", "copy"], [647, 4, 1, "", "deepcopy"], [647, 4, 1, "", "delete"], [647, 4, 1, "", "delete_taxa"], [647, 4, 1, "", "from_hdf5"], [647, 4, 1, "", "group"], [647, 4, 1, "", "group_taxa"], [647, 4, 1, "", "incorp"], [647, 4, 1, "", "incorp_taxa"], [647, 4, 1, "", "insert"], [647, 4, 1, "", "insert_taxa"], [647, 4, 1, "", "is_grouped"], [647, 4, 1, "", "is_grouped_taxa"], [647, 4, 1, "", "lexsort"], [647, 4, 1, "", "lexsort_taxa"], [647, 3, 1, "", "mat"], [647, 3, 1, "", "mat_ndim"], [647, 3, 1, "", "mat_shape"], [647, 3, 1, "", "ntaxa"], [647, 4, 1, "", "remove"], [647, 4, 1, "", "remove_taxa"], [647, 4, 1, "", "reorder"], [647, 4, 1, "", "reorder_taxa"], [647, 4, 1, "", "select"], [647, 4, 1, "", "select_taxa"], [647, 4, 1, "", "sort"], [647, 4, 1, "", "sort_taxa"], [647, 3, 1, "", "taxa"], [647, 3, 1, "", "taxa_axis"], [647, 3, 1, "", "taxa_grp"], [647, 3, 1, "", "taxa_grp_len"], [647, 3, 1, "", "taxa_grp_name"], [647, 3, 1, "", "taxa_grp_spix"], [647, 3, 1, "", "taxa_grp_stix"], [647, 4, 1, "", "to_hdf5"], [647, 4, 1, "", "ungroup"], [647, 4, 1, "", "ungroup_taxa"]], "pybrops.core.mat.DenseTaxaTraitMatrix": [[650, 1, 1, "", "DenseTaxaTraitMatrix"], [651, 2, 1, "", "check_is_DenseTaxaTraitMatrix"]], "pybrops.core.mat.DenseTaxaTraitMatrix.DenseTaxaTraitMatrix": [[650, 4, 1, "", "__add__"], [650, 4, 1, "", "__mul__"], [650, 4, 1, "", "adjoin"], [650, 4, 1, "", "adjoin_taxa"], [650, 4, 1, "", "adjoin_trait"], [650, 4, 1, "", "append"], [650, 4, 1, "", "append_taxa"], [650, 4, 1, "", "append_trait"], [650, 4, 1, "", "concat"], [650, 4, 1, "", "concat_taxa"], [650, 4, 1, "", "concat_trait"], [650, 4, 1, "", "copy"], [650, 4, 1, "", "deepcopy"], [650, 4, 1, "", "delete"], [650, 4, 1, "", "delete_taxa"], [650, 4, 1, "", "delete_trait"], [650, 4, 1, "", "from_hdf5"], [650, 4, 1, "", "group"], [650, 4, 1, "", "group_taxa"], [650, 4, 1, "", "incorp"], [650, 4, 1, "", "incorp_taxa"], [650, 4, 1, "", "incorp_trait"], [650, 4, 1, "", "insert"], [650, 4, 1, "", "insert_taxa"], [650, 4, 1, "", "insert_trait"], [650, 4, 1, "", "is_grouped"], [650, 4, 1, "", "is_grouped_taxa"], [650, 4, 1, "", "lexsort"], [650, 4, 1, "", "lexsort_taxa"], [650, 4, 1, "", "lexsort_trait"], [650, 3, 1, "", "mat"], [650, 3, 1, "", "mat_ndim"], [650, 3, 1, "", "mat_shape"], [650, 3, 1, "", "ntaxa"], [650, 3, 1, "", "ntrait"], [650, 4, 1, "", "remove"], [650, 4, 1, "", "remove_taxa"], [650, 4, 1, "", "remove_trait"], [650, 4, 1, "", "reorder"], [650, 4, 1, "", "reorder_taxa"], [650, 4, 1, "", "reorder_trait"], [650, 4, 1, "", "select"], [650, 4, 1, "", "select_taxa"], [650, 4, 1, "", "select_trait"], [650, 4, 1, "", "sort"], [650, 4, 1, "", "sort_taxa"], [650, 4, 1, "", "sort_trait"], [650, 3, 1, "", "taxa"], [650, 3, 1, "", "taxa_axis"], [650, 3, 1, "", "taxa_grp"], [650, 3, 1, "", "taxa_grp_len"], [650, 3, 1, "", "taxa_grp_name"], [650, 3, 1, "", "taxa_grp_spix"], [650, 3, 1, "", "taxa_grp_stix"], [650, 4, 1, "", "to_hdf5"], [650, 3, 1, "", "trait"], [650, 3, 1, "", "trait_axis"], [650, 4, 1, "", "ungroup"], [650, 4, 1, "", "ungroup_taxa"]], "pybrops.core.mat.DenseTaxaVariantMatrix": [[653, 1, 1, "", "DenseTaxaVariantMatrix"], [654, 2, 1, "", "check_is_DenseTaxaVariantMatrix"]], "pybrops.core.mat.DenseTaxaVariantMatrix.DenseTaxaVariantMatrix": [[653, 4, 1, "", "__add__"], [653, 4, 1, "", "__mul__"], [653, 4, 1, "", "adjoin"], [653, 4, 1, "", "adjoin_taxa"], [653, 4, 1, "", "adjoin_vrnt"], [653, 4, 1, "", "append"], [653, 4, 1, "", "append_taxa"], [653, 4, 1, "", "append_vrnt"], [653, 4, 1, "", "concat"], [653, 4, 1, "", "concat_taxa"], [653, 4, 1, "", "concat_vrnt"], [653, 4, 1, "", "copy"], [653, 4, 1, "", "deepcopy"], [653, 4, 1, "", "delete"], [653, 4, 1, "", "delete_taxa"], [653, 4, 1, "", "delete_vrnt"], [653, 4, 1, "", "from_hdf5"], [653, 4, 1, "", "group"], [653, 4, 1, "", "group_taxa"], [653, 4, 1, "", "group_vrnt"], [653, 4, 1, "", "incorp"], [653, 4, 1, "", "incorp_taxa"], [653, 4, 1, "", "incorp_vrnt"], [653, 4, 1, "", "insert"], [653, 4, 1, "", "insert_taxa"], [653, 4, 1, "", "insert_vrnt"], [653, 4, 1, "", "is_grouped"], [653, 4, 1, "", "is_grouped_taxa"], [653, 4, 1, "", "is_grouped_vrnt"], [653, 4, 1, "", "lexsort"], [653, 4, 1, "", "lexsort_taxa"], [653, 4, 1, "", "lexsort_vrnt"], [653, 3, 1, "", "mat"], [653, 3, 1, "", "mat_ndim"], [653, 3, 1, "", "mat_shape"], [653, 3, 1, "", "ntaxa"], [653, 3, 1, "", "nvrnt"], [653, 4, 1, "", "remove"], [653, 4, 1, "", "remove_taxa"], [653, 4, 1, "", "remove_vrnt"], [653, 4, 1, "", "reorder"], [653, 4, 1, "", "reorder_taxa"], [653, 4, 1, "", "reorder_vrnt"], [653, 4, 1, "", "select"], [653, 4, 1, "", "select_taxa"], [653, 4, 1, "", "select_vrnt"], [653, 4, 1, "", "sort"], [653, 4, 1, "", "sort_taxa"], [653, 4, 1, "", "sort_vrnt"], [653, 3, 1, "", "taxa"], [653, 3, 1, "", "taxa_axis"], [653, 3, 1, "", "taxa_grp"], [653, 3, 1, "", "taxa_grp_len"], [653, 3, 1, "", "taxa_grp_name"], [653, 3, 1, "", "taxa_grp_spix"], [653, 3, 1, "", "taxa_grp_stix"], [653, 4, 1, "", "to_hdf5"], [653, 4, 1, "", "ungroup"], [653, 4, 1, "", "ungroup_taxa"], [653, 4, 1, "", "ungroup_vrnt"], [653, 3, 1, "", "vrnt_axis"], [653, 3, 1, "", "vrnt_chrgrp"], [653, 3, 1, "", "vrnt_chrgrp_len"], [653, 3, 1, "", "vrnt_chrgrp_name"], [653, 3, 1, "", "vrnt_chrgrp_spix"], [653, 3, 1, "", "vrnt_chrgrp_stix"], [653, 3, 1, "", "vrnt_genpos"], [653, 3, 1, "", "vrnt_hapalt"], [653, 3, 1, "", "vrnt_hapgrp"], [653, 3, 1, "", "vrnt_hapref"], [653, 3, 1, "", "vrnt_mask"], [653, 3, 1, "", "vrnt_name"], [653, 3, 1, "", "vrnt_phypos"], [653, 3, 1, "", "vrnt_xoprob"]], "pybrops.core.mat.DenseTraitMatrix": [[656, 1, 1, "", "DenseTraitMatrix"], [657, 2, 1, "", "check_is_DenseTraitMatrix"]], "pybrops.core.mat.DenseTraitMatrix.DenseTraitMatrix": [[656, 4, 1, "", "__add__"], [656, 4, 1, "", "__mul__"], [656, 4, 1, "", "adjoin"], [656, 4, 1, "", "adjoin_trait"], [656, 4, 1, "", "append"], [656, 4, 1, "", "append_trait"], [656, 4, 1, "", "concat"], [656, 4, 1, "", "concat_trait"], [656, 4, 1, "", "copy"], [656, 4, 1, "", "deepcopy"], [656, 4, 1, "", "delete"], [656, 4, 1, "", "delete_trait"], [656, 4, 1, "", "from_hdf5"], [656, 4, 1, "", "incorp"], [656, 4, 1, "", "incorp_trait"], [656, 4, 1, "", "insert"], [656, 4, 1, "", "insert_trait"], [656, 4, 1, "", "lexsort"], [656, 4, 1, "", "lexsort_trait"], [656, 3, 1, "", "mat"], [656, 3, 1, "", "mat_ndim"], [656, 3, 1, "", "mat_shape"], [656, 3, 1, "", "ntrait"], [656, 4, 1, "", "remove"], [656, 4, 1, "", "remove_trait"], [656, 4, 1, "", "reorder"], [656, 4, 1, "", "reorder_trait"], [656, 4, 1, "", "select"], [656, 4, 1, "", "select_trait"], [656, 4, 1, "", "sort"], [656, 4, 1, "", "sort_trait"], [656, 4, 1, "", "to_hdf5"], [656, 3, 1, "", "trait"], [656, 3, 1, "", "trait_axis"]], "pybrops.core.mat.DenseVariantMatrix": [[659, 1, 1, "", "DenseVariantMatrix"], [660, 2, 1, "", "check_is_DenseVariantMatrix"]], "pybrops.core.mat.DenseVariantMatrix.DenseVariantMatrix": [[659, 4, 1, "", "__add__"], [659, 4, 1, "", "__mul__"], [659, 4, 1, "", "adjoin"], [659, 4, 1, "", "adjoin_vrnt"], [659, 4, 1, "", "append"], [659, 4, 1, "", "append_vrnt"], [659, 4, 1, "", "concat"], [659, 4, 1, "", "concat_vrnt"], [659, 4, 1, "", "copy"], [659, 4, 1, "", "deepcopy"], [659, 4, 1, "", "delete"], [659, 4, 1, "", "delete_vrnt"], [659, 4, 1, "", "from_hdf5"], [659, 4, 1, "", "group"], [659, 4, 1, "", "group_vrnt"], [659, 4, 1, "", "incorp"], [659, 4, 1, "", "incorp_vrnt"], [659, 4, 1, "", "insert"], [659, 4, 1, "", "insert_vrnt"], [659, 4, 1, "", "is_grouped"], [659, 4, 1, "", "is_grouped_vrnt"], [659, 4, 1, "", "lexsort"], [659, 4, 1, "", "lexsort_vrnt"], [659, 3, 1, "", "mat"], [659, 3, 1, "", "mat_ndim"], [659, 3, 1, "", "mat_shape"], [659, 3, 1, "", "nvrnt"], [659, 4, 1, "", "remove"], [659, 4, 1, "", "remove_vrnt"], [659, 4, 1, "", "reorder"], [659, 4, 1, "", "reorder_vrnt"], [659, 4, 1, "", "select"], [659, 4, 1, "", "select_vrnt"], [659, 4, 1, "", "sort"], [659, 4, 1, "", "sort_vrnt"], [659, 4, 1, "", "to_hdf5"], [659, 4, 1, "", "ungroup"], [659, 4, 1, "", "ungroup_vrnt"], [659, 3, 1, "", "vrnt_axis"], [659, 3, 1, "", "vrnt_chrgrp"], [659, 3, 1, "", "vrnt_chrgrp_len"], [659, 3, 1, "", "vrnt_chrgrp_name"], [659, 3, 1, "", "vrnt_chrgrp_spix"], [659, 3, 1, "", "vrnt_chrgrp_stix"], [659, 3, 1, "", "vrnt_genpos"], [659, 3, 1, "", "vrnt_hapalt"], [659, 3, 1, "", "vrnt_hapgrp"], [659, 3, 1, "", "vrnt_hapref"], [659, 3, 1, "", "vrnt_mask"], [659, 3, 1, "", "vrnt_name"], [659, 3, 1, "", "vrnt_phypos"], [659, 3, 1, "", "vrnt_xoprob"]], "pybrops.core.mat.GroupableMatrix": [[662, 1, 1, "", "GroupableMatrix"], [663, 2, 1, "", "check_is_GroupableMatrix"]], "pybrops.core.mat.GroupableMatrix.GroupableMatrix": [[662, 4, 1, "", "__add__"], [662, 4, 1, "", "__mul__"], [662, 4, 1, "", "adjoin"], [662, 4, 1, "", "append"], [662, 4, 1, "", "concat"], [662, 4, 1, "", "copy"], [662, 4, 1, "", "deepcopy"], [662, 4, 1, "", "delete"], [662, 4, 1, "", "from_hdf5"], [662, 4, 1, "", "group"], [662, 4, 1, "", "incorp"], [662, 4, 1, "", "insert"], [662, 4, 1, "", "is_grouped"], [662, 4, 1, "", "lexsort"], [662, 3, 1, "", "mat"], [662, 3, 1, "", "mat_ndim"], [662, 3, 1, "", "mat_shape"], [662, 4, 1, "", "remove"], [662, 4, 1, "", "reorder"], [662, 4, 1, "", "select"], [662, 4, 1, "", "sort"], [662, 4, 1, "", "to_hdf5"], [662, 4, 1, "", "ungroup"]], "pybrops.core.mat.Matrix": [[665, 1, 1, "", "Matrix"], [666, 2, 1, "", "check_is_Matrix"]], "pybrops.core.mat.Matrix.Matrix": [[665, 4, 1, "", "__add__"], [665, 4, 1, "", "__mul__"], [665, 4, 1, "", "adjoin"], [665, 4, 1, "", "concat"], [665, 4, 1, "", "copy"], [665, 4, 1, "", "deepcopy"], [665, 4, 1, "", "delete"], [665, 4, 1, "", "from_hdf5"], [665, 4, 1, "", "insert"], [665, 3, 1, "", "mat"], [665, 3, 1, "", "mat_ndim"], [665, 3, 1, "", "mat_shape"], [665, 4, 1, "", "select"], [665, 4, 1, "", "to_hdf5"]], "pybrops.core.mat.MutableMatrix": [[668, 1, 1, "", "MutableMatrix"], [669, 2, 1, "", "check_is_MutableMatrix"]], "pybrops.core.mat.MutableMatrix.MutableMatrix": [[668, 4, 1, "", "__add__"], [668, 4, 1, "", "__mul__"], [668, 4, 1, "", "adjoin"], [668, 4, 1, "", "append"], [668, 4, 1, "", "concat"], [668, 4, 1, "", "copy"], [668, 4, 1, "", "deepcopy"], [668, 4, 1, "", "delete"], [668, 4, 1, "", "from_hdf5"], [668, 4, 1, "", "incorp"], [668, 4, 1, "", "insert"], [668, 3, 1, "", "mat"], [668, 3, 1, "", "mat_ndim"], [668, 3, 1, "", "mat_shape"], [668, 4, 1, "", "remove"], [668, 4, 1, "", "select"], [668, 4, 1, "", "to_hdf5"]], "pybrops.core.mat.PhasedMatrix": [[671, 1, 1, "", "PhasedMatrix"], [672, 2, 1, "", "check_is_PhasedMatrix"]], "pybrops.core.mat.PhasedMatrix.PhasedMatrix": [[671, 4, 1, "", "__add__"], [671, 4, 1, "", "__mul__"], [671, 4, 1, "", "adjoin"], [671, 4, 1, "", "adjoin_phase"], [671, 4, 1, "", "append"], [671, 4, 1, "", "append_phase"], [671, 4, 1, "", "concat"], [671, 4, 1, "", "concat_phase"], [671, 4, 1, "", "copy"], [671, 4, 1, "", "deepcopy"], [671, 4, 1, "", "delete"], [671, 4, 1, "", "delete_phase"], [671, 4, 1, "", "from_hdf5"], [671, 4, 1, "", "incorp"], [671, 4, 1, "", "incorp_phase"], [671, 4, 1, "", "insert"], [671, 4, 1, "", "insert_phase"], [671, 3, 1, "", "mat"], [671, 3, 1, "", "mat_ndim"], [671, 3, 1, "", "mat_shape"], [671, 3, 1, "", "nphase"], [671, 3, 1, "", "phase_axis"], [671, 4, 1, "", "remove"], [671, 4, 1, "", "remove_phase"], [671, 4, 1, "", "select"], [671, 4, 1, "", "select_phase"], [671, 4, 1, "", "to_hdf5"]], "pybrops.core.mat.PhasedTaxaVariantMatrix": [[674, 1, 1, "", "PhasedTaxaVariantMatrix"], [675, 2, 1, "", "check_is_PhasedTaxaVariantMatrix"]], "pybrops.core.mat.PhasedTaxaVariantMatrix.PhasedTaxaVariantMatrix": [[674, 4, 1, "", "__add__"], [674, 4, 1, "", "__mul__"], [674, 4, 1, "", "adjoin"], [674, 4, 1, "", "adjoin_phase"], [674, 4, 1, "", "adjoin_taxa"], [674, 4, 1, "", "adjoin_vrnt"], [674, 4, 1, "", "append"], [674, 4, 1, "", "append_phase"], [674, 4, 1, "", "append_taxa"], [674, 4, 1, "", "append_vrnt"], [674, 4, 1, "", "concat"], [674, 4, 1, "", "concat_phase"], [674, 4, 1, "", "concat_taxa"], [674, 4, 1, "", "concat_vrnt"], [674, 4, 1, "", "copy"], [674, 4, 1, "", "deepcopy"], [674, 4, 1, "", "delete"], [674, 4, 1, "", "delete_phase"], [674, 4, 1, "", "delete_taxa"], [674, 4, 1, "", "delete_vrnt"], [674, 4, 1, "", "from_hdf5"], [674, 4, 1, "", "group"], [674, 4, 1, "", "group_taxa"], [674, 4, 1, "", "group_vrnt"], [674, 4, 1, "", "incorp"], [674, 4, 1, "", "incorp_phase"], [674, 4, 1, "", "incorp_taxa"], [674, 4, 1, "", "incorp_vrnt"], [674, 4, 1, "", "insert"], [674, 4, 1, "", "insert_phase"], [674, 4, 1, "", "insert_taxa"], [674, 4, 1, "", "insert_vrnt"], [674, 4, 1, "", "is_grouped"], [674, 4, 1, "", "is_grouped_taxa"], [674, 4, 1, "", "is_grouped_vrnt"], [674, 4, 1, "", "lexsort"], [674, 4, 1, "", "lexsort_taxa"], [674, 4, 1, "", "lexsort_vrnt"], [674, 3, 1, "", "mat"], [674, 3, 1, "", "mat_ndim"], [674, 3, 1, "", "mat_shape"], [674, 3, 1, "", "nphase"], [674, 3, 1, "", "ntaxa"], [674, 3, 1, "", "nvrnt"], [674, 3, 1, "", "phase_axis"], [674, 4, 1, "", "remove"], [674, 4, 1, "", "remove_phase"], [674, 4, 1, "", "remove_taxa"], [674, 4, 1, "", "remove_vrnt"], [674, 4, 1, "", "reorder"], [674, 4, 1, "", "reorder_taxa"], [674, 4, 1, "", "reorder_vrnt"], [674, 4, 1, "", "select"], [674, 4, 1, "", "select_phase"], [674, 4, 1, "", "select_taxa"], [674, 4, 1, "", "select_vrnt"], [674, 4, 1, "", "sort"], [674, 4, 1, "", "sort_taxa"], [674, 4, 1, "", "sort_vrnt"], [674, 3, 1, "", "taxa"], [674, 3, 1, "", "taxa_axis"], [674, 3, 1, "", "taxa_grp"], [674, 3, 1, "", "taxa_grp_len"], [674, 3, 1, "", "taxa_grp_name"], [674, 3, 1, "", "taxa_grp_spix"], [674, 3, 1, "", "taxa_grp_stix"], [674, 4, 1, "", "to_hdf5"], [674, 4, 1, "", "ungroup"], [674, 4, 1, "", "ungroup_taxa"], [674, 4, 1, "", "ungroup_vrnt"], [674, 3, 1, "", "vrnt_axis"], [674, 3, 1, "", "vrnt_chrgrp"], [674, 3, 1, "", "vrnt_chrgrp_len"], [674, 3, 1, "", "vrnt_chrgrp_name"], [674, 3, 1, "", "vrnt_chrgrp_spix"], [674, 3, 1, "", "vrnt_chrgrp_stix"], [674, 3, 1, "", "vrnt_genpos"], [674, 3, 1, "", "vrnt_hapalt"], [674, 3, 1, "", "vrnt_hapgrp"], [674, 3, 1, "", "vrnt_hapref"], [674, 3, 1, "", "vrnt_mask"], [674, 3, 1, "", "vrnt_name"], [674, 3, 1, "", "vrnt_phypos"], [674, 3, 1, "", "vrnt_xoprob"]], "pybrops.core.mat.PrunableMatrix": [[677, 1, 1, "", "PrunableMatrix"], [678, 2, 1, "", "check_is_PrunableMatrix"]], "pybrops.core.mat.PrunableMatrix.PrunableMatrix": [[677, 4, 1, "", "__add__"], [677, 4, 1, "", "__mul__"], [677, 4, 1, "", "adjoin"], [677, 4, 1, "", "concat"], [677, 4, 1, "", "copy"], [677, 4, 1, "", "deepcopy"], [677, 4, 1, "", "delete"], [677, 4, 1, "", "from_hdf5"], [677, 4, 1, "", "insert"], [677, 3, 1, "", "mat"], [677, 3, 1, "", "mat_ndim"], [677, 3, 1, "", "mat_shape"], [677, 4, 1, "", "prune"], [677, 4, 1, "", "select"], [677, 4, 1, "", "to_hdf5"]], "pybrops.core.mat.SortableMatrix": [[680, 1, 1, "", "SortableMatrix"], [681, 2, 1, "", "check_is_SortableMatrix"]], "pybrops.core.mat.SortableMatrix.SortableMatrix": [[680, 4, 1, "", "__add__"], [680, 4, 1, "", "__mul__"], [680, 4, 1, "", "adjoin"], [680, 4, 1, "", "append"], [680, 4, 1, "", "concat"], [680, 4, 1, "", "copy"], [680, 4, 1, "", "deepcopy"], [680, 4, 1, "", "delete"], [680, 4, 1, "", "from_hdf5"], [680, 4, 1, "", "incorp"], [680, 4, 1, "", "insert"], [680, 4, 1, "", "lexsort"], [680, 3, 1, "", "mat"], [680, 3, 1, "", "mat_ndim"], [680, 3, 1, "", "mat_shape"], [680, 4, 1, "", "remove"], [680, 4, 1, "", "reorder"], [680, 4, 1, "", "select"], [680, 4, 1, "", "sort"], [680, 4, 1, "", "to_hdf5"]], "pybrops.core.mat.SquareMatrix": [[683, 1, 1, "", "SquareMatrix"], [684, 2, 1, "", "check_is_SquareMatrix"]], "pybrops.core.mat.SquareMatrix.SquareMatrix": [[683, 4, 1, "", "__add__"], [683, 4, 1, "", "__mul__"], [683, 4, 1, "", "adjoin"], [683, 4, 1, "", "concat"], [683, 4, 1, "", "copy"], [683, 4, 1, "", "deepcopy"], [683, 4, 1, "", "delete"], [683, 4, 1, "", "from_hdf5"], [683, 4, 1, "", "insert"], [683, 4, 1, "", "is_square"], [683, 3, 1, "", "mat"], [683, 3, 1, "", "mat_ndim"], [683, 3, 1, "", "mat_shape"], [683, 3, 1, "", "nsquare"], [683, 4, 1, "", "select"], [683, 3, 1, "", "square_axes"], [683, 3, 1, "", "square_axes_len"], [683, 4, 1, "", "to_hdf5"]], "pybrops.core.mat.SquareTaxaMatrix": [[686, 1, 1, "", "SquareTaxaMatrix"], [687, 2, 1, "", "check_is_SquareTaxaMatrix"]], "pybrops.core.mat.SquareTaxaMatrix.SquareTaxaMatrix": [[686, 4, 1, "", "__add__"], [686, 4, 1, "", "__mul__"], [686, 4, 1, "", "adjoin"], [686, 4, 1, "", "adjoin_taxa"], [686, 4, 1, "", "append"], [686, 4, 1, "", "append_taxa"], [686, 4, 1, "", "concat"], [686, 4, 1, "", "concat_taxa"], [686, 4, 1, "", "copy"], [686, 4, 1, "", "deepcopy"], [686, 4, 1, "", "delete"], [686, 4, 1, "", "delete_taxa"], [686, 4, 1, "", "from_hdf5"], [686, 4, 1, "", "group"], [686, 4, 1, "", "group_taxa"], [686, 4, 1, "", "incorp"], [686, 4, 1, "", "incorp_taxa"], [686, 4, 1, "", "insert"], [686, 4, 1, "", "insert_taxa"], [686, 4, 1, "", "is_grouped"], [686, 4, 1, "", "is_grouped_taxa"], [686, 4, 1, "", "is_square"], [686, 4, 1, "", "is_square_taxa"], [686, 4, 1, "", "lexsort"], [686, 4, 1, "", "lexsort_taxa"], [686, 3, 1, "", "mat"], [686, 3, 1, "", "mat_ndim"], [686, 3, 1, "", "mat_shape"], [686, 3, 1, "", "nsquare"], [686, 3, 1, "", "nsquare_taxa"], [686, 3, 1, "", "ntaxa"], [686, 4, 1, "", "remove"], [686, 4, 1, "", "remove_taxa"], [686, 4, 1, "", "reorder"], [686, 4, 1, "", "reorder_taxa"], [686, 4, 1, "", "select"], [686, 4, 1, "", "select_taxa"], [686, 4, 1, "", "sort"], [686, 4, 1, "", "sort_taxa"], [686, 3, 1, "", "square_axes"], [686, 3, 1, "", "square_axes_len"], [686, 3, 1, "", "square_taxa_axes"], [686, 3, 1, "", "square_taxa_axes_len"], [686, 3, 1, "", "taxa"], [686, 3, 1, "", "taxa_axis"], [686, 3, 1, "", "taxa_grp"], [686, 3, 1, "", "taxa_grp_len"], [686, 3, 1, "", "taxa_grp_name"], [686, 3, 1, "", "taxa_grp_spix"], [686, 3, 1, "", "taxa_grp_stix"], [686, 4, 1, "", "to_hdf5"], [686, 4, 1, "", "ungroup"], [686, 4, 1, "", "ungroup_taxa"]], "pybrops.core.mat.SquareTaxaSquareTraitMatrix": [[689, 1, 1, "", "SquareTaxaSquareTraitMatrix"], [690, 2, 1, "", "check_is_SquareTaxaSquareTraitMatrix"]], "pybrops.core.mat.SquareTaxaSquareTraitMatrix.SquareTaxaSquareTraitMatrix": [[689, 4, 1, "", "__add__"], [689, 4, 1, "", "__mul__"], [689, 4, 1, "", "adjoin"], [689, 4, 1, "", "adjoin_taxa"], [689, 4, 1, "", "adjoin_trait"], [689, 4, 1, "", "append"], [689, 4, 1, "", "append_taxa"], [689, 4, 1, "", "append_trait"], [689, 4, 1, "", "concat"], [689, 4, 1, "", "concat_taxa"], [689, 4, 1, "", "concat_trait"], [689, 4, 1, "", "copy"], [689, 4, 1, "", "deepcopy"], [689, 4, 1, "", "delete"], [689, 4, 1, "", "delete_taxa"], [689, 4, 1, "", "delete_trait"], [689, 4, 1, "", "from_hdf5"], [689, 4, 1, "", "group"], [689, 4, 1, "", "group_taxa"], [689, 4, 1, "", "incorp"], [689, 4, 1, "", "incorp_taxa"], [689, 4, 1, "", "incorp_trait"], [689, 4, 1, "", "insert"], [689, 4, 1, "", "insert_taxa"], [689, 4, 1, "", "insert_trait"], [689, 4, 1, "", "is_grouped"], [689, 4, 1, "", "is_grouped_taxa"], [689, 4, 1, "", "is_square"], [689, 4, 1, "", "is_square_taxa"], [689, 4, 1, "", "is_square_trait"], [689, 4, 1, "", "lexsort"], [689, 4, 1, "", "lexsort_taxa"], [689, 4, 1, "", "lexsort_trait"], [689, 3, 1, "", "mat"], [689, 3, 1, "", "mat_ndim"], [689, 3, 1, "", "mat_shape"], [689, 3, 1, "", "nsquare"], [689, 3, 1, "", "nsquare_taxa"], [689, 3, 1, "", "nsquare_trait"], [689, 3, 1, "", "ntaxa"], [689, 3, 1, "", "ntrait"], [689, 4, 1, "", "remove"], [689, 4, 1, "", "remove_taxa"], [689, 4, 1, "", "remove_trait"], [689, 4, 1, "", "reorder"], [689, 4, 1, "", "reorder_taxa"], [689, 4, 1, "", "reorder_trait"], [689, 4, 1, "", "select"], [689, 4, 1, "", "select_taxa"], [689, 4, 1, "", "select_trait"], [689, 4, 1, "", "sort"], [689, 4, 1, "", "sort_taxa"], [689, 4, 1, "", "sort_trait"], [689, 3, 1, "", "square_axes"], [689, 3, 1, "", "square_axes_len"], [689, 3, 1, "", "square_taxa_axes"], [689, 3, 1, "", "square_taxa_axes_len"], [689, 3, 1, "", "square_trait_axes"], [689, 3, 1, "", "square_trait_axes_len"], [689, 3, 1, "", "taxa"], [689, 3, 1, "", "taxa_axis"], [689, 3, 1, "", "taxa_grp"], [689, 3, 1, "", "taxa_grp_len"], [689, 3, 1, "", "taxa_grp_name"], [689, 3, 1, "", "taxa_grp_spix"], [689, 3, 1, "", "taxa_grp_stix"], [689, 4, 1, "", "to_hdf5"], [689, 3, 1, "", "trait"], [689, 3, 1, "", "trait_axis"], [689, 4, 1, "", "ungroup"], [689, 4, 1, "", "ungroup_taxa"]], "pybrops.core.mat.SquareTaxaTraitMatrix": [[692, 1, 1, "", "SquareTaxaTraitMatrix"], [693, 2, 1, "", "check_is_SquareTaxaTraitMatrix"]], "pybrops.core.mat.SquareTaxaTraitMatrix.SquareTaxaTraitMatrix": [[692, 4, 1, "", "__add__"], [692, 4, 1, "", "__mul__"], [692, 4, 1, "", "adjoin"], [692, 4, 1, "", "adjoin_taxa"], [692, 4, 1, "", "adjoin_trait"], [692, 4, 1, "", "append"], [692, 4, 1, "", "append_taxa"], [692, 4, 1, "", "append_trait"], [692, 4, 1, "", "concat"], [692, 4, 1, "", "concat_taxa"], [692, 4, 1, "", "concat_trait"], [692, 4, 1, "", "copy"], [692, 4, 1, "", "deepcopy"], [692, 4, 1, "", "delete"], [692, 4, 1, "", "delete_taxa"], [692, 4, 1, "", "delete_trait"], [692, 4, 1, "", "from_hdf5"], [692, 4, 1, "", "group"], [692, 4, 1, "", "group_taxa"], [692, 4, 1, "", "incorp"], [692, 4, 1, "", "incorp_taxa"], [692, 4, 1, "", "incorp_trait"], [692, 4, 1, "", "insert"], [692, 4, 1, "", "insert_taxa"], [692, 4, 1, "", "insert_trait"], [692, 4, 1, "", "is_grouped"], [692, 4, 1, "", "is_grouped_taxa"], [692, 4, 1, "", "is_square"], [692, 4, 1, "", "is_square_taxa"], [692, 4, 1, "", "lexsort"], [692, 4, 1, "", "lexsort_taxa"], [692, 4, 1, "", "lexsort_trait"], [692, 3, 1, "", "mat"], [692, 3, 1, "", "mat_ndim"], [692, 3, 1, "", "mat_shape"], [692, 3, 1, "", "nsquare"], [692, 3, 1, "", "nsquare_taxa"], [692, 3, 1, "", "ntaxa"], [692, 3, 1, "", "ntrait"], [692, 4, 1, "", "remove"], [692, 4, 1, "", "remove_taxa"], [692, 4, 1, "", "remove_trait"], [692, 4, 1, "", "reorder"], [692, 4, 1, "", "reorder_taxa"], [692, 4, 1, "", "reorder_trait"], [692, 4, 1, "", "select"], [692, 4, 1, "", "select_taxa"], [692, 4, 1, "", "select_trait"], [692, 4, 1, "", "sort"], [692, 4, 1, "", "sort_taxa"], [692, 4, 1, "", "sort_trait"], [692, 3, 1, "", "square_axes"], [692, 3, 1, "", "square_axes_len"], [692, 3, 1, "", "square_taxa_axes"], [692, 3, 1, "", "square_taxa_axes_len"], [692, 3, 1, "", "taxa"], [692, 3, 1, "", "taxa_axis"], [692, 3, 1, "", "taxa_grp"], [692, 3, 1, "", "taxa_grp_len"], [692, 3, 1, "", "taxa_grp_name"], [692, 3, 1, "", "taxa_grp_spix"], [692, 3, 1, "", "taxa_grp_stix"], [692, 4, 1, "", "to_hdf5"], [692, 3, 1, "", "trait"], [692, 3, 1, "", "trait_axis"], [692, 4, 1, "", "ungroup"], [692, 4, 1, "", "ungroup_taxa"]], "pybrops.core.mat.SquareTraitMatrix": [[695, 1, 1, "", "SquareTraitMatrix"], [696, 2, 1, "", "check_is_SquareTraitMatrix"]], "pybrops.core.mat.SquareTraitMatrix.SquareTraitMatrix": [[695, 4, 1, "", "__add__"], [695, 4, 1, "", "__mul__"], [695, 4, 1, "", "adjoin"], [695, 4, 1, "", "adjoin_trait"], [695, 4, 1, "", "append"], [695, 4, 1, "", "append_trait"], [695, 4, 1, "", "concat"], [695, 4, 1, "", "concat_trait"], [695, 4, 1, "", "copy"], [695, 4, 1, "", "deepcopy"], [695, 4, 1, "", "delete"], [695, 4, 1, "", "delete_trait"], [695, 4, 1, "", "from_hdf5"], [695, 4, 1, "", "incorp"], [695, 4, 1, "", "incorp_trait"], [695, 4, 1, "", "insert"], [695, 4, 1, "", "insert_trait"], [695, 4, 1, "", "is_square"], [695, 4, 1, "", "is_square_trait"], [695, 4, 1, "", "lexsort"], [695, 4, 1, "", "lexsort_trait"], [695, 3, 1, "", "mat"], [695, 3, 1, "", "mat_ndim"], [695, 3, 1, "", "mat_shape"], [695, 3, 1, "", "nsquare"], [695, 3, 1, "", "nsquare_trait"], [695, 3, 1, "", "ntrait"], [695, 4, 1, "", "remove"], [695, 4, 1, "", "remove_trait"], [695, 4, 1, "", "reorder"], [695, 4, 1, "", "reorder_trait"], [695, 4, 1, "", "select"], [695, 4, 1, "", "select_trait"], [695, 4, 1, "", "sort"], [695, 4, 1, "", "sort_trait"], [695, 3, 1, "", "square_axes"], [695, 3, 1, "", "square_axes_len"], [695, 3, 1, "", "square_trait_axes"], [695, 3, 1, "", "square_trait_axes_len"], [695, 4, 1, "", "to_hdf5"], [695, 3, 1, "", "trait"], [695, 3, 1, "", "trait_axis"]], "pybrops.core.mat.TaxaMatrix": [[698, 1, 1, "", "TaxaMatrix"], [699, 2, 1, "", "check_is_TaxaMatrix"]], "pybrops.core.mat.TaxaMatrix.TaxaMatrix": [[698, 4, 1, "", "__add__"], [698, 4, 1, "", "__mul__"], [698, 4, 1, "", "adjoin"], [698, 4, 1, "", "adjoin_taxa"], [698, 4, 1, "", "append"], [698, 4, 1, "", "append_taxa"], [698, 4, 1, "", "concat"], [698, 4, 1, "", "concat_taxa"], [698, 4, 1, "", "copy"], [698, 4, 1, "", "deepcopy"], [698, 4, 1, "", "delete"], [698, 4, 1, "", "delete_taxa"], [698, 4, 1, "", "from_hdf5"], [698, 4, 1, "", "group"], [698, 4, 1, "", "group_taxa"], [698, 4, 1, "", "incorp"], [698, 4, 1, "", "incorp_taxa"], [698, 4, 1, "", "insert"], [698, 4, 1, "", "insert_taxa"], [698, 4, 1, "", "is_grouped"], [698, 4, 1, "", "is_grouped_taxa"], [698, 4, 1, "", "lexsort"], [698, 4, 1, "", "lexsort_taxa"], [698, 3, 1, "", "mat"], [698, 3, 1, "", "mat_ndim"], [698, 3, 1, "", "mat_shape"], [698, 3, 1, "", "ntaxa"], [698, 4, 1, "", "remove"], [698, 4, 1, "", "remove_taxa"], [698, 4, 1, "", "reorder"], [698, 4, 1, "", "reorder_taxa"], [698, 4, 1, "", "select"], [698, 4, 1, "", "select_taxa"], [698, 4, 1, "", "sort"], [698, 4, 1, "", "sort_taxa"], [698, 3, 1, "", "taxa"], [698, 3, 1, "", "taxa_axis"], [698, 3, 1, "", "taxa_grp"], [698, 3, 1, "", "taxa_grp_len"], [698, 3, 1, "", "taxa_grp_name"], [698, 3, 1, "", "taxa_grp_spix"], [698, 3, 1, "", "taxa_grp_stix"], [698, 4, 1, "", "to_hdf5"], [698, 4, 1, "", "ungroup"], [698, 4, 1, "", "ungroup_taxa"]], "pybrops.core.mat.TaxaTraitMatrix": [[701, 1, 1, "", "TaxaTraitMatrix"], [702, 2, 1, "", "check_is_TaxaTraitMatrix"]], "pybrops.core.mat.TaxaTraitMatrix.TaxaTraitMatrix": [[701, 4, 1, "", "__add__"], [701, 4, 1, "", "__mul__"], [701, 4, 1, "", "adjoin"], [701, 4, 1, "", "adjoin_taxa"], [701, 4, 1, "", "adjoin_trait"], [701, 4, 1, "", "append"], [701, 4, 1, "", "append_taxa"], [701, 4, 1, "", "append_trait"], [701, 4, 1, "", "concat"], [701, 4, 1, "", "concat_taxa"], [701, 4, 1, "", "concat_trait"], [701, 4, 1, "", "copy"], [701, 4, 1, "", "deepcopy"], [701, 4, 1, "", "delete"], [701, 4, 1, "", "delete_taxa"], [701, 4, 1, "", "delete_trait"], [701, 4, 1, "", "from_hdf5"], [701, 4, 1, "", "group"], [701, 4, 1, "", "group_taxa"], [701, 4, 1, "", "incorp"], [701, 4, 1, "", "incorp_taxa"], [701, 4, 1, "", "incorp_trait"], [701, 4, 1, "", "insert"], [701, 4, 1, "", "insert_taxa"], [701, 4, 1, "", "insert_trait"], [701, 4, 1, "", "is_grouped"], [701, 4, 1, "", "is_grouped_taxa"], [701, 4, 1, "", "lexsort"], [701, 4, 1, "", "lexsort_taxa"], [701, 4, 1, "", "lexsort_trait"], [701, 3, 1, "", "mat"], [701, 3, 1, "", "mat_ndim"], [701, 3, 1, "", "mat_shape"], [701, 3, 1, "", "ntaxa"], [701, 3, 1, "", "ntrait"], [701, 4, 1, "", "remove"], [701, 4, 1, "", "remove_taxa"], [701, 4, 1, "", "remove_trait"], [701, 4, 1, "", "reorder"], [701, 4, 1, "", "reorder_taxa"], [701, 4, 1, "", "reorder_trait"], [701, 4, 1, "", "select"], [701, 4, 1, "", "select_taxa"], [701, 4, 1, "", "select_trait"], [701, 4, 1, "", "sort"], [701, 4, 1, "", "sort_taxa"], [701, 4, 1, "", "sort_trait"], [701, 3, 1, "", "taxa"], [701, 3, 1, "", "taxa_axis"], [701, 3, 1, "", "taxa_grp"], [701, 3, 1, "", "taxa_grp_len"], [701, 3, 1, "", "taxa_grp_name"], [701, 3, 1, "", "taxa_grp_spix"], [701, 3, 1, "", "taxa_grp_stix"], [701, 4, 1, "", "to_hdf5"], [701, 3, 1, "", "trait"], [701, 3, 1, "", "trait_axis"], [701, 4, 1, "", "ungroup"], [701, 4, 1, "", "ungroup_taxa"]], "pybrops.core.mat.TaxaVariantMatrix": [[704, 1, 1, "", "TaxaVariantMatrix"], [705, 2, 1, "", "check_is_TaxaVariantMatrix"]], "pybrops.core.mat.TaxaVariantMatrix.TaxaVariantMatrix": [[704, 4, 1, "", "__add__"], [704, 4, 1, "", "__mul__"], [704, 4, 1, "", "adjoin"], [704, 4, 1, "", "adjoin_taxa"], [704, 4, 1, "", "adjoin_vrnt"], [704, 4, 1, "", "append"], [704, 4, 1, "", "append_taxa"], [704, 4, 1, "", "append_vrnt"], [704, 4, 1, "", "concat"], [704, 4, 1, "", "concat_taxa"], [704, 4, 1, "", "concat_vrnt"], [704, 4, 1, "", "copy"], [704, 4, 1, "", "deepcopy"], [704, 4, 1, "", "delete"], [704, 4, 1, "", "delete_taxa"], [704, 4, 1, "", "delete_vrnt"], [704, 4, 1, "", "from_hdf5"], [704, 4, 1, "", "group"], [704, 4, 1, "", "group_taxa"], [704, 4, 1, "", "group_vrnt"], [704, 4, 1, "", "incorp"], [704, 4, 1, "", "incorp_taxa"], [704, 4, 1, "", "incorp_vrnt"], [704, 4, 1, "", "insert"], [704, 4, 1, "", "insert_taxa"], [704, 4, 1, "", "insert_vrnt"], [704, 4, 1, "", "is_grouped"], [704, 4, 1, "", "is_grouped_taxa"], [704, 4, 1, "", "is_grouped_vrnt"], [704, 4, 1, "", "lexsort"], [704, 4, 1, "", "lexsort_taxa"], [704, 4, 1, "", "lexsort_vrnt"], [704, 3, 1, "", "mat"], [704, 3, 1, "", "mat_ndim"], [704, 3, 1, "", "mat_shape"], [704, 3, 1, "", "ntaxa"], [704, 3, 1, "", "nvrnt"], [704, 4, 1, "", "remove"], [704, 4, 1, "", "remove_taxa"], [704, 4, 1, "", "remove_vrnt"], [704, 4, 1, "", "reorder"], [704, 4, 1, "", "reorder_taxa"], [704, 4, 1, "", "reorder_vrnt"], [704, 4, 1, "", "select"], [704, 4, 1, "", "select_taxa"], [704, 4, 1, "", "select_vrnt"], [704, 4, 1, "", "sort"], [704, 4, 1, "", "sort_taxa"], [704, 4, 1, "", "sort_vrnt"], [704, 3, 1, "", "taxa"], [704, 3, 1, "", "taxa_axis"], [704, 3, 1, "", "taxa_grp"], [704, 3, 1, "", "taxa_grp_len"], [704, 3, 1, "", "taxa_grp_name"], [704, 3, 1, "", "taxa_grp_spix"], [704, 3, 1, "", "taxa_grp_stix"], [704, 4, 1, "", "to_hdf5"], [704, 4, 1, "", "ungroup"], [704, 4, 1, "", "ungroup_taxa"], [704, 4, 1, "", "ungroup_vrnt"], [704, 3, 1, "", "vrnt_axis"], [704, 3, 1, "", "vrnt_chrgrp"], [704, 3, 1, "", "vrnt_chrgrp_len"], [704, 3, 1, "", "vrnt_chrgrp_name"], [704, 3, 1, "", "vrnt_chrgrp_spix"], [704, 3, 1, "", "vrnt_chrgrp_stix"], [704, 3, 1, "", "vrnt_genpos"], [704, 3, 1, "", "vrnt_hapalt"], [704, 3, 1, "", "vrnt_hapgrp"], [704, 3, 1, "", "vrnt_hapref"], [704, 3, 1, "", "vrnt_mask"], [704, 3, 1, "", "vrnt_name"], [704, 3, 1, "", "vrnt_phypos"], [704, 3, 1, "", "vrnt_xoprob"]], "pybrops.core.mat.TraitMatrix": [[707, 1, 1, "", "TraitMatrix"], [708, 2, 1, "", "check_is_TraitMatrix"]], "pybrops.core.mat.TraitMatrix.TraitMatrix": [[707, 4, 1, "", "__add__"], [707, 4, 1, "", "__mul__"], [707, 4, 1, "", "adjoin"], [707, 4, 1, "", "adjoin_trait"], [707, 4, 1, "", "append"], [707, 4, 1, "", "append_trait"], [707, 4, 1, "", "concat"], [707, 4, 1, "", "concat_trait"], [707, 4, 1, "", "copy"], [707, 4, 1, "", "deepcopy"], [707, 4, 1, "", "delete"], [707, 4, 1, "", "delete_trait"], [707, 4, 1, "", "from_hdf5"], [707, 4, 1, "", "incorp"], [707, 4, 1, "", "incorp_trait"], [707, 4, 1, "", "insert"], [707, 4, 1, "", "insert_trait"], [707, 4, 1, "", "lexsort"], [707, 4, 1, "", "lexsort_trait"], [707, 3, 1, "", "mat"], [707, 3, 1, "", "mat_ndim"], [707, 3, 1, "", "mat_shape"], [707, 3, 1, "", "ntrait"], [707, 4, 1, "", "remove"], [707, 4, 1, "", "remove_trait"], [707, 4, 1, "", "reorder"], [707, 4, 1, "", "reorder_trait"], [707, 4, 1, "", "select"], [707, 4, 1, "", "select_trait"], [707, 4, 1, "", "sort"], [707, 4, 1, "", "sort_trait"], [707, 4, 1, "", "to_hdf5"], [707, 3, 1, "", "trait"], [707, 3, 1, "", "trait_axis"]], "pybrops.core.mat.VariantMatrix": [[710, 1, 1, "", "VariantMatrix"], [711, 2, 1, "", "check_is_VariantMatrix"]], "pybrops.core.mat.VariantMatrix.VariantMatrix": [[710, 4, 1, "", "__add__"], [710, 4, 1, "", "__mul__"], [710, 4, 1, "", "adjoin"], [710, 4, 1, "", "adjoin_vrnt"], [710, 4, 1, "", "append"], [710, 4, 1, "", "append_vrnt"], [710, 4, 1, "", "concat"], [710, 4, 1, "", "concat_vrnt"], [710, 4, 1, "", "copy"], [710, 4, 1, "", "deepcopy"], [710, 4, 1, "", "delete"], [710, 4, 1, "", "delete_vrnt"], [710, 4, 1, "", "from_hdf5"], [710, 4, 1, "", "group"], [710, 4, 1, "", "group_vrnt"], [710, 4, 1, "", "incorp"], [710, 4, 1, "", "incorp_vrnt"], [710, 4, 1, "", "insert"], [710, 4, 1, "", "insert_vrnt"], [710, 4, 1, "", "is_grouped"], [710, 4, 1, "", "is_grouped_vrnt"], [710, 4, 1, "", "lexsort"], [710, 4, 1, "", "lexsort_vrnt"], [710, 3, 1, "", "mat"], [710, 3, 1, "", "mat_ndim"], [710, 3, 1, "", "mat_shape"], [710, 3, 1, "", "nvrnt"], [710, 4, 1, "", "remove"], [710, 4, 1, "", "remove_vrnt"], [710, 4, 1, "", "reorder"], [710, 4, 1, "", "reorder_vrnt"], [710, 4, 1, "", "select"], [710, 4, 1, "", "select_vrnt"], [710, 4, 1, "", "sort"], [710, 4, 1, "", "sort_vrnt"], [710, 4, 1, "", "to_hdf5"], [710, 4, 1, "", "ungroup"], [710, 4, 1, "", "ungroup_vrnt"], [710, 3, 1, "", "vrnt_axis"], [710, 3, 1, "", "vrnt_chrgrp"], [710, 3, 1, "", "vrnt_chrgrp_len"], [710, 3, 1, "", "vrnt_chrgrp_name"], [710, 3, 1, "", "vrnt_chrgrp_spix"], [710, 3, 1, "", "vrnt_chrgrp_stix"], [710, 3, 1, "", "vrnt_genpos"], [710, 3, 1, "", "vrnt_hapalt"], [710, 3, 1, "", "vrnt_hapgrp"], [710, 3, 1, "", "vrnt_hapref"], [710, 3, 1, "", "vrnt_mask"], [710, 3, 1, "", "vrnt_name"], [710, 3, 1, "", "vrnt_phypos"], [710, 3, 1, "", "vrnt_xoprob"]], "pybrops.core.mat.util": [[713, 2, 1, "", "get_axis"]], "pybrops.core.random": [[715, 0, 0, "-", "prng"], [718, 0, 0, "-", "sampling"]], "pybrops.core.random.prng": [[716, 2, 1, "", "seed"], [717, 2, 1, "", "spawn"]], "pybrops.core.random.sampling": [[719, 2, 1, "", "axis_shuffle"], [720, 2, 1, "", "outcross_shuffle"], [721, 2, 1, "", "stochastic_universal_sampling"], [722, 2, 1, "", "tiled_choice"]], "pybrops.core.util": [[724, 0, 0, "-", "arrayix"], [731, 0, 0, "-", "h5py"], [734, 0, 0, "-", "haplo"], [739, 0, 0, "-", "iterator"], [741, 0, 0, "-", "pareto"], [743, 0, 0, "-", "subroutines"]], "pybrops.core.util.arrayix": [[725, 2, 1, "", "flattenix"], [726, 2, 1, "", "sliceaxisix"], [727, 2, 1, "", "sqarrayix"], [728, 2, 1, "", "triudix"], [729, 2, 1, "", "triuix"], [730, 2, 1, "", "xmapix"]], "pybrops.core.util.h5py": [[732, 2, 1, "", "h5py_File_is_writable"], [733, 2, 1, "", "save_dict_to_hdf5"]], "pybrops.core.util.haplo": [[735, 2, 1, "", "haplobin"], [736, 2, 1, "", "haplobin_bounds"], [737, 2, 1, "", "haplomat"], [738, 2, 1, "", "nhaploblk_chrom"]], "pybrops.core.util.iterator": [[740, 2, 1, "", "iterlen"]], "pybrops.core.util.pareto": [[742, 2, 1, "", "is_pareto_efficient"]], "pybrops.core.util.subroutines": [[744, 2, 1, "", "human2bytes"], [745, 2, 1, "", "matrix_is_sorted"], [746, 2, 1, "", "slice_to_list"], [747, 2, 1, "", "slice_to_range"], [748, 2, 1, "", "srange"]], "pybrops.model": [[750, 0, 0, "-", "gmod"], [795, 0, 0, "-", "pcvmat"], [838, 0, 0, "-", "vmat"]], "pybrops.model.gmod": [[751, 0, 0, "-", "AdditiveDominanceEpistaticLinearGenomicModel"], [754, 0, 0, "-", "AdditiveDominanceLinearGenomicModel"], [757, 0, 0, "-", "AdditiveLinearGenomicModel"], [760, 0, 0, "-", "CoancestryLinearGenomicModel"], [763, 0, 0, "-", "DenseAdditiveDominanceLinearGenomicModel"], [766, 0, 0, "-", "DenseAdditiveLinearGenomicModel"], [769, 0, 0, "-", "DenseLinearGenomicModel"], [772, 0, 0, "-", "GenomicModel"], [775, 0, 0, "-", "LinearGenomicModel"], [778, 0, 0, "-", "NonlinearGenomicModel"], [781, 0, 0, "-", "rrBLUPModel0"]], "pybrops.model.gmod.AdditiveDominanceEpistaticLinearGenomicModel": [[752, 1, 1, "", "AdditiveDominanceEpistaticLinearGenomicModel"], [753, 2, 1, "", "check_is_AdditiveDominanceEpistaticLinearGenomicModel"]], "pybrops.model.gmod.AdditiveDominanceEpistaticLinearGenomicModel.AdditiveDominanceEpistaticLinearGenomicModel": [[752, 3, 1, "", "beta"], [752, 4, 1, "", "bulmer"], [752, 4, 1, "", "bulmer_numpy"], [752, 4, 1, "", "copy"], [752, 4, 1, "", "daavail"], [752, 4, 1, "", "dacount"], [752, 4, 1, "", "dafixed"], [752, 4, 1, "", "dafreq"], [752, 4, 1, "", "deepcopy"], [752, 4, 1, "", "faavail"], [752, 4, 1, "", "facount"], [752, 4, 1, "", "fafixed"], [752, 4, 1, "", "fafreq"], [752, 4, 1, "", "fit"], [752, 4, 1, "", "fit_numpy"], [752, 4, 1, "", "from_csv_dict"], [752, 4, 1, "", "from_hdf5"], [752, 4, 1, "", "from_pandas_dict"], [752, 4, 1, "", "gebv"], [752, 4, 1, "", "gebv_numpy"], [752, 4, 1, "", "gegv"], [752, 4, 1, "", "gegv_numpy"], [752, 3, 1, "", "hyperparams"], [752, 4, 1, "", "lsl"], [752, 4, 1, "", "lsl_numpy"], [752, 3, 1, "", "model_name"], [752, 3, 1, "", "nexplan"], [752, 3, 1, "", "nexplan_beta"], [752, 3, 1, "", "nexplan_u"], [752, 3, 1, "", "nexplan_u_a"], [752, 3, 1, "", "nexplan_u_d"], [752, 3, 1, "", "nexplan_u_i"], [752, 3, 1, "", "nexplan_u_misc"], [752, 3, 1, "", "nparam"], [752, 3, 1, "", "nparam_beta"], [752, 3, 1, "", "nparam_u"], [752, 3, 1, "", "nparam_u_a"], [752, 3, 1, "", "nparam_u_d"], [752, 3, 1, "", "nparam_u_i"], [752, 3, 1, "", "nparam_u_misc"], [752, 3, 1, "", "ntrait"], [752, 4, 1, "", "predict"], [752, 4, 1, "", "predict_numpy"], [752, 4, 1, "", "score"], [752, 4, 1, "", "score_numpy"], [752, 4, 1, "", "to_csv_dict"], [752, 4, 1, "", "to_hdf5"], [752, 4, 1, "", "to_pandas_dict"], [752, 3, 1, "", "trait"], [752, 3, 1, "", "u"], [752, 3, 1, "", "u_a"], [752, 3, 1, "", "u_d"], [752, 3, 1, "", "u_i"], [752, 3, 1, "", "u_misc"], [752, 4, 1, "", "usl"], [752, 4, 1, "", "usl_numpy"], [752, 4, 1, "", "var_A"], [752, 4, 1, "", "var_A_numpy"], [752, 4, 1, "", "var_G"], [752, 4, 1, "", "var_G_numpy"], [752, 4, 1, "", "var_a"], [752, 4, 1, "", "var_a_numpy"]], "pybrops.model.gmod.AdditiveDominanceLinearGenomicModel": [[755, 1, 1, "", "AdditiveDominanceLinearGenomicModel"], [756, 2, 1, "", "check_is_AdditiveDominanceLinearGenomicModel"]], "pybrops.model.gmod.AdditiveDominanceLinearGenomicModel.AdditiveDominanceLinearGenomicModel": [[755, 3, 1, "", "beta"], [755, 4, 1, "", "bulmer"], [755, 4, 1, "", "bulmer_numpy"], [755, 4, 1, "", "copy"], [755, 4, 1, "", "daavail"], [755, 4, 1, "", "dacount"], [755, 4, 1, "", "dafixed"], [755, 4, 1, "", "dafreq"], [755, 4, 1, "", "deepcopy"], [755, 4, 1, "", "faavail"], [755, 4, 1, "", "facount"], [755, 4, 1, "", "fafixed"], [755, 4, 1, "", "fafreq"], [755, 4, 1, "", "fit"], [755, 4, 1, "", "fit_numpy"], [755, 4, 1, "", "from_csv_dict"], [755, 4, 1, "", "from_hdf5"], [755, 4, 1, "", "from_pandas_dict"], [755, 4, 1, "", "gebv"], [755, 4, 1, "", "gebv_numpy"], [755, 4, 1, "", "gegv"], [755, 4, 1, "", "gegv_numpy"], [755, 3, 1, "", "hyperparams"], [755, 4, 1, "", "lsl"], [755, 4, 1, "", "lsl_numpy"], [755, 3, 1, "", "model_name"], [755, 3, 1, "", "nexplan"], [755, 3, 1, "", "nexplan_beta"], [755, 3, 1, "", "nexplan_u"], [755, 3, 1, "", "nexplan_u_a"], [755, 3, 1, "", "nexplan_u_d"], [755, 3, 1, "", "nexplan_u_misc"], [755, 3, 1, "", "nparam"], [755, 3, 1, "", "nparam_beta"], [755, 3, 1, "", "nparam_u"], [755, 3, 1, "", "nparam_u_a"], [755, 3, 1, "", "nparam_u_d"], [755, 3, 1, "", "nparam_u_misc"], [755, 3, 1, "", "ntrait"], [755, 4, 1, "", "predict"], [755, 4, 1, "", "predict_numpy"], [755, 4, 1, "", "score"], [755, 4, 1, "", "score_numpy"], [755, 4, 1, "", "to_csv_dict"], [755, 4, 1, "", "to_hdf5"], [755, 4, 1, "", "to_pandas_dict"], [755, 3, 1, "", "trait"], [755, 3, 1, "", "u"], [755, 3, 1, "", "u_a"], [755, 3, 1, "", "u_d"], [755, 3, 1, "", "u_misc"], [755, 4, 1, "", "usl"], [755, 4, 1, "", "usl_numpy"], [755, 4, 1, "", "var_A"], [755, 4, 1, "", "var_A_numpy"], [755, 4, 1, "", "var_G"], [755, 4, 1, "", "var_G_numpy"], [755, 4, 1, "", "var_a"], [755, 4, 1, "", "var_a_numpy"]], "pybrops.model.gmod.AdditiveLinearGenomicModel": [[758, 1, 1, "", "AdditiveLinearGenomicModel"], [759, 2, 1, "", "check_is_AdditiveLinearGenomicModel"]], "pybrops.model.gmod.AdditiveLinearGenomicModel.AdditiveLinearGenomicModel": [[758, 3, 1, "", "beta"], [758, 4, 1, "", "bulmer"], [758, 4, 1, "", "bulmer_numpy"], [758, 4, 1, "", "copy"], [758, 4, 1, "", "daavail"], [758, 4, 1, "", "dacount"], [758, 4, 1, "", "dafixed"], [758, 4, 1, "", "dafreq"], [758, 4, 1, "", "deepcopy"], [758, 4, 1, "", "faavail"], [758, 4, 1, "", "facount"], [758, 4, 1, "", "fafixed"], [758, 4, 1, "", "fafreq"], [758, 4, 1, "", "fit"], [758, 4, 1, "", "fit_numpy"], [758, 4, 1, "", "from_csv_dict"], [758, 4, 1, "", "from_hdf5"], [758, 4, 1, "", "from_pandas_dict"], [758, 4, 1, "", "gebv"], [758, 4, 1, "", "gebv_numpy"], [758, 4, 1, "", "gegv"], [758, 4, 1, "", "gegv_numpy"], [758, 3, 1, "", "hyperparams"], [758, 4, 1, "", "lsl"], [758, 4, 1, "", "lsl_numpy"], [758, 3, 1, "", "model_name"], [758, 3, 1, "", "nexplan"], [758, 3, 1, "", "nexplan_beta"], [758, 3, 1, "", "nexplan_u"], [758, 3, 1, "", "nexplan_u_a"], [758, 3, 1, "", "nexplan_u_misc"], [758, 3, 1, "", "nparam"], [758, 3, 1, "", "nparam_beta"], [758, 3, 1, "", "nparam_u"], [758, 3, 1, "", "nparam_u_a"], [758, 3, 1, "", "nparam_u_misc"], [758, 3, 1, "", "ntrait"], [758, 4, 1, "", "predict"], [758, 4, 1, "", "predict_numpy"], [758, 4, 1, "", "score"], [758, 4, 1, "", "score_numpy"], [758, 4, 1, "", "to_csv_dict"], [758, 4, 1, "", "to_hdf5"], [758, 4, 1, "", "to_pandas_dict"], [758, 3, 1, "", "trait"], [758, 3, 1, "", "u"], [758, 3, 1, "", "u_a"], [758, 3, 1, "", "u_misc"], [758, 4, 1, "", "usl"], [758, 4, 1, "", "usl_numpy"], [758, 4, 1, "", "var_A"], [758, 4, 1, "", "var_A_numpy"], [758, 4, 1, "", "var_G"], [758, 4, 1, "", "var_G_numpy"], [758, 4, 1, "", "var_a"], [758, 4, 1, "", "var_a_numpy"]], "pybrops.model.gmod.CoancestryLinearGenomicModel": [[761, 1, 1, "", "CoancestryLinearGenomicModel"], [762, 2, 1, "", "check_is_CoancestryLinearGenomicModel"]], "pybrops.model.gmod.CoancestryLinearGenomicModel.CoancestryLinearGenomicModel": [[761, 3, 1, "", "beta"], [761, 4, 1, "", "bulmer"], [761, 4, 1, "", "bulmer_numpy"], [761, 4, 1, "", "copy"], [761, 4, 1, "", "daavail"], [761, 4, 1, "", "dacount"], [761, 4, 1, "", "dafixed"], [761, 4, 1, "", "dafreq"], [761, 4, 1, "", "deepcopy"], [761, 4, 1, "", "faavail"], [761, 4, 1, "", "facount"], [761, 4, 1, "", "fafixed"], [761, 4, 1, "", "fafreq"], [761, 4, 1, "", "fit"], [761, 4, 1, "", "fit_numpy"], [761, 4, 1, "", "from_csv_dict"], [761, 4, 1, "", "from_hdf5"], [761, 4, 1, "", "from_pandas_dict"], [761, 4, 1, "", "gebv"], [761, 4, 1, "", "gebv_numpy"], [761, 4, 1, "", "gegv"], [761, 4, 1, "", "gegv_numpy"], [761, 3, 1, "", "hyperparams"], [761, 4, 1, "", "lsl"], [761, 4, 1, "", "lsl_numpy"], [761, 3, 1, "", "model_name"], [761, 3, 1, "", "nexplan"], [761, 3, 1, "", "nexplan_beta"], [761, 3, 1, "", "nexplan_u"], [761, 3, 1, "", "nparam"], [761, 3, 1, "", "nparam_beta"], [761, 3, 1, "", "nparam_u"], [761, 3, 1, "", "ntrait"], [761, 4, 1, "", "predict"], [761, 4, 1, "", "predict_numpy"], [761, 4, 1, "", "score"], [761, 4, 1, "", "score_numpy"], [761, 4, 1, "", "to_csv_dict"], [761, 4, 1, "", "to_hdf5"], [761, 4, 1, "", "to_pandas_dict"], [761, 3, 1, "", "trait"], [761, 3, 1, "", "u"], [761, 3, 1, "", "u_c"], [761, 3, 1, "", "u_misc"], [761, 4, 1, "", "usl"], [761, 4, 1, "", "usl_numpy"], [761, 4, 1, "", "var_A"], [761, 4, 1, "", "var_A_numpy"], [761, 4, 1, "", "var_G"], [761, 4, 1, "", "var_G_numpy"], [761, 4, 1, "", "var_a"], [761, 4, 1, "", "var_a_numpy"]], "pybrops.model.gmod.DenseAdditiveDominanceLinearGenomicModel": [[764, 1, 1, "", "DenseAdditiveDominanceLinearGenomicModel"], [765, 2, 1, "", "check_is_DenseAdditiveDominanceLinearGenomicModel"]], "pybrops.model.gmod.DenseAdditiveDominanceLinearGenomicModel.DenseAdditiveDominanceLinearGenomicModel": [[764, 3, 1, "", "beta"], [764, 4, 1, "", "bulmer"], [764, 4, 1, "", "bulmer_numpy"], [764, 4, 1, "", "copy"], [764, 4, 1, "", "daavail"], [764, 4, 1, "", "dacount"], [764, 4, 1, "", "dafixed"], [764, 4, 1, "", "dafreq"], [764, 4, 1, "", "deepcopy"], [764, 4, 1, "", "faavail"], [764, 4, 1, "", "facount"], [764, 4, 1, "", "fafixed"], [764, 4, 1, "", "fafreq"], [764, 4, 1, "", "fit"], [764, 4, 1, "", "fit_numpy"], [764, 4, 1, "", "from_csv_dict"], [764, 4, 1, "", "from_hdf5"], [764, 4, 1, "", "from_pandas_dict"], [764, 4, 1, "", "gebv"], [764, 4, 1, "", "gebv_numpy"], [764, 4, 1, "", "gegv"], [764, 4, 1, "", "gegv_numpy"], [764, 3, 1, "", "hyperparams"], [764, 4, 1, "", "lsl"], [764, 4, 1, "", "lsl_numpy"], [764, 3, 1, "", "model_name"], [764, 3, 1, "", "nexplan"], [764, 3, 1, "", "nexplan_beta"], [764, 3, 1, "", "nexplan_u"], [764, 3, 1, "", "nexplan_u_a"], [764, 3, 1, "", "nexplan_u_d"], [764, 3, 1, "", "nexplan_u_misc"], [764, 3, 1, "", "nparam"], [764, 3, 1, "", "nparam_beta"], [764, 3, 1, "", "nparam_u"], [764, 3, 1, "", "nparam_u_a"], [764, 3, 1, "", "nparam_u_d"], [764, 3, 1, "", "nparam_u_misc"], [764, 3, 1, "", "ntrait"], [764, 4, 1, "", "predict"], [764, 4, 1, "", "predict_numpy"], [764, 4, 1, "", "score"], [764, 4, 1, "", "score_numpy"], [764, 4, 1, "", "to_csv_dict"], [764, 4, 1, "", "to_hdf5"], [764, 4, 1, "", "to_pandas_dict"], [764, 3, 1, "", "trait"], [764, 3, 1, "", "u"], [764, 3, 1, "", "u_a"], [764, 3, 1, "", "u_d"], [764, 3, 1, "", "u_misc"], [764, 4, 1, "", "usl"], [764, 4, 1, "", "usl_numpy"], [764, 4, 1, "", "var_A"], [764, 4, 1, "", "var_A_numpy"], [764, 4, 1, "", "var_G"], [764, 4, 1, "", "var_G_numpy"], [764, 4, 1, "", "var_a"], [764, 4, 1, "", "var_a_numpy"]], "pybrops.model.gmod.DenseAdditiveLinearGenomicModel": [[767, 1, 1, "", "DenseAdditiveLinearGenomicModel"], [768, 2, 1, "", "check_is_DenseAdditiveLinearGenomicModel"]], "pybrops.model.gmod.DenseAdditiveLinearGenomicModel.DenseAdditiveLinearGenomicModel": [[767, 3, 1, "", "beta"], [767, 4, 1, "", "bulmer"], [767, 4, 1, "", "bulmer_numpy"], [767, 4, 1, "", "copy"], [767, 4, 1, "", "daavail"], [767, 4, 1, "", "dacount"], [767, 4, 1, "", "dafixed"], [767, 4, 1, "", "dafreq"], [767, 4, 1, "", "deepcopy"], [767, 4, 1, "", "faavail"], [767, 4, 1, "", "facount"], [767, 4, 1, "", "fafixed"], [767, 4, 1, "", "fafreq"], [767, 4, 1, "", "fit"], [767, 4, 1, "", "fit_numpy"], [767, 4, 1, "", "from_csv_dict"], [767, 4, 1, "", "from_hdf5"], [767, 4, 1, "", "from_pandas_dict"], [767, 4, 1, "", "gebv"], [767, 4, 1, "", "gebv_numpy"], [767, 4, 1, "", "gegv"], [767, 4, 1, "", "gegv_numpy"], [767, 3, 1, "", "hyperparams"], [767, 4, 1, "", "lsl"], [767, 4, 1, "", "lsl_numpy"], [767, 3, 1, "", "model_name"], [767, 3, 1, "", "nexplan"], [767, 3, 1, "", "nexplan_beta"], [767, 3, 1, "", "nexplan_u"], [767, 3, 1, "", "nexplan_u_a"], [767, 3, 1, "", "nexplan_u_misc"], [767, 3, 1, "", "nparam"], [767, 3, 1, "", "nparam_beta"], [767, 3, 1, "", "nparam_u"], [767, 3, 1, "", "nparam_u_a"], [767, 3, 1, "", "nparam_u_misc"], [767, 3, 1, "", "ntrait"], [767, 4, 1, "", "predict"], [767, 4, 1, "", "predict_numpy"], [767, 4, 1, "", "score"], [767, 4, 1, "", "score_numpy"], [767, 4, 1, "", "to_csv_dict"], [767, 4, 1, "", "to_hdf5"], [767, 4, 1, "", "to_pandas_dict"], [767, 3, 1, "", "trait"], [767, 3, 1, "", "u"], [767, 3, 1, "", "u_a"], [767, 3, 1, "", "u_misc"], [767, 4, 1, "", "usl"], [767, 4, 1, "", "usl_numpy"], [767, 4, 1, "", "var_A"], [767, 4, 1, "", "var_A_numpy"], [767, 4, 1, "", "var_G"], [767, 4, 1, "", "var_G_numpy"], [767, 4, 1, "", "var_a"], [767, 4, 1, "", "var_a_numpy"]], "pybrops.model.gmod.DenseLinearGenomicModel": [[770, 1, 1, "", "DenseLinearGenomicModel"], [771, 2, 1, "", "check_is_DenseLinearGenomicModel"]], "pybrops.model.gmod.DenseLinearGenomicModel.DenseLinearGenomicModel": [[770, 3, 1, "", "beta"], [770, 4, 1, "", "bulmer"], [770, 4, 1, "", "bulmer_numpy"], [770, 4, 1, "", "copy"], [770, 4, 1, "", "daavail"], [770, 4, 1, "", "dacount"], [770, 4, 1, "", "dafixed"], [770, 4, 1, "", "dafreq"], [770, 4, 1, "", "deepcopy"], [770, 4, 1, "", "faavail"], [770, 4, 1, "", "facount"], [770, 4, 1, "", "fafixed"], [770, 4, 1, "", "fafreq"], [770, 4, 1, "", "fit"], [770, 4, 1, "", "fit_numpy"], [770, 4, 1, "", "from_csv_dict"], [770, 4, 1, "", "from_hdf5"], [770, 4, 1, "", "from_pandas_dict"], [770, 4, 1, "", "gebv"], [770, 4, 1, "", "gebv_numpy"], [770, 4, 1, "", "gegv"], [770, 4, 1, "", "gegv_numpy"], [770, 3, 1, "", "hyperparams"], [770, 4, 1, "", "lsl"], [770, 4, 1, "", "lsl_numpy"], [770, 3, 1, "", "model_name"], [770, 3, 1, "", "nexplan"], [770, 3, 1, "", "nexplan_beta"], [770, 3, 1, "", "nexplan_u"], [770, 3, 1, "", "nparam"], [770, 3, 1, "", "nparam_beta"], [770, 3, 1, "", "nparam_u"], [770, 3, 1, "", "ntrait"], [770, 4, 1, "", "predict"], [770, 4, 1, "", "predict_numpy"], [770, 4, 1, "", "score"], [770, 4, 1, "", "score_numpy"], [770, 4, 1, "", "to_csv_dict"], [770, 4, 1, "", "to_hdf5"], [770, 4, 1, "", "to_pandas_dict"], [770, 3, 1, "", "trait"], [770, 3, 1, "", "u"], [770, 4, 1, "", "usl"], [770, 4, 1, "", "usl_numpy"], [770, 4, 1, "", "var_A"], [770, 4, 1, "", "var_A_numpy"], [770, 4, 1, "", "var_G"], [770, 4, 1, "", "var_G_numpy"], [770, 4, 1, "", "var_a"], [770, 4, 1, "", "var_a_numpy"]], "pybrops.model.gmod.GenomicModel": [[773, 1, 1, "", "GenomicModel"], [774, 2, 1, "", "check_is_GenomicModel"]], "pybrops.model.gmod.GenomicModel.GenomicModel": [[773, 4, 1, "", "bulmer"], [773, 4, 1, "", "bulmer_numpy"], [773, 4, 1, "", "copy"], [773, 4, 1, "", "daavail"], [773, 4, 1, "", "dacount"], [773, 4, 1, "", "dafixed"], [773, 4, 1, "", "dafreq"], [773, 4, 1, "", "deepcopy"], [773, 4, 1, "", "faavail"], [773, 4, 1, "", "facount"], [773, 4, 1, "", "fafixed"], [773, 4, 1, "", "fafreq"], [773, 4, 1, "", "fit"], [773, 4, 1, "", "fit_numpy"], [773, 4, 1, "", "from_hdf5"], [773, 4, 1, "", "gebv"], [773, 4, 1, "", "gebv_numpy"], [773, 4, 1, "", "gegv"], [773, 4, 1, "", "gegv_numpy"], [773, 3, 1, "", "hyperparams"], [773, 4, 1, "", "lsl"], [773, 4, 1, "", "lsl_numpy"], [773, 3, 1, "", "model_name"], [773, 3, 1, "", "nexplan"], [773, 3, 1, "", "nparam"], [773, 3, 1, "", "ntrait"], [773, 4, 1, "", "predict"], [773, 4, 1, "", "predict_numpy"], [773, 4, 1, "", "score"], [773, 4, 1, "", "score_numpy"], [773, 4, 1, "", "to_hdf5"], [773, 3, 1, "", "trait"], [773, 4, 1, "", "usl"], [773, 4, 1, "", "usl_numpy"], [773, 4, 1, "", "var_A"], [773, 4, 1, "", "var_A_numpy"], [773, 4, 1, "", "var_G"], [773, 4, 1, "", "var_G_numpy"], [773, 4, 1, "", "var_a"], [773, 4, 1, "", "var_a_numpy"]], "pybrops.model.gmod.LinearGenomicModel": [[776, 1, 1, "", "LinearGenomicModel"], [777, 2, 1, "", "check_is_LinearGenomicModel"]], "pybrops.model.gmod.LinearGenomicModel.LinearGenomicModel": [[776, 3, 1, "", "beta"], [776, 4, 1, "", "bulmer"], [776, 4, 1, "", "bulmer_numpy"], [776, 4, 1, "", "copy"], [776, 4, 1, "", "daavail"], [776, 4, 1, "", "dacount"], [776, 4, 1, "", "dafixed"], [776, 4, 1, "", "dafreq"], [776, 4, 1, "", "deepcopy"], [776, 4, 1, "", "faavail"], [776, 4, 1, "", "facount"], [776, 4, 1, "", "fafixed"], [776, 4, 1, "", "fafreq"], [776, 4, 1, "", "fit"], [776, 4, 1, "", "fit_numpy"], [776, 4, 1, "", "from_csv_dict"], [776, 4, 1, "", "from_hdf5"], [776, 4, 1, "", "from_pandas_dict"], [776, 4, 1, "", "gebv"], [776, 4, 1, "", "gebv_numpy"], [776, 4, 1, "", "gegv"], [776, 4, 1, "", "gegv_numpy"], [776, 3, 1, "", "hyperparams"], [776, 4, 1, "", "lsl"], [776, 4, 1, "", "lsl_numpy"], [776, 3, 1, "", "model_name"], [776, 3, 1, "", "nexplan"], [776, 3, 1, "", "nexplan_beta"], [776, 3, 1, "", "nexplan_u"], [776, 3, 1, "", "nparam"], [776, 3, 1, "", "nparam_beta"], [776, 3, 1, "", "nparam_u"], [776, 3, 1, "", "ntrait"], [776, 4, 1, "", "predict"], [776, 4, 1, "", "predict_numpy"], [776, 4, 1, "", "score"], [776, 4, 1, "", "score_numpy"], [776, 4, 1, "", "to_csv_dict"], [776, 4, 1, "", "to_hdf5"], [776, 4, 1, "", "to_pandas_dict"], [776, 3, 1, "", "trait"], [776, 3, 1, "", "u"], [776, 4, 1, "", "usl"], [776, 4, 1, "", "usl_numpy"], [776, 4, 1, "", "var_A"], [776, 4, 1, "", "var_A_numpy"], [776, 4, 1, "", "var_G"], [776, 4, 1, "", "var_G_numpy"], [776, 4, 1, "", "var_a"], [776, 4, 1, "", "var_a_numpy"]], "pybrops.model.gmod.NonlinearGenomicModel": [[779, 1, 1, "", "NonlinearGenomicModel"], [780, 2, 1, "", "check_is_NonlinearGenomicModel"]], "pybrops.model.gmod.NonlinearGenomicModel.NonlinearGenomicModel": [[779, 4, 1, "", "bulmer"], [779, 4, 1, "", "bulmer_numpy"], [779, 4, 1, "", "copy"], [779, 4, 1, "", "daavail"], [779, 4, 1, "", "dacount"], [779, 4, 1, "", "dafixed"], [779, 4, 1, "", "dafreq"], [779, 4, 1, "", "deepcopy"], [779, 4, 1, "", "faavail"], [779, 4, 1, "", "facount"], [779, 4, 1, "", "fafixed"], [779, 4, 1, "", "fafreq"], [779, 4, 1, "", "fit"], [779, 4, 1, "", "fit_numpy"], [779, 4, 1, "", "from_hdf5"], [779, 4, 1, "", "gebv"], [779, 4, 1, "", "gebv_numpy"], [779, 4, 1, "", "gegv"], [779, 4, 1, "", "gegv_numpy"], [779, 3, 1, "", "hyperparams"], [779, 4, 1, "", "lsl"], [779, 4, 1, "", "lsl_numpy"], [779, 3, 1, "", "model_name"], [779, 3, 1, "", "nexplan"], [779, 3, 1, "", "nparam"], [779, 3, 1, "", "ntrait"], [779, 4, 1, "", "predict"], [779, 4, 1, "", "predict_numpy"], [779, 4, 1, "", "score"], [779, 4, 1, "", "score_numpy"], [779, 4, 1, "", "to_hdf5"], [779, 3, 1, "", "trait"], [779, 4, 1, "", "usl"], [779, 4, 1, "", "usl_numpy"], [779, 4, 1, "", "var_A"], [779, 4, 1, "", "var_A_numpy"], [779, 4, 1, "", "var_G"], [779, 4, 1, "", "var_G_numpy"], [779, 4, 1, "", "var_a"], [779, 4, 1, "", "var_a_numpy"]], "pybrops.model.gmod.rrBLUPModel0": [[782, 2, 1, "", "check_is_rrBLUPModel0"], [783, 2, 1, "", "gauss_seidel"], [784, 1, 1, "", "rrBLUPModel0"], [785, 2, 1, "", "rrBLUP_ML0"], [786, 2, 1, "", "rrBLUP_ML0_calc_G"], [787, 2, 1, "", "rrBLUP_ML0_calc_ZtZplI"], [788, 2, 1, "", "rrBLUP_ML0_calc_Zty"], [789, 2, 1, "", "rrBLUP_ML0_calc_d_V"], [790, 2, 1, "", "rrBLUP_ML0_calc_etasq"], [791, 2, 1, "", "rrBLUP_ML0_calc_ridge"], [792, 2, 1, "", "rrBLUP_ML0_center_y"], [793, 2, 1, "", "rrBLUP_ML0_neg2LogLik_fast"], [794, 2, 1, "", "rrBLUP_ML0_nonzero_d_V"]], "pybrops.model.gmod.rrBLUPModel0.rrBLUPModel0": [[784, 3, 1, "", "beta"], [784, 4, 1, "", "bulmer"], [784, 4, 1, "", "bulmer_numpy"], [784, 4, 1, "", "copy"], [784, 4, 1, "", "daavail"], [784, 4, 1, "", "dacount"], [784, 4, 1, "", "dafixed"], [784, 4, 1, "", "dafreq"], [784, 4, 1, "", "deepcopy"], [784, 4, 1, "", "faavail"], [784, 4, 1, "", "facount"], [784, 4, 1, "", "fafixed"], [784, 4, 1, "", "fafreq"], [784, 4, 1, "", "fit"], [784, 4, 1, "", "fit_numpy"], [784, 4, 1, "", "from_csv_dict"], [784, 4, 1, "", "from_hdf5"], [784, 4, 1, "", "from_pandas_dict"], [784, 4, 1, "", "gebv"], [784, 4, 1, "", "gebv_numpy"], [784, 4, 1, "", "gegv"], [784, 4, 1, "", "gegv_numpy"], [784, 3, 1, "", "hyperparams"], [784, 4, 1, "", "lsl"], [784, 4, 1, "", "lsl_numpy"], [784, 3, 1, "", "method"], [784, 3, 1, "", "model_name"], [784, 3, 1, "", "nexplan"], [784, 3, 1, "", "nexplan_beta"], [784, 3, 1, "", "nexplan_u"], [784, 3, 1, "", "nexplan_u_a"], [784, 3, 1, "", "nexplan_u_misc"], [784, 3, 1, "", "nparam"], [784, 3, 1, "", "nparam_beta"], [784, 3, 1, "", "nparam_u"], [784, 3, 1, "", "nparam_u_a"], [784, 3, 1, "", "nparam_u_misc"], [784, 3, 1, "", "ntrait"], [784, 4, 1, "", "predict"], [784, 4, 1, "", "predict_numpy"], [784, 4, 1, "", "score"], [784, 4, 1, "", "score_numpy"], [784, 4, 1, "", "to_csv_dict"], [784, 4, 1, "", "to_hdf5"], [784, 4, 1, "", "to_pandas_dict"], [784, 3, 1, "", "trait"], [784, 3, 1, "", "u"], [784, 3, 1, "", "u_a"], [784, 3, 1, "", "u_misc"], [784, 4, 1, "", "usl"], [784, 4, 1, "", "usl_numpy"], [784, 4, 1, "", "var_A"], [784, 4, 1, "", "var_A_numpy"], [784, 4, 1, "", "var_G"], [784, 4, 1, "", "var_G_numpy"], [784, 4, 1, "", "var_a"], [784, 4, 1, "", "var_a_numpy"]], "pybrops.model.pcvmat": [[796, 0, 0, "-", "AdditiveProgenyGeneticCovarianceMatrix"], [799, 0, 0, "-", "AdditiveProgenyGenicCovarianceMatrix"], [802, 0, 0, "-", "DenseAdditiveProgenyGeneticCovarianceMatrix"], [805, 0, 0, "-", "DenseAdditiveProgenyGenicCovarianceMatrix"], [808, 0, 0, "-", "DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix"], [811, 0, 0, "-", "DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix"], [813, 0, 0, "-", "DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix"], [816, 0, 0, "-", "DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix"], [818, 0, 0, "-", "DenseProgenyGeneticCovarianceMatrix"], [821, 0, 0, "-", "DenseProgenyGenicCovarianceMatrix"], [824, 0, 0, "-", "DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix"], [826, 0, 0, "-", "DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix"], [828, 0, 0, "-", "DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix"], [830, 0, 0, "-", "DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix"], [832, 0, 0, "-", "ProgenyGeneticCovarianceMatrix"], [835, 0, 0, "-", "ProgenyGenicCovarianceMatrix"]], "pybrops.model.pcvmat.AdditiveProgenyGeneticCovarianceMatrix": [[797, 1, 1, "", "AdditiveProgenyGeneticCovarianceMatrix"], [798, 2, 1, "", "check_is_AdditiveProgenyGeneticCovarianceMatrix"]], "pybrops.model.pcvmat.AdditiveProgenyGeneticCovarianceMatrix.AdditiveProgenyGeneticCovarianceMatrix": [[797, 4, 1, "", "__add__"], [797, 4, 1, "", "__mul__"], [797, 4, 1, "", "adjoin"], [797, 4, 1, "", "adjoin_taxa"], [797, 4, 1, "", "adjoin_trait"], [797, 4, 1, "", "append"], [797, 4, 1, "", "append_taxa"], [797, 4, 1, "", "append_trait"], [797, 4, 1, "", "concat"], [797, 4, 1, "", "concat_taxa"], [797, 4, 1, "", "concat_trait"], [797, 4, 1, "", "copy"], [797, 4, 1, "", "deepcopy"], [797, 4, 1, "", "delete"], [797, 4, 1, "", "delete_taxa"], [797, 4, 1, "", "delete_trait"], [797, 3, 1, "", "epgc"], [797, 4, 1, "", "from_algmod"], [797, 4, 1, "", "from_csv"], [797, 4, 1, "", "from_gmod"], [797, 4, 1, "", "from_hdf5"], [797, 4, 1, "", "from_pandas"], [797, 4, 1, "", "group"], [797, 4, 1, "", "group_taxa"], [797, 4, 1, "", "incorp"], [797, 4, 1, "", "incorp_taxa"], [797, 4, 1, "", "incorp_trait"], [797, 4, 1, "", "insert"], [797, 4, 1, "", "insert_taxa"], [797, 4, 1, "", "insert_trait"], [797, 4, 1, "", "is_grouped"], [797, 4, 1, "", "is_grouped_taxa"], [797, 4, 1, "", "is_square"], [797, 4, 1, "", "is_square_taxa"], [797, 4, 1, "", "is_square_trait"], [797, 4, 1, "", "lexsort"], [797, 4, 1, "", "lexsort_taxa"], [797, 4, 1, "", "lexsort_trait"], [797, 3, 1, "", "mat"], [797, 3, 1, "", "mat_ndim"], [797, 3, 1, "", "mat_shape"], [797, 3, 1, "", "nsquare"], [797, 3, 1, "", "nsquare_taxa"], [797, 3, 1, "", "nsquare_trait"], [797, 3, 1, "", "ntaxa"], [797, 3, 1, "", "ntrait"], [797, 4, 1, "", "remove"], [797, 4, 1, "", "remove_taxa"], [797, 4, 1, "", "remove_trait"], [797, 4, 1, "", "reorder"], [797, 4, 1, "", "reorder_taxa"], [797, 4, 1, "", "reorder_trait"], [797, 4, 1, "", "select"], [797, 4, 1, "", "select_taxa"], [797, 4, 1, "", "select_trait"], [797, 4, 1, "", "sort"], [797, 4, 1, "", "sort_taxa"], [797, 4, 1, "", "sort_trait"], [797, 3, 1, "", "square_axes"], [797, 3, 1, "", "square_axes_len"], [797, 3, 1, "", "square_taxa_axes"], [797, 3, 1, "", "square_taxa_axes_len"], [797, 3, 1, "", "square_trait_axes"], [797, 3, 1, "", "square_trait_axes_len"], [797, 3, 1, "", "taxa"], [797, 3, 1, "", "taxa_axis"], [797, 3, 1, "", "taxa_grp"], [797, 3, 1, "", "taxa_grp_len"], [797, 3, 1, "", "taxa_grp_name"], [797, 3, 1, "", "taxa_grp_spix"], [797, 3, 1, "", "taxa_grp_stix"], [797, 4, 1, "", "to_csv"], [797, 4, 1, "", "to_hdf5"], [797, 4, 1, "", "to_pandas"], [797, 3, 1, "", "trait"], [797, 3, 1, "", "trait_axis"], [797, 4, 1, "", "ungroup"], [797, 4, 1, "", "ungroup_taxa"]], "pybrops.model.pcvmat.AdditiveProgenyGenicCovarianceMatrix": [[800, 1, 1, "", "AdditiveProgenyGenicCovarianceMatrix"], [801, 2, 1, "", "check_is_AdditiveProgenyGenicCovarianceMatrix"]], "pybrops.model.pcvmat.AdditiveProgenyGenicCovarianceMatrix.AdditiveProgenyGenicCovarianceMatrix": [[800, 4, 1, "", "__add__"], [800, 4, 1, "", "__mul__"], [800, 4, 1, "", "adjoin"], [800, 4, 1, "", "adjoin_taxa"], [800, 4, 1, "", "adjoin_trait"], [800, 4, 1, "", "append"], [800, 4, 1, "", "append_taxa"], [800, 4, 1, "", "append_trait"], [800, 4, 1, "", "concat"], [800, 4, 1, "", "concat_taxa"], [800, 4, 1, "", "concat_trait"], [800, 4, 1, "", "copy"], [800, 4, 1, "", "deepcopy"], [800, 4, 1, "", "delete"], [800, 4, 1, "", "delete_taxa"], [800, 4, 1, "", "delete_trait"], [800, 3, 1, "", "epgc"], [800, 4, 1, "", "from_algmod"], [800, 4, 1, "", "from_csv"], [800, 4, 1, "", "from_gmod"], [800, 4, 1, "", "from_hdf5"], [800, 4, 1, "", "from_pandas"], [800, 4, 1, "", "group"], [800, 4, 1, "", "group_taxa"], [800, 4, 1, "", "incorp"], [800, 4, 1, "", "incorp_taxa"], [800, 4, 1, "", "incorp_trait"], [800, 4, 1, "", "insert"], [800, 4, 1, "", "insert_taxa"], [800, 4, 1, "", "insert_trait"], [800, 4, 1, "", "is_grouped"], [800, 4, 1, "", "is_grouped_taxa"], [800, 4, 1, "", "is_square"], [800, 4, 1, "", "is_square_taxa"], [800, 4, 1, "", "is_square_trait"], [800, 4, 1, "", "lexsort"], [800, 4, 1, "", "lexsort_taxa"], [800, 4, 1, "", "lexsort_trait"], [800, 3, 1, "", "mat"], [800, 3, 1, "", "mat_ndim"], [800, 3, 1, "", "mat_shape"], [800, 3, 1, "", "nsquare"], [800, 3, 1, "", "nsquare_taxa"], [800, 3, 1, "", "nsquare_trait"], [800, 3, 1, "", "ntaxa"], [800, 3, 1, "", "ntrait"], [800, 4, 1, "", "remove"], [800, 4, 1, "", "remove_taxa"], [800, 4, 1, "", "remove_trait"], [800, 4, 1, "", "reorder"], [800, 4, 1, "", "reorder_taxa"], [800, 4, 1, "", "reorder_trait"], [800, 4, 1, "", "select"], [800, 4, 1, "", "select_taxa"], [800, 4, 1, "", "select_trait"], [800, 4, 1, "", "sort"], [800, 4, 1, "", "sort_taxa"], [800, 4, 1, "", "sort_trait"], [800, 3, 1, "", "square_axes"], [800, 3, 1, "", "square_axes_len"], [800, 3, 1, "", "square_taxa_axes"], [800, 3, 1, "", "square_taxa_axes_len"], [800, 3, 1, "", "square_trait_axes"], [800, 3, 1, "", "square_trait_axes_len"], [800, 3, 1, "", "taxa"], [800, 3, 1, "", "taxa_axis"], [800, 3, 1, "", "taxa_grp"], [800, 3, 1, "", "taxa_grp_len"], [800, 3, 1, "", "taxa_grp_name"], [800, 3, 1, "", "taxa_grp_spix"], [800, 3, 1, "", "taxa_grp_stix"], [800, 4, 1, "", "to_csv"], [800, 4, 1, "", "to_hdf5"], [800, 4, 1, "", "to_pandas"], [800, 3, 1, "", "trait"], [800, 3, 1, "", "trait_axis"], [800, 4, 1, "", "ungroup"], [800, 4, 1, "", "ungroup_taxa"]], "pybrops.model.pcvmat.DenseAdditiveProgenyGeneticCovarianceMatrix": [[803, 1, 1, "", "DenseAdditiveProgenyGeneticCovarianceMatrix"], [804, 2, 1, "", "check_is_DenseAdditiveProgenyGeneticCovarianceMatrix"]], "pybrops.model.pcvmat.DenseAdditiveProgenyGeneticCovarianceMatrix.DenseAdditiveProgenyGeneticCovarianceMatrix": [[803, 4, 1, "", "__add__"], [803, 4, 1, "", "__mul__"], [803, 4, 1, "", "adjoin"], [803, 4, 1, "", "adjoin_taxa"], [803, 4, 1, "", "adjoin_trait"], [803, 4, 1, "", "append"], [803, 4, 1, "", "append_taxa"], [803, 4, 1, "", "append_trait"], [803, 4, 1, "", "concat"], [803, 4, 1, "", "concat_taxa"], [803, 4, 1, "", "concat_trait"], [803, 4, 1, "", "copy"], [803, 4, 1, "", "deepcopy"], [803, 4, 1, "", "delete"], [803, 4, 1, "", "delete_taxa"], [803, 4, 1, "", "delete_trait"], [803, 3, 1, "", "epgc"], [803, 4, 1, "", "from_algmod"], [803, 4, 1, "", "from_csv"], [803, 4, 1, "", "from_gmod"], [803, 4, 1, "", "from_hdf5"], [803, 4, 1, "", "from_pandas"], [803, 4, 1, "", "group"], [803, 4, 1, "", "group_taxa"], [803, 4, 1, "", "incorp"], [803, 4, 1, "", "incorp_taxa"], [803, 4, 1, "", "incorp_trait"], [803, 4, 1, "", "insert"], [803, 4, 1, "", "insert_taxa"], [803, 4, 1, "", "insert_trait"], [803, 4, 1, "", "is_grouped"], [803, 4, 1, "", "is_grouped_taxa"], [803, 4, 1, "", "is_square"], [803, 4, 1, "", "is_square_taxa"], [803, 4, 1, "", "is_square_trait"], [803, 4, 1, "", "lexsort"], [803, 4, 1, "", "lexsort_taxa"], [803, 4, 1, "", "lexsort_trait"], [803, 3, 1, "", "mat"], [803, 3, 1, "", "mat_ndim"], [803, 3, 1, "", "mat_shape"], [803, 3, 1, "", "nsquare"], [803, 3, 1, "", "nsquare_taxa"], [803, 3, 1, "", "nsquare_trait"], [803, 3, 1, "", "ntaxa"], [803, 3, 1, "", "ntrait"], [803, 4, 1, "", "remove"], [803, 4, 1, "", "remove_taxa"], [803, 4, 1, "", "remove_trait"], [803, 4, 1, "", "reorder"], [803, 4, 1, "", "reorder_taxa"], [803, 4, 1, "", "reorder_trait"], [803, 4, 1, "", "select"], [803, 4, 1, "", "select_taxa"], [803, 4, 1, "", "select_trait"], [803, 4, 1, "", "sort"], [803, 4, 1, "", "sort_taxa"], [803, 4, 1, "", "sort_trait"], [803, 3, 1, "", "square_axes"], [803, 3, 1, "", "square_axes_len"], [803, 3, 1, "", "square_taxa_axes"], [803, 3, 1, "", "square_taxa_axes_len"], [803, 3, 1, "", "square_trait_axes"], [803, 3, 1, "", "square_trait_axes_len"], [803, 3, 1, "", "taxa"], [803, 3, 1, "", "taxa_axis"], [803, 3, 1, "", "taxa_grp"], [803, 3, 1, "", "taxa_grp_len"], [803, 3, 1, "", "taxa_grp_name"], [803, 3, 1, "", "taxa_grp_spix"], [803, 3, 1, "", "taxa_grp_stix"], [803, 4, 1, "", "to_csv"], [803, 4, 1, "", "to_hdf5"], [803, 4, 1, "", "to_pandas"], [803, 3, 1, "", "trait"], [803, 3, 1, "", "trait_axis"], [803, 4, 1, "", "ungroup"], [803, 4, 1, "", "ungroup_taxa"]], "pybrops.model.pcvmat.DenseAdditiveProgenyGenicCovarianceMatrix": [[806, 1, 1, "", "DenseAdditiveProgenyGenicCovarianceMatrix"], [807, 2, 1, "", "check_is_DenseAdditiveProgenyGenicCovarianceMatrix"]], "pybrops.model.pcvmat.DenseAdditiveProgenyGenicCovarianceMatrix.DenseAdditiveProgenyGenicCovarianceMatrix": [[806, 4, 1, "", "__add__"], [806, 4, 1, "", "__mul__"], [806, 4, 1, "", "adjoin"], [806, 4, 1, "", "adjoin_taxa"], [806, 4, 1, "", "adjoin_trait"], [806, 4, 1, "", "append"], [806, 4, 1, "", "append_taxa"], [806, 4, 1, "", "append_trait"], [806, 4, 1, "", "concat"], [806, 4, 1, "", "concat_taxa"], [806, 4, 1, "", "concat_trait"], [806, 4, 1, "", "copy"], [806, 4, 1, "", "deepcopy"], [806, 4, 1, "", "delete"], [806, 4, 1, "", "delete_taxa"], [806, 4, 1, "", "delete_trait"], [806, 3, 1, "", "epgc"], [806, 4, 1, "", "from_algmod"], [806, 4, 1, "", "from_csv"], [806, 4, 1, "", "from_gmod"], [806, 4, 1, "", "from_hdf5"], [806, 4, 1, "", "from_pandas"], [806, 4, 1, "", "group"], [806, 4, 1, "", "group_taxa"], [806, 4, 1, "", "incorp"], [806, 4, 1, "", "incorp_taxa"], [806, 4, 1, "", "incorp_trait"], [806, 4, 1, "", "insert"], [806, 4, 1, "", "insert_taxa"], [806, 4, 1, "", "insert_trait"], [806, 4, 1, "", "is_grouped"], [806, 4, 1, "", "is_grouped_taxa"], [806, 4, 1, "", "is_square"], [806, 4, 1, "", "is_square_taxa"], [806, 4, 1, "", "is_square_trait"], [806, 4, 1, "", "lexsort"], [806, 4, 1, "", "lexsort_taxa"], [806, 4, 1, "", "lexsort_trait"], [806, 3, 1, "", "mat"], [806, 3, 1, "", "mat_ndim"], [806, 3, 1, "", "mat_shape"], [806, 3, 1, "", "nsquare"], [806, 3, 1, "", "nsquare_taxa"], [806, 3, 1, "", "nsquare_trait"], [806, 3, 1, "", "ntaxa"], [806, 3, 1, "", "ntrait"], [806, 4, 1, "", "remove"], [806, 4, 1, "", "remove_taxa"], [806, 4, 1, "", "remove_trait"], [806, 4, 1, "", "reorder"], [806, 4, 1, "", "reorder_taxa"], [806, 4, 1, "", "reorder_trait"], [806, 4, 1, "", "select"], [806, 4, 1, "", "select_taxa"], [806, 4, 1, "", "select_trait"], [806, 4, 1, "", "sort"], [806, 4, 1, "", "sort_taxa"], [806, 4, 1, "", "sort_trait"], [806, 3, 1, "", "square_axes"], [806, 3, 1, "", "square_axes_len"], [806, 3, 1, "", "square_taxa_axes"], [806, 3, 1, "", "square_taxa_axes_len"], [806, 3, 1, "", "square_trait_axes"], [806, 3, 1, "", "square_trait_axes_len"], [806, 3, 1, "", "taxa"], [806, 3, 1, "", "taxa_axis"], [806, 3, 1, "", "taxa_grp"], [806, 3, 1, "", "taxa_grp_len"], [806, 3, 1, "", "taxa_grp_name"], [806, 3, 1, "", "taxa_grp_spix"], [806, 3, 1, "", "taxa_grp_stix"], [806, 4, 1, "", "to_csv"], [806, 4, 1, "", "to_hdf5"], [806, 4, 1, "", "to_pandas"], [806, 3, 1, "", "trait"], [806, 3, 1, "", "trait_axis"], [806, 4, 1, "", "ungroup"], [806, 4, 1, "", "ungroup_taxa"]], "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix": [[809, 1, 1, "", "DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix"], [810, 2, 1, "", "check_is_DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix"]], "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix": [[809, 4, 1, "", "__add__"], [809, 4, 1, "", "__mul__"], [809, 4, 1, "", "adjoin"], [809, 4, 1, "", "adjoin_taxa"], [809, 4, 1, "", "adjoin_trait"], [809, 4, 1, "", "append"], [809, 4, 1, "", "append_taxa"], [809, 4, 1, "", "append_trait"], [809, 4, 1, "", "concat"], [809, 4, 1, "", "concat_taxa"], [809, 4, 1, "", "concat_trait"], [809, 4, 1, "", "copy"], [809, 4, 1, "", "deepcopy"], [809, 4, 1, "", "delete"], [809, 4, 1, "", "delete_taxa"], [809, 4, 1, "", "delete_trait"], [809, 3, 1, "", "epgc"], [809, 3, 1, "", "female_axis"], [809, 4, 1, "", "from_algmod"], [809, 4, 1, "", "from_csv"], [809, 4, 1, "", "from_gmod"], [809, 4, 1, "", "from_hdf5"], [809, 4, 1, "", "from_pandas"], [809, 4, 1, "", "group"], [809, 4, 1, "", "group_taxa"], [809, 4, 1, "", "incorp"], [809, 4, 1, "", "incorp_taxa"], [809, 4, 1, "", "incorp_trait"], [809, 4, 1, "", "insert"], [809, 4, 1, "", "insert_taxa"], [809, 4, 1, "", "insert_trait"], [809, 4, 1, "", "is_grouped"], [809, 4, 1, "", "is_grouped_taxa"], [809, 4, 1, "", "is_square"], [809, 4, 1, "", "is_square_taxa"], [809, 4, 1, "", "is_square_trait"], [809, 4, 1, "", "lexsort"], [809, 4, 1, "", "lexsort_taxa"], [809, 4, 1, "", "lexsort_trait"], [809, 3, 1, "", "male_axis"], [809, 3, 1, "", "mat"], [809, 3, 1, "", "mat_ndim"], [809, 3, 1, "", "mat_shape"], [809, 3, 1, "", "nfemale"], [809, 3, 1, "", "nmale"], [809, 3, 1, "", "nsquare"], [809, 3, 1, "", "nsquare_taxa"], [809, 3, 1, "", "nsquare_trait"], [809, 3, 1, "", "ntaxa"], [809, 3, 1, "", "ntrait"], [809, 4, 1, "", "remove"], [809, 4, 1, "", "remove_taxa"], [809, 4, 1, "", "remove_trait"], [809, 4, 1, "", "reorder"], [809, 4, 1, "", "reorder_taxa"], [809, 4, 1, "", "reorder_trait"], [809, 4, 1, "", "select"], [809, 4, 1, "", "select_taxa"], [809, 4, 1, "", "select_trait"], [809, 4, 1, "", "sort"], [809, 4, 1, "", "sort_taxa"], [809, 4, 1, "", "sort_trait"], [809, 3, 1, "", "square_axes"], [809, 3, 1, "", "square_axes_len"], [809, 3, 1, "", "square_taxa_axes"], [809, 3, 1, "", "square_taxa_axes_len"], [809, 3, 1, "", "square_trait_axes"], [809, 3, 1, "", "square_trait_axes_len"], [809, 3, 1, "", "taxa"], [809, 3, 1, "", "taxa_axis"], [809, 3, 1, "", "taxa_grp"], [809, 3, 1, "", "taxa_grp_len"], [809, 3, 1, "", "taxa_grp_name"], [809, 3, 1, "", "taxa_grp_spix"], [809, 3, 1, "", "taxa_grp_stix"], [809, 4, 1, "", "to_csv"], [809, 4, 1, "", "to_hdf5"], [809, 4, 1, "", "to_pandas"], [809, 3, 1, "", "trait"], [809, 3, 1, "", "trait_axis"], [809, 4, 1, "", "ungroup"], [809, 4, 1, "", "ungroup_taxa"]], "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix": [[812, 1, 1, "", "DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix"]], "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix": [[812, 4, 1, "", "__add__"], [812, 4, 1, "", "__mul__"], [812, 4, 1, "", "adjoin"], [812, 4, 1, "", "adjoin_taxa"], [812, 4, 1, "", "adjoin_trait"], [812, 4, 1, "", "append"], [812, 4, 1, "", "append_taxa"], [812, 4, 1, "", "append_trait"], [812, 4, 1, "", "concat"], [812, 4, 1, "", "concat_taxa"], [812, 4, 1, "", "concat_trait"], [812, 4, 1, "", "copy"], [812, 4, 1, "", "deepcopy"], [812, 4, 1, "", "delete"], [812, 4, 1, "", "delete_taxa"], [812, 4, 1, "", "delete_trait"], [812, 3, 1, "", "epgc"], [812, 3, 1, "", "female_axis"], [812, 4, 1, "", "from_algmod"], [812, 4, 1, "", "from_csv"], [812, 4, 1, "", "from_gmod"], [812, 4, 1, "", "from_hdf5"], [812, 4, 1, "", "from_pandas"], [812, 4, 1, "", "group"], [812, 4, 1, "", "group_taxa"], [812, 4, 1, "", "incorp"], [812, 4, 1, "", "incorp_taxa"], [812, 4, 1, "", "incorp_trait"], [812, 4, 1, "", "insert"], [812, 4, 1, "", "insert_taxa"], [812, 4, 1, "", "insert_trait"], [812, 4, 1, "", "is_grouped"], [812, 4, 1, "", "is_grouped_taxa"], [812, 4, 1, "", "is_square"], [812, 4, 1, "", "is_square_taxa"], [812, 4, 1, "", "is_square_trait"], [812, 4, 1, "", "lexsort"], [812, 4, 1, "", "lexsort_taxa"], [812, 4, 1, "", "lexsort_trait"], [812, 3, 1, "", "male_axis"], [812, 3, 1, "", "mat"], [812, 3, 1, "", "mat_ndim"], [812, 3, 1, "", "mat_shape"], [812, 3, 1, "", "nfemale"], [812, 3, 1, "", "nmale"], [812, 3, 1, "", "nsquare"], [812, 3, 1, "", "nsquare_taxa"], [812, 3, 1, "", "nsquare_trait"], [812, 3, 1, "", "ntaxa"], [812, 3, 1, "", "ntrait"], [812, 4, 1, "", "remove"], [812, 4, 1, "", "remove_taxa"], [812, 4, 1, "", "remove_trait"], [812, 4, 1, "", "reorder"], [812, 4, 1, "", "reorder_taxa"], [812, 4, 1, "", "reorder_trait"], [812, 4, 1, "", "select"], [812, 4, 1, "", "select_taxa"], [812, 4, 1, "", "select_trait"], [812, 4, 1, "", "sort"], [812, 4, 1, "", "sort_taxa"], [812, 4, 1, "", "sort_trait"], [812, 3, 1, "", "square_axes"], [812, 3, 1, "", "square_axes_len"], [812, 3, 1, "", "square_taxa_axes"], [812, 3, 1, "", "square_taxa_axes_len"], [812, 3, 1, "", "square_trait_axes"], [812, 3, 1, "", "square_trait_axes_len"], [812, 3, 1, "", "taxa"], [812, 3, 1, "", "taxa_axis"], [812, 3, 1, "", "taxa_grp"], [812, 3, 1, "", "taxa_grp_len"], [812, 3, 1, "", "taxa_grp_name"], [812, 3, 1, "", "taxa_grp_spix"], [812, 3, 1, "", "taxa_grp_stix"], [812, 4, 1, "", "to_csv"], [812, 4, 1, "", "to_hdf5"], [812, 4, 1, "", "to_pandas"], [812, 3, 1, "", "trait"], [812, 3, 1, "", "trait_axis"], [812, 4, 1, "", "ungroup"], [812, 4, 1, "", "ungroup_taxa"]], "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix": [[814, 1, 1, "", "DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix"], [815, 2, 1, "", "check_is_DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix"]], "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix": [[814, 4, 1, "", "__add__"], [814, 4, 1, "", "__mul__"], [814, 4, 1, "", "adjoin"], [814, 4, 1, "", "adjoin_taxa"], [814, 4, 1, "", "adjoin_trait"], [814, 4, 1, "", "append"], [814, 4, 1, "", "append_taxa"], [814, 4, 1, "", "append_trait"], [814, 4, 1, "", "concat"], [814, 4, 1, "", "concat_taxa"], [814, 4, 1, "", "concat_trait"], [814, 4, 1, "", "copy"], [814, 4, 1, "", "deepcopy"], [814, 4, 1, "", "delete"], [814, 4, 1, "", "delete_taxa"], [814, 4, 1, "", "delete_trait"], [814, 3, 1, "", "epgc"], [814, 3, 1, "", "female1_axis"], [814, 3, 1, "", "female2_axis"], [814, 4, 1, "", "from_algmod"], [814, 4, 1, "", "from_csv"], [814, 4, 1, "", "from_gmod"], [814, 4, 1, "", "from_hdf5"], [814, 4, 1, "", "from_pandas"], [814, 4, 1, "", "group"], [814, 4, 1, "", "group_taxa"], [814, 4, 1, "", "incorp"], [814, 4, 1, "", "incorp_taxa"], [814, 4, 1, "", "incorp_trait"], [814, 4, 1, "", "insert"], [814, 4, 1, "", "insert_taxa"], [814, 4, 1, "", "insert_trait"], [814, 4, 1, "", "is_grouped"], [814, 4, 1, "", "is_grouped_taxa"], [814, 4, 1, "", "is_square"], [814, 4, 1, "", "is_square_taxa"], [814, 4, 1, "", "is_square_trait"], [814, 4, 1, "", "lexsort"], [814, 4, 1, "", "lexsort_taxa"], [814, 4, 1, "", "lexsort_trait"], [814, 3, 1, "", "male1_axis"], [814, 3, 1, "", "male2_axis"], [814, 3, 1, "", "mat"], [814, 3, 1, "", "mat_ndim"], [814, 3, 1, "", "mat_shape"], [814, 3, 1, "", "nfemale1"], [814, 3, 1, "", "nfemale2"], [814, 3, 1, "", "nmale1"], [814, 3, 1, "", "nmale2"], [814, 3, 1, "", "nsquare"], [814, 3, 1, "", "nsquare_taxa"], [814, 3, 1, "", "nsquare_trait"], [814, 3, 1, "", "ntaxa"], [814, 3, 1, "", "ntrait"], [814, 4, 1, "", "remove"], [814, 4, 1, "", "remove_taxa"], [814, 4, 1, "", "remove_trait"], [814, 4, 1, "", "reorder"], [814, 4, 1, "", "reorder_taxa"], [814, 4, 1, "", "reorder_trait"], [814, 4, 1, "", "select"], [814, 4, 1, "", "select_taxa"], [814, 4, 1, "", "select_trait"], [814, 4, 1, "", "sort"], [814, 4, 1, "", "sort_taxa"], [814, 4, 1, "", "sort_trait"], [814, 3, 1, "", "square_axes"], [814, 3, 1, "", "square_axes_len"], [814, 3, 1, "", "square_taxa_axes"], [814, 3, 1, "", "square_taxa_axes_len"], [814, 3, 1, "", "square_trait_axes"], [814, 3, 1, "", "square_trait_axes_len"], [814, 3, 1, "", "taxa"], [814, 3, 1, "", "taxa_axis"], [814, 3, 1, "", "taxa_grp"], [814, 3, 1, "", "taxa_grp_len"], [814, 3, 1, "", "taxa_grp_name"], [814, 3, 1, "", "taxa_grp_spix"], [814, 3, 1, "", "taxa_grp_stix"], [814, 4, 1, "", "to_csv"], [814, 4, 1, "", "to_hdf5"], [814, 4, 1, "", "to_pandas"], [814, 3, 1, "", "trait"], [814, 3, 1, "", "trait_axis"], [814, 4, 1, "", "ungroup"], [814, 4, 1, "", "ungroup_taxa"]], "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix": [[817, 1, 1, "", "DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix"]], "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix": [[817, 4, 1, "", "__add__"], [817, 4, 1, "", "__mul__"], [817, 4, 1, "", "adjoin"], [817, 4, 1, "", "adjoin_taxa"], [817, 4, 1, "", "adjoin_trait"], [817, 4, 1, "", "append"], [817, 4, 1, "", "append_taxa"], [817, 4, 1, "", "append_trait"], [817, 4, 1, "", "concat"], [817, 4, 1, "", "concat_taxa"], [817, 4, 1, "", "concat_trait"], [817, 4, 1, "", "copy"], [817, 4, 1, "", "deepcopy"], [817, 4, 1, "", "delete"], [817, 4, 1, "", "delete_taxa"], [817, 4, 1, "", "delete_trait"], [817, 3, 1, "", "epgc"], [817, 3, 1, "", "female1_axis"], [817, 3, 1, "", "female2_axis"], [817, 4, 1, "", "from_algmod"], [817, 4, 1, "", "from_csv"], [817, 4, 1, "", "from_gmod"], [817, 4, 1, "", "from_hdf5"], [817, 4, 1, "", "from_pandas"], [817, 4, 1, "", "group"], [817, 4, 1, "", "group_taxa"], [817, 4, 1, "", "incorp"], [817, 4, 1, "", "incorp_taxa"], [817, 4, 1, "", "incorp_trait"], [817, 4, 1, "", "insert"], [817, 4, 1, "", "insert_taxa"], [817, 4, 1, "", "insert_trait"], [817, 4, 1, "", "is_grouped"], [817, 4, 1, "", "is_grouped_taxa"], [817, 4, 1, "", "is_square"], [817, 4, 1, "", "is_square_taxa"], [817, 4, 1, "", "is_square_trait"], [817, 4, 1, "", "lexsort"], [817, 4, 1, "", "lexsort_taxa"], [817, 4, 1, "", "lexsort_trait"], [817, 3, 1, "", "male1_axis"], [817, 3, 1, "", "male2_axis"], [817, 3, 1, "", "mat"], [817, 3, 1, "", "mat_ndim"], [817, 3, 1, "", "mat_shape"], [817, 3, 1, "", "nfemale1"], [817, 3, 1, "", "nfemale2"], [817, 3, 1, "", "nmale1"], [817, 3, 1, "", "nmale2"], [817, 3, 1, "", "nsquare"], [817, 3, 1, "", "nsquare_taxa"], [817, 3, 1, "", "nsquare_trait"], [817, 3, 1, "", "ntaxa"], [817, 3, 1, "", "ntrait"], [817, 4, 1, "", "remove"], [817, 4, 1, "", "remove_taxa"], [817, 4, 1, "", "remove_trait"], [817, 4, 1, "", "reorder"], [817, 4, 1, "", "reorder_taxa"], [817, 4, 1, "", "reorder_trait"], [817, 4, 1, "", "select"], [817, 4, 1, "", "select_taxa"], [817, 4, 1, "", "select_trait"], [817, 4, 1, "", "sort"], [817, 4, 1, "", "sort_taxa"], [817, 4, 1, "", "sort_trait"], [817, 3, 1, "", "square_axes"], [817, 3, 1, "", "square_axes_len"], [817, 3, 1, "", "square_taxa_axes"], [817, 3, 1, "", "square_taxa_axes_len"], [817, 3, 1, "", "square_trait_axes"], [817, 3, 1, "", "square_trait_axes_len"], [817, 3, 1, "", "taxa"], [817, 3, 1, "", "taxa_axis"], [817, 3, 1, "", "taxa_grp"], [817, 3, 1, "", "taxa_grp_len"], [817, 3, 1, "", "taxa_grp_name"], [817, 3, 1, "", "taxa_grp_spix"], [817, 3, 1, "", "taxa_grp_stix"], [817, 4, 1, "", "to_csv"], [817, 4, 1, "", "to_hdf5"], [817, 4, 1, "", "to_pandas"], [817, 3, 1, "", "trait"], [817, 3, 1, "", "trait_axis"], [817, 4, 1, "", "ungroup"], [817, 4, 1, "", "ungroup_taxa"]], "pybrops.model.pcvmat.DenseProgenyGeneticCovarianceMatrix": [[819, 1, 1, "", "DenseProgenyGeneticCovarianceMatrix"], [820, 2, 1, "", "check_is_DenseProgenyGeneticCovarianceMatrix"]], "pybrops.model.pcvmat.DenseProgenyGeneticCovarianceMatrix.DenseProgenyGeneticCovarianceMatrix": [[819, 4, 1, "", "__add__"], [819, 4, 1, "", "__mul__"], [819, 4, 1, "", "adjoin"], [819, 4, 1, "", "adjoin_taxa"], [819, 4, 1, "", "adjoin_trait"], [819, 4, 1, "", "append"], [819, 4, 1, "", "append_taxa"], [819, 4, 1, "", "append_trait"], [819, 4, 1, "", "concat"], [819, 4, 1, "", "concat_taxa"], [819, 4, 1, "", "concat_trait"], [819, 4, 1, "", "copy"], [819, 4, 1, "", "deepcopy"], [819, 4, 1, "", "delete"], [819, 4, 1, "", "delete_taxa"], [819, 4, 1, "", "delete_trait"], [819, 3, 1, "", "epgc"], [819, 4, 1, "", "from_csv"], [819, 4, 1, "", "from_gmod"], [819, 4, 1, "", "from_hdf5"], [819, 4, 1, "", "from_pandas"], [819, 4, 1, "", "group"], [819, 4, 1, "", "group_taxa"], [819, 4, 1, "", "incorp"], [819, 4, 1, "", "incorp_taxa"], [819, 4, 1, "", "incorp_trait"], [819, 4, 1, "", "insert"], [819, 4, 1, "", "insert_taxa"], [819, 4, 1, "", "insert_trait"], [819, 4, 1, "", "is_grouped"], [819, 4, 1, "", "is_grouped_taxa"], [819, 4, 1, "", "is_square"], [819, 4, 1, "", "is_square_taxa"], [819, 4, 1, "", "is_square_trait"], [819, 4, 1, "", "lexsort"], [819, 4, 1, "", "lexsort_taxa"], [819, 4, 1, "", "lexsort_trait"], [819, 3, 1, "", "mat"], [819, 3, 1, "", "mat_ndim"], [819, 3, 1, "", "mat_shape"], [819, 3, 1, "", "nsquare"], [819, 3, 1, "", "nsquare_taxa"], [819, 3, 1, "", "nsquare_trait"], [819, 3, 1, "", "ntaxa"], [819, 3, 1, "", "ntrait"], [819, 4, 1, "", "remove"], [819, 4, 1, "", "remove_taxa"], [819, 4, 1, "", "remove_trait"], [819, 4, 1, "", "reorder"], [819, 4, 1, "", "reorder_taxa"], [819, 4, 1, "", "reorder_trait"], [819, 4, 1, "", "select"], [819, 4, 1, "", "select_taxa"], [819, 4, 1, "", "select_trait"], [819, 4, 1, "", "sort"], [819, 4, 1, "", "sort_taxa"], [819, 4, 1, "", "sort_trait"], [819, 3, 1, "", "square_axes"], [819, 3, 1, "", "square_axes_len"], [819, 3, 1, "", "square_taxa_axes"], [819, 3, 1, "", "square_taxa_axes_len"], [819, 3, 1, "", "square_trait_axes"], [819, 3, 1, "", "square_trait_axes_len"], [819, 3, 1, "", "taxa"], [819, 3, 1, "", "taxa_axis"], [819, 3, 1, "", "taxa_grp"], [819, 3, 1, "", "taxa_grp_len"], [819, 3, 1, "", "taxa_grp_name"], [819, 3, 1, "", "taxa_grp_spix"], [819, 3, 1, "", "taxa_grp_stix"], [819, 4, 1, "", "to_csv"], [819, 4, 1, "", "to_hdf5"], [819, 4, 1, "", "to_pandas"], [819, 3, 1, "", "trait"], [819, 3, 1, "", "trait_axis"], [819, 4, 1, "", "ungroup"], [819, 4, 1, "", "ungroup_taxa"]], "pybrops.model.pcvmat.DenseProgenyGenicCovarianceMatrix": [[822, 1, 1, "", "DenseProgenyGenicCovarianceMatrix"], [823, 2, 1, "", "check_is_DenseProgenyGenicCovarianceMatrix"]], "pybrops.model.pcvmat.DenseProgenyGenicCovarianceMatrix.DenseProgenyGenicCovarianceMatrix": [[822, 4, 1, "", "__add__"], [822, 4, 1, "", "__mul__"], [822, 4, 1, "", "adjoin"], [822, 4, 1, "", "adjoin_taxa"], [822, 4, 1, "", "adjoin_trait"], [822, 4, 1, "", "append"], [822, 4, 1, "", "append_taxa"], [822, 4, 1, "", "append_trait"], [822, 4, 1, "", "concat"], [822, 4, 1, "", "concat_taxa"], [822, 4, 1, "", "concat_trait"], [822, 4, 1, "", "copy"], [822, 4, 1, "", "deepcopy"], [822, 4, 1, "", "delete"], [822, 4, 1, "", "delete_taxa"], [822, 4, 1, "", "delete_trait"], [822, 3, 1, "", "epgc"], [822, 4, 1, "", "from_csv"], [822, 4, 1, "", "from_gmod"], [822, 4, 1, "", "from_hdf5"], [822, 4, 1, "", "from_pandas"], [822, 4, 1, "", "group"], [822, 4, 1, "", "group_taxa"], [822, 4, 1, "", "incorp"], [822, 4, 1, "", "incorp_taxa"], [822, 4, 1, "", "incorp_trait"], [822, 4, 1, "", "insert"], [822, 4, 1, "", "insert_taxa"], [822, 4, 1, "", "insert_trait"], [822, 4, 1, "", "is_grouped"], [822, 4, 1, "", "is_grouped_taxa"], [822, 4, 1, "", "is_square"], [822, 4, 1, "", "is_square_taxa"], [822, 4, 1, "", "is_square_trait"], [822, 4, 1, "", "lexsort"], [822, 4, 1, "", "lexsort_taxa"], [822, 4, 1, "", "lexsort_trait"], [822, 3, 1, "", "mat"], [822, 3, 1, "", "mat_ndim"], [822, 3, 1, "", "mat_shape"], [822, 3, 1, "", "nsquare"], [822, 3, 1, "", "nsquare_taxa"], [822, 3, 1, "", "nsquare_trait"], [822, 3, 1, "", "ntaxa"], [822, 3, 1, "", "ntrait"], [822, 4, 1, "", "remove"], [822, 4, 1, "", "remove_taxa"], [822, 4, 1, "", "remove_trait"], [822, 4, 1, "", "reorder"], [822, 4, 1, "", "reorder_taxa"], [822, 4, 1, "", "reorder_trait"], [822, 4, 1, "", "select"], [822, 4, 1, "", "select_taxa"], [822, 4, 1, "", "select_trait"], [822, 4, 1, "", "sort"], [822, 4, 1, "", "sort_taxa"], [822, 4, 1, "", "sort_trait"], [822, 3, 1, "", "square_axes"], [822, 3, 1, "", "square_axes_len"], [822, 3, 1, "", "square_taxa_axes"], [822, 3, 1, "", "square_taxa_axes_len"], [822, 3, 1, "", "square_trait_axes"], [822, 3, 1, "", "square_trait_axes_len"], [822, 3, 1, "", "taxa"], [822, 3, 1, "", "taxa_axis"], [822, 3, 1, "", "taxa_grp"], [822, 3, 1, "", "taxa_grp_len"], [822, 3, 1, "", "taxa_grp_name"], [822, 3, 1, "", "taxa_grp_spix"], [822, 3, 1, "", "taxa_grp_stix"], [822, 4, 1, "", "to_csv"], [822, 4, 1, "", "to_hdf5"], [822, 4, 1, "", "to_pandas"], [822, 3, 1, "", "trait"], [822, 3, 1, "", "trait_axis"], [822, 4, 1, "", "ungroup"], [822, 4, 1, "", "ungroup_taxa"]], "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix": [[825, 1, 1, "", "DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix"]], "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix": [[825, 4, 1, "", "__add__"], [825, 4, 1, "", "__mul__"], [825, 4, 1, "", "adjoin"], [825, 4, 1, "", "adjoin_taxa"], [825, 4, 1, "", "adjoin_trait"], [825, 4, 1, "", "append"], [825, 4, 1, "", "append_taxa"], [825, 4, 1, "", "append_trait"], [825, 4, 1, "", "concat"], [825, 4, 1, "", "concat_taxa"], [825, 4, 1, "", "concat_trait"], [825, 4, 1, "", "copy"], [825, 4, 1, "", "deepcopy"], [825, 4, 1, "", "delete"], [825, 4, 1, "", "delete_taxa"], [825, 4, 1, "", "delete_trait"], [825, 3, 1, "", "epgc"], [825, 3, 1, "", "female_axis"], [825, 4, 1, "", "from_algmod"], [825, 4, 1, "", "from_csv"], [825, 4, 1, "", "from_gmod"], [825, 4, 1, "", "from_hdf5"], [825, 4, 1, "", "from_pandas"], [825, 4, 1, "", "group"], [825, 4, 1, "", "group_taxa"], [825, 4, 1, "", "incorp"], [825, 4, 1, "", "incorp_taxa"], [825, 4, 1, "", "incorp_trait"], [825, 4, 1, "", "insert"], [825, 4, 1, "", "insert_taxa"], [825, 4, 1, "", "insert_trait"], [825, 4, 1, "", "is_grouped"], [825, 4, 1, "", "is_grouped_taxa"], [825, 4, 1, "", "is_square"], [825, 4, 1, "", "is_square_taxa"], [825, 4, 1, "", "is_square_trait"], [825, 4, 1, "", "lexsort"], [825, 4, 1, "", "lexsort_taxa"], [825, 4, 1, "", "lexsort_trait"], [825, 3, 1, "", "male_axis"], [825, 3, 1, "", "mat"], [825, 3, 1, "", "mat_ndim"], [825, 3, 1, "", "mat_shape"], [825, 3, 1, "", "nfemale"], [825, 3, 1, "", "nmale"], [825, 3, 1, "", "nrecurrent"], [825, 3, 1, "", "nsquare"], [825, 3, 1, "", "nsquare_taxa"], [825, 3, 1, "", "nsquare_trait"], [825, 3, 1, "", "ntaxa"], [825, 3, 1, "", "ntrait"], [825, 3, 1, "", "recurrent_axis"], [825, 4, 1, "", "remove"], [825, 4, 1, "", "remove_taxa"], [825, 4, 1, "", "remove_trait"], [825, 4, 1, "", "reorder"], [825, 4, 1, "", "reorder_taxa"], [825, 4, 1, "", "reorder_trait"], [825, 4, 1, "", "select"], [825, 4, 1, "", "select_taxa"], [825, 4, 1, "", "select_trait"], [825, 4, 1, "", "sort"], [825, 4, 1, "", "sort_taxa"], [825, 4, 1, "", "sort_trait"], [825, 3, 1, "", "square_axes"], [825, 3, 1, "", "square_axes_len"], [825, 3, 1, "", "square_taxa_axes"], [825, 3, 1, "", "square_taxa_axes_len"], [825, 3, 1, "", "square_trait_axes"], [825, 3, 1, "", "square_trait_axes_len"], [825, 3, 1, "", "taxa"], [825, 3, 1, "", "taxa_axis"], [825, 3, 1, "", "taxa_grp"], [825, 3, 1, "", "taxa_grp_len"], [825, 3, 1, "", "taxa_grp_name"], [825, 3, 1, "", "taxa_grp_spix"], [825, 3, 1, "", "taxa_grp_stix"], [825, 4, 1, "", "to_csv"], [825, 4, 1, "", "to_hdf5"], [825, 4, 1, "", "to_pandas"], [825, 3, 1, "", "trait"], [825, 3, 1, "", "trait_axis"], [825, 4, 1, "", "ungroup"], [825, 4, 1, "", "ungroup_taxa"]], "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix": [[827, 1, 1, "", "DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix"]], "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix": [[827, 4, 1, "", "__add__"], [827, 4, 1, "", "__mul__"], [827, 4, 1, "", "adjoin"], [827, 4, 1, "", "adjoin_taxa"], [827, 4, 1, "", "adjoin_trait"], [827, 4, 1, "", "append"], [827, 4, 1, "", "append_taxa"], [827, 4, 1, "", "append_trait"], [827, 4, 1, "", "concat"], [827, 4, 1, "", "concat_taxa"], [827, 4, 1, "", "concat_trait"], [827, 4, 1, "", "copy"], [827, 4, 1, "", "deepcopy"], [827, 4, 1, "", "delete"], [827, 4, 1, "", "delete_taxa"], [827, 4, 1, "", "delete_trait"], [827, 3, 1, "", "epgc"], [827, 3, 1, "", "female_axis"], [827, 4, 1, "", "from_algmod"], [827, 4, 1, "", "from_csv"], [827, 4, 1, "", "from_gmod"], [827, 4, 1, "", "from_hdf5"], [827, 4, 1, "", "from_pandas"], [827, 4, 1, "", "group"], [827, 4, 1, "", "group_taxa"], [827, 4, 1, "", "incorp"], [827, 4, 1, "", "incorp_taxa"], [827, 4, 1, "", "incorp_trait"], [827, 4, 1, "", "insert"], [827, 4, 1, "", "insert_taxa"], [827, 4, 1, "", "insert_trait"], [827, 4, 1, "", "is_grouped"], [827, 4, 1, "", "is_grouped_taxa"], [827, 4, 1, "", "is_square"], [827, 4, 1, "", "is_square_taxa"], [827, 4, 1, "", "is_square_trait"], [827, 4, 1, "", "lexsort"], [827, 4, 1, "", "lexsort_taxa"], [827, 4, 1, "", "lexsort_trait"], [827, 3, 1, "", "male_axis"], [827, 3, 1, "", "mat"], [827, 3, 1, "", "mat_ndim"], [827, 3, 1, "", "mat_shape"], [827, 3, 1, "", "nfemale"], [827, 3, 1, "", "nmale"], [827, 3, 1, "", "nrecurrent"], [827, 3, 1, "", "nsquare"], [827, 3, 1, "", "nsquare_taxa"], [827, 3, 1, "", "nsquare_trait"], [827, 3, 1, "", "ntaxa"], [827, 3, 1, "", "ntrait"], [827, 3, 1, "", "recurrent_axis"], [827, 4, 1, "", "remove"], [827, 4, 1, "", "remove_taxa"], [827, 4, 1, "", "remove_trait"], [827, 4, 1, "", "reorder"], [827, 4, 1, "", "reorder_taxa"], [827, 4, 1, "", "reorder_trait"], [827, 4, 1, "", "select"], [827, 4, 1, "", "select_taxa"], [827, 4, 1, "", "select_trait"], [827, 4, 1, "", "sort"], [827, 4, 1, "", "sort_taxa"], [827, 4, 1, "", "sort_trait"], [827, 3, 1, "", "square_axes"], [827, 3, 1, "", "square_axes_len"], [827, 3, 1, "", "square_taxa_axes"], [827, 3, 1, "", "square_taxa_axes_len"], [827, 3, 1, "", "square_trait_axes"], [827, 3, 1, "", "square_trait_axes_len"], [827, 3, 1, "", "taxa"], [827, 3, 1, "", "taxa_axis"], [827, 3, 1, "", "taxa_grp"], [827, 3, 1, "", "taxa_grp_len"], [827, 3, 1, "", "taxa_grp_name"], [827, 3, 1, "", "taxa_grp_spix"], [827, 3, 1, "", "taxa_grp_stix"], [827, 4, 1, "", "to_csv"], [827, 4, 1, "", "to_hdf5"], [827, 4, 1, "", "to_pandas"], [827, 3, 1, "", "trait"], [827, 3, 1, "", "trait_axis"], [827, 4, 1, "", "ungroup"], [827, 4, 1, "", "ungroup_taxa"]], "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix": [[829, 1, 1, "", "DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix"]], "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix": [[829, 4, 1, "", "__add__"], [829, 4, 1, "", "__mul__"], [829, 4, 1, "", "adjoin"], [829, 4, 1, "", "adjoin_taxa"], [829, 4, 1, "", "adjoin_trait"], [829, 4, 1, "", "append"], [829, 4, 1, "", "append_taxa"], [829, 4, 1, "", "append_trait"], [829, 4, 1, "", "concat"], [829, 4, 1, "", "concat_taxa"], [829, 4, 1, "", "concat_trait"], [829, 4, 1, "", "copy"], [829, 4, 1, "", "deepcopy"], [829, 4, 1, "", "delete"], [829, 4, 1, "", "delete_taxa"], [829, 4, 1, "", "delete_trait"], [829, 3, 1, "", "epgc"], [829, 3, 1, "", "female_axis"], [829, 4, 1, "", "from_algmod"], [829, 4, 1, "", "from_csv"], [829, 4, 1, "", "from_gmod"], [829, 4, 1, "", "from_hdf5"], [829, 4, 1, "", "from_pandas"], [829, 4, 1, "", "group"], [829, 4, 1, "", "group_taxa"], [829, 4, 1, "", "incorp"], [829, 4, 1, "", "incorp_taxa"], [829, 4, 1, "", "incorp_trait"], [829, 4, 1, "", "insert"], [829, 4, 1, "", "insert_taxa"], [829, 4, 1, "", "insert_trait"], [829, 4, 1, "", "is_grouped"], [829, 4, 1, "", "is_grouped_taxa"], [829, 4, 1, "", "is_square"], [829, 4, 1, "", "is_square_taxa"], [829, 4, 1, "", "is_square_trait"], [829, 4, 1, "", "lexsort"], [829, 4, 1, "", "lexsort_taxa"], [829, 4, 1, "", "lexsort_trait"], [829, 3, 1, "", "male_axis"], [829, 3, 1, "", "mat"], [829, 3, 1, "", "mat_ndim"], [829, 3, 1, "", "mat_shape"], [829, 3, 1, "", "nfemale"], [829, 3, 1, "", "nmale"], [829, 3, 1, "", "nsquare"], [829, 3, 1, "", "nsquare_taxa"], [829, 3, 1, "", "nsquare_trait"], [829, 3, 1, "", "ntaxa"], [829, 3, 1, "", "ntrait"], [829, 4, 1, "", "remove"], [829, 4, 1, "", "remove_taxa"], [829, 4, 1, "", "remove_trait"], [829, 4, 1, "", "reorder"], [829, 4, 1, "", "reorder_taxa"], [829, 4, 1, "", "reorder_trait"], [829, 4, 1, "", "select"], [829, 4, 1, "", "select_taxa"], [829, 4, 1, "", "select_trait"], [829, 4, 1, "", "sort"], [829, 4, 1, "", "sort_taxa"], [829, 4, 1, "", "sort_trait"], [829, 3, 1, "", "square_axes"], [829, 3, 1, "", "square_axes_len"], [829, 3, 1, "", "square_taxa_axes"], [829, 3, 1, "", "square_taxa_axes_len"], [829, 3, 1, "", "square_trait_axes"], [829, 3, 1, "", "square_trait_axes_len"], [829, 3, 1, "", "taxa"], [829, 3, 1, "", "taxa_axis"], [829, 3, 1, "", "taxa_grp"], [829, 3, 1, "", "taxa_grp_len"], [829, 3, 1, "", "taxa_grp_name"], [829, 3, 1, "", "taxa_grp_spix"], [829, 3, 1, "", "taxa_grp_stix"], [829, 4, 1, "", "to_csv"], [829, 4, 1, "", "to_hdf5"], [829, 4, 1, "", "to_pandas"], [829, 3, 1, "", "trait"], [829, 3, 1, "", "trait_axis"], [829, 4, 1, "", "ungroup"], [829, 4, 1, "", "ungroup_taxa"]], "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix": [[831, 1, 1, "", "DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix"]], "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix": [[831, 4, 1, "", "__add__"], [831, 4, 1, "", "__mul__"], [831, 4, 1, "", "adjoin"], [831, 4, 1, "", "adjoin_taxa"], [831, 4, 1, "", "adjoin_trait"], [831, 4, 1, "", "append"], [831, 4, 1, "", "append_taxa"], [831, 4, 1, "", "append_trait"], [831, 4, 1, "", "concat"], [831, 4, 1, "", "concat_taxa"], [831, 4, 1, "", "concat_trait"], [831, 4, 1, "", "copy"], [831, 4, 1, "", "deepcopy"], [831, 4, 1, "", "delete"], [831, 4, 1, "", "delete_taxa"], [831, 4, 1, "", "delete_trait"], [831, 3, 1, "", "epgc"], [831, 3, 1, "", "female_axis"], [831, 4, 1, "", "from_algmod"], [831, 4, 1, "", "from_csv"], [831, 4, 1, "", "from_gmod"], [831, 4, 1, "", "from_hdf5"], [831, 4, 1, "", "from_pandas"], [831, 4, 1, "", "group"], [831, 4, 1, "", "group_taxa"], [831, 4, 1, "", "incorp"], [831, 4, 1, "", "incorp_taxa"], [831, 4, 1, "", "incorp_trait"], [831, 4, 1, "", "insert"], [831, 4, 1, "", "insert_taxa"], [831, 4, 1, "", "insert_trait"], [831, 4, 1, "", "is_grouped"], [831, 4, 1, "", "is_grouped_taxa"], [831, 4, 1, "", "is_square"], [831, 4, 1, "", "is_square_taxa"], [831, 4, 1, "", "is_square_trait"], [831, 4, 1, "", "lexsort"], [831, 4, 1, "", "lexsort_taxa"], [831, 4, 1, "", "lexsort_trait"], [831, 3, 1, "", "male_axis"], [831, 3, 1, "", "mat"], [831, 3, 1, "", "mat_ndim"], [831, 3, 1, "", "mat_shape"], [831, 3, 1, "", "nfemale"], [831, 3, 1, "", "nmale"], [831, 3, 1, "", "nsquare"], [831, 3, 1, "", "nsquare_taxa"], [831, 3, 1, "", "nsquare_trait"], [831, 3, 1, "", "ntaxa"], [831, 3, 1, "", "ntrait"], [831, 4, 1, "", "remove"], [831, 4, 1, "", "remove_taxa"], [831, 4, 1, "", "remove_trait"], [831, 4, 1, "", "reorder"], [831, 4, 1, "", "reorder_taxa"], [831, 4, 1, "", "reorder_trait"], [831, 4, 1, "", "select"], [831, 4, 1, "", "select_taxa"], [831, 4, 1, "", "select_trait"], [831, 4, 1, "", "sort"], [831, 4, 1, "", "sort_taxa"], [831, 4, 1, "", "sort_trait"], [831, 3, 1, "", "square_axes"], [831, 3, 1, "", "square_axes_len"], [831, 3, 1, "", "square_taxa_axes"], [831, 3, 1, "", "square_taxa_axes_len"], [831, 3, 1, "", "square_trait_axes"], [831, 3, 1, "", "square_trait_axes_len"], [831, 3, 1, "", "taxa"], [831, 3, 1, "", "taxa_axis"], [831, 3, 1, "", "taxa_grp"], [831, 3, 1, "", "taxa_grp_len"], [831, 3, 1, "", "taxa_grp_name"], [831, 3, 1, "", "taxa_grp_spix"], [831, 3, 1, "", "taxa_grp_stix"], [831, 4, 1, "", "to_csv"], [831, 4, 1, "", "to_hdf5"], [831, 4, 1, "", "to_pandas"], [831, 3, 1, "", "trait"], [831, 3, 1, "", "trait_axis"], [831, 4, 1, "", "ungroup"], [831, 4, 1, "", "ungroup_taxa"]], "pybrops.model.pcvmat.ProgenyGeneticCovarianceMatrix": [[833, 1, 1, "", "ProgenyGeneticCovarianceMatrix"], [834, 2, 1, "", "check_is_ProgenyGeneticCovarianceMatrix"]], "pybrops.model.pcvmat.ProgenyGeneticCovarianceMatrix.ProgenyGeneticCovarianceMatrix": [[833, 4, 1, "", "__add__"], [833, 4, 1, "", "__mul__"], [833, 4, 1, "", "adjoin"], [833, 4, 1, "", "adjoin_taxa"], [833, 4, 1, "", "adjoin_trait"], [833, 4, 1, "", "append"], [833, 4, 1, "", "append_taxa"], [833, 4, 1, "", "append_trait"], [833, 4, 1, "", "concat"], [833, 4, 1, "", "concat_taxa"], [833, 4, 1, "", "concat_trait"], [833, 4, 1, "", "copy"], [833, 4, 1, "", "deepcopy"], [833, 4, 1, "", "delete"], [833, 4, 1, "", "delete_taxa"], [833, 4, 1, "", "delete_trait"], [833, 3, 1, "", "epgc"], [833, 4, 1, "", "from_csv"], [833, 4, 1, "", "from_gmod"], [833, 4, 1, "", "from_hdf5"], [833, 4, 1, "", "from_pandas"], [833, 4, 1, "", "group"], [833, 4, 1, "", "group_taxa"], [833, 4, 1, "", "incorp"], [833, 4, 1, "", "incorp_taxa"], [833, 4, 1, "", "incorp_trait"], [833, 4, 1, "", "insert"], [833, 4, 1, "", "insert_taxa"], [833, 4, 1, "", "insert_trait"], [833, 4, 1, "", "is_grouped"], [833, 4, 1, "", "is_grouped_taxa"], [833, 4, 1, "", "is_square"], [833, 4, 1, "", "is_square_taxa"], [833, 4, 1, "", "is_square_trait"], [833, 4, 1, "", "lexsort"], [833, 4, 1, "", "lexsort_taxa"], [833, 4, 1, "", "lexsort_trait"], [833, 3, 1, "", "mat"], [833, 3, 1, "", "mat_ndim"], [833, 3, 1, "", "mat_shape"], [833, 3, 1, "", "nsquare"], [833, 3, 1, "", "nsquare_taxa"], [833, 3, 1, "", "nsquare_trait"], [833, 3, 1, "", "ntaxa"], [833, 3, 1, "", "ntrait"], [833, 4, 1, "", "remove"], [833, 4, 1, "", "remove_taxa"], [833, 4, 1, "", "remove_trait"], [833, 4, 1, "", "reorder"], [833, 4, 1, "", "reorder_taxa"], [833, 4, 1, "", "reorder_trait"], [833, 4, 1, "", "select"], [833, 4, 1, "", "select_taxa"], [833, 4, 1, "", "select_trait"], [833, 4, 1, "", "sort"], [833, 4, 1, "", "sort_taxa"], [833, 4, 1, "", "sort_trait"], [833, 3, 1, "", "square_axes"], [833, 3, 1, "", "square_axes_len"], [833, 3, 1, "", "square_taxa_axes"], [833, 3, 1, "", "square_taxa_axes_len"], [833, 3, 1, "", "square_trait_axes"], [833, 3, 1, "", "square_trait_axes_len"], [833, 3, 1, "", "taxa"], [833, 3, 1, "", "taxa_axis"], [833, 3, 1, "", "taxa_grp"], [833, 3, 1, "", "taxa_grp_len"], [833, 3, 1, "", "taxa_grp_name"], [833, 3, 1, "", "taxa_grp_spix"], [833, 3, 1, "", "taxa_grp_stix"], [833, 4, 1, "", "to_csv"], [833, 4, 1, "", "to_hdf5"], [833, 4, 1, "", "to_pandas"], [833, 3, 1, "", "trait"], [833, 3, 1, "", "trait_axis"], [833, 4, 1, "", "ungroup"], [833, 4, 1, "", "ungroup_taxa"]], "pybrops.model.pcvmat.ProgenyGenicCovarianceMatrix": [[836, 1, 1, "", "ProgenyGenicCovarianceMatrix"], [837, 2, 1, "", "check_is_ProgenyGenicCovarianceMatrix"]], "pybrops.model.pcvmat.ProgenyGenicCovarianceMatrix.ProgenyGenicCovarianceMatrix": [[836, 4, 1, "", "__add__"], [836, 4, 1, "", "__mul__"], [836, 4, 1, "", "adjoin"], [836, 4, 1, "", "adjoin_taxa"], [836, 4, 1, "", "adjoin_trait"], [836, 4, 1, "", "append"], [836, 4, 1, "", "append_taxa"], [836, 4, 1, "", "append_trait"], [836, 4, 1, "", "concat"], [836, 4, 1, "", "concat_taxa"], [836, 4, 1, "", "concat_trait"], [836, 4, 1, "", "copy"], [836, 4, 1, "", "deepcopy"], [836, 4, 1, "", "delete"], [836, 4, 1, "", "delete_taxa"], [836, 4, 1, "", "delete_trait"], [836, 3, 1, "", "epgc"], [836, 4, 1, "", "from_csv"], [836, 4, 1, "", "from_gmod"], [836, 4, 1, "", "from_hdf5"], [836, 4, 1, "", "from_pandas"], [836, 4, 1, "", "group"], [836, 4, 1, "", "group_taxa"], [836, 4, 1, "", "incorp"], [836, 4, 1, "", "incorp_taxa"], [836, 4, 1, "", "incorp_trait"], [836, 4, 1, "", "insert"], [836, 4, 1, "", "insert_taxa"], [836, 4, 1, "", "insert_trait"], [836, 4, 1, "", "is_grouped"], [836, 4, 1, "", "is_grouped_taxa"], [836, 4, 1, "", "is_square"], [836, 4, 1, "", "is_square_taxa"], [836, 4, 1, "", "is_square_trait"], [836, 4, 1, "", "lexsort"], [836, 4, 1, "", "lexsort_taxa"], [836, 4, 1, "", "lexsort_trait"], [836, 3, 1, "", "mat"], [836, 3, 1, "", "mat_ndim"], [836, 3, 1, "", "mat_shape"], [836, 3, 1, "", "nsquare"], [836, 3, 1, "", "nsquare_taxa"], [836, 3, 1, "", "nsquare_trait"], [836, 3, 1, "", "ntaxa"], [836, 3, 1, "", "ntrait"], [836, 4, 1, "", "remove"], [836, 4, 1, "", "remove_taxa"], [836, 4, 1, "", "remove_trait"], [836, 4, 1, "", "reorder"], [836, 4, 1, "", "reorder_taxa"], [836, 4, 1, "", "reorder_trait"], [836, 4, 1, "", "select"], [836, 4, 1, "", "select_taxa"], [836, 4, 1, "", "select_trait"], [836, 4, 1, "", "sort"], [836, 4, 1, "", "sort_taxa"], [836, 4, 1, "", "sort_trait"], [836, 3, 1, "", "square_axes"], [836, 3, 1, "", "square_axes_len"], [836, 3, 1, "", "square_taxa_axes"], [836, 3, 1, "", "square_taxa_axes_len"], [836, 3, 1, "", "square_trait_axes"], [836, 3, 1, "", "square_trait_axes_len"], [836, 3, 1, "", "taxa"], [836, 3, 1, "", "taxa_axis"], [836, 3, 1, "", "taxa_grp"], [836, 3, 1, "", "taxa_grp_len"], [836, 3, 1, "", "taxa_grp_name"], [836, 3, 1, "", "taxa_grp_spix"], [836, 3, 1, "", "taxa_grp_stix"], [836, 4, 1, "", "to_csv"], [836, 4, 1, "", "to_hdf5"], [836, 4, 1, "", "to_pandas"], [836, 3, 1, "", "trait"], [836, 3, 1, "", "trait_axis"], [836, 4, 1, "", "ungroup"], [836, 4, 1, "", "ungroup_taxa"]], "pybrops.model.vmat": [[839, 0, 0, "-", "AdditiveGeneticVarianceMatrix"], [842, 0, 0, "-", "AdditiveGenicVarianceMatrix"], [845, 0, 0, "-", "DenseAdditiveGeneticVarianceMatrix"], [848, 0, 0, "-", "DenseAdditiveGenicVarianceMatrix"], [851, 0, 0, "-", "DenseDihybridDHAdditiveGeneticVarianceMatrix"], [854, 0, 0, "-", "DenseDihybridDHAdditiveGenicVarianceMatrix"], [856, 0, 0, "-", "DenseFourWayDHAdditiveGeneticVarianceMatrix"], [859, 0, 0, "-", "DenseFourWayDHAdditiveGenicVarianceMatrix"], [861, 0, 0, "-", "DenseGeneticVarianceMatrix"], [864, 0, 0, "-", "DenseGenicVarianceMatrix"], [867, 0, 0, "-", "DenseThreeWayDHAdditiveGeneticVarianceMatrix"], [869, 0, 0, "-", "DenseThreeWayDHAdditiveGenicVarianceMatrix"], [871, 0, 0, "-", "DenseTwoWayDHAdditiveGeneticVarianceMatrix"], [873, 0, 0, "-", "DenseTwoWayDHAdditiveGenicVarianceMatrix"], [875, 0, 0, "-", "GeneticVarianceMatrix"], [878, 0, 0, "-", "GenicVarianceMatrix"], [881, 0, 0, "-", "fcty"], [909, 0, 0, "-", "util"]], "pybrops.model.vmat.AdditiveGeneticVarianceMatrix": [[840, 1, 1, "", "AdditiveGeneticVarianceMatrix"], [841, 2, 1, "", "check_is_AdditiveGeneticVarianceMatrix"]], "pybrops.model.vmat.AdditiveGeneticVarianceMatrix.AdditiveGeneticVarianceMatrix": [[840, 4, 1, "", "__add__"], [840, 4, 1, "", "__mul__"], [840, 4, 1, "", "adjoin"], [840, 4, 1, "", "adjoin_taxa"], [840, 4, 1, "", "adjoin_trait"], [840, 4, 1, "", "append"], [840, 4, 1, "", "append_taxa"], [840, 4, 1, "", "append_trait"], [840, 4, 1, "", "concat"], [840, 4, 1, "", "concat_taxa"], [840, 4, 1, "", "concat_trait"], [840, 4, 1, "", "copy"], [840, 4, 1, "", "deepcopy"], [840, 4, 1, "", "delete"], [840, 4, 1, "", "delete_taxa"], [840, 4, 1, "", "delete_trait"], [840, 3, 1, "", "epgc"], [840, 4, 1, "", "from_algmod"], [840, 4, 1, "", "from_csv"], [840, 4, 1, "", "from_gmod"], [840, 4, 1, "", "from_hdf5"], [840, 4, 1, "", "from_pandas"], [840, 4, 1, "", "group"], [840, 4, 1, "", "group_taxa"], [840, 4, 1, "", "incorp"], [840, 4, 1, "", "incorp_taxa"], [840, 4, 1, "", "incorp_trait"], [840, 4, 1, "", "insert"], [840, 4, 1, "", "insert_taxa"], [840, 4, 1, "", "insert_trait"], [840, 4, 1, "", "is_grouped"], [840, 4, 1, "", "is_grouped_taxa"], [840, 4, 1, "", "is_square"], [840, 4, 1, "", "is_square_taxa"], [840, 4, 1, "", "lexsort"], [840, 4, 1, "", "lexsort_taxa"], [840, 4, 1, "", "lexsort_trait"], [840, 3, 1, "", "mat"], [840, 3, 1, "", "mat_ndim"], [840, 3, 1, "", "mat_shape"], [840, 3, 1, "", "nsquare"], [840, 3, 1, "", "nsquare_taxa"], [840, 3, 1, "", "ntaxa"], [840, 3, 1, "", "ntrait"], [840, 4, 1, "", "remove"], [840, 4, 1, "", "remove_taxa"], [840, 4, 1, "", "remove_trait"], [840, 4, 1, "", "reorder"], [840, 4, 1, "", "reorder_taxa"], [840, 4, 1, "", "reorder_trait"], [840, 4, 1, "", "select"], [840, 4, 1, "", "select_taxa"], [840, 4, 1, "", "select_trait"], [840, 4, 1, "", "sort"], [840, 4, 1, "", "sort_taxa"], [840, 4, 1, "", "sort_trait"], [840, 3, 1, "", "square_axes"], [840, 3, 1, "", "square_axes_len"], [840, 3, 1, "", "square_taxa_axes"], [840, 3, 1, "", "square_taxa_axes_len"], [840, 3, 1, "", "taxa"], [840, 3, 1, "", "taxa_axis"], [840, 3, 1, "", "taxa_grp"], [840, 3, 1, "", "taxa_grp_len"], [840, 3, 1, "", "taxa_grp_name"], [840, 3, 1, "", "taxa_grp_spix"], [840, 3, 1, "", "taxa_grp_stix"], [840, 4, 1, "", "to_csv"], [840, 4, 1, "", "to_hdf5"], [840, 4, 1, "", "to_pandas"], [840, 3, 1, "", "trait"], [840, 3, 1, "", "trait_axis"], [840, 4, 1, "", "ungroup"], [840, 4, 1, "", "ungroup_taxa"]], "pybrops.model.vmat.AdditiveGenicVarianceMatrix": [[843, 1, 1, "", "AdditiveGenicVarianceMatrix"], [844, 2, 1, "", "check_is_AdditiveGenicVarianceMatrix"]], "pybrops.model.vmat.AdditiveGenicVarianceMatrix.AdditiveGenicVarianceMatrix": [[843, 4, 1, "", "__add__"], [843, 4, 1, "", "__mul__"], [843, 4, 1, "", "adjoin"], [843, 4, 1, "", "adjoin_taxa"], [843, 4, 1, "", "adjoin_trait"], [843, 4, 1, "", "append"], [843, 4, 1, "", "append_taxa"], [843, 4, 1, "", "append_trait"], [843, 4, 1, "", "concat"], [843, 4, 1, "", "concat_taxa"], [843, 4, 1, "", "concat_trait"], [843, 4, 1, "", "copy"], [843, 4, 1, "", "deepcopy"], [843, 4, 1, "", "delete"], [843, 4, 1, "", "delete_taxa"], [843, 4, 1, "", "delete_trait"], [843, 3, 1, "", "epgc"], [843, 4, 1, "", "from_algmod"], [843, 4, 1, "", "from_csv"], [843, 4, 1, "", "from_gmod"], [843, 4, 1, "", "from_hdf5"], [843, 4, 1, "", "from_pandas"], [843, 4, 1, "", "group"], [843, 4, 1, "", "group_taxa"], [843, 4, 1, "", "incorp"], [843, 4, 1, "", "incorp_taxa"], [843, 4, 1, "", "incorp_trait"], [843, 4, 1, "", "insert"], [843, 4, 1, "", "insert_taxa"], [843, 4, 1, "", "insert_trait"], [843, 4, 1, "", "is_grouped"], [843, 4, 1, "", "is_grouped_taxa"], [843, 4, 1, "", "is_square"], [843, 4, 1, "", "is_square_taxa"], [843, 4, 1, "", "lexsort"], [843, 4, 1, "", "lexsort_taxa"], [843, 4, 1, "", "lexsort_trait"], [843, 3, 1, "", "mat"], [843, 3, 1, "", "mat_ndim"], [843, 3, 1, "", "mat_shape"], [843, 3, 1, "", "nsquare"], [843, 3, 1, "", "nsquare_taxa"], [843, 3, 1, "", "ntaxa"], [843, 3, 1, "", "ntrait"], [843, 4, 1, "", "remove"], [843, 4, 1, "", "remove_taxa"], [843, 4, 1, "", "remove_trait"], [843, 4, 1, "", "reorder"], [843, 4, 1, "", "reorder_taxa"], [843, 4, 1, "", "reorder_trait"], [843, 4, 1, "", "select"], [843, 4, 1, "", "select_taxa"], [843, 4, 1, "", "select_trait"], [843, 4, 1, "", "sort"], [843, 4, 1, "", "sort_taxa"], [843, 4, 1, "", "sort_trait"], [843, 3, 1, "", "square_axes"], [843, 3, 1, "", "square_axes_len"], [843, 3, 1, "", "square_taxa_axes"], [843, 3, 1, "", "square_taxa_axes_len"], [843, 3, 1, "", "taxa"], [843, 3, 1, "", "taxa_axis"], [843, 3, 1, "", "taxa_grp"], [843, 3, 1, "", "taxa_grp_len"], [843, 3, 1, "", "taxa_grp_name"], [843, 3, 1, "", "taxa_grp_spix"], [843, 3, 1, "", "taxa_grp_stix"], [843, 4, 1, "", "to_csv"], [843, 4, 1, "", "to_hdf5"], [843, 4, 1, "", "to_pandas"], [843, 3, 1, "", "trait"], [843, 3, 1, "", "trait_axis"], [843, 4, 1, "", "ungroup"], [843, 4, 1, "", "ungroup_taxa"]], "pybrops.model.vmat.DenseAdditiveGeneticVarianceMatrix": [[846, 1, 1, "", "DenseAdditiveGeneticVarianceMatrix"], [847, 2, 1, "", "check_is_DenseAdditiveGeneticVarianceMatrix"]], "pybrops.model.vmat.DenseAdditiveGeneticVarianceMatrix.DenseAdditiveGeneticVarianceMatrix": [[846, 4, 1, "", "__add__"], [846, 4, 1, "", "__mul__"], [846, 4, 1, "", "adjoin"], [846, 4, 1, "", "adjoin_taxa"], [846, 4, 1, "", "adjoin_trait"], [846, 4, 1, "", "append"], [846, 4, 1, "", "append_taxa"], [846, 4, 1, "", "append_trait"], [846, 4, 1, "", "concat"], [846, 4, 1, "", "concat_taxa"], [846, 4, 1, "", "concat_trait"], [846, 4, 1, "", "copy"], [846, 4, 1, "", "deepcopy"], [846, 4, 1, "", "delete"], [846, 4, 1, "", "delete_taxa"], [846, 4, 1, "", "delete_trait"], [846, 3, 1, "", "epgc"], [846, 4, 1, "", "from_algmod"], [846, 4, 1, "", "from_csv"], [846, 4, 1, "", "from_gmod"], [846, 4, 1, "", "from_hdf5"], [846, 4, 1, "", "from_pandas"], [846, 4, 1, "", "group"], [846, 4, 1, "", "group_taxa"], [846, 4, 1, "", "incorp"], [846, 4, 1, "", "incorp_taxa"], [846, 4, 1, "", "incorp_trait"], [846, 4, 1, "", "insert"], [846, 4, 1, "", "insert_taxa"], [846, 4, 1, "", "insert_trait"], [846, 4, 1, "", "is_grouped"], [846, 4, 1, "", "is_grouped_taxa"], [846, 4, 1, "", "is_square"], [846, 4, 1, "", "is_square_taxa"], [846, 4, 1, "", "lexsort"], [846, 4, 1, "", "lexsort_taxa"], [846, 4, 1, "", "lexsort_trait"], [846, 3, 1, "", "mat"], [846, 3, 1, "", "mat_ndim"], [846, 3, 1, "", "mat_shape"], [846, 3, 1, "", "nsquare"], [846, 3, 1, "", "nsquare_taxa"], [846, 3, 1, "", "ntaxa"], [846, 3, 1, "", "ntrait"], [846, 4, 1, "", "remove"], [846, 4, 1, "", "remove_taxa"], [846, 4, 1, "", "remove_trait"], [846, 4, 1, "", "reorder"], [846, 4, 1, "", "reorder_taxa"], [846, 4, 1, "", "reorder_trait"], [846, 4, 1, "", "select"], [846, 4, 1, "", "select_taxa"], [846, 4, 1, "", "select_trait"], [846, 4, 1, "", "sort"], [846, 4, 1, "", "sort_taxa"], [846, 4, 1, "", "sort_trait"], [846, 3, 1, "", "square_axes"], [846, 3, 1, "", "square_axes_len"], [846, 3, 1, "", "square_taxa_axes"], [846, 3, 1, "", "square_taxa_axes_len"], [846, 3, 1, "", "taxa"], [846, 3, 1, "", "taxa_axis"], [846, 3, 1, "", "taxa_grp"], [846, 3, 1, "", "taxa_grp_len"], [846, 3, 1, "", "taxa_grp_name"], [846, 3, 1, "", "taxa_grp_spix"], [846, 3, 1, "", "taxa_grp_stix"], [846, 4, 1, "", "to_csv"], [846, 4, 1, "", "to_hdf5"], [846, 4, 1, "", "to_pandas"], [846, 3, 1, "", "trait"], [846, 3, 1, "", "trait_axis"], [846, 4, 1, "", "ungroup"], [846, 4, 1, "", "ungroup_taxa"]], "pybrops.model.vmat.DenseAdditiveGenicVarianceMatrix": [[849, 1, 1, "", "DenseAdditiveGenicVarianceMatrix"], [850, 2, 1, "", "check_is_DenseAdditiveGenicVarianceMatrix"]], "pybrops.model.vmat.DenseAdditiveGenicVarianceMatrix.DenseAdditiveGenicVarianceMatrix": [[849, 4, 1, "", "__add__"], [849, 4, 1, "", "__mul__"], [849, 4, 1, "", "adjoin"], [849, 4, 1, "", "adjoin_taxa"], [849, 4, 1, "", "adjoin_trait"], [849, 4, 1, "", "append"], [849, 4, 1, "", "append_taxa"], [849, 4, 1, "", "append_trait"], [849, 4, 1, "", "concat"], [849, 4, 1, "", "concat_taxa"], [849, 4, 1, "", "concat_trait"], [849, 4, 1, "", "copy"], [849, 4, 1, "", "deepcopy"], [849, 4, 1, "", "delete"], [849, 4, 1, "", "delete_taxa"], [849, 4, 1, "", "delete_trait"], [849, 3, 1, "", "epgc"], [849, 4, 1, "", "from_algmod"], [849, 4, 1, "", "from_csv"], [849, 4, 1, "", "from_gmod"], [849, 4, 1, "", "from_hdf5"], [849, 4, 1, "", "from_pandas"], [849, 4, 1, "", "group"], [849, 4, 1, "", "group_taxa"], [849, 4, 1, "", "incorp"], [849, 4, 1, "", "incorp_taxa"], [849, 4, 1, "", "incorp_trait"], [849, 4, 1, "", "insert"], [849, 4, 1, "", "insert_taxa"], [849, 4, 1, "", "insert_trait"], [849, 4, 1, "", "is_grouped"], [849, 4, 1, "", "is_grouped_taxa"], [849, 4, 1, "", "is_square"], [849, 4, 1, "", "is_square_taxa"], [849, 4, 1, "", "lexsort"], [849, 4, 1, "", "lexsort_taxa"], [849, 4, 1, "", "lexsort_trait"], [849, 3, 1, "", "mat"], [849, 3, 1, "", "mat_ndim"], [849, 3, 1, "", "mat_shape"], [849, 3, 1, "", "nsquare"], [849, 3, 1, "", "nsquare_taxa"], [849, 3, 1, "", "ntaxa"], [849, 3, 1, "", "ntrait"], [849, 4, 1, "", "remove"], [849, 4, 1, "", "remove_taxa"], [849, 4, 1, "", "remove_trait"], [849, 4, 1, "", "reorder"], [849, 4, 1, "", "reorder_taxa"], [849, 4, 1, "", "reorder_trait"], [849, 4, 1, "", "select"], [849, 4, 1, "", "select_taxa"], [849, 4, 1, "", "select_trait"], [849, 4, 1, "", "sort"], [849, 4, 1, "", "sort_taxa"], [849, 4, 1, "", "sort_trait"], [849, 3, 1, "", "square_axes"], [849, 3, 1, "", "square_axes_len"], [849, 3, 1, "", "square_taxa_axes"], [849, 3, 1, "", "square_taxa_axes_len"], [849, 3, 1, "", "taxa"], [849, 3, 1, "", "taxa_axis"], [849, 3, 1, "", "taxa_grp"], [849, 3, 1, "", "taxa_grp_len"], [849, 3, 1, "", "taxa_grp_name"], [849, 3, 1, "", "taxa_grp_spix"], [849, 3, 1, "", "taxa_grp_stix"], [849, 4, 1, "", "to_csv"], [849, 4, 1, "", "to_hdf5"], [849, 4, 1, "", "to_pandas"], [849, 3, 1, "", "trait"], [849, 3, 1, "", "trait_axis"], [849, 4, 1, "", "ungroup"], [849, 4, 1, "", "ungroup_taxa"]], "pybrops.model.vmat.DenseDihybridDHAdditiveGeneticVarianceMatrix": [[852, 1, 1, "", "DenseDihybridDHAdditiveGeneticVarianceMatrix"], [853, 2, 1, "", "check_is_DenseDihybridDHAdditiveGeneticVarianceMatrix"]], "pybrops.model.vmat.DenseDihybridDHAdditiveGeneticVarianceMatrix.DenseDihybridDHAdditiveGeneticVarianceMatrix": [[852, 4, 1, "", "__add__"], [852, 4, 1, "", "__mul__"], [852, 4, 1, "", "adjoin"], [852, 4, 1, "", "adjoin_taxa"], [852, 4, 1, "", "adjoin_trait"], [852, 4, 1, "", "append"], [852, 4, 1, "", "append_taxa"], [852, 4, 1, "", "append_trait"], [852, 4, 1, "", "concat"], [852, 4, 1, "", "concat_taxa"], [852, 4, 1, "", "concat_trait"], [852, 4, 1, "", "copy"], [852, 4, 1, "", "deepcopy"], [852, 4, 1, "", "delete"], [852, 4, 1, "", "delete_taxa"], [852, 4, 1, "", "delete_trait"], [852, 3, 1, "", "epgc"], [852, 3, 1, "", "female_axis"], [852, 4, 1, "", "from_algmod"], [852, 4, 1, "", "from_csv"], [852, 4, 1, "", "from_gmod"], [852, 4, 1, "", "from_hdf5"], [852, 4, 1, "", "from_pandas"], [852, 4, 1, "", "group"], [852, 4, 1, "", "group_taxa"], [852, 4, 1, "", "incorp"], [852, 4, 1, "", "incorp_taxa"], [852, 4, 1, "", "incorp_trait"], [852, 4, 1, "", "insert"], [852, 4, 1, "", "insert_taxa"], [852, 4, 1, "", "insert_trait"], [852, 4, 1, "", "is_grouped"], [852, 4, 1, "", "is_grouped_taxa"], [852, 4, 1, "", "is_square"], [852, 4, 1, "", "is_square_taxa"], [852, 4, 1, "", "lexsort"], [852, 4, 1, "", "lexsort_taxa"], [852, 4, 1, "", "lexsort_trait"], [852, 3, 1, "", "male_axis"], [852, 3, 1, "", "mat"], [852, 3, 1, "", "mat_ndim"], [852, 3, 1, "", "mat_shape"], [852, 3, 1, "", "nfemale"], [852, 3, 1, "", "nmale"], [852, 3, 1, "", "nsquare"], [852, 3, 1, "", "nsquare_taxa"], [852, 3, 1, "", "ntaxa"], [852, 3, 1, "", "ntrait"], [852, 4, 1, "", "remove"], [852, 4, 1, "", "remove_taxa"], [852, 4, 1, "", "remove_trait"], [852, 4, 1, "", "reorder"], [852, 4, 1, "", "reorder_taxa"], [852, 4, 1, "", "reorder_trait"], [852, 4, 1, "", "select"], [852, 4, 1, "", "select_taxa"], [852, 4, 1, "", "select_trait"], [852, 4, 1, "", "sort"], [852, 4, 1, "", "sort_taxa"], [852, 4, 1, "", "sort_trait"], [852, 3, 1, "", "square_axes"], [852, 3, 1, "", "square_axes_len"], [852, 3, 1, "", "square_taxa_axes"], [852, 3, 1, "", "square_taxa_axes_len"], [852, 3, 1, "", "taxa"], [852, 3, 1, "", "taxa_axis"], [852, 3, 1, "", "taxa_grp"], [852, 3, 1, "", "taxa_grp_len"], [852, 3, 1, "", "taxa_grp_name"], [852, 3, 1, "", "taxa_grp_spix"], [852, 3, 1, "", "taxa_grp_stix"], [852, 4, 1, "", "to_csv"], [852, 4, 1, "", "to_hdf5"], [852, 4, 1, "", "to_pandas"], [852, 3, 1, "", "trait"], [852, 3, 1, "", "trait_axis"], [852, 4, 1, "", "ungroup"], [852, 4, 1, "", "ungroup_taxa"]], "pybrops.model.vmat.DenseDihybridDHAdditiveGenicVarianceMatrix": [[855, 1, 1, "", "DenseDihybridDHAdditiveGenicVarianceMatrix"]], "pybrops.model.vmat.DenseDihybridDHAdditiveGenicVarianceMatrix.DenseDihybridDHAdditiveGenicVarianceMatrix": [[855, 4, 1, "", "__add__"], [855, 4, 1, "", "__mul__"], [855, 4, 1, "", "adjoin"], [855, 4, 1, "", "adjoin_taxa"], [855, 4, 1, "", "adjoin_trait"], [855, 4, 1, "", "append"], [855, 4, 1, "", "append_taxa"], [855, 4, 1, "", "append_trait"], [855, 4, 1, "", "concat"], [855, 4, 1, "", "concat_taxa"], [855, 4, 1, "", "concat_trait"], [855, 4, 1, "", "copy"], [855, 4, 1, "", "deepcopy"], [855, 4, 1, "", "delete"], [855, 4, 1, "", "delete_taxa"], [855, 4, 1, "", "delete_trait"], [855, 3, 1, "", "epgc"], [855, 3, 1, "", "female_axis"], [855, 4, 1, "", "from_algmod"], [855, 4, 1, "", "from_csv"], [855, 4, 1, "", "from_gmod"], [855, 4, 1, "", "from_hdf5"], [855, 4, 1, "", "from_pandas"], [855, 4, 1, "", "group"], [855, 4, 1, "", "group_taxa"], [855, 4, 1, "", "incorp"], [855, 4, 1, "", "incorp_taxa"], [855, 4, 1, "", "incorp_trait"], [855, 4, 1, "", "insert"], [855, 4, 1, "", "insert_taxa"], [855, 4, 1, "", "insert_trait"], [855, 4, 1, "", "is_grouped"], [855, 4, 1, "", "is_grouped_taxa"], [855, 4, 1, "", "is_square"], [855, 4, 1, "", "is_square_taxa"], [855, 4, 1, "", "lexsort"], [855, 4, 1, "", "lexsort_taxa"], [855, 4, 1, "", "lexsort_trait"], [855, 3, 1, "", "male_axis"], [855, 3, 1, "", "mat"], [855, 3, 1, "", "mat_ndim"], [855, 3, 1, "", "mat_shape"], [855, 3, 1, "", "nfemale"], [855, 3, 1, "", "nmale"], [855, 3, 1, "", "nsquare"], [855, 3, 1, "", "nsquare_taxa"], [855, 3, 1, "", "ntaxa"], [855, 3, 1, "", "ntrait"], [855, 4, 1, "", "remove"], [855, 4, 1, "", "remove_taxa"], [855, 4, 1, "", "remove_trait"], [855, 4, 1, "", "reorder"], [855, 4, 1, "", "reorder_taxa"], [855, 4, 1, "", "reorder_trait"], [855, 4, 1, "", "select"], [855, 4, 1, "", "select_taxa"], [855, 4, 1, "", "select_trait"], [855, 4, 1, "", "sort"], [855, 4, 1, "", "sort_taxa"], [855, 4, 1, "", "sort_trait"], [855, 3, 1, "", "square_axes"], [855, 3, 1, "", "square_axes_len"], [855, 3, 1, "", "square_taxa_axes"], [855, 3, 1, "", "square_taxa_axes_len"], [855, 3, 1, "", "taxa"], [855, 3, 1, "", "taxa_axis"], [855, 3, 1, "", "taxa_grp"], [855, 3, 1, "", "taxa_grp_len"], [855, 3, 1, "", "taxa_grp_name"], [855, 3, 1, "", "taxa_grp_spix"], [855, 3, 1, "", "taxa_grp_stix"], [855, 4, 1, "", "to_csv"], [855, 4, 1, "", "to_hdf5"], [855, 4, 1, "", "to_pandas"], [855, 3, 1, "", "trait"], [855, 3, 1, "", "trait_axis"], [855, 4, 1, "", "ungroup"], [855, 4, 1, "", "ungroup_taxa"]], "pybrops.model.vmat.DenseFourWayDHAdditiveGeneticVarianceMatrix": [[857, 1, 1, "", "DenseFourWayDHAdditiveGeneticVarianceMatrix"], [858, 2, 1, "", "check_is_DenseFourWayDHAdditiveGeneticVarianceMatrix"]], "pybrops.model.vmat.DenseFourWayDHAdditiveGeneticVarianceMatrix.DenseFourWayDHAdditiveGeneticVarianceMatrix": [[857, 4, 1, "", "__add__"], [857, 4, 1, "", "__mul__"], [857, 4, 1, "", "adjoin"], [857, 4, 1, "", "adjoin_taxa"], [857, 4, 1, "", "adjoin_trait"], [857, 4, 1, "", "append"], [857, 4, 1, "", "append_taxa"], [857, 4, 1, "", "append_trait"], [857, 4, 1, "", "concat"], [857, 4, 1, "", "concat_taxa"], [857, 4, 1, "", "concat_trait"], [857, 4, 1, "", "copy"], [857, 4, 1, "", "deepcopy"], [857, 4, 1, "", "delete"], [857, 4, 1, "", "delete_taxa"], [857, 4, 1, "", "delete_trait"], [857, 3, 1, "", "epgc"], [857, 3, 1, "", "female1_axis"], [857, 3, 1, "", "female2_axis"], [857, 4, 1, "", "from_algmod"], [857, 4, 1, "", "from_csv"], [857, 4, 1, "", "from_gmod"], [857, 4, 1, "", "from_hdf5"], [857, 4, 1, "", "from_pandas"], [857, 4, 1, "", "group"], [857, 4, 1, "", "group_taxa"], [857, 4, 1, "", "incorp"], [857, 4, 1, "", "incorp_taxa"], [857, 4, 1, "", "incorp_trait"], [857, 4, 1, "", "insert"], [857, 4, 1, "", "insert_taxa"], [857, 4, 1, "", "insert_trait"], [857, 4, 1, "", "is_grouped"], [857, 4, 1, "", "is_grouped_taxa"], [857, 4, 1, "", "is_square"], [857, 4, 1, "", "is_square_taxa"], [857, 4, 1, "", "lexsort"], [857, 4, 1, "", "lexsort_taxa"], [857, 4, 1, "", "lexsort_trait"], [857, 3, 1, "", "male1_axis"], [857, 3, 1, "", "male2_axis"], [857, 3, 1, "", "mat"], [857, 3, 1, "", "mat_ndim"], [857, 3, 1, "", "mat_shape"], [857, 3, 1, "", "nfemale1"], [857, 3, 1, "", "nfemale2"], [857, 3, 1, "", "nmale1"], [857, 3, 1, "", "nmale2"], [857, 3, 1, "", "nsquare"], [857, 3, 1, "", "nsquare_taxa"], [857, 3, 1, "", "ntaxa"], [857, 3, 1, "", "ntrait"], [857, 4, 1, "", "remove"], [857, 4, 1, "", "remove_taxa"], [857, 4, 1, "", "remove_trait"], [857, 4, 1, "", "reorder"], [857, 4, 1, "", "reorder_taxa"], [857, 4, 1, "", "reorder_trait"], [857, 4, 1, "", "select"], [857, 4, 1, "", "select_taxa"], [857, 4, 1, "", "select_trait"], [857, 4, 1, "", "sort"], [857, 4, 1, "", "sort_taxa"], [857, 4, 1, "", "sort_trait"], [857, 3, 1, "", "square_axes"], [857, 3, 1, "", "square_axes_len"], [857, 3, 1, "", "square_taxa_axes"], [857, 3, 1, "", "square_taxa_axes_len"], [857, 3, 1, "", "taxa"], [857, 3, 1, "", "taxa_axis"], [857, 3, 1, "", "taxa_grp"], [857, 3, 1, "", "taxa_grp_len"], [857, 3, 1, "", "taxa_grp_name"], [857, 3, 1, "", "taxa_grp_spix"], [857, 3, 1, "", "taxa_grp_stix"], [857, 4, 1, "", "to_csv"], [857, 4, 1, "", "to_hdf5"], [857, 4, 1, "", "to_pandas"], [857, 3, 1, "", "trait"], [857, 3, 1, "", "trait_axis"], [857, 4, 1, "", "ungroup"], [857, 4, 1, "", "ungroup_taxa"]], "pybrops.model.vmat.DenseFourWayDHAdditiveGenicVarianceMatrix": [[860, 1, 1, "", "DenseFourWayDHAdditiveGenicVarianceMatrix"]], "pybrops.model.vmat.DenseFourWayDHAdditiveGenicVarianceMatrix.DenseFourWayDHAdditiveGenicVarianceMatrix": [[860, 4, 1, "", "__add__"], [860, 4, 1, "", "__mul__"], [860, 4, 1, "", "adjoin"], [860, 4, 1, "", "adjoin_taxa"], [860, 4, 1, "", "adjoin_trait"], [860, 4, 1, "", "append"], [860, 4, 1, "", "append_taxa"], [860, 4, 1, "", "append_trait"], [860, 4, 1, "", "concat"], [860, 4, 1, "", "concat_taxa"], [860, 4, 1, "", "concat_trait"], [860, 4, 1, "", "copy"], [860, 4, 1, "", "deepcopy"], [860, 4, 1, "", "delete"], [860, 4, 1, "", "delete_taxa"], [860, 4, 1, "", "delete_trait"], [860, 3, 1, "", "epgc"], [860, 3, 1, "", "female1_axis"], [860, 3, 1, "", "female2_axis"], [860, 4, 1, "", "from_algmod"], [860, 4, 1, "", "from_csv"], [860, 4, 1, "", "from_gmod"], [860, 4, 1, "", "from_hdf5"], [860, 4, 1, "", "from_pandas"], [860, 4, 1, "", "group"], [860, 4, 1, "", "group_taxa"], [860, 4, 1, "", "incorp"], [860, 4, 1, "", "incorp_taxa"], [860, 4, 1, "", "incorp_trait"], [860, 4, 1, "", "insert"], [860, 4, 1, "", "insert_taxa"], [860, 4, 1, "", "insert_trait"], [860, 4, 1, "", "is_grouped"], [860, 4, 1, "", "is_grouped_taxa"], [860, 4, 1, "", "is_square"], [860, 4, 1, "", "is_square_taxa"], [860, 4, 1, "", "lexsort"], [860, 4, 1, "", "lexsort_taxa"], [860, 4, 1, "", "lexsort_trait"], [860, 3, 1, "", "male1_axis"], [860, 3, 1, "", "male2_axis"], [860, 3, 1, "", "mat"], [860, 3, 1, "", "mat_ndim"], [860, 3, 1, "", "mat_shape"], [860, 3, 1, "", "nfemale1"], [860, 3, 1, "", "nfemale2"], [860, 3, 1, "", "nmale1"], [860, 3, 1, "", "nmale2"], [860, 3, 1, "", "nsquare"], [860, 3, 1, "", "nsquare_taxa"], [860, 3, 1, "", "ntaxa"], [860, 3, 1, "", "ntrait"], [860, 4, 1, "", "remove"], [860, 4, 1, "", "remove_taxa"], [860, 4, 1, "", "remove_trait"], [860, 4, 1, "", "reorder"], [860, 4, 1, "", "reorder_taxa"], [860, 4, 1, "", "reorder_trait"], [860, 4, 1, "", "select"], [860, 4, 1, "", "select_taxa"], [860, 4, 1, "", "select_trait"], [860, 4, 1, "", "sort"], [860, 4, 1, "", "sort_taxa"], [860, 4, 1, "", "sort_trait"], [860, 3, 1, "", "square_axes"], [860, 3, 1, "", "square_axes_len"], [860, 3, 1, "", "square_taxa_axes"], [860, 3, 1, "", "square_taxa_axes_len"], [860, 3, 1, "", "taxa"], [860, 3, 1, "", "taxa_axis"], [860, 3, 1, "", "taxa_grp"], [860, 3, 1, "", "taxa_grp_len"], [860, 3, 1, "", "taxa_grp_name"], [860, 3, 1, "", "taxa_grp_spix"], [860, 3, 1, "", "taxa_grp_stix"], [860, 4, 1, "", "to_csv"], [860, 4, 1, "", "to_hdf5"], [860, 4, 1, "", "to_pandas"], [860, 3, 1, "", "trait"], [860, 3, 1, "", "trait_axis"], [860, 4, 1, "", "ungroup"], [860, 4, 1, "", "ungroup_taxa"]], "pybrops.model.vmat.DenseGeneticVarianceMatrix": [[862, 1, 1, "", "DenseGeneticVarianceMatrix"], [863, 2, 1, "", "check_is_DenseGeneticVarianceMatrix"]], "pybrops.model.vmat.DenseGeneticVarianceMatrix.DenseGeneticVarianceMatrix": [[862, 4, 1, "", "__add__"], [862, 4, 1, "", "__mul__"], [862, 4, 1, "", "adjoin"], [862, 4, 1, "", "adjoin_taxa"], [862, 4, 1, "", "adjoin_trait"], [862, 4, 1, "", "append"], [862, 4, 1, "", "append_taxa"], [862, 4, 1, "", "append_trait"], [862, 4, 1, "", "concat"], [862, 4, 1, "", "concat_taxa"], [862, 4, 1, "", "concat_trait"], [862, 4, 1, "", "copy"], [862, 4, 1, "", "deepcopy"], [862, 4, 1, "", "delete"], [862, 4, 1, "", "delete_taxa"], [862, 4, 1, "", "delete_trait"], [862, 3, 1, "", "epgc"], [862, 4, 1, "", "from_csv"], [862, 4, 1, "", "from_gmod"], [862, 4, 1, "", "from_hdf5"], [862, 4, 1, "", "from_pandas"], [862, 4, 1, "", "group"], [862, 4, 1, "", "group_taxa"], [862, 4, 1, "", "incorp"], [862, 4, 1, "", "incorp_taxa"], [862, 4, 1, "", "incorp_trait"], [862, 4, 1, "", "insert"], [862, 4, 1, "", "insert_taxa"], [862, 4, 1, "", "insert_trait"], [862, 4, 1, "", "is_grouped"], [862, 4, 1, "", "is_grouped_taxa"], [862, 4, 1, "", "is_square"], [862, 4, 1, "", "is_square_taxa"], [862, 4, 1, "", "lexsort"], [862, 4, 1, "", "lexsort_taxa"], [862, 4, 1, "", "lexsort_trait"], [862, 3, 1, "", "mat"], [862, 3, 1, "", "mat_ndim"], [862, 3, 1, "", "mat_shape"], [862, 3, 1, "", "nsquare"], [862, 3, 1, "", "nsquare_taxa"], [862, 3, 1, "", "ntaxa"], [862, 3, 1, "", "ntrait"], [862, 4, 1, "", "remove"], [862, 4, 1, "", "remove_taxa"], [862, 4, 1, "", "remove_trait"], [862, 4, 1, "", "reorder"], [862, 4, 1, "", "reorder_taxa"], [862, 4, 1, "", "reorder_trait"], [862, 4, 1, "", "select"], [862, 4, 1, "", "select_taxa"], [862, 4, 1, "", "select_trait"], [862, 4, 1, "", "sort"], [862, 4, 1, "", "sort_taxa"], [862, 4, 1, "", "sort_trait"], [862, 3, 1, "", "square_axes"], [862, 3, 1, "", "square_axes_len"], [862, 3, 1, "", "square_taxa_axes"], [862, 3, 1, "", "square_taxa_axes_len"], [862, 3, 1, "", "taxa"], [862, 3, 1, "", "taxa_axis"], [862, 3, 1, "", "taxa_grp"], [862, 3, 1, "", "taxa_grp_len"], [862, 3, 1, "", "taxa_grp_name"], [862, 3, 1, "", "taxa_grp_spix"], [862, 3, 1, "", "taxa_grp_stix"], [862, 4, 1, "", "to_csv"], [862, 4, 1, "", "to_hdf5"], [862, 4, 1, "", "to_pandas"], [862, 3, 1, "", "trait"], [862, 3, 1, "", "trait_axis"], [862, 4, 1, "", "ungroup"], [862, 4, 1, "", "ungroup_taxa"]], "pybrops.model.vmat.DenseGenicVarianceMatrix": [[865, 1, 1, "", "DenseGenicVarianceMatrix"], [866, 2, 1, "", "check_is_DenseGenicVarianceMatrix"]], "pybrops.model.vmat.DenseGenicVarianceMatrix.DenseGenicVarianceMatrix": [[865, 4, 1, "", "__add__"], [865, 4, 1, "", "__mul__"], [865, 4, 1, "", "adjoin"], [865, 4, 1, "", "adjoin_taxa"], [865, 4, 1, "", "adjoin_trait"], [865, 4, 1, "", "append"], [865, 4, 1, "", "append_taxa"], [865, 4, 1, "", "append_trait"], [865, 4, 1, "", "concat"], [865, 4, 1, "", "concat_taxa"], [865, 4, 1, "", "concat_trait"], [865, 4, 1, "", "copy"], [865, 4, 1, "", "deepcopy"], [865, 4, 1, "", "delete"], [865, 4, 1, "", "delete_taxa"], [865, 4, 1, "", "delete_trait"], [865, 3, 1, "", "epgc"], [865, 4, 1, "", "from_csv"], [865, 4, 1, "", "from_gmod"], [865, 4, 1, "", "from_hdf5"], [865, 4, 1, "", "from_pandas"], [865, 4, 1, "", "group"], [865, 4, 1, "", "group_taxa"], [865, 4, 1, "", "incorp"], [865, 4, 1, "", "incorp_taxa"], [865, 4, 1, "", "incorp_trait"], [865, 4, 1, "", "insert"], [865, 4, 1, "", "insert_taxa"], [865, 4, 1, "", "insert_trait"], [865, 4, 1, "", "is_grouped"], [865, 4, 1, "", "is_grouped_taxa"], [865, 4, 1, "", "is_square"], [865, 4, 1, "", "is_square_taxa"], [865, 4, 1, "", "lexsort"], [865, 4, 1, "", "lexsort_taxa"], [865, 4, 1, "", "lexsort_trait"], [865, 3, 1, "", "mat"], [865, 3, 1, "", "mat_ndim"], [865, 3, 1, "", "mat_shape"], [865, 3, 1, "", "nsquare"], [865, 3, 1, "", "nsquare_taxa"], [865, 3, 1, "", "ntaxa"], [865, 3, 1, "", "ntrait"], [865, 4, 1, "", "remove"], [865, 4, 1, "", "remove_taxa"], [865, 4, 1, "", "remove_trait"], [865, 4, 1, "", "reorder"], [865, 4, 1, "", "reorder_taxa"], [865, 4, 1, "", "reorder_trait"], [865, 4, 1, "", "select"], [865, 4, 1, "", "select_taxa"], [865, 4, 1, "", "select_trait"], [865, 4, 1, "", "sort"], [865, 4, 1, "", "sort_taxa"], [865, 4, 1, "", "sort_trait"], [865, 3, 1, "", "square_axes"], [865, 3, 1, "", "square_axes_len"], [865, 3, 1, "", "square_taxa_axes"], [865, 3, 1, "", "square_taxa_axes_len"], [865, 3, 1, "", "taxa"], [865, 3, 1, "", "taxa_axis"], [865, 3, 1, "", "taxa_grp"], [865, 3, 1, "", "taxa_grp_len"], [865, 3, 1, "", "taxa_grp_name"], [865, 3, 1, "", "taxa_grp_spix"], [865, 3, 1, "", "taxa_grp_stix"], [865, 4, 1, "", "to_csv"], [865, 4, 1, "", "to_hdf5"], [865, 4, 1, "", "to_pandas"], [865, 3, 1, "", "trait"], [865, 3, 1, "", "trait_axis"], [865, 4, 1, "", "ungroup"], [865, 4, 1, "", "ungroup_taxa"]], "pybrops.model.vmat.DenseThreeWayDHAdditiveGeneticVarianceMatrix": [[868, 1, 1, "", "DenseThreeWayDHAdditiveGeneticVarianceMatrix"]], "pybrops.model.vmat.DenseThreeWayDHAdditiveGeneticVarianceMatrix.DenseThreeWayDHAdditiveGeneticVarianceMatrix": [[868, 4, 1, "", "__add__"], [868, 4, 1, "", "__mul__"], [868, 4, 1, "", "adjoin"], [868, 4, 1, "", "adjoin_taxa"], [868, 4, 1, "", "adjoin_trait"], [868, 4, 1, "", "append"], [868, 4, 1, "", "append_taxa"], [868, 4, 1, "", "append_trait"], [868, 4, 1, "", "concat"], [868, 4, 1, "", "concat_taxa"], [868, 4, 1, "", "concat_trait"], [868, 4, 1, "", "copy"], [868, 4, 1, "", "deepcopy"], [868, 4, 1, "", "delete"], [868, 4, 1, "", "delete_taxa"], [868, 4, 1, "", "delete_trait"], [868, 3, 1, "", "epgc"], [868, 3, 1, "", "female_axis"], [868, 4, 1, "", "from_algmod"], [868, 4, 1, "", "from_csv"], [868, 4, 1, "", "from_gmod"], [868, 4, 1, "", "from_hdf5"], [868, 4, 1, "", "from_pandas"], [868, 4, 1, "", "group"], [868, 4, 1, "", "group_taxa"], [868, 4, 1, "", "incorp"], [868, 4, 1, "", "incorp_taxa"], [868, 4, 1, "", "incorp_trait"], [868, 4, 1, "", "insert"], [868, 4, 1, "", "insert_taxa"], [868, 4, 1, "", "insert_trait"], [868, 4, 1, "", "is_grouped"], [868, 4, 1, "", "is_grouped_taxa"], [868, 4, 1, "", "is_square"], [868, 4, 1, "", "is_square_taxa"], [868, 4, 1, "", "lexsort"], [868, 4, 1, "", "lexsort_taxa"], [868, 4, 1, "", "lexsort_trait"], [868, 3, 1, "", "male_axis"], [868, 3, 1, "", "mat"], [868, 3, 1, "", "mat_ndim"], [868, 3, 1, "", "mat_shape"], [868, 3, 1, "", "nfemale"], [868, 3, 1, "", "nmale"], [868, 3, 1, "", "nrecurrent"], [868, 3, 1, "", "nsquare"], [868, 3, 1, "", "nsquare_taxa"], [868, 3, 1, "", "ntaxa"], [868, 3, 1, "", "ntrait"], [868, 3, 1, "", "recurrent_axis"], [868, 4, 1, "", "remove"], [868, 4, 1, "", "remove_taxa"], [868, 4, 1, "", "remove_trait"], [868, 4, 1, "", "reorder"], [868, 4, 1, "", "reorder_taxa"], [868, 4, 1, "", "reorder_trait"], [868, 4, 1, "", "select"], [868, 4, 1, "", "select_taxa"], [868, 4, 1, "", "select_trait"], [868, 4, 1, "", "sort"], [868, 4, 1, "", "sort_taxa"], [868, 4, 1, "", "sort_trait"], [868, 3, 1, "", "square_axes"], [868, 3, 1, "", "square_axes_len"], [868, 3, 1, "", "square_taxa_axes"], [868, 3, 1, "", "square_taxa_axes_len"], [868, 3, 1, "", "taxa"], [868, 3, 1, "", "taxa_axis"], [868, 3, 1, "", "taxa_grp"], [868, 3, 1, "", "taxa_grp_len"], [868, 3, 1, "", "taxa_grp_name"], [868, 3, 1, "", "taxa_grp_spix"], [868, 3, 1, "", "taxa_grp_stix"], [868, 4, 1, "", "to_csv"], [868, 4, 1, "", "to_hdf5"], [868, 4, 1, "", "to_pandas"], [868, 3, 1, "", "trait"], [868, 3, 1, "", "trait_axis"], [868, 4, 1, "", "ungroup"], [868, 4, 1, "", "ungroup_taxa"]], "pybrops.model.vmat.DenseThreeWayDHAdditiveGenicVarianceMatrix": [[870, 1, 1, "", "DenseThreeWayDHAdditiveGenicVarianceMatrix"]], "pybrops.model.vmat.DenseThreeWayDHAdditiveGenicVarianceMatrix.DenseThreeWayDHAdditiveGenicVarianceMatrix": [[870, 4, 1, "", "__add__"], [870, 4, 1, "", "__mul__"], [870, 4, 1, "", "adjoin"], [870, 4, 1, "", "adjoin_taxa"], [870, 4, 1, "", "adjoin_trait"], [870, 4, 1, "", "append"], [870, 4, 1, "", "append_taxa"], [870, 4, 1, "", "append_trait"], [870, 4, 1, "", "concat"], [870, 4, 1, "", "concat_taxa"], [870, 4, 1, "", "concat_trait"], [870, 4, 1, "", "copy"], [870, 4, 1, "", "deepcopy"], [870, 4, 1, "", "delete"], [870, 4, 1, "", "delete_taxa"], [870, 4, 1, "", "delete_trait"], [870, 3, 1, "", "epgc"], [870, 3, 1, "", "female_axis"], [870, 4, 1, "", "from_algmod"], [870, 4, 1, "", "from_csv"], [870, 4, 1, "", "from_gmod"], [870, 4, 1, "", "from_hdf5"], [870, 4, 1, "", "from_pandas"], [870, 4, 1, "", "group"], [870, 4, 1, "", "group_taxa"], [870, 4, 1, "", "incorp"], [870, 4, 1, "", "incorp_taxa"], [870, 4, 1, "", "incorp_trait"], [870, 4, 1, "", "insert"], [870, 4, 1, "", "insert_taxa"], [870, 4, 1, "", "insert_trait"], [870, 4, 1, "", "is_grouped"], [870, 4, 1, "", "is_grouped_taxa"], [870, 4, 1, "", "is_square"], [870, 4, 1, "", "is_square_taxa"], [870, 4, 1, "", "lexsort"], [870, 4, 1, "", "lexsort_taxa"], [870, 4, 1, "", "lexsort_trait"], [870, 3, 1, "", "male_axis"], [870, 3, 1, "", "mat"], [870, 3, 1, "", "mat_ndim"], [870, 3, 1, "", "mat_shape"], [870, 3, 1, "", "nfemale"], [870, 3, 1, "", "nmale"], [870, 3, 1, "", "nrecurrent"], [870, 3, 1, "", "nsquare"], [870, 3, 1, "", "nsquare_taxa"], [870, 3, 1, "", "ntaxa"], [870, 3, 1, "", "ntrait"], [870, 3, 1, "", "recurrent_axis"], [870, 4, 1, "", "remove"], [870, 4, 1, "", "remove_taxa"], [870, 4, 1, "", "remove_trait"], [870, 4, 1, "", "reorder"], [870, 4, 1, "", "reorder_taxa"], [870, 4, 1, "", "reorder_trait"], [870, 4, 1, "", "select"], [870, 4, 1, "", "select_taxa"], [870, 4, 1, "", "select_trait"], [870, 4, 1, "", "sort"], [870, 4, 1, "", "sort_taxa"], [870, 4, 1, "", "sort_trait"], [870, 3, 1, "", "square_axes"], [870, 3, 1, "", "square_axes_len"], [870, 3, 1, "", "square_taxa_axes"], [870, 3, 1, "", "square_taxa_axes_len"], [870, 3, 1, "", "taxa"], [870, 3, 1, "", "taxa_axis"], [870, 3, 1, "", "taxa_grp"], [870, 3, 1, "", "taxa_grp_len"], [870, 3, 1, "", "taxa_grp_name"], [870, 3, 1, "", "taxa_grp_spix"], [870, 3, 1, "", "taxa_grp_stix"], [870, 4, 1, "", "to_csv"], [870, 4, 1, "", "to_hdf5"], [870, 4, 1, "", "to_pandas"], [870, 3, 1, "", "trait"], [870, 3, 1, "", "trait_axis"], [870, 4, 1, "", "ungroup"], [870, 4, 1, "", "ungroup_taxa"]], "pybrops.model.vmat.DenseTwoWayDHAdditiveGeneticVarianceMatrix": [[872, 1, 1, "", "DenseTwoWayDHAdditiveGeneticVarianceMatrix"]], "pybrops.model.vmat.DenseTwoWayDHAdditiveGeneticVarianceMatrix.DenseTwoWayDHAdditiveGeneticVarianceMatrix": [[872, 4, 1, "", "__add__"], [872, 4, 1, "", "__mul__"], [872, 4, 1, "", "adjoin"], [872, 4, 1, "", "adjoin_taxa"], [872, 4, 1, "", "adjoin_trait"], [872, 4, 1, "", "append"], [872, 4, 1, "", "append_taxa"], [872, 4, 1, "", "append_trait"], [872, 4, 1, "", "concat"], [872, 4, 1, "", "concat_taxa"], [872, 4, 1, "", "concat_trait"], [872, 4, 1, "", "copy"], [872, 4, 1, "", "deepcopy"], [872, 4, 1, "", "delete"], [872, 4, 1, "", "delete_taxa"], [872, 4, 1, "", "delete_trait"], [872, 3, 1, "", "epgc"], [872, 3, 1, "", "female_axis"], [872, 4, 1, "", "from_algmod"], [872, 4, 1, "", "from_csv"], [872, 4, 1, "", "from_gmod"], [872, 4, 1, "", "from_hdf5"], [872, 4, 1, "", "from_pandas"], [872, 4, 1, "", "group"], [872, 4, 1, "", "group_taxa"], [872, 4, 1, "", "incorp"], [872, 4, 1, "", "incorp_taxa"], [872, 4, 1, "", "incorp_trait"], [872, 4, 1, "", "insert"], [872, 4, 1, "", "insert_taxa"], [872, 4, 1, "", "insert_trait"], [872, 4, 1, "", "is_grouped"], [872, 4, 1, "", "is_grouped_taxa"], [872, 4, 1, "", "is_square"], [872, 4, 1, "", "is_square_taxa"], [872, 4, 1, "", "lexsort"], [872, 4, 1, "", "lexsort_taxa"], [872, 4, 1, "", "lexsort_trait"], [872, 3, 1, "", "male_axis"], [872, 3, 1, "", "mat"], [872, 3, 1, "", "mat_ndim"], [872, 3, 1, "", "mat_shape"], [872, 3, 1, "", "nfemale"], [872, 3, 1, "", "nmale"], [872, 3, 1, "", "nsquare"], [872, 3, 1, "", "nsquare_taxa"], [872, 3, 1, "", "ntaxa"], [872, 3, 1, "", "ntrait"], [872, 4, 1, "", "remove"], [872, 4, 1, "", "remove_taxa"], [872, 4, 1, "", "remove_trait"], [872, 4, 1, "", "reorder"], [872, 4, 1, "", "reorder_taxa"], [872, 4, 1, "", "reorder_trait"], [872, 4, 1, "", "select"], [872, 4, 1, "", "select_taxa"], [872, 4, 1, "", "select_trait"], [872, 4, 1, "", "sort"], [872, 4, 1, "", "sort_taxa"], [872, 4, 1, "", "sort_trait"], [872, 3, 1, "", "square_axes"], [872, 3, 1, "", "square_axes_len"], [872, 3, 1, "", "square_taxa_axes"], [872, 3, 1, "", "square_taxa_axes_len"], [872, 3, 1, "", "taxa"], [872, 3, 1, "", "taxa_axis"], [872, 3, 1, "", "taxa_grp"], [872, 3, 1, "", "taxa_grp_len"], [872, 3, 1, "", "taxa_grp_name"], [872, 3, 1, "", "taxa_grp_spix"], [872, 3, 1, "", "taxa_grp_stix"], [872, 4, 1, "", "to_csv"], [872, 4, 1, "", "to_hdf5"], [872, 4, 1, "", "to_pandas"], [872, 3, 1, "", "trait"], [872, 3, 1, "", "trait_axis"], [872, 4, 1, "", "ungroup"], [872, 4, 1, "", "ungroup_taxa"]], "pybrops.model.vmat.DenseTwoWayDHAdditiveGenicVarianceMatrix": [[874, 1, 1, "", "DenseTwoWayDHAdditiveGenicVarianceMatrix"]], "pybrops.model.vmat.DenseTwoWayDHAdditiveGenicVarianceMatrix.DenseTwoWayDHAdditiveGenicVarianceMatrix": [[874, 4, 1, "", "__add__"], [874, 4, 1, "", "__mul__"], [874, 4, 1, "", "adjoin"], [874, 4, 1, "", "adjoin_taxa"], [874, 4, 1, "", "adjoin_trait"], [874, 4, 1, "", "append"], [874, 4, 1, "", "append_taxa"], [874, 4, 1, "", "append_trait"], [874, 4, 1, "", "concat"], [874, 4, 1, "", "concat_taxa"], [874, 4, 1, "", "concat_trait"], [874, 4, 1, "", "copy"], [874, 4, 1, "", "deepcopy"], [874, 4, 1, "", "delete"], [874, 4, 1, "", "delete_taxa"], [874, 4, 1, "", "delete_trait"], [874, 3, 1, "", "epgc"], [874, 3, 1, "", "female_axis"], [874, 4, 1, "", "from_algmod"], [874, 4, 1, "", "from_csv"], [874, 4, 1, "", "from_gmod"], [874, 4, 1, "", "from_hdf5"], [874, 4, 1, "", "from_pandas"], [874, 4, 1, "", "group"], [874, 4, 1, "", "group_taxa"], [874, 4, 1, "", "incorp"], [874, 4, 1, "", "incorp_taxa"], [874, 4, 1, "", "incorp_trait"], [874, 4, 1, "", "insert"], [874, 4, 1, "", "insert_taxa"], [874, 4, 1, "", "insert_trait"], [874, 4, 1, "", "is_grouped"], [874, 4, 1, "", "is_grouped_taxa"], [874, 4, 1, "", "is_square"], [874, 4, 1, "", "is_square_taxa"], [874, 4, 1, "", "lexsort"], [874, 4, 1, "", "lexsort_taxa"], [874, 4, 1, "", "lexsort_trait"], [874, 3, 1, "", "male_axis"], [874, 3, 1, "", "mat"], [874, 3, 1, "", "mat_ndim"], [874, 3, 1, "", "mat_shape"], [874, 3, 1, "", "nfemale"], [874, 3, 1, "", "nmale"], [874, 3, 1, "", "nsquare"], [874, 3, 1, "", "nsquare_taxa"], [874, 3, 1, "", "ntaxa"], [874, 3, 1, "", "ntrait"], [874, 4, 1, "", "remove"], [874, 4, 1, "", "remove_taxa"], [874, 4, 1, "", "remove_trait"], [874, 4, 1, "", "reorder"], [874, 4, 1, "", "reorder_taxa"], [874, 4, 1, "", "reorder_trait"], [874, 4, 1, "", "select"], [874, 4, 1, "", "select_taxa"], [874, 4, 1, "", "select_trait"], [874, 4, 1, "", "sort"], [874, 4, 1, "", "sort_taxa"], [874, 4, 1, "", "sort_trait"], [874, 3, 1, "", "square_axes"], [874, 3, 1, "", "square_axes_len"], [874, 3, 1, "", "square_taxa_axes"], [874, 3, 1, "", "square_taxa_axes_len"], [874, 3, 1, "", "taxa"], [874, 3, 1, "", "taxa_axis"], [874, 3, 1, "", "taxa_grp"], [874, 3, 1, "", "taxa_grp_len"], [874, 3, 1, "", "taxa_grp_name"], [874, 3, 1, "", "taxa_grp_spix"], [874, 3, 1, "", "taxa_grp_stix"], [874, 4, 1, "", "to_csv"], [874, 4, 1, "", "to_hdf5"], [874, 4, 1, "", "to_pandas"], [874, 3, 1, "", "trait"], [874, 3, 1, "", "trait_axis"], [874, 4, 1, "", "ungroup"], [874, 4, 1, "", "ungroup_taxa"]], "pybrops.model.vmat.GeneticVarianceMatrix": [[876, 1, 1, "", "GeneticVarianceMatrix"], [877, 2, 1, "", "check_is_GeneticVarianceMatrix"]], "pybrops.model.vmat.GeneticVarianceMatrix.GeneticVarianceMatrix": [[876, 4, 1, "", "__add__"], [876, 4, 1, "", "__mul__"], [876, 4, 1, "", "adjoin"], [876, 4, 1, "", "adjoin_taxa"], [876, 4, 1, "", "adjoin_trait"], [876, 4, 1, "", "append"], [876, 4, 1, "", "append_taxa"], [876, 4, 1, "", "append_trait"], [876, 4, 1, "", "concat"], [876, 4, 1, "", "concat_taxa"], [876, 4, 1, "", "concat_trait"], [876, 4, 1, "", "copy"], [876, 4, 1, "", "deepcopy"], [876, 4, 1, "", "delete"], [876, 4, 1, "", "delete_taxa"], [876, 4, 1, "", "delete_trait"], [876, 3, 1, "", "epgc"], [876, 4, 1, "", "from_csv"], [876, 4, 1, "", "from_gmod"], [876, 4, 1, "", "from_hdf5"], [876, 4, 1, "", "from_pandas"], [876, 4, 1, "", "group"], [876, 4, 1, "", "group_taxa"], [876, 4, 1, "", "incorp"], [876, 4, 1, "", "incorp_taxa"], [876, 4, 1, "", "incorp_trait"], [876, 4, 1, "", "insert"], [876, 4, 1, "", "insert_taxa"], [876, 4, 1, "", "insert_trait"], [876, 4, 1, "", "is_grouped"], [876, 4, 1, "", "is_grouped_taxa"], [876, 4, 1, "", "is_square"], [876, 4, 1, "", "is_square_taxa"], [876, 4, 1, "", "lexsort"], [876, 4, 1, "", "lexsort_taxa"], [876, 4, 1, "", "lexsort_trait"], [876, 3, 1, "", "mat"], [876, 3, 1, "", "mat_ndim"], [876, 3, 1, "", "mat_shape"], [876, 3, 1, "", "nsquare"], [876, 3, 1, "", "nsquare_taxa"], [876, 3, 1, "", "ntaxa"], [876, 3, 1, "", "ntrait"], [876, 4, 1, "", "remove"], [876, 4, 1, "", "remove_taxa"], [876, 4, 1, "", "remove_trait"], [876, 4, 1, "", "reorder"], [876, 4, 1, "", "reorder_taxa"], [876, 4, 1, "", "reorder_trait"], [876, 4, 1, "", "select"], [876, 4, 1, "", "select_taxa"], [876, 4, 1, "", "select_trait"], [876, 4, 1, "", "sort"], [876, 4, 1, "", "sort_taxa"], [876, 4, 1, "", "sort_trait"], [876, 3, 1, "", "square_axes"], [876, 3, 1, "", "square_axes_len"], [876, 3, 1, "", "square_taxa_axes"], [876, 3, 1, "", "square_taxa_axes_len"], [876, 3, 1, "", "taxa"], [876, 3, 1, "", "taxa_axis"], [876, 3, 1, "", "taxa_grp"], [876, 3, 1, "", "taxa_grp_len"], [876, 3, 1, "", "taxa_grp_name"], [876, 3, 1, "", "taxa_grp_spix"], [876, 3, 1, "", "taxa_grp_stix"], [876, 4, 1, "", "to_csv"], [876, 4, 1, "", "to_hdf5"], [876, 4, 1, "", "to_pandas"], [876, 3, 1, "", "trait"], [876, 3, 1, "", "trait_axis"], [876, 4, 1, "", "ungroup"], [876, 4, 1, "", "ungroup_taxa"]], "pybrops.model.vmat.GenicVarianceMatrix": [[879, 1, 1, "", "GenicVarianceMatrix"], [880, 2, 1, "", "check_is_GenicVarianceMatrix"]], "pybrops.model.vmat.GenicVarianceMatrix.GenicVarianceMatrix": [[879, 4, 1, "", "__add__"], [879, 4, 1, "", "__mul__"], [879, 4, 1, "", "adjoin"], [879, 4, 1, "", "adjoin_taxa"], [879, 4, 1, "", "adjoin_trait"], [879, 4, 1, "", "append"], [879, 4, 1, "", "append_taxa"], [879, 4, 1, "", "append_trait"], [879, 4, 1, "", "concat"], [879, 4, 1, "", "concat_taxa"], [879, 4, 1, "", "concat_trait"], [879, 4, 1, "", "copy"], [879, 4, 1, "", "deepcopy"], [879, 4, 1, "", "delete"], [879, 4, 1, "", "delete_taxa"], [879, 4, 1, "", "delete_trait"], [879, 3, 1, "", "epgc"], [879, 4, 1, "", "from_csv"], [879, 4, 1, "", "from_gmod"], [879, 4, 1, "", "from_hdf5"], [879, 4, 1, "", "from_pandas"], [879, 4, 1, "", "group"], [879, 4, 1, "", "group_taxa"], [879, 4, 1, "", "incorp"], [879, 4, 1, "", "incorp_taxa"], [879, 4, 1, "", "incorp_trait"], [879, 4, 1, "", "insert"], [879, 4, 1, "", "insert_taxa"], [879, 4, 1, "", "insert_trait"], [879, 4, 1, "", "is_grouped"], [879, 4, 1, "", "is_grouped_taxa"], [879, 4, 1, "", "is_square"], [879, 4, 1, "", "is_square_taxa"], [879, 4, 1, "", "lexsort"], [879, 4, 1, "", "lexsort_taxa"], [879, 4, 1, "", "lexsort_trait"], [879, 3, 1, "", "mat"], [879, 3, 1, "", "mat_ndim"], [879, 3, 1, "", "mat_shape"], [879, 3, 1, "", "nsquare"], [879, 3, 1, "", "nsquare_taxa"], [879, 3, 1, "", "ntaxa"], [879, 3, 1, "", "ntrait"], [879, 4, 1, "", "remove"], [879, 4, 1, "", "remove_taxa"], [879, 4, 1, "", "remove_trait"], [879, 4, 1, "", "reorder"], [879, 4, 1, "", "reorder_taxa"], [879, 4, 1, "", "reorder_trait"], [879, 4, 1, "", "select"], [879, 4, 1, "", "select_taxa"], [879, 4, 1, "", "select_trait"], [879, 4, 1, "", "sort"], [879, 4, 1, "", "sort_taxa"], [879, 4, 1, "", "sort_trait"], [879, 3, 1, "", "square_axes"], [879, 3, 1, "", "square_axes_len"], [879, 3, 1, "", "square_taxa_axes"], [879, 3, 1, "", "square_taxa_axes_len"], [879, 3, 1, "", "taxa"], [879, 3, 1, "", "taxa_axis"], [879, 3, 1, "", "taxa_grp"], [879, 3, 1, "", "taxa_grp_len"], [879, 3, 1, "", "taxa_grp_name"], [879, 3, 1, "", "taxa_grp_spix"], [879, 3, 1, "", "taxa_grp_stix"], [879, 4, 1, "", "to_csv"], [879, 4, 1, "", "to_hdf5"], [879, 4, 1, "", "to_pandas"], [879, 3, 1, "", "trait"], [879, 3, 1, "", "trait_axis"], [879, 4, 1, "", "ungroup"], [879, 4, 1, "", "ungroup_taxa"]], "pybrops.model.vmat.fcty": [[882, 0, 0, "-", "AdditiveGeneticVarianceMatrixFactory"], [885, 0, 0, "-", "AdditiveGenicVarianceMatrixFactory"], [888, 0, 0, "-", "DenseDihybridDHAdditiveGeneticVarianceMatrixFactory"], [891, 0, 0, "-", "DenseFourWayDHAdditiveGeneticVarianceMatrixFactory"], [894, 0, 0, "-", "DenseThreeWayDHAdditiveGeneticVarianceMatrixFactory"], [897, 0, 0, "-", "DenseTwoWayDHAdditiveGeneticVarianceMatrixFactory"], [900, 0, 0, "-", "DenseTwoWayDHAdditiveGenicVarianceMatrixFactory"], [903, 0, 0, "-", "GeneticVarianceMatrixFactory"], [906, 0, 0, "-", "GenicVarianceMatrixFactory"]], "pybrops.model.vmat.fcty.AdditiveGeneticVarianceMatrixFactory": [[883, 1, 1, "", "AdditiveGeneticVarianceMatrixFactory"], [884, 2, 1, "", "check_is_AdditiveGeneticVarianceMatrixFactory"]], "pybrops.model.vmat.fcty.AdditiveGeneticVarianceMatrixFactory.AdditiveGeneticVarianceMatrixFactory": [[883, 4, 1, "", "from_algmod"], [883, 4, 1, "", "from_gmod"]], "pybrops.model.vmat.fcty.AdditiveGenicVarianceMatrixFactory": [[886, 1, 1, "", "AdditiveGenicVarianceMatrixFactory"], [887, 2, 1, "", "check_is_AdditiveGenicVarianceMatrixFactory"]], "pybrops.model.vmat.fcty.AdditiveGenicVarianceMatrixFactory.AdditiveGenicVarianceMatrixFactory": [[886, 4, 1, "", "from_algmod"], [886, 4, 1, "", "from_gmod"]], "pybrops.model.vmat.fcty.DenseDihybridDHAdditiveGeneticVarianceMatrixFactory": [[889, 1, 1, "", "DenseDihybridDHAdditiveGeneticVarianceMatrixFactory"], [890, 2, 1, "", "check_is_DenseDihybridDHAdditiveGeneticVarianceMatrixFactory"]], "pybrops.model.vmat.fcty.DenseDihybridDHAdditiveGeneticVarianceMatrixFactory.DenseDihybridDHAdditiveGeneticVarianceMatrixFactory": [[889, 4, 1, "", "from_algmod"], [889, 4, 1, "", "from_gmod"]], "pybrops.model.vmat.fcty.DenseFourWayDHAdditiveGeneticVarianceMatrixFactory": [[892, 1, 1, "", "DenseFourWayDHAdditiveGeneticVarianceMatrixFactory"], [893, 2, 1, "", "check_is_DenseFourWayDHAdditiveGeneticVarianceMatrixFactory"]], "pybrops.model.vmat.fcty.DenseFourWayDHAdditiveGeneticVarianceMatrixFactory.DenseFourWayDHAdditiveGeneticVarianceMatrixFactory": [[892, 4, 1, "", "from_algmod"], [892, 4, 1, "", "from_gmod"]], "pybrops.model.vmat.fcty.DenseThreeWayDHAdditiveGeneticVarianceMatrixFactory": [[895, 1, 1, "", "DenseThreeWayDHAdditiveGeneticVarianceMatrixFactory"], [896, 2, 1, "", "check_is_DenseThreeWayDHAdditiveGeneticVarianceMatrixFactory"]], "pybrops.model.vmat.fcty.DenseThreeWayDHAdditiveGeneticVarianceMatrixFactory.DenseThreeWayDHAdditiveGeneticVarianceMatrixFactory": [[895, 4, 1, "", "from_algmod"], [895, 4, 1, "", "from_gmod"]], "pybrops.model.vmat.fcty.DenseTwoWayDHAdditiveGeneticVarianceMatrixFactory": [[898, 1, 1, "", "DenseTwoWayDHAdditiveGeneticVarianceMatrixFactory"], [899, 2, 1, "", "check_is_DenseTwoWayDHAdditiveGeneticVarianceMatrixFactory"]], "pybrops.model.vmat.fcty.DenseTwoWayDHAdditiveGeneticVarianceMatrixFactory.DenseTwoWayDHAdditiveGeneticVarianceMatrixFactory": [[898, 4, 1, "", "from_algmod"], [898, 4, 1, "", "from_gmod"]], "pybrops.model.vmat.fcty.DenseTwoWayDHAdditiveGenicVarianceMatrixFactory": [[901, 1, 1, "", "DenseTwoWayDHAdditiveGenicVarianceMatrixFactory"], [902, 2, 1, "", "check_is_DenseTwoWayDHAdditiveGenicVarianceMatrixFactory"]], "pybrops.model.vmat.fcty.DenseTwoWayDHAdditiveGenicVarianceMatrixFactory.DenseTwoWayDHAdditiveGenicVarianceMatrixFactory": [[901, 4, 1, "", "from_algmod"], [901, 4, 1, "", "from_gmod"]], "pybrops.model.vmat.fcty.GeneticVarianceMatrixFactory": [[904, 1, 1, "", "GeneticVarianceMatrixFactory"], [905, 2, 1, "", "check_is_GeneticVarianceMatrixFactory"]], "pybrops.model.vmat.fcty.GeneticVarianceMatrixFactory.GeneticVarianceMatrixFactory": [[904, 4, 1, "", "from_gmod"]], "pybrops.model.vmat.fcty.GenicVarianceMatrixFactory": [[907, 1, 1, "", "GenicVarianceMatrixFactory"], [908, 2, 1, "", "check_is_GenicVarianceMatrixFactory"]], "pybrops.model.vmat.fcty.GenicVarianceMatrixFactory.GenicVarianceMatrixFactory": [[907, 4, 1, "", "from_gmod"]], "pybrops.model.vmat.util": [[910, 2, 1, "", "cov_D1s"], [911, 2, 1, "", "cov_D1st"], [912, 2, 1, "", "cov_D2s"], [913, 2, 1, "", "cov_D2st"], [914, 2, 1, "", "rprob_filial"]], "pybrops.opt": [[916, 0, 0, "-", "algo"], [985, 0, 0, "-", "prob"], [1013, 0, 0, "-", "soln"]], "pybrops.opt.algo": [[917, 0, 0, "-", "BinaryGeneticAlgorithm"], [919, 0, 0, "-", "BinaryOptimizationAlgorithm"], [922, 0, 0, "-", "IntegerGeneticAlgorithm"], [924, 0, 0, "-", "IntegerOptimizationAlgorithm"], [927, 0, 0, "-", "NSGA2BinaryGeneticAlgorithm"], [929, 0, 0, "-", "NSGA2IntegerGeneticAlgorithm"], [931, 0, 0, "-", "NSGA2MemeticSubsetGeneticAlgorithm"], [936, 0, 0, "-", "NSGA2RealGeneticAlgorithm"], [938, 0, 0, "-", "NSGA2SubsetGeneticAlgorithm"], [940, 0, 0, "-", "NSGA3SubsetGeneticAlgorithm"], [942, 0, 0, "-", "OptimizationAlgorithm"], [945, 0, 0, "-", "RealGeneticAlgorithm"], [947, 0, 0, "-", "RealOptimizationAlgorithm"], [950, 0, 0, "-", "SortingSteepestDescentSubsetHillClimber"], [952, 0, 0, "-", "SortingSubsetOptimizationAlgorithm"], [954, 0, 0, "-", "SteepestDescentSubsetHillClimber"], [956, 0, 0, "-", "SubsetGeneticAlgorithm"], [958, 0, 0, "-", "SubsetOptimizationAlgorithm"], [961, 0, 0, "-", "UnconstrainedNSGA2SetGeneticAlgorithm"], [963, 0, 0, "-", "UnconstrainedOptimizationAlgorithm"], [966, 0, 0, "-", "UnconstrainedSetGeneticAlgorithm"], [968, 0, 0, "-", "UnconstrainedSteepestAscentSetHillClimber"], [970, 0, 0, "-", "pymoo_addon"]], "pybrops.opt.algo.BinaryGeneticAlgorithm": [[918, 1, 1, "", "BinaryGeneticAlgorithm"]], "pybrops.opt.algo.BinaryGeneticAlgorithm.BinaryGeneticAlgorithm": [[918, 4, 1, "", "minimize"], [918, 3, 1, "", "ngen"], [918, 3, 1, "", "pop_size"], [918, 3, 1, "", "rng"]], "pybrops.opt.algo.BinaryOptimizationAlgorithm": [[920, 1, 1, "", "BinaryOptimizationAlgorithm"], [921, 2, 1, "", "check_is_BinaryOptimizationAlgorithm"]], "pybrops.opt.algo.BinaryOptimizationAlgorithm.BinaryOptimizationAlgorithm": [[920, 4, 1, "", "minimize"]], "pybrops.opt.algo.IntegerGeneticAlgorithm": [[923, 1, 1, "", "IntegerGeneticAlgorithm"]], "pybrops.opt.algo.IntegerGeneticAlgorithm.IntegerGeneticAlgorithm": [[923, 4, 1, "", "minimize"], [923, 3, 1, "", "ngen"], [923, 3, 1, "", "pop_size"], [923, 3, 1, "", "rng"]], "pybrops.opt.algo.IntegerOptimizationAlgorithm": [[925, 1, 1, "", "IntegerOptimizationAlgorithm"], [926, 2, 1, "", "check_is_IntegerOptimizationAlgorithm"]], "pybrops.opt.algo.IntegerOptimizationAlgorithm.IntegerOptimizationAlgorithm": [[925, 4, 1, "", "minimize"]], "pybrops.opt.algo.NSGA2BinaryGeneticAlgorithm": [[928, 1, 1, "", "NSGA2BinaryGeneticAlgorithm"]], "pybrops.opt.algo.NSGA2BinaryGeneticAlgorithm.NSGA2BinaryGeneticAlgorithm": [[928, 4, 1, "", "minimize"], [928, 3, 1, "", "ngen"], [928, 3, 1, "", "pop_size"], [928, 3, 1, "", "rng"]], "pybrops.opt.algo.NSGA2IntegerGeneticAlgorithm": [[930, 1, 1, "", "NSGA2IntegerGeneticAlgorithm"]], "pybrops.opt.algo.NSGA2IntegerGeneticAlgorithm.NSGA2IntegerGeneticAlgorithm": [[930, 4, 1, "", "minimize"], [930, 3, 1, "", "ngen"], [930, 3, 1, "", "pop_size"], [930, 3, 1, "", "rng"]], "pybrops.opt.algo.NSGA2MemeticSubsetGeneticAlgorithm": [[932, 1, 1, "", "NSGA2MutatorASubsetGeneticAlgorithm"], [933, 1, 1, "", "NSGA2MutatorBSubsetGeneticAlgorithm"], [934, 1, 1, "", "NSGA2SteepestDescentSubsetGeneticAlgorithm"], [935, 1, 1, "", "NSGA2StochasticDescentSubsetGeneticAlgorithm"]], "pybrops.opt.algo.NSGA2MemeticSubsetGeneticAlgorithm.NSGA2MutatorASubsetGeneticAlgorithm": [[932, 4, 1, "", "minimize"], [932, 3, 1, "", "ngen"], [932, 3, 1, "", "phc"], [932, 3, 1, "", "pop_size"], [932, 3, 1, "", "rng"]], "pybrops.opt.algo.NSGA2MemeticSubsetGeneticAlgorithm.NSGA2MutatorBSubsetGeneticAlgorithm": [[933, 4, 1, "", "minimize"], [933, 3, 1, "", "ngen"], [933, 3, 1, "", "phc"], [933, 3, 1, "", "pop_size"], [933, 3, 1, "", "rng"]], "pybrops.opt.algo.NSGA2MemeticSubsetGeneticAlgorithm.NSGA2SteepestDescentSubsetGeneticAlgorithm": [[934, 4, 1, "", "minimize"], [934, 3, 1, "", "ngen"], [934, 3, 1, "", "phc"], [934, 3, 1, "", "pop_size"], [934, 3, 1, "", "rng"]], "pybrops.opt.algo.NSGA2MemeticSubsetGeneticAlgorithm.NSGA2StochasticDescentSubsetGeneticAlgorithm": [[935, 4, 1, "", "minimize"], [935, 3, 1, "", "ngen"], [935, 3, 1, "", "phc"], [935, 3, 1, "", "pop_size"], [935, 3, 1, "", "rng"]], "pybrops.opt.algo.NSGA2RealGeneticAlgorithm": [[937, 1, 1, "", "NSGA2RealGeneticAlgorithm"]], "pybrops.opt.algo.NSGA2RealGeneticAlgorithm.NSGA2RealGeneticAlgorithm": [[937, 4, 1, "", "minimize"], [937, 3, 1, "", "ngen"], [937, 3, 1, "", "pop_size"], [937, 3, 1, "", "rng"]], "pybrops.opt.algo.NSGA2SubsetGeneticAlgorithm": [[939, 1, 1, "", "NSGA2SubsetGeneticAlgorithm"]], "pybrops.opt.algo.NSGA2SubsetGeneticAlgorithm.NSGA2SubsetGeneticAlgorithm": [[939, 4, 1, "", "minimize"], [939, 3, 1, "", "ngen"], [939, 3, 1, "", "pop_size"], [939, 3, 1, "", "rng"]], "pybrops.opt.algo.NSGA3SubsetGeneticAlgorithm": [[941, 1, 1, "", "NSGA3SubsetGeneticAlgorithm"]], "pybrops.opt.algo.NSGA3SubsetGeneticAlgorithm.NSGA3SubsetGeneticAlgorithm": [[941, 4, 1, "", "minimize"], [941, 3, 1, "", "ngen"], [941, 3, 1, "", "nrefpts"], [941, 3, 1, "", "pop_size"], [941, 3, 1, "", "rng"]], "pybrops.opt.algo.OptimizationAlgorithm": [[943, 1, 1, "", "OptimizationAlgorithm"], [944, 2, 1, "", "check_is_OptimizationAlgorithm"]], "pybrops.opt.algo.OptimizationAlgorithm.OptimizationAlgorithm": [[943, 4, 1, "", "minimize"]], "pybrops.opt.algo.RealGeneticAlgorithm": [[946, 1, 1, "", "RealGeneticAlgorithm"]], "pybrops.opt.algo.RealGeneticAlgorithm.RealGeneticAlgorithm": [[946, 4, 1, "", "minimize"], [946, 3, 1, "", "ngen"], [946, 3, 1, "", "pop_size"], [946, 3, 1, "", "rng"]], "pybrops.opt.algo.RealOptimizationAlgorithm": [[948, 1, 1, "", "RealOptimizationAlgorithm"], [949, 2, 1, "", "check_is_RealOptimizationAlgorithm"]], "pybrops.opt.algo.RealOptimizationAlgorithm.RealOptimizationAlgorithm": [[948, 4, 1, "", "minimize"]], "pybrops.opt.algo.SortingSteepestDescentSubsetHillClimber": [[951, 1, 1, "", "SortingSteepestDescentSubsetHillClimber"]], "pybrops.opt.algo.SortingSteepestDescentSubsetHillClimber.SortingSteepestDescentSubsetHillClimber": [[951, 4, 1, "", "minimize"]], "pybrops.opt.algo.SortingSubsetOptimizationAlgorithm": [[953, 1, 1, "", "SortingSubsetOptimizationAlgorithm"]], "pybrops.opt.algo.SortingSubsetOptimizationAlgorithm.SortingSubsetOptimizationAlgorithm": [[953, 4, 1, "", "minimize"]], "pybrops.opt.algo.SteepestDescentSubsetHillClimber": [[955, 1, 1, "", "SteepestDescentSubsetHillClimber"]], "pybrops.opt.algo.SteepestDescentSubsetHillClimber.SteepestDescentSubsetHillClimber": [[955, 4, 1, "", "minimize"], [955, 3, 1, "", "rng"]], "pybrops.opt.algo.SubsetGeneticAlgorithm": [[957, 1, 1, "", "SubsetGeneticAlgorithm"]], "pybrops.opt.algo.SubsetGeneticAlgorithm.SubsetGeneticAlgorithm": [[957, 4, 1, "", "minimize"], [957, 3, 1, "", "ngen"], [957, 3, 1, "", "pop_size"], [957, 3, 1, "", "rng"]], "pybrops.opt.algo.SubsetOptimizationAlgorithm": [[959, 1, 1, "", "SubsetOptimizationAlgorithm"], [960, 2, 1, "", "check_is_SubsetOptimizationAlgorithm"]], "pybrops.opt.algo.SubsetOptimizationAlgorithm.SubsetOptimizationAlgorithm": [[959, 4, 1, "", "minimize"]], "pybrops.opt.algo.UnconstrainedNSGA2SetGeneticAlgorithm": [[962, 1, 1, "", "UnconstrainedNSGA2SetGeneticAlgorithm"]], "pybrops.opt.algo.UnconstrainedNSGA2SetGeneticAlgorithm.UnconstrainedNSGA2SetGeneticAlgorithm": [[962, 3, 1, "", "M"], [962, 4, 1, "", "cxSet"], [962, 3, 1, "", "lamb"], [962, 3, 1, "", "mu"], [962, 4, 1, "", "mutSet"], [962, 3, 1, "", "ngen"], [962, 4, 1, "", "optimize"], [962, 3, 1, "", "rng"]], "pybrops.opt.algo.UnconstrainedOptimizationAlgorithm": [[964, 1, 1, "", "UnconstrainedOptimizationAlgorithm"], [965, 2, 1, "", "check_is_OptimizationAlgorithm"]], "pybrops.opt.algo.UnconstrainedOptimizationAlgorithm.UnconstrainedOptimizationAlgorithm": [[964, 4, 1, "", "optimize"]], "pybrops.opt.algo.UnconstrainedSetGeneticAlgorithm": [[967, 1, 1, "", "UnconstrainedSetGeneticAlgorithm"]], "pybrops.opt.algo.UnconstrainedSetGeneticAlgorithm.UnconstrainedSetGeneticAlgorithm": [[967, 3, 1, "", "M"], [967, 4, 1, "", "cxSet"], [967, 3, 1, "", "lamb"], [967, 3, 1, "", "mu"], [967, 4, 1, "", "mutSet"], [967, 3, 1, "", "ngen"], [967, 4, 1, "", "optimize"], [967, 3, 1, "", "rng"]], "pybrops.opt.algo.UnconstrainedSteepestAscentSetHillClimber": [[969, 1, 1, "", "UnconstrainedSteepestAscentSetHillClimber"]], "pybrops.opt.algo.UnconstrainedSteepestAscentSetHillClimber.UnconstrainedSteepestAscentSetHillClimber": [[969, 4, 1, "", "optimize"], [969, 3, 1, "", "rng"]], "pybrops.opt.algo.pymoo_addon": [[971, 1, 1, "", "IntegerPolynomialMutation"], [972, 1, 1, "", "IntegerSimulatedBinaryCrossover"], [973, 1, 1, "", "MultiObjectiveSteepestDescentHillClimberMutation"], [974, 1, 1, "", "MultiObjectiveStochasticDescentHillClimberMutation"], [975, 1, 1, "", "MultiObjectiveStochasticHillClimberMutation"], [976, 1, 1, "", "MutatorA"], [977, 1, 1, "", "MutatorB"], [978, 1, 1, "", "MutatorF"], [979, 1, 1, "", "ReducedExchangeCrossover"], [980, 1, 1, "", "ReducedExchangeMutation"], [981, 1, 1, "", "StochasticHillClimberMutation"], [982, 1, 1, "", "SubsetRandomSampling"], [983, 2, 1, "", "dominates"], [984, 2, 1, "", "tiled_choice"]], "pybrops.opt.algo.pymoo_addon.IntegerPolynomialMutation": [[971, 4, 1, "", "__call__"]], "pybrops.opt.algo.pymoo_addon.IntegerSimulatedBinaryCrossover": [[972, 4, 1, "", "__call__"]], "pybrops.opt.algo.pymoo_addon.MultiObjectiveSteepestDescentHillClimberMutation": [[973, 4, 1, "", "__call__"], [973, 4, 1, "", "do"], [973, 4, 1, "", "hillclimb"], [973, 3, 1, "", "setspace"]], "pybrops.opt.algo.pymoo_addon.MultiObjectiveStochasticDescentHillClimberMutation": [[974, 4, 1, "", "__call__"], [974, 4, 1, "", "do"], [974, 4, 1, "", "hillclimb"], [974, 3, 1, "", "setspace"]], "pybrops.opt.algo.pymoo_addon.MultiObjectiveStochasticHillClimberMutation": [[975, 4, 1, "", "__call__"], [975, 4, 1, "", "hillclimb"], [975, 3, 1, "", "setspace"]], "pybrops.opt.algo.pymoo_addon.MutatorA": [[976, 4, 1, "", "__call__"], [976, 4, 1, "", "hillclimb"], [976, 4, 1, "", "reduced_exchange"], [976, 3, 1, "", "setspace"]], "pybrops.opt.algo.pymoo_addon.MutatorB": [[977, 4, 1, "", "__call__"], [977, 4, 1, "", "hillclimb"], [977, 4, 1, "", "reduced_exchange"], [977, 3, 1, "", "setspace"]], "pybrops.opt.algo.pymoo_addon.MutatorF": [[978, 4, 1, "", "__call__"], [978, 4, 1, "", "hillclimb"], [978, 4, 1, "", "reduced_exchange"], [978, 3, 1, "", "setspace"]], "pybrops.opt.algo.pymoo_addon.ReducedExchangeCrossover": [[979, 4, 1, "", "__call__"]], "pybrops.opt.algo.pymoo_addon.ReducedExchangeMutation": [[980, 4, 1, "", "__call__"], [980, 3, 1, "", "setspace"]], "pybrops.opt.algo.pymoo_addon.StochasticHillClimberMutation": [[981, 4, 1, "", "__call__"], [981, 4, 1, "", "hillclimb"], [981, 4, 1, "", "reduced_exchange"], [981, 3, 1, "", "setspace"]], "pybrops.opt.algo.pymoo_addon.SubsetRandomSampling": [[982, 4, 1, "", "__call__"], [982, 4, 1, "", "do"], [982, 3, 1, "", "replace"], [982, 3, 1, "", "setspace"]], "pybrops.opt.prob": [[986, 0, 0, "-", "BinaryProblem"], [991, 0, 0, "-", "FunctionWeight"], [995, 0, 0, "-", "IntegerProblem"], [1000, 0, 0, "-", "Problem"], [1003, 0, 0, "-", "RealProblem"], [1008, 0, 0, "-", "SubsetProblem"]], "pybrops.opt.prob.BinaryProblem": [[987, 1, 1, "", "BinaryProblem"], [988, 2, 1, "", "check_BinaryProblem_is_multi_objective"], [989, 2, 1, "", "check_BinaryProblem_is_single_objective"], [990, 2, 1, "", "check_is_BinaryProblem"]], "pybrops.opt.prob.BinaryProblem.BinaryProblem": [[987, 3, 1, "", "callback"], [987, 3, 1, "", "data"], [987, 3, 1, "", "decn_space"], [987, 3, 1, "", "decn_space_lower"], [987, 3, 1, "", "decn_space_upper"], [987, 3, 1, "", "elementwise"], [987, 3, 1, "", "elementwise_func"], [987, 3, 1, "", "elementwise_runner"], [987, 3, 1, "", "eqcv_wt"], [987, 4, 1, "", "evalfn"], [987, 3, 1, "", "exclude_from_serialization"], [987, 3, 1, "", "ineqcv_wt"], [987, 3, 1, "", "n_eq_constr"], [987, 3, 1, "", "n_ieq_constr"], [987, 3, 1, "", "n_obj"], [987, 3, 1, "", "n_var"], [987, 3, 1, "", "ndecn"], [987, 3, 1, "", "neqcv"], [987, 3, 1, "", "nineqcv"], [987, 3, 1, "", "nobj"], [987, 3, 1, "", "obj_wt"], [987, 3, 1, "", "replace_nan_values_by"], [987, 3, 1, "", "strict"], [987, 3, 1, "", "vars"], [987, 3, 1, "", "vtype"], [987, 3, 1, "", "xl"], [987, 3, 1, "", "xu"]], "pybrops.opt.prob.FunctionWeight": [[992, 1, 1, "", "FunctionWeight"], [993, 1, 1, "", "MaximizingFunctionWeight"], [994, 1, 1, "", "MinimizingFunctionWeight"]], "pybrops.opt.prob.FunctionWeight.FunctionWeight": [[992, 3, 1, "", "optimization_type"], [992, 3, 1, "", "wt"]], "pybrops.opt.prob.FunctionWeight.MaximizingFunctionWeight": [[993, 3, 1, "", "optimization_type"], [993, 3, 1, "", "wt"]], "pybrops.opt.prob.FunctionWeight.MinimizingFunctionWeight": [[994, 3, 1, "", "optimization_type"], [994, 3, 1, "", "wt"]], "pybrops.opt.prob.IntegerProblem": [[996, 1, 1, "", "IntegerProblem"], [997, 2, 1, "", "check_IntegerProblem_is_multi_objective"], [998, 2, 1, "", "check_IntegerProblem_is_single_objective"], [999, 2, 1, "", "check_is_IntegerProblem"]], "pybrops.opt.prob.IntegerProblem.IntegerProblem": [[996, 3, 1, "", "callback"], [996, 3, 1, "", "data"], [996, 3, 1, "", "decn_space"], [996, 3, 1, "", "decn_space_lower"], [996, 3, 1, "", "decn_space_upper"], [996, 3, 1, "", "elementwise"], [996, 3, 1, "", "elementwise_func"], [996, 3, 1, "", "elementwise_runner"], [996, 3, 1, "", "eqcv_wt"], [996, 4, 1, "", "evalfn"], [996, 3, 1, "", "exclude_from_serialization"], [996, 3, 1, "", "ineqcv_wt"], [996, 3, 1, "", "n_eq_constr"], [996, 3, 1, "", "n_ieq_constr"], [996, 3, 1, "", "n_obj"], [996, 3, 1, "", "n_var"], [996, 3, 1, "", "ndecn"], [996, 3, 1, "", "neqcv"], [996, 3, 1, "", "nineqcv"], [996, 3, 1, "", "nobj"], [996, 3, 1, "", "obj_wt"], [996, 3, 1, "", "replace_nan_values_by"], [996, 3, 1, "", "strict"], [996, 3, 1, "", "vars"], [996, 3, 1, "", "vtype"], [996, 3, 1, "", "xl"], [996, 3, 1, "", "xu"]], "pybrops.opt.prob.Problem": [[1001, 1, 1, "", "Problem"], [1002, 2, 1, "", "check_is_Problem"]], "pybrops.opt.prob.Problem.Problem": [[1001, 3, 1, "", "callback"], [1001, 3, 1, "", "data"], [1001, 3, 1, "", "decn_space"], [1001, 3, 1, "", "decn_space_lower"], [1001, 3, 1, "", "decn_space_upper"], [1001, 3, 1, "", "elementwise"], [1001, 3, 1, "", "elementwise_func"], [1001, 3, 1, "", "elementwise_runner"], [1001, 3, 1, "", "eqcv_wt"], [1001, 4, 1, "", "evalfn"], [1001, 3, 1, "", "exclude_from_serialization"], [1001, 3, 1, "", "ineqcv_wt"], [1001, 3, 1, "", "n_eq_constr"], [1001, 3, 1, "", "n_ieq_constr"], [1001, 3, 1, "", "n_obj"], [1001, 3, 1, "", "n_var"], [1001, 3, 1, "", "ndecn"], [1001, 3, 1, "", "neqcv"], [1001, 3, 1, "", "nineqcv"], [1001, 3, 1, "", "nobj"], [1001, 3, 1, "", "obj_wt"], [1001, 3, 1, "", "replace_nan_values_by"], [1001, 3, 1, "", "strict"], [1001, 3, 1, "", "vars"], [1001, 3, 1, "", "vtype"], [1001, 3, 1, "", "xl"], [1001, 3, 1, "", "xu"]], "pybrops.opt.prob.RealProblem": [[1004, 1, 1, "", "RealProblem"], [1005, 2, 1, "", "check_RealProblem_is_multi_objective"], [1006, 2, 1, "", "check_RealProblem_is_single_objective"], [1007, 2, 1, "", "check_is_RealProblem"]], "pybrops.opt.prob.RealProblem.RealProblem": [[1004, 3, 1, "", "callback"], [1004, 3, 1, "", "data"], [1004, 3, 1, "", "decn_space"], [1004, 3, 1, "", "decn_space_lower"], [1004, 3, 1, "", "decn_space_upper"], [1004, 3, 1, "", "elementwise"], [1004, 3, 1, "", "elementwise_func"], [1004, 3, 1, "", "elementwise_runner"], [1004, 3, 1, "", "eqcv_wt"], [1004, 4, 1, "", "evalfn"], [1004, 3, 1, "", "exclude_from_serialization"], [1004, 3, 1, "", "ineqcv_wt"], [1004, 3, 1, "", "n_eq_constr"], [1004, 3, 1, "", "n_ieq_constr"], [1004, 3, 1, "", "n_obj"], [1004, 3, 1, "", "n_var"], [1004, 3, 1, "", "ndecn"], [1004, 3, 1, "", "neqcv"], [1004, 3, 1, "", "nineqcv"], [1004, 3, 1, "", "nobj"], [1004, 3, 1, "", "obj_wt"], [1004, 3, 1, "", "replace_nan_values_by"], [1004, 3, 1, "", "strict"], [1004, 3, 1, "", "vars"], [1004, 3, 1, "", "vtype"], [1004, 3, 1, "", "xl"], [1004, 3, 1, "", "xu"]], "pybrops.opt.prob.SubsetProblem": [[1009, 1, 1, "", "SubsetProblem"], [1010, 2, 1, "", "check_SubsetProblem_is_multi_objective"], [1011, 2, 1, "", "check_SubsetProblem_is_single_objective"], [1012, 2, 1, "", "check_is_SubsetProblem"]], "pybrops.opt.prob.SubsetProblem.SubsetProblem": [[1009, 3, 1, "", "callback"], [1009, 3, 1, "", "data"], [1009, 3, 1, "", "decn_space"], [1009, 3, 1, "", "decn_space_lower"], [1009, 3, 1, "", "decn_space_upper"], [1009, 3, 1, "", "elementwise"], [1009, 3, 1, "", "elementwise_func"], [1009, 3, 1, "", "elementwise_runner"], [1009, 3, 1, "", "eqcv_wt"], [1009, 4, 1, "", "evalfn"], [1009, 3, 1, "", "exclude_from_serialization"], [1009, 3, 1, "", "ineqcv_wt"], [1009, 3, 1, "", "n_eq_constr"], [1009, 3, 1, "", "n_ieq_constr"], [1009, 3, 1, "", "n_obj"], [1009, 3, 1, "", "n_var"], [1009, 3, 1, "", "ndecn"], [1009, 3, 1, "", "neqcv"], [1009, 3, 1, "", "nineqcv"], [1009, 3, 1, "", "nobj"], [1009, 3, 1, "", "obj_wt"], [1009, 3, 1, "", "replace_nan_values_by"], [1009, 3, 1, "", "strict"], [1009, 3, 1, "", "vars"], [1009, 3, 1, "", "vtype"], [1009, 3, 1, "", "xl"], [1009, 3, 1, "", "xu"]], "pybrops.opt.soln": [[1014, 0, 0, "-", "BinarySolution"], [1017, 0, 0, "-", "IntegerSolution"], [1020, 0, 0, "-", "RealSolution"], [1023, 0, 0, "-", "Solution"], [1026, 0, 0, "-", "SubsetSolution"]], "pybrops.opt.soln.BinarySolution": [[1015, 1, 1, "", "BinarySolution"], [1016, 2, 1, "", "check_is_BinarySolution"]], "pybrops.opt.soln.BinarySolution.BinarySolution": [[1015, 3, 1, "", "decn_space"], [1015, 3, 1, "", "decn_space_lower"], [1015, 3, 1, "", "decn_space_upper"], [1015, 3, 1, "", "eqcv_wt"], [1015, 3, 1, "", "ineqcv_wt"], [1015, 3, 1, "", "ndecn"], [1015, 3, 1, "", "neqcv"], [1015, 3, 1, "", "nineqcv"], [1015, 3, 1, "", "nobj"], [1015, 3, 1, "", "nsoln"], [1015, 3, 1, "", "obj_wt"], [1015, 3, 1, "", "soln_decn"], [1015, 3, 1, "", "soln_eqcv"], [1015, 3, 1, "", "soln_ineqcv"], [1015, 3, 1, "", "soln_obj"]], "pybrops.opt.soln.IntegerSolution": [[1018, 1, 1, "", "IntegerSolution"], [1019, 2, 1, "", "check_is_IntegerSolution"]], "pybrops.opt.soln.IntegerSolution.IntegerSolution": [[1018, 3, 1, "", "decn_space"], [1018, 3, 1, "", "decn_space_lower"], [1018, 3, 1, "", "decn_space_upper"], [1018, 3, 1, "", "eqcv_wt"], [1018, 3, 1, "", "ineqcv_wt"], [1018, 3, 1, "", "ndecn"], [1018, 3, 1, "", "neqcv"], [1018, 3, 1, "", "nineqcv"], [1018, 3, 1, "", "nobj"], [1018, 3, 1, "", "nsoln"], [1018, 3, 1, "", "obj_wt"], [1018, 3, 1, "", "soln_decn"], [1018, 3, 1, "", "soln_eqcv"], [1018, 3, 1, "", "soln_ineqcv"], [1018, 3, 1, "", "soln_obj"]], "pybrops.opt.soln.RealSolution": [[1021, 1, 1, "", "RealSolution"], [1022, 2, 1, "", "check_is_RealSolution"]], "pybrops.opt.soln.RealSolution.RealSolution": [[1021, 3, 1, "", "decn_space"], [1021, 3, 1, "", "decn_space_lower"], [1021, 3, 1, "", "decn_space_upper"], [1021, 3, 1, "", "eqcv_wt"], [1021, 3, 1, "", "ineqcv_wt"], [1021, 3, 1, "", "ndecn"], [1021, 3, 1, "", "neqcv"], [1021, 3, 1, "", "nineqcv"], [1021, 3, 1, "", "nobj"], [1021, 3, 1, "", "nsoln"], [1021, 3, 1, "", "obj_wt"], [1021, 3, 1, "", "soln_decn"], [1021, 3, 1, "", "soln_eqcv"], [1021, 3, 1, "", "soln_ineqcv"], [1021, 3, 1, "", "soln_obj"]], "pybrops.opt.soln.Solution": [[1024, 1, 1, "", "Solution"], [1025, 2, 1, "", "check_is_Solution"]], "pybrops.opt.soln.Solution.Solution": [[1024, 3, 1, "", "decn_space"], [1024, 3, 1, "", "decn_space_lower"], [1024, 3, 1, "", "decn_space_upper"], [1024, 3, 1, "", "eqcv_wt"], [1024, 3, 1, "", "ineqcv_wt"], [1024, 3, 1, "", "ndecn"], [1024, 3, 1, "", "neqcv"], [1024, 3, 1, "", "nineqcv"], [1024, 3, 1, "", "nobj"], [1024, 3, 1, "", "nsoln"], [1024, 3, 1, "", "obj_wt"], [1024, 3, 1, "", "soln_decn"], [1024, 3, 1, "", "soln_eqcv"], [1024, 3, 1, "", "soln_ineqcv"], [1024, 3, 1, "", "soln_obj"]], "pybrops.opt.soln.SubsetSolution": [[1027, 1, 1, "", "SubsetSolution"], [1028, 2, 1, "", "check_is_SubsetSolution"]], "pybrops.opt.soln.SubsetSolution.SubsetSolution": [[1027, 3, 1, "", "decn_space"], [1027, 3, 1, "", "decn_space_lower"], [1027, 3, 1, "", "decn_space_upper"], [1027, 3, 1, "", "eqcv_wt"], [1027, 3, 1, "", "ineqcv_wt"], [1027, 3, 1, "", "ndecn"], [1027, 3, 1, "", "neqcv"], [1027, 3, 1, "", "nineqcv"], [1027, 3, 1, "", "nobj"], [1027, 3, 1, "", "nsoln"], [1027, 3, 1, "", "obj_wt"], [1027, 3, 1, "", "soln_decn"], [1027, 3, 1, "", "soln_eqcv"], [1027, 3, 1, "", "soln_ineqcv"], [1027, 3, 1, "", "soln_obj"]], "pybrops.popgen": [[1030, 0, 0, "-", "bvmat"], [1043, 0, 0, "-", "cmat"], [1081, 0, 0, "-", "gmap"], [1108, 0, 0, "-", "gmat"]], "pybrops.popgen.bvmat": [[1031, 0, 0, "-", "BreedingValueMatrix"], [1034, 0, 0, "-", "DenseBreedingValueMatrix"], [1037, 0, 0, "-", "DenseEstimatedBreedingValueMatrix"], [1040, 0, 0, "-", "DenseGenomicEstimatedBreedingValueMatrix"]], "pybrops.popgen.bvmat.BreedingValueMatrix": [[1032, 1, 1, "", "BreedingValueMatrix"], [1033, 2, 1, "", "check_is_BreedingValueMatrix"]], "pybrops.popgen.bvmat.BreedingValueMatrix.BreedingValueMatrix": [[1032, 4, 1, "", "__add__"], [1032, 4, 1, "", "__mul__"], [1032, 4, 1, "", "adjoin"], [1032, 4, 1, "", "adjoin_taxa"], [1032, 4, 1, "", "adjoin_trait"], [1032, 4, 1, "", "append"], [1032, 4, 1, "", "append_taxa"], [1032, 4, 1, "", "append_trait"], [1032, 4, 1, "", "concat"], [1032, 4, 1, "", "concat_taxa"], [1032, 4, 1, "", "concat_trait"], [1032, 4, 1, "", "copy"], [1032, 4, 1, "", "deepcopy"], [1032, 4, 1, "", "delete"], [1032, 4, 1, "", "delete_taxa"], [1032, 4, 1, "", "delete_trait"], [1032, 4, 1, "", "from_csv"], [1032, 4, 1, "", "from_hdf5"], [1032, 4, 1, "", "from_pandas"], [1032, 4, 1, "", "group"], [1032, 4, 1, "", "group_taxa"], [1032, 4, 1, "", "incorp"], [1032, 4, 1, "", "incorp_taxa"], [1032, 4, 1, "", "incorp_trait"], [1032, 4, 1, "", "insert"], [1032, 4, 1, "", "insert_taxa"], [1032, 4, 1, "", "insert_trait"], [1032, 4, 1, "", "is_grouped"], [1032, 4, 1, "", "is_grouped_taxa"], [1032, 4, 1, "", "lexsort"], [1032, 4, 1, "", "lexsort_taxa"], [1032, 4, 1, "", "lexsort_trait"], [1032, 3, 1, "", "location"], [1032, 3, 1, "", "mat"], [1032, 3, 1, "", "mat_ndim"], [1032, 3, 1, "", "mat_shape"], [1032, 3, 1, "", "ntaxa"], [1032, 3, 1, "", "ntrait"], [1032, 4, 1, "", "remove"], [1032, 4, 1, "", "remove_taxa"], [1032, 4, 1, "", "remove_trait"], [1032, 4, 1, "", "reorder"], [1032, 4, 1, "", "reorder_taxa"], [1032, 4, 1, "", "reorder_trait"], [1032, 3, 1, "", "scale"], [1032, 4, 1, "", "select"], [1032, 4, 1, "", "select_taxa"], [1032, 4, 1, "", "select_trait"], [1032, 4, 1, "", "sort"], [1032, 4, 1, "", "sort_taxa"], [1032, 4, 1, "", "sort_trait"], [1032, 4, 1, "", "targmax"], [1032, 4, 1, "", "targmin"], [1032, 3, 1, "", "taxa"], [1032, 3, 1, "", "taxa_axis"], [1032, 3, 1, "", "taxa_grp"], [1032, 3, 1, "", "taxa_grp_len"], [1032, 3, 1, "", "taxa_grp_name"], [1032, 3, 1, "", "taxa_grp_spix"], [1032, 3, 1, "", "taxa_grp_stix"], [1032, 4, 1, "", "tmax"], [1032, 4, 1, "", "tmean"], [1032, 4, 1, "", "tmin"], [1032, 4, 1, "", "to_csv"], [1032, 4, 1, "", "to_hdf5"], [1032, 4, 1, "", "to_pandas"], [1032, 3, 1, "", "trait"], [1032, 3, 1, "", "trait_axis"], [1032, 4, 1, "", "trange"], [1032, 4, 1, "", "tstd"], [1032, 4, 1, "", "tvar"], [1032, 4, 1, "", "ungroup"], [1032, 4, 1, "", "ungroup_taxa"], [1032, 4, 1, "", "unscale"]], "pybrops.popgen.bvmat.DenseBreedingValueMatrix": [[1035, 1, 1, "", "DenseBreedingValueMatrix"], [1036, 2, 1, "", "check_is_DenseBreedingValueMatrix"]], "pybrops.popgen.bvmat.DenseBreedingValueMatrix.DenseBreedingValueMatrix": [[1035, 4, 1, "", "__add__"], [1035, 4, 1, "", "__mul__"], [1035, 4, 1, "", "adjoin"], [1035, 4, 1, "", "adjoin_taxa"], [1035, 4, 1, "", "adjoin_trait"], [1035, 4, 1, "", "append"], [1035, 4, 1, "", "append_taxa"], [1035, 4, 1, "", "append_trait"], [1035, 4, 1, "", "concat"], [1035, 4, 1, "", "concat_taxa"], [1035, 4, 1, "", "concat_trait"], [1035, 4, 1, "", "copy"], [1035, 4, 1, "", "deepcopy"], [1035, 4, 1, "", "delete"], [1035, 4, 1, "", "delete_taxa"], [1035, 4, 1, "", "delete_trait"], [1035, 4, 1, "", "from_csv"], [1035, 4, 1, "", "from_hdf5"], [1035, 4, 1, "", "from_numpy"], [1035, 4, 1, "", "from_pandas"], [1035, 4, 1, "", "group"], [1035, 4, 1, "", "group_taxa"], [1035, 4, 1, "", "incorp"], [1035, 4, 1, "", "incorp_taxa"], [1035, 4, 1, "", "incorp_trait"], [1035, 4, 1, "", "insert"], [1035, 4, 1, "", "insert_taxa"], [1035, 4, 1, "", "insert_trait"], [1035, 4, 1, "", "is_grouped"], [1035, 4, 1, "", "is_grouped_taxa"], [1035, 4, 1, "", "lexsort"], [1035, 4, 1, "", "lexsort_taxa"], [1035, 4, 1, "", "lexsort_trait"], [1035, 3, 1, "", "location"], [1035, 3, 1, "", "mat"], [1035, 3, 1, "", "mat_ndim"], [1035, 3, 1, "", "mat_shape"], [1035, 3, 1, "", "ntaxa"], [1035, 3, 1, "", "ntrait"], [1035, 4, 1, "", "remove"], [1035, 4, 1, "", "remove_taxa"], [1035, 4, 1, "", "remove_trait"], [1035, 4, 1, "", "reorder"], [1035, 4, 1, "", "reorder_taxa"], [1035, 4, 1, "", "reorder_trait"], [1035, 3, 1, "", "scale"], [1035, 4, 1, "", "select"], [1035, 4, 1, "", "select_taxa"], [1035, 4, 1, "", "select_trait"], [1035, 4, 1, "", "sort"], [1035, 4, 1, "", "sort_taxa"], [1035, 4, 1, "", "sort_trait"], [1035, 4, 1, "", "targmax"], [1035, 4, 1, "", "targmin"], [1035, 3, 1, "", "taxa"], [1035, 3, 1, "", "taxa_axis"], [1035, 3, 1, "", "taxa_grp"], [1035, 3, 1, "", "taxa_grp_len"], [1035, 3, 1, "", "taxa_grp_name"], [1035, 3, 1, "", "taxa_grp_spix"], [1035, 3, 1, "", "taxa_grp_stix"], [1035, 4, 1, "", "tmax"], [1035, 4, 1, "", "tmean"], [1035, 4, 1, "", "tmin"], [1035, 4, 1, "", "to_csv"], [1035, 4, 1, "", "to_hdf5"], [1035, 4, 1, "", "to_pandas"], [1035, 3, 1, "", "trait"], [1035, 3, 1, "", "trait_axis"], [1035, 4, 1, "", "trange"], [1035, 4, 1, "", "tstd"], [1035, 4, 1, "", "tvar"], [1035, 4, 1, "", "ungroup"], [1035, 4, 1, "", "ungroup_taxa"], [1035, 4, 1, "", "unscale"]], "pybrops.popgen.bvmat.DenseEstimatedBreedingValueMatrix": [[1038, 1, 1, "", "DenseEstimatedBreedingValueMatrix"], [1039, 2, 1, "", "check_is_DenseEstimatedBreedingValueMatrix"]], "pybrops.popgen.bvmat.DenseEstimatedBreedingValueMatrix.DenseEstimatedBreedingValueMatrix": [[1038, 4, 1, "", "__add__"], [1038, 4, 1, "", "__mul__"], [1038, 4, 1, "", "adjoin"], [1038, 4, 1, "", "adjoin_taxa"], [1038, 4, 1, "", "adjoin_trait"], [1038, 4, 1, "", "append"], [1038, 4, 1, "", "append_taxa"], [1038, 4, 1, "", "append_trait"], [1038, 4, 1, "", "concat"], [1038, 4, 1, "", "concat_taxa"], [1038, 4, 1, "", "concat_trait"], [1038, 4, 1, "", "copy"], [1038, 4, 1, "", "deepcopy"], [1038, 4, 1, "", "delete"], [1038, 4, 1, "", "delete_taxa"], [1038, 4, 1, "", "delete_trait"], [1038, 4, 1, "", "from_csv"], [1038, 4, 1, "", "from_hdf5"], [1038, 4, 1, "", "from_numpy"], [1038, 4, 1, "", "from_pandas"], [1038, 4, 1, "", "group"], [1038, 4, 1, "", "group_taxa"], [1038, 4, 1, "", "incorp"], [1038, 4, 1, "", "incorp_taxa"], [1038, 4, 1, "", "incorp_trait"], [1038, 4, 1, "", "insert"], [1038, 4, 1, "", "insert_taxa"], [1038, 4, 1, "", "insert_trait"], [1038, 4, 1, "", "is_grouped"], [1038, 4, 1, "", "is_grouped_taxa"], [1038, 4, 1, "", "lexsort"], [1038, 4, 1, "", "lexsort_taxa"], [1038, 4, 1, "", "lexsort_trait"], [1038, 3, 1, "", "location"], [1038, 3, 1, "", "mat"], [1038, 3, 1, "", "mat_ndim"], [1038, 3, 1, "", "mat_shape"], [1038, 3, 1, "", "ntaxa"], [1038, 3, 1, "", "ntrait"], [1038, 4, 1, "", "remove"], [1038, 4, 1, "", "remove_taxa"], [1038, 4, 1, "", "remove_trait"], [1038, 4, 1, "", "reorder"], [1038, 4, 1, "", "reorder_taxa"], [1038, 4, 1, "", "reorder_trait"], [1038, 3, 1, "", "scale"], [1038, 4, 1, "", "select"], [1038, 4, 1, "", "select_taxa"], [1038, 4, 1, "", "select_trait"], [1038, 4, 1, "", "sort"], [1038, 4, 1, "", "sort_taxa"], [1038, 4, 1, "", "sort_trait"], [1038, 4, 1, "", "targmax"], [1038, 4, 1, "", "targmin"], [1038, 3, 1, "", "taxa"], [1038, 3, 1, "", "taxa_axis"], [1038, 3, 1, "", "taxa_grp"], [1038, 3, 1, "", "taxa_grp_len"], [1038, 3, 1, "", "taxa_grp_name"], [1038, 3, 1, "", "taxa_grp_spix"], [1038, 3, 1, "", "taxa_grp_stix"], [1038, 4, 1, "", "tmax"], [1038, 4, 1, "", "tmean"], [1038, 4, 1, "", "tmin"], [1038, 4, 1, "", "to_csv"], [1038, 4, 1, "", "to_hdf5"], [1038, 4, 1, "", "to_pandas"], [1038, 3, 1, "", "trait"], [1038, 3, 1, "", "trait_axis"], [1038, 4, 1, "", "trange"], [1038, 4, 1, "", "tstd"], [1038, 4, 1, "", "tvar"], [1038, 4, 1, "", "ungroup"], [1038, 4, 1, "", "ungroup_taxa"], [1038, 4, 1, "", "unscale"]], "pybrops.popgen.bvmat.DenseGenomicEstimatedBreedingValueMatrix": [[1041, 1, 1, "", "DenseGenomicEstimatedBreedingValueMatrix"], [1042, 2, 1, "", "check_is_DenseGenomicEstimatedBreedingValueMatrix"]], "pybrops.popgen.bvmat.DenseGenomicEstimatedBreedingValueMatrix.DenseGenomicEstimatedBreedingValueMatrix": [[1041, 4, 1, "", "__add__"], [1041, 4, 1, "", "__mul__"], [1041, 4, 1, "", "adjoin"], [1041, 4, 1, "", "adjoin_taxa"], [1041, 4, 1, "", "adjoin_trait"], [1041, 4, 1, "", "append"], [1041, 4, 1, "", "append_taxa"], [1041, 4, 1, "", "append_trait"], [1041, 4, 1, "", "concat"], [1041, 4, 1, "", "concat_taxa"], [1041, 4, 1, "", "concat_trait"], [1041, 4, 1, "", "copy"], [1041, 4, 1, "", "deepcopy"], [1041, 4, 1, "", "delete"], [1041, 4, 1, "", "delete_taxa"], [1041, 4, 1, "", "delete_trait"], [1041, 4, 1, "", "from_csv"], [1041, 4, 1, "", "from_hdf5"], [1041, 4, 1, "", "from_numpy"], [1041, 4, 1, "", "from_pandas"], [1041, 4, 1, "", "group"], [1041, 4, 1, "", "group_taxa"], [1041, 4, 1, "", "incorp"], [1041, 4, 1, "", "incorp_taxa"], [1041, 4, 1, "", "incorp_trait"], [1041, 4, 1, "", "insert"], [1041, 4, 1, "", "insert_taxa"], [1041, 4, 1, "", "insert_trait"], [1041, 4, 1, "", "is_grouped"], [1041, 4, 1, "", "is_grouped_taxa"], [1041, 4, 1, "", "lexsort"], [1041, 4, 1, "", "lexsort_taxa"], [1041, 4, 1, "", "lexsort_trait"], [1041, 3, 1, "", "location"], [1041, 3, 1, "", "mat"], [1041, 3, 1, "", "mat_ndim"], [1041, 3, 1, "", "mat_shape"], [1041, 3, 1, "", "ntaxa"], [1041, 3, 1, "", "ntrait"], [1041, 4, 1, "", "remove"], [1041, 4, 1, "", "remove_taxa"], [1041, 4, 1, "", "remove_trait"], [1041, 4, 1, "", "reorder"], [1041, 4, 1, "", "reorder_taxa"], [1041, 4, 1, "", "reorder_trait"], [1041, 3, 1, "", "scale"], [1041, 4, 1, "", "select"], [1041, 4, 1, "", "select_taxa"], [1041, 4, 1, "", "select_trait"], [1041, 4, 1, "", "sort"], [1041, 4, 1, "", "sort_taxa"], [1041, 4, 1, "", "sort_trait"], [1041, 4, 1, "", "targmax"], [1041, 4, 1, "", "targmin"], [1041, 3, 1, "", "taxa"], [1041, 3, 1, "", "taxa_axis"], [1041, 3, 1, "", "taxa_grp"], [1041, 3, 1, "", "taxa_grp_len"], [1041, 3, 1, "", "taxa_grp_name"], [1041, 3, 1, "", "taxa_grp_spix"], [1041, 3, 1, "", "taxa_grp_stix"], [1041, 4, 1, "", "tmax"], [1041, 4, 1, "", "tmean"], [1041, 4, 1, "", "tmin"], [1041, 4, 1, "", "to_csv"], [1041, 4, 1, "", "to_hdf5"], [1041, 4, 1, "", "to_pandas"], [1041, 3, 1, "", "trait"], [1041, 3, 1, "", "trait_axis"], [1041, 4, 1, "", "trange"], [1041, 4, 1, "", "tstd"], [1041, 4, 1, "", "tvar"], [1041, 4, 1, "", "ungroup"], [1041, 4, 1, "", "ungroup_taxa"], [1041, 4, 1, "", "unscale"]], "pybrops.popgen.cmat": [[1044, 0, 0, "-", "CoancestryMatrix"], [1047, 0, 0, "-", "DenseCoancestryMatrix"], [1050, 0, 0, "-", "DenseGeneralizedWeightedCoancestryMatrix"], [1053, 0, 0, "-", "DenseMolecularCoancestryMatrix"], [1056, 0, 0, "-", "DenseVanRadenCoancestryMatrix"], [1059, 0, 0, "-", "DenseYangCoancestryMatrix"], [1062, 0, 0, "-", "fcty"]], "pybrops.popgen.cmat.CoancestryMatrix": [[1045, 1, 1, "", "CoancestryMatrix"], [1046, 2, 1, "", "check_is_CoancestryMatrix"]], "pybrops.popgen.cmat.CoancestryMatrix.CoancestryMatrix": [[1045, 4, 1, "", "__add__"], [1045, 4, 1, "", "__mul__"], [1045, 4, 1, "", "adjoin"], [1045, 4, 1, "", "adjoin_taxa"], [1045, 4, 1, "", "append"], [1045, 4, 1, "", "append_taxa"], [1045, 4, 1, "", "apply_jitter"], [1045, 4, 1, "", "coancestry"], [1045, 4, 1, "", "concat"], [1045, 4, 1, "", "concat_taxa"], [1045, 4, 1, "", "copy"], [1045, 4, 1, "", "deepcopy"], [1045, 4, 1, "", "delete"], [1045, 4, 1, "", "delete_taxa"], [1045, 4, 1, "", "from_csv"], [1045, 4, 1, "", "from_gmat"], [1045, 4, 1, "", "from_hdf5"], [1045, 4, 1, "", "from_pandas"], [1045, 4, 1, "", "group"], [1045, 4, 1, "", "group_taxa"], [1045, 4, 1, "", "incorp"], [1045, 4, 1, "", "incorp_taxa"], [1045, 4, 1, "", "insert"], [1045, 4, 1, "", "insert_taxa"], [1045, 4, 1, "", "inverse"], [1045, 4, 1, "", "is_grouped"], [1045, 4, 1, "", "is_grouped_taxa"], [1045, 4, 1, "", "is_positive_semidefinite"], [1045, 4, 1, "", "is_square"], [1045, 4, 1, "", "is_square_taxa"], [1045, 4, 1, "", "kinship"], [1045, 4, 1, "", "lexsort"], [1045, 4, 1, "", "lexsort_taxa"], [1045, 3, 1, "", "mat"], [1045, 4, 1, "", "mat_asformat"], [1045, 3, 1, "", "mat_ndim"], [1045, 3, 1, "", "mat_shape"], [1045, 4, 1, "", "max"], [1045, 4, 1, "", "max_inbreeding"], [1045, 4, 1, "", "mean"], [1045, 4, 1, "", "min"], [1045, 4, 1, "", "min_inbreeding"], [1045, 3, 1, "", "nsquare"], [1045, 3, 1, "", "nsquare_taxa"], [1045, 3, 1, "", "ntaxa"], [1045, 4, 1, "", "remove"], [1045, 4, 1, "", "remove_taxa"], [1045, 4, 1, "", "reorder"], [1045, 4, 1, "", "reorder_taxa"], [1045, 4, 1, "", "select"], [1045, 4, 1, "", "select_taxa"], [1045, 4, 1, "", "sort"], [1045, 4, 1, "", "sort_taxa"], [1045, 3, 1, "", "square_axes"], [1045, 3, 1, "", "square_axes_len"], [1045, 3, 1, "", "square_taxa_axes"], [1045, 3, 1, "", "square_taxa_axes_len"], [1045, 3, 1, "", "taxa"], [1045, 3, 1, "", "taxa_axis"], [1045, 3, 1, "", "taxa_grp"], [1045, 3, 1, "", "taxa_grp_len"], [1045, 3, 1, "", "taxa_grp_name"], [1045, 3, 1, "", "taxa_grp_spix"], [1045, 3, 1, "", "taxa_grp_stix"], [1045, 4, 1, "", "to_csv"], [1045, 4, 1, "", "to_hdf5"], [1045, 4, 1, "", "to_pandas"], [1045, 4, 1, "", "ungroup"], [1045, 4, 1, "", "ungroup_taxa"]], "pybrops.popgen.cmat.DenseCoancestryMatrix": [[1048, 1, 1, "", "DenseCoancestryMatrix"], [1049, 2, 1, "", "check_is_DenseCoancestryMatrix"]], "pybrops.popgen.cmat.DenseCoancestryMatrix.DenseCoancestryMatrix": [[1048, 4, 1, "", "__add__"], [1048, 4, 1, "", "__mul__"], [1048, 4, 1, "", "adjoin"], [1048, 4, 1, "", "adjoin_taxa"], [1048, 4, 1, "", "append"], [1048, 4, 1, "", "append_taxa"], [1048, 4, 1, "", "apply_jitter"], [1048, 4, 1, "", "coancestry"], [1048, 4, 1, "", "concat"], [1048, 4, 1, "", "concat_taxa"], [1048, 4, 1, "", "copy"], [1048, 4, 1, "", "deepcopy"], [1048, 4, 1, "", "delete"], [1048, 4, 1, "", "delete_taxa"], [1048, 4, 1, "", "from_csv"], [1048, 4, 1, "", "from_gmat"], [1048, 4, 1, "", "from_hdf5"], [1048, 4, 1, "", "from_pandas"], [1048, 4, 1, "", "group"], [1048, 4, 1, "", "group_taxa"], [1048, 4, 1, "", "incorp"], [1048, 4, 1, "", "incorp_taxa"], [1048, 4, 1, "", "insert"], [1048, 4, 1, "", "insert_taxa"], [1048, 4, 1, "", "inverse"], [1048, 4, 1, "", "is_grouped"], [1048, 4, 1, "", "is_grouped_taxa"], [1048, 4, 1, "", "is_positive_semidefinite"], [1048, 4, 1, "", "is_square"], [1048, 4, 1, "", "is_square_taxa"], [1048, 4, 1, "", "kinship"], [1048, 4, 1, "", "lexsort"], [1048, 4, 1, "", "lexsort_taxa"], [1048, 3, 1, "", "mat"], [1048, 4, 1, "", "mat_asformat"], [1048, 3, 1, "", "mat_ndim"], [1048, 3, 1, "", "mat_shape"], [1048, 4, 1, "", "max"], [1048, 4, 1, "", "max_inbreeding"], [1048, 4, 1, "", "mean"], [1048, 4, 1, "", "min"], [1048, 4, 1, "", "min_inbreeding"], [1048, 3, 1, "", "nsquare"], [1048, 3, 1, "", "nsquare_taxa"], [1048, 3, 1, "", "ntaxa"], [1048, 4, 1, "", "remove"], [1048, 4, 1, "", "remove_taxa"], [1048, 4, 1, "", "reorder"], [1048, 4, 1, "", "reorder_taxa"], [1048, 4, 1, "", "select"], [1048, 4, 1, "", "select_taxa"], [1048, 4, 1, "", "sort"], [1048, 4, 1, "", "sort_taxa"], [1048, 3, 1, "", "square_axes"], [1048, 3, 1, "", "square_axes_len"], [1048, 3, 1, "", "square_taxa_axes"], [1048, 3, 1, "", "square_taxa_axes_len"], [1048, 3, 1, "", "taxa"], [1048, 3, 1, "", "taxa_axis"], [1048, 3, 1, "", "taxa_grp"], [1048, 3, 1, "", "taxa_grp_len"], [1048, 3, 1, "", "taxa_grp_name"], [1048, 3, 1, "", "taxa_grp_spix"], [1048, 3, 1, "", "taxa_grp_stix"], [1048, 4, 1, "", "to_csv"], [1048, 4, 1, "", "to_hdf5"], [1048, 4, 1, "", "to_pandas"], [1048, 4, 1, "", "ungroup"], [1048, 4, 1, "", "ungroup_taxa"]], "pybrops.popgen.cmat.DenseGeneralizedWeightedCoancestryMatrix": [[1051, 1, 1, "", "DenseGeneralizedWeightedCoancestryMatrix"], [1052, 2, 1, "", "check_is_DenseGeneralizedWeightedCoancestryMatrix"]], "pybrops.popgen.cmat.DenseGeneralizedWeightedCoancestryMatrix.DenseGeneralizedWeightedCoancestryMatrix": [[1051, 4, 1, "", "__add__"], [1051, 4, 1, "", "__mul__"], [1051, 4, 1, "", "adjoin"], [1051, 4, 1, "", "adjoin_taxa"], [1051, 4, 1, "", "append"], [1051, 4, 1, "", "append_taxa"], [1051, 4, 1, "", "apply_jitter"], [1051, 4, 1, "", "coancestry"], [1051, 4, 1, "", "concat"], [1051, 4, 1, "", "concat_taxa"], [1051, 4, 1, "", "copy"], [1051, 4, 1, "", "deepcopy"], [1051, 4, 1, "", "delete"], [1051, 4, 1, "", "delete_taxa"], [1051, 4, 1, "", "from_csv"], [1051, 4, 1, "", "from_gmat"], [1051, 4, 1, "", "from_hdf5"], [1051, 4, 1, "", "from_pandas"], [1051, 4, 1, "", "group"], [1051, 4, 1, "", "group_taxa"], [1051, 4, 1, "", "incorp"], [1051, 4, 1, "", "incorp_taxa"], [1051, 4, 1, "", "insert"], [1051, 4, 1, "", "insert_taxa"], [1051, 4, 1, "", "inverse"], [1051, 4, 1, "", "is_grouped"], [1051, 4, 1, "", "is_grouped_taxa"], [1051, 4, 1, "", "is_positive_semidefinite"], [1051, 4, 1, "", "is_square"], [1051, 4, 1, "", "is_square_taxa"], [1051, 4, 1, "", "kinship"], [1051, 4, 1, "", "lexsort"], [1051, 4, 1, "", "lexsort_taxa"], [1051, 3, 1, "", "mat"], [1051, 4, 1, "", "mat_asformat"], [1051, 3, 1, "", "mat_ndim"], [1051, 3, 1, "", "mat_shape"], [1051, 4, 1, "", "max"], [1051, 4, 1, "", "max_inbreeding"], [1051, 4, 1, "", "mean"], [1051, 4, 1, "", "min"], [1051, 4, 1, "", "min_inbreeding"], [1051, 3, 1, "", "nsquare"], [1051, 3, 1, "", "nsquare_taxa"], [1051, 3, 1, "", "ntaxa"], [1051, 4, 1, "", "remove"], [1051, 4, 1, "", "remove_taxa"], [1051, 4, 1, "", "reorder"], [1051, 4, 1, "", "reorder_taxa"], [1051, 4, 1, "", "select"], [1051, 4, 1, "", "select_taxa"], [1051, 4, 1, "", "sort"], [1051, 4, 1, "", "sort_taxa"], [1051, 3, 1, "", "square_axes"], [1051, 3, 1, "", "square_axes_len"], [1051, 3, 1, "", "square_taxa_axes"], [1051, 3, 1, "", "square_taxa_axes_len"], [1051, 3, 1, "", "taxa"], [1051, 3, 1, "", "taxa_axis"], [1051, 3, 1, "", "taxa_grp"], [1051, 3, 1, "", "taxa_grp_len"], [1051, 3, 1, "", "taxa_grp_name"], [1051, 3, 1, "", "taxa_grp_spix"], [1051, 3, 1, "", "taxa_grp_stix"], [1051, 4, 1, "", "to_csv"], [1051, 4, 1, "", "to_hdf5"], [1051, 4, 1, "", "to_pandas"], [1051, 4, 1, "", "ungroup"], [1051, 4, 1, "", "ungroup_taxa"]], "pybrops.popgen.cmat.DenseMolecularCoancestryMatrix": [[1054, 1, 1, "", "DenseMolecularCoancestryMatrix"], [1055, 2, 1, "", "check_is_DenseMolecularCoancestryMatrix"]], "pybrops.popgen.cmat.DenseMolecularCoancestryMatrix.DenseMolecularCoancestryMatrix": [[1054, 4, 1, "", "__add__"], [1054, 4, 1, "", "__mul__"], [1054, 4, 1, "", "adjoin"], [1054, 4, 1, "", "adjoin_taxa"], [1054, 4, 1, "", "append"], [1054, 4, 1, "", "append_taxa"], [1054, 4, 1, "", "apply_jitter"], [1054, 4, 1, "", "coancestry"], [1054, 4, 1, "", "concat"], [1054, 4, 1, "", "concat_taxa"], [1054, 4, 1, "", "copy"], [1054, 4, 1, "", "deepcopy"], [1054, 4, 1, "", "delete"], [1054, 4, 1, "", "delete_taxa"], [1054, 4, 1, "", "from_csv"], [1054, 4, 1, "", "from_gmat"], [1054, 4, 1, "", "from_hdf5"], [1054, 4, 1, "", "from_pandas"], [1054, 4, 1, "", "group"], [1054, 4, 1, "", "group_taxa"], [1054, 4, 1, "", "incorp"], [1054, 4, 1, "", "incorp_taxa"], [1054, 4, 1, "", "insert"], [1054, 4, 1, "", "insert_taxa"], [1054, 4, 1, "", "inverse"], [1054, 4, 1, "", "is_grouped"], [1054, 4, 1, "", "is_grouped_taxa"], [1054, 4, 1, "", "is_positive_semidefinite"], [1054, 4, 1, "", "is_square"], [1054, 4, 1, "", "is_square_taxa"], [1054, 4, 1, "", "kinship"], [1054, 4, 1, "", "lexsort"], [1054, 4, 1, "", "lexsort_taxa"], [1054, 3, 1, "", "mat"], [1054, 4, 1, "", "mat_asformat"], [1054, 3, 1, "", "mat_ndim"], [1054, 3, 1, "", "mat_shape"], [1054, 4, 1, "", "max"], [1054, 4, 1, "", "max_inbreeding"], [1054, 4, 1, "", "mean"], [1054, 4, 1, "", "min"], [1054, 4, 1, "", "min_inbreeding"], [1054, 3, 1, "", "nsquare"], [1054, 3, 1, "", "nsquare_taxa"], [1054, 3, 1, "", "ntaxa"], [1054, 4, 1, "", "remove"], [1054, 4, 1, "", "remove_taxa"], [1054, 4, 1, "", "reorder"], [1054, 4, 1, "", "reorder_taxa"], [1054, 4, 1, "", "select"], [1054, 4, 1, "", "select_taxa"], [1054, 4, 1, "", "sort"], [1054, 4, 1, "", "sort_taxa"], [1054, 3, 1, "", "square_axes"], [1054, 3, 1, "", "square_axes_len"], [1054, 3, 1, "", "square_taxa_axes"], [1054, 3, 1, "", "square_taxa_axes_len"], [1054, 3, 1, "", "taxa"], [1054, 3, 1, "", "taxa_axis"], [1054, 3, 1, "", "taxa_grp"], [1054, 3, 1, "", "taxa_grp_len"], [1054, 3, 1, "", "taxa_grp_name"], [1054, 3, 1, "", "taxa_grp_spix"], [1054, 3, 1, "", "taxa_grp_stix"], [1054, 4, 1, "", "to_csv"], [1054, 4, 1, "", "to_hdf5"], [1054, 4, 1, "", "to_pandas"], [1054, 4, 1, "", "ungroup"], [1054, 4, 1, "", "ungroup_taxa"]], "pybrops.popgen.cmat.DenseVanRadenCoancestryMatrix": [[1057, 1, 1, "", "DenseVanRadenCoancestryMatrix"], [1058, 2, 1, "", "check_is_DenseVanRadenCoancestryMatrix"]], "pybrops.popgen.cmat.DenseVanRadenCoancestryMatrix.DenseVanRadenCoancestryMatrix": [[1057, 4, 1, "", "__add__"], [1057, 4, 1, "", "__mul__"], [1057, 4, 1, "", "adjoin"], [1057, 4, 1, "", "adjoin_taxa"], [1057, 4, 1, "", "append"], [1057, 4, 1, "", "append_taxa"], [1057, 4, 1, "", "apply_jitter"], [1057, 4, 1, "", "coancestry"], [1057, 4, 1, "", "concat"], [1057, 4, 1, "", "concat_taxa"], [1057, 4, 1, "", "copy"], [1057, 4, 1, "", "deepcopy"], [1057, 4, 1, "", "delete"], [1057, 4, 1, "", "delete_taxa"], [1057, 4, 1, "", "from_csv"], [1057, 4, 1, "", "from_gmat"], [1057, 4, 1, "", "from_hdf5"], [1057, 4, 1, "", "from_pandas"], [1057, 4, 1, "", "group"], [1057, 4, 1, "", "group_taxa"], [1057, 4, 1, "", "incorp"], [1057, 4, 1, "", "incorp_taxa"], [1057, 4, 1, "", "insert"], [1057, 4, 1, "", "insert_taxa"], [1057, 4, 1, "", "inverse"], [1057, 4, 1, "", "is_grouped"], [1057, 4, 1, "", "is_grouped_taxa"], [1057, 4, 1, "", "is_positive_semidefinite"], [1057, 4, 1, "", "is_square"], [1057, 4, 1, "", "is_square_taxa"], [1057, 4, 1, "", "kinship"], [1057, 4, 1, "", "lexsort"], [1057, 4, 1, "", "lexsort_taxa"], [1057, 3, 1, "", "mat"], [1057, 4, 1, "", "mat_asformat"], [1057, 3, 1, "", "mat_ndim"], [1057, 3, 1, "", "mat_shape"], [1057, 4, 1, "", "max"], [1057, 4, 1, "", "max_inbreeding"], [1057, 4, 1, "", "mean"], [1057, 4, 1, "", "min"], [1057, 4, 1, "", "min_inbreeding"], [1057, 3, 1, "", "nsquare"], [1057, 3, 1, "", "nsquare_taxa"], [1057, 3, 1, "", "ntaxa"], [1057, 4, 1, "", "remove"], [1057, 4, 1, "", "remove_taxa"], [1057, 4, 1, "", "reorder"], [1057, 4, 1, "", "reorder_taxa"], [1057, 4, 1, "", "select"], [1057, 4, 1, "", "select_taxa"], [1057, 4, 1, "", "sort"], [1057, 4, 1, "", "sort_taxa"], [1057, 3, 1, "", "square_axes"], [1057, 3, 1, "", "square_axes_len"], [1057, 3, 1, "", "square_taxa_axes"], [1057, 3, 1, "", "square_taxa_axes_len"], [1057, 3, 1, "", "taxa"], [1057, 3, 1, "", "taxa_axis"], [1057, 3, 1, "", "taxa_grp"], [1057, 3, 1, "", "taxa_grp_len"], [1057, 3, 1, "", "taxa_grp_name"], [1057, 3, 1, "", "taxa_grp_spix"], [1057, 3, 1, "", "taxa_grp_stix"], [1057, 4, 1, "", "to_csv"], [1057, 4, 1, "", "to_hdf5"], [1057, 4, 1, "", "to_pandas"], [1057, 4, 1, "", "ungroup"], [1057, 4, 1, "", "ungroup_taxa"]], "pybrops.popgen.cmat.DenseYangCoancestryMatrix": [[1060, 1, 1, "", "DenseYangCoancestryMatrix"], [1061, 2, 1, "", "check_is_DenseYangCoancestryMatrix"]], "pybrops.popgen.cmat.DenseYangCoancestryMatrix.DenseYangCoancestryMatrix": [[1060, 4, 1, "", "__add__"], [1060, 4, 1, "", "__mul__"], [1060, 4, 1, "", "adjoin"], [1060, 4, 1, "", "adjoin_taxa"], [1060, 4, 1, "", "append"], [1060, 4, 1, "", "append_taxa"], [1060, 4, 1, "", "apply_jitter"], [1060, 4, 1, "", "coancestry"], [1060, 4, 1, "", "concat"], [1060, 4, 1, "", "concat_taxa"], [1060, 4, 1, "", "copy"], [1060, 4, 1, "", "deepcopy"], [1060, 4, 1, "", "delete"], [1060, 4, 1, "", "delete_taxa"], [1060, 4, 1, "", "from_csv"], [1060, 4, 1, "", "from_gmat"], [1060, 4, 1, "", "from_hdf5"], [1060, 4, 1, "", "from_pandas"], [1060, 4, 1, "", "group"], [1060, 4, 1, "", "group_taxa"], [1060, 4, 1, "", "incorp"], [1060, 4, 1, "", "incorp_taxa"], [1060, 4, 1, "", "insert"], [1060, 4, 1, "", "insert_taxa"], [1060, 4, 1, "", "inverse"], [1060, 4, 1, "", "is_grouped"], [1060, 4, 1, "", "is_grouped_taxa"], [1060, 4, 1, "", "is_positive_semidefinite"], [1060, 4, 1, "", "is_square"], [1060, 4, 1, "", "is_square_taxa"], [1060, 4, 1, "", "kinship"], [1060, 4, 1, "", "lexsort"], [1060, 4, 1, "", "lexsort_taxa"], [1060, 3, 1, "", "mat"], [1060, 4, 1, "", "mat_asformat"], [1060, 3, 1, "", "mat_ndim"], [1060, 3, 1, "", "mat_shape"], [1060, 4, 1, "", "max"], [1060, 4, 1, "", "max_inbreeding"], [1060, 4, 1, "", "mean"], [1060, 4, 1, "", "min"], [1060, 4, 1, "", "min_inbreeding"], [1060, 3, 1, "", "nsquare"], [1060, 3, 1, "", "nsquare_taxa"], [1060, 3, 1, "", "ntaxa"], [1060, 4, 1, "", "remove"], [1060, 4, 1, "", "remove_taxa"], [1060, 4, 1, "", "reorder"], [1060, 4, 1, "", "reorder_taxa"], [1060, 4, 1, "", "select"], [1060, 4, 1, "", "select_taxa"], [1060, 4, 1, "", "sort"], [1060, 4, 1, "", "sort_taxa"], [1060, 3, 1, "", "square_axes"], [1060, 3, 1, "", "square_axes_len"], [1060, 3, 1, "", "square_taxa_axes"], [1060, 3, 1, "", "square_taxa_axes_len"], [1060, 3, 1, "", "taxa"], [1060, 3, 1, "", "taxa_axis"], [1060, 3, 1, "", "taxa_grp"], [1060, 3, 1, "", "taxa_grp_len"], [1060, 3, 1, "", "taxa_grp_name"], [1060, 3, 1, "", "taxa_grp_spix"], [1060, 3, 1, "", "taxa_grp_stix"], [1060, 4, 1, "", "to_csv"], [1060, 4, 1, "", "to_hdf5"], [1060, 4, 1, "", "to_pandas"], [1060, 4, 1, "", "ungroup"], [1060, 4, 1, "", "ungroup_taxa"]], "pybrops.popgen.cmat.fcty": [[1063, 0, 0, "-", "CoancestryMatrixFactory"], [1066, 0, 0, "-", "DenseCoancestryMatrixFactory"], [1069, 0, 0, "-", "DenseGeneralizedWeightedCoancestryMatrixFactory"], [1072, 0, 0, "-", "DenseMolecularCoancestryMatrixFactory"], [1075, 0, 0, "-", "DenseVanRadenCoancestryMatrixFactory"], [1078, 0, 0, "-", "DenseYangCoancestryMatrixFactory"]], "pybrops.popgen.cmat.fcty.CoancestryMatrixFactory": [[1064, 1, 1, "", "CoancestryMatrixFactory"], [1065, 2, 1, "", "check_is_CoancestryMatrixFactory"]], "pybrops.popgen.cmat.fcty.CoancestryMatrixFactory.CoancestryMatrixFactory": [[1064, 4, 1, "", "from_gmat"]], "pybrops.popgen.cmat.fcty.DenseCoancestryMatrixFactory": [[1067, 1, 1, "", "DenseCoancestryMatrixFactory"], [1068, 2, 1, "", "check_is_DenseCoancestryMatrixFactory"]], "pybrops.popgen.cmat.fcty.DenseCoancestryMatrixFactory.DenseCoancestryMatrixFactory": [[1067, 4, 1, "", "from_gmat"]], "pybrops.popgen.cmat.fcty.DenseGeneralizedWeightedCoancestryMatrixFactory": [[1070, 1, 1, "", "DenseGeneralizedWeightedCoancestryMatrixFactory"], [1071, 2, 1, "", "check_is_DenseGeneralizedWeightedCoancestryMatrixFactory"]], "pybrops.popgen.cmat.fcty.DenseGeneralizedWeightedCoancestryMatrixFactory.DenseGeneralizedWeightedCoancestryMatrixFactory": [[1070, 4, 1, "", "from_gmat"]], "pybrops.popgen.cmat.fcty.DenseMolecularCoancestryMatrixFactory": [[1073, 1, 1, "", "DenseMolecularCoancestryMatrixFactory"], [1074, 2, 1, "", "check_is_DenseMolecularCoancestryMatrixFactory"]], "pybrops.popgen.cmat.fcty.DenseMolecularCoancestryMatrixFactory.DenseMolecularCoancestryMatrixFactory": [[1073, 4, 1, "", "from_gmat"]], "pybrops.popgen.cmat.fcty.DenseVanRadenCoancestryMatrixFactory": [[1076, 1, 1, "", "DenseVanRadenCoancestryMatrixFactory"], [1077, 2, 1, "", "check_is_DenseVanRadenCoancestryMatrixFactory"]], "pybrops.popgen.cmat.fcty.DenseVanRadenCoancestryMatrixFactory.DenseVanRadenCoancestryMatrixFactory": [[1076, 4, 1, "", "from_gmat"]], "pybrops.popgen.cmat.fcty.DenseYangCoancestryMatrixFactory": [[1079, 1, 1, "", "DenseYangCoancestryMatrixFactory"], [1080, 2, 1, "", "check_is_DenseYangCoancestryMatrixFactory"]], "pybrops.popgen.cmat.fcty.DenseYangCoancestryMatrixFactory.DenseYangCoancestryMatrixFactory": [[1079, 4, 1, "", "from_gmat"]], "pybrops.popgen.gmap": [[1082, 0, 0, "-", "DenseGeneticMappableMatrix"], [1085, 0, 0, "-", "ExtendedGeneticMap"], [1088, 0, 0, "-", "GeneticMap"], [1091, 0, 0, "-", "GeneticMapFunction"], [1094, 0, 0, "-", "GeneticMappableMatrix"], [1097, 0, 0, "-", "HaldaneMapFunction"], [1100, 0, 0, "-", "KosambiMapFunction"], [1103, 0, 0, "-", "StandardGeneticMap"], [1106, 0, 0, "-", "util"]], "pybrops.popgen.gmap.DenseGeneticMappableMatrix": [[1083, 1, 1, "", "DenseGeneticMappableMatrix"], [1084, 2, 1, "", "check_is_DenseGeneticMappableMatrix"]], "pybrops.popgen.gmap.DenseGeneticMappableMatrix.DenseGeneticMappableMatrix": [[1083, 4, 1, "", "__add__"], [1083, 4, 1, "", "__mul__"], [1083, 4, 1, "", "adjoin"], [1083, 4, 1, "", "adjoin_vrnt"], [1083, 4, 1, "", "append"], [1083, 4, 1, "", "append_vrnt"], [1083, 4, 1, "", "concat"], [1083, 4, 1, "", "concat_vrnt"], [1083, 4, 1, "", "copy"], [1083, 4, 1, "", "deepcopy"], [1083, 4, 1, "", "delete"], [1083, 4, 1, "", "delete_vrnt"], [1083, 4, 1, "", "from_hdf5"], [1083, 4, 1, "", "group"], [1083, 4, 1, "", "group_vrnt"], [1083, 4, 1, "", "incorp"], [1083, 4, 1, "", "incorp_vrnt"], [1083, 4, 1, "", "insert"], [1083, 4, 1, "", "insert_vrnt"], [1083, 4, 1, "", "interp_genpos"], [1083, 4, 1, "", "interp_xoprob"], [1083, 4, 1, "", "is_grouped"], [1083, 4, 1, "", "is_grouped_vrnt"], [1083, 4, 1, "", "lexsort"], [1083, 4, 1, "", "lexsort_vrnt"], [1083, 3, 1, "", "mat"], [1083, 3, 1, "", "mat_ndim"], [1083, 3, 1, "", "mat_shape"], [1083, 3, 1, "", "nvrnt"], [1083, 4, 1, "", "remove"], [1083, 4, 1, "", "remove_vrnt"], [1083, 4, 1, "", "reorder"], [1083, 4, 1, "", "reorder_vrnt"], [1083, 4, 1, "", "select"], [1083, 4, 1, "", "select_vrnt"], [1083, 4, 1, "", "sort"], [1083, 4, 1, "", "sort_vrnt"], [1083, 4, 1, "", "to_hdf5"], [1083, 4, 1, "", "ungroup"], [1083, 4, 1, "", "ungroup_vrnt"], [1083, 3, 1, "", "vrnt_axis"], [1083, 3, 1, "", "vrnt_chrgrp"], [1083, 3, 1, "", "vrnt_chrgrp_len"], [1083, 3, 1, "", "vrnt_chrgrp_name"], [1083, 3, 1, "", "vrnt_chrgrp_spix"], [1083, 3, 1, "", "vrnt_chrgrp_stix"], [1083, 3, 1, "", "vrnt_genpos"], [1083, 3, 1, "", "vrnt_hapalt"], [1083, 3, 1, "", "vrnt_hapgrp"], [1083, 3, 1, "", "vrnt_hapref"], [1083, 3, 1, "", "vrnt_mask"], [1083, 3, 1, "", "vrnt_name"], [1083, 3, 1, "", "vrnt_phypos"], [1083, 3, 1, "", "vrnt_xoprob"]], "pybrops.popgen.gmap.ExtendedGeneticMap": [[1086, 1, 1, "", "ExtendedGeneticMap"], [1087, 2, 1, "", "check_is_ExtendedGeneticMap"]], "pybrops.popgen.gmap.ExtendedGeneticMap.ExtendedGeneticMap": [[1086, 4, 1, "", "build_spline"], [1086, 4, 1, "", "congruence"], [1086, 4, 1, "", "copy"], [1086, 4, 1, "", "deepcopy"], [1086, 4, 1, "", "from_csv"], [1086, 4, 1, "", "from_egmap"], [1086, 4, 1, "", "from_pandas"], [1086, 4, 1, "", "gdist1g"], [1086, 4, 1, "", "gdist1p"], [1086, 4, 1, "", "gdist2g"], [1086, 4, 1, "", "gdist2p"], [1086, 4, 1, "", "group"], [1086, 4, 1, "", "has_spline"], [1086, 4, 1, "", "interp_genpos"], [1086, 4, 1, "", "interp_gmap"], [1086, 4, 1, "", "is_congruent"], [1086, 4, 1, "", "is_grouped"], [1086, 4, 1, "", "lexsort"], [1086, 3, 1, "", "nvrnt"], [1086, 4, 1, "", "prune"], [1086, 4, 1, "", "remove"], [1086, 4, 1, "", "remove_discrepancies"], [1086, 4, 1, "", "reorder"], [1086, 4, 1, "", "select"], [1086, 4, 1, "", "sort"], [1086, 3, 1, "", "spline"], [1086, 3, 1, "", "spline_fill_value"], [1086, 3, 1, "", "spline_kind"], [1086, 4, 1, "", "to_csv"], [1086, 4, 1, "", "to_egmap"], [1086, 4, 1, "", "to_pandas"], [1086, 4, 1, "", "ungroup"], [1086, 3, 1, "", "vrnt_chrgrp"], [1086, 3, 1, "", "vrnt_chrgrp_len"], [1086, 3, 1, "", "vrnt_chrgrp_name"], [1086, 3, 1, "", "vrnt_chrgrp_spix"], [1086, 3, 1, "", "vrnt_chrgrp_stix"], [1086, 3, 1, "", "vrnt_fncode"], [1086, 3, 1, "", "vrnt_genpos"], [1086, 3, 1, "", "vrnt_name"], [1086, 3, 1, "", "vrnt_phypos"], [1086, 3, 1, "", "vrnt_stop"]], "pybrops.popgen.gmap.GeneticMap": [[1089, 1, 1, "", "GeneticMap"], [1090, 2, 1, "", "check_is_GeneticMap"]], "pybrops.popgen.gmap.GeneticMap.GeneticMap": [[1089, 4, 1, "", "build_spline"], [1089, 4, 1, "", "congruence"], [1089, 4, 1, "", "copy"], [1089, 4, 1, "", "deepcopy"], [1089, 4, 1, "", "from_csv"], [1089, 4, 1, "", "from_pandas"], [1089, 4, 1, "", "gdist1g"], [1089, 4, 1, "", "gdist1p"], [1089, 4, 1, "", "gdist2g"], [1089, 4, 1, "", "gdist2p"], [1089, 4, 1, "", "group"], [1089, 4, 1, "", "has_spline"], [1089, 4, 1, "", "interp_genpos"], [1089, 4, 1, "", "interp_gmap"], [1089, 4, 1, "", "is_congruent"], [1089, 4, 1, "", "is_grouped"], [1089, 4, 1, "", "lexsort"], [1089, 3, 1, "", "nvrnt"], [1089, 4, 1, "", "remove"], [1089, 4, 1, "", "remove_discrepancies"], [1089, 4, 1, "", "reorder"], [1089, 4, 1, "", "select"], [1089, 4, 1, "", "sort"], [1089, 3, 1, "", "spline"], [1089, 3, 1, "", "spline_fill_value"], [1089, 3, 1, "", "spline_kind"], [1089, 4, 1, "", "to_csv"], [1089, 4, 1, "", "to_pandas"], [1089, 4, 1, "", "ungroup"], [1089, 3, 1, "", "vrnt_chrgrp"], [1089, 3, 1, "", "vrnt_chrgrp_len"], [1089, 3, 1, "", "vrnt_chrgrp_name"], [1089, 3, 1, "", "vrnt_chrgrp_spix"], [1089, 3, 1, "", "vrnt_chrgrp_stix"], [1089, 3, 1, "", "vrnt_genpos"], [1089, 3, 1, "", "vrnt_phypos"]], "pybrops.popgen.gmap.GeneticMapFunction": [[1092, 1, 1, "", "GeneticMapFunction"], [1093, 2, 1, "", "check_is_GeneticMapFunction"]], "pybrops.popgen.gmap.GeneticMapFunction.GeneticMapFunction": [[1092, 4, 1, "", "invmapfn"], [1092, 4, 1, "", "mapfn"], [1092, 4, 1, "", "rprob1g"], [1092, 4, 1, "", "rprob1p"], [1092, 4, 1, "", "rprob2g"], [1092, 4, 1, "", "rprob2p"]], "pybrops.popgen.gmap.GeneticMappableMatrix": [[1095, 1, 1, "", "GeneticMappableMatrix"], [1096, 2, 1, "", "check_is_GeneticMappableMatrix"]], "pybrops.popgen.gmap.GeneticMappableMatrix.GeneticMappableMatrix": [[1095, 4, 1, "", "__add__"], [1095, 4, 1, "", "__mul__"], [1095, 4, 1, "", "adjoin"], [1095, 4, 1, "", "adjoin_vrnt"], [1095, 4, 1, "", "append"], [1095, 4, 1, "", "append_vrnt"], [1095, 4, 1, "", "concat"], [1095, 4, 1, "", "concat_vrnt"], [1095, 4, 1, "", "copy"], [1095, 4, 1, "", "deepcopy"], [1095, 4, 1, "", "delete"], [1095, 4, 1, "", "delete_vrnt"], [1095, 4, 1, "", "from_hdf5"], [1095, 4, 1, "", "group"], [1095, 4, 1, "", "group_vrnt"], [1095, 4, 1, "", "incorp"], [1095, 4, 1, "", "incorp_vrnt"], [1095, 4, 1, "", "insert"], [1095, 4, 1, "", "insert_vrnt"], [1095, 4, 1, "", "interp_genpos"], [1095, 4, 1, "", "interp_xoprob"], [1095, 4, 1, "", "is_grouped"], [1095, 4, 1, "", "is_grouped_vrnt"], [1095, 4, 1, "", "lexsort"], [1095, 4, 1, "", "lexsort_vrnt"], [1095, 3, 1, "", "mat"], [1095, 3, 1, "", "mat_ndim"], [1095, 3, 1, "", "mat_shape"], [1095, 3, 1, "", "nvrnt"], [1095, 4, 1, "", "remove"], [1095, 4, 1, "", "remove_vrnt"], [1095, 4, 1, "", "reorder"], [1095, 4, 1, "", "reorder_vrnt"], [1095, 4, 1, "", "select"], [1095, 4, 1, "", "select_vrnt"], [1095, 4, 1, "", "sort"], [1095, 4, 1, "", "sort_vrnt"], [1095, 4, 1, "", "to_hdf5"], [1095, 4, 1, "", "ungroup"], [1095, 4, 1, "", "ungroup_vrnt"], [1095, 3, 1, "", "vrnt_axis"], [1095, 3, 1, "", "vrnt_chrgrp"], [1095, 3, 1, "", "vrnt_chrgrp_len"], [1095, 3, 1, "", "vrnt_chrgrp_name"], [1095, 3, 1, "", "vrnt_chrgrp_spix"], [1095, 3, 1, "", "vrnt_chrgrp_stix"], [1095, 3, 1, "", "vrnt_genpos"], [1095, 3, 1, "", "vrnt_hapalt"], [1095, 3, 1, "", "vrnt_hapgrp"], [1095, 3, 1, "", "vrnt_hapref"], [1095, 3, 1, "", "vrnt_mask"], [1095, 3, 1, "", "vrnt_name"], [1095, 3, 1, "", "vrnt_phypos"], [1095, 3, 1, "", "vrnt_xoprob"]], "pybrops.popgen.gmap.HaldaneMapFunction": [[1098, 1, 1, "", "HaldaneMapFunction"], [1099, 2, 1, "", "check_is_HaldaneMapFunction"]], "pybrops.popgen.gmap.HaldaneMapFunction.HaldaneMapFunction": [[1098, 4, 1, "", "invmapfn"], [1098, 4, 1, "", "mapfn"], [1098, 4, 1, "", "rprob1g"], [1098, 4, 1, "", "rprob1p"], [1098, 4, 1, "", "rprob2g"], [1098, 4, 1, "", "rprob2p"]], "pybrops.popgen.gmap.KosambiMapFunction": [[1101, 1, 1, "", "KosambiMapFunction"], [1102, 2, 1, "", "check_is_KosambiMapFunction"]], "pybrops.popgen.gmap.KosambiMapFunction.KosambiMapFunction": [[1101, 4, 1, "", "invmapfn"], [1101, 4, 1, "", "mapfn"], [1101, 4, 1, "", "rprob1g"], [1101, 4, 1, "", "rprob1p"], [1101, 4, 1, "", "rprob2g"], [1101, 4, 1, "", "rprob2p"]], "pybrops.popgen.gmap.StandardGeneticMap": [[1104, 1, 1, "", "StandardGeneticMap"], [1105, 2, 1, "", "check_is_StandardGeneticMap"]], "pybrops.popgen.gmap.StandardGeneticMap.StandardGeneticMap": [[1104, 4, 1, "", "build_spline"], [1104, 4, 1, "", "congruence"], [1104, 4, 1, "", "copy"], [1104, 4, 1, "", "deepcopy"], [1104, 4, 1, "", "from_csv"], [1104, 4, 1, "", "from_pandas"], [1104, 4, 1, "", "gdist1g"], [1104, 4, 1, "", "gdist1p"], [1104, 4, 1, "", "gdist2g"], [1104, 4, 1, "", "gdist2p"], [1104, 4, 1, "", "group"], [1104, 4, 1, "", "has_spline"], [1104, 4, 1, "", "interp_genpos"], [1104, 4, 1, "", "interp_gmap"], [1104, 4, 1, "", "is_congruent"], [1104, 4, 1, "", "is_grouped"], [1104, 4, 1, "", "lexsort"], [1104, 3, 1, "", "nvrnt"], [1104, 4, 1, "", "remove"], [1104, 4, 1, "", "remove_discrepancies"], [1104, 4, 1, "", "reorder"], [1104, 4, 1, "", "select"], [1104, 4, 1, "", "sort"], [1104, 3, 1, "", "spline"], [1104, 3, 1, "", "spline_fill_value"], [1104, 3, 1, "", "spline_kind"], [1104, 4, 1, "", "to_csv"], [1104, 4, 1, "", "to_pandas"], [1104, 4, 1, "", "ungroup"], [1104, 3, 1, "", "vrnt_chrgrp"], [1104, 3, 1, "", "vrnt_chrgrp_len"], [1104, 3, 1, "", "vrnt_chrgrp_name"], [1104, 3, 1, "", "vrnt_chrgrp_spix"], [1104, 3, 1, "", "vrnt_chrgrp_stix"], [1104, 3, 1, "", "vrnt_genpos"], [1104, 3, 1, "", "vrnt_phypos"]], "pybrops.popgen.gmap.util": [[1107, 2, 1, "", "cM2d"]], "pybrops.popgen.gmat": [[1109, 0, 0, "-", "DenseGenotypeMatrix"], [1112, 0, 0, "-", "DensePhasedGenotypeMatrix"], [1116, 0, 0, "-", "GenotypeMatrix"], [1120, 0, 0, "-", "HaplotypeMatrix"], [1123, 0, 0, "-", "PhasedGenotypeMatrix"], [1126, 0, 0, "-", "PhasedHaplotypeMatrix"]], "pybrops.popgen.gmat.DenseGenotypeMatrix": [[1110, 1, 1, "", "DenseGenotypeMatrix"], [1111, 2, 1, "", "check_is_DenseGenotypeMatrix"]], "pybrops.popgen.gmat.DenseGenotypeMatrix.DenseGenotypeMatrix": [[1110, 4, 1, "", "__add__"], [1110, 4, 1, "", "__mul__"], [1110, 4, 1, "", "acount"], [1110, 4, 1, "", "adjoin"], [1110, 4, 1, "", "adjoin_taxa"], [1110, 4, 1, "", "adjoin_vrnt"], [1110, 4, 1, "", "afreq"], [1110, 4, 1, "", "apoly"], [1110, 4, 1, "", "append"], [1110, 4, 1, "", "append_taxa"], [1110, 4, 1, "", "append_vrnt"], [1110, 4, 1, "", "concat"], [1110, 4, 1, "", "concat_taxa"], [1110, 4, 1, "", "concat_vrnt"], [1110, 4, 1, "", "copy"], [1110, 4, 1, "", "deepcopy"], [1110, 4, 1, "", "delete"], [1110, 4, 1, "", "delete_taxa"], [1110, 4, 1, "", "delete_vrnt"], [1110, 4, 1, "", "from_hdf5"], [1110, 4, 1, "", "from_vcf"], [1110, 4, 1, "", "group"], [1110, 4, 1, "", "group_taxa"], [1110, 4, 1, "", "group_vrnt"], [1110, 4, 1, "", "gtcount"], [1110, 4, 1, "", "gtfreq"], [1110, 4, 1, "", "incorp"], [1110, 4, 1, "", "incorp_taxa"], [1110, 4, 1, "", "incorp_vrnt"], [1110, 4, 1, "", "insert"], [1110, 4, 1, "", "insert_taxa"], [1110, 4, 1, "", "insert_vrnt"], [1110, 4, 1, "", "interp_genpos"], [1110, 4, 1, "", "interp_xoprob"], [1110, 4, 1, "", "is_grouped"], [1110, 4, 1, "", "is_grouped_taxa"], [1110, 4, 1, "", "is_grouped_vrnt"], [1110, 4, 1, "", "lexsort"], [1110, 4, 1, "", "lexsort_taxa"], [1110, 4, 1, "", "lexsort_vrnt"], [1110, 4, 1, "", "maf"], [1110, 3, 1, "", "mat"], [1110, 4, 1, "", "mat_asformat"], [1110, 3, 1, "", "mat_format"], [1110, 3, 1, "", "mat_ndim"], [1110, 3, 1, "", "mat_shape"], [1110, 4, 1, "", "meh"], [1110, 3, 1, "", "nphase"], [1110, 3, 1, "", "ntaxa"], [1110, 3, 1, "", "nvrnt"], [1110, 3, 1, "", "ploidy"], [1110, 4, 1, "", "remove"], [1110, 4, 1, "", "remove_taxa"], [1110, 4, 1, "", "remove_vrnt"], [1110, 4, 1, "", "reorder"], [1110, 4, 1, "", "reorder_taxa"], [1110, 4, 1, "", "reorder_vrnt"], [1110, 4, 1, "", "select"], [1110, 4, 1, "", "select_taxa"], [1110, 4, 1, "", "select_vrnt"], [1110, 4, 1, "", "sort"], [1110, 4, 1, "", "sort_taxa"], [1110, 4, 1, "", "sort_vrnt"], [1110, 4, 1, "", "tacount"], [1110, 4, 1, "", "tafreq"], [1110, 3, 1, "", "taxa"], [1110, 3, 1, "", "taxa_axis"], [1110, 3, 1, "", "taxa_grp"], [1110, 3, 1, "", "taxa_grp_len"], [1110, 3, 1, "", "taxa_grp_name"], [1110, 3, 1, "", "taxa_grp_spix"], [1110, 3, 1, "", "taxa_grp_stix"], [1110, 4, 1, "", "to_hdf5"], [1110, 4, 1, "", "ungroup"], [1110, 4, 1, "", "ungroup_taxa"], [1110, 4, 1, "", "ungroup_vrnt"], [1110, 3, 1, "", "vrnt_axis"], [1110, 3, 1, "", "vrnt_chrgrp"], [1110, 3, 1, "", "vrnt_chrgrp_len"], [1110, 3, 1, "", "vrnt_chrgrp_name"], [1110, 3, 1, "", "vrnt_chrgrp_spix"], [1110, 3, 1, "", "vrnt_chrgrp_stix"], [1110, 3, 1, "", "vrnt_genpos"], [1110, 3, 1, "", "vrnt_hapalt"], [1110, 3, 1, "", "vrnt_hapgrp"], [1110, 3, 1, "", "vrnt_hapref"], [1110, 3, 1, "", "vrnt_mask"], [1110, 3, 1, "", "vrnt_name"], [1110, 3, 1, "", "vrnt_phypos"], [1110, 3, 1, "", "vrnt_xoprob"]], "pybrops.popgen.gmat.DensePhasedGenotypeMatrix": [[1113, 1, 1, "", "DensePhasedGenotypeMatrix"], [1114, 2, 1, "", "check_DensePhasedGenotypeMatrix_has_vrnt_xoprob"], [1115, 2, 1, "", "check_is_DensePhasedGenotypeMatrix"]], "pybrops.popgen.gmat.DensePhasedGenotypeMatrix.DensePhasedGenotypeMatrix": [[1113, 4, 1, "", "__add__"], [1113, 4, 1, "", "__mul__"], [1113, 4, 1, "", "acount"], [1113, 4, 1, "", "adjoin"], [1113, 4, 1, "", "adjoin_phase"], [1113, 4, 1, "", "adjoin_taxa"], [1113, 4, 1, "", "adjoin_vrnt"], [1113, 4, 1, "", "afreq"], [1113, 4, 1, "", "apoly"], [1113, 4, 1, "", "append"], [1113, 4, 1, "", "append_phase"], [1113, 4, 1, "", "append_taxa"], [1113, 4, 1, "", "append_vrnt"], [1113, 4, 1, "", "concat"], [1113, 4, 1, "", "concat_phase"], [1113, 4, 1, "", "concat_taxa"], [1113, 4, 1, "", "concat_vrnt"], [1113, 4, 1, "", "copy"], [1113, 4, 1, "", "deepcopy"], [1113, 4, 1, "", "delete"], [1113, 4, 1, "", "delete_phase"], [1113, 4, 1, "", "delete_taxa"], [1113, 4, 1, "", "delete_vrnt"], [1113, 4, 1, "", "from_hdf5"], [1113, 4, 1, "", "from_vcf"], [1113, 4, 1, "", "group"], [1113, 4, 1, "", "group_taxa"], [1113, 4, 1, "", "group_vrnt"], [1113, 4, 1, "", "gtcount"], [1113, 4, 1, "", "gtfreq"], [1113, 4, 1, "", "incorp"], [1113, 4, 1, "", "incorp_phase"], [1113, 4, 1, "", "incorp_taxa"], [1113, 4, 1, "", "incorp_vrnt"], [1113, 4, 1, "", "insert"], [1113, 4, 1, "", "insert_phase"], [1113, 4, 1, "", "insert_taxa"], [1113, 4, 1, "", "insert_vrnt"], [1113, 4, 1, "", "interp_genpos"], [1113, 4, 1, "", "interp_xoprob"], [1113, 4, 1, "", "is_grouped"], [1113, 4, 1, "", "is_grouped_taxa"], [1113, 4, 1, "", "is_grouped_vrnt"], [1113, 4, 1, "", "lexsort"], [1113, 4, 1, "", "lexsort_taxa"], [1113, 4, 1, "", "lexsort_vrnt"], [1113, 4, 1, "", "maf"], [1113, 3, 1, "", "mat"], [1113, 4, 1, "", "mat_asformat"], [1113, 3, 1, "", "mat_format"], [1113, 3, 1, "", "mat_ndim"], [1113, 3, 1, "", "mat_shape"], [1113, 4, 1, "", "meh"], [1113, 3, 1, "", "nphase"], [1113, 3, 1, "", "ntaxa"], [1113, 3, 1, "", "nvrnt"], [1113, 3, 1, "", "phase_axis"], [1113, 3, 1, "", "ploidy"], [1113, 4, 1, "", "remove"], [1113, 4, 1, "", "remove_phase"], [1113, 4, 1, "", "remove_taxa"], [1113, 4, 1, "", "remove_vrnt"], [1113, 4, 1, "", "reorder"], [1113, 4, 1, "", "reorder_taxa"], [1113, 4, 1, "", "reorder_vrnt"], [1113, 4, 1, "", "select"], [1113, 4, 1, "", "select_phase"], [1113, 4, 1, "", "select_taxa"], [1113, 4, 1, "", "select_vrnt"], [1113, 4, 1, "", "sort"], [1113, 4, 1, "", "sort_taxa"], [1113, 4, 1, "", "sort_vrnt"], [1113, 4, 1, "", "tacount"], [1113, 4, 1, "", "tafreq"], [1113, 3, 1, "", "taxa"], [1113, 3, 1, "", "taxa_axis"], [1113, 3, 1, "", "taxa_grp"], [1113, 3, 1, "", "taxa_grp_len"], [1113, 3, 1, "", "taxa_grp_name"], [1113, 3, 1, "", "taxa_grp_spix"], [1113, 3, 1, "", "taxa_grp_stix"], [1113, 4, 1, "", "to_hdf5"], [1113, 4, 1, "", "ungroup"], [1113, 4, 1, "", "ungroup_taxa"], [1113, 4, 1, "", "ungroup_vrnt"], [1113, 3, 1, "", "vrnt_axis"], [1113, 3, 1, "", "vrnt_chrgrp"], [1113, 3, 1, "", "vrnt_chrgrp_len"], [1113, 3, 1, "", "vrnt_chrgrp_name"], [1113, 3, 1, "", "vrnt_chrgrp_spix"], [1113, 3, 1, "", "vrnt_chrgrp_stix"], [1113, 3, 1, "", "vrnt_genpos"], [1113, 3, 1, "", "vrnt_hapalt"], [1113, 3, 1, "", "vrnt_hapgrp"], [1113, 3, 1, "", "vrnt_hapref"], [1113, 3, 1, "", "vrnt_mask"], [1113, 3, 1, "", "vrnt_name"], [1113, 3, 1, "", "vrnt_phypos"], [1113, 3, 1, "", "vrnt_xoprob"]], "pybrops.popgen.gmat.GenotypeMatrix": [[1117, 1, 1, "", "GenotypeMatrix"], [1118, 2, 1, "", "check_GenotypeMatrix_has_taxa"], [1119, 2, 1, "", "check_is_GenotypeMatrix"]], "pybrops.popgen.gmat.GenotypeMatrix.GenotypeMatrix": [[1117, 4, 1, "", "__add__"], [1117, 4, 1, "", "__mul__"], [1117, 4, 1, "", "acount"], [1117, 4, 1, "", "adjoin"], [1117, 4, 1, "", "adjoin_taxa"], [1117, 4, 1, "", "adjoin_vrnt"], [1117, 4, 1, "", "afreq"], [1117, 4, 1, "", "apoly"], [1117, 4, 1, "", "append"], [1117, 4, 1, "", "append_taxa"], [1117, 4, 1, "", "append_vrnt"], [1117, 4, 1, "", "concat"], [1117, 4, 1, "", "concat_taxa"], [1117, 4, 1, "", "concat_vrnt"], [1117, 4, 1, "", "copy"], [1117, 4, 1, "", "deepcopy"], [1117, 4, 1, "", "delete"], [1117, 4, 1, "", "delete_taxa"], [1117, 4, 1, "", "delete_vrnt"], [1117, 4, 1, "", "from_hdf5"], [1117, 4, 1, "", "group"], [1117, 4, 1, "", "group_taxa"], [1117, 4, 1, "", "group_vrnt"], [1117, 4, 1, "", "gtcount"], [1117, 4, 1, "", "gtfreq"], [1117, 4, 1, "", "incorp"], [1117, 4, 1, "", "incorp_taxa"], [1117, 4, 1, "", "incorp_vrnt"], [1117, 4, 1, "", "insert"], [1117, 4, 1, "", "insert_taxa"], [1117, 4, 1, "", "insert_vrnt"], [1117, 4, 1, "", "interp_genpos"], [1117, 4, 1, "", "interp_xoprob"], [1117, 4, 1, "", "is_grouped"], [1117, 4, 1, "", "is_grouped_taxa"], [1117, 4, 1, "", "is_grouped_vrnt"], [1117, 4, 1, "", "lexsort"], [1117, 4, 1, "", "lexsort_taxa"], [1117, 4, 1, "", "lexsort_vrnt"], [1117, 4, 1, "", "maf"], [1117, 3, 1, "", "mat"], [1117, 4, 1, "", "mat_asformat"], [1117, 3, 1, "", "mat_format"], [1117, 3, 1, "", "mat_ndim"], [1117, 3, 1, "", "mat_shape"], [1117, 4, 1, "", "meh"], [1117, 3, 1, "", "nphase"], [1117, 3, 1, "", "ntaxa"], [1117, 3, 1, "", "nvrnt"], [1117, 3, 1, "", "ploidy"], [1117, 4, 1, "", "remove"], [1117, 4, 1, "", "remove_taxa"], [1117, 4, 1, "", "remove_vrnt"], [1117, 4, 1, "", "reorder"], [1117, 4, 1, "", "reorder_taxa"], [1117, 4, 1, "", "reorder_vrnt"], [1117, 4, 1, "", "select"], [1117, 4, 1, "", "select_taxa"], [1117, 4, 1, "", "select_vrnt"], [1117, 4, 1, "", "sort"], [1117, 4, 1, "", "sort_taxa"], [1117, 4, 1, "", "sort_vrnt"], [1117, 4, 1, "", "tacount"], [1117, 4, 1, "", "tafreq"], [1117, 3, 1, "", "taxa"], [1117, 3, 1, "", "taxa_axis"], [1117, 3, 1, "", "taxa_grp"], [1117, 3, 1, "", "taxa_grp_len"], [1117, 3, 1, "", "taxa_grp_name"], [1117, 3, 1, "", "taxa_grp_spix"], [1117, 3, 1, "", "taxa_grp_stix"], [1117, 4, 1, "", "to_hdf5"], [1117, 4, 1, "", "ungroup"], [1117, 4, 1, "", "ungroup_taxa"], [1117, 4, 1, "", "ungroup_vrnt"], [1117, 3, 1, "", "vrnt_axis"], [1117, 3, 1, "", "vrnt_chrgrp"], [1117, 3, 1, "", "vrnt_chrgrp_len"], [1117, 3, 1, "", "vrnt_chrgrp_name"], [1117, 3, 1, "", "vrnt_chrgrp_spix"], [1117, 3, 1, "", "vrnt_chrgrp_stix"], [1117, 3, 1, "", "vrnt_genpos"], [1117, 3, 1, "", "vrnt_hapalt"], [1117, 3, 1, "", "vrnt_hapgrp"], [1117, 3, 1, "", "vrnt_hapref"], [1117, 3, 1, "", "vrnt_mask"], [1117, 3, 1, "", "vrnt_name"], [1117, 3, 1, "", "vrnt_phypos"], [1117, 3, 1, "", "vrnt_xoprob"]], "pybrops.popgen.gmat.HaplotypeMatrix": [[1121, 1, 1, "", "HaplotypeMatrix"], [1122, 2, 1, "", "check_is_HaplotypeMatrix"]], "pybrops.popgen.gmat.HaplotypeMatrix.HaplotypeMatrix": [[1121, 4, 1, "", "__add__"], [1121, 4, 1, "", "__mul__"], [1121, 4, 1, "", "adjoin"], [1121, 4, 1, "", "adjoin_taxa"], [1121, 4, 1, "", "adjoin_vrnt"], [1121, 4, 1, "", "append"], [1121, 4, 1, "", "append_taxa"], [1121, 4, 1, "", "append_vrnt"], [1121, 4, 1, "", "concat"], [1121, 4, 1, "", "concat_taxa"], [1121, 4, 1, "", "concat_vrnt"], [1121, 4, 1, "", "copy"], [1121, 4, 1, "", "deepcopy"], [1121, 4, 1, "", "delete"], [1121, 4, 1, "", "delete_taxa"], [1121, 4, 1, "", "delete_vrnt"], [1121, 4, 1, "", "from_hdf5"], [1121, 4, 1, "", "group"], [1121, 4, 1, "", "group_taxa"], [1121, 4, 1, "", "group_vrnt"], [1121, 4, 1, "", "gtcount"], [1121, 4, 1, "", "gtfreq"], [1121, 4, 1, "", "hcount"], [1121, 4, 1, "", "hfreq"], [1121, 4, 1, "", "incorp"], [1121, 4, 1, "", "incorp_taxa"], [1121, 4, 1, "", "incorp_vrnt"], [1121, 4, 1, "", "insert"], [1121, 4, 1, "", "insert_taxa"], [1121, 4, 1, "", "insert_vrnt"], [1121, 4, 1, "", "is_grouped"], [1121, 4, 1, "", "is_grouped_taxa"], [1121, 4, 1, "", "is_grouped_vrnt"], [1121, 4, 1, "", "lexsort"], [1121, 4, 1, "", "lexsort_taxa"], [1121, 4, 1, "", "lexsort_vrnt"], [1121, 3, 1, "", "mat"], [1121, 3, 1, "", "mat_format"], [1121, 3, 1, "", "mat_ndim"], [1121, 3, 1, "", "mat_shape"], [1121, 4, 1, "", "meh"], [1121, 4, 1, "", "mhf"], [1121, 3, 1, "", "nphase"], [1121, 3, 1, "", "ntaxa"], [1121, 3, 1, "", "nvrnt"], [1121, 3, 1, "", "ploidy"], [1121, 4, 1, "", "remove"], [1121, 4, 1, "", "remove_taxa"], [1121, 4, 1, "", "remove_vrnt"], [1121, 4, 1, "", "reorder"], [1121, 4, 1, "", "reorder_taxa"], [1121, 4, 1, "", "reorder_vrnt"], [1121, 4, 1, "", "select"], [1121, 4, 1, "", "select_taxa"], [1121, 4, 1, "", "select_vrnt"], [1121, 4, 1, "", "sort"], [1121, 4, 1, "", "sort_taxa"], [1121, 4, 1, "", "sort_vrnt"], [1121, 3, 1, "", "taxa"], [1121, 3, 1, "", "taxa_axis"], [1121, 3, 1, "", "taxa_grp"], [1121, 3, 1, "", "taxa_grp_len"], [1121, 3, 1, "", "taxa_grp_name"], [1121, 3, 1, "", "taxa_grp_spix"], [1121, 3, 1, "", "taxa_grp_stix"], [1121, 4, 1, "", "thcount"], [1121, 4, 1, "", "thfreq"], [1121, 4, 1, "", "to_hdf5"], [1121, 4, 1, "", "ungroup"], [1121, 4, 1, "", "ungroup_taxa"], [1121, 4, 1, "", "ungroup_vrnt"], [1121, 3, 1, "", "vrnt_axis"], [1121, 3, 1, "", "vrnt_chrgrp"], [1121, 3, 1, "", "vrnt_chrgrp_len"], [1121, 3, 1, "", "vrnt_chrgrp_name"], [1121, 3, 1, "", "vrnt_chrgrp_spix"], [1121, 3, 1, "", "vrnt_chrgrp_stix"], [1121, 3, 1, "", "vrnt_genpos"], [1121, 3, 1, "", "vrnt_hapalt"], [1121, 3, 1, "", "vrnt_hapgrp"], [1121, 3, 1, "", "vrnt_hapref"], [1121, 3, 1, "", "vrnt_mask"], [1121, 3, 1, "", "vrnt_name"], [1121, 3, 1, "", "vrnt_phypos"], [1121, 3, 1, "", "vrnt_xoprob"]], "pybrops.popgen.gmat.PhasedGenotypeMatrix": [[1124, 1, 1, "", "PhasedGenotypeMatrix"], [1125, 2, 1, "", "check_is_PhasedGenotypeMatrix"]], "pybrops.popgen.gmat.PhasedGenotypeMatrix.PhasedGenotypeMatrix": [[1124, 4, 1, "", "__add__"], [1124, 4, 1, "", "__mul__"], [1124, 4, 1, "", "acount"], [1124, 4, 1, "", "adjoin"], [1124, 4, 1, "", "adjoin_phase"], [1124, 4, 1, "", "adjoin_taxa"], [1124, 4, 1, "", "adjoin_vrnt"], [1124, 4, 1, "", "afreq"], [1124, 4, 1, "", "apoly"], [1124, 4, 1, "", "append"], [1124, 4, 1, "", "append_phase"], [1124, 4, 1, "", "append_taxa"], [1124, 4, 1, "", "append_vrnt"], [1124, 4, 1, "", "concat"], [1124, 4, 1, "", "concat_phase"], [1124, 4, 1, "", "concat_taxa"], [1124, 4, 1, "", "concat_vrnt"], [1124, 4, 1, "", "copy"], [1124, 4, 1, "", "deepcopy"], [1124, 4, 1, "", "delete"], [1124, 4, 1, "", "delete_phase"], [1124, 4, 1, "", "delete_taxa"], [1124, 4, 1, "", "delete_vrnt"], [1124, 4, 1, "", "from_hdf5"], [1124, 4, 1, "", "group"], [1124, 4, 1, "", "group_taxa"], [1124, 4, 1, "", "group_vrnt"], [1124, 4, 1, "", "gtcount"], [1124, 4, 1, "", "gtfreq"], [1124, 4, 1, "", "incorp"], [1124, 4, 1, "", "incorp_phase"], [1124, 4, 1, "", "incorp_taxa"], [1124, 4, 1, "", "incorp_vrnt"], [1124, 4, 1, "", "insert"], [1124, 4, 1, "", "insert_phase"], [1124, 4, 1, "", "insert_taxa"], [1124, 4, 1, "", "insert_vrnt"], [1124, 4, 1, "", "interp_genpos"], [1124, 4, 1, "", "interp_xoprob"], [1124, 4, 1, "", "is_grouped"], [1124, 4, 1, "", "is_grouped_taxa"], [1124, 4, 1, "", "is_grouped_vrnt"], [1124, 4, 1, "", "lexsort"], [1124, 4, 1, "", "lexsort_taxa"], [1124, 4, 1, "", "lexsort_vrnt"], [1124, 4, 1, "", "maf"], [1124, 3, 1, "", "mat"], [1124, 4, 1, "", "mat_asformat"], [1124, 3, 1, "", "mat_format"], [1124, 3, 1, "", "mat_ndim"], [1124, 3, 1, "", "mat_shape"], [1124, 4, 1, "", "meh"], [1124, 3, 1, "", "nphase"], [1124, 3, 1, "", "ntaxa"], [1124, 3, 1, "", "nvrnt"], [1124, 3, 1, "", "phase_axis"], [1124, 3, 1, "", "ploidy"], [1124, 4, 1, "", "remove"], [1124, 4, 1, "", "remove_phase"], [1124, 4, 1, "", "remove_taxa"], [1124, 4, 1, "", "remove_vrnt"], [1124, 4, 1, "", "reorder"], [1124, 4, 1, "", "reorder_taxa"], [1124, 4, 1, "", "reorder_vrnt"], [1124, 4, 1, "", "select"], [1124, 4, 1, "", "select_phase"], [1124, 4, 1, "", "select_taxa"], [1124, 4, 1, "", "select_vrnt"], [1124, 4, 1, "", "sort"], [1124, 4, 1, "", "sort_taxa"], [1124, 4, 1, "", "sort_vrnt"], [1124, 4, 1, "", "tacount"], [1124, 4, 1, "", "tafreq"], [1124, 3, 1, "", "taxa"], [1124, 3, 1, "", "taxa_axis"], [1124, 3, 1, "", "taxa_grp"], [1124, 3, 1, "", "taxa_grp_len"], [1124, 3, 1, "", "taxa_grp_name"], [1124, 3, 1, "", "taxa_grp_spix"], [1124, 3, 1, "", "taxa_grp_stix"], [1124, 4, 1, "", "to_hdf5"], [1124, 4, 1, "", "ungroup"], [1124, 4, 1, "", "ungroup_taxa"], [1124, 4, 1, "", "ungroup_vrnt"], [1124, 3, 1, "", "vrnt_axis"], [1124, 3, 1, "", "vrnt_chrgrp"], [1124, 3, 1, "", "vrnt_chrgrp_len"], [1124, 3, 1, "", "vrnt_chrgrp_name"], [1124, 3, 1, "", "vrnt_chrgrp_spix"], [1124, 3, 1, "", "vrnt_chrgrp_stix"], [1124, 3, 1, "", "vrnt_genpos"], [1124, 3, 1, "", "vrnt_hapalt"], [1124, 3, 1, "", "vrnt_hapgrp"], [1124, 3, 1, "", "vrnt_hapref"], [1124, 3, 1, "", "vrnt_mask"], [1124, 3, 1, "", "vrnt_name"], [1124, 3, 1, "", "vrnt_phypos"], [1124, 3, 1, "", "vrnt_xoprob"]], "pybrops.popgen.gmat.PhasedHaplotypeMatrix": [[1127, 1, 1, "", "PhasedHaplotypeMatrix"], [1128, 2, 1, "", "check_is_PhasedHaplotypeMatrix"]], "pybrops.popgen.gmat.PhasedHaplotypeMatrix.PhasedHaplotypeMatrix": [[1127, 4, 1, "", "__add__"], [1127, 4, 1, "", "__mul__"], [1127, 4, 1, "", "adjoin"], [1127, 4, 1, "", "adjoin_phase"], [1127, 4, 1, "", "adjoin_taxa"], [1127, 4, 1, "", "adjoin_vrnt"], [1127, 4, 1, "", "append"], [1127, 4, 1, "", "append_phase"], [1127, 4, 1, "", "append_taxa"], [1127, 4, 1, "", "append_vrnt"], [1127, 4, 1, "", "concat"], [1127, 4, 1, "", "concat_phase"], [1127, 4, 1, "", "concat_taxa"], [1127, 4, 1, "", "concat_vrnt"], [1127, 4, 1, "", "copy"], [1127, 4, 1, "", "deepcopy"], [1127, 4, 1, "", "delete"], [1127, 4, 1, "", "delete_phase"], [1127, 4, 1, "", "delete_taxa"], [1127, 4, 1, "", "delete_vrnt"], [1127, 4, 1, "", "from_hdf5"], [1127, 4, 1, "", "group"], [1127, 4, 1, "", "group_taxa"], [1127, 4, 1, "", "group_vrnt"], [1127, 4, 1, "", "gtcount"], [1127, 4, 1, "", "gtfreq"], [1127, 4, 1, "", "hcount"], [1127, 4, 1, "", "hfreq"], [1127, 4, 1, "", "incorp"], [1127, 4, 1, "", "incorp_phase"], [1127, 4, 1, "", "incorp_taxa"], [1127, 4, 1, "", "incorp_vrnt"], [1127, 4, 1, "", "insert"], [1127, 4, 1, "", "insert_phase"], [1127, 4, 1, "", "insert_taxa"], [1127, 4, 1, "", "insert_vrnt"], [1127, 4, 1, "", "is_grouped"], [1127, 4, 1, "", "is_grouped_taxa"], [1127, 4, 1, "", "is_grouped_vrnt"], [1127, 4, 1, "", "lexsort"], [1127, 4, 1, "", "lexsort_taxa"], [1127, 4, 1, "", "lexsort_vrnt"], [1127, 3, 1, "", "mat"], [1127, 3, 1, "", "mat_format"], [1127, 3, 1, "", "mat_ndim"], [1127, 3, 1, "", "mat_shape"], [1127, 4, 1, "", "meh"], [1127, 4, 1, "", "mhf"], [1127, 3, 1, "", "nphase"], [1127, 3, 1, "", "ntaxa"], [1127, 3, 1, "", "nvrnt"], [1127, 3, 1, "", "phase_axis"], [1127, 3, 1, "", "ploidy"], [1127, 4, 1, "", "remove"], [1127, 4, 1, "", "remove_phase"], [1127, 4, 1, "", "remove_taxa"], [1127, 4, 1, "", "remove_vrnt"], [1127, 4, 1, "", "reorder"], [1127, 4, 1, "", "reorder_taxa"], [1127, 4, 1, "", "reorder_vrnt"], [1127, 4, 1, "", "select"], [1127, 4, 1, "", "select_phase"], [1127, 4, 1, "", "select_taxa"], [1127, 4, 1, "", "select_vrnt"], [1127, 4, 1, "", "sort"], [1127, 4, 1, "", "sort_taxa"], [1127, 4, 1, "", "sort_vrnt"], [1127, 3, 1, "", "taxa"], [1127, 3, 1, "", "taxa_axis"], [1127, 3, 1, "", "taxa_grp"], [1127, 3, 1, "", "taxa_grp_len"], [1127, 3, 1, "", "taxa_grp_name"], [1127, 3, 1, "", "taxa_grp_spix"], [1127, 3, 1, "", "taxa_grp_stix"], [1127, 4, 1, "", "thcount"], [1127, 4, 1, "", "thfreq"], [1127, 4, 1, "", "to_hdf5"], [1127, 4, 1, "", "ungroup"], [1127, 4, 1, "", "ungroup_taxa"], [1127, 4, 1, "", "ungroup_vrnt"], [1127, 3, 1, "", "vrnt_axis"], [1127, 3, 1, "", "vrnt_chrgrp"], [1127, 3, 1, "", "vrnt_chrgrp_len"], [1127, 3, 1, "", "vrnt_chrgrp_name"], [1127, 3, 1, "", "vrnt_chrgrp_spix"], [1127, 3, 1, "", "vrnt_chrgrp_stix"], [1127, 3, 1, "", "vrnt_genpos"], [1127, 3, 1, "", "vrnt_hapalt"], [1127, 3, 1, "", "vrnt_hapgrp"], [1127, 3, 1, "", "vrnt_hapref"], [1127, 3, 1, "", "vrnt_mask"], [1127, 3, 1, "", "vrnt_name"], [1127, 3, 1, "", "vrnt_phypos"], [1127, 3, 1, "", "vrnt_xoprob"]], "pybrops.test": [[1130, 0, 0, "-", "assert_python"]], "pybrops.test.assert_python": [[1131, 2, 1, "", "assert_class_documentation"], [1132, 2, 1, "", "assert_class_isabstract"], [1133, 2, 1, "", "assert_class_isconcrete"], [1134, 2, 1, "", "assert_class_ismixin"], [1135, 2, 1, "", "assert_class_issemiabstract"], [1136, 2, 1, "", "assert_classmethod_documentation"], [1137, 2, 1, "", "assert_classmethod_isabstract"], [1138, 2, 1, "", "assert_classmethod_isconcrete"], [1139, 2, 1, "", "assert_classmethod_not_raises_NotImplementedError"], [1140, 2, 1, "", "assert_classmethod_raises_NotImplementedError"], [1141, 2, 1, "", "assert_docstring"], [1142, 2, 1, "", "assert_function_documentation"], [1143, 2, 1, "", "assert_function_isabstract"], [1144, 2, 1, "", "assert_function_isconcrete"], [1145, 2, 1, "", "assert_function_not_raises_NotImplementedError"], [1146, 2, 1, "", "assert_function_raises_NotImplementedError"], [1147, 2, 1, "", "assert_hasattr"], [1148, 2, 1, "", "assert_method_documentation"], [1149, 2, 1, "", "assert_method_isabstract"], [1150, 2, 1, "", "assert_method_isconcrete"], [1151, 2, 1, "", "assert_method_not_raises_NotImplementedError"], [1152, 2, 1, "", "assert_method_raises_NotImplementedError"], [1153, 2, 1, "", "assert_module_documentation"], [1154, 2, 1, "", "assert_property_documentation"], [1155, 2, 1, "", "assert_property_isabstract"], [1156, 2, 1, "", "assert_property_isconcrete"], [1157, 2, 1, "", "assert_property_not_raises_NotImplementedError"], [1158, 2, 1, "", "assert_property_raises_NotImplementedError"], [1159, 2, 1, "", "not_raises"], [1160, 2, 1, "", "raises"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:function", "3": "py:property", "4": "py:method"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "function", "Python function"], "3": ["py", "property", "Python property"], "4": ["py", "method", "Python method"]}, "titleterms": {"pybrop": [0, 1161, 1163, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203], "breed": [1, 1168, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1183, 1184, 1185, 1186, 1187, 1191, 1192, 1197, 1203], "arch": 2, "breedingedg": [3, 4], "check_is_breedingedg": 5, "breedinggraph": [6, 7], "check_is_breedinggraph": 8, "breedingnod": [9, 10], "check_is_breedingnod": 11, "breedingprogram": [12, 13], "check_is_breedingprogram": 14, "emigrationoper": [15, 16], "check_is_emigrationoper": 17, "germplasmbank": [18, 19], "check_is_germplasmbank": 20, "immigrationoper": [21, 22], "check_is_immigrationoper": 23, "recurrentselectionbreedingprogram": [24, 25], "check_is_recurrentselectionbreedingprogram": 26, "op": [27, 1171, 1172, 1173, 1174, 1175, 1176], "eval": [28, 1171], "evaluationoper": [29, 30], "check_is_evaluationoper": 31, "init": [32, 1172], "initializationoper": [33, 34], "check_is_initializationoper": 35, "log": [36, 1173], "logbook": [37, 38, 1173, 1183, 1184, 1185, 1186], "check_is_logbook": 39, "mate": [40, 67, 1173, 1174, 1179, 1185], "matingoper": [41, 42], "check_is_matingoper": 43, "psel": [44, 1175], "parentselectionoper": [45, 46], "check_is_parentselectionoper": 47, "ssel": [48, 1176], "survivorselectionoper": [49, 50], "check_is_survivorselectionoper": 51, "prot": [52, 1177, 1178, 1179, 1180, 1181], "bv": [53, 1177], "breedingvalueprotocol": [54, 55], "check_is_breedingvalueprotocol": 56, "meanphenotypicbreedingvalu": [57, 58], "truebreedingvalu": [59, 60], "gt": [61, 1178], "denseunphasedgenotyp": [62, 63], "genotypingprotocol": [64, 65], "check_is_genotypingprotocol": 66, "fourwaycross": [68, 69], "check_is_fourwaycross": 70, "fourwaydhcross": [71, 72], "check_is_fourwaydhcross": 73, "matingprotocol": [74, 75, 1179], "check_is_matingprotocol": 76, "selfcross": [77, 78], "check_is_selfcross": 79, "threewaycross": [80, 81], "check_is_threewaycross": 82, "threewaydhcross": [83, 84], "check_is_threewaydhcross": 85, "twowaycross": [86, 87], "check_is_twowaycross": 88, "twowaydhcross": [89, 90], "check_is_twowaydhcross": 91, "util": [92, 712, 723, 909, 1106], "mat_dh": 93, "mat_mat": 94, "mat_meiosi": 95, "pt": [96, 1180], "g_e_phenotyp": [97, 98], "phenotypingprotocol": [99, 100, 1180], "check_is_phenotypingprotocol": 101, "truephenotyp": [102, 103], "sel": [104, 1181], "binarymateselectionprotocol": [105, 106], "check_is_binarymateselectionprotocol": 107, "binaryselectionprotocol": [108, 109], "check_is_binaryselectionprotocol": 110, "estimatedbreedingvalueselect": 111, "estimatedbreedingvaluebinaryselect": 112, "estimatedbreedingvalueintegerselect": 113, "estimatedbreedingvaluerealselect": 114, "estimatedbreedingvalueselectionmixin": 115, "estimatedbreedingvaluesubsetselect": 116, "expectedmaximumbreedingvalueselect": 117, "expectedmaximumbreedingvaluebinaryselect": 118, "expectedmaximumbreedingvalueintegerselect": 119, "expectedmaximumbreedingvaluerealselect": 120, "expectedmaximumbreedingvalueselectionmixin": 121, "expectedmaximumbreedingvaluesubsetselect": 122, "familyestimatedbreedingvalueselect": 123, "familyestimatedbreedingvaluebinaryselect": 124, "familyestimatedbreedingvalueintegerselect": 125, "familyestimatedbreedingvaluerealselect": 126, "familyestimatedbreedingvalueselectionmixin": 127, "familyestimatedbreedingvaluesubsetselect": 128, "generalizedweightedgenomicestimatedbreedingvalueselect": 129, "generalizedweightedgenomicestimatedbreedingvaluebinaryselect": 130, "generalizedweightedgenomicestimatedbreedingvalueintegerselect": 131, "generalizedweightedgenomicestimatedbreedingvaluerealselect": 132, "generalizedweightedgenomicestimatedbreedingvalueselectionmixin": 133, "generalizedweightedgenomicestimatedbreedingvaluesubsetselect": 134, "genomicestimatedbreedingvalueselect": 135, "genomicestimatedbreedingvaluebinaryselect": 136, "genomicestimatedbreedingvalueintegerselect": 137, "genomicestimatedbreedingvaluerealselect": 138, "genomicestimatedbreedingvalueselectionmixin": 139, "genomicestimatedbreedingvaluesubsetselect": 140, "genotypebuilderselect": 141, "genotypebuilderselectionmixin": 142, "genotypebuildersubsetselect": 143, "integermateselectionprotocol": [144, 145], "check_is_integermateselectionprotocol": 146, "integerselectionprotocol": [147, 148], "check_is_integerselectionprotocol": 149, "l1normgenomicselect": 150, "l2normgenomicselect": 151, "l2normgenomicbinaryselect": 152, "l2normgenomicintegerselect": 153, "l2normgenomicrealselect": 154, "l2normgenomicselectionmixin": 155, "l2normgenomicsubsetselect": 156, "mateselectionprotocol": [157, 158], "check_is_mateselectionprotocol": 159, "meanexpectedheterozygosityselect": 160, "meanexpectedheterozygositybinaryselect": 161, "meanexpectedheterozygosityintegerselect": 162, "meanexpectedheterozygosityrealselect": 163, "meanexpectedheterozygosityselectionmixin": 164, "meanexpectedheterozygositysubsetselect": 165, "meangenomicrelationshipselect": 166, "meangenomicrelationshipbinaryselect": 167, "meangenomicrelationshipintegerselect": 168, "meangenomicrelationshiprealselect": 169, "meangenomicrelationshipselectionmixin": 170, "meangenomicrelationshipsubsetselect": 171, "multiobjectivegenomicselect": 172, "multiobjectivegenomicselectionmixin": 173, "multiobjectivegenomicsubsetselect": 174, "optimalcontributionselect": 175, "optimalcontributionbinaryselect": 176, "optimalcontributionintegerselect": 177, "optimalcontributionrealselect": 178, "optimalcontributionselectionmixin": 179, "optimalcontributionsubsetselect": 180, "optimalhaploidvalueselect": 181, "optimalhaploidvaluebinaryselect": 182, "optimalhaploidvalueintegerselect": 183, "optimalhaploidvaluerealselect": 184, "optimalhaploidvalueselectionmixin": 185, "optimalhaploidvaluesubsetselect": 186, "optimalpopulationvalueselect": 187, "optimalpopulationvalueselectionmixin": 188, "optimalpopulationvaluesubsetselect": 189, "randomselect": 190, "randombinaryselect": 191, "randomintegerselect": 192, "randomrealselect": 193, "randomselectionmixin": 194, "randomsubsetselect": 195, "realmateselectionprotocol": [196, 197], "check_is_realmateselectionprotocol": 198, "realselectionprotocol": [199, 200], "check_is_realselectionprotocol": 201, "selectionprotocol": [202, 203, 1181], "check_is_selectionprotocol": [204, 221], "subsetmateselectionprotocol": [205, 206], "check_is_subsetmateselectionprotocol": 207, "subsetselectionprotocol": [208, 209], "check_is_subsetselectionprotocol": 210, "unconstrainedgeneralized1normgenomicselect": 211, "generalized1normgenomicselect": 212, "unconstrainedmultiobjectivegenomicm": 213, "multiobjectivegenomicm": 214, "unconstrainedpopulationallelefrequencydistanceselect": 215, "populationallelefrequencydistanceselect": 216, "unconstrainedpopulationalleleunavailabilityselect": 217, "populationalleleunavailabilityselect": 218, "unconstrainedselectionprotocol": [219, 220], "usefulnesscriterionselect": 222, "usefulnesscriterionbinaryselect": 223, "usefulnesscriterionintegerselect": 224, "usefulnesscriterionrealselect": 225, "usefulnesscriterionselectionmixin": 226, "usefulnesscriterionsubsetselect": 227, "weightedgenomicselect": 228, "weightedgenomicbinaryselect": 229, "weightedgenomicintegerselect": 230, "weightedgenomicrealselect": 231, "weightedgenomicsubsetselect": 232, "cfg": 233, "binarymateselectionconfigur": [234, 235], "binaryselectionconfigur": [236, 237], "integermateselectionconfigur": [238, 239], "integerselectionconfigur": [240, 241], "mateselectionconfigur": [242, 243], "check_is_mateselectionconfigur": 244, "realmateselectionconfigur": [245, 246], "realselectionconfigur": [247, 248], "sampledselectionconfigurationmixin": [249, 250], "selectionconfigur": [251, 252], "check_is_selectionconfigur": 253, "simplemateselectionconfigur": [254, 255], "simpleselectionconfigur": [256, 257], "subsetmateselectionconfigur": [258, 259], "subsetselectionconfigur": [260, 261], "prob": [262, 985, 1195], "binarymateselectionproblem": [263, 264], "binaryselectionproblem": [265, 266], "check_is_binaryselectionproblem": 267, "estimatedbreedingvalueselectionproblem": 268, "estimatedbreedingvaluebinaryselectionproblem": 269, "estimatedbreedingvalueintegerselectionproblem": 270, "estimatedbreedingvaluerealselectionproblem": 271, "estimatedbreedingvalueselectionproblemmixin": 272, "estimatedbreedingvaluesubsetselectionproblem": 273, "expectedmaximumbreedingvalueselectionproblem": 274, "expectedmaximumbreedingvaluebinaryselectionproblem": 275, "expectedmaximumbreedingvalueintegerselectionproblem": 276, "expectedmaximumbreedingvaluerealselectionproblem": 277, "expectedmaximumbreedingvalueselectionproblemmixin": 278, "expectedmaximumbreedingvaluesubsetselectionproblem": 279, "familyestimatedbreedingvalueselectionproblem": 280, "familyestimatedbreedingvaluebinaryselectionproblem": 281, "familyestimatedbreedingvalueintegerselectionproblem": 282, "familyestimatedbreedingvaluerealselectionproblem": 283, "familyestimatedbreedingvalueselectionproblemmixin": 284, "familyestimatedbreedingvaluesubsetselectionproblem": 285, "generalizedweightedgenomicestimatedbreedingvalueselectionproblem": 286, "generalizedweightedgenomicestimatedbreedingvaluebinaryselectionproblem": 287, "generalizedweightedgenomicestimatedbreedingvalueintegerselectionproblem": 288, "generalizedweightedgenomicestimatedbreedingvaluerealselectionproblem": 289, "generalizedweightedgenomicestimatedbreedingvalueselectionproblemmixin": 290, "generalizedweightedgenomicestimatedbreedingvaluesubsetselectionproblem": 291, "genomicestimatedbreedingvalueselectionproblem": 292, "genomicestimatedbreedingvaluebinaryselectionproblem": 293, "genomicestimatedbreedingvalueintegerselectionproblem": 294, "genomicestimatedbreedingvaluerealselectionproblem": 295, "genomicestimatedbreedingvalueselectionproblemmixin": 296, "genomicestimatedbreedingvaluesubsetselectionproblem": 297, "genotypebuilderselectionproblem": 298, "genotypebuilderselectionproblemmixin": 299, "genotypebuildersubsetselectionproblem": 300, "integermateselectionproblem": [301, 302], "integerselectionproblem": [303, 304], "check_is_integerselectionproblem": 305, "l1normgenomicselectionproblem": 306, "l1normgenomicbinaryselectionproblem": 307, "l1normgenomicintegerselectionproblem": 308, "l1normgenomicrealselectionproblem": 309, "l1normgenomicselectionproblemmixin": 310, "l1normgenomicsubsetselectionproblem": 311, "l2normgenomicselectionproblem": 312, "l2normgenomicbinaryselectionproblem": 313, "l2normgenomicintegerselectionproblem": 314, "l2normgenomicrealselectionproblem": 315, "l2normgenomicselectionproblemmixin": 316, "l2normgenomicsubsetselectionproblem": 317, "mateselectionproblem": [318, 319], "meanexpectedheterozygosityselectionproblem": 320, "meanexpectedheterozygositybinaryselectionproblem": 321, "meanexpectedheterozygosityintegerselectionproblem": 322, "meanexpectedheterozygosityrealselectionproblem": 323, "meanexpectedheterozygosityselectionproblemmixin": 324, "meanexpectedheterozygositysubsetselectionproblem": 325, "meangenomicrelationshipselectionproblem": 326, "meangenomicrelationshipbinaryselectionproblem": 327, "meangenomicrelationshipintegerselectionproblem": 328, "meangenomicrelationshiprealselectionproblem": 329, "meangenomicrelationshipselectionproblemmixin": 330, "meangenomicrelationshipsubsetselectionproblem": 331, "multiobjectivegenomicmatingproblem": 332, "multiobjectivegenomicmatingproblemmixin": 333, "multiobjectivegenomicsubsetmatingproblem": 334, "multiobjectivegenomicselectionproblem": 335, "multiobjectivegenomicselectionproblemmixin": 336, "multiobjectivegenomicsubsetselectionproblem": 337, "optimalcontributionselectionproblem": 338, "optimalcontributionbinaryselectionproblem": 339, "optimalcontributionintegerselectionproblem": 340, "optimalcontributionrealselectionproblem": 341, "optimalcontributionselectionproblemmixin": 342, "optimalcontributionsubsetselectionproblem": 343, "optimalhaploidvalueselectionproblem": 344, "optimalhaploidvaluebinaryselectionproblem": 345, "optimalhaploidvalueintegerselectionproblem": 346, "optimalhaploidvaluerealselectionproblem": 347, "optimalhaploidvalueselectionproblemmixin": 348, "optimalhaploidvaluesubsetselectionproblem": 349, "optimalpopulationvalueselectionproblem": 350, "optimalpopulationvalueselectionproblemmixin": 351, "optimalpopulationvaluesubsetselectionproblem": 352, "randomselectionproblem": 353, "randombinaryselectionproblem": 354, "randomintegerselectionproblem": 355, "randomrealselectionproblem": 356, "randomselectionproblemmixin": 357, "randomsubsetselectionproblem": 358, "reallookaheadgeneralizedweightedgenomicselectionproblem": [359, 360], "realmateselectionproblem": [361, 362], "realselectionproblem": [363, 364], "check_is_realselectionproblem": 365, "selectionproblem": [366, 367], "check_is_selectionproblem": 368, "subsetmateselectionproblem": [369, 370], "subsetselectionproblem": [371, 372], "check_is_subsetselectionproblem": 373, "usefulnesscriterionselectionproblem": 374, "usefulnesscriterionbinarymateselectionproblem": 375, "usefulnesscriterionintegermateselectionproblem": 376, "usefulnesscriterionrealmateselectionproblem": 377, "usefulnesscriterionselectionproblemmixin": 378, "usefulnesscriterionsubsetmateselectionproblem": 379, "weightedgenomicselectionproblem": 380, "weightedgenomicbinaryselectionproblem": 381, "weightedgenomicintegerselectionproblem": 382, "weightedgenomicrealselectionproblem": 383, "weightedgenomicsubsetselectionproblem": 384, "tran": 385, "trans_decnvec_sum_eq": 386, "trans_dot": [387, 428], "trans_empti": 388, "trans_ident": 389, "trans_ndpt_to_vec_dist": [390, 433], "trans_sum": [391, 434], "soln": [392, 1013, 1196], "binarymateselectionsolut": [393, 394], "check_is_binarymateselectionsolut": 395, "binaryselectionsolut": [396, 397], "check_is_binaryselectionsolut": 398, "integermateselectionsolut": [399, 400], "check_is_integermateselectionsolut": 401, "integerselectionsolut": [402, 403], "check_is_integerselectionsolut": 404, "mateselectionsolut": [405, 406], "check_is_mateselectionsolut": 407, "realmateselectionsolut": [408, 409], "check_is_realmateselectionsolut": 410, "realselectionsolut": [411, 412], "check_is_realselectionsolut": 413, "selectionsolut": [414, 415], "check_is_selectionsolut": 416, "subsetmateselectionsolut": [417, 418], "check_is_subsetmateselectionsolut": 419, "subsetselectionsolut": [420, 421], "check_is_subsetselectionsolut": 422, "targetfn": 423, "target_neg": 424, "target_posit": 425, "target_stabil": 426, "transfn": 427, "trans_flatten": 429, "trans_identity_unconstrain": 430, "trans_inbmax_penalti": 431, "trans_max_inbreeding_constraint": 432, "trans_sum_inbmax_penalti": 435, "weightfn": 436, "weight_absolut": 437, "weight_on": 438, "core": [439, 1203], "error": [440, 1180], "error_attr_python": 441, "check_is_cal": [442, 496], "check_is_iter": 443, "error_readonli": 444, "error_generic_numpi": 445, "generic_check_ndarray_eq": 446, "generic_check_ndarray_is_squar": 447, "generic_check_ndarray_ndim": 448, "generic_check_ndarray_ndim_gteq": 449, "generic_check_ndarray_shap": 450, "generic_check_ndarray_s": 451, "generic_check_ndarray_sum": 452, "error_generic_python": 453, "generic_check_isinst": 454, "error_io_python": 455, "check_directory_exist": 456, "check_file_exist": 457, "check_path_exist": 458, "error_type_h5pi": 459, "check_is_h5py_fil": 460, "error_type_numpi": 461, "check_is_gener": 462, "check_is_generator_or_randomst": 463, "check_is_integral_or_ndarrai": 464, "check_is_number_or_ndarrai": 465, "check_is_randomst": 466, "check_is_real_or_ndarrai": 467, "check_is_ndarrai": 468, "check_is_str_or_ndarrai": 469, "check_ndarray_dtyp": 470, "check_ndarray_dtype_is_bool": 471, "check_ndarray_dtype_is_bool_or_integ": 472, "check_ndarray_dtype_is_bool_or_numb": 473, "check_ndarray_dtype_is_float16": 474, "check_ndarray_dtype_is_float32": 475, "check_ndarray_dtype_is_float64": 476, "check_ndarray_dtype_is_flo": 477, "check_ndarray_dtype_is_int16": 478, "check_ndarray_dtype_is_int32": 479, "check_ndarray_dtype_is_int64": 480, "check_ndarray_dtype_is_int8": 481, "check_ndarray_dtype_is_integ": 482, "check_ndarray_dtype_is_integer_or_flo": 483, "check_ndarray_dtype_is_numb": 484, "check_ndarray_dtype_is_object": 485, "check_ndarray_dtype_is_object_or_str": 486, "check_ndarray_dtype_is_r": 487, "check_ndarray_dtype_is_str": 488, "check_ndarray_dtype_is_unicod": 489, "error_type_panda": 490, "check_series_all_typ": 491, "check_is_pandas_datafram": 492, "error_type_python": 493, "check_sequence_all_typ": 494, "check_inherit": 495, "check_is_complex": 497, "check_is_contain": 498, "check_is_integr": 499, "check_is_integral_or_non": 500, "check_is_integral_or_inf": 501, "check_is_numb": 502, "check_is_r": 503, "check_is_sequ": 504, "check_is_array_lik": 505, "check_is_bool": 506, "check_is_byt": 507, "check_is_class": 508, "check_is_dict": 509, "check_is_float": 510, "check_is_frozenset": 511, "check_is_int": 512, "check_is_int_or_non": 513, "check_is_int_or_inf": 514, "check_is_list": 515, "check_is_list_or_tupl": 516, "check_is_rang": 517, "check_is_set": 518, "check_is_str": 519, "check_is_str_or_integr": 520, "check_is_str_or_sequ": 521, "check_is_str_or_iter": 522, "check_is_tupl": 523, "check_is_typ": 524, "check_isinst": 525, "error_value_h5pi": 526, "check_h5py_file_has_group": [527, 528], "check_h5py_file_is_writ": 529, "error_value_numpi": 530, "check_ndarray_all_gt": 531, "check_ndarray_all_gteq": 532, "check_ndarray_axis_len": 533, "check_ndarray_axis_len_eq": 534, "check_ndarray_axis_len_gt": 535, "check_ndarray_axis_len_gteq": 536, "check_ndarray_axis_len_lt": 537, "check_ndarray_axis_len_lteq": 538, "check_ndarray_eq": 539, "check_ndarray_has_valu": [540, 541], "check_ndarray_in_interv": 542, "check_ndarray_is_binari": 543, "check_ndarray_is_hypercub": 544, "check_ndarray_is_squar": 545, "check_ndarray_is_triu": 546, "check_ndarray_len_eq": 547, "check_ndarray_len_gteq": 548, "check_ndarray_len_is_multiple_of": 549, "check_ndarray_mean_is_approx": 550, "check_ndarray_ndim": 551, "check_ndarray_ndim_gteq": 552, "check_ndarray_shape_eq": 553, "check_ndarray_s": 554, "check_ndarray_std_is_approx": 555, "check_ndarray_sum": 556, "error_value_panda": 557, "check_pandas_dataframe_has_column": [558, 561], "check_pandas_dataframe_has_column_index": 559, "check_pandas_dataframe_has_column_indic": 560, "check_pandas_series_has_index": 562, "check_pandas_series_has_indic": 563, "check_pandas_series_has_valu": [564, 565], "error_value_python": 566, "check_sequence_has_index": 567, "check_sequence_has_indic": 568, "check_sequence_has_valu": [569, 570], "check_all_equ": 571, "check_dict_has_kei": 572, "check_dict_keys_all_typ": 573, "check_dict_values_all_typ": 574, "check_dict_values_have_equal_len": 575, "check_dict_values_len_eq": 576, "check_is_eq": 577, "check_is_gt": 578, "check_is_gteq": 579, "check_is_in_interval_exclus": 580, "check_is_in_interval_inclus": 581, "check_is_lt": 582, "check_is_lteq": 583, "check_is_neq": 584, "check_is_not_non": 585, "check_len": 586, "check_len_eq": 587, "check_str_valu": 588, "check_tuple_len_eq": 589, "io": 590, "csvdictinputoutput": [591, 592], "check_is_csvdictinputoutput": 593, "csvinputoutput": [594, 595], "check_is_csvinputoutput": 596, "dictinputoutput": [597, 598], "check_is_dictinputoutput": 599, "hdf5inputoutput": [600, 601], "check_is_hdf5inputoutput": 602, "npyinputoutput": [603, 604], "check_is_npyinputoutput": 605, "npzinputoutput": [606, 607], "check_is_npzinputoutput": 608, "numpyinputoutput": [609, 610], "check_is_numpyinputoutput": 611, "pandasdictinputoutput": [612, 613], "check_is_pandasdictinputoutput": 614, "pandasinputoutput": [615, 616], "check_is_pandasinputoutput": 617, "mat": 618, "densematrix": [619, 620], "check_is_densematrix": 621, "densemutablematrix": [622, 623], "check_is_densemutablematrix": 624, "densephasedmatrix": [625, 626], "check_is_densephasedmatrix": 627, "densephasedtaxavariantmatrix": [628, 629], "check_is_densephasedtaxavariantmatrix": 630, "densesquarematrix": [631, 632], "check_is_densesquarematrix": 633, "densesquaretaxamatrix": [634, 635], "check_is_densesquaretaxamatrix": 636, "densesquaretaxasquaretraitmatrix": [637, 638], "check_is_densesquaretaxasquaretraitmatrix": 639, "densesquaretaxatraitmatrix": [640, 641], "check_is_densesquaretaxatraitmatrix": 642, "densesquaretraitmatrix": [643, 644], "check_is_densesquaretraitmatrix": 645, "densetaxamatrix": [646, 647], "check_is_densetaxamatrix": 648, "densetaxatraitmatrix": [649, 650], "check_is_densetaxatraitmatrix": 651, "densetaxavariantmatrix": [652, 653], "check_is_densetaxavariantmatrix": 654, "densetraitmatrix": [655, 656], "check_is_densetraitmatrix": 657, "densevariantmatrix": [658, 659], "check_is_densevariantmatrix": 660, "groupablematrix": [661, 662], "check_is_groupablematrix": 663, "matrix": [664, 665, 1190, 1191, 1193, 1197, 1198, 1201, 1202], "check_is_matrix": 666, "mutablematrix": [667, 668], "check_is_mutablematrix": 669, "phasedmatrix": [670, 671], "check_is_phasedmatrix": 672, "phasedtaxavariantmatrix": [673, 674], "check_is_phasedtaxavariantmatrix": 675, "prunablematrix": [676, 677], "check_is_prunablematrix": 678, "sortablematrix": [679, 680], "check_is_sortablematrix": 681, "squarematrix": [682, 683], "check_is_squarematrix": 684, "squaretaxamatrix": [685, 686], "check_is_squaretaxamatrix": 687, "squaretaxasquaretraitmatrix": [688, 689], "check_is_squaretaxasquaretraitmatrix": 690, "squaretaxatraitmatrix": [691, 692], "check_is_squaretaxatraitmatrix": 693, "squaretraitmatrix": [694, 695], "check_is_squaretraitmatrix": 696, "taxamatrix": [697, 698], "check_is_taxamatrix": 699, "taxatraitmatrix": [700, 701], "check_is_taxatraitmatrix": 702, "taxavariantmatrix": [703, 704], "check_is_taxavariantmatrix": 705, "traitmatrix": [706, 707], "check_is_traitmatrix": 708, "variantmatrix": [709, 710], "check_is_variantmatrix": 711, "get_axi": 713, "random": [714, 1182, 1188, 1189], "prng": [715, 1183, 1184, 1185, 1186, 1190, 1191], "seed": [716, 1182, 1183, 1184, 1185, 1186, 1188, 1189, 1190, 1191], "spawn": 717, "sampl": [718, 1185], "axis_shuffl": 719, "outcross_shuffl": 720, "stochastic_universal_sampl": 721, "tiled_choic": [722, 984], "arrayix": 724, "flattenix": 725, "sliceaxisix": 726, "sqarrayix": 727, "triudix": 728, "triuix": 729, "xmapix": 730, "h5py": 731, "h5py_file_is_writ": 732, "save_dict_to_hdf5": 733, "haplo": 734, "haplobin": 735, "haplobin_bound": 736, "haplomat": 737, "nhaploblk_chrom": 738, "iter": 739, "iterlen": 740, "pareto": [741, 1185, 1187, 1188, 1189, 1190, 1191], "is_pareto_effici": 742, "subroutin": 743, "human2byt": 744, "matrix_is_sort": 745, "slice_to_list": 746, "slice_to_rang": 747, "srang": 748, "model": [749, 1180, 1183, 1184, 1185, 1186, 1188, 1189, 1191, 1192, 1193, 1203], "gmod": [750, 1192], "additivedominanceepistaticlineargenomicmodel": [751, 752, 1192], "check_is_additivedominanceepistaticlineargenomicmodel": 753, "additivedominancelineargenomicmodel": [754, 755, 1192], "check_is_additivedominancelineargenomicmodel": 756, "additivelineargenomicmodel": [757, 758, 1192], "check_is_additivelineargenomicmodel": 759, "coancestrylineargenomicmodel": [760, 761], "check_is_coancestrylineargenomicmodel": 762, "denseadditivedominancelineargenomicmodel": [763, 764], "check_is_denseadditivedominancelineargenomicmodel": 765, "denseadditivelineargenomicmodel": [766, 767], "check_is_denseadditivelineargenomicmodel": 768, "denselineargenomicmodel": [769, 770], "check_is_denselineargenomicmodel": 771, "genomicmodel": [772, 773, 1192], "check_is_genomicmodel": 774, "lineargenomicmodel": [775, 776, 1192], "check_is_lineargenomicmodel": 777, "nonlineargenomicmodel": [778, 779], "check_is_nonlineargenomicmodel": 780, "rrblupmodel0": [781, 784], "check_is_rrblupmodel0": 782, "gauss_seidel": 783, "rrblup_ml0": 785, "rrblup_ml0_calc_g": 786, "rrblup_ml0_calc_ztzpli": 787, "rrblup_ml0_calc_zti": 788, "rrblup_ml0_calc_d_v": 789, "rrblup_ml0_calc_etasq": 790, "rrblup_ml0_calc_ridg": 791, "rrblup_ml0_center_i": 792, "rrblup_ml0_neg2loglik_fast": 793, "rrblup_ml0_nonzero_d_v": 794, "pcvmat": 795, "additiveprogenygeneticcovariancematrix": [796, 797], "check_is_additiveprogenygeneticcovariancematrix": 798, "additiveprogenygeniccovariancematrix": [799, 800], "check_is_additiveprogenygeniccovariancematrix": 801, "denseadditiveprogenygeneticcovariancematrix": [802, 803], "check_is_denseadditiveprogenygeneticcovariancematrix": 804, "denseadditiveprogenygeniccovariancematrix": [805, 806], "check_is_denseadditiveprogenygeniccovariancematrix": 807, "densedihybriddhadditiveprogenygeneticcovariancematrix": [808, 809], "check_is_densedihybriddhadditiveprogenygeneticcovariancematrix": 810, "densedihybriddhadditiveprogenygeniccovariancematrix": [811, 812], "densefourwaydhadditiveprogenygeneticcovariancematrix": [813, 814], "check_is_densefourwaydhadditiveprogenygeneticcovariancematrix": 815, "densefourwaydhadditiveprogenygeniccovariancematrix": [816, 817], "denseprogenygeneticcovariancematrix": [818, 819], "check_is_denseprogenygeneticcovariancematrix": 820, "denseprogenygeniccovariancematrix": [821, 822], "check_is_denseprogenygeniccovariancematrix": 823, "densethreewaydhadditiveprogenygeneticcovariancematrix": [824, 825], "densethreewaydhadditiveprogenygeniccovariancematrix": [826, 827], "densetwowaydhadditiveprogenygeneticcovariancematrix": [828, 829], "densetwowaydhadditiveprogenygeniccovariancematrix": [830, 831], "progenygeneticcovariancematrix": [832, 833], "check_is_progenygeneticcovariancematrix": 834, "progenygeniccovariancematrix": [835, 836], "check_is_progenygeniccovariancematrix": 837, "vmat": [838, 1193], "additivegeneticvariancematrix": [839, 840], "check_is_additivegeneticvariancematrix": 841, "additivegenicvariancematrix": [842, 843], "check_is_additivegenicvariancematrix": 844, "denseadditivegeneticvariancematrix": [845, 846], "check_is_denseadditivegeneticvariancematrix": 847, "denseadditivegenicvariancematrix": [848, 849], "check_is_denseadditivegenicvariancematrix": 850, "densedihybriddhadditivegeneticvariancematrix": [851, 852], "check_is_densedihybriddhadditivegeneticvariancematrix": 853, "densedihybriddhadditivegenicvariancematrix": [854, 855], "densefourwaydhadditivegeneticvariancematrix": [856, 857], "check_is_densefourwaydhadditivegeneticvariancematrix": 858, "densefourwaydhadditivegenicvariancematrix": [859, 860], "densegeneticvariancematrix": [861, 862], "check_is_densegeneticvariancematrix": 863, "densegenicvariancematrix": [864, 865], "check_is_densegenicvariancematrix": 866, "densethreewaydhadditivegeneticvariancematrix": [867, 868], "densethreewaydhadditivegenicvariancematrix": [869, 870], "densetwowaydhadditivegeneticvariancematrix": [871, 872], "densetwowaydhadditivegenicvariancematrix": [873, 874], "geneticvariancematrix": [875, 876, 1193], "check_is_geneticvariancematrix": 877, "genicvariancematrix": [878, 879, 1193], "check_is_genicvariancematrix": 880, "fcty": [881, 1062], "additivegeneticvariancematrixfactori": [882, 883], "check_is_additivegeneticvariancematrixfactori": 884, "additivegenicvariancematrixfactori": [885, 886], "check_is_additivegenicvariancematrixfactori": 887, "densedihybriddhadditivegeneticvariancematrixfactori": [888, 889], "check_is_densedihybriddhadditivegeneticvariancematrixfactori": 890, "densefourwaydhadditivegeneticvariancematrixfactori": [891, 892], "check_is_densefourwaydhadditivegeneticvariancematrixfactori": 893, "densethreewaydhadditivegeneticvariancematrixfactori": [894, 895], "check_is_densethreewaydhadditivegeneticvariancematrixfactori": 896, "densetwowaydhadditivegeneticvariancematrixfactori": [897, 898], "check_is_densetwowaydhadditivegeneticvariancematrixfactori": 899, "densetwowaydhadditivegenicvariancematrixfactori": [900, 901], "check_is_densetwowaydhadditivegenicvariancematrixfactori": 902, "geneticvariancematrixfactori": [903, 904], "check_is_geneticvariancematrixfactori": 905, "genicvariancematrixfactori": [906, 907], "check_is_genicvariancematrixfactori": 908, "cov_d1": 910, "cov_d1st": 911, "cov_d2": 912, "cov_d2st": 913, "rprob_fili": 914, "opt": [915, 1194, 1195, 1196], "algo": [916, 1194], "binarygeneticalgorithm": [917, 918], "binaryoptimizationalgorithm": [919, 920], "check_is_binaryoptimizationalgorithm": 921, "integergeneticalgorithm": [922, 923], "integeroptimizationalgorithm": [924, 925], "check_is_integeroptimizationalgorithm": 926, "nsga2binarygeneticalgorithm": [927, 928], "nsga2integergeneticalgorithm": [929, 930], "nsga2memeticsubsetgeneticalgorithm": 931, "nsga2mutatorasubsetgeneticalgorithm": 932, "nsga2mutatorbsubsetgeneticalgorithm": 933, "nsga2steepestdescentsubsetgeneticalgorithm": 934, "nsga2stochasticdescentsubsetgeneticalgorithm": 935, "nsga2realgeneticalgorithm": [936, 937], "nsga2subsetgeneticalgorithm": [938, 939], "nsga3subsetgeneticalgorithm": [940, 941], "optimizationalgorithm": [942, 943], "check_is_optimizationalgorithm": [944, 965], "realgeneticalgorithm": [945, 946], "realoptimizationalgorithm": [947, 948], "check_is_realoptimizationalgorithm": 949, "sortingsteepestdescentsubsethillclimb": [950, 951], "sortingsubsetoptimizationalgorithm": [952, 953], "steepestdescentsubsethillclimb": [954, 955], "subsetgeneticalgorithm": [956, 957], "subsetoptimizationalgorithm": [958, 959], "check_is_subsetoptimizationalgorithm": 960, "unconstrainednsga2setgeneticalgorithm": [961, 962], "unconstrainedoptimizationalgorithm": [963, 964], "unconstrainedsetgeneticalgorithm": [966, 967], "unconstrainedsteepestascentsethillclimb": [968, 969], "pymoo_addon": 970, "integerpolynomialmut": 971, "integersimulatedbinarycrossov": 972, "multiobjectivesteepestdescenthillclimbermut": 973, "multiobjectivestochasticdescenthillclimbermut": 974, "multiobjectivestochastichillclimbermut": 975, "mutatora": 976, "mutatorb": 977, "mutatorf": 978, "reducedexchangecrossov": 979, "citat": [979, 980], "reducedexchangemut": 980, "stochastichillclimbermut": 981, "subsetrandomsampl": 982, "domin": [983, 1192], "binaryproblem": [986, 987], "check_binaryproblem_is_multi_object": 988, "check_binaryproblem_is_single_object": 989, "check_is_binaryproblem": 990, "functionweight": [991, 992], "maximizingfunctionweight": 993, "minimizingfunctionweight": 994, "integerproblem": [995, 996], "check_integerproblem_is_multi_object": 997, "check_integerproblem_is_single_object": 998, "check_is_integerproblem": 999, "problem": [1000, 1001, 1181, 1190, 1194, 1195, 1196], "check_is_problem": 1002, "realproblem": [1003, 1004], "check_realproblem_is_multi_object": 1005, "check_realproblem_is_single_object": 1006, "check_is_realproblem": 1007, "subsetproblem": [1008, 1009], "check_subsetproblem_is_multi_object": 1010, "check_subsetproblem_is_single_object": 1011, "check_is_subsetproblem": 1012, "binarysolut": [1014, 1015], "check_is_binarysolut": 1016, "integersolut": [1017, 1018], "check_is_integersolut": 1019, "realsolut": [1020, 1021], "check_is_realsolut": 1022, "solut": [1023, 1024, 1195, 1196], "check_is_solut": 1025, "subsetsolut": [1026, 1027], "check_is_subsetsolut": 1028, "popgen": [1029, 1197, 1198, 1199, 1200, 1201, 1202], "bvmat": [1030, 1197], "breedingvaluematrix": [1031, 1032, 1197], "check_is_breedingvaluematrix": 1033, "densebreedingvaluematrix": [1034, 1035], "check_is_densebreedingvaluematrix": 1036, "denseestimatedbreedingvaluematrix": [1037, 1038], "check_is_denseestimatedbreedingvaluematrix": 1039, "densegenomicestimatedbreedingvaluematrix": [1040, 1041], "check_is_densegenomicestimatedbreedingvaluematrix": 1042, "cmat": [1043, 1198], "coancestrymatrix": [1044, 1045, 1198], "check_is_coancestrymatrix": 1046, "densecoancestrymatrix": [1047, 1048], "check_is_densecoancestrymatrix": 1049, "densegeneralizedweightedcoancestrymatrix": [1050, 1051], "check_is_densegeneralizedweightedcoancestrymatrix": 1052, "densemolecularcoancestrymatrix": [1053, 1054], "check_is_densemolecularcoancestrymatrix": 1055, "densevanradencoancestrymatrix": [1056, 1057], "check_is_densevanradencoancestrymatrix": 1058, "denseyangcoancestrymatrix": [1059, 1060], "check_is_denseyangcoancestrymatrix": 1061, "coancestrymatrixfactori": [1063, 1064], "check_is_coancestrymatrixfactori": 1065, "densecoancestrymatrixfactori": [1066, 1067], "check_is_densecoancestrymatrixfactori": 1068, "densegeneralizedweightedcoancestrymatrixfactori": [1069, 1070], "check_is_densegeneralizedweightedcoancestrymatrixfactori": 1071, "densemolecularcoancestrymatrixfactori": [1072, 1073], "check_is_densemolecularcoancestrymatrixfactori": 1074, "densevanradencoancestrymatrixfactori": [1075, 1076], "check_is_densevanradencoancestrymatrixfactori": 1077, "denseyangcoancestrymatrixfactori": [1078, 1079], "check_is_denseyangcoancestrymatrixfactori": 1080, "gmap": [1081, 1199, 1200], "densegeneticmappablematrix": [1082, 1083], "check_is_densegeneticmappablematrix": 1084, "extendedgeneticmap": [1085, 1086], "check_is_extendedgeneticmap": 1087, "geneticmap": [1088, 1089, 1200], "check_is_geneticmap": 1090, "geneticmapfunct": [1091, 1092], "check_is_geneticmapfunct": 1093, "geneticmappablematrix": [1094, 1095], "check_is_geneticmappablematrix": 1096, "haldanemapfunct": [1097, 1098], "check_is_haldanemapfunct": 1099, "kosambimapfunct": [1100, 1101], "check_is_kosambimapfunct": 1102, "standardgeneticmap": [1103, 1104], "check_is_standardgeneticmap": 1105, "cm2d": 1107, "gmat": [1108, 1201, 1202], "densegenotypematrix": [1109, 1110], "check_is_densegenotypematrix": 1111, "densephasedgenotypematrix": [1112, 1113], "check_densephasedgenotypematrix_has_vrnt_xoprob": 1114, "check_is_densephasedgenotypematrix": 1115, "genotypematrix": [1116, 1117, 1198, 1201], "check_genotypematrix_has_taxa": 1118, "check_is_genotypematrix": 1119, "haplotypematrix": [1120, 1121], "check_is_haplotypematrix": 1122, "phasedgenotypematrix": [1123, 1124, 1202], "check_is_phasedgenotypematrix": 1125, "phasedhaplotypematrix": [1126, 1127], "check_is_phasedhaplotypematrix": 1128, "test": 1129, "assert_python": 1130, "assert_class_document": 1131, "assert_class_isabstract": 1132, "assert_class_isconcret": 1133, "assert_class_ismixin": 1134, "assert_class_issemiabstract": 1135, "assert_classmethod_document": 1136, "assert_classmethod_isabstract": 1137, "assert_classmethod_isconcret": 1138, "assert_classmethod_not_raises_notimplementederror": 1139, "assert_classmethod_raises_notimplementederror": 1140, "assert_docstr": 1141, "assert_function_document": 1142, "assert_function_isabstract": 1143, "assert_function_isconcret": 1144, "assert_function_not_raises_notimplementederror": 1145, "assert_function_raises_notimplementederror": 1146, "assert_hasattr": 1147, "assert_method_document": 1148, "assert_method_isabstract": 1149, "assert_method_isconcret": 1150, "assert_method_not_raises_notimplementederror": 1151, "assert_method_raises_notimplementederror": 1152, "assert_module_document": 1153, "assert_property_document": 1154, "assert_property_isabstract": 1155, "assert_property_isconcret": 1156, "assert_property_not_raises_notimplementederror": 1157, "assert_property_raises_notimplementederror": 1158, "not_rais": 1159, "rais": 1160, "advanc": [1161, 1169], "usag": [1161, 1203], "contribut": [1163, 1191], "frequent": 1164, "ask": 1164, "question": 1164, "implement": [1165, 1181], "softwar": [1165, 1166], "architectur": [1165, 1166], "philosophi": [1166, 1168], "solid": 1166, "design": 1166, "principl": 1166, "how": 1166, "us": [1166, 1169, 1185], "singl": [1166, 1181, 1184, 1186, 1187, 1194, 1195, 1196], "responsibl": 1166, "srp": 1166, "open": 1166, "close": 1166, "ocp": 1166, "liskov": 1166, "substitutuion": 1166, "lsp": 1166, "interfac": [1166, 1181], "segreg": 1166, "isp": 1166, "depend": [1166, 1169], "invers": [1166, 1198], "dip": 1166, "fundament": [1167, 1168], "simul": [1168, 1179, 1183, 1184, 1185, 1186, 1187, 1203], "data": [1168, 1183, 1184, 1185, 1186, 1188, 1189, 1190, 1191], "type": 1168, "protocol": [1168, 1177, 1178, 1179, 1180, 1181, 1183, 1184, 1185, 1186, 1203], "oper": [1168, 1171, 1172, 1174, 1175, 1176, 1185, 1203], "get": 1169, "start": 1169, "basic": 1169, "instal": 1169, "python": 1169, "requir": [1169, 1183, 1184, 1185, 1186, 1188, 1189, 1190, 1191], "packag": 1169, "releas": 1169, "version": 1169, "program": [1169, 1171, 1172, 1173, 1174, 1175, 1176, 1183, 1184, 1185, 1186, 1187, 1203], "knowledg": 1169, "prerequisit": 1169, "linux": 1169, "development": 1169, "librari": [1169, 1185], "command": 1169, "main": [1170, 1183, 1184, 1185, 1186], "page": 1170, "what": 1170, "i": [1170, 1183, 1184, 1198], "user": 1170, "guid": 1170, "content": 1170, "indic": 1170, "tabl": 1170, "evalu": [1171, 1173, 1185, 1195], "class": [1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1190, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202], "famili": [1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1183, 1184, 1185, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202], "overview": [1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202], "summari": [1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202], "modul": [1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1183, 1184, 1185, 1186, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203], "properti": [1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1192, 1193, 1195, 1196, 1197, 1198, 1200, 1201, 1202], "load": [1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1183, 1184, 1185, 1186, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202], "defin": [1171, 1172, 1173, 1174, 1175, 1176, 1185, 1190], "creat": [1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1191, 1192, 1193, 1197, 1198, 1200, 1201, 1202], "individu": [1171, 1178, 1180, 1190], "initi": [1172, 1173, 1185, 1186], "state": 1173, "after": 1173, "parent": [1173, 1175, 1185], "select": [1173, 1175, 1176, 1181, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1191, 1192, 1193, 1197, 1198, 1201, 1202], "survivor": [1173, 1176, 1185], "reset": 1173, "write": [1173, 1202], "file": [1173, 1183, 1184, 1185, 1186, 1188, 1189, 1190, 1191, 1192, 1193, 1197, 1198, 1200, 1201, 1202], "individiu": 1174, "valu": [1177, 1183, 1184, 1185, 1186, 1191, 1192, 1197, 1198], "estim": [1177, 1183, 1184, 1185, 1186, 1188, 1189, 1190, 1191, 1192], "genotyp": [1178, 1185, 1188, 1189, 1190, 1191, 1192, 1201, 1202], "from": [1178, 1183, 1184, 1185, 1186, 1188, 1189, 1190, 1191, 1192, 1193, 1197, 1198, 1200, 1201, 1202], "genom": [1178, 1180, 1183, 1184, 1185, 1186, 1188, 1189, 1191, 1192, 1193, 1203], "gener": [1179, 1181, 1182, 1183, 1184, 1185, 1186, 1188, 1189, 1192, 1193, 1197, 1198, 1201, 1202], "progeni": 1179, "phenotyp": [1180, 1183, 1184, 1185, 1186], "varianc": [1180, 1183, 1192, 1193, 1197], "set": [1180, 1185], "trait": [1180, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1191, 1192, 1193, 1197], "herit": 1180, "abstract": [1181, 1192], "concret": [1181, 1192], "optim": [1181, 1191, 1194, 1195, 1196, 1203], "algorithm": [1181, 1185, 1190, 1194], "setup": [1181, 1183, 1184, 1185], "unconstrain": [1181, 1183, 1184], "constrain": [1181, 1183, 1184], "object": [1181, 1183, 1184, 1185, 1186, 1188, 1189, 1190, 1191, 1194, 1195, 1196, 1198, 1199], "multi": [1181, 1185, 1187, 1194, 1195, 1196], "number": [1182, 1188, 1189, 1190], "multipl": 1182, "pseudorandom": 1182, "bi": [1183, 1185, 1188, 1189, 1190, 1191], "preliminari": [1183, 1184, 1185, 1186, 1190], "global": [1183, 1184, 1185, 1186, 1188, 1189, 1190, 1191], "paramet": [1183, 1184, 1185], "genet": [1183, 1184, 1185, 1186, 1190, 1192, 1193, 1199, 1200, 1203], "map": [1183, 1184, 1185, 1186, 1199, 1200], "text": [1183, 1184, 1185, 1186], "function": [1183, 1184, 1185, 1186, 1193, 1199], "vcf": [1183, 1184, 1185, 1186, 1188, 1189, 1190, 1191, 1201, 1202], "construct": [1183, 1184, 1185, 1186, 1188, 1189, 1190, 1191, 1194, 1195, 1196, 1199], "build": [1183, 1184, 1200], "founder": [1183, 1184, 1185, 1186], "popul": [1183, 1184, 1185, 1192, 1201, 1203], "run": [1183, 1184], "burn": [1183, 1184, 1185, 1186], "In": [1183, 1184, 1185, 1193, 1197, 1198, 1201, 1202], "randomli": [1183, 1184, 1185, 1186], "interm": [1183, 1184, 1185, 1186], "nrandmat": [1183, 1184, 1185], "within": [1183, 1184, 1185], "cohort": [1183, 1184, 1185], "structur": [1183, 1184, 1185], "until": [1183, 1184], "meh": [1183, 1184], "slightli": [1183, 1184], "less": [1183, 1184], "than": [1183, 1184], "0": [1183, 1184], "30": [1183, 1184], "ebv": [1183, 1186], "subset": [1183, 1188, 1189, 1191], "an": [1183, 1184, 1191], "make": [1183, 1184], "statist": [1183, 1184, 1197, 1198, 1201, 1202], "record": [1183, 1184], "helper": [1183, 1184, 1185], "60": [1183, 1184, 1186], "copi": [1183, 1184, 1192, 1193, 1197, 1198, 1200, 1201, 1202], "rudimentari": [1183, 1184, 1186], "loop": [1183, 1184, 1186], "save": [1183, 1184, 1186, 1201, 1202], "result": [1183, 1184, 1185, 1186], "visual": [1183, 1184, 1186, 1187, 1188, 1189, 1190, 1191], "matplotlib": [1183, 1184, 1186, 1188, 1189, 1190, 1191], "true": [1183, 1184, 1186], "tbv": [1183, 1184, 1186], "mean": [1183, 1184, 1185, 1197, 1198, 1201], "expect": [1183, 1184, 1185, 1201], "heterozygos": [1183, 1184, 1185, 1201], "standard": [1183, 1184, 1197, 1203], "deviat": [1183, 1184, 1197], "genic": [1183, 1192, 1193], "marker": [1185, 1200, 1201, 1202], "bootstrap": 1185, "begin": 1185, "burnin": 1185, "bree": 1185, "univers": 1185, "collect": 1185, "assembl": 1185, "evolv": 1185, "export": [1185, 1192, 1193, 1197, 1198, 1201], "panda": [1185, 1192, 1193, 1197, 1198], "datafram": [1185, 1192, 1193, 1197, 1198], "plot": 1185, "import": 1185, "variabl": 1185, "breakpoint": 1185, "frontier": [1185, 1187, 1188, 1189, 1190, 1191], "over": 1185, "time": 1185, "20": 1186, "exampl": [1187, 1203], "pre": 1187, "built": 1187, "strategi": 1187, "custom": [1187, 1190], "gebv": [1188, 1189], "weight": 1189, "germplasm": 1190, "panel": 1190, "reduct": 1190, "scenario": 1190, "1": 1190, "minim": [1190, 1194], "related": 1190, "calcul": [1190, 1192, 1193, 1198, 1199], "kinship": [1190, 1198], "its": 1190, "decomposit": 1190, "2": 1190, "loss": 1190, "allel": [1190, 1192, 1201], "extract": 1190, "numpi": [1190, 1192, 1193, 1197, 1198, 1200, 1201, 1202], "arrai": [1190, 1192, 1193, 1197, 1198, 1200, 1201, 1202], "tri": 1191, "static": 1191, "imag": 1191, "anim": 1191, "linear": 1192, "addit": 1192, "epistat": 1192, "coeffici": 1192, "raw": 1192, "dictionari": 1192, "csv": [1192, 1193, 1197, 1198], "name": 1192, "hdf5": [1192, 1193, 1197, 1198, 1201, 1202], "shallow": [1192, 1193, 1197, 1198, 1200, 1201], "deep": [1192, 1193, 1197, 1198, 1200, 1201], "predict": 1192, "method": [1192, 1198], "score": 1192, "accuraci": 1192, "term": 1192, "bulmer": 1192, "effect": 1192, "limit": 1192, "upper": 1192, "lower": 1192, "favor": 1192, "metric": 1192, "deleteri": 1192, "matric": [1193, 1197, 1198, 1201, 1202], "taxa": [1193, 1197, 1198, 1201, 1202], "squar": [1193, 1198], "On": [1193, 1197, 1198, 1201, 1202], "element": [1193, 1197, 1198, 1200, 1201, 1202], "manipul": [1193, 1197, 1198, 1201, 1202], "adjoin": [1193, 1197, 1198, 1201, 1202], "delet": [1193, 1197, 1198, 1201, 1202], "insert": [1193, 1197, 1198, 1201, 1202], "place": [1193, 1197, 1198, 1201, 1202], "append": [1193, 1197, 1198, 1201, 1202], "remov": [1193, 1197, 1198, 1200, 1201, 1202], "incorpor": [1193, 1197, 1198, 1201, 1202], "concaten": [1193, 1197, 1198, 1201, 1202], "group": [1193, 1197, 1198, 1200, 1201, 1202], "sort": [1193, 1197, 1198, 1200, 1201, 1202], "reorder": [1193, 1197, 1198, 1200, 1201, 1202], "lexsort": [1193, 1197, 1198, 1200, 1201, 1202], "determin": [1193, 1198], "whether": 1193, "all": 1193, "ax": 1193, "ar": 1193, "equal": 1193, "length": 1193, "pymoo": 1195, "specif": [1195, 1198], "deriv": 1195, "candid": 1195, "maximum": [1197, 1198], "each": 1197, "minimum": [1197, 1198], "rang": 1197, "unscal": 1197, "de": 1197, "center": 1197, "coancestri": 1198, "retriev": 1198, "format": 1198, "posit": [1198, 1200], "semidefinit": 1198, "appli": 1198, "jitter": 1198, "along": 1198, "diagon": 1198, "attain": 1198, "inbreed": 1198, "recombin": 1199, "probabl": 1199, "distanc": 1199, "sequenti": 1199, "pairwis": 1199, "read": 1200, "variant": [1200, 1201, 1202], "spline": 1200, "congruenc": 1200, "check": 1200, "discrep": 1200, "interpol": 1200, "count": 1201, "frequenc": 1201, "polymorph": 1201, "presenc": 1201, "minor": 1201, "phase": 1202, "infrastructur": 1203}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx": 60}, "alltitles": {"pybrops": [[0, "module-pybrops"]], "breed": [[1, "module-pybrops.breed"]], "arch": [[2, "module-pybrops.breed.arch"]], "BreedingEdge": [[3, "module-pybrops.breed.arch.BreedingEdge"], [4, "breedingedge"]], "check_is_BreedingEdge": [[5, "check-is-breedingedge"]], "BreedingGraph": [[6, "module-pybrops.breed.arch.BreedingGraph"], [7, "breedinggraph"]], "check_is_BreedingGraph": [[8, "check-is-breedinggraph"]], "BreedingNode": [[9, "module-pybrops.breed.arch.BreedingNode"], [10, "breedingnode"]], "check_is_BreedingNode": [[11, "check-is-breedingnode"]], "BreedingProgram": [[12, "module-pybrops.breed.arch.BreedingProgram"], [13, "breedingprogram"]], "check_is_BreedingProgram": [[14, "check-is-breedingprogram"]], "EmigrationOperator": [[15, "module-pybrops.breed.arch.EmigrationOperator"], [16, "emigrationoperator"]], "check_is_EmigrationOperator": [[17, "check-is-emigrationoperator"]], "GermplasmBank": [[18, "module-pybrops.breed.arch.GermplasmBank"], [19, "germplasmbank"]], "check_is_GermplasmBank": [[20, "check-is-germplasmbank"]], "ImmigrationOperator": [[21, "module-pybrops.breed.arch.ImmigrationOperator"], [22, "immigrationoperator"]], "check_is_ImmigrationOperator": [[23, "check-is-immigrationoperator"]], "RecurrentSelectionBreedingProgram": [[24, "module-pybrops.breed.arch.RecurrentSelectionBreedingProgram"], [25, "recurrentselectionbreedingprogram"]], "check_is_RecurrentSelectionBreedingProgram": [[26, "check-is-recurrentselectionbreedingprogram"]], "op": [[27, "module-pybrops.breed.op"]], "eval": [[28, "module-pybrops.breed.op.eval"]], "EvaluationOperator": [[29, "module-pybrops.breed.op.eval.EvaluationOperator"], [30, "evaluationoperator"]], "check_is_EvaluationOperator": [[31, "check-is-evaluationoperator"]], "init": [[32, "module-pybrops.breed.op.init"]], "InitializationOperator": [[33, "module-pybrops.breed.op.init.InitializationOperator"], [34, "initializationoperator"]], "check_is_InitializationOperator": [[35, "check-is-initializationoperator"]], "log": [[36, "module-pybrops.breed.op.log"]], "Logbook": [[37, "module-pybrops.breed.op.log.Logbook"], [38, "logbook"]], "check_is_Logbook": [[39, "check-is-logbook"]], "mate": [[40, "module-pybrops.breed.op.mate"], [67, "module-pybrops.breed.prot.mate"]], "MatingOperator": [[41, "module-pybrops.breed.op.mate.MatingOperator"], [42, "matingoperator"]], "check_is_MatingOperator": [[43, "check-is-matingoperator"]], "psel": [[44, "module-pybrops.breed.op.psel"]], "ParentSelectionOperator": [[45, "module-pybrops.breed.op.psel.ParentSelectionOperator"], [46, "parentselectionoperator"]], "check_is_ParentSelectionOperator": [[47, "check-is-parentselectionoperator"]], "ssel": [[48, "module-pybrops.breed.op.ssel"]], "SurvivorSelectionOperator": [[49, "module-pybrops.breed.op.ssel.SurvivorSelectionOperator"], [50, "survivorselectionoperator"]], "check_is_SurvivorSelectionOperator": [[51, "check-is-survivorselectionoperator"]], "prot": [[52, "module-pybrops.breed.prot"]], "bv": [[53, "module-pybrops.breed.prot.bv"]], "BreedingValueProtocol": [[54, "module-pybrops.breed.prot.bv.BreedingValueProtocol"], [55, "breedingvalueprotocol"]], "check_is_BreedingValueProtocol": [[56, "check-is-breedingvalueprotocol"]], "MeanPhenotypicBreedingValue": [[57, "module-pybrops.breed.prot.bv.MeanPhenotypicBreedingValue"], [58, "meanphenotypicbreedingvalue"]], "TrueBreedingValue": [[59, "module-pybrops.breed.prot.bv.TrueBreedingValue"], [60, "truebreedingvalue"]], "gt": [[61, "module-pybrops.breed.prot.gt"]], "DenseUnphasedGenotyping": [[62, "module-pybrops.breed.prot.gt.DenseUnphasedGenotyping"], [63, "denseunphasedgenotyping"]], "GenotypingProtocol": [[64, "module-pybrops.breed.prot.gt.GenotypingProtocol"], [65, "genotypingprotocol"]], "check_is_GenotypingProtocol": [[66, "check-is-genotypingprotocol"]], "FourWayCross": [[68, "module-pybrops.breed.prot.mate.FourWayCross"], [69, "fourwaycross"]], "check_is_FourWayCross": [[70, "check-is-fourwaycross"]], "FourWayDHCross": [[71, "module-pybrops.breed.prot.mate.FourWayDHCross"], [72, "fourwaydhcross"]], "check_is_FourWayDHCross": [[73, "check-is-fourwaydhcross"]], "MatingProtocol": [[74, "module-pybrops.breed.prot.mate.MatingProtocol"], [75, "matingprotocol"]], "check_is_MatingProtocol": [[76, "check-is-matingprotocol"]], "SelfCross": [[77, "module-pybrops.breed.prot.mate.SelfCross"], [78, "selfcross"]], "check_is_SelfCross": [[79, "check-is-selfcross"]], "ThreeWayCross": [[80, "module-pybrops.breed.prot.mate.ThreeWayCross"], [81, "threewaycross"]], "check_is_ThreeWayCross": [[82, "check-is-threewaycross"]], "ThreeWayDHCross": [[83, "module-pybrops.breed.prot.mate.ThreeWayDHCross"], [84, "threewaydhcross"]], "check_is_ThreeWayDHCross": [[85, "check-is-threewaydhcross"]], "TwoWayCross": [[86, "module-pybrops.breed.prot.mate.TwoWayCross"], [87, "twowaycross"]], "check_is_TwoWayCross": [[88, "check-is-twowaycross"]], "TwoWayDHCross": [[89, "module-pybrops.breed.prot.mate.TwoWayDHCross"], [90, "twowaydhcross"]], "check_is_TwoWayDHCross": [[91, "check-is-twowaydhcross"]], "util": [[92, "module-pybrops.breed.prot.mate.util"], [712, "module-pybrops.core.mat.util"], [723, "module-pybrops.core.util"], [909, "module-pybrops.model.vmat.util"], [1106, "module-pybrops.popgen.gmap.util"]], "mat_dh": [[93, "mat-dh"]], "mat_mate": [[94, "mat-mate"]], "mat_meiosis": [[95, "mat-meiosis"]], "pt": [[96, "module-pybrops.breed.prot.pt"]], "G_E_Phenotyping": [[97, "module-pybrops.breed.prot.pt.G_E_Phenotyping"], [98, "g-e-phenotyping"]], "PhenotypingProtocol": [[99, "module-pybrops.breed.prot.pt.PhenotypingProtocol"], [100, "phenotypingprotocol"]], "check_is_PhenotypingProtocol": [[101, "check-is-phenotypingprotocol"]], "TruePhenotyping": [[102, "module-pybrops.breed.prot.pt.TruePhenotyping"], [103, "truephenotyping"]], "sel": [[104, "module-pybrops.breed.prot.sel"]], "BinaryMateSelectionProtocol": [[105, "module-pybrops.breed.prot.sel.BinaryMateSelectionProtocol"], [106, "binarymateselectionprotocol"]], "check_is_BinaryMateSelectionProtocol": [[107, "check-is-binarymateselectionprotocol"]], "BinarySelectionProtocol": [[108, "module-pybrops.breed.prot.sel.BinarySelectionProtocol"], [109, "binaryselectionprotocol"]], "check_is_BinarySelectionProtocol": [[110, "check-is-binaryselectionprotocol"]], "EstimatedBreedingValueSelection": [[111, "module-pybrops.breed.prot.sel.EstimatedBreedingValueSelection"]], "EstimatedBreedingValueBinarySelection": [[112, "estimatedbreedingvaluebinaryselection"]], "EstimatedBreedingValueIntegerSelection": [[113, "estimatedbreedingvalueintegerselection"]], "EstimatedBreedingValueRealSelection": [[114, "estimatedbreedingvaluerealselection"]], "EstimatedBreedingValueSelectionMixin": [[115, "estimatedbreedingvalueselectionmixin"]], "EstimatedBreedingValueSubsetSelection": [[116, "estimatedbreedingvaluesubsetselection"]], "ExpectedMaximumBreedingValueSelection": [[117, "module-pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection"]], "ExpectedMaximumBreedingValueBinarySelection": [[118, "expectedmaximumbreedingvaluebinaryselection"]], "ExpectedMaximumBreedingValueIntegerSelection": [[119, "expectedmaximumbreedingvalueintegerselection"]], "ExpectedMaximumBreedingValueRealSelection": [[120, "expectedmaximumbreedingvaluerealselection"]], "ExpectedMaximumBreedingValueSelectionMixin": [[121, "expectedmaximumbreedingvalueselectionmixin"]], "ExpectedMaximumBreedingValueSubsetSelection": [[122, "expectedmaximumbreedingvaluesubsetselection"]], "FamilyEstimatedBreedingValueSelection": [[123, "module-pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection"]], "FamilyEstimatedBreedingValueBinarySelection": [[124, "familyestimatedbreedingvaluebinaryselection"]], "FamilyEstimatedBreedingValueIntegerSelection": [[125, "familyestimatedbreedingvalueintegerselection"]], "FamilyEstimatedBreedingValueRealSelection": [[126, "familyestimatedbreedingvaluerealselection"]], "FamilyEstimatedBreedingValueSelectionMixin": [[127, "familyestimatedbreedingvalueselectionmixin"]], "FamilyEstimatedBreedingValueSubsetSelection": [[128, "familyestimatedbreedingvaluesubsetselection"]], "GeneralizedWeightedGenomicEstimatedBreedingValueSelection": [[129, "module-pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection"]], "GeneralizedWeightedGenomicEstimatedBreedingValueBinarySelection": [[130, "generalizedweightedgenomicestimatedbreedingvaluebinaryselection"]], "GeneralizedWeightedGenomicEstimatedBreedingValueIntegerSelection": [[131, "generalizedweightedgenomicestimatedbreedingvalueintegerselection"]], "GeneralizedWeightedGenomicEstimatedBreedingValueRealSelection": [[132, "generalizedweightedgenomicestimatedbreedingvaluerealselection"]], "GeneralizedWeightedGenomicEstimatedBreedingValueSelectionMixin": [[133, "generalizedweightedgenomicestimatedbreedingvalueselectionmixin"]], "GeneralizedWeightedGenomicEstimatedBreedingValueSubsetSelection": [[134, "generalizedweightedgenomicestimatedbreedingvaluesubsetselection"]], "GenomicEstimatedBreedingValueSelection": [[135, "module-pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection"]], "GenomicEstimatedBreedingValueBinarySelection": [[136, "genomicestimatedbreedingvaluebinaryselection"]], "GenomicEstimatedBreedingValueIntegerSelection": [[137, "genomicestimatedbreedingvalueintegerselection"]], "GenomicEstimatedBreedingValueRealSelection": [[138, "genomicestimatedbreedingvaluerealselection"]], "GenomicEstimatedBreedingValueSelectionMixin": [[139, "genomicestimatedbreedingvalueselectionmixin"]], "GenomicEstimatedBreedingValueSubsetSelection": [[140, "genomicestimatedbreedingvaluesubsetselection"]], "GenotypeBuilderSelection": [[141, "module-pybrops.breed.prot.sel.GenotypeBuilderSelection"]], "GenotypeBuilderSelectionMixin": [[142, "genotypebuilderselectionmixin"]], "GenotypeBuilderSubsetSelection": [[143, "genotypebuildersubsetselection"]], "IntegerMateSelectionProtocol": [[144, "module-pybrops.breed.prot.sel.IntegerMateSelectionProtocol"], [145, "integermateselectionprotocol"]], "check_is_IntegerMateSelectionProtocol": [[146, "check-is-integermateselectionprotocol"]], "IntegerSelectionProtocol": [[147, "module-pybrops.breed.prot.sel.IntegerSelectionProtocol"], [148, "integerselectionprotocol"]], "check_is_IntegerSelectionProtocol": [[149, "check-is-integerselectionprotocol"]], "L1NormGenomicSelection": [[150, "module-pybrops.breed.prot.sel.L1NormGenomicSelection"]], "L2NormGenomicSelection": [[151, "module-pybrops.breed.prot.sel.L2NormGenomicSelection"]], "L2NormGenomicBinarySelection": [[152, "l2normgenomicbinaryselection"]], "L2NormGenomicIntegerSelection": [[153, "l2normgenomicintegerselection"]], "L2NormGenomicRealSelection": [[154, "l2normgenomicrealselection"]], "L2NormGenomicSelectionMixin": [[155, "l2normgenomicselectionmixin"]], "L2NormGenomicSubsetSelection": [[156, "l2normgenomicsubsetselection"]], "MateSelectionProtocol": [[157, "module-pybrops.breed.prot.sel.MateSelectionProtocol"], [158, "mateselectionprotocol"]], "check_is_MateSelectionProtocol": [[159, "check-is-mateselectionprotocol"]], "MeanExpectedHeterozygositySelection": [[160, "module-pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection"]], "MeanExpectedHeterozygosityBinarySelection": [[161, "meanexpectedheterozygositybinaryselection"]], "MeanExpectedHeterozygosityIntegerSelection": [[162, "meanexpectedheterozygosityintegerselection"]], "MeanExpectedHeterozygosityRealSelection": [[163, "meanexpectedheterozygosityrealselection"]], "MeanExpectedHeterozygositySelectionMixin": [[164, "meanexpectedheterozygosityselectionmixin"]], "MeanExpectedHeterozygositySubsetSelection": [[165, "meanexpectedheterozygositysubsetselection"]], "MeanGenomicRelationshipSelection": [[166, "module-pybrops.breed.prot.sel.MeanGenomicRelationshipSelection"]], "MeanGenomicRelationshipBinarySelection": [[167, "meangenomicrelationshipbinaryselection"]], "MeanGenomicRelationshipIntegerSelection": [[168, "meangenomicrelationshipintegerselection"]], "MeanGenomicRelationshipRealSelection": [[169, "meangenomicrelationshiprealselection"]], "MeanGenomicRelationshipSelectionMixin": [[170, "meangenomicrelationshipselectionmixin"]], "MeanGenomicRelationshipSubsetSelection": [[171, "meangenomicrelationshipsubsetselection"]], "MultiObjectiveGenomicSelection": [[172, "module-pybrops.breed.prot.sel.MultiObjectiveGenomicSelection"]], "MultiObjectiveGenomicSelectionMixin": [[173, "multiobjectivegenomicselectionmixin"]], "MultiObjectiveGenomicSubsetSelection": [[174, "multiobjectivegenomicsubsetselection"]], "OptimalContributionSelection": [[175, "module-pybrops.breed.prot.sel.OptimalContributionSelection"]], "OptimalContributionBinarySelection": [[176, "optimalcontributionbinaryselection"]], "OptimalContributionIntegerSelection": [[177, "optimalcontributionintegerselection"]], "OptimalContributionRealSelection": [[178, "optimalcontributionrealselection"]], "OptimalContributionSelectionMixin": [[179, "optimalcontributionselectionmixin"]], "OptimalContributionSubsetSelection": [[180, "optimalcontributionsubsetselection"]], "OptimalHaploidValueSelection": [[181, "module-pybrops.breed.prot.sel.OptimalHaploidValueSelection"]], "OptimalHaploidValueBinarySelection": [[182, "optimalhaploidvaluebinaryselection"]], "OptimalHaploidValueIntegerSelection": [[183, "optimalhaploidvalueintegerselection"]], "OptimalHaploidValueRealSelection": [[184, "optimalhaploidvaluerealselection"]], "OptimalHaploidValueSelectionMixin": [[185, "optimalhaploidvalueselectionmixin"]], "OptimalHaploidValueSubsetSelection": [[186, "optimalhaploidvaluesubsetselection"]], "OptimalPopulationValueSelection": [[187, "module-pybrops.breed.prot.sel.OptimalPopulationValueSelection"]], "OptimalPopulationValueSelectionMixin": [[188, "optimalpopulationvalueselectionmixin"]], "OptimalPopulationValueSubsetSelection": [[189, "optimalpopulationvaluesubsetselection"]], "RandomSelection": [[190, "module-pybrops.breed.prot.sel.RandomSelection"]], "RandomBinarySelection": [[191, "randombinaryselection"]], "RandomIntegerSelection": [[192, "randomintegerselection"]], "RandomRealSelection": [[193, "randomrealselection"]], "RandomSelectionMixin": [[194, "randomselectionmixin"]], "RandomSubsetSelection": [[195, "randomsubsetselection"]], "RealMateSelectionProtocol": [[196, "module-pybrops.breed.prot.sel.RealMateSelectionProtocol"], [197, "realmateselectionprotocol"]], "check_is_RealMateSelectionProtocol": [[198, "check-is-realmateselectionprotocol"]], "RealSelectionProtocol": [[199, "module-pybrops.breed.prot.sel.RealSelectionProtocol"], [200, "realselectionprotocol"]], "check_is_RealSelectionProtocol": [[201, "check-is-realselectionprotocol"]], "SelectionProtocol": [[202, "module-pybrops.breed.prot.sel.SelectionProtocol"], [203, "selectionprotocol"]], "check_is_SelectionProtocol": [[204, "check-is-selectionprotocol"], [221, "check-is-selectionprotocol"]], "SubsetMateSelectionProtocol": [[205, "module-pybrops.breed.prot.sel.SubsetMateSelectionProtocol"], [206, "subsetmateselectionprotocol"]], "check_is_SubsetMateSelectionProtocol": [[207, "check-is-subsetmateselectionprotocol"]], "SubsetSelectionProtocol": [[208, "module-pybrops.breed.prot.sel.SubsetSelectionProtocol"], [209, "subsetselectionprotocol"]], "check_is_SubsetSelectionProtocol": [[210, "check-is-subsetselectionprotocol"]], "UnconstrainedGeneralized1NormGenomicSelection": [[211, "module-pybrops.breed.prot.sel.UnconstrainedGeneralized1NormGenomicSelection"]], "Generalized1NormGenomicSelection": [[212, "generalized1normgenomicselection"]], "UnconstrainedMultiObjectiveGenomicMating": [[213, "module-pybrops.breed.prot.sel.UnconstrainedMultiObjectiveGenomicMating"]], "MultiObjectiveGenomicMating": [[214, "multiobjectivegenomicmating"]], "UnconstrainedPopulationAlleleFrequencyDistanceSelection": [[215, "module-pybrops.breed.prot.sel.UnconstrainedPopulationAlleleFrequencyDistanceSelection"]], "PopulationAlleleFrequencyDistanceSelection": [[216, "populationallelefrequencydistanceselection"]], "UnconstrainedPopulationAlleleUnavailabilitySelection": [[217, "module-pybrops.breed.prot.sel.UnconstrainedPopulationAlleleUnavailabilitySelection"]], "PopulationAlleleUnavailabilitySelection": [[218, "populationalleleunavailabilityselection"]], "UnconstrainedSelectionProtocol": [[219, "module-pybrops.breed.prot.sel.UnconstrainedSelectionProtocol"], [220, "unconstrainedselectionprotocol"]], "UsefulnessCriterionSelection": [[222, "module-pybrops.breed.prot.sel.UsefulnessCriterionSelection"]], "UsefulnessCriterionBinarySelection": [[223, "usefulnesscriterionbinaryselection"]], "UsefulnessCriterionIntegerSelection": [[224, "usefulnesscriterionintegerselection"]], "UsefulnessCriterionRealSelection": [[225, "usefulnesscriterionrealselection"]], "UsefulnessCriterionSelectionMixin": [[226, "usefulnesscriterionselectionmixin"]], "UsefulnessCriterionSubsetSelection": [[227, "usefulnesscriterionsubsetselection"]], "WeightedGenomicSelection": [[228, "module-pybrops.breed.prot.sel.WeightedGenomicSelection"]], "WeightedGenomicBinarySelection": [[229, "weightedgenomicbinaryselection"]], "WeightedGenomicIntegerSelection": [[230, "weightedgenomicintegerselection"]], "WeightedGenomicRealSelection": [[231, "weightedgenomicrealselection"]], "WeightedGenomicSubsetSelection": [[232, "weightedgenomicsubsetselection"]], "cfg": [[233, "module-pybrops.breed.prot.sel.cfg"]], "BinaryMateSelectionConfiguration": [[234, "module-pybrops.breed.prot.sel.cfg.BinaryMateSelectionConfiguration"], [235, "binarymateselectionconfiguration"]], "BinarySelectionConfiguration": [[236, "module-pybrops.breed.prot.sel.cfg.BinarySelectionConfiguration"], [237, "binaryselectionconfiguration"]], "IntegerMateSelectionConfiguration": [[238, "module-pybrops.breed.prot.sel.cfg.IntegerMateSelectionConfiguration"], [239, "integermateselectionconfiguration"]], "IntegerSelectionConfiguration": [[240, "module-pybrops.breed.prot.sel.cfg.IntegerSelectionConfiguration"], [241, "integerselectionconfiguration"]], "MateSelectionConfiguration": [[242, "module-pybrops.breed.prot.sel.cfg.MateSelectionConfiguration"], [243, "mateselectionconfiguration"]], "check_is_MateSelectionConfiguration": [[244, "check-is-mateselectionconfiguration"]], "RealMateSelectionConfiguration": [[245, "module-pybrops.breed.prot.sel.cfg.RealMateSelectionConfiguration"], [246, "realmateselectionconfiguration"]], "RealSelectionConfiguration": [[247, "module-pybrops.breed.prot.sel.cfg.RealSelectionConfiguration"], [248, "realselectionconfiguration"]], "SampledSelectionConfigurationMixin": [[249, "module-pybrops.breed.prot.sel.cfg.SampledSelectionConfigurationMixin"], [250, "sampledselectionconfigurationmixin"]], "SelectionConfiguration": [[251, "module-pybrops.breed.prot.sel.cfg.SelectionConfiguration"], [252, "selectionconfiguration"]], "check_is_SelectionConfiguration": [[253, "check-is-selectionconfiguration"]], "SimpleMateSelectionConfiguration": [[254, "module-pybrops.breed.prot.sel.cfg.SimpleMateSelectionConfiguration"], [255, "simplemateselectionconfiguration"]], "SimpleSelectionConfiguration": [[256, "module-pybrops.breed.prot.sel.cfg.SimpleSelectionConfiguration"], [257, "simpleselectionconfiguration"]], "SubsetMateSelectionConfiguration": [[258, "module-pybrops.breed.prot.sel.cfg.SubsetMateSelectionConfiguration"], [259, "subsetmateselectionconfiguration"]], "SubsetSelectionConfiguration": [[260, "module-pybrops.breed.prot.sel.cfg.SubsetSelectionConfiguration"], [261, "subsetselectionconfiguration"]], "prob": [[262, "module-pybrops.breed.prot.sel.prob"], [985, "module-pybrops.opt.prob"]], "BinaryMateSelectionProblem": [[263, "module-pybrops.breed.prot.sel.prob.BinaryMateSelectionProblem"], [264, "binarymateselectionproblem"]], "BinarySelectionProblem": [[265, "module-pybrops.breed.prot.sel.prob.BinarySelectionProblem"], [266, "binaryselectionproblem"]], "check_is_BinarySelectionProblem": [[267, "check-is-binaryselectionproblem"]], "EstimatedBreedingValueSelectionProblem": [[268, "module-pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem"]], "EstimatedBreedingValueBinarySelectionProblem": [[269, "estimatedbreedingvaluebinaryselectionproblem"]], "EstimatedBreedingValueIntegerSelectionProblem": [[270, "estimatedbreedingvalueintegerselectionproblem"]], "EstimatedBreedingValueRealSelectionProblem": [[271, "estimatedbreedingvaluerealselectionproblem"]], "EstimatedBreedingValueSelectionProblemMixin": [[272, "estimatedbreedingvalueselectionproblemmixin"]], "EstimatedBreedingValueSubsetSelectionProblem": [[273, "estimatedbreedingvaluesubsetselectionproblem"]], "ExpectedMaximumBreedingValueSelectionProblem": [[274, "module-pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem"]], "ExpectedMaximumBreedingValueBinarySelectionProblem": [[275, "expectedmaximumbreedingvaluebinaryselectionproblem"]], "ExpectedMaximumBreedingValueIntegerSelectionProblem": [[276, "expectedmaximumbreedingvalueintegerselectionproblem"]], "ExpectedMaximumBreedingValueRealSelectionProblem": [[277, "expectedmaximumbreedingvaluerealselectionproblem"]], "ExpectedMaximumBreedingValueSelectionProblemMixin": [[278, "expectedmaximumbreedingvalueselectionproblemmixin"]], "ExpectedMaximumBreedingValueSubsetSelectionProblem": [[279, "expectedmaximumbreedingvaluesubsetselectionproblem"]], "FamilyEstimatedBreedingValueSelectionProblem": [[280, "module-pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem"]], "FamilyEstimatedBreedingValueBinarySelectionProblem": [[281, "familyestimatedbreedingvaluebinaryselectionproblem"]], "FamilyEstimatedBreedingValueIntegerSelectionProblem": [[282, "familyestimatedbreedingvalueintegerselectionproblem"]], "FamilyEstimatedBreedingValueRealSelectionProblem": [[283, "familyestimatedbreedingvaluerealselectionproblem"]], "FamilyEstimatedBreedingValueSelectionProblemMixin": [[284, "familyestimatedbreedingvalueselectionproblemmixin"]], "FamilyEstimatedBreedingValueSubsetSelectionProblem": [[285, "familyestimatedbreedingvaluesubsetselectionproblem"]], "GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem": [[286, "module-pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem"]], "GeneralizedWeightedGenomicEstimatedBreedingValueBinarySelectionProblem": [[287, "generalizedweightedgenomicestimatedbreedingvaluebinaryselectionproblem"]], "GeneralizedWeightedGenomicEstimatedBreedingValueIntegerSelectionProblem": [[288, "generalizedweightedgenomicestimatedbreedingvalueintegerselectionproblem"]], "GeneralizedWeightedGenomicEstimatedBreedingValueRealSelectionProblem": [[289, "generalizedweightedgenomicestimatedbreedingvaluerealselectionproblem"]], "GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblemMixin": [[290, "generalizedweightedgenomicestimatedbreedingvalueselectionproblemmixin"]], "GeneralizedWeightedGenomicEstimatedBreedingValueSubsetSelectionProblem": [[291, "generalizedweightedgenomicestimatedbreedingvaluesubsetselectionproblem"]], "GenomicEstimatedBreedingValueSelectionProblem": [[292, "module-pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem"]], "GenomicEstimatedBreedingValueBinarySelectionProblem": [[293, "genomicestimatedbreedingvaluebinaryselectionproblem"]], "GenomicEstimatedBreedingValueIntegerSelectionProblem": [[294, "genomicestimatedbreedingvalueintegerselectionproblem"]], "GenomicEstimatedBreedingValueRealSelectionProblem": [[295, "genomicestimatedbreedingvaluerealselectionproblem"]], "GenomicEstimatedBreedingValueSelectionProblemMixin": [[296, "genomicestimatedbreedingvalueselectionproblemmixin"]], "GenomicEstimatedBreedingValueSubsetSelectionProblem": [[297, "genomicestimatedbreedingvaluesubsetselectionproblem"]], "GenotypeBuilderSelectionProblem": [[298, "module-pybrops.breed.prot.sel.prob.GenotypeBuilderSelectionProblem"]], "GenotypeBuilderSelectionProblemMixin": [[299, "genotypebuilderselectionproblemmixin"]], "GenotypeBuilderSubsetSelectionProblem": [[300, "genotypebuildersubsetselectionproblem"]], "IntegerMateSelectionProblem": [[301, "module-pybrops.breed.prot.sel.prob.IntegerMateSelectionProblem"], [302, "integermateselectionproblem"]], "IntegerSelectionProblem": [[303, "module-pybrops.breed.prot.sel.prob.IntegerSelectionProblem"], [304, "integerselectionproblem"]], "check_is_IntegerSelectionProblem": [[305, "check-is-integerselectionproblem"]], "L1NormGenomicSelectionProblem": [[306, "module-pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem"]], "L1NormGenomicBinarySelectionProblem": [[307, "l1normgenomicbinaryselectionproblem"]], "L1NormGenomicIntegerSelectionProblem": [[308, "l1normgenomicintegerselectionproblem"]], "L1NormGenomicRealSelectionProblem": [[309, "l1normgenomicrealselectionproblem"]], "L1NormGenomicSelectionProblemMixin": [[310, "l1normgenomicselectionproblemmixin"]], "L1NormGenomicSubsetSelectionProblem": [[311, "l1normgenomicsubsetselectionproblem"]], "L2NormGenomicSelectionProblem": [[312, "module-pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem"]], "L2NormGenomicBinarySelectionProblem": [[313, "l2normgenomicbinaryselectionproblem"]], "L2NormGenomicIntegerSelectionProblem": [[314, "l2normgenomicintegerselectionproblem"]], "L2NormGenomicRealSelectionProblem": [[315, "l2normgenomicrealselectionproblem"]], "L2NormGenomicSelectionProblemMixin": [[316, "l2normgenomicselectionproblemmixin"]], "L2NormGenomicSubsetSelectionProblem": [[317, "l2normgenomicsubsetselectionproblem"]], "MateSelectionProblem": [[318, "module-pybrops.breed.prot.sel.prob.MateSelectionProblem"], [319, "mateselectionproblem"]], "MeanExpectedHeterozygositySelectionProblem": [[320, "module-pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem"]], "MeanExpectedHeterozygosityBinarySelectionProblem": [[321, "meanexpectedheterozygositybinaryselectionproblem"]], "MeanExpectedHeterozygosityIntegerSelectionProblem": [[322, "meanexpectedheterozygosityintegerselectionproblem"]], "MeanExpectedHeterozygosityRealSelectionProblem": [[323, "meanexpectedheterozygosityrealselectionproblem"]], "MeanExpectedHeterozygositySelectionProblemMixin": [[324, "meanexpectedheterozygosityselectionproblemmixin"]], "MeanExpectedHeterozygositySubsetSelectionProblem": [[325, "meanexpectedheterozygositysubsetselectionproblem"]], "MeanGenomicRelationshipSelectionProblem": [[326, "module-pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem"]], "MeanGenomicRelationshipBinarySelectionProblem": [[327, "meangenomicrelationshipbinaryselectionproblem"]], "MeanGenomicRelationshipIntegerSelectionProblem": [[328, "meangenomicrelationshipintegerselectionproblem"]], "MeanGenomicRelationshipRealSelectionProblem": [[329, "meangenomicrelationshiprealselectionproblem"]], "MeanGenomicRelationshipSelectionProblemMixin": [[330, "meangenomicrelationshipselectionproblemmixin"]], "MeanGenomicRelationshipSubsetSelectionProblem": [[331, "meangenomicrelationshipsubsetselectionproblem"]], "MultiObjectiveGenomicMatingProblem": [[332, "module-pybrops.breed.prot.sel.prob.MultiObjectiveGenomicMatingProblem"]], "MultiObjectiveGenomicMatingProblemMixin": [[333, "multiobjectivegenomicmatingproblemmixin"]], "MultiObjectiveGenomicSubsetMatingProblem": [[334, "multiobjectivegenomicsubsetmatingproblem"]], "MultiObjectiveGenomicSelectionProblem": [[335, "module-pybrops.breed.prot.sel.prob.MultiObjectiveGenomicSelectionProblem"]], "MultiObjectiveGenomicSelectionProblemMixin": [[336, "multiobjectivegenomicselectionproblemmixin"]], "MultiObjectiveGenomicSubsetSelectionProblem": [[337, "multiobjectivegenomicsubsetselectionproblem"]], "OptimalContributionSelectionProblem": [[338, "module-pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem"]], "OptimalContributionBinarySelectionProblem": [[339, "optimalcontributionbinaryselectionproblem"]], "OptimalContributionIntegerSelectionProblem": [[340, "optimalcontributionintegerselectionproblem"]], "OptimalContributionRealSelectionProblem": [[341, "optimalcontributionrealselectionproblem"]], "OptimalContributionSelectionProblemMixin": [[342, "optimalcontributionselectionproblemmixin"]], "OptimalContributionSubsetSelectionProblem": [[343, "optimalcontributionsubsetselectionproblem"]], "OptimalHaploidValueSelectionProblem": [[344, "module-pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem"]], "OptimalHaploidValueBinarySelectionProblem": [[345, "optimalhaploidvaluebinaryselectionproblem"]], "OptimalHaploidValueIntegerSelectionProblem": [[346, "optimalhaploidvalueintegerselectionproblem"]], "OptimalHaploidValueRealSelectionProblem": [[347, "optimalhaploidvaluerealselectionproblem"]], "OptimalHaploidValueSelectionProblemMixin": [[348, "optimalhaploidvalueselectionproblemmixin"]], "OptimalHaploidValueSubsetSelectionProblem": [[349, "optimalhaploidvaluesubsetselectionproblem"]], "OptimalPopulationValueSelectionProblem": [[350, "module-pybrops.breed.prot.sel.prob.OptimalPopulationValueSelectionProblem"]], "OptimalPopulationValueSelectionProblemMixin": [[351, "optimalpopulationvalueselectionproblemmixin"]], "OptimalPopulationValueSubsetSelectionProblem": [[352, "optimalpopulationvaluesubsetselectionproblem"]], "RandomSelectionProblem": [[353, "module-pybrops.breed.prot.sel.prob.RandomSelectionProblem"]], "RandomBinarySelectionProblem": [[354, "randombinaryselectionproblem"]], "RandomIntegerSelectionProblem": [[355, "randomintegerselectionproblem"]], "RandomRealSelectionProblem": [[356, "randomrealselectionproblem"]], "RandomSelectionProblemMixin": [[357, "randomselectionproblemmixin"]], "RandomSubsetSelectionProblem": [[358, "randomsubsetselectionproblem"]], "RealLookAheadGeneralizedWeightedGenomicSelectionProblem": [[359, "module-pybrops.breed.prot.sel.prob.RealLookAheadGeneralizedWeightedGenomicSelectionProblem"], [360, "reallookaheadgeneralizedweightedgenomicselectionproblem"]], "RealMateSelectionProblem": [[361, "module-pybrops.breed.prot.sel.prob.RealMateSelectionProblem"], [362, "realmateselectionproblem"]], "RealSelectionProblem": [[363, "module-pybrops.breed.prot.sel.prob.RealSelectionProblem"], [364, "realselectionproblem"]], "check_is_RealSelectionProblem": [[365, "check-is-realselectionproblem"]], "SelectionProblem": [[366, "module-pybrops.breed.prot.sel.prob.SelectionProblem"], [367, "selectionproblem"]], "check_is_SelectionProblem": [[368, "check-is-selectionproblem"]], "SubsetMateSelectionProblem": [[369, "module-pybrops.breed.prot.sel.prob.SubsetMateSelectionProblem"], [370, "subsetmateselectionproblem"]], "SubsetSelectionProblem": [[371, "module-pybrops.breed.prot.sel.prob.SubsetSelectionProblem"], [372, "subsetselectionproblem"]], "check_is_SubsetSelectionProblem": [[373, "check-is-subsetselectionproblem"]], "UsefulnessCriterionSelectionProblem": [[374, "module-pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem"]], "UsefulnessCriterionBinaryMateSelectionProblem": [[375, "usefulnesscriterionbinarymateselectionproblem"]], "UsefulnessCriterionIntegerMateSelectionProblem": [[376, "usefulnesscriterionintegermateselectionproblem"]], "UsefulnessCriterionRealMateSelectionProblem": [[377, "usefulnesscriterionrealmateselectionproblem"]], "UsefulnessCriterionSelectionProblemMixin": [[378, "usefulnesscriterionselectionproblemmixin"]], "UsefulnessCriterionSubsetMateSelectionProblem": [[379, "usefulnesscriterionsubsetmateselectionproblem"]], "WeightedGenomicSelectionProblem": [[380, "module-pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem"]], "WeightedGenomicBinarySelectionProblem": [[381, "weightedgenomicbinaryselectionproblem"]], "WeightedGenomicIntegerSelectionProblem": [[382, "weightedgenomicintegerselectionproblem"]], "WeightedGenomicRealSelectionProblem": [[383, "weightedgenomicrealselectionproblem"]], "WeightedGenomicSubsetSelectionProblem": [[384, "weightedgenomicsubsetselectionproblem"]], "trans": [[385, "module-pybrops.breed.prot.sel.prob.trans"]], "trans_decnvec_sum_eq": [[386, "trans-decnvec-sum-eq"]], "trans_dot": [[387, "trans-dot"], [428, "trans-dot"]], "trans_empty": [[388, "trans-empty"]], "trans_identity": [[389, "trans-identity"]], "trans_ndpt_to_vec_dist": [[390, "trans-ndpt-to-vec-dist"], [433, "trans-ndpt-to-vec-dist"]], "trans_sum": [[391, "trans-sum"], [434, "trans-sum"]], "soln": [[392, "module-pybrops.breed.prot.sel.soln"], [1013, "module-pybrops.opt.soln"]], "BinaryMateSelectionSolution": [[393, "module-pybrops.breed.prot.sel.soln.BinaryMateSelectionSolution"], [394, "binarymateselectionsolution"]], "check_is_BinaryMateSelectionSolution": [[395, "check-is-binarymateselectionsolution"]], "BinarySelectionSolution": [[396, "module-pybrops.breed.prot.sel.soln.BinarySelectionSolution"], [397, "binaryselectionsolution"]], "check_is_BinarySelectionSolution": [[398, "check-is-binaryselectionsolution"]], "IntegerMateSelectionSolution": [[399, "module-pybrops.breed.prot.sel.soln.IntegerMateSelectionSolution"], [400, "integermateselectionsolution"]], "check_is_IntegerMateSelectionSolution": [[401, "check-is-integermateselectionsolution"]], "IntegerSelectionSolution": [[402, "module-pybrops.breed.prot.sel.soln.IntegerSelectionSolution"], [403, "integerselectionsolution"]], "check_is_IntegerSelectionSolution": [[404, "check-is-integerselectionsolution"]], "MateSelectionSolution": [[405, "module-pybrops.breed.prot.sel.soln.MateSelectionSolution"], [406, "mateselectionsolution"]], "check_is_MateSelectionSolution": [[407, "check-is-mateselectionsolution"]], "RealMateSelectionSolution": [[408, "module-pybrops.breed.prot.sel.soln.RealMateSelectionSolution"], [409, "realmateselectionsolution"]], "check_is_RealMateSelectionSolution": [[410, "check-is-realmateselectionsolution"]], "RealSelectionSolution": [[411, "module-pybrops.breed.prot.sel.soln.RealSelectionSolution"], [412, "realselectionsolution"]], "check_is_RealSelectionSolution": [[413, "check-is-realselectionsolution"]], "SelectionSolution": [[414, "module-pybrops.breed.prot.sel.soln.SelectionSolution"], [415, "selectionsolution"]], "check_is_SelectionSolution": [[416, "check-is-selectionsolution"]], "SubsetMateSelectionSolution": [[417, "module-pybrops.breed.prot.sel.soln.SubsetMateSelectionSolution"], [418, "subsetmateselectionsolution"]], "check_is_SubsetMateSelectionSolution": [[419, "check-is-subsetmateselectionsolution"]], "SubsetSelectionSolution": [[420, "module-pybrops.breed.prot.sel.soln.SubsetSelectionSolution"], [421, "subsetselectionsolution"]], "check_is_SubsetSelectionSolution": [[422, "check-is-subsetselectionsolution"]], "targetfn": [[423, "module-pybrops.breed.prot.sel.targetfn"]], "target_negative": [[424, "target-negative"]], "target_positive": [[425, "target-positive"]], "target_stabilizing": [[426, "target-stabilizing"]], "transfn": [[427, "module-pybrops.breed.prot.sel.transfn"]], "trans_flatten": [[429, "trans-flatten"]], "trans_identity_unconstrained": [[430, "trans-identity-unconstrained"]], "trans_inbmax_penalty": [[431, "trans-inbmax-penalty"]], "trans_max_inbreeding_constraint": [[432, "trans-max-inbreeding-constraint"]], "trans_sum_inbmax_penalty": [[435, "trans-sum-inbmax-penalty"]], "weightfn": [[436, "module-pybrops.breed.prot.sel.weightfn"]], "weight_absolute": [[437, "weight-absolute"]], "weight_one": [[438, "weight-one"]], "core": [[439, "module-pybrops.core"]], "error": [[440, "module-pybrops.core.error"]], "error_attr_python": [[441, "module-pybrops.core.error.error_attr_python"]], "check_is_callable": [[442, "check-is-callable"]], "check_is_iterable": [[443, "check-is-iterable"]], "error_readonly": [[444, "error-readonly"]], "error_generic_numpy": [[445, "module-pybrops.core.error.error_generic_numpy"]], "generic_check_ndarray_eq": [[446, "generic-check-ndarray-eq"]], "generic_check_ndarray_is_square": [[447, "generic-check-ndarray-is-square"]], "generic_check_ndarray_ndim": [[448, "generic-check-ndarray-ndim"]], "generic_check_ndarray_ndim_gteq": [[449, "generic-check-ndarray-ndim-gteq"]], "generic_check_ndarray_shape": [[450, "generic-check-ndarray-shape"]], "generic_check_ndarray_size": [[451, "generic-check-ndarray-size"]], "generic_check_ndarray_sum": [[452, "generic-check-ndarray-sum"]], "error_generic_python": [[453, "module-pybrops.core.error.error_generic_python"]], "generic_check_isinstance": [[454, "generic-check-isinstance"]], "error_io_python": [[455, "module-pybrops.core.error.error_io_python"]], "check_directory_exists": [[456, "check-directory-exists"]], "check_file_exists": [[457, "check-file-exists"]], "check_path_exists": [[458, "check-path-exists"]], "error_type_h5py": [[459, "module-pybrops.core.error.error_type_h5py"]], "check_is_h5py_File": [[460, "check-is-h5py-file"]], "error_type_numpy": [[461, "module-pybrops.core.error.error_type_numpy"]], "check_is_Generator": [[462, "check-is-generator"]], "check_is_Generator_or_RandomState": [[463, "check-is-generator-or-randomstate"]], "check_is_Integral_or_ndarray": [[464, "check-is-integral-or-ndarray"]], "check_is_Number_or_ndarray": [[465, "check-is-number-or-ndarray"]], "check_is_RandomState": [[466, "check-is-randomstate"]], "check_is_Real_or_ndarray": [[467, "check-is-real-or-ndarray"]], "check_is_ndarray": [[468, "check-is-ndarray"]], "check_is_str_or_ndarray": [[469, "check-is-str-or-ndarray"]], "check_ndarray_dtype": [[470, "check-ndarray-dtype"]], "check_ndarray_dtype_is_bool": [[471, "check-ndarray-dtype-is-bool"]], "check_ndarray_dtype_is_bool_or_integer": [[472, "check-ndarray-dtype-is-bool-or-integer"]], "check_ndarray_dtype_is_bool_or_number": [[473, "check-ndarray-dtype-is-bool-or-number"]], "check_ndarray_dtype_is_float16": [[474, "check-ndarray-dtype-is-float16"]], "check_ndarray_dtype_is_float32": [[475, "check-ndarray-dtype-is-float32"]], "check_ndarray_dtype_is_float64": [[476, "check-ndarray-dtype-is-float64"]], "check_ndarray_dtype_is_floating": [[477, "check-ndarray-dtype-is-floating"]], "check_ndarray_dtype_is_int16": [[478, "check-ndarray-dtype-is-int16"]], "check_ndarray_dtype_is_int32": [[479, "check-ndarray-dtype-is-int32"]], "check_ndarray_dtype_is_int64": [[480, "check-ndarray-dtype-is-int64"]], "check_ndarray_dtype_is_int8": [[481, "check-ndarray-dtype-is-int8"]], "check_ndarray_dtype_is_integer": [[482, "check-ndarray-dtype-is-integer"]], "check_ndarray_dtype_is_integer_or_floating": [[483, "check-ndarray-dtype-is-integer-or-floating"]], "check_ndarray_dtype_is_number": [[484, "check-ndarray-dtype-is-number"]], "check_ndarray_dtype_is_object": [[485, "check-ndarray-dtype-is-object"]], "check_ndarray_dtype_is_object_or_string": [[486, "check-ndarray-dtype-is-object-or-string"]], "check_ndarray_dtype_is_real": [[487, "check-ndarray-dtype-is-real"]], "check_ndarray_dtype_is_string": [[488, "check-ndarray-dtype-is-string"]], "check_ndarray_dtype_is_unicode": [[489, "check-ndarray-dtype-is-unicode"]], "error_type_pandas": [[490, "module-pybrops.core.error.error_type_pandas"]], "check_Series_all_type": [[491, "check-series-all-type"]], "check_is_pandas_DataFrame": [[492, "check-is-pandas-dataframe"]], "error_type_python": [[493, "module-pybrops.core.error.error_type_python"]], "check_Sequence_all_type": [[494, "check-sequence-all-type"]], "check_inherits": [[495, "check-inherits"]], "check_is_Callable": [[496, "check-is-callable"]], "check_is_Complex": [[497, "check-is-complex"]], "check_is_Container": [[498, "check-is-container"]], "check_is_Integral": [[499, "check-is-integral"]], "check_is_Integral_or_None": [[500, "check-is-integral-or-none"]], "check_is_Integral_or_inf": [[501, "check-is-integral-or-inf"]], "check_is_Number": [[502, "check-is-number"]], "check_is_Real": [[503, "check-is-real"]], "check_is_Sequence": [[504, "check-is-sequence"]], "check_is_array_like": [[505, "check-is-array-like"]], "check_is_bool": [[506, "check-is-bool"]], "check_is_bytes": [[507, "check-is-bytes"]], "check_is_class": [[508, "check-is-class"]], "check_is_dict": [[509, "check-is-dict"]], "check_is_float": [[510, "check-is-float"]], "check_is_frozenset": [[511, "check-is-frozenset"]], "check_is_int": [[512, "check-is-int"]], "check_is_int_or_None": [[513, "check-is-int-or-none"]], "check_is_int_or_inf": [[514, "check-is-int-or-inf"]], "check_is_list": [[515, "check-is-list"]], "check_is_list_or_tuple": [[516, "check-is-list-or-tuple"]], "check_is_range": [[517, "check-is-range"]], "check_is_set": [[518, "check-is-set"]], "check_is_str": [[519, "check-is-str"]], "check_is_str_or_Integral": [[520, "check-is-str-or-integral"]], "check_is_str_or_Sequence": [[521, "check-is-str-or-sequence"]], "check_is_str_or_iterable": [[522, "check-is-str-or-iterable"]], "check_is_tuple": [[523, "check-is-tuple"]], "check_is_type": [[524, "check-is-type"]], "check_isinstance": [[525, "check-isinstance"]], "error_value_h5py": [[526, "module-pybrops.core.error.error_value_h5py"]], "check_h5py_File_has_group": [[527, "check-h5py-file-has-group"]], "check_h5py_File_has_groups": [[528, "check-h5py-file-has-groups"]], "check_h5py_File_is_writable": [[529, "check-h5py-file-is-writable"]], "error_value_numpy": [[530, "module-pybrops.core.error.error_value_numpy"]], "check_ndarray_all_gt": [[531, "check-ndarray-all-gt"]], "check_ndarray_all_gteq": [[532, "check-ndarray-all-gteq"]], "check_ndarray_axis_len": [[533, "check-ndarray-axis-len"]], "check_ndarray_axis_len_eq": [[534, "check-ndarray-axis-len-eq"]], "check_ndarray_axis_len_gt": [[535, "check-ndarray-axis-len-gt"]], "check_ndarray_axis_len_gteq": [[536, "check-ndarray-axis-len-gteq"]], "check_ndarray_axis_len_lt": [[537, "check-ndarray-axis-len-lt"]], "check_ndarray_axis_len_lteq": [[538, "check-ndarray-axis-len-lteq"]], "check_ndarray_eq": [[539, "check-ndarray-eq"]], "check_ndarray_has_value": [[540, "check-ndarray-has-value"]], "check_ndarray_has_values": [[541, "check-ndarray-has-values"]], "check_ndarray_in_interval": [[542, "check-ndarray-in-interval"]], "check_ndarray_is_binary": [[543, "check-ndarray-is-binary"]], "check_ndarray_is_hypercube": [[544, "check-ndarray-is-hypercube"]], "check_ndarray_is_square": [[545, "check-ndarray-is-square"]], "check_ndarray_is_triu": [[546, "check-ndarray-is-triu"]], "check_ndarray_len_eq": [[547, "check-ndarray-len-eq"]], "check_ndarray_len_gteq": [[548, "check-ndarray-len-gteq"]], "check_ndarray_len_is_multiple_of": [[549, "check-ndarray-len-is-multiple-of"]], "check_ndarray_mean_is_approx": [[550, "check-ndarray-mean-is-approx"]], "check_ndarray_ndim": [[551, "check-ndarray-ndim"]], "check_ndarray_ndim_gteq": [[552, "check-ndarray-ndim-gteq"]], "check_ndarray_shape_eq": [[553, "check-ndarray-shape-eq"]], "check_ndarray_size": [[554, "check-ndarray-size"]], "check_ndarray_std_is_approx": [[555, "check-ndarray-std-is-approx"]], "check_ndarray_sum": [[556, "check-ndarray-sum"]], "error_value_pandas": [[557, "module-pybrops.core.error.error_value_pandas"]], "check_pandas_DataFrame_has_column": [[558, "check-pandas-dataframe-has-column"]], "check_pandas_DataFrame_has_column_index": [[559, "check-pandas-dataframe-has-column-index"]], "check_pandas_DataFrame_has_column_indices": [[560, "check-pandas-dataframe-has-column-indices"]], "check_pandas_DataFrame_has_columns": [[561, "check-pandas-dataframe-has-columns"]], "check_pandas_Series_has_index": [[562, "check-pandas-series-has-index"]], "check_pandas_Series_has_indices": [[563, "check-pandas-series-has-indices"]], "check_pandas_Series_has_value": [[564, "check-pandas-series-has-value"]], "check_pandas_Series_has_values": [[565, "check-pandas-series-has-values"]], "error_value_python": [[566, "module-pybrops.core.error.error_value_python"]], "check_Sequence_has_index": [[567, "check-sequence-has-index"]], "check_Sequence_has_indices": [[568, "check-sequence-has-indices"]], "check_Sequence_has_value": [[569, "check-sequence-has-value"]], "check_Sequence_has_values": [[570, "check-sequence-has-values"]], "check_all_equal": [[571, "check-all-equal"]], "check_dict_has_keys": [[572, "check-dict-has-keys"]], "check_dict_keys_all_type": [[573, "check-dict-keys-all-type"]], "check_dict_values_all_type": [[574, "check-dict-values-all-type"]], "check_dict_values_have_equal_len": [[575, "check-dict-values-have-equal-len"]], "check_dict_values_len_eq": [[576, "check-dict-values-len-eq"]], "check_is_eq": [[577, "check-is-eq"]], "check_is_gt": [[578, "check-is-gt"]], "check_is_gteq": [[579, "check-is-gteq"]], "check_is_in_interval_exclusive": [[580, "check-is-in-interval-exclusive"]], "check_is_in_interval_inclusive": [[581, "check-is-in-interval-inclusive"]], "check_is_lt": [[582, "check-is-lt"]], "check_is_lteq": [[583, "check-is-lteq"]], "check_is_neq": [[584, "check-is-neq"]], "check_is_not_None": [[585, "check-is-not-none"]], "check_len": [[586, "check-len"]], "check_len_eq": [[587, "check-len-eq"]], "check_str_value": [[588, "check-str-value"]], "check_tuple_len_eq": [[589, "check-tuple-len-eq"]], "io": [[590, "module-pybrops.core.io"]], "CSVDictInputOutput": [[591, "module-pybrops.core.io.CSVDictInputOutput"], [592, "csvdictinputoutput"]], "check_is_CSVDictInputOutput": [[593, "check-is-csvdictinputoutput"]], "CSVInputOutput": [[594, "module-pybrops.core.io.CSVInputOutput"], [595, "csvinputoutput"]], "check_is_CSVInputOutput": [[596, "check-is-csvinputoutput"]], "DictInputOutput": [[597, "module-pybrops.core.io.DictInputOutput"], [598, "dictinputoutput"]], "check_is_DictInputOutput": [[599, "check-is-dictinputoutput"]], "HDF5InputOutput": [[600, "module-pybrops.core.io.HDF5InputOutput"], [601, "hdf5inputoutput"]], "check_is_HDF5InputOutput": [[602, "check-is-hdf5inputoutput"]], "NPYInputOutput": [[603, "module-pybrops.core.io.NPYInputOutput"], [604, "npyinputoutput"]], "check_is_NPYInputOutput": [[605, "check-is-npyinputoutput"]], "NPZInputOutput": [[606, "module-pybrops.core.io.NPZInputOutput"], [607, "npzinputoutput"]], "check_is_NPZInputOutput": [[608, "check-is-npzinputoutput"]], "NumPyInputOutput": [[609, "module-pybrops.core.io.NumPyInputOutput"], [610, "numpyinputoutput"]], "check_is_NumPyInputOutput": [[611, "check-is-numpyinputoutput"]], "PandasDictInputOutput": [[612, "module-pybrops.core.io.PandasDictInputOutput"], [613, "pandasdictinputoutput"]], "check_is_PandasDictInputOutput": [[614, "check-is-pandasdictinputoutput"]], "PandasInputOutput": [[615, "module-pybrops.core.io.PandasInputOutput"], [616, "pandasinputoutput"]], "check_is_PandasInputOutput": [[617, "check-is-pandasinputoutput"]], "mat": [[618, "module-pybrops.core.mat"]], "DenseMatrix": [[619, "module-pybrops.core.mat.DenseMatrix"], [620, "densematrix"]], "check_is_DenseMatrix": [[621, "check-is-densematrix"]], "DenseMutableMatrix": [[622, "module-pybrops.core.mat.DenseMutableMatrix"], [623, "densemutablematrix"]], "check_is_DenseMutableMatrix": [[624, "check-is-densemutablematrix"]], "DensePhasedMatrix": [[625, "module-pybrops.core.mat.DensePhasedMatrix"], [626, "densephasedmatrix"]], "check_is_DensePhasedMatrix": [[627, "check-is-densephasedmatrix"]], "DensePhasedTaxaVariantMatrix": [[628, "module-pybrops.core.mat.DensePhasedTaxaVariantMatrix"], [629, "densephasedtaxavariantmatrix"]], "check_is_DensePhasedTaxaVariantMatrix": [[630, "check-is-densephasedtaxavariantmatrix"]], "DenseSquareMatrix": [[631, "module-pybrops.core.mat.DenseSquareMatrix"], [632, "densesquarematrix"]], "check_is_DenseSquareMatrix": [[633, "check-is-densesquarematrix"]], "DenseSquareTaxaMatrix": [[634, "module-pybrops.core.mat.DenseSquareTaxaMatrix"], [635, "densesquaretaxamatrix"]], "check_is_DenseSquareTaxaMatrix": [[636, "check-is-densesquaretaxamatrix"]], "DenseSquareTaxaSquareTraitMatrix": [[637, "module-pybrops.core.mat.DenseSquareTaxaSquareTraitMatrix"], [638, "densesquaretaxasquaretraitmatrix"]], "check_is_DenseSquareTaxaSquareTraitMatrix": [[639, "check-is-densesquaretaxasquaretraitmatrix"]], "DenseSquareTaxaTraitMatrix": [[640, "module-pybrops.core.mat.DenseSquareTaxaTraitMatrix"], [641, "densesquaretaxatraitmatrix"]], "check_is_DenseSquareTaxaTraitMatrix": [[642, "check-is-densesquaretaxatraitmatrix"]], "DenseSquareTraitMatrix": [[643, "module-pybrops.core.mat.DenseSquareTraitMatrix"], [644, "densesquaretraitmatrix"]], "check_is_DenseSquareTraitMatrix": [[645, "check-is-densesquaretraitmatrix"]], "DenseTaxaMatrix": [[646, "module-pybrops.core.mat.DenseTaxaMatrix"], [647, "densetaxamatrix"]], "check_is_DenseTaxaMatrix": [[648, "check-is-densetaxamatrix"]], "DenseTaxaTraitMatrix": [[649, "module-pybrops.core.mat.DenseTaxaTraitMatrix"], [650, "densetaxatraitmatrix"]], "check_is_DenseTaxaTraitMatrix": [[651, "check-is-densetaxatraitmatrix"]], "DenseTaxaVariantMatrix": [[652, "module-pybrops.core.mat.DenseTaxaVariantMatrix"], [653, "densetaxavariantmatrix"]], "check_is_DenseTaxaVariantMatrix": [[654, "check-is-densetaxavariantmatrix"]], "DenseTraitMatrix": [[655, "module-pybrops.core.mat.DenseTraitMatrix"], [656, "densetraitmatrix"]], "check_is_DenseTraitMatrix": [[657, "check-is-densetraitmatrix"]], "DenseVariantMatrix": [[658, "module-pybrops.core.mat.DenseVariantMatrix"], [659, "densevariantmatrix"]], "check_is_DenseVariantMatrix": [[660, "check-is-densevariantmatrix"]], "GroupableMatrix": [[661, "module-pybrops.core.mat.GroupableMatrix"], [662, "groupablematrix"]], "check_is_GroupableMatrix": [[663, "check-is-groupablematrix"]], "Matrix": [[664, "module-pybrops.core.mat.Matrix"], [665, "matrix"]], "check_is_Matrix": [[666, "check-is-matrix"]], "MutableMatrix": [[667, "module-pybrops.core.mat.MutableMatrix"], [668, "mutablematrix"]], "check_is_MutableMatrix": [[669, "check-is-mutablematrix"]], "PhasedMatrix": [[670, "module-pybrops.core.mat.PhasedMatrix"], [671, "phasedmatrix"]], "check_is_PhasedMatrix": [[672, "check-is-phasedmatrix"]], "PhasedTaxaVariantMatrix": [[673, "module-pybrops.core.mat.PhasedTaxaVariantMatrix"], [674, "phasedtaxavariantmatrix"]], "check_is_PhasedTaxaVariantMatrix": [[675, "check-is-phasedtaxavariantmatrix"]], "PrunableMatrix": [[676, "module-pybrops.core.mat.PrunableMatrix"], [677, "prunablematrix"]], "check_is_PrunableMatrix": [[678, "check-is-prunablematrix"]], "SortableMatrix": [[679, "module-pybrops.core.mat.SortableMatrix"], [680, "sortablematrix"]], "check_is_SortableMatrix": [[681, "check-is-sortablematrix"]], "SquareMatrix": [[682, "module-pybrops.core.mat.SquareMatrix"], [683, "squarematrix"]], "check_is_SquareMatrix": [[684, "check-is-squarematrix"]], "SquareTaxaMatrix": [[685, "module-pybrops.core.mat.SquareTaxaMatrix"], [686, "squaretaxamatrix"]], "check_is_SquareTaxaMatrix": [[687, "check-is-squaretaxamatrix"]], "SquareTaxaSquareTraitMatrix": [[688, "module-pybrops.core.mat.SquareTaxaSquareTraitMatrix"], [689, "squaretaxasquaretraitmatrix"]], "check_is_SquareTaxaSquareTraitMatrix": [[690, "check-is-squaretaxasquaretraitmatrix"]], "SquareTaxaTraitMatrix": [[691, "module-pybrops.core.mat.SquareTaxaTraitMatrix"], [692, "squaretaxatraitmatrix"]], "check_is_SquareTaxaTraitMatrix": [[693, "check-is-squaretaxatraitmatrix"]], "SquareTraitMatrix": [[694, "module-pybrops.core.mat.SquareTraitMatrix"], [695, "squaretraitmatrix"]], "check_is_SquareTraitMatrix": [[696, "check-is-squaretraitmatrix"]], "TaxaMatrix": [[697, "module-pybrops.core.mat.TaxaMatrix"], [698, "taxamatrix"]], "check_is_TaxaMatrix": [[699, "check-is-taxamatrix"]], "TaxaTraitMatrix": [[700, "module-pybrops.core.mat.TaxaTraitMatrix"], [701, "taxatraitmatrix"]], "check_is_TaxaTraitMatrix": [[702, "check-is-taxatraitmatrix"]], "TaxaVariantMatrix": [[703, "module-pybrops.core.mat.TaxaVariantMatrix"], [704, "taxavariantmatrix"]], "check_is_TaxaVariantMatrix": [[705, "check-is-taxavariantmatrix"]], "TraitMatrix": [[706, "module-pybrops.core.mat.TraitMatrix"], [707, "traitmatrix"]], "check_is_TraitMatrix": [[708, "check-is-traitmatrix"]], "VariantMatrix": [[709, "module-pybrops.core.mat.VariantMatrix"], [710, "variantmatrix"]], "check_is_VariantMatrix": [[711, "check-is-variantmatrix"]], "get_axis": [[713, "get-axis"]], "random": [[714, "module-pybrops.core.random"]], "prng": [[715, "module-pybrops.core.random.prng"]], "seed": [[716, "seed"]], "spawn": [[717, "spawn"]], "sampling": [[718, "module-pybrops.core.random.sampling"]], "axis_shuffle": [[719, "axis-shuffle"]], "outcross_shuffle": [[720, "outcross-shuffle"]], "stochastic_universal_sampling": [[721, "stochastic-universal-sampling"]], "tiled_choice": [[722, "tiled-choice"], [984, "tiled-choice"]], "arrayix": [[724, "module-pybrops.core.util.arrayix"]], "flattenix": [[725, "flattenix"]], "sliceaxisix": [[726, "sliceaxisix"]], "sqarrayix": [[727, "sqarrayix"]], "triudix": [[728, "triudix"]], "triuix": [[729, "triuix"]], "xmapix": [[730, "xmapix"]], "h5py": [[731, "module-pybrops.core.util.h5py"]], "h5py_File_is_writable": [[732, "h5py-file-is-writable"]], "save_dict_to_hdf5": [[733, "save-dict-to-hdf5"]], "haplo": [[734, "module-pybrops.core.util.haplo"]], "haplobin": [[735, "haplobin"]], "haplobin_bounds": [[736, "haplobin-bounds"]], "haplomat": [[737, "haplomat"]], "nhaploblk_chrom": [[738, "nhaploblk-chrom"]], "iterator": [[739, "module-pybrops.core.util.iterator"]], "iterlen": [[740, "iterlen"]], "pareto": [[741, "module-pybrops.core.util.pareto"]], "is_pareto_efficient": [[742, "is-pareto-efficient"]], "subroutines": [[743, "module-pybrops.core.util.subroutines"]], "human2bytes": [[744, "human2bytes"]], "matrix_is_sorted": [[745, "matrix-is-sorted"]], "slice_to_list": [[746, "slice-to-list"]], "slice_to_range": [[747, "slice-to-range"]], "srange": [[748, "srange"]], "model": [[749, "module-pybrops.model"]], "gmod": [[750, "module-pybrops.model.gmod"]], "AdditiveDominanceEpistaticLinearGenomicModel": [[751, "module-pybrops.model.gmod.AdditiveDominanceEpistaticLinearGenomicModel"], [752, "additivedominanceepistaticlineargenomicmodel"]], "check_is_AdditiveDominanceEpistaticLinearGenomicModel": [[753, "check-is-additivedominanceepistaticlineargenomicmodel"]], "AdditiveDominanceLinearGenomicModel": [[754, "module-pybrops.model.gmod.AdditiveDominanceLinearGenomicModel"], [755, "additivedominancelineargenomicmodel"]], "check_is_AdditiveDominanceLinearGenomicModel": [[756, "check-is-additivedominancelineargenomicmodel"]], "AdditiveLinearGenomicModel": [[757, "module-pybrops.model.gmod.AdditiveLinearGenomicModel"], [758, "additivelineargenomicmodel"]], "check_is_AdditiveLinearGenomicModel": [[759, "check-is-additivelineargenomicmodel"]], "CoancestryLinearGenomicModel": [[760, "module-pybrops.model.gmod.CoancestryLinearGenomicModel"], [761, "coancestrylineargenomicmodel"]], "check_is_CoancestryLinearGenomicModel": [[762, "check-is-coancestrylineargenomicmodel"]], "DenseAdditiveDominanceLinearGenomicModel": [[763, "module-pybrops.model.gmod.DenseAdditiveDominanceLinearGenomicModel"], [764, "denseadditivedominancelineargenomicmodel"]], "check_is_DenseAdditiveDominanceLinearGenomicModel": [[765, "check-is-denseadditivedominancelineargenomicmodel"]], "DenseAdditiveLinearGenomicModel": [[766, "module-pybrops.model.gmod.DenseAdditiveLinearGenomicModel"], [767, "denseadditivelineargenomicmodel"]], "check_is_DenseAdditiveLinearGenomicModel": [[768, "check-is-denseadditivelineargenomicmodel"]], "DenseLinearGenomicModel": [[769, "module-pybrops.model.gmod.DenseLinearGenomicModel"], [770, "denselineargenomicmodel"]], "check_is_DenseLinearGenomicModel": [[771, "check-is-denselineargenomicmodel"]], "GenomicModel": [[772, "module-pybrops.model.gmod.GenomicModel"], [773, "genomicmodel"]], "check_is_GenomicModel": [[774, "check-is-genomicmodel"]], "LinearGenomicModel": [[775, "module-pybrops.model.gmod.LinearGenomicModel"], [776, "lineargenomicmodel"]], "check_is_LinearGenomicModel": [[777, "check-is-lineargenomicmodel"]], "NonlinearGenomicModel": [[778, "module-pybrops.model.gmod.NonlinearGenomicModel"], [779, "nonlineargenomicmodel"]], "check_is_NonlinearGenomicModel": [[780, "check-is-nonlineargenomicmodel"]], "rrBLUPModel0": [[781, "module-pybrops.model.gmod.rrBLUPModel0"], [784, "rrblupmodel0"]], "check_is_rrBLUPModel0": [[782, "check-is-rrblupmodel0"]], "gauss_seidel": [[783, "gauss-seidel"]], "rrBLUP_ML0": [[785, "rrblup-ml0"]], "rrBLUP_ML0_calc_G": [[786, "rrblup-ml0-calc-g"]], "rrBLUP_ML0_calc_ZtZplI": [[787, "rrblup-ml0-calc-ztzpli"]], "rrBLUP_ML0_calc_Zty": [[788, "rrblup-ml0-calc-zty"]], "rrBLUP_ML0_calc_d_V": [[789, "rrblup-ml0-calc-d-v"]], "rrBLUP_ML0_calc_etasq": [[790, "rrblup-ml0-calc-etasq"]], "rrBLUP_ML0_calc_ridge": [[791, "rrblup-ml0-calc-ridge"]], "rrBLUP_ML0_center_y": [[792, "rrblup-ml0-center-y"]], "rrBLUP_ML0_neg2LogLik_fast": [[793, "rrblup-ml0-neg2loglik-fast"]], "rrBLUP_ML0_nonzero_d_V": [[794, "rrblup-ml0-nonzero-d-v"]], "pcvmat": [[795, "module-pybrops.model.pcvmat"]], "AdditiveProgenyGeneticCovarianceMatrix": [[796, "module-pybrops.model.pcvmat.AdditiveProgenyGeneticCovarianceMatrix"], [797, "additiveprogenygeneticcovariancematrix"]], "check_is_AdditiveProgenyGeneticCovarianceMatrix": [[798, "check-is-additiveprogenygeneticcovariancematrix"]], "AdditiveProgenyGenicCovarianceMatrix": [[799, "module-pybrops.model.pcvmat.AdditiveProgenyGenicCovarianceMatrix"], [800, "additiveprogenygeniccovariancematrix"]], "check_is_AdditiveProgenyGenicCovarianceMatrix": [[801, "check-is-additiveprogenygeniccovariancematrix"]], "DenseAdditiveProgenyGeneticCovarianceMatrix": [[802, "module-pybrops.model.pcvmat.DenseAdditiveProgenyGeneticCovarianceMatrix"], [803, "denseadditiveprogenygeneticcovariancematrix"]], "check_is_DenseAdditiveProgenyGeneticCovarianceMatrix": [[804, "check-is-denseadditiveprogenygeneticcovariancematrix"]], "DenseAdditiveProgenyGenicCovarianceMatrix": [[805, "module-pybrops.model.pcvmat.DenseAdditiveProgenyGenicCovarianceMatrix"], [806, "denseadditiveprogenygeniccovariancematrix"]], "check_is_DenseAdditiveProgenyGenicCovarianceMatrix": [[807, "check-is-denseadditiveprogenygeniccovariancematrix"]], "DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix": [[808, "module-pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix"], [809, "densedihybriddhadditiveprogenygeneticcovariancematrix"]], "check_is_DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix": [[810, "check-is-densedihybriddhadditiveprogenygeneticcovariancematrix"]], "DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix": [[811, "module-pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix"], [812, "densedihybriddhadditiveprogenygeniccovariancematrix"]], "DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix": [[813, "module-pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix"], [814, "densefourwaydhadditiveprogenygeneticcovariancematrix"]], "check_is_DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix": [[815, "check-is-densefourwaydhadditiveprogenygeneticcovariancematrix"]], "DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix": [[816, "module-pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix"], [817, "densefourwaydhadditiveprogenygeniccovariancematrix"]], "DenseProgenyGeneticCovarianceMatrix": [[818, "module-pybrops.model.pcvmat.DenseProgenyGeneticCovarianceMatrix"], [819, "denseprogenygeneticcovariancematrix"]], "check_is_DenseProgenyGeneticCovarianceMatrix": [[820, "check-is-denseprogenygeneticcovariancematrix"]], "DenseProgenyGenicCovarianceMatrix": [[821, "module-pybrops.model.pcvmat.DenseProgenyGenicCovarianceMatrix"], [822, "denseprogenygeniccovariancematrix"]], "check_is_DenseProgenyGenicCovarianceMatrix": [[823, "check-is-denseprogenygeniccovariancematrix"]], "DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix": [[824, "module-pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix"], [825, "densethreewaydhadditiveprogenygeneticcovariancematrix"]], "DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix": [[826, "module-pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix"], [827, "densethreewaydhadditiveprogenygeniccovariancematrix"]], "DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix": [[828, "module-pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix"], [829, "densetwowaydhadditiveprogenygeneticcovariancematrix"]], "DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix": [[830, "module-pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix"], [831, "densetwowaydhadditiveprogenygeniccovariancematrix"]], "ProgenyGeneticCovarianceMatrix": [[832, "module-pybrops.model.pcvmat.ProgenyGeneticCovarianceMatrix"], [833, "progenygeneticcovariancematrix"]], "check_is_ProgenyGeneticCovarianceMatrix": [[834, "check-is-progenygeneticcovariancematrix"]], "ProgenyGenicCovarianceMatrix": [[835, "module-pybrops.model.pcvmat.ProgenyGenicCovarianceMatrix"], [836, "progenygeniccovariancematrix"]], "check_is_ProgenyGenicCovarianceMatrix": [[837, "check-is-progenygeniccovariancematrix"]], "vmat": [[838, "module-pybrops.model.vmat"]], "AdditiveGeneticVarianceMatrix": [[839, "module-pybrops.model.vmat.AdditiveGeneticVarianceMatrix"], [840, "additivegeneticvariancematrix"]], "check_is_AdditiveGeneticVarianceMatrix": [[841, "check-is-additivegeneticvariancematrix"]], "AdditiveGenicVarianceMatrix": [[842, "module-pybrops.model.vmat.AdditiveGenicVarianceMatrix"], [843, "additivegenicvariancematrix"]], "check_is_AdditiveGenicVarianceMatrix": [[844, "check-is-additivegenicvariancematrix"]], "DenseAdditiveGeneticVarianceMatrix": [[845, "module-pybrops.model.vmat.DenseAdditiveGeneticVarianceMatrix"], [846, "denseadditivegeneticvariancematrix"]], "check_is_DenseAdditiveGeneticVarianceMatrix": [[847, "check-is-denseadditivegeneticvariancematrix"]], "DenseAdditiveGenicVarianceMatrix": [[848, "module-pybrops.model.vmat.DenseAdditiveGenicVarianceMatrix"], [849, "denseadditivegenicvariancematrix"]], "check_is_DenseAdditiveGenicVarianceMatrix": [[850, "check-is-denseadditivegenicvariancematrix"]], "DenseDihybridDHAdditiveGeneticVarianceMatrix": [[851, "module-pybrops.model.vmat.DenseDihybridDHAdditiveGeneticVarianceMatrix"], [852, "densedihybriddhadditivegeneticvariancematrix"]], "check_is_DenseDihybridDHAdditiveGeneticVarianceMatrix": [[853, "check-is-densedihybriddhadditivegeneticvariancematrix"]], "DenseDihybridDHAdditiveGenicVarianceMatrix": [[854, "module-pybrops.model.vmat.DenseDihybridDHAdditiveGenicVarianceMatrix"], [855, "densedihybriddhadditivegenicvariancematrix"]], "DenseFourWayDHAdditiveGeneticVarianceMatrix": [[856, "module-pybrops.model.vmat.DenseFourWayDHAdditiveGeneticVarianceMatrix"], [857, "densefourwaydhadditivegeneticvariancematrix"]], "check_is_DenseFourWayDHAdditiveGeneticVarianceMatrix": [[858, "check-is-densefourwaydhadditivegeneticvariancematrix"]], "DenseFourWayDHAdditiveGenicVarianceMatrix": [[859, "module-pybrops.model.vmat.DenseFourWayDHAdditiveGenicVarianceMatrix"], [860, "densefourwaydhadditivegenicvariancematrix"]], "DenseGeneticVarianceMatrix": [[861, "module-pybrops.model.vmat.DenseGeneticVarianceMatrix"], [862, "densegeneticvariancematrix"]], "check_is_DenseGeneticVarianceMatrix": [[863, "check-is-densegeneticvariancematrix"]], "DenseGenicVarianceMatrix": [[864, "module-pybrops.model.vmat.DenseGenicVarianceMatrix"], [865, "densegenicvariancematrix"]], "check_is_DenseGenicVarianceMatrix": [[866, "check-is-densegenicvariancematrix"]], "DenseThreeWayDHAdditiveGeneticVarianceMatrix": [[867, "module-pybrops.model.vmat.DenseThreeWayDHAdditiveGeneticVarianceMatrix"], [868, "densethreewaydhadditivegeneticvariancematrix"]], "DenseThreeWayDHAdditiveGenicVarianceMatrix": [[869, "module-pybrops.model.vmat.DenseThreeWayDHAdditiveGenicVarianceMatrix"], [870, "densethreewaydhadditivegenicvariancematrix"]], "DenseTwoWayDHAdditiveGeneticVarianceMatrix": [[871, "module-pybrops.model.vmat.DenseTwoWayDHAdditiveGeneticVarianceMatrix"], [872, "densetwowaydhadditivegeneticvariancematrix"]], "DenseTwoWayDHAdditiveGenicVarianceMatrix": [[873, "module-pybrops.model.vmat.DenseTwoWayDHAdditiveGenicVarianceMatrix"], [874, "densetwowaydhadditivegenicvariancematrix"]], "GeneticVarianceMatrix": [[875, "module-pybrops.model.vmat.GeneticVarianceMatrix"], [876, "geneticvariancematrix"]], "check_is_GeneticVarianceMatrix": [[877, "check-is-geneticvariancematrix"]], "GenicVarianceMatrix": [[878, "module-pybrops.model.vmat.GenicVarianceMatrix"], [879, "genicvariancematrix"]], "check_is_GenicVarianceMatrix": [[880, "check-is-genicvariancematrix"]], "fcty": [[881, "module-pybrops.model.vmat.fcty"], [1062, "module-pybrops.popgen.cmat.fcty"]], "AdditiveGeneticVarianceMatrixFactory": [[882, "module-pybrops.model.vmat.fcty.AdditiveGeneticVarianceMatrixFactory"], [883, "additivegeneticvariancematrixfactory"]], "check_is_AdditiveGeneticVarianceMatrixFactory": [[884, "check-is-additivegeneticvariancematrixfactory"]], "AdditiveGenicVarianceMatrixFactory": [[885, "module-pybrops.model.vmat.fcty.AdditiveGenicVarianceMatrixFactory"], [886, "additivegenicvariancematrixfactory"]], "check_is_AdditiveGenicVarianceMatrixFactory": [[887, "check-is-additivegenicvariancematrixfactory"]], "DenseDihybridDHAdditiveGeneticVarianceMatrixFactory": [[888, "module-pybrops.model.vmat.fcty.DenseDihybridDHAdditiveGeneticVarianceMatrixFactory"], [889, "densedihybriddhadditivegeneticvariancematrixfactory"]], "check_is_DenseDihybridDHAdditiveGeneticVarianceMatrixFactory": [[890, "check-is-densedihybriddhadditivegeneticvariancematrixfactory"]], "DenseFourWayDHAdditiveGeneticVarianceMatrixFactory": [[891, "module-pybrops.model.vmat.fcty.DenseFourWayDHAdditiveGeneticVarianceMatrixFactory"], [892, "densefourwaydhadditivegeneticvariancematrixfactory"]], "check_is_DenseFourWayDHAdditiveGeneticVarianceMatrixFactory": [[893, "check-is-densefourwaydhadditivegeneticvariancematrixfactory"]], "DenseThreeWayDHAdditiveGeneticVarianceMatrixFactory": [[894, "module-pybrops.model.vmat.fcty.DenseThreeWayDHAdditiveGeneticVarianceMatrixFactory"], [895, "densethreewaydhadditivegeneticvariancematrixfactory"]], "check_is_DenseThreeWayDHAdditiveGeneticVarianceMatrixFactory": [[896, "check-is-densethreewaydhadditivegeneticvariancematrixfactory"]], "DenseTwoWayDHAdditiveGeneticVarianceMatrixFactory": [[897, "module-pybrops.model.vmat.fcty.DenseTwoWayDHAdditiveGeneticVarianceMatrixFactory"], [898, "densetwowaydhadditivegeneticvariancematrixfactory"]], "check_is_DenseTwoWayDHAdditiveGeneticVarianceMatrixFactory": [[899, "check-is-densetwowaydhadditivegeneticvariancematrixfactory"]], "DenseTwoWayDHAdditiveGenicVarianceMatrixFactory": [[900, "module-pybrops.model.vmat.fcty.DenseTwoWayDHAdditiveGenicVarianceMatrixFactory"], [901, "densetwowaydhadditivegenicvariancematrixfactory"]], "check_is_DenseTwoWayDHAdditiveGenicVarianceMatrixFactory": [[902, "check-is-densetwowaydhadditivegenicvariancematrixfactory"]], "GeneticVarianceMatrixFactory": [[903, "module-pybrops.model.vmat.fcty.GeneticVarianceMatrixFactory"], [904, "geneticvariancematrixfactory"]], "check_is_GeneticVarianceMatrixFactory": [[905, "check-is-geneticvariancematrixfactory"]], "GenicVarianceMatrixFactory": [[906, "module-pybrops.model.vmat.fcty.GenicVarianceMatrixFactory"], [907, "genicvariancematrixfactory"]], "check_is_GenicVarianceMatrixFactory": [[908, "check-is-genicvariancematrixfactory"]], "cov_D1s": [[910, "cov-d1s"]], "cov_D1st": [[911, "cov-d1st"]], "cov_D2s": [[912, "cov-d2s"]], "cov_D2st": [[913, "cov-d2st"]], "rprob_filial": [[914, "rprob-filial"]], "opt": [[915, "module-pybrops.opt"]], "algo": [[916, "module-pybrops.opt.algo"]], "BinaryGeneticAlgorithm": [[917, "module-pybrops.opt.algo.BinaryGeneticAlgorithm"], [918, "binarygeneticalgorithm"]], "BinaryOptimizationAlgorithm": [[919, "module-pybrops.opt.algo.BinaryOptimizationAlgorithm"], [920, "binaryoptimizationalgorithm"]], "check_is_BinaryOptimizationAlgorithm": [[921, "check-is-binaryoptimizationalgorithm"]], "IntegerGeneticAlgorithm": [[922, "module-pybrops.opt.algo.IntegerGeneticAlgorithm"], [923, "integergeneticalgorithm"]], "IntegerOptimizationAlgorithm": [[924, "module-pybrops.opt.algo.IntegerOptimizationAlgorithm"], [925, "integeroptimizationalgorithm"]], "check_is_IntegerOptimizationAlgorithm": [[926, "check-is-integeroptimizationalgorithm"]], "NSGA2BinaryGeneticAlgorithm": [[927, "module-pybrops.opt.algo.NSGA2BinaryGeneticAlgorithm"], [928, "nsga2binarygeneticalgorithm"]], "NSGA2IntegerGeneticAlgorithm": [[929, "module-pybrops.opt.algo.NSGA2IntegerGeneticAlgorithm"], [930, "nsga2integergeneticalgorithm"]], "NSGA2MemeticSubsetGeneticAlgorithm": [[931, "module-pybrops.opt.algo.NSGA2MemeticSubsetGeneticAlgorithm"]], "NSGA2MutatorASubsetGeneticAlgorithm": [[932, "nsga2mutatorasubsetgeneticalgorithm"]], "NSGA2MutatorBSubsetGeneticAlgorithm": [[933, "nsga2mutatorbsubsetgeneticalgorithm"]], "NSGA2SteepestDescentSubsetGeneticAlgorithm": [[934, "nsga2steepestdescentsubsetgeneticalgorithm"]], "NSGA2StochasticDescentSubsetGeneticAlgorithm": [[935, "nsga2stochasticdescentsubsetgeneticalgorithm"]], "NSGA2RealGeneticAlgorithm": [[936, "module-pybrops.opt.algo.NSGA2RealGeneticAlgorithm"], [937, "nsga2realgeneticalgorithm"]], "NSGA2SubsetGeneticAlgorithm": [[938, "module-pybrops.opt.algo.NSGA2SubsetGeneticAlgorithm"], [939, "nsga2subsetgeneticalgorithm"]], "NSGA3SubsetGeneticAlgorithm": [[940, "module-pybrops.opt.algo.NSGA3SubsetGeneticAlgorithm"], [941, "nsga3subsetgeneticalgorithm"]], "OptimizationAlgorithm": [[942, "module-pybrops.opt.algo.OptimizationAlgorithm"], [943, "optimizationalgorithm"]], "check_is_OptimizationAlgorithm": [[944, "check-is-optimizationalgorithm"], [965, "check-is-optimizationalgorithm"]], "RealGeneticAlgorithm": [[945, "module-pybrops.opt.algo.RealGeneticAlgorithm"], [946, "realgeneticalgorithm"]], "RealOptimizationAlgorithm": [[947, "module-pybrops.opt.algo.RealOptimizationAlgorithm"], [948, "realoptimizationalgorithm"]], "check_is_RealOptimizationAlgorithm": [[949, "check-is-realoptimizationalgorithm"]], "SortingSteepestDescentSubsetHillClimber": [[950, "module-pybrops.opt.algo.SortingSteepestDescentSubsetHillClimber"], [951, "sortingsteepestdescentsubsethillclimber"]], "SortingSubsetOptimizationAlgorithm": [[952, "module-pybrops.opt.algo.SortingSubsetOptimizationAlgorithm"], [953, "sortingsubsetoptimizationalgorithm"]], "SteepestDescentSubsetHillClimber": [[954, "module-pybrops.opt.algo.SteepestDescentSubsetHillClimber"], [955, "steepestdescentsubsethillclimber"]], "SubsetGeneticAlgorithm": [[956, "module-pybrops.opt.algo.SubsetGeneticAlgorithm"], [957, "subsetgeneticalgorithm"]], "SubsetOptimizationAlgorithm": [[958, "module-pybrops.opt.algo.SubsetOptimizationAlgorithm"], [959, "subsetoptimizationalgorithm"]], "check_is_SubsetOptimizationAlgorithm": [[960, "check-is-subsetoptimizationalgorithm"]], "UnconstrainedNSGA2SetGeneticAlgorithm": [[961, "module-pybrops.opt.algo.UnconstrainedNSGA2SetGeneticAlgorithm"], [962, "unconstrainednsga2setgeneticalgorithm"]], "UnconstrainedOptimizationAlgorithm": [[963, "module-pybrops.opt.algo.UnconstrainedOptimizationAlgorithm"], [964, "unconstrainedoptimizationalgorithm"]], "UnconstrainedSetGeneticAlgorithm": [[966, "module-pybrops.opt.algo.UnconstrainedSetGeneticAlgorithm"], [967, "unconstrainedsetgeneticalgorithm"]], "UnconstrainedSteepestAscentSetHillClimber": [[968, "module-pybrops.opt.algo.UnconstrainedSteepestAscentSetHillClimber"], [969, "unconstrainedsteepestascentsethillclimber"]], "pymoo_addon": [[970, "module-pybrops.opt.algo.pymoo_addon"]], "IntegerPolynomialMutation": [[971, "integerpolynomialmutation"]], "IntegerSimulatedBinaryCrossover": [[972, "integersimulatedbinarycrossover"]], "MultiObjectiveSteepestDescentHillClimberMutation": [[973, "multiobjectivesteepestdescenthillclimbermutation"]], "MultiObjectiveStochasticDescentHillClimberMutation": [[974, "multiobjectivestochasticdescenthillclimbermutation"]], "MultiObjectiveStochasticHillClimberMutation": [[975, "multiobjectivestochastichillclimbermutation"]], "MutatorA": [[976, "mutatora"]], "MutatorB": [[977, "mutatorb"]], "MutatorF": [[978, "mutatorf"]], "ReducedExchangeCrossover": [[979, "reducedexchangecrossover"]], "Citations": [[979, "citations"], [980, "citations"]], "ReducedExchangeMutation": [[980, "reducedexchangemutation"]], "StochasticHillClimberMutation": [[981, "stochastichillclimbermutation"]], "SubsetRandomSampling": [[982, "subsetrandomsampling"]], "dominates": [[983, "dominates"]], "BinaryProblem": [[986, "module-pybrops.opt.prob.BinaryProblem"], [987, "binaryproblem"]], "check_BinaryProblem_is_multi_objective": [[988, "check-binaryproblem-is-multi-objective"]], "check_BinaryProblem_is_single_objective": [[989, "check-binaryproblem-is-single-objective"]], "check_is_BinaryProblem": [[990, "check-is-binaryproblem"]], "FunctionWeight": [[991, "module-pybrops.opt.prob.FunctionWeight"], [992, "functionweight"]], "MaximizingFunctionWeight": [[993, "maximizingfunctionweight"]], "MinimizingFunctionWeight": [[994, "minimizingfunctionweight"]], "IntegerProblem": [[995, "module-pybrops.opt.prob.IntegerProblem"], [996, "integerproblem"]], "check_IntegerProblem_is_multi_objective": [[997, "check-integerproblem-is-multi-objective"]], "check_IntegerProblem_is_single_objective": [[998, "check-integerproblem-is-single-objective"]], "check_is_IntegerProblem": [[999, "check-is-integerproblem"]], "Problem": [[1000, "module-pybrops.opt.prob.Problem"], [1001, "problem"]], "check_is_Problem": [[1002, "check-is-problem"]], "RealProblem": [[1003, "module-pybrops.opt.prob.RealProblem"], [1004, "realproblem"]], "check_RealProblem_is_multi_objective": [[1005, "check-realproblem-is-multi-objective"]], "check_RealProblem_is_single_objective": [[1006, "check-realproblem-is-single-objective"]], "check_is_RealProblem": [[1007, "check-is-realproblem"]], "SubsetProblem": [[1008, "module-pybrops.opt.prob.SubsetProblem"], [1009, "subsetproblem"]], "check_SubsetProblem_is_multi_objective": [[1010, "check-subsetproblem-is-multi-objective"]], "check_SubsetProblem_is_single_objective": [[1011, "check-subsetproblem-is-single-objective"]], "check_is_SubsetProblem": [[1012, "check-is-subsetproblem"]], "BinarySolution": [[1014, "module-pybrops.opt.soln.BinarySolution"], [1015, "binarysolution"]], "check_is_BinarySolution": [[1016, "check-is-binarysolution"]], "IntegerSolution": [[1017, "module-pybrops.opt.soln.IntegerSolution"], [1018, "integersolution"]], "check_is_IntegerSolution": [[1019, "check-is-integersolution"]], "RealSolution": [[1020, "module-pybrops.opt.soln.RealSolution"], [1021, "realsolution"]], "check_is_RealSolution": [[1022, "check-is-realsolution"]], "Solution": [[1023, "module-pybrops.opt.soln.Solution"], [1024, "solution"]], "check_is_Solution": [[1025, "check-is-solution"]], "SubsetSolution": [[1026, "module-pybrops.opt.soln.SubsetSolution"], [1027, "subsetsolution"]], "check_is_SubsetSolution": [[1028, "check-is-subsetsolution"]], "popgen": [[1029, "module-pybrops.popgen"]], "bvmat": [[1030, "module-pybrops.popgen.bvmat"]], "BreedingValueMatrix": [[1031, "module-pybrops.popgen.bvmat.BreedingValueMatrix"], [1032, "breedingvaluematrix"]], "check_is_BreedingValueMatrix": [[1033, "check-is-breedingvaluematrix"]], "DenseBreedingValueMatrix": [[1034, "module-pybrops.popgen.bvmat.DenseBreedingValueMatrix"], [1035, "densebreedingvaluematrix"]], "check_is_DenseBreedingValueMatrix": [[1036, "check-is-densebreedingvaluematrix"]], "DenseEstimatedBreedingValueMatrix": [[1037, "module-pybrops.popgen.bvmat.DenseEstimatedBreedingValueMatrix"], [1038, "denseestimatedbreedingvaluematrix"]], "check_is_DenseEstimatedBreedingValueMatrix": [[1039, "check-is-denseestimatedbreedingvaluematrix"]], "DenseGenomicEstimatedBreedingValueMatrix": [[1040, "module-pybrops.popgen.bvmat.DenseGenomicEstimatedBreedingValueMatrix"], [1041, "densegenomicestimatedbreedingvaluematrix"]], "check_is_DenseGenomicEstimatedBreedingValueMatrix": [[1042, "check-is-densegenomicestimatedbreedingvaluematrix"]], "cmat": [[1043, "module-pybrops.popgen.cmat"]], "CoancestryMatrix": [[1044, "module-pybrops.popgen.cmat.CoancestryMatrix"], [1045, "coancestrymatrix"]], "check_is_CoancestryMatrix": [[1046, "check-is-coancestrymatrix"]], "DenseCoancestryMatrix": [[1047, "module-pybrops.popgen.cmat.DenseCoancestryMatrix"], [1048, "densecoancestrymatrix"]], "check_is_DenseCoancestryMatrix": [[1049, "check-is-densecoancestrymatrix"]], "DenseGeneralizedWeightedCoancestryMatrix": [[1050, "module-pybrops.popgen.cmat.DenseGeneralizedWeightedCoancestryMatrix"], [1051, "densegeneralizedweightedcoancestrymatrix"]], "check_is_DenseGeneralizedWeightedCoancestryMatrix": [[1052, "check-is-densegeneralizedweightedcoancestrymatrix"]], "DenseMolecularCoancestryMatrix": [[1053, "module-pybrops.popgen.cmat.DenseMolecularCoancestryMatrix"], [1054, "densemolecularcoancestrymatrix"]], "check_is_DenseMolecularCoancestryMatrix": [[1055, "check-is-densemolecularcoancestrymatrix"]], "DenseVanRadenCoancestryMatrix": [[1056, "module-pybrops.popgen.cmat.DenseVanRadenCoancestryMatrix"], [1057, "densevanradencoancestrymatrix"]], "check_is_DenseVanRadenCoancestryMatrix": [[1058, "check-is-densevanradencoancestrymatrix"]], "DenseYangCoancestryMatrix": [[1059, "module-pybrops.popgen.cmat.DenseYangCoancestryMatrix"], [1060, "denseyangcoancestrymatrix"]], "check_is_DenseYangCoancestryMatrix": [[1061, "check-is-denseyangcoancestrymatrix"]], "CoancestryMatrixFactory": [[1063, "module-pybrops.popgen.cmat.fcty.CoancestryMatrixFactory"], [1064, "coancestrymatrixfactory"]], "check_is_CoancestryMatrixFactory": [[1065, "check-is-coancestrymatrixfactory"]], "DenseCoancestryMatrixFactory": [[1066, "module-pybrops.popgen.cmat.fcty.DenseCoancestryMatrixFactory"], [1067, "densecoancestrymatrixfactory"]], "check_is_DenseCoancestryMatrixFactory": [[1068, "check-is-densecoancestrymatrixfactory"]], "DenseGeneralizedWeightedCoancestryMatrixFactory": [[1069, "module-pybrops.popgen.cmat.fcty.DenseGeneralizedWeightedCoancestryMatrixFactory"], [1070, "densegeneralizedweightedcoancestrymatrixfactory"]], "check_is_DenseGeneralizedWeightedCoancestryMatrixFactory": [[1071, "check-is-densegeneralizedweightedcoancestrymatrixfactory"]], "DenseMolecularCoancestryMatrixFactory": [[1072, "module-pybrops.popgen.cmat.fcty.DenseMolecularCoancestryMatrixFactory"], [1073, "densemolecularcoancestrymatrixfactory"]], "check_is_DenseMolecularCoancestryMatrixFactory": [[1074, "check-is-densemolecularcoancestrymatrixfactory"]], "DenseVanRadenCoancestryMatrixFactory": [[1075, "module-pybrops.popgen.cmat.fcty.DenseVanRadenCoancestryMatrixFactory"], [1076, "densevanradencoancestrymatrixfactory"]], "check_is_DenseVanRadenCoancestryMatrixFactory": [[1077, "check-is-densevanradencoancestrymatrixfactory"]], "DenseYangCoancestryMatrixFactory": [[1078, "module-pybrops.popgen.cmat.fcty.DenseYangCoancestryMatrixFactory"], [1079, "denseyangcoancestrymatrixfactory"]], "check_is_DenseYangCoancestryMatrixFactory": [[1080, "check-is-denseyangcoancestrymatrixfactory"]], "gmap": [[1081, "module-pybrops.popgen.gmap"]], "DenseGeneticMappableMatrix": [[1082, "module-pybrops.popgen.gmap.DenseGeneticMappableMatrix"], [1083, "densegeneticmappablematrix"]], "check_is_DenseGeneticMappableMatrix": [[1084, "check-is-densegeneticmappablematrix"]], "ExtendedGeneticMap": [[1085, "module-pybrops.popgen.gmap.ExtendedGeneticMap"], [1086, "extendedgeneticmap"]], "check_is_ExtendedGeneticMap": [[1087, "check-is-extendedgeneticmap"]], "GeneticMap": [[1088, "module-pybrops.popgen.gmap.GeneticMap"], [1089, "geneticmap"]], "check_is_GeneticMap": [[1090, "check-is-geneticmap"]], "GeneticMapFunction": [[1091, "module-pybrops.popgen.gmap.GeneticMapFunction"], [1092, "geneticmapfunction"]], "check_is_GeneticMapFunction": [[1093, "check-is-geneticmapfunction"]], "GeneticMappableMatrix": [[1094, "module-pybrops.popgen.gmap.GeneticMappableMatrix"], [1095, "geneticmappablematrix"]], "check_is_GeneticMappableMatrix": [[1096, "check-is-geneticmappablematrix"]], "HaldaneMapFunction": [[1097, "module-pybrops.popgen.gmap.HaldaneMapFunction"], [1098, "haldanemapfunction"]], "check_is_HaldaneMapFunction": [[1099, "check-is-haldanemapfunction"]], "KosambiMapFunction": [[1100, "module-pybrops.popgen.gmap.KosambiMapFunction"], [1101, "kosambimapfunction"]], "check_is_KosambiMapFunction": [[1102, "check-is-kosambimapfunction"]], "StandardGeneticMap": [[1103, "module-pybrops.popgen.gmap.StandardGeneticMap"], [1104, "standardgeneticmap"]], "check_is_StandardGeneticMap": [[1105, "check-is-standardgeneticmap"]], "cM2d": [[1107, "cm2d"]], "gmat": [[1108, "module-pybrops.popgen.gmat"]], "DenseGenotypeMatrix": [[1109, "module-pybrops.popgen.gmat.DenseGenotypeMatrix"], [1110, "densegenotypematrix"]], "check_is_DenseGenotypeMatrix": [[1111, "check-is-densegenotypematrix"]], "DensePhasedGenotypeMatrix": [[1112, "module-pybrops.popgen.gmat.DensePhasedGenotypeMatrix"], [1113, "densephasedgenotypematrix"]], "check_DensePhasedGenotypeMatrix_has_vrnt_xoprob": [[1114, "check-densephasedgenotypematrix-has-vrnt-xoprob"]], "check_is_DensePhasedGenotypeMatrix": [[1115, "check-is-densephasedgenotypematrix"]], "GenotypeMatrix": [[1116, "module-pybrops.popgen.gmat.GenotypeMatrix"], [1117, "genotypematrix"]], "check_GenotypeMatrix_has_taxa": [[1118, "check-genotypematrix-has-taxa"]], "check_is_GenotypeMatrix": [[1119, "check-is-genotypematrix"]], "HaplotypeMatrix": [[1120, "module-pybrops.popgen.gmat.HaplotypeMatrix"], [1121, "haplotypematrix"]], "check_is_HaplotypeMatrix": [[1122, "check-is-haplotypematrix"]], "PhasedGenotypeMatrix": [[1123, "module-pybrops.popgen.gmat.PhasedGenotypeMatrix"], [1124, "phasedgenotypematrix"]], "check_is_PhasedGenotypeMatrix": [[1125, "check-is-phasedgenotypematrix"]], "PhasedHaplotypeMatrix": [[1126, "module-pybrops.popgen.gmat.PhasedHaplotypeMatrix"], [1127, "phasedhaplotypematrix"]], "check_is_PhasedHaplotypeMatrix": [[1128, "check-is-phasedhaplotypematrix"]], "test": [[1129, "module-pybrops.test"]], "assert_python": [[1130, "module-pybrops.test.assert_python"]], "assert_class_documentation": [[1131, "assert-class-documentation"]], "assert_class_isabstract": [[1132, "assert-class-isabstract"]], "assert_class_isconcrete": [[1133, "assert-class-isconcrete"]], "assert_class_ismixin": [[1134, "assert-class-ismixin"]], "assert_class_issemiabstract": [[1135, "assert-class-issemiabstract"]], "assert_classmethod_documentation": [[1136, "assert-classmethod-documentation"]], "assert_classmethod_isabstract": [[1137, "assert-classmethod-isabstract"]], "assert_classmethod_isconcrete": [[1138, "assert-classmethod-isconcrete"]], "assert_classmethod_not_raises_NotImplementedError": [[1139, "assert-classmethod-not-raises-notimplementederror"]], "assert_classmethod_raises_NotImplementedError": [[1140, "assert-classmethod-raises-notimplementederror"]], "assert_docstring": [[1141, "assert-docstring"]], "assert_function_documentation": [[1142, "assert-function-documentation"]], "assert_function_isabstract": [[1143, "assert-function-isabstract"]], "assert_function_isconcrete": [[1144, "assert-function-isconcrete"]], "assert_function_not_raises_NotImplementedError": [[1145, "assert-function-not-raises-notimplementederror"]], "assert_function_raises_NotImplementedError": [[1146, "assert-function-raises-notimplementederror"]], "assert_hasattr": [[1147, "assert-hasattr"]], "assert_method_documentation": [[1148, "assert-method-documentation"]], "assert_method_isabstract": [[1149, "assert-method-isabstract"]], "assert_method_isconcrete": [[1150, "assert-method-isconcrete"]], "assert_method_not_raises_NotImplementedError": [[1151, "assert-method-not-raises-notimplementederror"]], "assert_method_raises_NotImplementedError": [[1152, "assert-method-raises-notimplementederror"]], "assert_module_documentation": [[1153, "assert-module-documentation"]], "assert_property_documentation": [[1154, "assert-property-documentation"]], "assert_property_isabstract": [[1155, "assert-property-isabstract"]], "assert_property_isconcrete": [[1156, "assert-property-isconcrete"]], "assert_property_not_raises_NotImplementedError": [[1157, "assert-property-not-raises-notimplementederror"]], "assert_property_raises_NotImplementedError": [[1158, "assert-property-raises-notimplementederror"]], "not_raises": [[1159, "not-raises"]], "raises": [[1160, "raises"]], "Advanced PyBrOpS Usage": [[1161, "advanced-pybrops-usage"]], "Contributing to PyBrOpS": [[1163, "contributing-to-pybrops"]], "Frequently Asked Questions": [[1164, "frequently-asked-questions"]], "PyBrOpS Implemented Software Architecture": [[1165, "pybrops-implemented-software-architecture"]], "PyBrOpS Software Architecture Philosophy": [[1166, "pybrops-software-architecture-philosophy"]], "SOLID Design Principles": [[1166, "id1"]], "How PyBrOpS uses SOLID Design Principles": [[1166, "how-pybrops-uses-solid-design-principles"]], "Use of the Single Responsiblity Principle (SRP)": [[1166, "use-of-the-single-responsiblity-principle-srp"]], "Use of the Open-Closed Principle (OCP)": [[1166, "use-of-the-open-closed-principle-ocp"]], "Use of the Liskov Substitutuion Principle (LSP)": [[1166, "use-of-the-liskov-substitutuion-principle-lsp"]], "Use of the Interface Segregation Principle (ISP)": [[1166, "use-of-the-interface-segregation-principle-isp"]], "Use of the Dependency Inversion Principle (DIP)": [[1166, "use-of-the-dependency-inversion-principle-dip"]], "PyBrOpS Fundamentals": [[1167, "pybrops-fundamentals"]], "PyBrOpS Fundamentals:": [[1167, null]], "PyBrOpS Simulation Philosophy": [[1168, "pybrops-simulation-philosophy"]], "Fundamental Data Types": [[1168, "fundamental-data-types"]], "Breeding Protocols": [[1168, "breeding-protocols"]], "Breeding Operators": [[1168, "breeding-operators"]], "Getting Started": [[1169, "getting-started"]], "Basic Installation": [[1169, "basic-installation"]], "Python installation requirements": [[1169, "python-installation-requirements"]], "Python package dependencies": [[1169, "python-package-dependencies"]], "Release version installation": [[1169, "release-version-installation"]], "Basic Programming Knowledge Prerequisites": [[1169, "basic-programming-knowledge-prerequisites"]], "PyBrOpS Programming Knowledge Prerequisites": [[1169, "id1"]], "Using PyBrOpS": [[1169, "using-pybrops"]], "Advanced Installation": [[1169, "advanced-installation"]], "Linux installation requirements": [[1169, "linux-installation-requirements"]], "Linux Developmental Library Installation Commands": [[1169, "id2"]], "Developmental version installation": [[1169, "developmental-version-installation"]], "PyBrOpS Main Page": [[1170, "pybrops-main-page"]], "What is PyBrOpS?": [[1170, "what-is-pybrops"]], "PyBrOpS User Guide": [[1170, "pybrops-user-guide"]], "Contents:": [[1170, null]], "Indices and tables": [[1170, "indices-and-tables"]], "Evaluation Operators": [[1171, "evaluation-operators"]], "Class Family Overview": [[1171, "class-family-overview"], [1172, "class-family-overview"], [1173, "class-family-overview"], [1174, "class-family-overview"], [1175, "class-family-overview"], [1176, "class-family-overview"], [1177, "class-family-overview"], [1178, "class-family-overview"], [1179, "class-family-overview"], [1180, "class-family-overview"], [1181, "class-family-overview"], [1192, "class-family-overview"], [1193, "class-family-overview"], [1194, "class-family-overview"], [1195, "class-family-overview"], [1196, "class-family-overview"], [1197, "class-family-overview"], [1198, "class-family-overview"], [1199, "class-family-overview"], [1200, "class-family-overview"], [1201, "class-family-overview"], [1202, "class-family-overview"]], "Summary of Evaluation Operators": [[1171, "summary-of-evaluation-operators"]], "Summary of classes in the pybrops.breed.op.eval module": [[1171, "id1"]], "Evaluation Operator Properties": [[1171, "evaluation-operator-properties"]], "Loading Class Modules": [[1171, "loading-class-modules"], [1172, "loading-class-modules"], [1173, "loading-class-modules"], [1174, "loading-class-modules"], [1175, "loading-class-modules"], [1176, "loading-class-modules"], [1177, "loading-class-modules"], [1178, "loading-class-modules"], [1179, "loading-class-modules"], [1180, "loading-class-modules"], [1181, "loading-class-modules"], [1201, "loading-class-modules"], [1202, "loading-class-modules"]], "Defining Evaluation Operators": [[1171, "defining-evaluation-operators"]], "Creating Evaluation Operators": [[1171, "creating-evaluation-operators"]], "Evaluation of Individuals in a Breeding Program": [[1171, "evaluation-of-individuals-in-a-breeding-program"]], "Initialization Operators": [[1172, "initialization-operators"]], "Summary of Initialization Operators": [[1172, "summary-of-initialization-operators"]], "Summary of classes in the pybrops.breed.op.init module": [[1172, "id1"]], "Initialization Operators Properties": [[1172, "initialization-operators-properties"]], "Defining Initialization Operators": [[1172, "defining-initialization-operators"]], "Creating Initialization Operators": [[1172, "creating-initialization-operators"]], "Initialization of a Breeding Program": [[1172, "initialization-of-a-breeding-program"]], "Logbooks": [[1173, "logbooks"]], "Summary of Logbook Classes": [[1173, "summary-of-logbook-classes"]], "Summary of classes in the pybrops.breed.op.log module": [[1173, "id1"]], "Logbook Properties": [[1173, "logbook-properties"]], "Summary of Logbook properties": [[1173, "id2"]], "Defining Logbooks": [[1173, "defining-logbooks"]], "Creating Logbooks": [[1173, "creating-logbooks"]], "Logging States in a Breeding Program": [[1173, "logging-states-in-a-breeding-program"]], "Logging after breeding program initialization": [[1173, "logging-after-breeding-program-initialization"]], "Logging after breeding program parent selection": [[1173, "logging-after-breeding-program-parent-selection"]], "Logging after breeding program mating": [[1173, "logging-after-breeding-program-mating"]], "Logging after breeding program evaluation": [[1173, "logging-after-breeding-program-evaluation"]], "Logging after breeding program survivor selection": [[1173, "logging-after-breeding-program-survivor-selection"]], "Resetting a Logbook": [[1173, "resetting-a-logbook"]], "Writing a Logbook to a File": [[1173, "writing-a-logbook-to-a-file"]], "Mating Operators": [[1174, "mating-operators"]], "Summary of Mating Operators": [[1174, "summary-of-mating-operators"]], "Summary of classes in the pybrops.breed.op.mate module": [[1174, "id1"]], "Mating Operator Properties": [[1174, "mating-operator-properties"]], "Defining Mating Operators": [[1174, "defining-mating-operators"]], "Creating Mating Operators": [[1174, "creating-mating-operators"]], "Mating Individiuals in a Breeding Program": [[1174, "mating-individiuals-in-a-breeding-program"]], "Parental Selection Operators": [[1175, "parental-selection-operators"]], "Summary of Parent Selection Operators": [[1175, "summary-of-parent-selection-operators"]], "Summary of classes in the pybrops.breed.op.psel module": [[1175, "id1"]], "Parent Selection Operator Properties": [[1175, "parent-selection-operator-properties"]], "Defining Parent Selection Operators": [[1175, "defining-parent-selection-operators"]], "Creating Parent Selection Operators": [[1175, "creating-parent-selection-operators"]], "Parental Selection for a Breeding Program": [[1175, "parental-selection-for-a-breeding-program"]], "Survivor Selection Operators": [[1176, "survivor-selection-operators"]], "Summary of Survivor Selection Operators": [[1176, "summary-of-survivor-selection-operators"]], "Summary of classes in the pybrops.breed.op.ssel module": [[1176, "id1"]], "Survivor Selection Operator Properties": [[1176, "survivor-selection-operator-properties"]], "Defining Survivor Selection Operators": [[1176, "defining-survivor-selection-operators"]], "Creating Survivor Selection Operators": [[1176, "creating-survivor-selection-operators"]], "Survivor Selection for a Breeding Program": [[1176, "survivor-selection-for-a-breeding-program"]], "Breeding Value Estimation Protocols": [[1177, "breeding-value-estimation-protocols"]], "Summary of Breeding Value Protocol Classes": [[1177, "summary-of-breeding-value-protocol-classes"]], "Summary of classes in the pybrops.breed.prot.bv module": [[1177, "id1"]], "Breeding Value Protocol Properties": [[1177, "breeding-value-protocol-properties"]], "Creating Breeding Value Estimation Protocols": [[1177, "creating-breeding-value-estimation-protocols"]], "Estimating Breeding Values": [[1177, "estimating-breeding-values"]], "Genotyping Protocols": [[1178, "genotyping-protocols"]], "Summary of Genotyping Protocol Classes": [[1178, "summary-of-genotyping-protocol-classes"]], "Summary of classes in the pybrops.breed.prot.gt module": [[1178, "id1"]], "Genotyping Protocol Properties": [[1178, "genotyping-protocol-properties"]], "Creating Genotyping Protocols": [[1178, "creating-genotyping-protocols"]], "Genotyping Individuals from their Genomes": [[1178, "genotyping-individuals-from-their-genomes"]], "Mating Protocols": [[1179, "mating-protocols"]], "Summary of Mating Protocol Classes": [[1179, "summary-of-mating-protocol-classes"]], "Summary of classes in the pybrops.breed.prot.mate module": [[1179, "id1"]], "Mating Protocol Properties": [[1179, "mating-protocol-properties"]], "General properties": [[1179, "general-properties"], [1181, "general-properties"], [1193, "general-properties"], [1198, "general-properties"], [1201, "general-properties"], [1202, "general-properties"]], "Summary of MatingProtocol general properties": [[1179, "id2"]], "Creating Mating Protocols": [[1179, "creating-mating-protocols"]], "Simulating Mating and Progeny Generation": [[1179, "simulating-mating-and-progeny-generation"]], "Phenotyping Protocols": [[1180, "phenotyping-protocols"]], "Summary of Phenotyping Protocol Classes": [[1180, "summary-of-phenotyping-protocol-classes"]], "Summary of classes in the pybrops.breed.prot.pt module": [[1180, "id1"]], "Phenotyping Protocol Properties": [[1180, "phenotyping-protocol-properties"]], "Genomic model properties": [[1180, "genomic-model-properties"]], "Summary of PhenotypingProtocol genomic model properties": [[1180, "id2"]], "Error variance properties": [[1180, "error-variance-properties"]], "Summary of PhenotypingProtocol error variance properties": [[1180, "id3"]], "Creating Phenotyping Protocols": [[1180, "creating-phenotyping-protocols"]], "Setting Trait Heritabilities": [[1180, "setting-trait-heritabilities"]], "Phenotyping Individuals": [[1180, "phenotyping-individuals"]], "Selection Protocols": [[1181, "selection-protocols"]], "Summary of Selection Protocol Classes": [[1181, "summary-of-selection-protocol-classes"]], "Abstract selection protocol classes": [[1181, "abstract-selection-protocol-classes"]], "Summary of abstract classes in the pybrops.breed.prot.sel module": [[1181, "id1"]], "Concrete selection protocol classes": [[1181, "concrete-selection-protocol-classes"]], "Summary of concrete classes in the pybrops.breed.prot.sel module": [[1181, "id2"]], "Abstract interface classes": [[1181, "abstract-interface-classes"]], "Concrete implementation classes": [[1181, "concrete-implementation-classes"]], "Selection Protocol Properties": [[1181, "selection-protocol-properties"]], "Summary of SelectionProtocol general properties": [[1181, "id3"]], "Optimization problem properties": [[1181, "optimization-problem-properties"]], "Summary of SelectionProtocol optimization problem properties": [[1181, "id4"]], "Optimization algorithm properties": [[1181, "optimization-algorithm-properties"]], "Summary of SelectionProtocol optimization algorithm properties": [[1181, "id5"]], "Creating Selection Protocol Classes": [[1181, "creating-selection-protocol-classes"]], "Generating Selection Problems for Optimization": [[1181, "generating-selection-problems-for-optimization"]], "Setup for unconstrained optimization": [[1181, "setup-for-unconstrained-optimization"]], "Setup for constrained optimization": [[1181, "setup-for-constrained-optimization"]], "Generating the selection problem": [[1181, "generating-the-selection-problem"]], "Single-Objective Optimization": [[1181, "single-objective-optimization"]], "Multi-Objective Optimization": [[1181, "multi-objective-optimization"]], "Selection": [[1181, "selection"]], "Random Number Generation": [[1182, "random-number-generation"]], "Seeding PyBrOpS": [[1182, "seeding-pybrops"]], "Creating Multiple Pseudorandom Number Generators": [[1182, "creating-multiple-pseudorandom-number-generators"]], "Constrained Bi-Trait Phenotypic Selection": [[1183, "constrained-bi-trait-phenotypic-selection"]], "Simulation Preliminaries": [[1183, "simulation-preliminaries"], [1184, "simulation-preliminaries"], [1185, "simulation-preliminaries"], [1186, "simulation-preliminaries"]], "Loading Required Modules and Seeding the global PRNG": [[1183, "loading-required-modules-and-seeding-the-global-prng"], [1184, "loading-required-modules-and-seeding-the-global-prng"], [1185, "loading-required-modules-and-seeding-the-global-prng"], [1186, "loading-required-modules-and-seeding-the-global-prng"], [1190, "loading-required-modules-and-seeding-the-global-prng"], [1191, "loading-required-modules-and-seeding-the-global-prng"]], "Simulation Parameters": [[1183, "simulation-parameters"], [1184, "simulation-parameters"], [1185, "simulation-parameters"]], "Loading Genetic Map Data from a Text File": [[1183, "loading-genetic-map-data-from-a-text-file"], [1184, "loading-genetic-map-data-from-a-text-file"], [1185, "loading-genetic-map-data-from-a-text-file"], [1186, "loading-genetic-map-data-from-a-text-file"]], "Creating a Genetic Map Function": [[1183, "creating-a-genetic-map-function"], [1184, "creating-a-genetic-map-function"], [1185, "creating-a-genetic-map-function"], [1186, "creating-a-genetic-map-function"]], "Loading Genome Data from a VCF File": [[1183, "loading-genome-data-from-a-vcf-file"], [1184, "loading-genome-data-from-a-vcf-file"], [1185, "loading-genome-data-from-a-vcf-file"], [1186, "loading-genome-data-from-a-vcf-file"]], "Constructing a Bi-Trait Genomic Model": [[1183, "constructing-a-bi-trait-genomic-model"], [1185, "constructing-a-bi-trait-genomic-model"], [1188, "constructing-a-bi-trait-genomic-model"], [1189, "constructing-a-bi-trait-genomic-model"], [1191, "constructing-a-bi-trait-genomic-model"]], "Build Founder Populations & Run Breeding Program Burn-In": [[1183, "build-founder-populations-run-breeding-program-burn-in"], [1184, "build-founder-populations-run-breeding-program-burn-in"]], "Randomly Intermate for nrandmate Generations": [[1183, "randomly-intermate-for-nrandmate-generations"], [1184, "randomly-intermate-for-nrandmate-generations"]], "Create Breeding Protocols for Burn-In": [[1183, "create-breeding-protocols-for-burn-in"], [1184, "create-breeding-protocols-for-burn-in"]], "Create a Within-Family Selection Function": [[1183, "create-a-within-family-selection-function"], [1184, "create-a-within-family-selection-function"]], "Create Cohort Structure": [[1183, "create-cohort-structure"], [1184, "create-cohort-structure"], [1185, "create-cohort-structure"]], "Create a Burn-In Selection Protocol Object": [[1183, "create-a-burn-in-selection-protocol-object"], [1184, "create-a-burn-in-selection-protocol-object"]], "Running a Population Burn-in until MEH is slightly less than 0.30": [[1183, "running-a-population-burn-in-until-meh-is-slightly-less-than-0-30"], [1184, "running-a-population-burn-in-until-meh-is-slightly-less-than-0-30"]], "Simulation Setup": [[1183, "simulation-setup"], [1184, "simulation-setup"], [1185, "simulation-setup"]], "Constructing a Constrained EBV Subset Selection Object": [[1183, "constructing-a-constrained-ebv-subset-selection-object"]], "Create an Unconstrained Selection Protocol Object": [[1183, "create-an-unconstrained-selection-protocol-object"], [1184, "create-an-unconstrained-selection-protocol-object"]], "Make a Statistics Recording Helper Function": [[1183, "make-a-statistics-recording-helper-function"], [1184, "make-a-statistics-recording-helper-function"]], "Running a Constrained Breeding Simulations for 60 Generations": [[1183, "running-a-constrained-breeding-simulations-for-60-generations"]], "Copy Founders": [[1183, "copy-founders"], [1183, "id1"], [1184, "copy-founders"], [1184, "id1"]], "Rudimentary Logbooks": [[1183, "rudimentary-logbooks"], [1183, "id2"], [1184, "rudimentary-logbooks"], [1184, "id2"]], "Simulation Main Loop": [[1183, "simulation-main-loop"], [1183, "id3"], [1184, "simulation-main-loop"], [1184, "id3"]], "Saving Results to a File": [[1183, "saving-results-to-a-file"], [1183, "id4"], [1184, "saving-results-to-a-file"], [1184, "id4"], [1186, "saving-results-to-a-file"]], "Running an Unconstrained Breeding Simulations for 60 Generations": [[1183, "running-an-unconstrained-breeding-simulations-for-60-generations"]], "Visualizing Breeding Program Simulation Results with matplotlib": [[1183, "visualizing-breeding-program-simulation-results-with-matplotlib"], [1184, "visualizing-breeding-program-simulation-results-with-matplotlib"], [1186, "visualizing-breeding-program-simulation-results-with-matplotlib"]], "Visualizing True Breeding Values (TBVs)": [[1183, "visualizing-true-breeding-values-tbvs"], [1184, "visualizing-true-breeding-values-tbvs"], [1186, "visualizing-true-breeding-values-tbvs"]], "Visualizing Estimated Breeding Values (EBVs)": [[1183, "visualizing-estimated-breeding-values-ebvs"], [1186, "visualizing-estimated-breeding-values-ebvs"]], "Visualizing Mean Expected Heterozygosity (MEH)": [[1183, "visualizing-mean-expected-heterozygosity-meh"], [1184, "visualizing-mean-expected-heterozygosity-meh"]], "Visualizing True Breeding Value Standard Deviations": [[1183, "visualizing-true-breeding-value-standard-deviations"], [1184, "visualizing-true-breeding-value-standard-deviations"]], "Visualizing Estimated Breeding Value Standard Deviations": [[1183, "visualizing-estimated-breeding-value-standard-deviations"], [1184, "visualizing-estimated-breeding-value-standard-deviations"]], "Visualizing Genetic and Genic Variance": [[1183, "visualizing-genetic-and-genic-variance"]], "Constrained Single-Trait Phenotypic Selection": [[1184, "constrained-single-trait-phenotypic-selection"]], "Constructing a Single-Trait Genomic Model": [[1184, "constructing-a-single-trait-genomic-model"], [1186, "constructing-a-single-trait-genomic-model"]], "Create a Constrained Selection Protocol Object": [[1184, "create-a-constrained-selection-protocol-object"]], "Simulate Constrained Phenotypic Selection for 60 Generations": [[1184, "simulate-constrained-phenotypic-selection-for-60-generations"]], "Simulate Unconstrained Phenotypic Selection for 60 Generations": [[1184, "simulate-unconstrained-phenotypic-selection-for-60-generations"]], "Visualizing Estimated Breeding Values (TBVs)": [[1184, "visualizing-estimated-breeding-values-tbvs"]], "Multi-objective Genomic Selection": [[1185, "multi-objective-genomic-selection"]], "Sampling founders and markers from the loaded VCF file": [[1185, "sampling-founders-and-markers-from-the-loaded-vcf-file"]], "Constructing the Founder Population": [[1185, "constructing-the-founder-population"]], "Randomly Intermate founders for nrandmate Generations": [[1185, "randomly-intermate-founders-for-nrandmate-generations"]], "Construct bootstrap cohort structure to begin burnin": [[1185, "construct-bootstrap-cohort-structure-to-begin-burnin"]], "Create Mating Protocols for Burn-In": [[1185, "create-mating-protocols-for-burn-in"]], "Create Genotyping Protocols for Burn-In": [[1185, "create-genotyping-protocols-for-burn-in"]], "Create Phenotyping Protocols for Burn-In": [[1185, "create-phenotyping-protocols-for-burn-in"]], "Create Breeing Value Estimation Protocols for Burn-In": [[1185, "create-breeing-value-estimation-protocols-for-burn-in"]], "Create a Within-Family Selection Helper Function": [[1185, "create-a-within-family-selection-helper-function"]], "Create a Cohort Construction Helper function": [[1185, "create-a-cohort-construction-helper-function"]], "Define breeding program operators": [[1185, "define-breeding-program-operators"]], "Define parent selection operator for initialization operator": [[1185, "define-parent-selection-operator-for-initialization-operator"]], "Define mating operator for initialization operator": [[1185, "define-mating-operator-for-initialization-operator"]], "Define evaluation operator for initialization operator": [[1185, "define-evaluation-operator-for-initialization-operator"]], "Define survivor selection operator for initialization operator": [[1185, "define-survivor-selection-operator-for-initialization-operator"]], "Define initialization operator for universal breeding algorithm": [[1185, "define-initialization-operator-for-universal-breeding-algorithm"]], "Define parent selection operator for universal breeding algorithm": [[1185, "define-parent-selection-operator-for-universal-breeding-algorithm"]], "Define mating operator for universal breeding algorithm": [[1185, "define-mating-operator-for-universal-breeding-algorithm"]], "Define evaluation operator for universal breeding algorithm": [[1185, "define-evaluation-operator-for-universal-breeding-algorithm"]], "Define survivor selection operator for universal breeding algorithm": [[1185, "define-survivor-selection-operator-for-universal-breeding-algorithm"]], "Define logbook to collect simulation data": [[1185, "define-logbook-to-collect-simulation-data"]], "Create operators used by initialization operator": [[1185, "create-operators-used-by-initialization-operator"]], "Create main operators for universal breeding algorithm": [[1185, "create-main-operators-for-universal-breeding-algorithm"]], "Assemble universal breeding algorithm from operators": [[1185, "assemble-universal-breeding-algorithm-from-operators"]], "Evolve the breeding program": [[1185, "evolve-the-breeding-program"]], "Export simulation results to a pandas.DataFrame": [[1185, "export-simulation-results-to-a-pandas-dataframe"]], "Plot results": [[1185, "plot-results"]], "Import libraries and set global variables": [[1185, "import-libraries-and-set-global-variables"]], "Import data from breakpoint": [[1185, "import-data-from-breakpoint"]], "Plot Pareto frontiers over time": [[1185, "plot-pareto-frontiers-over-time"]], "Plot mean expected heterozygosity over time": [[1185, "plot-mean-expected-heterozygosity-over-time"]], "Plot population mean breeding values over time": [[1185, "plot-population-mean-breeding-values-over-time"]], "Single-Trait Phenotypic Selection": [[1186, "single-trait-phenotypic-selection"]], "Simulation Burn-in": [[1186, "simulation-burn-in"]], "Select founders and randomly intermate for 20 generations": [[1186, "select-founders-and-randomly-intermate-for-20-generations"]], "Simulate phenotypic selection for 60 generations": [[1186, "simulate-phenotypic-selection-for-60-generations"]], "Create a Phenotyping Protocol Object": [[1186, "create-a-phenotyping-protocol-object"]], "Create a Breeding Value Estimation Protocol Object": [[1186, "create-a-breeding-value-estimation-protocol-object"]], "Create a Selection Protocol Object": [[1186, "create-a-selection-protocol-object"]], "Rudimentary Logbook": [[1186, "rudimentary-logbook"]], "Simulation Initialization": [[1186, "simulation-initialization"]], "Main Simulation Loop": [[1186, "main-simulation-loop"]], "Examples": [[1187, "examples"]], "Pareto Frontier Visualization Examples": [[1187, "pareto-frontier-visualization-examples"]], "Pre-built selection strategies": [[1187, null]], "Custom-built selection strategies": [[1187, null]], "Breeding Program Simulation Examples": [[1187, "breeding-program-simulation-examples"]], "Simulation of Single-trait Breeding Programs": [[1187, null]], "Simulation of Multi-trait Breeding Programs": [[1187, null]], "Bi-Objective GEBV Selection Pareto Frontier Visualization": [[1188, "bi-objective-gebv-selection-pareto-frontier-visualization"]], "Loading Required Modules and Seeding the Global Random Number Generator": [[1188, "loading-required-modules-and-seeding-the-global-random-number-generator"], [1189, "loading-required-modules-and-seeding-the-global-random-number-generator"]], "Loading Genotypic Data from a VCF File": [[1188, "loading-genotypic-data-from-a-vcf-file"], [1189, "loading-genotypic-data-from-a-vcf-file"], [1190, "loading-genotypic-data-from-a-vcf-file"], [1191, "loading-genotypic-data-from-a-vcf-file"]], "Constructing a GEBV Subset Selection object": [[1188, "constructing-a-gebv-subset-selection-object"], [1189, "constructing-a-gebv-subset-selection-object"]], "Estimating the Pareto Frontier": [[1188, "estimating-the-pareto-frontier"], [1189, "estimating-the-pareto-frontier"], [1190, "estimating-the-pareto-frontier"], [1190, "id3"], [1191, "estimating-the-pareto-frontier"]], "Visualizing the Pareto Frontier with matplotlib": [[1188, "visualizing-the-pareto-frontier-with-matplotlib"], [1189, "visualizing-the-pareto-frontier-with-matplotlib"], [1190, "visualizing-the-pareto-frontier-with-matplotlib"], [1190, "id4"], [1191, "visualizing-the-pareto-frontier-with-matplotlib"]], "Bi-Objective Weighted Genomic Selection Pareto Frontier Visualization": [[1189, "bi-objective-weighted-genomic-selection-pareto-frontier-visualization"]], "Custom Bi-Objective Germplasm Panel Reduction Pareto Frontier Visualization": [[1190, "custom-bi-objective-germplasm-panel-reduction-pareto-frontier-visualization"]], "Preliminaries": [[1190, "preliminaries"]], "Scenario 1: Minimize number of individuals and relatedness": [[1190, "scenario-1-minimize-number-of-individuals-and-relatedness"]], "Defining a Custom Problem Class for Scenario 1": [[1190, "defining-a-custom-problem-class-for-scenario-1"]], "Calculating a Kinship Matrix and its Decomposition": [[1190, "calculating-a-kinship-matrix-and-its-decomposition"]], "Constructing a Germplasm Panel Reduction Problem Object": [[1190, "constructing-a-germplasm-panel-reduction-problem-object"], [1190, "id1"]], "Constructing a Custom Genetic Algorithm Object": [[1190, "constructing-a-custom-genetic-algorithm-object"], [1190, "id2"]], "Scenario 2: Minimize number of individuals and loss of alleles": [[1190, "scenario-2-minimize-number-of-individuals-and-loss-of-alleles"]], "Defining a Custom Problem Class for Scenario 2": [[1190, "defining-a-custom-problem-class-for-scenario-2"]], "Extracting a Genotype Matrix as a NumPy Array": [[1190, "extracting-a-genotype-matrix-as-a-numpy-array"]], "Tri-Objective Optimal Contribution Selection Pareto Frontier Visualization": [[1191, "tri-objective-optimal-contribution-selection-pareto-frontier-visualization"]], "Constructing a Breeding Value Matrix": [[1191, "constructing-a-breeding-value-matrix"]], "Constructing an Optimal Contribution Subset Selection Object": [[1191, "constructing-an-optimal-contribution-subset-selection-object"]], "Creating a static image": [[1191, "creating-a-static-image"]], "Creating an animation": [[1191, "creating-an-animation"]], "Genomic Models": [[1192, "genomic-models"]], "Summary of Genomic Model Classes": [[1192, "summary-of-genomic-model-classes"]], "Summary of abstract classes in the pybrops.model.gmod module": [[1192, "id1"]], "Summary of concrete classes in the pybrops.model.gmod module": [[1192, "id2"]], "Genomic Model Properties": [[1192, "genomic-model-properties"]], "Genomic Models: General properties": [[1192, "genomic-models-general-properties"]], "Summary of GenomicModel general properties": [[1192, "id3"]], "Genomic Models: Model properties": [[1192, "genomic-models-model-properties"]], "Summary of GenomicModel model properties": [[1192, "id4"]], "Genomic Models: Trait properties": [[1192, "genomic-models-trait-properties"]], "Summary of GenomicModel trait properties": [[1192, "id5"]], "Linear Genomic Models: Additional model properties": [[1192, "linear-genomic-models-additional-model-properties"]], "Summary of LinearGenomicModel additional model properties": [[1192, "id6"]], "Additive Linear Genomic Models: Additional model properties": [[1192, "additive-linear-genomic-models-additional-model-properties"]], "Summary of AdditiveLinearGenomicModel additional model properties": [[1192, "id7"]], "Additive Dominance Linear Genomic Models: Additional model properties": [[1192, "additive-dominance-linear-genomic-models-additional-model-properties"]], "Summary of AdditiveDominanceLinearGenomicModel additional model properties": [[1192, "id8"]], "Additive Dominance Epistatic Linear Genomic Models: Model coefficient properties": [[1192, "additive-dominance-epistatic-linear-genomic-models-model-coefficient-properties"]], "Summary of AdditiveDominanceEpistaticLinearGenomicModel model coefficient properties": [[1192, "id9"]], "Loading Genomic Model Modules": [[1192, "loading-genomic-model-modules"]], "Creating Genomic Models": [[1192, "creating-genomic-models"]], "Creating genomic models from raw NumPy arrays": [[1192, "creating-genomic-models-from-raw-numpy-arrays"]], "Loading linear genomic models from dictionaries of Pandas DataFrames": [[1192, "loading-linear-genomic-models-from-dictionaries-of-pandas-dataframes"]], "Loading linear genomic models from dictionaries of CSV file names": [[1192, "loading-linear-genomic-models-from-dictionaries-of-csv-file-names"]], "Loading genomic models HDF5 files": [[1192, "loading-genomic-models-hdf5-files"]], "Copying Genomic Models": [[1192, "copying-genomic-models"]], "Shallow copying": [[1192, "shallow-copying"], [1193, "shallow-copying"], [1197, "shallow-copying"], [1198, "shallow-copying"], [1200, "shallow-copying"], [1201, "shallow-copying"]], "Deep copying": [[1192, "deep-copying"], [1193, "deep-copying"], [1197, "deep-copying"], [1198, "deep-copying"], [1200, "deep-copying"], [1201, "deep-copying"]], "Model prediction methods": [[1192, "model-prediction-methods"]], "Score model prediction accuracy": [[1192, "score-model-prediction-accuracy"]], "Predicting genomic estimated breeding values": [[1192, "predicting-genomic-estimated-breeding-values"]], "Predicting genomic estimated genotypic values": [[1192, "predicting-genomic-estimated-genotypic-values"]], "Calculating population genetic variance terms": [[1192, "calculating-population-genetic-variance-terms"]], "Predicting genetic variance": [[1192, "predicting-genetic-variance"]], "Predicting additive genetic variance": [[1192, "predicting-additive-genetic-variance"]], "Predicting additive genic variance": [[1192, "predicting-additive-genic-variance"]], "Predicting the Bulmer effect": [[1192, "predicting-the-bulmer-effect"]], "Calculating population selection limits": [[1192, "calculating-population-selection-limits"]], "Upper selection limit": [[1192, "upper-selection-limit"]], "Lower selection limit": [[1192, "lower-selection-limit"]], "Calculating favorable allele metrics": [[1192, "calculating-favorable-allele-metrics"]], "Calculating deleterious allele metrics": [[1192, "calculating-deleterious-allele-metrics"]], "Exporting Genomic Models": [[1192, "exporting-genomic-models"]], "Exporting to dictionaries of Pandas DataFrames": [[1192, "exporting-to-dictionaries-of-pandas-dataframes"]], "Exporting to CSV files": [[1192, "exporting-to-csv-files"]], "Exporting to HDF5": [[1192, "exporting-to-hdf5"], [1193, "exporting-to-hdf5"], [1197, "exporting-to-hdf5"], [1198, "exporting-to-hdf5"], [1201, "exporting-to-hdf5"]], "Variance Matrices": [[1193, "variance-matrices"]], "Summary of Variance Matrix Classes": [[1193, "summary-of-variance-matrix-classes"]], "Genetic variance matrix classes": [[1193, "genetic-variance-matrix-classes"]], "Summary of genetic variance classes in the pybrops.model.vmat module": [[1193, "id1"]], "Genic variance matrix classes": [[1193, "genic-variance-matrix-classes"]], "Summary of genic variance classes in the pybrops.model.vmat module": [[1193, "id2"]], "Variance Matrix Properties": [[1193, "variance-matrix-properties"]], "Summary of GeneticVarianceMatrix and GenicVarianceMatrix general properties": [[1193, "id3"]], "Taxa properties": [[1193, "taxa-properties"], [1198, "taxa-properties"], [1201, "taxa-properties"], [1202, "taxa-properties"]], "Summary of GeneticVarianceMatrix and GenicVarianceMatrix taxa properties": [[1193, "id4"]], "Trait properties": [[1193, "trait-properties"]], "Summary of GeneticVarianceMatrix and GenicVarianceMatrix trait properties": [[1193, "id5"]], "Square matrix properties": [[1193, "square-matrix-properties"], [1198, "square-matrix-properties"]], "Summary of GeneticVarianceMatrix and GenicVarianceMatrix square matrix properties": [[1193, "id6"]], "Loading Variance Matrix Modules": [[1193, "loading-variance-matrix-modules"]], "Loading genetic variance matrix modules": [[1193, "loading-genetic-variance-matrix-modules"]], "Loading genic variance matrix modules": [[1193, "loading-genic-variance-matrix-modules"]], "Creating Variance Matrices": [[1193, "creating-variance-matrices"]], "Creating variance matrices from NumPy arrays": [[1193, "creating-variance-matrices-from-numpy-arrays"]], "Calculating variance matrices from genomic models": [[1193, "calculating-variance-matrices-from-genomic-models"]], "Creating variance matrices from Pandas DataFrames": [[1193, "creating-variance-matrices-from-pandas-dataframes"]], "Loading variance matrices from CSV files": [[1193, "loading-variance-matrices-from-csv-files"]], "Loading variance matrices from HDF5 files": [[1193, "loading-variance-matrices-from-hdf5-files"]], "Copying Variance Matrices": [[1193, "copying-variance-matrices"]], "Copy-On Element Manipulation": [[1193, "copy-on-element-manipulation"], [1197, "copy-on-element-manipulation"], [1198, "copy-on-element-manipulation"], [1201, "copy-on-element-manipulation"]], "Adjoining elements": [[1193, "adjoining-elements"], [1202, "adjoining-elements"]], "Deleting elements": [[1193, "deleting-elements"], [1202, "deleting-elements"]], "delete taxa": [[1193, "delete-taxa"], [1202, "delete-taxa"]], "delete traits": [[1193, "delete-traits"]], "Inserting elements": [[1193, "inserting-elements"], [1202, "inserting-elements"]], "Selecting elements": [[1193, "selecting-elements"], [1202, "selecting-elements"]], "In-Place Element Manipulation": [[1193, "in-place-element-manipulation"], [1197, "in-place-element-manipulation"], [1198, "in-place-element-manipulation"], [1201, "in-place-element-manipulation"]], "Appending elements": [[1193, "appending-elements"], [1202, "appending-elements"]], "Removing elements": [[1193, "removing-elements"], [1202, "removing-elements"]], "remove taxa": [[1193, "remove-taxa"], [1202, "remove-taxa"]], "remove traits": [[1193, "remove-traits"]], "Incorporating elements": [[1193, "incorporating-elements"], [1202, "incorporating-elements"]], "Concatenating matrices": [[1193, "concatenating-matrices"], [1202, "concatenating-matrices"]], "Grouping and Sorting": [[1193, "grouping-and-sorting"], [1197, "grouping-and-sorting"], [1198, "grouping-and-sorting"], [1201, "grouping-and-sorting"], [1202, "grouping-and-sorting"]], "Reordering elements": [[1193, "reordering-elements"], [1197, "reordering-elements"], [1198, "reordering-elements"], [1201, "reordering-elements"]], "reorder taxa": [[1193, "reorder-taxa"], [1202, "reorder-taxa"]], "reorder traits": [[1193, "reorder-traits"]], "Lexsorting elements": [[1193, "lexsorting-elements"], [1197, "lexsorting-elements"], [1198, "lexsorting-elements"], [1201, "lexsorting-elements"]], "lexsort taxa": [[1193, "lexsort-taxa"], [1202, "lexsort-taxa"]], "lexsort traits": [[1193, "lexsort-traits"]], "Sorting elements": [[1193, "sorting-elements"], [1197, "sorting-elements"], [1198, "sorting-elements"], [1201, "sorting-elements"]], "sort taxa": [[1193, "sort-taxa"], [1202, "sort-taxa"]], "sort traits": [[1193, "sort-traits"]], "Grouping elements": [[1193, "grouping-elements"], [1197, "grouping-elements"], [1198, "grouping-elements"], [1201, "grouping-elements"]], "Square matrix functions": [[1193, "square-matrix-functions"]], "Determine whether all square axes are of equal length": [[1193, "determine-whether-all-square-axes-are-of-equal-length"]], "Exporting Variance Matrices": [[1193, "exporting-variance-matrices"]], "Exporting to Pandas DataFrame": [[1193, "exporting-to-pandas-dataframe"], [1197, "exporting-to-pandas-dataframe"], [1198, "exporting-to-pandas-dataframe"]], "Exporting to CSV": [[1193, "exporting-to-csv"], [1197, "exporting-to-csv"], [1198, "exporting-to-csv"]], "Optimization Algorithms": [[1194, "optimization-algorithms"]], "Summary of Optimization Algorithm Classes": [[1194, "summary-of-optimization-algorithm-classes"]], "Summary of classes in the pybrops.opt.algo module": [[1194, "id1"]], "Loading Optimization Algorithm Modules": [[1194, "loading-optimization-algorithm-modules"]], "Constructing Optimization Algorithms": [[1194, "constructing-optimization-algorithms"]], "Single-objective optimization algorithms": [[1194, "single-objective-optimization-algorithms"]], "Multi-objective optimization algorithms": [[1194, "multi-objective-optimization-algorithms"]], "Minimizing Optimization Problems": [[1194, "minimizing-optimization-problems"]], "Optimization of single-objective problems": [[1194, "optimization-of-single-objective-problems"]], "Optimization of multi-objective problems": [[1194, "optimization-of-multi-objective-problems"]], "Optimization Problems": [[1195, "optimization-problems"]], "Summary of Optimization Problem Classes": [[1195, "summary-of-optimization-problem-classes"]], "Summary of classes in the pybrops.opt.prob module": [[1195, "id1"]], "Loading Optimization Problem Modules": [[1195, "loading-optimization-problem-modules"]], "Optimization Problem Properties": [[1195, "optimization-problem-properties"], [1196, "optimization-problem-properties"]], "PyMOO specific properties": [[1195, "pymoo-specific-properties"]], "PyBrOpS specific properties": [[1195, "pybrops-specific-properties"]], "Summary of PyBrOpS specific Problem properties": [[1195, "id2"]], "Deriving Problem Classes": [[1195, "deriving-problem-classes"]], "Single objective problem specification": [[1195, "single-objective-problem-specification"]], "Multi-objective problem specification": [[1195, "multi-objective-problem-specification"]], "Constructing Problems": [[1195, "constructing-problems"]], "Construct a single-objective problem": [[1195, "construct-a-single-objective-problem"]], "Construct a multi-objective problem": [[1195, "construct-a-multi-objective-problem"]], "Evaluating candidate solutions": [[1195, "evaluating-candidate-solutions"]], "Optimization Solutions": [[1196, "optimization-solutions"]], "Summary of Optimization Solution Classes": [[1196, "summary-of-optimization-solution-classes"]], "Summary of classes in the pybrops.opt.soln module": [[1196, "id1"]], "Loading Optimization Solution Modules": [[1196, "loading-optimization-solution-modules"]], "Constructing Solutions": [[1196, "constructing-solutions"]], "Construct a single-objective solution": [[1196, "construct-a-single-objective-solution"]], "Construct a multi-objective solution": [[1196, "construct-a-multi-objective-solution"]], "Summary of Solution properties": [[1196, "id2"]], "Breeding Value Matrices": [[1197, "breeding-value-matrices"]], "Summary of Breeding Value Matrix Classes": [[1197, "summary-of-breeding-value-matrix-classes"]], "Summary of breeding value matrix classes in the pybrops.popgen.bvmat module": [[1197, "id1"]], "Breeding Value Matrix Properties": [[1197, "breeding-value-matrix-properties"]], "Breeding value matrix general properties": [[1197, "breeding-value-matrix-general-properties"]], "Summary of BreedingValueMatrix general properties": [[1197, "id2"]], "Breeding value matrix taxa properties": [[1197, "breeding-value-matrix-taxa-properties"]], "Summary of BreedingValueMatrix taxa properties": [[1197, "id3"]], "Breeding value matrix trait properties": [[1197, "breeding-value-matrix-trait-properties"]], "Summary of BreedingValueMatrix trait properties": [[1197, "id4"]], "Loading Breeding Value Matrix Modules": [[1197, "loading-breeding-value-matrix-modules"]], "Creating Breeding Value Matrices": [[1197, "creating-breeding-value-matrices"]], "Creating breeding value matrices from NumPy arrays": [[1197, "creating-breeding-value-matrices-from-numpy-arrays"]], "Creating breeding value matrices from Pandas DataFrames": [[1197, "creating-breeding-value-matrices-from-pandas-dataframes"]], "Loading breeding value matrices from CSV files": [[1197, "loading-breeding-value-matrices-from-csv-files"]], "Loading breeding value matrices from HDF5 files": [[1197, "loading-breeding-value-matrices-from-hdf5-files"]], "Copying Breeding Value Matrices": [[1197, "copying-breeding-value-matrices"]], "Adjoin elements": [[1197, "adjoin-elements"], [1198, "adjoin-elements"], [1201, "adjoin-elements"]], "Delete elements": [[1197, "delete-elements"], [1198, "delete-elements"], [1201, "delete-elements"]], "Insert elements": [[1197, "insert-elements"], [1198, "insert-elements"], [1201, "insert-elements"]], "Select elements": [[1197, "select-elements"], [1198, "select-elements"], [1201, "select-elements"]], "Append elements": [[1197, "append-elements"], [1198, "append-elements"], [1201, "append-elements"]], "Remove elements": [[1197, "remove-elements"], [1198, "remove-elements"], [1201, "remove-elements"]], "Incorporate elements": [[1197, "incorporate-elements"], [1198, "incorporate-elements"], [1201, "incorporate-elements"]], "Concatenate elements": [[1197, "concatenate-elements"], [1198, "concatenate-elements"], [1201, "concatenate-elements"]], "Summary Statistics": [[1197, "summary-statistics"], [1198, "summary-statistics"], [1201, "summary-statistics"], [1202, "summary-statistics"]], "Maximum breeding values for each trait": [[1197, "maximum-breeding-values-for-each-trait"]], "Minimum breeding values for each trait": [[1197, "minimum-breeding-values-for-each-trait"]], "Mean breeding values for each trait": [[1197, "mean-breeding-values-for-each-trait"]], "Breeding value ranges for each trait": [[1197, "breeding-value-ranges-for-each-trait"]], "Breeding value standard deviations for each trait": [[1197, "breeding-value-standard-deviations-for-each-trait"]], "Breeding value variances for each trait": [[1197, "breeding-value-variances-for-each-trait"]], "Unscaling and de-centering breeding values": [[1197, "unscaling-and-de-centering-breeding-values"]], "Exporting Breeding Value Matrices": [[1197, "exporting-breeding-value-matrices"]], "Coancestry Matrices": [[1198, "coancestry-matrices"]], "Summary of Coancestry Matrix Classes": [[1198, "summary-of-coancestry-matrix-classes"]], "Summary of classes in the pybrops.popgen.cmat module": [[1198, "id1"]], "Coancestry Matrix Properties": [[1198, "coancestry-matrix-properties"]], "Summary of CoancestryMatrix general properties": [[1198, "id2"]], "Summary of CoancestryMatrix taxa properties": [[1198, "id3"]], "Summary of CoancestryMatrix square matrix properties": [[1198, "id4"]], "Loading Coancestry Matrix Modules": [[1198, "loading-coancestry-matrix-modules"]], "Creating Coancestry Matrices": [[1198, "creating-coancestry-matrices"]], "Creating coancestry matrices from NumPy arrays": [[1198, "creating-coancestry-matrices-from-numpy-arrays"]], "Creating coancestry matrices from GenotypeMatrix objects": [[1198, "creating-coancestry-matrices-from-genotypematrix-objects"]], "Creating coancestry matrices from Pandas DataFrames": [[1198, "creating-coancestry-matrices-from-pandas-dataframes"]], "Loading coancestry matrices from CSV files": [[1198, "loading-coancestry-matrices-from-csv-files"]], "Loading coancestry matrices from HDF5 files": [[1198, "loading-coancestry-matrices-from-hdf5-files"]], "Copying Coancestry Matrices": [[1198, "copying-coancestry-matrices"]], "Coancestry and Kinship Methods": [[1198, "coancestry-and-kinship-methods"]], "Retrieving coancestry values": [[1198, "retrieving-coancestry-values"]], "Retrieving kinship values": [[1198, "retrieving-kinship-values"]], "Retrieving the coancestry matrix as a specific format": [[1198, "retrieving-the-coancestry-matrix-as-a-specific-format"]], "Determining if the coancestry matrix is positive semidefinite": [[1198, "determining-if-the-coancestry-matrix-is-positive-semidefinite"]], "Applying jitter values along the diagonal": [[1198, "applying-jitter-values-along-the-diagonal"]], "Calculating the matrix inverse": [[1198, "calculating-the-matrix-inverse"]], "Calculating maximum attainable inbreeding": [[1198, "calculating-maximum-attainable-inbreeding"]], "Calculating minimum attainable inbreeding": [[1198, "calculating-minimum-attainable-inbreeding"]], "Maximum coancestry": [[1198, "maximum-coancestry"]], "Mean coancestry": [[1198, "mean-coancestry"]], "Minimum coancestry": [[1198, "minimum-coancestry"]], "Exporting Coancestry Matrices": [[1198, "exporting-coancestry-matrices"]], "Genetic Map Functions": [[1199, "genetic-map-functions"]], "Summary of Genetic Map Function Classes": [[1199, "summary-of-genetic-map-function-classes"]], "Summary of genetic map function classes in the pybrops.popgen.gmap module": [[1199, "id1"]], "Loading Genetic Map Function Modules": [[1199, "loading-genetic-map-function-modules"]], "Constructing Genetic Map Function Objects": [[1199, "constructing-genetic-map-function-objects"]], "Calculating Recombination Probabilities": [[1199, "calculating-recombination-probabilities"]], "Calculating Genetic Map Distances": [[1199, "calculating-genetic-map-distances"]], "Calculating Sequential and Pairwise Recombination Probabilities": [[1199, "calculating-sequential-and-pairwise-recombination-probabilities"]], "Calculating sequential recombination probabilities": [[1199, "calculating-sequential-recombination-probabilities"]], "Calculating pairwise recombination probabilities": [[1199, "calculating-pairwise-recombination-probabilities"]], "Genetic Maps": [[1200, "genetic-maps"]], "Summary of Genetic Map Classes": [[1200, "summary-of-genetic-map-classes"]], "Summary of genetic map classes in the pybrops.popgen.gmap module": [[1200, "id1"]], "Loading Genetic Map Modules": [[1200, "loading-genetic-map-modules"]], "Creating Genetic Maps": [[1200, "creating-genetic-maps"]], "Creating genetic maps from NumPy arrays": [[1200, "creating-genetic-maps-from-numpy-arrays"]], "Reading genetic maps from a file": [[1200, "reading-genetic-maps-from-a-file"]], "Genetic Map Properties": [[1200, "genetic-map-properties"]], "Marker variant properties": [[1200, "marker-variant-properties"], [1201, "marker-variant-properties"], [1202, "marker-variant-properties"]], "Summary of GeneticMap marker variant properties": [[1200, "id2"]], "Spline properties": [[1200, "spline-properties"]], "Summary of GeneticMap spline properties": [[1200, "id3"]], "Copying Genetic Maps": [[1200, "copying-genetic-maps"]], "Sorting and Grouping Genetic Maps": [[1200, "sorting-and-grouping-genetic-maps"]], "Reordering map elements": [[1200, "reordering-map-elements"]], "Lexsorting map elements": [[1200, "lexsorting-map-elements"]], "Sorting map elements": [[1200, "sorting-map-elements"]], "Grouping map elements": [[1200, "grouping-map-elements"]], "Genetic Map Congruency": [[1200, "genetic-map-congruency"]], "Checking for congruency": [[1200, "checking-for-congruency"]], "Removing map discrepancies": [[1200, "removing-map-discrepancies"]], "Building Interpolation Splines": [[1200, "building-interpolation-splines"]], "Interpolating Genetic Positions": [[1200, "interpolating-genetic-positions"]], "Genotype Matrices": [[1201, "genotype-matrices"]], "Summary of Genotype Matrix Classes": [[1201, "summary-of-genotype-matrix-classes"]], "Summary of genotype matrix classes in the pybrops.popgen.gmat module": [[1201, "id1"]], "Creating Genotype Matrices": [[1201, "creating-genotype-matrices"]], "Creating genotype matrices from NumPy arrays": [[1201, "creating-genotype-matrices-from-numpy-arrays"]], "Loading genotype matrices from VCF files": [[1201, "loading-genotype-matrices-from-vcf-files"]], "Loading genotype matrices from HDF5 files": [[1201, "loading-genotype-matrices-from-hdf5-files"]], "Genotype Matrix Properties": [[1201, "genotype-matrix-properties"]], "Summary of GenotypeMatrix general properties": [[1201, "id2"]], "Summary of GenotypeMatrix taxa properties": [[1201, "id3"]], "Summary of GenotypeMatrix marker variant properties": [[1201, "id4"]], "Copying Genotype Matrices": [[1201, "copying-genotype-matrices"]], "Population allele counts": [[1201, "population-allele-counts"]], "Population allele frequencies": [[1201, "population-allele-frequencies"]], "Population allele polymorphism presence": [[1201, "population-allele-polymorphism-presence"]], "Population genotype counts": [[1201, "population-genotype-counts"]], "Population genotype frequencies": [[1201, "population-genotype-frequencies"]], "Population minor allele frequencies": [[1201, "population-minor-allele-frequencies"]], "Population mean expected heterozygosity": [[1201, "population-mean-expected-heterozygosity"]], "Taxa allele counts": [[1201, "taxa-allele-counts"]], "Taxa allele frequencies": [[1201, "taxa-allele-frequencies"]], "Saving Genotype Matrices": [[1201, "saving-genotype-matrices"], [1202, "saving-genotype-matrices"]], "Phased Genotype Matrices": [[1202, "phased-genotype-matrices"]], "Summary of Phased Genotype Matrix Classes": [[1202, "summary-of-phased-genotype-matrix-classes"]], "Summary of phased genotype matrix classes in the pybrops.popgen.gmat module": [[1202, "id1"]], "Creating Phased Genotype Matrices": [[1202, "creating-phased-genotype-matrices"]], "Creating phased genotype matrices from NumPy arrays": [[1202, "creating-phased-genotype-matrices-from-numpy-arrays"]], "Loading phased genotype matrices from VCF files": [[1202, "loading-phased-genotype-matrices-from-vcf-files"]], "Loading phased genotype matrices from HDF5 files": [[1202, "loading-phased-genotype-matrices-from-hdf5-files"]], "Phased Genotype Matrix Properties": [[1202, "phased-genotype-matrix-properties"]], "Summary of PhasedGenotypeMatrix general properties": [[1202, "id2"]], "Phase properties": [[1202, "phase-properties"]], "Summary of PhasedGenotypeMatrix phase properties": [[1202, "id3"]], "Summary of PhasedGenotypeMatrix taxa properties": [[1202, "id4"]], "Summary of PhasedGenotypeMatrix marker variant properties": [[1202, "id5"]], "Copying Phased Genotype Matrices": [[1202, "copying-phased-genotype-matrices"]], "Phased Genotype Matrix Element Copy-On-Manipulation": [[1202, "phased-genotype-matrix-element-copy-on-manipulation"]], "delete marker variants": [[1202, "delete-marker-variants"]], "Phased Genotype Matrix Element In-Place-Manipulation": [[1202, "phased-genotype-matrix-element-in-place-manipulation"]], "remove marker variants": [[1202, "remove-marker-variants"]], "Reordering": [[1202, "reordering"]], "reorder marker variants": [[1202, "reorder-marker-variants"]], "Lexsorting": [[1202, "lexsorting"]], "lexsort marker variants": [[1202, "lexsort-marker-variants"]], "Sorting": [[1202, "sorting"]], "sort marker variants": [[1202, "sort-marker-variants"]], "Grouping": [[1202, "grouping"]], "group taxa": [[1202, "group-taxa"]], "group marker variants": [[1202, "group-marker-variants"]], "Write to HDF5": [[1202, "write-to-hdf5"]], "Standard PyBrOpS Usage": [[1203, "standard-pybrops-usage"]], "Core Infrastructure Usage:": [[1203, null]], "Population Genetics Modules Usage:": [[1203, null]], "Optimization Modules Usage:": [[1203, null]], "Genomic Modeling Modules Usage:": [[1203, null]], "Breeding Protocol Modules Usage:": [[1203, null]], "Breeding Operator Modules Usage:": [[1203, null]], "Breeding Program Simulation Examples:": [[1203, null]]}, "indexentries": {"module": [[0, "module-pybrops"], [1, "module-pybrops.breed"], [2, "module-pybrops.breed.arch"], [3, "module-pybrops.breed.arch.BreedingEdge"], [6, "module-pybrops.breed.arch.BreedingGraph"], [9, "module-pybrops.breed.arch.BreedingNode"], [12, "module-pybrops.breed.arch.BreedingProgram"], [15, "module-pybrops.breed.arch.EmigrationOperator"], [18, "module-pybrops.breed.arch.GermplasmBank"], [21, "module-pybrops.breed.arch.ImmigrationOperator"], [24, "module-pybrops.breed.arch.RecurrentSelectionBreedingProgram"], [27, "module-pybrops.breed.op"], [28, "module-pybrops.breed.op.eval"], [29, "module-pybrops.breed.op.eval.EvaluationOperator"], [32, "module-pybrops.breed.op.init"], [33, "module-pybrops.breed.op.init.InitializationOperator"], [36, "module-pybrops.breed.op.log"], [37, "module-pybrops.breed.op.log.Logbook"], [40, "module-pybrops.breed.op.mate"], [41, "module-pybrops.breed.op.mate.MatingOperator"], [44, "module-pybrops.breed.op.psel"], [45, "module-pybrops.breed.op.psel.ParentSelectionOperator"], [48, "module-pybrops.breed.op.ssel"], [49, "module-pybrops.breed.op.ssel.SurvivorSelectionOperator"], [52, "module-pybrops.breed.prot"], [53, "module-pybrops.breed.prot.bv"], [54, "module-pybrops.breed.prot.bv.BreedingValueProtocol"], [57, "module-pybrops.breed.prot.bv.MeanPhenotypicBreedingValue"], [59, "module-pybrops.breed.prot.bv.TrueBreedingValue"], [61, "module-pybrops.breed.prot.gt"], [62, "module-pybrops.breed.prot.gt.DenseUnphasedGenotyping"], [64, "module-pybrops.breed.prot.gt.GenotypingProtocol"], [67, "module-pybrops.breed.prot.mate"], [68, "module-pybrops.breed.prot.mate.FourWayCross"], [71, "module-pybrops.breed.prot.mate.FourWayDHCross"], [74, "module-pybrops.breed.prot.mate.MatingProtocol"], [77, "module-pybrops.breed.prot.mate.SelfCross"], [80, "module-pybrops.breed.prot.mate.ThreeWayCross"], [83, "module-pybrops.breed.prot.mate.ThreeWayDHCross"], [86, "module-pybrops.breed.prot.mate.TwoWayCross"], [89, "module-pybrops.breed.prot.mate.TwoWayDHCross"], [92, "module-pybrops.breed.prot.mate.util"], [96, "module-pybrops.breed.prot.pt"], [97, "module-pybrops.breed.prot.pt.G_E_Phenotyping"], [99, "module-pybrops.breed.prot.pt.PhenotypingProtocol"], [102, "module-pybrops.breed.prot.pt.TruePhenotyping"], [104, "module-pybrops.breed.prot.sel"], [105, "module-pybrops.breed.prot.sel.BinaryMateSelectionProtocol"], [108, "module-pybrops.breed.prot.sel.BinarySelectionProtocol"], [111, "module-pybrops.breed.prot.sel.EstimatedBreedingValueSelection"], [117, "module-pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection"], [123, "module-pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection"], [129, "module-pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection"], [135, "module-pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection"], [141, "module-pybrops.breed.prot.sel.GenotypeBuilderSelection"], [144, "module-pybrops.breed.prot.sel.IntegerMateSelectionProtocol"], [147, "module-pybrops.breed.prot.sel.IntegerSelectionProtocol"], [150, "module-pybrops.breed.prot.sel.L1NormGenomicSelection"], [151, "module-pybrops.breed.prot.sel.L2NormGenomicSelection"], [157, "module-pybrops.breed.prot.sel.MateSelectionProtocol"], [160, "module-pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection"], [166, "module-pybrops.breed.prot.sel.MeanGenomicRelationshipSelection"], [172, "module-pybrops.breed.prot.sel.MultiObjectiveGenomicSelection"], [175, "module-pybrops.breed.prot.sel.OptimalContributionSelection"], [181, "module-pybrops.breed.prot.sel.OptimalHaploidValueSelection"], [187, "module-pybrops.breed.prot.sel.OptimalPopulationValueSelection"], [190, "module-pybrops.breed.prot.sel.RandomSelection"], [196, "module-pybrops.breed.prot.sel.RealMateSelectionProtocol"], [199, "module-pybrops.breed.prot.sel.RealSelectionProtocol"], [202, "module-pybrops.breed.prot.sel.SelectionProtocol"], [205, "module-pybrops.breed.prot.sel.SubsetMateSelectionProtocol"], [208, "module-pybrops.breed.prot.sel.SubsetSelectionProtocol"], [211, "module-pybrops.breed.prot.sel.UnconstrainedGeneralized1NormGenomicSelection"], [213, "module-pybrops.breed.prot.sel.UnconstrainedMultiObjectiveGenomicMating"], [215, "module-pybrops.breed.prot.sel.UnconstrainedPopulationAlleleFrequencyDistanceSelection"], [217, "module-pybrops.breed.prot.sel.UnconstrainedPopulationAlleleUnavailabilitySelection"], [219, "module-pybrops.breed.prot.sel.UnconstrainedSelectionProtocol"], [222, "module-pybrops.breed.prot.sel.UsefulnessCriterionSelection"], [228, "module-pybrops.breed.prot.sel.WeightedGenomicSelection"], [233, "module-pybrops.breed.prot.sel.cfg"], [234, "module-pybrops.breed.prot.sel.cfg.BinaryMateSelectionConfiguration"], [236, "module-pybrops.breed.prot.sel.cfg.BinarySelectionConfiguration"], [238, "module-pybrops.breed.prot.sel.cfg.IntegerMateSelectionConfiguration"], [240, "module-pybrops.breed.prot.sel.cfg.IntegerSelectionConfiguration"], [242, "module-pybrops.breed.prot.sel.cfg.MateSelectionConfiguration"], [245, "module-pybrops.breed.prot.sel.cfg.RealMateSelectionConfiguration"], [247, "module-pybrops.breed.prot.sel.cfg.RealSelectionConfiguration"], [249, "module-pybrops.breed.prot.sel.cfg.SampledSelectionConfigurationMixin"], [251, "module-pybrops.breed.prot.sel.cfg.SelectionConfiguration"], [254, "module-pybrops.breed.prot.sel.cfg.SimpleMateSelectionConfiguration"], [256, "module-pybrops.breed.prot.sel.cfg.SimpleSelectionConfiguration"], [258, "module-pybrops.breed.prot.sel.cfg.SubsetMateSelectionConfiguration"], [260, "module-pybrops.breed.prot.sel.cfg.SubsetSelectionConfiguration"], [262, "module-pybrops.breed.prot.sel.prob"], [263, "module-pybrops.breed.prot.sel.prob.BinaryMateSelectionProblem"], [265, "module-pybrops.breed.prot.sel.prob.BinarySelectionProblem"], [268, "module-pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem"], [274, "module-pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem"], [280, "module-pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem"], [286, "module-pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem"], [292, "module-pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem"], [298, "module-pybrops.breed.prot.sel.prob.GenotypeBuilderSelectionProblem"], [301, "module-pybrops.breed.prot.sel.prob.IntegerMateSelectionProblem"], [303, "module-pybrops.breed.prot.sel.prob.IntegerSelectionProblem"], [306, "module-pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem"], [312, "module-pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem"], [318, "module-pybrops.breed.prot.sel.prob.MateSelectionProblem"], [320, "module-pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem"], [326, "module-pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem"], [332, "module-pybrops.breed.prot.sel.prob.MultiObjectiveGenomicMatingProblem"], [335, "module-pybrops.breed.prot.sel.prob.MultiObjectiveGenomicSelectionProblem"], [338, "module-pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem"], [344, "module-pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem"], [350, "module-pybrops.breed.prot.sel.prob.OptimalPopulationValueSelectionProblem"], [353, "module-pybrops.breed.prot.sel.prob.RandomSelectionProblem"], [359, "module-pybrops.breed.prot.sel.prob.RealLookAheadGeneralizedWeightedGenomicSelectionProblem"], [361, "module-pybrops.breed.prot.sel.prob.RealMateSelectionProblem"], [363, "module-pybrops.breed.prot.sel.prob.RealSelectionProblem"], [366, "module-pybrops.breed.prot.sel.prob.SelectionProblem"], [369, "module-pybrops.breed.prot.sel.prob.SubsetMateSelectionProblem"], [371, "module-pybrops.breed.prot.sel.prob.SubsetSelectionProblem"], [374, "module-pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem"], [380, "module-pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem"], [385, "module-pybrops.breed.prot.sel.prob.trans"], [392, "module-pybrops.breed.prot.sel.soln"], [393, "module-pybrops.breed.prot.sel.soln.BinaryMateSelectionSolution"], [396, "module-pybrops.breed.prot.sel.soln.BinarySelectionSolution"], [399, "module-pybrops.breed.prot.sel.soln.IntegerMateSelectionSolution"], [402, "module-pybrops.breed.prot.sel.soln.IntegerSelectionSolution"], [405, "module-pybrops.breed.prot.sel.soln.MateSelectionSolution"], [408, "module-pybrops.breed.prot.sel.soln.RealMateSelectionSolution"], [411, "module-pybrops.breed.prot.sel.soln.RealSelectionSolution"], [414, "module-pybrops.breed.prot.sel.soln.SelectionSolution"], [417, "module-pybrops.breed.prot.sel.soln.SubsetMateSelectionSolution"], [420, "module-pybrops.breed.prot.sel.soln.SubsetSelectionSolution"], [423, "module-pybrops.breed.prot.sel.targetfn"], [427, "module-pybrops.breed.prot.sel.transfn"], [436, "module-pybrops.breed.prot.sel.weightfn"], [439, "module-pybrops.core"], [440, "module-pybrops.core.error"], [441, "module-pybrops.core.error.error_attr_python"], [445, "module-pybrops.core.error.error_generic_numpy"], [453, "module-pybrops.core.error.error_generic_python"], [455, "module-pybrops.core.error.error_io_python"], [459, "module-pybrops.core.error.error_type_h5py"], [461, "module-pybrops.core.error.error_type_numpy"], [490, "module-pybrops.core.error.error_type_pandas"], [493, "module-pybrops.core.error.error_type_python"], [526, "module-pybrops.core.error.error_value_h5py"], [530, "module-pybrops.core.error.error_value_numpy"], [557, "module-pybrops.core.error.error_value_pandas"], [566, "module-pybrops.core.error.error_value_python"], [590, "module-pybrops.core.io"], [591, "module-pybrops.core.io.CSVDictInputOutput"], [594, "module-pybrops.core.io.CSVInputOutput"], [597, "module-pybrops.core.io.DictInputOutput"], [600, "module-pybrops.core.io.HDF5InputOutput"], [603, "module-pybrops.core.io.NPYInputOutput"], [606, "module-pybrops.core.io.NPZInputOutput"], [609, "module-pybrops.core.io.NumPyInputOutput"], [612, "module-pybrops.core.io.PandasDictInputOutput"], [615, "module-pybrops.core.io.PandasInputOutput"], [618, "module-pybrops.core.mat"], [619, "module-pybrops.core.mat.DenseMatrix"], [622, "module-pybrops.core.mat.DenseMutableMatrix"], [625, "module-pybrops.core.mat.DensePhasedMatrix"], [628, "module-pybrops.core.mat.DensePhasedTaxaVariantMatrix"], [631, "module-pybrops.core.mat.DenseSquareMatrix"], [634, "module-pybrops.core.mat.DenseSquareTaxaMatrix"], [637, "module-pybrops.core.mat.DenseSquareTaxaSquareTraitMatrix"], [640, "module-pybrops.core.mat.DenseSquareTaxaTraitMatrix"], [643, "module-pybrops.core.mat.DenseSquareTraitMatrix"], [646, "module-pybrops.core.mat.DenseTaxaMatrix"], [649, "module-pybrops.core.mat.DenseTaxaTraitMatrix"], [652, "module-pybrops.core.mat.DenseTaxaVariantMatrix"], [655, "module-pybrops.core.mat.DenseTraitMatrix"], [658, "module-pybrops.core.mat.DenseVariantMatrix"], [661, "module-pybrops.core.mat.GroupableMatrix"], [664, "module-pybrops.core.mat.Matrix"], [667, "module-pybrops.core.mat.MutableMatrix"], [670, "module-pybrops.core.mat.PhasedMatrix"], [673, "module-pybrops.core.mat.PhasedTaxaVariantMatrix"], [676, "module-pybrops.core.mat.PrunableMatrix"], [679, "module-pybrops.core.mat.SortableMatrix"], [682, "module-pybrops.core.mat.SquareMatrix"], [685, "module-pybrops.core.mat.SquareTaxaMatrix"], [688, "module-pybrops.core.mat.SquareTaxaSquareTraitMatrix"], [691, "module-pybrops.core.mat.SquareTaxaTraitMatrix"], [694, "module-pybrops.core.mat.SquareTraitMatrix"], [697, "module-pybrops.core.mat.TaxaMatrix"], [700, "module-pybrops.core.mat.TaxaTraitMatrix"], [703, "module-pybrops.core.mat.TaxaVariantMatrix"], [706, "module-pybrops.core.mat.TraitMatrix"], [709, "module-pybrops.core.mat.VariantMatrix"], [712, "module-pybrops.core.mat.util"], [714, "module-pybrops.core.random"], [715, "module-pybrops.core.random.prng"], [718, "module-pybrops.core.random.sampling"], [723, "module-pybrops.core.util"], [724, "module-pybrops.core.util.arrayix"], [731, "module-pybrops.core.util.h5py"], [734, "module-pybrops.core.util.haplo"], [739, "module-pybrops.core.util.iterator"], [741, "module-pybrops.core.util.pareto"], [743, "module-pybrops.core.util.subroutines"], [749, "module-pybrops.model"], [750, "module-pybrops.model.gmod"], [751, "module-pybrops.model.gmod.AdditiveDominanceEpistaticLinearGenomicModel"], [754, "module-pybrops.model.gmod.AdditiveDominanceLinearGenomicModel"], [757, "module-pybrops.model.gmod.AdditiveLinearGenomicModel"], [760, "module-pybrops.model.gmod.CoancestryLinearGenomicModel"], [763, "module-pybrops.model.gmod.DenseAdditiveDominanceLinearGenomicModel"], [766, "module-pybrops.model.gmod.DenseAdditiveLinearGenomicModel"], [769, "module-pybrops.model.gmod.DenseLinearGenomicModel"], [772, "module-pybrops.model.gmod.GenomicModel"], [775, "module-pybrops.model.gmod.LinearGenomicModel"], [778, "module-pybrops.model.gmod.NonlinearGenomicModel"], [781, "module-pybrops.model.gmod.rrBLUPModel0"], [795, "module-pybrops.model.pcvmat"], [796, "module-pybrops.model.pcvmat.AdditiveProgenyGeneticCovarianceMatrix"], [799, "module-pybrops.model.pcvmat.AdditiveProgenyGenicCovarianceMatrix"], [802, "module-pybrops.model.pcvmat.DenseAdditiveProgenyGeneticCovarianceMatrix"], [805, "module-pybrops.model.pcvmat.DenseAdditiveProgenyGenicCovarianceMatrix"], [808, "module-pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix"], [811, "module-pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix"], [813, "module-pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix"], [816, "module-pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix"], [818, "module-pybrops.model.pcvmat.DenseProgenyGeneticCovarianceMatrix"], [821, "module-pybrops.model.pcvmat.DenseProgenyGenicCovarianceMatrix"], [824, "module-pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix"], [826, "module-pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix"], [828, "module-pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix"], [830, "module-pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix"], [832, "module-pybrops.model.pcvmat.ProgenyGeneticCovarianceMatrix"], [835, "module-pybrops.model.pcvmat.ProgenyGenicCovarianceMatrix"], [838, "module-pybrops.model.vmat"], [839, "module-pybrops.model.vmat.AdditiveGeneticVarianceMatrix"], [842, "module-pybrops.model.vmat.AdditiveGenicVarianceMatrix"], [845, "module-pybrops.model.vmat.DenseAdditiveGeneticVarianceMatrix"], [848, "module-pybrops.model.vmat.DenseAdditiveGenicVarianceMatrix"], [851, "module-pybrops.model.vmat.DenseDihybridDHAdditiveGeneticVarianceMatrix"], [854, "module-pybrops.model.vmat.DenseDihybridDHAdditiveGenicVarianceMatrix"], [856, "module-pybrops.model.vmat.DenseFourWayDHAdditiveGeneticVarianceMatrix"], [859, "module-pybrops.model.vmat.DenseFourWayDHAdditiveGenicVarianceMatrix"], [861, "module-pybrops.model.vmat.DenseGeneticVarianceMatrix"], [864, "module-pybrops.model.vmat.DenseGenicVarianceMatrix"], [867, "module-pybrops.model.vmat.DenseThreeWayDHAdditiveGeneticVarianceMatrix"], [869, "module-pybrops.model.vmat.DenseThreeWayDHAdditiveGenicVarianceMatrix"], [871, "module-pybrops.model.vmat.DenseTwoWayDHAdditiveGeneticVarianceMatrix"], [873, "module-pybrops.model.vmat.DenseTwoWayDHAdditiveGenicVarianceMatrix"], [875, "module-pybrops.model.vmat.GeneticVarianceMatrix"], [878, "module-pybrops.model.vmat.GenicVarianceMatrix"], [881, "module-pybrops.model.vmat.fcty"], [882, "module-pybrops.model.vmat.fcty.AdditiveGeneticVarianceMatrixFactory"], [885, "module-pybrops.model.vmat.fcty.AdditiveGenicVarianceMatrixFactory"], [888, "module-pybrops.model.vmat.fcty.DenseDihybridDHAdditiveGeneticVarianceMatrixFactory"], [891, "module-pybrops.model.vmat.fcty.DenseFourWayDHAdditiveGeneticVarianceMatrixFactory"], [894, "module-pybrops.model.vmat.fcty.DenseThreeWayDHAdditiveGeneticVarianceMatrixFactory"], [897, "module-pybrops.model.vmat.fcty.DenseTwoWayDHAdditiveGeneticVarianceMatrixFactory"], [900, "module-pybrops.model.vmat.fcty.DenseTwoWayDHAdditiveGenicVarianceMatrixFactory"], [903, "module-pybrops.model.vmat.fcty.GeneticVarianceMatrixFactory"], [906, "module-pybrops.model.vmat.fcty.GenicVarianceMatrixFactory"], [909, "module-pybrops.model.vmat.util"], [915, "module-pybrops.opt"], [916, "module-pybrops.opt.algo"], [917, "module-pybrops.opt.algo.BinaryGeneticAlgorithm"], [919, "module-pybrops.opt.algo.BinaryOptimizationAlgorithm"], [922, "module-pybrops.opt.algo.IntegerGeneticAlgorithm"], [924, "module-pybrops.opt.algo.IntegerOptimizationAlgorithm"], [927, "module-pybrops.opt.algo.NSGA2BinaryGeneticAlgorithm"], [929, "module-pybrops.opt.algo.NSGA2IntegerGeneticAlgorithm"], [931, "module-pybrops.opt.algo.NSGA2MemeticSubsetGeneticAlgorithm"], [936, "module-pybrops.opt.algo.NSGA2RealGeneticAlgorithm"], [938, "module-pybrops.opt.algo.NSGA2SubsetGeneticAlgorithm"], [940, "module-pybrops.opt.algo.NSGA3SubsetGeneticAlgorithm"], [942, "module-pybrops.opt.algo.OptimizationAlgorithm"], [945, "module-pybrops.opt.algo.RealGeneticAlgorithm"], [947, "module-pybrops.opt.algo.RealOptimizationAlgorithm"], [950, "module-pybrops.opt.algo.SortingSteepestDescentSubsetHillClimber"], [952, "module-pybrops.opt.algo.SortingSubsetOptimizationAlgorithm"], [954, "module-pybrops.opt.algo.SteepestDescentSubsetHillClimber"], [956, "module-pybrops.opt.algo.SubsetGeneticAlgorithm"], [958, "module-pybrops.opt.algo.SubsetOptimizationAlgorithm"], [961, "module-pybrops.opt.algo.UnconstrainedNSGA2SetGeneticAlgorithm"], [963, "module-pybrops.opt.algo.UnconstrainedOptimizationAlgorithm"], [966, "module-pybrops.opt.algo.UnconstrainedSetGeneticAlgorithm"], [968, "module-pybrops.opt.algo.UnconstrainedSteepestAscentSetHillClimber"], [970, "module-pybrops.opt.algo.pymoo_addon"], [985, "module-pybrops.opt.prob"], [986, "module-pybrops.opt.prob.BinaryProblem"], [991, "module-pybrops.opt.prob.FunctionWeight"], [995, "module-pybrops.opt.prob.IntegerProblem"], [1000, "module-pybrops.opt.prob.Problem"], [1003, "module-pybrops.opt.prob.RealProblem"], [1008, "module-pybrops.opt.prob.SubsetProblem"], [1013, "module-pybrops.opt.soln"], [1014, "module-pybrops.opt.soln.BinarySolution"], [1017, "module-pybrops.opt.soln.IntegerSolution"], [1020, "module-pybrops.opt.soln.RealSolution"], [1023, "module-pybrops.opt.soln.Solution"], [1026, "module-pybrops.opt.soln.SubsetSolution"], [1029, "module-pybrops.popgen"], [1030, "module-pybrops.popgen.bvmat"], [1031, "module-pybrops.popgen.bvmat.BreedingValueMatrix"], [1034, "module-pybrops.popgen.bvmat.DenseBreedingValueMatrix"], [1037, "module-pybrops.popgen.bvmat.DenseEstimatedBreedingValueMatrix"], [1040, "module-pybrops.popgen.bvmat.DenseGenomicEstimatedBreedingValueMatrix"], [1043, "module-pybrops.popgen.cmat"], [1044, "module-pybrops.popgen.cmat.CoancestryMatrix"], [1047, "module-pybrops.popgen.cmat.DenseCoancestryMatrix"], [1050, "module-pybrops.popgen.cmat.DenseGeneralizedWeightedCoancestryMatrix"], [1053, "module-pybrops.popgen.cmat.DenseMolecularCoancestryMatrix"], [1056, "module-pybrops.popgen.cmat.DenseVanRadenCoancestryMatrix"], [1059, "module-pybrops.popgen.cmat.DenseYangCoancestryMatrix"], [1062, "module-pybrops.popgen.cmat.fcty"], [1063, "module-pybrops.popgen.cmat.fcty.CoancestryMatrixFactory"], [1066, "module-pybrops.popgen.cmat.fcty.DenseCoancestryMatrixFactory"], [1069, "module-pybrops.popgen.cmat.fcty.DenseGeneralizedWeightedCoancestryMatrixFactory"], [1072, "module-pybrops.popgen.cmat.fcty.DenseMolecularCoancestryMatrixFactory"], [1075, "module-pybrops.popgen.cmat.fcty.DenseVanRadenCoancestryMatrixFactory"], [1078, "module-pybrops.popgen.cmat.fcty.DenseYangCoancestryMatrixFactory"], [1081, "module-pybrops.popgen.gmap"], [1082, "module-pybrops.popgen.gmap.DenseGeneticMappableMatrix"], [1085, "module-pybrops.popgen.gmap.ExtendedGeneticMap"], [1088, "module-pybrops.popgen.gmap.GeneticMap"], [1091, "module-pybrops.popgen.gmap.GeneticMapFunction"], [1094, "module-pybrops.popgen.gmap.GeneticMappableMatrix"], [1097, "module-pybrops.popgen.gmap.HaldaneMapFunction"], [1100, "module-pybrops.popgen.gmap.KosambiMapFunction"], [1103, "module-pybrops.popgen.gmap.StandardGeneticMap"], [1106, "module-pybrops.popgen.gmap.util"], [1108, "module-pybrops.popgen.gmat"], [1109, "module-pybrops.popgen.gmat.DenseGenotypeMatrix"], [1112, "module-pybrops.popgen.gmat.DensePhasedGenotypeMatrix"], [1116, "module-pybrops.popgen.gmat.GenotypeMatrix"], [1120, "module-pybrops.popgen.gmat.HaplotypeMatrix"], [1123, "module-pybrops.popgen.gmat.PhasedGenotypeMatrix"], [1126, "module-pybrops.popgen.gmat.PhasedHaplotypeMatrix"], [1129, "module-pybrops.test"], [1130, "module-pybrops.test.assert_python"]], "pybrops": [[0, "module-pybrops"]], "pybrops.breed": [[1, "module-pybrops.breed"]], "pybrops.breed.arch": [[2, "module-pybrops.breed.arch"]], "pybrops.breed.arch.breedingedge": [[3, "module-pybrops.breed.arch.BreedingEdge"]], "breedingedge (class in pybrops.breed.arch.breedingedge)": [[4, "pybrops.breed.arch.BreedingEdge.BreedingEdge"]], "check_is_breedingedge() (in module pybrops.breed.arch.breedingedge)": [[5, "pybrops.breed.arch.BreedingEdge.check_is_BreedingEdge"]], "pybrops.breed.arch.breedinggraph": [[6, "module-pybrops.breed.arch.BreedingGraph"]], "breedinggraph (class in pybrops.breed.arch.breedinggraph)": [[7, "pybrops.breed.arch.BreedingGraph.BreedingGraph"]], "graph (pybrops.breed.arch.breedinggraph.breedinggraph property)": [[7, "pybrops.breed.arch.BreedingGraph.BreedingGraph.graph"]], "check_is_breedinggraph() (in module pybrops.breed.arch.breedinggraph)": [[8, "pybrops.breed.arch.BreedingGraph.check_is_BreedingGraph"]], "pybrops.breed.arch.breedingnode": [[9, "module-pybrops.breed.arch.BreedingNode"]], "breedingnode (class in pybrops.breed.arch.breedingnode)": [[10, "pybrops.breed.arch.BreedingNode.BreedingNode"]], "bval (pybrops.breed.arch.breedingnode.breedingnode property)": [[10, "pybrops.breed.arch.BreedingNode.BreedingNode.bval"]], "geno (pybrops.breed.arch.breedingnode.breedingnode property)": [[10, "pybrops.breed.arch.BreedingNode.BreedingNode.geno"]], "genome (pybrops.breed.arch.breedingnode.breedingnode property)": [[10, "pybrops.breed.arch.BreedingNode.BreedingNode.genome"]], "gmod (pybrops.breed.arch.breedingnode.breedingnode property)": [[10, "pybrops.breed.arch.BreedingNode.BreedingNode.gmod"]], "pheno (pybrops.breed.arch.breedingnode.breedingnode property)": [[10, "pybrops.breed.arch.BreedingNode.BreedingNode.pheno"]], "t_cur (pybrops.breed.arch.breedingnode.breedingnode property)": [[10, "pybrops.breed.arch.BreedingNode.BreedingNode.t_cur"]], "t_max (pybrops.breed.arch.breedingnode.breedingnode property)": [[10, "pybrops.breed.arch.BreedingNode.BreedingNode.t_max"]], "check_is_breedingnode() (in module pybrops.breed.arch.breedingnode)": [[11, "pybrops.breed.arch.BreedingNode.check_is_BreedingNode"]], "pybrops.breed.arch.breedingprogram": [[12, "module-pybrops.breed.arch.BreedingProgram"]], "breedingprogram (class in pybrops.breed.arch.breedingprogram)": [[13, "pybrops.breed.arch.BreedingProgram.BreedingProgram"]], "advance() (pybrops.breed.arch.breedingprogram.breedingprogram method)": [[13, "pybrops.breed.arch.BreedingProgram.BreedingProgram.advance"]], "bval (pybrops.breed.arch.breedingprogram.breedingprogram property)": [[13, "pybrops.breed.arch.BreedingProgram.BreedingProgram.bval"]], "evalop (pybrops.breed.arch.breedingprogram.breedingprogram property)": [[13, "pybrops.breed.arch.BreedingProgram.BreedingProgram.evalop"]], "evolve() (pybrops.breed.arch.breedingprogram.breedingprogram method)": [[13, "pybrops.breed.arch.BreedingProgram.BreedingProgram.evolve"]], "geno (pybrops.breed.arch.breedingprogram.breedingprogram property)": [[13, "pybrops.breed.arch.BreedingProgram.BreedingProgram.geno"]], "genome (pybrops.breed.arch.breedingprogram.breedingprogram property)": [[13, "pybrops.breed.arch.BreedingProgram.BreedingProgram.genome"]], "gmod (pybrops.breed.arch.breedingprogram.breedingprogram property)": [[13, "pybrops.breed.arch.BreedingProgram.BreedingProgram.gmod"]], "initialize() (pybrops.breed.arch.breedingprogram.breedingprogram method)": [[13, "pybrops.breed.arch.BreedingProgram.BreedingProgram.initialize"]], "initop (pybrops.breed.arch.breedingprogram.breedingprogram property)": [[13, "pybrops.breed.arch.BreedingProgram.BreedingProgram.initop"]], "is_initialized() (pybrops.breed.arch.breedingprogram.breedingprogram method)": [[13, "pybrops.breed.arch.BreedingProgram.BreedingProgram.is_initialized"]], "mateop (pybrops.breed.arch.breedingprogram.breedingprogram property)": [[13, "pybrops.breed.arch.BreedingProgram.BreedingProgram.mateop"]], "pheno (pybrops.breed.arch.breedingprogram.breedingprogram property)": [[13, "pybrops.breed.arch.BreedingProgram.BreedingProgram.pheno"]], "pselop (pybrops.breed.arch.breedingprogram.breedingprogram property)": [[13, "pybrops.breed.arch.BreedingProgram.BreedingProgram.pselop"]], "reset() (pybrops.breed.arch.breedingprogram.breedingprogram method)": [[13, "pybrops.breed.arch.BreedingProgram.BreedingProgram.reset"]], "sselop (pybrops.breed.arch.breedingprogram.breedingprogram property)": [[13, "pybrops.breed.arch.BreedingProgram.BreedingProgram.sselop"]], "start_bval (pybrops.breed.arch.breedingprogram.breedingprogram property)": [[13, "pybrops.breed.arch.BreedingProgram.BreedingProgram.start_bval"]], "start_geno (pybrops.breed.arch.breedingprogram.breedingprogram property)": [[13, "pybrops.breed.arch.BreedingProgram.BreedingProgram.start_geno"]], "start_genome (pybrops.breed.arch.breedingprogram.breedingprogram property)": [[13, "pybrops.breed.arch.BreedingProgram.BreedingProgram.start_genome"]], "start_gmod (pybrops.breed.arch.breedingprogram.breedingprogram property)": [[13, "pybrops.breed.arch.BreedingProgram.BreedingProgram.start_gmod"]], "start_pheno (pybrops.breed.arch.breedingprogram.breedingprogram property)": [[13, "pybrops.breed.arch.BreedingProgram.BreedingProgram.start_pheno"]], "t_cur (pybrops.breed.arch.breedingprogram.breedingprogram property)": [[13, "pybrops.breed.arch.BreedingProgram.BreedingProgram.t_cur"]], "t_max (pybrops.breed.arch.breedingprogram.breedingprogram property)": [[13, "pybrops.breed.arch.BreedingProgram.BreedingProgram.t_max"]], "check_is_breedingprogram() (in module pybrops.breed.arch.breedingprogram)": [[14, "pybrops.breed.arch.BreedingProgram.check_is_BreedingProgram"]], "pybrops.breed.arch.emigrationoperator": [[15, "module-pybrops.breed.arch.EmigrationOperator"]], "emigrationoperator (class in pybrops.breed.arch.emigrationoperator)": [[16, "pybrops.breed.arch.EmigrationOperator.EmigrationOperator"]], "emigrate() (pybrops.breed.arch.emigrationoperator.emigrationoperator method)": [[16, "pybrops.breed.arch.EmigrationOperator.EmigrationOperator.emigrate"]], "check_is_emigrationoperator() (in module pybrops.breed.arch.emigrationoperator)": [[17, "pybrops.breed.arch.EmigrationOperator.check_is_EmigrationOperator"]], "pybrops.breed.arch.germplasmbank": [[18, "module-pybrops.breed.arch.GermplasmBank"]], "germplasmbank (class in pybrops.breed.arch.germplasmbank)": [[19, "pybrops.breed.arch.GermplasmBank.GermplasmBank"]], "bval (pybrops.breed.arch.germplasmbank.germplasmbank property)": [[19, "pybrops.breed.arch.GermplasmBank.GermplasmBank.bval"]], "geno (pybrops.breed.arch.germplasmbank.germplasmbank property)": [[19, "pybrops.breed.arch.GermplasmBank.GermplasmBank.geno"]], "genome (pybrops.breed.arch.germplasmbank.germplasmbank property)": [[19, "pybrops.breed.arch.GermplasmBank.GermplasmBank.genome"]], "gmod (pybrops.breed.arch.germplasmbank.germplasmbank property)": [[19, "pybrops.breed.arch.GermplasmBank.GermplasmBank.gmod"]], "pheno (pybrops.breed.arch.germplasmbank.germplasmbank property)": [[19, "pybrops.breed.arch.GermplasmBank.GermplasmBank.pheno"]], "t_cur (pybrops.breed.arch.germplasmbank.germplasmbank property)": [[19, "pybrops.breed.arch.GermplasmBank.GermplasmBank.t_cur"]], "t_max (pybrops.breed.arch.germplasmbank.germplasmbank property)": [[19, "pybrops.breed.arch.GermplasmBank.GermplasmBank.t_max"]], "check_is_germplasmbank() (in module pybrops.breed.arch.germplasmbank)": [[20, "pybrops.breed.arch.GermplasmBank.check_is_GermplasmBank"]], "pybrops.breed.arch.immigrationoperator": [[21, "module-pybrops.breed.arch.ImmigrationOperator"]], "immigrationoperator (class in pybrops.breed.arch.immigrationoperator)": [[22, "pybrops.breed.arch.ImmigrationOperator.ImmigrationOperator"]], "immigrate() (pybrops.breed.arch.immigrationoperator.immigrationoperator method)": [[22, "pybrops.breed.arch.ImmigrationOperator.ImmigrationOperator.immigrate"]], "check_is_immigrationoperator() (in module pybrops.breed.arch.immigrationoperator)": [[23, "pybrops.breed.arch.ImmigrationOperator.check_is_ImmigrationOperator"]], "pybrops.breed.arch.recurrentselectionbreedingprogram": [[24, "module-pybrops.breed.arch.RecurrentSelectionBreedingProgram"]], "recurrentselectionbreedingprogram (class in pybrops.breed.arch.recurrentselectionbreedingprogram)": [[25, "pybrops.breed.arch.RecurrentSelectionBreedingProgram.RecurrentSelectionBreedingProgram"]], "advance() (pybrops.breed.arch.recurrentselectionbreedingprogram.recurrentselectionbreedingprogram method)": [[25, "pybrops.breed.arch.RecurrentSelectionBreedingProgram.RecurrentSelectionBreedingProgram.advance"]], "bval (pybrops.breed.arch.recurrentselectionbreedingprogram.recurrentselectionbreedingprogram property)": [[25, "pybrops.breed.arch.RecurrentSelectionBreedingProgram.RecurrentSelectionBreedingProgram.bval"]], "evalop (pybrops.breed.arch.recurrentselectionbreedingprogram.recurrentselectionbreedingprogram property)": [[25, "pybrops.breed.arch.RecurrentSelectionBreedingProgram.RecurrentSelectionBreedingProgram.evalop"]], "evolve() (pybrops.breed.arch.recurrentselectionbreedingprogram.recurrentselectionbreedingprogram method)": [[25, "pybrops.breed.arch.RecurrentSelectionBreedingProgram.RecurrentSelectionBreedingProgram.evolve"]], "geno (pybrops.breed.arch.recurrentselectionbreedingprogram.recurrentselectionbreedingprogram property)": [[25, "pybrops.breed.arch.RecurrentSelectionBreedingProgram.RecurrentSelectionBreedingProgram.geno"]], "genome (pybrops.breed.arch.recurrentselectionbreedingprogram.recurrentselectionbreedingprogram property)": [[25, "pybrops.breed.arch.RecurrentSelectionBreedingProgram.RecurrentSelectionBreedingProgram.genome"]], "gmod (pybrops.breed.arch.recurrentselectionbreedingprogram.recurrentselectionbreedingprogram property)": [[25, "pybrops.breed.arch.RecurrentSelectionBreedingProgram.RecurrentSelectionBreedingProgram.gmod"]], "initialize() (pybrops.breed.arch.recurrentselectionbreedingprogram.recurrentselectionbreedingprogram method)": [[25, "pybrops.breed.arch.RecurrentSelectionBreedingProgram.RecurrentSelectionBreedingProgram.initialize"]], "initop (pybrops.breed.arch.recurrentselectionbreedingprogram.recurrentselectionbreedingprogram property)": [[25, "pybrops.breed.arch.RecurrentSelectionBreedingProgram.RecurrentSelectionBreedingProgram.initop"]], "is_initialized() (pybrops.breed.arch.recurrentselectionbreedingprogram.recurrentselectionbreedingprogram method)": [[25, "pybrops.breed.arch.RecurrentSelectionBreedingProgram.RecurrentSelectionBreedingProgram.is_initialized"]], "mateop (pybrops.breed.arch.recurrentselectionbreedingprogram.recurrentselectionbreedingprogram property)": [[25, "pybrops.breed.arch.RecurrentSelectionBreedingProgram.RecurrentSelectionBreedingProgram.mateop"]], "pheno (pybrops.breed.arch.recurrentselectionbreedingprogram.recurrentselectionbreedingprogram property)": [[25, "pybrops.breed.arch.RecurrentSelectionBreedingProgram.RecurrentSelectionBreedingProgram.pheno"]], "pselop (pybrops.breed.arch.recurrentselectionbreedingprogram.recurrentselectionbreedingprogram property)": [[25, "pybrops.breed.arch.RecurrentSelectionBreedingProgram.RecurrentSelectionBreedingProgram.pselop"]], "reset() (pybrops.breed.arch.recurrentselectionbreedingprogram.recurrentselectionbreedingprogram method)": [[25, "pybrops.breed.arch.RecurrentSelectionBreedingProgram.RecurrentSelectionBreedingProgram.reset"]], "sselop (pybrops.breed.arch.recurrentselectionbreedingprogram.recurrentselectionbreedingprogram property)": [[25, "pybrops.breed.arch.RecurrentSelectionBreedingProgram.RecurrentSelectionBreedingProgram.sselop"]], "start_bval (pybrops.breed.arch.recurrentselectionbreedingprogram.recurrentselectionbreedingprogram property)": [[25, "pybrops.breed.arch.RecurrentSelectionBreedingProgram.RecurrentSelectionBreedingProgram.start_bval"]], "start_geno (pybrops.breed.arch.recurrentselectionbreedingprogram.recurrentselectionbreedingprogram property)": [[25, "pybrops.breed.arch.RecurrentSelectionBreedingProgram.RecurrentSelectionBreedingProgram.start_geno"]], "start_genome (pybrops.breed.arch.recurrentselectionbreedingprogram.recurrentselectionbreedingprogram property)": [[25, "pybrops.breed.arch.RecurrentSelectionBreedingProgram.RecurrentSelectionBreedingProgram.start_genome"]], "start_gmod (pybrops.breed.arch.recurrentselectionbreedingprogram.recurrentselectionbreedingprogram property)": [[25, "pybrops.breed.arch.RecurrentSelectionBreedingProgram.RecurrentSelectionBreedingProgram.start_gmod"]], "start_pheno (pybrops.breed.arch.recurrentselectionbreedingprogram.recurrentselectionbreedingprogram property)": [[25, "pybrops.breed.arch.RecurrentSelectionBreedingProgram.RecurrentSelectionBreedingProgram.start_pheno"]], "t_cur (pybrops.breed.arch.recurrentselectionbreedingprogram.recurrentselectionbreedingprogram property)": [[25, "pybrops.breed.arch.RecurrentSelectionBreedingProgram.RecurrentSelectionBreedingProgram.t_cur"]], "t_max (pybrops.breed.arch.recurrentselectionbreedingprogram.recurrentselectionbreedingprogram property)": [[25, "pybrops.breed.arch.RecurrentSelectionBreedingProgram.RecurrentSelectionBreedingProgram.t_max"]], "check_is_recurrentselectionbreedingprogram() (in module pybrops.breed.arch.recurrentselectionbreedingprogram)": [[26, "pybrops.breed.arch.RecurrentSelectionBreedingProgram.check_is_RecurrentSelectionBreedingProgram"]], "pybrops.breed.op": [[27, "module-pybrops.breed.op"]], "pybrops.breed.op.eval": [[28, "module-pybrops.breed.op.eval"]], "pybrops.breed.op.eval.evaluationoperator": [[29, "module-pybrops.breed.op.eval.EvaluationOperator"]], "evaluationoperator (class in pybrops.breed.op.eval.evaluationoperator)": [[30, "pybrops.breed.op.eval.EvaluationOperator.EvaluationOperator"]], "evaluate() (pybrops.breed.op.eval.evaluationoperator.evaluationoperator method)": [[30, "pybrops.breed.op.eval.EvaluationOperator.EvaluationOperator.evaluate"]], "check_is_evaluationoperator() (in module pybrops.breed.op.eval.evaluationoperator)": [[31, "pybrops.breed.op.eval.EvaluationOperator.check_is_EvaluationOperator"]], "pybrops.breed.op.init": [[32, "module-pybrops.breed.op.init"]], "pybrops.breed.op.init.initializationoperator": [[33, "module-pybrops.breed.op.init.InitializationOperator"]], "initializationoperator (class in pybrops.breed.op.init.initializationoperator)": [[34, "pybrops.breed.op.init.InitializationOperator.InitializationOperator"]], "initialize() (pybrops.breed.op.init.initializationoperator.initializationoperator method)": [[34, "pybrops.breed.op.init.InitializationOperator.InitializationOperator.initialize"]], "check_is_initializationoperator() (in module pybrops.breed.op.init.initializationoperator)": [[35, "pybrops.breed.op.init.InitializationOperator.check_is_InitializationOperator"]], "pybrops.breed.op.log": [[36, "module-pybrops.breed.op.log"]], "pybrops.breed.op.log.logbook": [[37, "module-pybrops.breed.op.log.Logbook"]], "logbook (class in pybrops.breed.op.log.logbook)": [[38, "pybrops.breed.op.log.Logbook.Logbook"]], "data (pybrops.breed.op.log.logbook.logbook property)": [[38, "pybrops.breed.op.log.Logbook.Logbook.data"]], "log_evaluate() (pybrops.breed.op.log.logbook.logbook method)": [[38, "pybrops.breed.op.log.Logbook.Logbook.log_evaluate"]], "log_initialize() (pybrops.breed.op.log.logbook.logbook method)": [[38, "pybrops.breed.op.log.Logbook.Logbook.log_initialize"]], "log_mate() (pybrops.breed.op.log.logbook.logbook method)": [[38, "pybrops.breed.op.log.Logbook.Logbook.log_mate"]], "log_pselect() (pybrops.breed.op.log.logbook.logbook method)": [[38, "pybrops.breed.op.log.Logbook.Logbook.log_pselect"]], "log_sselect() (pybrops.breed.op.log.logbook.logbook method)": [[38, "pybrops.breed.op.log.Logbook.Logbook.log_sselect"]], "rep (pybrops.breed.op.log.logbook.logbook property)": [[38, "pybrops.breed.op.log.Logbook.Logbook.rep"]], "reset() (pybrops.breed.op.log.logbook.logbook method)": [[38, "pybrops.breed.op.log.Logbook.Logbook.reset"]], "write() (pybrops.breed.op.log.logbook.logbook method)": [[38, "pybrops.breed.op.log.Logbook.Logbook.write"]], "check_is_logbook() (in module pybrops.breed.op.log.logbook)": [[39, "pybrops.breed.op.log.Logbook.check_is_Logbook"]], "pybrops.breed.op.mate": [[40, "module-pybrops.breed.op.mate"]], "pybrops.breed.op.mate.matingoperator": [[41, "module-pybrops.breed.op.mate.MatingOperator"]], "matingoperator (class in pybrops.breed.op.mate.matingoperator)": [[42, "pybrops.breed.op.mate.MatingOperator.MatingOperator"]], "mate() (pybrops.breed.op.mate.matingoperator.matingoperator method)": [[42, "pybrops.breed.op.mate.MatingOperator.MatingOperator.mate"]], "check_is_matingoperator() (in module pybrops.breed.op.mate.matingoperator)": [[43, "pybrops.breed.op.mate.MatingOperator.check_is_MatingOperator"]], "pybrops.breed.op.psel": [[44, "module-pybrops.breed.op.psel"]], "pybrops.breed.op.psel.parentselectionoperator": [[45, "module-pybrops.breed.op.psel.ParentSelectionOperator"]], "parentselectionoperator (class in pybrops.breed.op.psel.parentselectionoperator)": [[46, "pybrops.breed.op.psel.ParentSelectionOperator.ParentSelectionOperator"]], "pselect() (pybrops.breed.op.psel.parentselectionoperator.parentselectionoperator method)": [[46, "pybrops.breed.op.psel.ParentSelectionOperator.ParentSelectionOperator.pselect"]], "check_is_parentselectionoperator() (in module pybrops.breed.op.psel.parentselectionoperator)": [[47, "pybrops.breed.op.psel.ParentSelectionOperator.check_is_ParentSelectionOperator"]], "pybrops.breed.op.ssel": [[48, "module-pybrops.breed.op.ssel"]], "pybrops.breed.op.ssel.survivorselectionoperator": [[49, "module-pybrops.breed.op.ssel.SurvivorSelectionOperator"]], "survivorselectionoperator (class in pybrops.breed.op.ssel.survivorselectionoperator)": [[50, "pybrops.breed.op.ssel.SurvivorSelectionOperator.SurvivorSelectionOperator"]], "sselect() (pybrops.breed.op.ssel.survivorselectionoperator.survivorselectionoperator method)": [[50, "pybrops.breed.op.ssel.SurvivorSelectionOperator.SurvivorSelectionOperator.sselect"]], "check_is_survivorselectionoperator() (in module pybrops.breed.op.ssel.survivorselectionoperator)": [[51, "pybrops.breed.op.ssel.SurvivorSelectionOperator.check_is_SurvivorSelectionOperator"]], "pybrops.breed.prot": [[52, "module-pybrops.breed.prot"]], "pybrops.breed.prot.bv": [[53, "module-pybrops.breed.prot.bv"]], "pybrops.breed.prot.bv.breedingvalueprotocol": [[54, "module-pybrops.breed.prot.bv.BreedingValueProtocol"]], "breedingvalueprotocol (class in pybrops.breed.prot.bv.breedingvalueprotocol)": [[55, "pybrops.breed.prot.bv.BreedingValueProtocol.BreedingValueProtocol"]], "estimate() (pybrops.breed.prot.bv.breedingvalueprotocol.breedingvalueprotocol method)": [[55, "pybrops.breed.prot.bv.BreedingValueProtocol.BreedingValueProtocol.estimate"]], "check_is_breedingvalueprotocol() (in module pybrops.breed.prot.bv.breedingvalueprotocol)": [[56, "pybrops.breed.prot.bv.BreedingValueProtocol.check_is_BreedingValueProtocol"]], "pybrops.breed.prot.bv.meanphenotypicbreedingvalue": [[57, "module-pybrops.breed.prot.bv.MeanPhenotypicBreedingValue"]], "meanphenotypicbreedingvalue (class in pybrops.breed.prot.bv.meanphenotypicbreedingvalue)": [[58, "pybrops.breed.prot.bv.MeanPhenotypicBreedingValue.MeanPhenotypicBreedingValue"]], "estimate() (pybrops.breed.prot.bv.meanphenotypicbreedingvalue.meanphenotypicbreedingvalue method)": [[58, "pybrops.breed.prot.bv.MeanPhenotypicBreedingValue.MeanPhenotypicBreedingValue.estimate"]], "taxa_col (pybrops.breed.prot.bv.meanphenotypicbreedingvalue.meanphenotypicbreedingvalue property)": [[58, "pybrops.breed.prot.bv.MeanPhenotypicBreedingValue.MeanPhenotypicBreedingValue.taxa_col"]], "taxa_grp_col (pybrops.breed.prot.bv.meanphenotypicbreedingvalue.meanphenotypicbreedingvalue property)": [[58, "pybrops.breed.prot.bv.MeanPhenotypicBreedingValue.MeanPhenotypicBreedingValue.taxa_grp_col"]], "trait_cols (pybrops.breed.prot.bv.meanphenotypicbreedingvalue.meanphenotypicbreedingvalue property)": [[58, "pybrops.breed.prot.bv.MeanPhenotypicBreedingValue.MeanPhenotypicBreedingValue.trait_cols"]], "pybrops.breed.prot.bv.truebreedingvalue": [[59, "module-pybrops.breed.prot.bv.TrueBreedingValue"]], "truebreedingvalue (class in pybrops.breed.prot.bv.truebreedingvalue)": [[60, "pybrops.breed.prot.bv.TrueBreedingValue.TrueBreedingValue"]], "estimate() (pybrops.breed.prot.bv.truebreedingvalue.truebreedingvalue method)": [[60, "pybrops.breed.prot.bv.TrueBreedingValue.TrueBreedingValue.estimate"]], "gpmod (pybrops.breed.prot.bv.truebreedingvalue.truebreedingvalue property)": [[60, "pybrops.breed.prot.bv.TrueBreedingValue.TrueBreedingValue.gpmod"]], "pybrops.breed.prot.gt": [[61, "module-pybrops.breed.prot.gt"]], "pybrops.breed.prot.gt.denseunphasedgenotyping": [[62, "module-pybrops.breed.prot.gt.DenseUnphasedGenotyping"]], "denseunphasedgenotyping (class in pybrops.breed.prot.gt.denseunphasedgenotyping)": [[63, "pybrops.breed.prot.gt.DenseUnphasedGenotyping.DenseUnphasedGenotyping"]], "genotype() (pybrops.breed.prot.gt.denseunphasedgenotyping.denseunphasedgenotyping method)": [[63, "pybrops.breed.prot.gt.DenseUnphasedGenotyping.DenseUnphasedGenotyping.genotype"]], "pybrops.breed.prot.gt.genotypingprotocol": [[64, "module-pybrops.breed.prot.gt.GenotypingProtocol"]], "genotypingprotocol (class in pybrops.breed.prot.gt.genotypingprotocol)": [[65, "pybrops.breed.prot.gt.GenotypingProtocol.GenotypingProtocol"]], "genotype() (pybrops.breed.prot.gt.genotypingprotocol.genotypingprotocol method)": [[65, "pybrops.breed.prot.gt.GenotypingProtocol.GenotypingProtocol.genotype"]], "check_is_genotypingprotocol() (in module pybrops.breed.prot.gt.genotypingprotocol)": [[66, "pybrops.breed.prot.gt.GenotypingProtocol.check_is_GenotypingProtocol"]], "pybrops.breed.prot.mate": [[67, "module-pybrops.breed.prot.mate"]], "pybrops.breed.prot.mate.fourwaycross": [[68, "module-pybrops.breed.prot.mate.FourWayCross"]], "fourwaycross (class in pybrops.breed.prot.mate.fourwaycross)": [[69, "pybrops.breed.prot.mate.FourWayCross.FourWayCross"]], "family_counter (pybrops.breed.prot.mate.fourwaycross.fourwaycross property)": [[69, "pybrops.breed.prot.mate.FourWayCross.FourWayCross.family_counter"]], "mate() (pybrops.breed.prot.mate.fourwaycross.fourwaycross method)": [[69, "pybrops.breed.prot.mate.FourWayCross.FourWayCross.mate"]], "nparent (pybrops.breed.prot.mate.fourwaycross.fourwaycross property)": [[69, "pybrops.breed.prot.mate.FourWayCross.FourWayCross.nparent"]], "progeny_counter (pybrops.breed.prot.mate.fourwaycross.fourwaycross property)": [[69, "pybrops.breed.prot.mate.FourWayCross.FourWayCross.progeny_counter"]], "rng (pybrops.breed.prot.mate.fourwaycross.fourwaycross property)": [[69, "pybrops.breed.prot.mate.FourWayCross.FourWayCross.rng"]], "check_is_fourwaycross() (in module pybrops.breed.prot.mate.fourwaycross)": [[70, "pybrops.breed.prot.mate.FourWayCross.check_is_FourWayCross"]], "pybrops.breed.prot.mate.fourwaydhcross": [[71, "module-pybrops.breed.prot.mate.FourWayDHCross"]], "fourwaydhcross (class in pybrops.breed.prot.mate.fourwaydhcross)": [[72, "pybrops.breed.prot.mate.FourWayDHCross.FourWayDHCross"]], "family_counter (pybrops.breed.prot.mate.fourwaydhcross.fourwaydhcross property)": [[72, "pybrops.breed.prot.mate.FourWayDHCross.FourWayDHCross.family_counter"]], "mate() (pybrops.breed.prot.mate.fourwaydhcross.fourwaydhcross method)": [[72, "pybrops.breed.prot.mate.FourWayDHCross.FourWayDHCross.mate"]], "nparent (pybrops.breed.prot.mate.fourwaydhcross.fourwaydhcross property)": [[72, "pybrops.breed.prot.mate.FourWayDHCross.FourWayDHCross.nparent"]], "progeny_counter (pybrops.breed.prot.mate.fourwaydhcross.fourwaydhcross property)": [[72, "pybrops.breed.prot.mate.FourWayDHCross.FourWayDHCross.progeny_counter"]], "rng (pybrops.breed.prot.mate.fourwaydhcross.fourwaydhcross property)": [[72, "pybrops.breed.prot.mate.FourWayDHCross.FourWayDHCross.rng"]], "check_is_fourwaydhcross() (in module pybrops.breed.prot.mate.fourwaydhcross)": [[73, "pybrops.breed.prot.mate.FourWayDHCross.check_is_FourWayDHCross"]], "pybrops.breed.prot.mate.matingprotocol": [[74, "module-pybrops.breed.prot.mate.MatingProtocol"]], "matingprotocol (class in pybrops.breed.prot.mate.matingprotocol)": [[75, "pybrops.breed.prot.mate.MatingProtocol.MatingProtocol"]], "mate() (pybrops.breed.prot.mate.matingprotocol.matingprotocol method)": [[75, "pybrops.breed.prot.mate.MatingProtocol.MatingProtocol.mate"]], "nparent (pybrops.breed.prot.mate.matingprotocol.matingprotocol property)": [[75, "pybrops.breed.prot.mate.MatingProtocol.MatingProtocol.nparent"]], "check_is_matingprotocol() (in module pybrops.breed.prot.mate.matingprotocol)": [[76, "pybrops.breed.prot.mate.MatingProtocol.check_is_MatingProtocol"]], "pybrops.breed.prot.mate.selfcross": [[77, "module-pybrops.breed.prot.mate.SelfCross"]], "selfcross (class in pybrops.breed.prot.mate.selfcross)": [[78, "pybrops.breed.prot.mate.SelfCross.SelfCross"]], "family_counter (pybrops.breed.prot.mate.selfcross.selfcross property)": [[78, "pybrops.breed.prot.mate.SelfCross.SelfCross.family_counter"]], "mate() (pybrops.breed.prot.mate.selfcross.selfcross method)": [[78, "pybrops.breed.prot.mate.SelfCross.SelfCross.mate"]], "nparent (pybrops.breed.prot.mate.selfcross.selfcross property)": [[78, "pybrops.breed.prot.mate.SelfCross.SelfCross.nparent"]], "progeny_counter (pybrops.breed.prot.mate.selfcross.selfcross property)": [[78, "pybrops.breed.prot.mate.SelfCross.SelfCross.progeny_counter"]], "rng (pybrops.breed.prot.mate.selfcross.selfcross property)": [[78, "pybrops.breed.prot.mate.SelfCross.SelfCross.rng"]], "check_is_selfcross() (in module pybrops.breed.prot.mate.selfcross)": [[79, "pybrops.breed.prot.mate.SelfCross.check_is_SelfCross"]], "pybrops.breed.prot.mate.threewaycross": [[80, "module-pybrops.breed.prot.mate.ThreeWayCross"]], "threewaycross (class in pybrops.breed.prot.mate.threewaycross)": [[81, "pybrops.breed.prot.mate.ThreeWayCross.ThreeWayCross"]], "family_counter (pybrops.breed.prot.mate.threewaycross.threewaycross property)": [[81, "pybrops.breed.prot.mate.ThreeWayCross.ThreeWayCross.family_counter"]], "mate() (pybrops.breed.prot.mate.threewaycross.threewaycross method)": [[81, "pybrops.breed.prot.mate.ThreeWayCross.ThreeWayCross.mate"]], "nparent (pybrops.breed.prot.mate.threewaycross.threewaycross property)": [[81, "pybrops.breed.prot.mate.ThreeWayCross.ThreeWayCross.nparent"]], "progeny_counter (pybrops.breed.prot.mate.threewaycross.threewaycross property)": [[81, "pybrops.breed.prot.mate.ThreeWayCross.ThreeWayCross.progeny_counter"]], "rng (pybrops.breed.prot.mate.threewaycross.threewaycross property)": [[81, "pybrops.breed.prot.mate.ThreeWayCross.ThreeWayCross.rng"]], "check_is_threewaycross() (in module pybrops.breed.prot.mate.threewaycross)": [[82, "pybrops.breed.prot.mate.ThreeWayCross.check_is_ThreeWayCross"]], "pybrops.breed.prot.mate.threewaydhcross": [[83, "module-pybrops.breed.prot.mate.ThreeWayDHCross"]], "threewaydhcross (class in pybrops.breed.prot.mate.threewaydhcross)": [[84, "pybrops.breed.prot.mate.ThreeWayDHCross.ThreeWayDHCross"]], "family_counter (pybrops.breed.prot.mate.threewaydhcross.threewaydhcross property)": [[84, "pybrops.breed.prot.mate.ThreeWayDHCross.ThreeWayDHCross.family_counter"]], "mate() (pybrops.breed.prot.mate.threewaydhcross.threewaydhcross method)": [[84, "pybrops.breed.prot.mate.ThreeWayDHCross.ThreeWayDHCross.mate"]], "nparent (pybrops.breed.prot.mate.threewaydhcross.threewaydhcross property)": [[84, "pybrops.breed.prot.mate.ThreeWayDHCross.ThreeWayDHCross.nparent"]], "progeny_counter (pybrops.breed.prot.mate.threewaydhcross.threewaydhcross property)": [[84, "pybrops.breed.prot.mate.ThreeWayDHCross.ThreeWayDHCross.progeny_counter"]], "rng (pybrops.breed.prot.mate.threewaydhcross.threewaydhcross property)": [[84, "pybrops.breed.prot.mate.ThreeWayDHCross.ThreeWayDHCross.rng"]], "check_is_threewaydhcross() (in module pybrops.breed.prot.mate.threewaydhcross)": [[85, "pybrops.breed.prot.mate.ThreeWayDHCross.check_is_ThreeWayDHCross"]], "pybrops.breed.prot.mate.twowaycross": [[86, "module-pybrops.breed.prot.mate.TwoWayCross"]], "twowaycross (class in pybrops.breed.prot.mate.twowaycross)": [[87, "pybrops.breed.prot.mate.TwoWayCross.TwoWayCross"]], "family_counter (pybrops.breed.prot.mate.twowaycross.twowaycross property)": [[87, "pybrops.breed.prot.mate.TwoWayCross.TwoWayCross.family_counter"]], "mate() (pybrops.breed.prot.mate.twowaycross.twowaycross method)": [[87, "pybrops.breed.prot.mate.TwoWayCross.TwoWayCross.mate"]], "nparent (pybrops.breed.prot.mate.twowaycross.twowaycross property)": [[87, "pybrops.breed.prot.mate.TwoWayCross.TwoWayCross.nparent"]], "progeny_counter (pybrops.breed.prot.mate.twowaycross.twowaycross property)": [[87, "pybrops.breed.prot.mate.TwoWayCross.TwoWayCross.progeny_counter"]], "rng (pybrops.breed.prot.mate.twowaycross.twowaycross property)": [[87, "pybrops.breed.prot.mate.TwoWayCross.TwoWayCross.rng"]], "check_is_twowaycross() (in module pybrops.breed.prot.mate.twowaycross)": [[88, "pybrops.breed.prot.mate.TwoWayCross.check_is_TwoWayCross"]], "pybrops.breed.prot.mate.twowaydhcross": [[89, "module-pybrops.breed.prot.mate.TwoWayDHCross"]], "twowaydhcross (class in pybrops.breed.prot.mate.twowaydhcross)": [[90, "pybrops.breed.prot.mate.TwoWayDHCross.TwoWayDHCross"]], "family_counter (pybrops.breed.prot.mate.twowaydhcross.twowaydhcross property)": [[90, "pybrops.breed.prot.mate.TwoWayDHCross.TwoWayDHCross.family_counter"]], "mate() (pybrops.breed.prot.mate.twowaydhcross.twowaydhcross method)": [[90, "pybrops.breed.prot.mate.TwoWayDHCross.TwoWayDHCross.mate"]], "nparent (pybrops.breed.prot.mate.twowaydhcross.twowaydhcross property)": [[90, "pybrops.breed.prot.mate.TwoWayDHCross.TwoWayDHCross.nparent"]], "progeny_counter (pybrops.breed.prot.mate.twowaydhcross.twowaydhcross property)": [[90, "pybrops.breed.prot.mate.TwoWayDHCross.TwoWayDHCross.progeny_counter"]], "rng (pybrops.breed.prot.mate.twowaydhcross.twowaydhcross property)": [[90, "pybrops.breed.prot.mate.TwoWayDHCross.TwoWayDHCross.rng"]], "check_is_twowaydhcross() (in module pybrops.breed.prot.mate.twowaydhcross)": [[91, "pybrops.breed.prot.mate.TwoWayDHCross.check_is_TwoWayDHCross"]], "pybrops.breed.prot.mate.util": [[92, "module-pybrops.breed.prot.mate.util"]], "mat_dh() (in module pybrops.breed.prot.mate.util)": [[93, "pybrops.breed.prot.mate.util.mat_dh"]], "mat_mate() (in module pybrops.breed.prot.mate.util)": [[94, "pybrops.breed.prot.mate.util.mat_mate"]], "mat_meiosis() (in module pybrops.breed.prot.mate.util)": [[95, "pybrops.breed.prot.mate.util.mat_meiosis"]], "pybrops.breed.prot.pt": [[96, "module-pybrops.breed.prot.pt"]], "pybrops.breed.prot.pt.g_e_phenotyping": [[97, "module-pybrops.breed.prot.pt.G_E_Phenotyping"]], "g_e_phenotyping (class in pybrops.breed.prot.pt.g_e_phenotyping)": [[98, "pybrops.breed.prot.pt.G_E_Phenotyping.G_E_Phenotyping"]], "gpmod (pybrops.breed.prot.pt.g_e_phenotyping.g_e_phenotyping property)": [[98, "pybrops.breed.prot.pt.G_E_Phenotyping.G_E_Phenotyping.gpmod"]], "nenv (pybrops.breed.prot.pt.g_e_phenotyping.g_e_phenotyping property)": [[98, "pybrops.breed.prot.pt.G_E_Phenotyping.G_E_Phenotyping.nenv"]], "nrep (pybrops.breed.prot.pt.g_e_phenotyping.g_e_phenotyping property)": [[98, "pybrops.breed.prot.pt.G_E_Phenotyping.G_E_Phenotyping.nrep"]], "phenotype() (pybrops.breed.prot.pt.g_e_phenotyping.g_e_phenotyping method)": [[98, "pybrops.breed.prot.pt.G_E_Phenotyping.G_E_Phenotyping.phenotype"]], "rng (pybrops.breed.prot.pt.g_e_phenotyping.g_e_phenotyping property)": [[98, "pybrops.breed.prot.pt.G_E_Phenotyping.G_E_Phenotyping.rng"]], "set_h2() (pybrops.breed.prot.pt.g_e_phenotyping.g_e_phenotyping method)": [[98, "pybrops.breed.prot.pt.G_E_Phenotyping.G_E_Phenotyping.set_H2"], [98, "pybrops.breed.prot.pt.G_E_Phenotyping.G_E_Phenotyping.set_h2"]], "var_env (pybrops.breed.prot.pt.g_e_phenotyping.g_e_phenotyping property)": [[98, "pybrops.breed.prot.pt.G_E_Phenotyping.G_E_Phenotyping.var_env"]], "var_err (pybrops.breed.prot.pt.g_e_phenotyping.g_e_phenotyping property)": [[98, "pybrops.breed.prot.pt.G_E_Phenotyping.G_E_Phenotyping.var_err"]], "var_rep (pybrops.breed.prot.pt.g_e_phenotyping.g_e_phenotyping property)": [[98, "pybrops.breed.prot.pt.G_E_Phenotyping.G_E_Phenotyping.var_rep"]], "pybrops.breed.prot.pt.phenotypingprotocol": [[99, "module-pybrops.breed.prot.pt.PhenotypingProtocol"]], "phenotypingprotocol (class in pybrops.breed.prot.pt.phenotypingprotocol)": [[100, "pybrops.breed.prot.pt.PhenotypingProtocol.PhenotypingProtocol"]], "gpmod (pybrops.breed.prot.pt.phenotypingprotocol.phenotypingprotocol property)": [[100, "pybrops.breed.prot.pt.PhenotypingProtocol.PhenotypingProtocol.gpmod"]], "phenotype() (pybrops.breed.prot.pt.phenotypingprotocol.phenotypingprotocol method)": [[100, "pybrops.breed.prot.pt.PhenotypingProtocol.PhenotypingProtocol.phenotype"]], "set_h2() (pybrops.breed.prot.pt.phenotypingprotocol.phenotypingprotocol method)": [[100, "pybrops.breed.prot.pt.PhenotypingProtocol.PhenotypingProtocol.set_H2"], [100, "pybrops.breed.prot.pt.PhenotypingProtocol.PhenotypingProtocol.set_h2"]], "var_err (pybrops.breed.prot.pt.phenotypingprotocol.phenotypingprotocol property)": [[100, "pybrops.breed.prot.pt.PhenotypingProtocol.PhenotypingProtocol.var_err"]], "check_is_phenotypingprotocol() (in module pybrops.breed.prot.pt.phenotypingprotocol)": [[101, "pybrops.breed.prot.pt.PhenotypingProtocol.check_is_PhenotypingProtocol"]], "pybrops.breed.prot.pt.truephenotyping": [[102, "module-pybrops.breed.prot.pt.TruePhenotyping"]], "truephenotyping (class in pybrops.breed.prot.pt.truephenotyping)": [[103, "pybrops.breed.prot.pt.TruePhenotyping.TruePhenotyping"]], "gpmod (pybrops.breed.prot.pt.truephenotyping.truephenotyping property)": [[103, "pybrops.breed.prot.pt.TruePhenotyping.TruePhenotyping.gpmod"]], "phenotype() (pybrops.breed.prot.pt.truephenotyping.truephenotyping method)": [[103, "pybrops.breed.prot.pt.TruePhenotyping.TruePhenotyping.phenotype"]], "set_h2() (pybrops.breed.prot.pt.truephenotyping.truephenotyping method)": [[103, "pybrops.breed.prot.pt.TruePhenotyping.TruePhenotyping.set_H2"], [103, "pybrops.breed.prot.pt.TruePhenotyping.TruePhenotyping.set_h2"]], "var_err (pybrops.breed.prot.pt.truephenotyping.truephenotyping property)": [[103, "pybrops.breed.prot.pt.TruePhenotyping.TruePhenotyping.var_err"]], "pybrops.breed.prot.sel": [[104, "module-pybrops.breed.prot.sel"]], "pybrops.breed.prot.sel.binarymateselectionprotocol": [[105, "module-pybrops.breed.prot.sel.BinaryMateSelectionProtocol"]], "binarymateselectionprotocol (class in pybrops.breed.prot.sel.binarymateselectionprotocol)": [[106, "pybrops.breed.prot.sel.BinaryMateSelectionProtocol.BinaryMateSelectionProtocol"]], "eqcv_trans (pybrops.breed.prot.sel.binarymateselectionprotocol.binarymateselectionprotocol property)": [[106, "pybrops.breed.prot.sel.BinaryMateSelectionProtocol.BinaryMateSelectionProtocol.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.binarymateselectionprotocol.binarymateselectionprotocol property)": [[106, "pybrops.breed.prot.sel.BinaryMateSelectionProtocol.BinaryMateSelectionProtocol.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.binarymateselectionprotocol.binarymateselectionprotocol property)": [[106, "pybrops.breed.prot.sel.BinaryMateSelectionProtocol.BinaryMateSelectionProtocol.eqcv_wt"]], "ineqcv_trans (pybrops.breed.prot.sel.binarymateselectionprotocol.binarymateselectionprotocol property)": [[106, "pybrops.breed.prot.sel.BinaryMateSelectionProtocol.BinaryMateSelectionProtocol.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.binarymateselectionprotocol.binarymateselectionprotocol property)": [[106, "pybrops.breed.prot.sel.BinaryMateSelectionProtocol.BinaryMateSelectionProtocol.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.binarymateselectionprotocol.binarymateselectionprotocol property)": [[106, "pybrops.breed.prot.sel.BinaryMateSelectionProtocol.BinaryMateSelectionProtocol.ineqcv_wt"]], "moalgo (pybrops.breed.prot.sel.binarymateselectionprotocol.binarymateselectionprotocol property)": [[106, "pybrops.breed.prot.sel.BinaryMateSelectionProtocol.BinaryMateSelectionProtocol.moalgo"]], "mosolve() (pybrops.breed.prot.sel.binarymateselectionprotocol.binarymateselectionprotocol method)": [[106, "pybrops.breed.prot.sel.BinaryMateSelectionProtocol.BinaryMateSelectionProtocol.mosolve"]], "ncross (pybrops.breed.prot.sel.binarymateselectionprotocol.binarymateselectionprotocol property)": [[106, "pybrops.breed.prot.sel.BinaryMateSelectionProtocol.BinaryMateSelectionProtocol.ncross"]], "ndset_trans (pybrops.breed.prot.sel.binarymateselectionprotocol.binarymateselectionprotocol property)": [[106, "pybrops.breed.prot.sel.BinaryMateSelectionProtocol.BinaryMateSelectionProtocol.ndset_trans"]], "ndset_trans_kwargs (pybrops.breed.prot.sel.binarymateselectionprotocol.binarymateselectionprotocol property)": [[106, "pybrops.breed.prot.sel.BinaryMateSelectionProtocol.BinaryMateSelectionProtocol.ndset_trans_kwargs"]], "ndset_wt (pybrops.breed.prot.sel.binarymateselectionprotocol.binarymateselectionprotocol property)": [[106, "pybrops.breed.prot.sel.BinaryMateSelectionProtocol.BinaryMateSelectionProtocol.ndset_wt"]], "neqcv (pybrops.breed.prot.sel.binarymateselectionprotocol.binarymateselectionprotocol property)": [[106, "pybrops.breed.prot.sel.BinaryMateSelectionProtocol.BinaryMateSelectionProtocol.neqcv"]], "nineqcv (pybrops.breed.prot.sel.binarymateselectionprotocol.binarymateselectionprotocol property)": [[106, "pybrops.breed.prot.sel.BinaryMateSelectionProtocol.BinaryMateSelectionProtocol.nineqcv"]], "nmating (pybrops.breed.prot.sel.binarymateselectionprotocol.binarymateselectionprotocol property)": [[106, "pybrops.breed.prot.sel.BinaryMateSelectionProtocol.BinaryMateSelectionProtocol.nmating"]], "nobj (pybrops.breed.prot.sel.binarymateselectionprotocol.binarymateselectionprotocol property)": [[106, "pybrops.breed.prot.sel.BinaryMateSelectionProtocol.BinaryMateSelectionProtocol.nobj"]], "nparent (pybrops.breed.prot.sel.binarymateselectionprotocol.binarymateselectionprotocol property)": [[106, "pybrops.breed.prot.sel.BinaryMateSelectionProtocol.BinaryMateSelectionProtocol.nparent"]], "nprogeny (pybrops.breed.prot.sel.binarymateselectionprotocol.binarymateselectionprotocol property)": [[106, "pybrops.breed.prot.sel.BinaryMateSelectionProtocol.BinaryMateSelectionProtocol.nprogeny"]], "nselindiv (pybrops.breed.prot.sel.binarymateselectionprotocol.binarymateselectionprotocol property)": [[106, "pybrops.breed.prot.sel.BinaryMateSelectionProtocol.BinaryMateSelectionProtocol.nselindiv"]], "obj_trans (pybrops.breed.prot.sel.binarymateselectionprotocol.binarymateselectionprotocol property)": [[106, "pybrops.breed.prot.sel.BinaryMateSelectionProtocol.BinaryMateSelectionProtocol.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.binarymateselectionprotocol.binarymateselectionprotocol property)": [[106, "pybrops.breed.prot.sel.BinaryMateSelectionProtocol.BinaryMateSelectionProtocol.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.binarymateselectionprotocol.binarymateselectionprotocol property)": [[106, "pybrops.breed.prot.sel.BinaryMateSelectionProtocol.BinaryMateSelectionProtocol.obj_wt"]], "problem() (pybrops.breed.prot.sel.binarymateselectionprotocol.binarymateselectionprotocol method)": [[106, "pybrops.breed.prot.sel.BinaryMateSelectionProtocol.BinaryMateSelectionProtocol.problem"]], "rng (pybrops.breed.prot.sel.binarymateselectionprotocol.binarymateselectionprotocol property)": [[106, "pybrops.breed.prot.sel.BinaryMateSelectionProtocol.BinaryMateSelectionProtocol.rng"]], "select() (pybrops.breed.prot.sel.binarymateselectionprotocol.binarymateselectionprotocol method)": [[106, "pybrops.breed.prot.sel.BinaryMateSelectionProtocol.BinaryMateSelectionProtocol.select"]], "soalgo (pybrops.breed.prot.sel.binarymateselectionprotocol.binarymateselectionprotocol property)": [[106, "pybrops.breed.prot.sel.BinaryMateSelectionProtocol.BinaryMateSelectionProtocol.soalgo"]], "sosolve() (pybrops.breed.prot.sel.binarymateselectionprotocol.binarymateselectionprotocol method)": [[106, "pybrops.breed.prot.sel.BinaryMateSelectionProtocol.BinaryMateSelectionProtocol.sosolve"]], "check_is_binarymateselectionprotocol() (in module pybrops.breed.prot.sel.binarymateselectionprotocol)": [[107, "pybrops.breed.prot.sel.BinaryMateSelectionProtocol.check_is_BinaryMateSelectionProtocol"]], "pybrops.breed.prot.sel.binaryselectionprotocol": [[108, "module-pybrops.breed.prot.sel.BinarySelectionProtocol"]], "binaryselectionprotocol (class in pybrops.breed.prot.sel.binaryselectionprotocol)": [[109, "pybrops.breed.prot.sel.BinarySelectionProtocol.BinarySelectionProtocol"]], "eqcv_trans (pybrops.breed.prot.sel.binaryselectionprotocol.binaryselectionprotocol property)": [[109, "pybrops.breed.prot.sel.BinarySelectionProtocol.BinarySelectionProtocol.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.binaryselectionprotocol.binaryselectionprotocol property)": [[109, "pybrops.breed.prot.sel.BinarySelectionProtocol.BinarySelectionProtocol.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.binaryselectionprotocol.binaryselectionprotocol property)": [[109, "pybrops.breed.prot.sel.BinarySelectionProtocol.BinarySelectionProtocol.eqcv_wt"]], "ineqcv_trans (pybrops.breed.prot.sel.binaryselectionprotocol.binaryselectionprotocol property)": [[109, "pybrops.breed.prot.sel.BinarySelectionProtocol.BinarySelectionProtocol.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.binaryselectionprotocol.binaryselectionprotocol property)": [[109, "pybrops.breed.prot.sel.BinarySelectionProtocol.BinarySelectionProtocol.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.binaryselectionprotocol.binaryselectionprotocol property)": [[109, "pybrops.breed.prot.sel.BinarySelectionProtocol.BinarySelectionProtocol.ineqcv_wt"]], "moalgo (pybrops.breed.prot.sel.binaryselectionprotocol.binaryselectionprotocol property)": [[109, "pybrops.breed.prot.sel.BinarySelectionProtocol.BinarySelectionProtocol.moalgo"]], "mosolve() (pybrops.breed.prot.sel.binaryselectionprotocol.binaryselectionprotocol method)": [[109, "pybrops.breed.prot.sel.BinarySelectionProtocol.BinarySelectionProtocol.mosolve"]], "ncross (pybrops.breed.prot.sel.binaryselectionprotocol.binaryselectionprotocol property)": [[109, "pybrops.breed.prot.sel.BinarySelectionProtocol.BinarySelectionProtocol.ncross"]], "ndset_trans (pybrops.breed.prot.sel.binaryselectionprotocol.binaryselectionprotocol property)": [[109, "pybrops.breed.prot.sel.BinarySelectionProtocol.BinarySelectionProtocol.ndset_trans"]], "ndset_trans_kwargs (pybrops.breed.prot.sel.binaryselectionprotocol.binaryselectionprotocol property)": [[109, "pybrops.breed.prot.sel.BinarySelectionProtocol.BinarySelectionProtocol.ndset_trans_kwargs"]], "ndset_wt (pybrops.breed.prot.sel.binaryselectionprotocol.binaryselectionprotocol property)": [[109, "pybrops.breed.prot.sel.BinarySelectionProtocol.BinarySelectionProtocol.ndset_wt"]], "neqcv (pybrops.breed.prot.sel.binaryselectionprotocol.binaryselectionprotocol property)": [[109, "pybrops.breed.prot.sel.BinarySelectionProtocol.BinarySelectionProtocol.neqcv"]], "nineqcv (pybrops.breed.prot.sel.binaryselectionprotocol.binaryselectionprotocol property)": [[109, "pybrops.breed.prot.sel.BinarySelectionProtocol.BinarySelectionProtocol.nineqcv"]], "nmating (pybrops.breed.prot.sel.binaryselectionprotocol.binaryselectionprotocol property)": [[109, "pybrops.breed.prot.sel.BinarySelectionProtocol.BinarySelectionProtocol.nmating"]], "nobj (pybrops.breed.prot.sel.binaryselectionprotocol.binaryselectionprotocol property)": [[109, "pybrops.breed.prot.sel.BinarySelectionProtocol.BinarySelectionProtocol.nobj"]], "nparent (pybrops.breed.prot.sel.binaryselectionprotocol.binaryselectionprotocol property)": [[109, "pybrops.breed.prot.sel.BinarySelectionProtocol.BinarySelectionProtocol.nparent"]], "nprogeny (pybrops.breed.prot.sel.binaryselectionprotocol.binaryselectionprotocol property)": [[109, "pybrops.breed.prot.sel.BinarySelectionProtocol.BinarySelectionProtocol.nprogeny"]], "nselindiv (pybrops.breed.prot.sel.binaryselectionprotocol.binaryselectionprotocol property)": [[109, "pybrops.breed.prot.sel.BinarySelectionProtocol.BinarySelectionProtocol.nselindiv"]], "obj_trans (pybrops.breed.prot.sel.binaryselectionprotocol.binaryselectionprotocol property)": [[109, "pybrops.breed.prot.sel.BinarySelectionProtocol.BinarySelectionProtocol.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.binaryselectionprotocol.binaryselectionprotocol property)": [[109, "pybrops.breed.prot.sel.BinarySelectionProtocol.BinarySelectionProtocol.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.binaryselectionprotocol.binaryselectionprotocol property)": [[109, "pybrops.breed.prot.sel.BinarySelectionProtocol.BinarySelectionProtocol.obj_wt"]], "problem() (pybrops.breed.prot.sel.binaryselectionprotocol.binaryselectionprotocol method)": [[109, "pybrops.breed.prot.sel.BinarySelectionProtocol.BinarySelectionProtocol.problem"]], "rng (pybrops.breed.prot.sel.binaryselectionprotocol.binaryselectionprotocol property)": [[109, "pybrops.breed.prot.sel.BinarySelectionProtocol.BinarySelectionProtocol.rng"]], "select() (pybrops.breed.prot.sel.binaryselectionprotocol.binaryselectionprotocol method)": [[109, "pybrops.breed.prot.sel.BinarySelectionProtocol.BinarySelectionProtocol.select"]], "soalgo (pybrops.breed.prot.sel.binaryselectionprotocol.binaryselectionprotocol property)": [[109, "pybrops.breed.prot.sel.BinarySelectionProtocol.BinarySelectionProtocol.soalgo"]], "sosolve() (pybrops.breed.prot.sel.binaryselectionprotocol.binaryselectionprotocol method)": [[109, "pybrops.breed.prot.sel.BinarySelectionProtocol.BinarySelectionProtocol.sosolve"]], "check_is_binaryselectionprotocol() (in module pybrops.breed.prot.sel.binaryselectionprotocol)": [[110, "pybrops.breed.prot.sel.BinarySelectionProtocol.check_is_BinarySelectionProtocol"]], "pybrops.breed.prot.sel.estimatedbreedingvalueselection": [[111, "module-pybrops.breed.prot.sel.EstimatedBreedingValueSelection"]], "estimatedbreedingvaluebinaryselection (class in pybrops.breed.prot.sel.estimatedbreedingvalueselection)": [[112, "pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueBinarySelection"]], "eqcv_trans (pybrops.breed.prot.sel.estimatedbreedingvalueselection.estimatedbreedingvaluebinaryselection property)": [[112, "pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueBinarySelection.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.estimatedbreedingvalueselection.estimatedbreedingvaluebinaryselection property)": [[112, "pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueBinarySelection.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.estimatedbreedingvalueselection.estimatedbreedingvaluebinaryselection property)": [[112, "pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueBinarySelection.eqcv_wt"]], "ineqcv_trans (pybrops.breed.prot.sel.estimatedbreedingvalueselection.estimatedbreedingvaluebinaryselection property)": [[112, "pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueBinarySelection.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.estimatedbreedingvalueselection.estimatedbreedingvaluebinaryselection property)": [[112, "pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueBinarySelection.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.estimatedbreedingvalueselection.estimatedbreedingvaluebinaryselection property)": [[112, "pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueBinarySelection.ineqcv_wt"]], "moalgo (pybrops.breed.prot.sel.estimatedbreedingvalueselection.estimatedbreedingvaluebinaryselection property)": [[112, "pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueBinarySelection.moalgo"]], "mosolve() (pybrops.breed.prot.sel.estimatedbreedingvalueselection.estimatedbreedingvaluebinaryselection method)": [[112, "pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueBinarySelection.mosolve"]], "ncross (pybrops.breed.prot.sel.estimatedbreedingvalueselection.estimatedbreedingvaluebinaryselection property)": [[112, "pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueBinarySelection.ncross"]], "ndset_trans (pybrops.breed.prot.sel.estimatedbreedingvalueselection.estimatedbreedingvaluebinaryselection property)": [[112, "pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueBinarySelection.ndset_trans"]], "ndset_trans_kwargs (pybrops.breed.prot.sel.estimatedbreedingvalueselection.estimatedbreedingvaluebinaryselection property)": [[112, "pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueBinarySelection.ndset_trans_kwargs"]], "ndset_wt (pybrops.breed.prot.sel.estimatedbreedingvalueselection.estimatedbreedingvaluebinaryselection property)": [[112, "pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueBinarySelection.ndset_wt"]], "neqcv (pybrops.breed.prot.sel.estimatedbreedingvalueselection.estimatedbreedingvaluebinaryselection property)": [[112, "pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueBinarySelection.neqcv"]], "nineqcv (pybrops.breed.prot.sel.estimatedbreedingvalueselection.estimatedbreedingvaluebinaryselection property)": [[112, "pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueBinarySelection.nineqcv"]], "nmating (pybrops.breed.prot.sel.estimatedbreedingvalueselection.estimatedbreedingvaluebinaryselection property)": [[112, "pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueBinarySelection.nmating"]], "nobj (pybrops.breed.prot.sel.estimatedbreedingvalueselection.estimatedbreedingvaluebinaryselection property)": [[112, "pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueBinarySelection.nobj"]], "nparent (pybrops.breed.prot.sel.estimatedbreedingvalueselection.estimatedbreedingvaluebinaryselection property)": [[112, "pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueBinarySelection.nparent"]], "nprogeny (pybrops.breed.prot.sel.estimatedbreedingvalueselection.estimatedbreedingvaluebinaryselection property)": [[112, "pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueBinarySelection.nprogeny"]], "nselindiv (pybrops.breed.prot.sel.estimatedbreedingvalueselection.estimatedbreedingvaluebinaryselection property)": [[112, "pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueBinarySelection.nselindiv"]], "ntrait (pybrops.breed.prot.sel.estimatedbreedingvalueselection.estimatedbreedingvaluebinaryselection property)": [[112, "pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueBinarySelection.ntrait"]], "obj_trans (pybrops.breed.prot.sel.estimatedbreedingvalueselection.estimatedbreedingvaluebinaryselection property)": [[112, "pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueBinarySelection.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.estimatedbreedingvalueselection.estimatedbreedingvaluebinaryselection property)": [[112, "pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueBinarySelection.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.estimatedbreedingvalueselection.estimatedbreedingvaluebinaryselection property)": [[112, "pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueBinarySelection.obj_wt"]], "problem() (pybrops.breed.prot.sel.estimatedbreedingvalueselection.estimatedbreedingvaluebinaryselection method)": [[112, "pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueBinarySelection.problem"]], "rng (pybrops.breed.prot.sel.estimatedbreedingvalueselection.estimatedbreedingvaluebinaryselection property)": [[112, "pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueBinarySelection.rng"]], "select() (pybrops.breed.prot.sel.estimatedbreedingvalueselection.estimatedbreedingvaluebinaryselection method)": [[112, "pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueBinarySelection.select"]], "soalgo (pybrops.breed.prot.sel.estimatedbreedingvalueselection.estimatedbreedingvaluebinaryselection property)": [[112, "pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueBinarySelection.soalgo"]], "sosolve() (pybrops.breed.prot.sel.estimatedbreedingvalueselection.estimatedbreedingvaluebinaryselection method)": [[112, "pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueBinarySelection.sosolve"]], "unscale (pybrops.breed.prot.sel.estimatedbreedingvalueselection.estimatedbreedingvaluebinaryselection property)": [[112, "pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueBinarySelection.unscale"]], "estimatedbreedingvalueintegerselection (class in pybrops.breed.prot.sel.estimatedbreedingvalueselection)": [[113, "pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueIntegerSelection"]], "eqcv_trans (pybrops.breed.prot.sel.estimatedbreedingvalueselection.estimatedbreedingvalueintegerselection property)": [[113, "pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueIntegerSelection.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.estimatedbreedingvalueselection.estimatedbreedingvalueintegerselection property)": [[113, "pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueIntegerSelection.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.estimatedbreedingvalueselection.estimatedbreedingvalueintegerselection property)": [[113, "pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueIntegerSelection.eqcv_wt"]], "ineqcv_trans (pybrops.breed.prot.sel.estimatedbreedingvalueselection.estimatedbreedingvalueintegerselection property)": [[113, "pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueIntegerSelection.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.estimatedbreedingvalueselection.estimatedbreedingvalueintegerselection property)": [[113, "pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueIntegerSelection.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.estimatedbreedingvalueselection.estimatedbreedingvalueintegerselection property)": [[113, "pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueIntegerSelection.ineqcv_wt"]], "moalgo (pybrops.breed.prot.sel.estimatedbreedingvalueselection.estimatedbreedingvalueintegerselection property)": [[113, "pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueIntegerSelection.moalgo"]], "mosolve() (pybrops.breed.prot.sel.estimatedbreedingvalueselection.estimatedbreedingvalueintegerselection method)": [[113, "pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueIntegerSelection.mosolve"]], "ncross (pybrops.breed.prot.sel.estimatedbreedingvalueselection.estimatedbreedingvalueintegerselection property)": [[113, "pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueIntegerSelection.ncross"]], "ndset_trans (pybrops.breed.prot.sel.estimatedbreedingvalueselection.estimatedbreedingvalueintegerselection property)": [[113, "pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueIntegerSelection.ndset_trans"]], "ndset_trans_kwargs (pybrops.breed.prot.sel.estimatedbreedingvalueselection.estimatedbreedingvalueintegerselection property)": [[113, "pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueIntegerSelection.ndset_trans_kwargs"]], "ndset_wt (pybrops.breed.prot.sel.estimatedbreedingvalueselection.estimatedbreedingvalueintegerselection property)": [[113, "pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueIntegerSelection.ndset_wt"]], "neqcv (pybrops.breed.prot.sel.estimatedbreedingvalueselection.estimatedbreedingvalueintegerselection property)": [[113, "pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueIntegerSelection.neqcv"]], "nineqcv (pybrops.breed.prot.sel.estimatedbreedingvalueselection.estimatedbreedingvalueintegerselection property)": [[113, "pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueIntegerSelection.nineqcv"]], "nmating (pybrops.breed.prot.sel.estimatedbreedingvalueselection.estimatedbreedingvalueintegerselection property)": [[113, "pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueIntegerSelection.nmating"]], "nobj (pybrops.breed.prot.sel.estimatedbreedingvalueselection.estimatedbreedingvalueintegerselection property)": [[113, "pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueIntegerSelection.nobj"]], "nparent (pybrops.breed.prot.sel.estimatedbreedingvalueselection.estimatedbreedingvalueintegerselection property)": [[113, "pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueIntegerSelection.nparent"]], "nprogeny (pybrops.breed.prot.sel.estimatedbreedingvalueselection.estimatedbreedingvalueintegerselection property)": [[113, "pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueIntegerSelection.nprogeny"]], "nselindiv (pybrops.breed.prot.sel.estimatedbreedingvalueselection.estimatedbreedingvalueintegerselection property)": [[113, "pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueIntegerSelection.nselindiv"]], "ntrait (pybrops.breed.prot.sel.estimatedbreedingvalueselection.estimatedbreedingvalueintegerselection property)": [[113, "pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueIntegerSelection.ntrait"]], "obj_trans (pybrops.breed.prot.sel.estimatedbreedingvalueselection.estimatedbreedingvalueintegerselection property)": [[113, "pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueIntegerSelection.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.estimatedbreedingvalueselection.estimatedbreedingvalueintegerselection property)": [[113, "pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueIntegerSelection.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.estimatedbreedingvalueselection.estimatedbreedingvalueintegerselection property)": [[113, "pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueIntegerSelection.obj_wt"]], "problem() (pybrops.breed.prot.sel.estimatedbreedingvalueselection.estimatedbreedingvalueintegerselection method)": [[113, "pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueIntegerSelection.problem"]], "rng (pybrops.breed.prot.sel.estimatedbreedingvalueselection.estimatedbreedingvalueintegerselection property)": [[113, "pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueIntegerSelection.rng"]], "select() (pybrops.breed.prot.sel.estimatedbreedingvalueselection.estimatedbreedingvalueintegerselection method)": [[113, "pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueIntegerSelection.select"]], "soalgo (pybrops.breed.prot.sel.estimatedbreedingvalueselection.estimatedbreedingvalueintegerselection property)": [[113, "pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueIntegerSelection.soalgo"]], "sosolve() (pybrops.breed.prot.sel.estimatedbreedingvalueselection.estimatedbreedingvalueintegerselection method)": [[113, "pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueIntegerSelection.sosolve"]], "unscale (pybrops.breed.prot.sel.estimatedbreedingvalueselection.estimatedbreedingvalueintegerselection property)": [[113, "pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueIntegerSelection.unscale"]], "estimatedbreedingvaluerealselection (class in pybrops.breed.prot.sel.estimatedbreedingvalueselection)": [[114, "pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueRealSelection"]], "eqcv_trans (pybrops.breed.prot.sel.estimatedbreedingvalueselection.estimatedbreedingvaluerealselection property)": [[114, "pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueRealSelection.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.estimatedbreedingvalueselection.estimatedbreedingvaluerealselection property)": [[114, "pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueRealSelection.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.estimatedbreedingvalueselection.estimatedbreedingvaluerealselection property)": [[114, "pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueRealSelection.eqcv_wt"]], "ineqcv_trans (pybrops.breed.prot.sel.estimatedbreedingvalueselection.estimatedbreedingvaluerealselection property)": [[114, "pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueRealSelection.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.estimatedbreedingvalueselection.estimatedbreedingvaluerealselection property)": [[114, "pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueRealSelection.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.estimatedbreedingvalueselection.estimatedbreedingvaluerealselection property)": [[114, "pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueRealSelection.ineqcv_wt"]], "moalgo (pybrops.breed.prot.sel.estimatedbreedingvalueselection.estimatedbreedingvaluerealselection property)": [[114, "pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueRealSelection.moalgo"]], "mosolve() (pybrops.breed.prot.sel.estimatedbreedingvalueselection.estimatedbreedingvaluerealselection method)": [[114, "pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueRealSelection.mosolve"]], "ncross (pybrops.breed.prot.sel.estimatedbreedingvalueselection.estimatedbreedingvaluerealselection property)": [[114, "pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueRealSelection.ncross"]], "ndset_trans (pybrops.breed.prot.sel.estimatedbreedingvalueselection.estimatedbreedingvaluerealselection property)": [[114, "pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueRealSelection.ndset_trans"]], "ndset_trans_kwargs (pybrops.breed.prot.sel.estimatedbreedingvalueselection.estimatedbreedingvaluerealselection property)": [[114, "pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueRealSelection.ndset_trans_kwargs"]], "ndset_wt (pybrops.breed.prot.sel.estimatedbreedingvalueselection.estimatedbreedingvaluerealselection property)": [[114, "pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueRealSelection.ndset_wt"]], "neqcv (pybrops.breed.prot.sel.estimatedbreedingvalueselection.estimatedbreedingvaluerealselection property)": [[114, "pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueRealSelection.neqcv"]], "nineqcv (pybrops.breed.prot.sel.estimatedbreedingvalueselection.estimatedbreedingvaluerealselection property)": [[114, "pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueRealSelection.nineqcv"]], "nmating (pybrops.breed.prot.sel.estimatedbreedingvalueselection.estimatedbreedingvaluerealselection property)": [[114, "pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueRealSelection.nmating"]], "nobj (pybrops.breed.prot.sel.estimatedbreedingvalueselection.estimatedbreedingvaluerealselection property)": [[114, "pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueRealSelection.nobj"]], "nparent (pybrops.breed.prot.sel.estimatedbreedingvalueselection.estimatedbreedingvaluerealselection property)": [[114, "pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueRealSelection.nparent"]], "nprogeny (pybrops.breed.prot.sel.estimatedbreedingvalueselection.estimatedbreedingvaluerealselection property)": [[114, "pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueRealSelection.nprogeny"]], "nselindiv (pybrops.breed.prot.sel.estimatedbreedingvalueselection.estimatedbreedingvaluerealselection property)": [[114, "pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueRealSelection.nselindiv"]], "ntrait (pybrops.breed.prot.sel.estimatedbreedingvalueselection.estimatedbreedingvaluerealselection property)": [[114, "pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueRealSelection.ntrait"]], "obj_trans (pybrops.breed.prot.sel.estimatedbreedingvalueselection.estimatedbreedingvaluerealselection property)": [[114, "pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueRealSelection.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.estimatedbreedingvalueselection.estimatedbreedingvaluerealselection property)": [[114, "pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueRealSelection.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.estimatedbreedingvalueselection.estimatedbreedingvaluerealselection property)": [[114, "pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueRealSelection.obj_wt"]], "problem() (pybrops.breed.prot.sel.estimatedbreedingvalueselection.estimatedbreedingvaluerealselection method)": [[114, "pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueRealSelection.problem"]], "rng (pybrops.breed.prot.sel.estimatedbreedingvalueselection.estimatedbreedingvaluerealselection property)": [[114, "pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueRealSelection.rng"]], "select() (pybrops.breed.prot.sel.estimatedbreedingvalueselection.estimatedbreedingvaluerealselection method)": [[114, "pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueRealSelection.select"]], "soalgo (pybrops.breed.prot.sel.estimatedbreedingvalueselection.estimatedbreedingvaluerealselection property)": [[114, "pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueRealSelection.soalgo"]], "sosolve() (pybrops.breed.prot.sel.estimatedbreedingvalueselection.estimatedbreedingvaluerealselection method)": [[114, "pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueRealSelection.sosolve"]], "unscale (pybrops.breed.prot.sel.estimatedbreedingvalueselection.estimatedbreedingvaluerealselection property)": [[114, "pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueRealSelection.unscale"]], "estimatedbreedingvalueselectionmixin (class in pybrops.breed.prot.sel.estimatedbreedingvalueselection)": [[115, "pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueSelectionMixin"]], "ntrait (pybrops.breed.prot.sel.estimatedbreedingvalueselection.estimatedbreedingvalueselectionmixin property)": [[115, "pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueSelectionMixin.ntrait"]], "unscale (pybrops.breed.prot.sel.estimatedbreedingvalueselection.estimatedbreedingvalueselectionmixin property)": [[115, "pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueSelectionMixin.unscale"]], "estimatedbreedingvaluesubsetselection (class in pybrops.breed.prot.sel.estimatedbreedingvalueselection)": [[116, "pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueSubsetSelection"]], "eqcv_trans (pybrops.breed.prot.sel.estimatedbreedingvalueselection.estimatedbreedingvaluesubsetselection property)": [[116, "pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueSubsetSelection.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.estimatedbreedingvalueselection.estimatedbreedingvaluesubsetselection property)": [[116, "pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueSubsetSelection.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.estimatedbreedingvalueselection.estimatedbreedingvaluesubsetselection property)": [[116, "pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueSubsetSelection.eqcv_wt"]], "ineqcv_trans (pybrops.breed.prot.sel.estimatedbreedingvalueselection.estimatedbreedingvaluesubsetselection property)": [[116, "pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueSubsetSelection.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.estimatedbreedingvalueselection.estimatedbreedingvaluesubsetselection property)": [[116, "pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueSubsetSelection.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.estimatedbreedingvalueselection.estimatedbreedingvaluesubsetselection property)": [[116, "pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueSubsetSelection.ineqcv_wt"]], "moalgo (pybrops.breed.prot.sel.estimatedbreedingvalueselection.estimatedbreedingvaluesubsetselection property)": [[116, "pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueSubsetSelection.moalgo"]], "mosolve() (pybrops.breed.prot.sel.estimatedbreedingvalueselection.estimatedbreedingvaluesubsetselection method)": [[116, "pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueSubsetSelection.mosolve"]], "ncross (pybrops.breed.prot.sel.estimatedbreedingvalueselection.estimatedbreedingvaluesubsetselection property)": [[116, "pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueSubsetSelection.ncross"]], "ndset_trans (pybrops.breed.prot.sel.estimatedbreedingvalueselection.estimatedbreedingvaluesubsetselection property)": [[116, "pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueSubsetSelection.ndset_trans"]], "ndset_trans_kwargs (pybrops.breed.prot.sel.estimatedbreedingvalueselection.estimatedbreedingvaluesubsetselection property)": [[116, "pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueSubsetSelection.ndset_trans_kwargs"]], "ndset_wt (pybrops.breed.prot.sel.estimatedbreedingvalueselection.estimatedbreedingvaluesubsetselection property)": [[116, "pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueSubsetSelection.ndset_wt"]], "neqcv (pybrops.breed.prot.sel.estimatedbreedingvalueselection.estimatedbreedingvaluesubsetselection property)": [[116, "pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueSubsetSelection.neqcv"]], "nineqcv (pybrops.breed.prot.sel.estimatedbreedingvalueselection.estimatedbreedingvaluesubsetselection property)": [[116, "pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueSubsetSelection.nineqcv"]], "nmating (pybrops.breed.prot.sel.estimatedbreedingvalueselection.estimatedbreedingvaluesubsetselection property)": [[116, "pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueSubsetSelection.nmating"]], "nobj (pybrops.breed.prot.sel.estimatedbreedingvalueselection.estimatedbreedingvaluesubsetselection property)": [[116, "pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueSubsetSelection.nobj"]], "nparent (pybrops.breed.prot.sel.estimatedbreedingvalueselection.estimatedbreedingvaluesubsetselection property)": [[116, "pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueSubsetSelection.nparent"]], "nprogeny (pybrops.breed.prot.sel.estimatedbreedingvalueselection.estimatedbreedingvaluesubsetselection property)": [[116, "pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueSubsetSelection.nprogeny"]], "nselindiv (pybrops.breed.prot.sel.estimatedbreedingvalueselection.estimatedbreedingvaluesubsetselection property)": [[116, "pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueSubsetSelection.nselindiv"]], "ntrait (pybrops.breed.prot.sel.estimatedbreedingvalueselection.estimatedbreedingvaluesubsetselection property)": [[116, "pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueSubsetSelection.ntrait"]], "obj_trans (pybrops.breed.prot.sel.estimatedbreedingvalueselection.estimatedbreedingvaluesubsetselection property)": [[116, "pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueSubsetSelection.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.estimatedbreedingvalueselection.estimatedbreedingvaluesubsetselection property)": [[116, "pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueSubsetSelection.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.estimatedbreedingvalueselection.estimatedbreedingvaluesubsetselection property)": [[116, "pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueSubsetSelection.obj_wt"]], "problem() (pybrops.breed.prot.sel.estimatedbreedingvalueselection.estimatedbreedingvaluesubsetselection method)": [[116, "pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueSubsetSelection.problem"]], "rng (pybrops.breed.prot.sel.estimatedbreedingvalueselection.estimatedbreedingvaluesubsetselection property)": [[116, "pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueSubsetSelection.rng"]], "select() (pybrops.breed.prot.sel.estimatedbreedingvalueselection.estimatedbreedingvaluesubsetselection method)": [[116, "pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueSubsetSelection.select"]], "soalgo (pybrops.breed.prot.sel.estimatedbreedingvalueselection.estimatedbreedingvaluesubsetselection property)": [[116, "pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueSubsetSelection.soalgo"]], "sosolve() (pybrops.breed.prot.sel.estimatedbreedingvalueselection.estimatedbreedingvaluesubsetselection method)": [[116, "pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueSubsetSelection.sosolve"]], "unscale (pybrops.breed.prot.sel.estimatedbreedingvalueselection.estimatedbreedingvaluesubsetselection property)": [[116, "pybrops.breed.prot.sel.EstimatedBreedingValueSelection.EstimatedBreedingValueSubsetSelection.unscale"]], "pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection": [[117, "module-pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection"]], "expectedmaximumbreedingvaluebinaryselection (class in pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection)": [[118, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueBinarySelection"]], "eqcv_trans (pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection.expectedmaximumbreedingvaluebinaryselection property)": [[118, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueBinarySelection.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection.expectedmaximumbreedingvaluebinaryselection property)": [[118, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueBinarySelection.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection.expectedmaximumbreedingvaluebinaryselection property)": [[118, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueBinarySelection.eqcv_wt"]], "ineqcv_trans (pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection.expectedmaximumbreedingvaluebinaryselection property)": [[118, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueBinarySelection.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection.expectedmaximumbreedingvaluebinaryselection property)": [[118, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueBinarySelection.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection.expectedmaximumbreedingvaluebinaryselection property)": [[118, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueBinarySelection.ineqcv_wt"]], "mateprot (pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection.expectedmaximumbreedingvaluebinaryselection property)": [[118, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueBinarySelection.mateprot"]], "moalgo (pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection.expectedmaximumbreedingvaluebinaryselection property)": [[118, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueBinarySelection.moalgo"]], "mosolve() (pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection.expectedmaximumbreedingvaluebinaryselection method)": [[118, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueBinarySelection.mosolve"]], "ncross (pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection.expectedmaximumbreedingvaluebinaryselection property)": [[118, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueBinarySelection.ncross"]], "ndset_trans (pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection.expectedmaximumbreedingvaluebinaryselection property)": [[118, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueBinarySelection.ndset_trans"]], "ndset_trans_kwargs (pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection.expectedmaximumbreedingvaluebinaryselection property)": [[118, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueBinarySelection.ndset_trans_kwargs"]], "ndset_wt (pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection.expectedmaximumbreedingvaluebinaryselection property)": [[118, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueBinarySelection.ndset_wt"]], "neqcv (pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection.expectedmaximumbreedingvaluebinaryselection property)": [[118, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueBinarySelection.neqcv"]], "nineqcv (pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection.expectedmaximumbreedingvaluebinaryselection property)": [[118, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueBinarySelection.nineqcv"]], "nmating (pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection.expectedmaximumbreedingvaluebinaryselection property)": [[118, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueBinarySelection.nmating"]], "nobj (pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection.expectedmaximumbreedingvaluebinaryselection property)": [[118, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueBinarySelection.nobj"]], "nparent (pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection.expectedmaximumbreedingvaluebinaryselection property)": [[118, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueBinarySelection.nparent"]], "nprogeny (pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection.expectedmaximumbreedingvaluebinaryselection property)": [[118, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueBinarySelection.nprogeny"]], "nrep (pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection.expectedmaximumbreedingvaluebinaryselection property)": [[118, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueBinarySelection.nrep"]], "nselindiv (pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection.expectedmaximumbreedingvaluebinaryselection property)": [[118, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueBinarySelection.nselindiv"]], "ntrait (pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection.expectedmaximumbreedingvaluebinaryselection property)": [[118, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueBinarySelection.ntrait"]], "obj_trans (pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection.expectedmaximumbreedingvaluebinaryselection property)": [[118, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueBinarySelection.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection.expectedmaximumbreedingvaluebinaryselection property)": [[118, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueBinarySelection.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection.expectedmaximumbreedingvaluebinaryselection property)": [[118, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueBinarySelection.obj_wt"]], "problem() (pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection.expectedmaximumbreedingvaluebinaryselection method)": [[118, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueBinarySelection.problem"]], "rng (pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection.expectedmaximumbreedingvaluebinaryselection property)": [[118, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueBinarySelection.rng"]], "select() (pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection.expectedmaximumbreedingvaluebinaryselection method)": [[118, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueBinarySelection.select"]], "soalgo (pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection.expectedmaximumbreedingvaluebinaryselection property)": [[118, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueBinarySelection.soalgo"]], "sosolve() (pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection.expectedmaximumbreedingvaluebinaryselection method)": [[118, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueBinarySelection.sosolve"]], "unique_parents (pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection.expectedmaximumbreedingvaluebinaryselection property)": [[118, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueBinarySelection.unique_parents"]], "expectedmaximumbreedingvalueintegerselection (class in pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection)": [[119, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueIntegerSelection"]], "eqcv_trans (pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection.expectedmaximumbreedingvalueintegerselection property)": [[119, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueIntegerSelection.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection.expectedmaximumbreedingvalueintegerselection property)": [[119, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueIntegerSelection.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection.expectedmaximumbreedingvalueintegerselection property)": [[119, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueIntegerSelection.eqcv_wt"]], "ineqcv_trans (pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection.expectedmaximumbreedingvalueintegerselection property)": [[119, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueIntegerSelection.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection.expectedmaximumbreedingvalueintegerselection property)": [[119, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueIntegerSelection.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection.expectedmaximumbreedingvalueintegerselection property)": [[119, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueIntegerSelection.ineqcv_wt"]], "mateprot (pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection.expectedmaximumbreedingvalueintegerselection property)": [[119, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueIntegerSelection.mateprot"]], "moalgo (pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection.expectedmaximumbreedingvalueintegerselection property)": [[119, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueIntegerSelection.moalgo"]], "mosolve() (pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection.expectedmaximumbreedingvalueintegerselection method)": [[119, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueIntegerSelection.mosolve"]], "ncross (pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection.expectedmaximumbreedingvalueintegerselection property)": [[119, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueIntegerSelection.ncross"]], "ndset_trans (pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection.expectedmaximumbreedingvalueintegerselection property)": [[119, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueIntegerSelection.ndset_trans"]], "ndset_trans_kwargs (pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection.expectedmaximumbreedingvalueintegerselection property)": [[119, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueIntegerSelection.ndset_trans_kwargs"]], "ndset_wt (pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection.expectedmaximumbreedingvalueintegerselection property)": [[119, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueIntegerSelection.ndset_wt"]], "neqcv (pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection.expectedmaximumbreedingvalueintegerselection property)": [[119, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueIntegerSelection.neqcv"]], "nineqcv (pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection.expectedmaximumbreedingvalueintegerselection property)": [[119, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueIntegerSelection.nineqcv"]], "nmating (pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection.expectedmaximumbreedingvalueintegerselection property)": [[119, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueIntegerSelection.nmating"]], "nobj (pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection.expectedmaximumbreedingvalueintegerselection property)": [[119, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueIntegerSelection.nobj"]], "nparent (pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection.expectedmaximumbreedingvalueintegerselection property)": [[119, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueIntegerSelection.nparent"]], "nprogeny (pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection.expectedmaximumbreedingvalueintegerselection property)": [[119, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueIntegerSelection.nprogeny"]], "nrep (pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection.expectedmaximumbreedingvalueintegerselection property)": [[119, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueIntegerSelection.nrep"]], "nselindiv (pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection.expectedmaximumbreedingvalueintegerselection property)": [[119, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueIntegerSelection.nselindiv"]], "ntrait (pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection.expectedmaximumbreedingvalueintegerselection property)": [[119, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueIntegerSelection.ntrait"]], "obj_trans (pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection.expectedmaximumbreedingvalueintegerselection property)": [[119, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueIntegerSelection.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection.expectedmaximumbreedingvalueintegerselection property)": [[119, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueIntegerSelection.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection.expectedmaximumbreedingvalueintegerselection property)": [[119, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueIntegerSelection.obj_wt"]], "problem() (pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection.expectedmaximumbreedingvalueintegerselection method)": [[119, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueIntegerSelection.problem"]], "rng (pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection.expectedmaximumbreedingvalueintegerselection property)": [[119, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueIntegerSelection.rng"]], "select() (pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection.expectedmaximumbreedingvalueintegerselection method)": [[119, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueIntegerSelection.select"]], "soalgo (pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection.expectedmaximumbreedingvalueintegerselection property)": [[119, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueIntegerSelection.soalgo"]], "sosolve() (pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection.expectedmaximumbreedingvalueintegerselection method)": [[119, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueIntegerSelection.sosolve"]], "unique_parents (pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection.expectedmaximumbreedingvalueintegerselection property)": [[119, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueIntegerSelection.unique_parents"]], "expectedmaximumbreedingvaluerealselection (class in pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection)": [[120, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueRealSelection"]], "eqcv_trans (pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection.expectedmaximumbreedingvaluerealselection property)": [[120, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueRealSelection.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection.expectedmaximumbreedingvaluerealselection property)": [[120, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueRealSelection.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection.expectedmaximumbreedingvaluerealselection property)": [[120, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueRealSelection.eqcv_wt"]], "ineqcv_trans (pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection.expectedmaximumbreedingvaluerealselection property)": [[120, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueRealSelection.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection.expectedmaximumbreedingvaluerealselection property)": [[120, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueRealSelection.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection.expectedmaximumbreedingvaluerealselection property)": [[120, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueRealSelection.ineqcv_wt"]], "mateprot (pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection.expectedmaximumbreedingvaluerealselection property)": [[120, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueRealSelection.mateprot"]], "moalgo (pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection.expectedmaximumbreedingvaluerealselection property)": [[120, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueRealSelection.moalgo"]], "mosolve() (pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection.expectedmaximumbreedingvaluerealselection method)": [[120, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueRealSelection.mosolve"]], "ncross (pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection.expectedmaximumbreedingvaluerealselection property)": [[120, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueRealSelection.ncross"]], "ndset_trans (pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection.expectedmaximumbreedingvaluerealselection property)": [[120, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueRealSelection.ndset_trans"]], "ndset_trans_kwargs (pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection.expectedmaximumbreedingvaluerealselection property)": [[120, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueRealSelection.ndset_trans_kwargs"]], "ndset_wt (pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection.expectedmaximumbreedingvaluerealselection property)": [[120, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueRealSelection.ndset_wt"]], "neqcv (pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection.expectedmaximumbreedingvaluerealselection property)": [[120, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueRealSelection.neqcv"]], "nineqcv (pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection.expectedmaximumbreedingvaluerealselection property)": [[120, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueRealSelection.nineqcv"]], "nmating (pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection.expectedmaximumbreedingvaluerealselection property)": [[120, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueRealSelection.nmating"]], "nobj (pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection.expectedmaximumbreedingvaluerealselection property)": [[120, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueRealSelection.nobj"]], "nparent (pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection.expectedmaximumbreedingvaluerealselection property)": [[120, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueRealSelection.nparent"]], "nprogeny (pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection.expectedmaximumbreedingvaluerealselection property)": [[120, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueRealSelection.nprogeny"]], "nrep (pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection.expectedmaximumbreedingvaluerealselection property)": [[120, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueRealSelection.nrep"]], "nselindiv (pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection.expectedmaximumbreedingvaluerealselection property)": [[120, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueRealSelection.nselindiv"]], "ntrait (pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection.expectedmaximumbreedingvaluerealselection property)": [[120, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueRealSelection.ntrait"]], "obj_trans (pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection.expectedmaximumbreedingvaluerealselection property)": [[120, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueRealSelection.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection.expectedmaximumbreedingvaluerealselection property)": [[120, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueRealSelection.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection.expectedmaximumbreedingvaluerealselection property)": [[120, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueRealSelection.obj_wt"]], "problem() (pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection.expectedmaximumbreedingvaluerealselection method)": [[120, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueRealSelection.problem"]], "rng (pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection.expectedmaximumbreedingvaluerealselection property)": [[120, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueRealSelection.rng"]], "select() (pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection.expectedmaximumbreedingvaluerealselection method)": [[120, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueRealSelection.select"]], "soalgo (pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection.expectedmaximumbreedingvaluerealselection property)": [[120, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueRealSelection.soalgo"]], "sosolve() (pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection.expectedmaximumbreedingvaluerealselection method)": [[120, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueRealSelection.sosolve"]], "unique_parents (pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection.expectedmaximumbreedingvaluerealselection property)": [[120, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueRealSelection.unique_parents"]], "expectedmaximumbreedingvalueselectionmixin (class in pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection)": [[121, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueSelectionMixin"]], "mateprot (pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection.expectedmaximumbreedingvalueselectionmixin property)": [[121, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueSelectionMixin.mateprot"]], "nrep (pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection.expectedmaximumbreedingvalueselectionmixin property)": [[121, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueSelectionMixin.nrep"]], "ntrait (pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection.expectedmaximumbreedingvalueselectionmixin property)": [[121, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueSelectionMixin.ntrait"]], "unique_parents (pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection.expectedmaximumbreedingvalueselectionmixin property)": [[121, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueSelectionMixin.unique_parents"]], "expectedmaximumbreedingvaluesubsetselection (class in pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection)": [[122, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueSubsetSelection"]], "eqcv_trans (pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection.expectedmaximumbreedingvaluesubsetselection property)": [[122, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueSubsetSelection.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection.expectedmaximumbreedingvaluesubsetselection property)": [[122, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueSubsetSelection.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection.expectedmaximumbreedingvaluesubsetselection property)": [[122, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueSubsetSelection.eqcv_wt"]], "ineqcv_trans (pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection.expectedmaximumbreedingvaluesubsetselection property)": [[122, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueSubsetSelection.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection.expectedmaximumbreedingvaluesubsetselection property)": [[122, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueSubsetSelection.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection.expectedmaximumbreedingvaluesubsetselection property)": [[122, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueSubsetSelection.ineqcv_wt"]], "mateprot (pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection.expectedmaximumbreedingvaluesubsetselection property)": [[122, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueSubsetSelection.mateprot"]], "moalgo (pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection.expectedmaximumbreedingvaluesubsetselection property)": [[122, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueSubsetSelection.moalgo"]], "mosolve() (pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection.expectedmaximumbreedingvaluesubsetselection method)": [[122, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueSubsetSelection.mosolve"]], "ncross (pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection.expectedmaximumbreedingvaluesubsetselection property)": [[122, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueSubsetSelection.ncross"]], "ndset_trans (pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection.expectedmaximumbreedingvaluesubsetselection property)": [[122, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueSubsetSelection.ndset_trans"]], "ndset_trans_kwargs (pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection.expectedmaximumbreedingvaluesubsetselection property)": [[122, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueSubsetSelection.ndset_trans_kwargs"]], "ndset_wt (pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection.expectedmaximumbreedingvaluesubsetselection property)": [[122, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueSubsetSelection.ndset_wt"]], "neqcv (pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection.expectedmaximumbreedingvaluesubsetselection property)": [[122, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueSubsetSelection.neqcv"]], "nineqcv (pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection.expectedmaximumbreedingvaluesubsetselection property)": [[122, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueSubsetSelection.nineqcv"]], "nmating (pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection.expectedmaximumbreedingvaluesubsetselection property)": [[122, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueSubsetSelection.nmating"]], "nobj (pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection.expectedmaximumbreedingvaluesubsetselection property)": [[122, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueSubsetSelection.nobj"]], "nparent (pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection.expectedmaximumbreedingvaluesubsetselection property)": [[122, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueSubsetSelection.nparent"]], "nprogeny (pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection.expectedmaximumbreedingvaluesubsetselection property)": [[122, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueSubsetSelection.nprogeny"]], "nrep (pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection.expectedmaximumbreedingvaluesubsetselection property)": [[122, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueSubsetSelection.nrep"]], "nselindiv (pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection.expectedmaximumbreedingvaluesubsetselection property)": [[122, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueSubsetSelection.nselindiv"]], "ntrait (pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection.expectedmaximumbreedingvaluesubsetselection property)": [[122, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueSubsetSelection.ntrait"]], "obj_trans (pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection.expectedmaximumbreedingvaluesubsetselection property)": [[122, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueSubsetSelection.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection.expectedmaximumbreedingvaluesubsetselection property)": [[122, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueSubsetSelection.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection.expectedmaximumbreedingvaluesubsetselection property)": [[122, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueSubsetSelection.obj_wt"]], "problem() (pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection.expectedmaximumbreedingvaluesubsetselection method)": [[122, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueSubsetSelection.problem"]], "rng (pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection.expectedmaximumbreedingvaluesubsetselection property)": [[122, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueSubsetSelection.rng"]], "select() (pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection.expectedmaximumbreedingvaluesubsetselection method)": [[122, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueSubsetSelection.select"]], "soalgo (pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection.expectedmaximumbreedingvaluesubsetselection property)": [[122, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueSubsetSelection.soalgo"]], "sosolve() (pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection.expectedmaximumbreedingvaluesubsetselection method)": [[122, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueSubsetSelection.sosolve"]], "unique_parents (pybrops.breed.prot.sel.expectedmaximumbreedingvalueselection.expectedmaximumbreedingvaluesubsetselection property)": [[122, "pybrops.breed.prot.sel.ExpectedMaximumBreedingValueSelection.ExpectedMaximumBreedingValueSubsetSelection.unique_parents"]], "pybrops.breed.prot.sel.familyestimatedbreedingvalueselection": [[123, "module-pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection"]], "familyestimatedbreedingvaluebinaryselection (class in pybrops.breed.prot.sel.familyestimatedbreedingvalueselection)": [[124, "pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueBinarySelection"]], "eqcv_trans (pybrops.breed.prot.sel.familyestimatedbreedingvalueselection.familyestimatedbreedingvaluebinaryselection property)": [[124, "pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueBinarySelection.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.familyestimatedbreedingvalueselection.familyestimatedbreedingvaluebinaryselection property)": [[124, "pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueBinarySelection.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.familyestimatedbreedingvalueselection.familyestimatedbreedingvaluebinaryselection property)": [[124, "pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueBinarySelection.eqcv_wt"]], "ineqcv_trans (pybrops.breed.prot.sel.familyestimatedbreedingvalueselection.familyestimatedbreedingvaluebinaryselection property)": [[124, "pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueBinarySelection.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.familyestimatedbreedingvalueselection.familyestimatedbreedingvaluebinaryselection property)": [[124, "pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueBinarySelection.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.familyestimatedbreedingvalueselection.familyestimatedbreedingvaluebinaryselection property)": [[124, "pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueBinarySelection.ineqcv_wt"]], "moalgo (pybrops.breed.prot.sel.familyestimatedbreedingvalueselection.familyestimatedbreedingvaluebinaryselection property)": [[124, "pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueBinarySelection.moalgo"]], "mosolve() (pybrops.breed.prot.sel.familyestimatedbreedingvalueselection.familyestimatedbreedingvaluebinaryselection method)": [[124, "pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueBinarySelection.mosolve"]], "ncross (pybrops.breed.prot.sel.familyestimatedbreedingvalueselection.familyestimatedbreedingvaluebinaryselection property)": [[124, "pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueBinarySelection.ncross"]], "ndset_trans (pybrops.breed.prot.sel.familyestimatedbreedingvalueselection.familyestimatedbreedingvaluebinaryselection property)": [[124, "pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueBinarySelection.ndset_trans"]], "ndset_trans_kwargs (pybrops.breed.prot.sel.familyestimatedbreedingvalueselection.familyestimatedbreedingvaluebinaryselection property)": [[124, "pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueBinarySelection.ndset_trans_kwargs"]], "ndset_wt (pybrops.breed.prot.sel.familyestimatedbreedingvalueselection.familyestimatedbreedingvaluebinaryselection property)": [[124, "pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueBinarySelection.ndset_wt"]], "neqcv (pybrops.breed.prot.sel.familyestimatedbreedingvalueselection.familyestimatedbreedingvaluebinaryselection property)": [[124, "pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueBinarySelection.neqcv"]], "nineqcv (pybrops.breed.prot.sel.familyestimatedbreedingvalueselection.familyestimatedbreedingvaluebinaryselection property)": [[124, "pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueBinarySelection.nineqcv"]], "nmating (pybrops.breed.prot.sel.familyestimatedbreedingvalueselection.familyestimatedbreedingvaluebinaryselection property)": [[124, "pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueBinarySelection.nmating"]], "nobj (pybrops.breed.prot.sel.familyestimatedbreedingvalueselection.familyestimatedbreedingvaluebinaryselection property)": [[124, "pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueBinarySelection.nobj"]], "nparent (pybrops.breed.prot.sel.familyestimatedbreedingvalueselection.familyestimatedbreedingvaluebinaryselection property)": [[124, "pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueBinarySelection.nparent"]], "nprogeny (pybrops.breed.prot.sel.familyestimatedbreedingvalueselection.familyestimatedbreedingvaluebinaryselection property)": [[124, "pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueBinarySelection.nprogeny"]], "nselindiv (pybrops.breed.prot.sel.familyestimatedbreedingvalueselection.familyestimatedbreedingvaluebinaryselection property)": [[124, "pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueBinarySelection.nselindiv"]], "ntrait (pybrops.breed.prot.sel.familyestimatedbreedingvalueselection.familyestimatedbreedingvaluebinaryselection property)": [[124, "pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueBinarySelection.ntrait"]], "obj_trans (pybrops.breed.prot.sel.familyestimatedbreedingvalueselection.familyestimatedbreedingvaluebinaryselection property)": [[124, "pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueBinarySelection.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.familyestimatedbreedingvalueselection.familyestimatedbreedingvaluebinaryselection property)": [[124, "pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueBinarySelection.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.familyestimatedbreedingvalueselection.familyestimatedbreedingvaluebinaryselection property)": [[124, "pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueBinarySelection.obj_wt"]], "problem() (pybrops.breed.prot.sel.familyestimatedbreedingvalueselection.familyestimatedbreedingvaluebinaryselection method)": [[124, "pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueBinarySelection.problem"]], "rng (pybrops.breed.prot.sel.familyestimatedbreedingvalueselection.familyestimatedbreedingvaluebinaryselection property)": [[124, "pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueBinarySelection.rng"]], "select() (pybrops.breed.prot.sel.familyestimatedbreedingvalueselection.familyestimatedbreedingvaluebinaryselection method)": [[124, "pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueBinarySelection.select"]], "soalgo (pybrops.breed.prot.sel.familyestimatedbreedingvalueselection.familyestimatedbreedingvaluebinaryselection property)": [[124, "pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueBinarySelection.soalgo"]], "sosolve() (pybrops.breed.prot.sel.familyestimatedbreedingvalueselection.familyestimatedbreedingvaluebinaryselection method)": [[124, "pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueBinarySelection.sosolve"]], "familyestimatedbreedingvalueintegerselection (class in pybrops.breed.prot.sel.familyestimatedbreedingvalueselection)": [[125, "pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueIntegerSelection"]], "eqcv_trans (pybrops.breed.prot.sel.familyestimatedbreedingvalueselection.familyestimatedbreedingvalueintegerselection property)": [[125, "pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueIntegerSelection.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.familyestimatedbreedingvalueselection.familyestimatedbreedingvalueintegerselection property)": [[125, "pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueIntegerSelection.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.familyestimatedbreedingvalueselection.familyestimatedbreedingvalueintegerselection property)": [[125, "pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueIntegerSelection.eqcv_wt"]], "ineqcv_trans (pybrops.breed.prot.sel.familyestimatedbreedingvalueselection.familyestimatedbreedingvalueintegerselection property)": [[125, "pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueIntegerSelection.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.familyestimatedbreedingvalueselection.familyestimatedbreedingvalueintegerselection property)": [[125, "pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueIntegerSelection.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.familyestimatedbreedingvalueselection.familyestimatedbreedingvalueintegerselection property)": [[125, "pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueIntegerSelection.ineqcv_wt"]], "moalgo (pybrops.breed.prot.sel.familyestimatedbreedingvalueselection.familyestimatedbreedingvalueintegerselection property)": [[125, "pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueIntegerSelection.moalgo"]], "mosolve() (pybrops.breed.prot.sel.familyestimatedbreedingvalueselection.familyestimatedbreedingvalueintegerselection method)": [[125, "pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueIntegerSelection.mosolve"]], "ncross (pybrops.breed.prot.sel.familyestimatedbreedingvalueselection.familyestimatedbreedingvalueintegerselection property)": [[125, "pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueIntegerSelection.ncross"]], "ndset_trans (pybrops.breed.prot.sel.familyestimatedbreedingvalueselection.familyestimatedbreedingvalueintegerselection property)": [[125, "pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueIntegerSelection.ndset_trans"]], "ndset_trans_kwargs (pybrops.breed.prot.sel.familyestimatedbreedingvalueselection.familyestimatedbreedingvalueintegerselection property)": [[125, "pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueIntegerSelection.ndset_trans_kwargs"]], "ndset_wt (pybrops.breed.prot.sel.familyestimatedbreedingvalueselection.familyestimatedbreedingvalueintegerselection property)": [[125, "pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueIntegerSelection.ndset_wt"]], "neqcv (pybrops.breed.prot.sel.familyestimatedbreedingvalueselection.familyestimatedbreedingvalueintegerselection property)": [[125, "pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueIntegerSelection.neqcv"]], "nineqcv (pybrops.breed.prot.sel.familyestimatedbreedingvalueselection.familyestimatedbreedingvalueintegerselection property)": [[125, "pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueIntegerSelection.nineqcv"]], "nmating (pybrops.breed.prot.sel.familyestimatedbreedingvalueselection.familyestimatedbreedingvalueintegerselection property)": [[125, "pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueIntegerSelection.nmating"]], "nobj (pybrops.breed.prot.sel.familyestimatedbreedingvalueselection.familyestimatedbreedingvalueintegerselection property)": [[125, "pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueIntegerSelection.nobj"]], "nparent (pybrops.breed.prot.sel.familyestimatedbreedingvalueselection.familyestimatedbreedingvalueintegerselection property)": [[125, "pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueIntegerSelection.nparent"]], "nprogeny (pybrops.breed.prot.sel.familyestimatedbreedingvalueselection.familyestimatedbreedingvalueintegerselection property)": [[125, "pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueIntegerSelection.nprogeny"]], "nselindiv (pybrops.breed.prot.sel.familyestimatedbreedingvalueselection.familyestimatedbreedingvalueintegerselection property)": [[125, "pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueIntegerSelection.nselindiv"]], "ntrait (pybrops.breed.prot.sel.familyestimatedbreedingvalueselection.familyestimatedbreedingvalueintegerselection property)": [[125, "pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueIntegerSelection.ntrait"]], "obj_trans (pybrops.breed.prot.sel.familyestimatedbreedingvalueselection.familyestimatedbreedingvalueintegerselection property)": [[125, "pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueIntegerSelection.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.familyestimatedbreedingvalueselection.familyestimatedbreedingvalueintegerselection property)": [[125, "pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueIntegerSelection.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.familyestimatedbreedingvalueselection.familyestimatedbreedingvalueintegerselection property)": [[125, "pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueIntegerSelection.obj_wt"]], "problem() (pybrops.breed.prot.sel.familyestimatedbreedingvalueselection.familyestimatedbreedingvalueintegerselection method)": [[125, "pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueIntegerSelection.problem"]], "rng (pybrops.breed.prot.sel.familyestimatedbreedingvalueselection.familyestimatedbreedingvalueintegerselection property)": [[125, "pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueIntegerSelection.rng"]], "select() (pybrops.breed.prot.sel.familyestimatedbreedingvalueselection.familyestimatedbreedingvalueintegerselection method)": [[125, "pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueIntegerSelection.select"]], "soalgo (pybrops.breed.prot.sel.familyestimatedbreedingvalueselection.familyestimatedbreedingvalueintegerselection property)": [[125, "pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueIntegerSelection.soalgo"]], "sosolve() (pybrops.breed.prot.sel.familyestimatedbreedingvalueselection.familyestimatedbreedingvalueintegerselection method)": [[125, "pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueIntegerSelection.sosolve"]], "familyestimatedbreedingvaluerealselection (class in pybrops.breed.prot.sel.familyestimatedbreedingvalueselection)": [[126, "pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueRealSelection"]], "eqcv_trans (pybrops.breed.prot.sel.familyestimatedbreedingvalueselection.familyestimatedbreedingvaluerealselection property)": [[126, "pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueRealSelection.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.familyestimatedbreedingvalueselection.familyestimatedbreedingvaluerealselection property)": [[126, "pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueRealSelection.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.familyestimatedbreedingvalueselection.familyestimatedbreedingvaluerealselection property)": [[126, "pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueRealSelection.eqcv_wt"]], "ineqcv_trans (pybrops.breed.prot.sel.familyestimatedbreedingvalueselection.familyestimatedbreedingvaluerealselection property)": [[126, "pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueRealSelection.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.familyestimatedbreedingvalueselection.familyestimatedbreedingvaluerealselection property)": [[126, "pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueRealSelection.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.familyestimatedbreedingvalueselection.familyestimatedbreedingvaluerealselection property)": [[126, "pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueRealSelection.ineqcv_wt"]], "moalgo (pybrops.breed.prot.sel.familyestimatedbreedingvalueselection.familyestimatedbreedingvaluerealselection property)": [[126, "pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueRealSelection.moalgo"]], "mosolve() (pybrops.breed.prot.sel.familyestimatedbreedingvalueselection.familyestimatedbreedingvaluerealselection method)": [[126, "pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueRealSelection.mosolve"]], "ncross (pybrops.breed.prot.sel.familyestimatedbreedingvalueselection.familyestimatedbreedingvaluerealselection property)": [[126, "pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueRealSelection.ncross"]], "ndset_trans (pybrops.breed.prot.sel.familyestimatedbreedingvalueselection.familyestimatedbreedingvaluerealselection property)": [[126, "pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueRealSelection.ndset_trans"]], "ndset_trans_kwargs (pybrops.breed.prot.sel.familyestimatedbreedingvalueselection.familyestimatedbreedingvaluerealselection property)": [[126, "pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueRealSelection.ndset_trans_kwargs"]], "ndset_wt (pybrops.breed.prot.sel.familyestimatedbreedingvalueselection.familyestimatedbreedingvaluerealselection property)": [[126, "pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueRealSelection.ndset_wt"]], "neqcv (pybrops.breed.prot.sel.familyestimatedbreedingvalueselection.familyestimatedbreedingvaluerealselection property)": [[126, "pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueRealSelection.neqcv"]], "nineqcv (pybrops.breed.prot.sel.familyestimatedbreedingvalueselection.familyestimatedbreedingvaluerealselection property)": [[126, "pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueRealSelection.nineqcv"]], "nmating (pybrops.breed.prot.sel.familyestimatedbreedingvalueselection.familyestimatedbreedingvaluerealselection property)": [[126, "pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueRealSelection.nmating"]], "nobj (pybrops.breed.prot.sel.familyestimatedbreedingvalueselection.familyestimatedbreedingvaluerealselection property)": [[126, "pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueRealSelection.nobj"]], "nparent (pybrops.breed.prot.sel.familyestimatedbreedingvalueselection.familyestimatedbreedingvaluerealselection property)": [[126, "pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueRealSelection.nparent"]], "nprogeny (pybrops.breed.prot.sel.familyestimatedbreedingvalueselection.familyestimatedbreedingvaluerealselection property)": [[126, "pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueRealSelection.nprogeny"]], "nselindiv (pybrops.breed.prot.sel.familyestimatedbreedingvalueselection.familyestimatedbreedingvaluerealselection property)": [[126, "pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueRealSelection.nselindiv"]], "ntrait (pybrops.breed.prot.sel.familyestimatedbreedingvalueselection.familyestimatedbreedingvaluerealselection property)": [[126, "pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueRealSelection.ntrait"]], "obj_trans (pybrops.breed.prot.sel.familyestimatedbreedingvalueselection.familyestimatedbreedingvaluerealselection property)": [[126, "pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueRealSelection.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.familyestimatedbreedingvalueselection.familyestimatedbreedingvaluerealselection property)": [[126, "pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueRealSelection.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.familyestimatedbreedingvalueselection.familyestimatedbreedingvaluerealselection property)": [[126, "pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueRealSelection.obj_wt"]], "problem() (pybrops.breed.prot.sel.familyestimatedbreedingvalueselection.familyestimatedbreedingvaluerealselection method)": [[126, "pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueRealSelection.problem"]], "rng (pybrops.breed.prot.sel.familyestimatedbreedingvalueselection.familyestimatedbreedingvaluerealselection property)": [[126, "pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueRealSelection.rng"]], "select() (pybrops.breed.prot.sel.familyestimatedbreedingvalueselection.familyestimatedbreedingvaluerealselection method)": [[126, "pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueRealSelection.select"]], "soalgo (pybrops.breed.prot.sel.familyestimatedbreedingvalueselection.familyestimatedbreedingvaluerealselection property)": [[126, "pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueRealSelection.soalgo"]], "sosolve() (pybrops.breed.prot.sel.familyestimatedbreedingvalueselection.familyestimatedbreedingvaluerealselection method)": [[126, "pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueRealSelection.sosolve"]], "familyestimatedbreedingvalueselectionmixin (class in pybrops.breed.prot.sel.familyestimatedbreedingvalueselection)": [[127, "pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueSelectionMixin"]], "ntrait (pybrops.breed.prot.sel.familyestimatedbreedingvalueselection.familyestimatedbreedingvalueselectionmixin property)": [[127, "pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueSelectionMixin.ntrait"]], "familyestimatedbreedingvaluesubsetselection (class in pybrops.breed.prot.sel.familyestimatedbreedingvalueselection)": [[128, "pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueSubsetSelection"]], "eqcv_trans (pybrops.breed.prot.sel.familyestimatedbreedingvalueselection.familyestimatedbreedingvaluesubsetselection property)": [[128, "pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueSubsetSelection.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.familyestimatedbreedingvalueselection.familyestimatedbreedingvaluesubsetselection property)": [[128, "pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueSubsetSelection.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.familyestimatedbreedingvalueselection.familyestimatedbreedingvaluesubsetselection property)": [[128, "pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueSubsetSelection.eqcv_wt"]], "ineqcv_trans (pybrops.breed.prot.sel.familyestimatedbreedingvalueselection.familyestimatedbreedingvaluesubsetselection property)": [[128, "pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueSubsetSelection.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.familyestimatedbreedingvalueselection.familyestimatedbreedingvaluesubsetselection property)": [[128, "pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueSubsetSelection.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.familyestimatedbreedingvalueselection.familyestimatedbreedingvaluesubsetselection property)": [[128, "pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueSubsetSelection.ineqcv_wt"]], "moalgo (pybrops.breed.prot.sel.familyestimatedbreedingvalueselection.familyestimatedbreedingvaluesubsetselection property)": [[128, "pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueSubsetSelection.moalgo"]], "mosolve() (pybrops.breed.prot.sel.familyestimatedbreedingvalueselection.familyestimatedbreedingvaluesubsetselection method)": [[128, "pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueSubsetSelection.mosolve"]], "ncross (pybrops.breed.prot.sel.familyestimatedbreedingvalueselection.familyestimatedbreedingvaluesubsetselection property)": [[128, "pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueSubsetSelection.ncross"]], "ndset_trans (pybrops.breed.prot.sel.familyestimatedbreedingvalueselection.familyestimatedbreedingvaluesubsetselection property)": [[128, "pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueSubsetSelection.ndset_trans"]], "ndset_trans_kwargs (pybrops.breed.prot.sel.familyestimatedbreedingvalueselection.familyestimatedbreedingvaluesubsetselection property)": [[128, "pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueSubsetSelection.ndset_trans_kwargs"]], "ndset_wt (pybrops.breed.prot.sel.familyestimatedbreedingvalueselection.familyestimatedbreedingvaluesubsetselection property)": [[128, "pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueSubsetSelection.ndset_wt"]], "neqcv (pybrops.breed.prot.sel.familyestimatedbreedingvalueselection.familyestimatedbreedingvaluesubsetselection property)": [[128, "pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueSubsetSelection.neqcv"]], "nineqcv (pybrops.breed.prot.sel.familyestimatedbreedingvalueselection.familyestimatedbreedingvaluesubsetselection property)": [[128, "pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueSubsetSelection.nineqcv"]], "nmating (pybrops.breed.prot.sel.familyestimatedbreedingvalueselection.familyestimatedbreedingvaluesubsetselection property)": [[128, "pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueSubsetSelection.nmating"]], "nobj (pybrops.breed.prot.sel.familyestimatedbreedingvalueselection.familyestimatedbreedingvaluesubsetselection property)": [[128, "pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueSubsetSelection.nobj"]], "nparent (pybrops.breed.prot.sel.familyestimatedbreedingvalueselection.familyestimatedbreedingvaluesubsetselection property)": [[128, "pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueSubsetSelection.nparent"]], "nprogeny (pybrops.breed.prot.sel.familyestimatedbreedingvalueselection.familyestimatedbreedingvaluesubsetselection property)": [[128, "pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueSubsetSelection.nprogeny"]], "nselindiv (pybrops.breed.prot.sel.familyestimatedbreedingvalueselection.familyestimatedbreedingvaluesubsetselection property)": [[128, "pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueSubsetSelection.nselindiv"]], "ntrait (pybrops.breed.prot.sel.familyestimatedbreedingvalueselection.familyestimatedbreedingvaluesubsetselection property)": [[128, "pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueSubsetSelection.ntrait"]], "obj_trans (pybrops.breed.prot.sel.familyestimatedbreedingvalueselection.familyestimatedbreedingvaluesubsetselection property)": [[128, "pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueSubsetSelection.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.familyestimatedbreedingvalueselection.familyestimatedbreedingvaluesubsetselection property)": [[128, "pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueSubsetSelection.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.familyestimatedbreedingvalueselection.familyestimatedbreedingvaluesubsetselection property)": [[128, "pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueSubsetSelection.obj_wt"]], "problem() (pybrops.breed.prot.sel.familyestimatedbreedingvalueselection.familyestimatedbreedingvaluesubsetselection method)": [[128, "pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueSubsetSelection.problem"]], "rng (pybrops.breed.prot.sel.familyestimatedbreedingvalueselection.familyestimatedbreedingvaluesubsetselection property)": [[128, "pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueSubsetSelection.rng"]], "select() (pybrops.breed.prot.sel.familyestimatedbreedingvalueselection.familyestimatedbreedingvaluesubsetselection method)": [[128, "pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueSubsetSelection.select"]], "soalgo (pybrops.breed.prot.sel.familyestimatedbreedingvalueselection.familyestimatedbreedingvaluesubsetselection property)": [[128, "pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueSubsetSelection.soalgo"]], "sosolve() (pybrops.breed.prot.sel.familyestimatedbreedingvalueselection.familyestimatedbreedingvaluesubsetselection method)": [[128, "pybrops.breed.prot.sel.FamilyEstimatedBreedingValueSelection.FamilyEstimatedBreedingValueSubsetSelection.sosolve"]], "pybrops.breed.prot.sel.generalizedweightedgenomicestimatedbreedingvalueselection": [[129, "module-pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection"]], "generalizedweightedgenomicestimatedbreedingvaluebinaryselection (class in pybrops.breed.prot.sel.generalizedweightedgenomicestimatedbreedingvalueselection)": [[130, "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueBinarySelection"]], "alpha (pybrops.breed.prot.sel.generalizedweightedgenomicestimatedbreedingvalueselection.generalizedweightedgenomicestimatedbreedingvaluebinaryselection property)": [[130, "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueBinarySelection.alpha"]], "eqcv_trans (pybrops.breed.prot.sel.generalizedweightedgenomicestimatedbreedingvalueselection.generalizedweightedgenomicestimatedbreedingvaluebinaryselection property)": [[130, "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueBinarySelection.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.generalizedweightedgenomicestimatedbreedingvalueselection.generalizedweightedgenomicestimatedbreedingvaluebinaryselection property)": [[130, "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueBinarySelection.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.generalizedweightedgenomicestimatedbreedingvalueselection.generalizedweightedgenomicestimatedbreedingvaluebinaryselection property)": [[130, "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueBinarySelection.eqcv_wt"]], "ineqcv_trans (pybrops.breed.prot.sel.generalizedweightedgenomicestimatedbreedingvalueselection.generalizedweightedgenomicestimatedbreedingvaluebinaryselection property)": [[130, "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueBinarySelection.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.generalizedweightedgenomicestimatedbreedingvalueselection.generalizedweightedgenomicestimatedbreedingvaluebinaryselection property)": [[130, "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueBinarySelection.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.generalizedweightedgenomicestimatedbreedingvalueselection.generalizedweightedgenomicestimatedbreedingvaluebinaryselection property)": [[130, "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueBinarySelection.ineqcv_wt"]], "moalgo (pybrops.breed.prot.sel.generalizedweightedgenomicestimatedbreedingvalueselection.generalizedweightedgenomicestimatedbreedingvaluebinaryselection property)": [[130, "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueBinarySelection.moalgo"]], "mosolve() (pybrops.breed.prot.sel.generalizedweightedgenomicestimatedbreedingvalueselection.generalizedweightedgenomicestimatedbreedingvaluebinaryselection method)": [[130, "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueBinarySelection.mosolve"]], "ncross (pybrops.breed.prot.sel.generalizedweightedgenomicestimatedbreedingvalueselection.generalizedweightedgenomicestimatedbreedingvaluebinaryselection property)": [[130, "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueBinarySelection.ncross"]], "ndset_trans (pybrops.breed.prot.sel.generalizedweightedgenomicestimatedbreedingvalueselection.generalizedweightedgenomicestimatedbreedingvaluebinaryselection property)": [[130, "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueBinarySelection.ndset_trans"]], "ndset_trans_kwargs (pybrops.breed.prot.sel.generalizedweightedgenomicestimatedbreedingvalueselection.generalizedweightedgenomicestimatedbreedingvaluebinaryselection property)": [[130, "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueBinarySelection.ndset_trans_kwargs"]], "ndset_wt (pybrops.breed.prot.sel.generalizedweightedgenomicestimatedbreedingvalueselection.generalizedweightedgenomicestimatedbreedingvaluebinaryselection property)": [[130, "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueBinarySelection.ndset_wt"]], "neqcv (pybrops.breed.prot.sel.generalizedweightedgenomicestimatedbreedingvalueselection.generalizedweightedgenomicestimatedbreedingvaluebinaryselection property)": [[130, "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueBinarySelection.neqcv"]], "nineqcv (pybrops.breed.prot.sel.generalizedweightedgenomicestimatedbreedingvalueselection.generalizedweightedgenomicestimatedbreedingvaluebinaryselection property)": [[130, "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueBinarySelection.nineqcv"]], "nmating (pybrops.breed.prot.sel.generalizedweightedgenomicestimatedbreedingvalueselection.generalizedweightedgenomicestimatedbreedingvaluebinaryselection property)": [[130, "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueBinarySelection.nmating"]], "nobj (pybrops.breed.prot.sel.generalizedweightedgenomicestimatedbreedingvalueselection.generalizedweightedgenomicestimatedbreedingvaluebinaryselection property)": [[130, "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueBinarySelection.nobj"]], "nparent (pybrops.breed.prot.sel.generalizedweightedgenomicestimatedbreedingvalueselection.generalizedweightedgenomicestimatedbreedingvaluebinaryselection property)": [[130, "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueBinarySelection.nparent"]], "nprogeny (pybrops.breed.prot.sel.generalizedweightedgenomicestimatedbreedingvalueselection.generalizedweightedgenomicestimatedbreedingvaluebinaryselection property)": [[130, "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueBinarySelection.nprogeny"]], "nselindiv (pybrops.breed.prot.sel.generalizedweightedgenomicestimatedbreedingvalueselection.generalizedweightedgenomicestimatedbreedingvaluebinaryselection property)": [[130, "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueBinarySelection.nselindiv"]], "ntrait (pybrops.breed.prot.sel.generalizedweightedgenomicestimatedbreedingvalueselection.generalizedweightedgenomicestimatedbreedingvaluebinaryselection property)": [[130, "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueBinarySelection.ntrait"]], "obj_trans (pybrops.breed.prot.sel.generalizedweightedgenomicestimatedbreedingvalueselection.generalizedweightedgenomicestimatedbreedingvaluebinaryselection property)": [[130, "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueBinarySelection.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.generalizedweightedgenomicestimatedbreedingvalueselection.generalizedweightedgenomicestimatedbreedingvaluebinaryselection property)": [[130, "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueBinarySelection.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.generalizedweightedgenomicestimatedbreedingvalueselection.generalizedweightedgenomicestimatedbreedingvaluebinaryselection property)": [[130, "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueBinarySelection.obj_wt"]], "problem() (pybrops.breed.prot.sel.generalizedweightedgenomicestimatedbreedingvalueselection.generalizedweightedgenomicestimatedbreedingvaluebinaryselection method)": [[130, "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueBinarySelection.problem"]], "rng (pybrops.breed.prot.sel.generalizedweightedgenomicestimatedbreedingvalueselection.generalizedweightedgenomicestimatedbreedingvaluebinaryselection property)": [[130, "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueBinarySelection.rng"]], "select() (pybrops.breed.prot.sel.generalizedweightedgenomicestimatedbreedingvalueselection.generalizedweightedgenomicestimatedbreedingvaluebinaryselection method)": [[130, "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueBinarySelection.select"]], "soalgo (pybrops.breed.prot.sel.generalizedweightedgenomicestimatedbreedingvalueselection.generalizedweightedgenomicestimatedbreedingvaluebinaryselection property)": [[130, "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueBinarySelection.soalgo"]], "sosolve() (pybrops.breed.prot.sel.generalizedweightedgenomicestimatedbreedingvalueselection.generalizedweightedgenomicestimatedbreedingvaluebinaryselection method)": [[130, "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueBinarySelection.sosolve"]], "generalizedweightedgenomicestimatedbreedingvalueintegerselection (class in pybrops.breed.prot.sel.generalizedweightedgenomicestimatedbreedingvalueselection)": [[131, "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueIntegerSelection"]], "alpha (pybrops.breed.prot.sel.generalizedweightedgenomicestimatedbreedingvalueselection.generalizedweightedgenomicestimatedbreedingvalueintegerselection property)": [[131, "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueIntegerSelection.alpha"]], "eqcv_trans (pybrops.breed.prot.sel.generalizedweightedgenomicestimatedbreedingvalueselection.generalizedweightedgenomicestimatedbreedingvalueintegerselection property)": [[131, "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueIntegerSelection.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.generalizedweightedgenomicestimatedbreedingvalueselection.generalizedweightedgenomicestimatedbreedingvalueintegerselection property)": [[131, "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueIntegerSelection.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.generalizedweightedgenomicestimatedbreedingvalueselection.generalizedweightedgenomicestimatedbreedingvalueintegerselection property)": [[131, "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueIntegerSelection.eqcv_wt"]], "ineqcv_trans (pybrops.breed.prot.sel.generalizedweightedgenomicestimatedbreedingvalueselection.generalizedweightedgenomicestimatedbreedingvalueintegerselection property)": [[131, "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueIntegerSelection.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.generalizedweightedgenomicestimatedbreedingvalueselection.generalizedweightedgenomicestimatedbreedingvalueintegerselection property)": [[131, "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueIntegerSelection.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.generalizedweightedgenomicestimatedbreedingvalueselection.generalizedweightedgenomicestimatedbreedingvalueintegerselection property)": [[131, "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueIntegerSelection.ineqcv_wt"]], "moalgo (pybrops.breed.prot.sel.generalizedweightedgenomicestimatedbreedingvalueselection.generalizedweightedgenomicestimatedbreedingvalueintegerselection property)": [[131, "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueIntegerSelection.moalgo"]], "mosolve() (pybrops.breed.prot.sel.generalizedweightedgenomicestimatedbreedingvalueselection.generalizedweightedgenomicestimatedbreedingvalueintegerselection method)": [[131, "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueIntegerSelection.mosolve"]], "ncross (pybrops.breed.prot.sel.generalizedweightedgenomicestimatedbreedingvalueselection.generalizedweightedgenomicestimatedbreedingvalueintegerselection property)": [[131, "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueIntegerSelection.ncross"]], "ndset_trans (pybrops.breed.prot.sel.generalizedweightedgenomicestimatedbreedingvalueselection.generalizedweightedgenomicestimatedbreedingvalueintegerselection property)": [[131, "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueIntegerSelection.ndset_trans"]], "ndset_trans_kwargs (pybrops.breed.prot.sel.generalizedweightedgenomicestimatedbreedingvalueselection.generalizedweightedgenomicestimatedbreedingvalueintegerselection property)": [[131, "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueIntegerSelection.ndset_trans_kwargs"]], "ndset_wt (pybrops.breed.prot.sel.generalizedweightedgenomicestimatedbreedingvalueselection.generalizedweightedgenomicestimatedbreedingvalueintegerselection property)": [[131, "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueIntegerSelection.ndset_wt"]], "neqcv (pybrops.breed.prot.sel.generalizedweightedgenomicestimatedbreedingvalueselection.generalizedweightedgenomicestimatedbreedingvalueintegerselection property)": [[131, "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueIntegerSelection.neqcv"]], "nineqcv (pybrops.breed.prot.sel.generalizedweightedgenomicestimatedbreedingvalueselection.generalizedweightedgenomicestimatedbreedingvalueintegerselection property)": [[131, "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueIntegerSelection.nineqcv"]], "nmating (pybrops.breed.prot.sel.generalizedweightedgenomicestimatedbreedingvalueselection.generalizedweightedgenomicestimatedbreedingvalueintegerselection property)": [[131, "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueIntegerSelection.nmating"]], "nobj (pybrops.breed.prot.sel.generalizedweightedgenomicestimatedbreedingvalueselection.generalizedweightedgenomicestimatedbreedingvalueintegerselection property)": [[131, "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueIntegerSelection.nobj"]], "nparent (pybrops.breed.prot.sel.generalizedweightedgenomicestimatedbreedingvalueselection.generalizedweightedgenomicestimatedbreedingvalueintegerselection property)": [[131, "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueIntegerSelection.nparent"]], "nprogeny (pybrops.breed.prot.sel.generalizedweightedgenomicestimatedbreedingvalueselection.generalizedweightedgenomicestimatedbreedingvalueintegerselection property)": [[131, "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueIntegerSelection.nprogeny"]], "nselindiv (pybrops.breed.prot.sel.generalizedweightedgenomicestimatedbreedingvalueselection.generalizedweightedgenomicestimatedbreedingvalueintegerselection property)": [[131, "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueIntegerSelection.nselindiv"]], "ntrait (pybrops.breed.prot.sel.generalizedweightedgenomicestimatedbreedingvalueselection.generalizedweightedgenomicestimatedbreedingvalueintegerselection property)": [[131, "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueIntegerSelection.ntrait"]], "obj_trans (pybrops.breed.prot.sel.generalizedweightedgenomicestimatedbreedingvalueselection.generalizedweightedgenomicestimatedbreedingvalueintegerselection property)": [[131, "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueIntegerSelection.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.generalizedweightedgenomicestimatedbreedingvalueselection.generalizedweightedgenomicestimatedbreedingvalueintegerselection property)": [[131, "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueIntegerSelection.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.generalizedweightedgenomicestimatedbreedingvalueselection.generalizedweightedgenomicestimatedbreedingvalueintegerselection property)": [[131, "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueIntegerSelection.obj_wt"]], "problem() (pybrops.breed.prot.sel.generalizedweightedgenomicestimatedbreedingvalueselection.generalizedweightedgenomicestimatedbreedingvalueintegerselection method)": [[131, "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueIntegerSelection.problem"]], "rng (pybrops.breed.prot.sel.generalizedweightedgenomicestimatedbreedingvalueselection.generalizedweightedgenomicestimatedbreedingvalueintegerselection property)": [[131, "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueIntegerSelection.rng"]], "select() (pybrops.breed.prot.sel.generalizedweightedgenomicestimatedbreedingvalueselection.generalizedweightedgenomicestimatedbreedingvalueintegerselection method)": [[131, "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueIntegerSelection.select"]], "soalgo (pybrops.breed.prot.sel.generalizedweightedgenomicestimatedbreedingvalueselection.generalizedweightedgenomicestimatedbreedingvalueintegerselection property)": [[131, "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueIntegerSelection.soalgo"]], "sosolve() (pybrops.breed.prot.sel.generalizedweightedgenomicestimatedbreedingvalueselection.generalizedweightedgenomicestimatedbreedingvalueintegerselection method)": [[131, "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueIntegerSelection.sosolve"]], "generalizedweightedgenomicestimatedbreedingvaluerealselection (class in pybrops.breed.prot.sel.generalizedweightedgenomicestimatedbreedingvalueselection)": [[132, "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueRealSelection"]], "alpha (pybrops.breed.prot.sel.generalizedweightedgenomicestimatedbreedingvalueselection.generalizedweightedgenomicestimatedbreedingvaluerealselection property)": [[132, "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueRealSelection.alpha"]], "eqcv_trans (pybrops.breed.prot.sel.generalizedweightedgenomicestimatedbreedingvalueselection.generalizedweightedgenomicestimatedbreedingvaluerealselection property)": [[132, "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueRealSelection.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.generalizedweightedgenomicestimatedbreedingvalueselection.generalizedweightedgenomicestimatedbreedingvaluerealselection property)": [[132, "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueRealSelection.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.generalizedweightedgenomicestimatedbreedingvalueselection.generalizedweightedgenomicestimatedbreedingvaluerealselection property)": [[132, "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueRealSelection.eqcv_wt"]], "ineqcv_trans (pybrops.breed.prot.sel.generalizedweightedgenomicestimatedbreedingvalueselection.generalizedweightedgenomicestimatedbreedingvaluerealselection property)": [[132, "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueRealSelection.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.generalizedweightedgenomicestimatedbreedingvalueselection.generalizedweightedgenomicestimatedbreedingvaluerealselection property)": [[132, "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueRealSelection.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.generalizedweightedgenomicestimatedbreedingvalueselection.generalizedweightedgenomicestimatedbreedingvaluerealselection property)": [[132, "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueRealSelection.ineqcv_wt"]], "moalgo (pybrops.breed.prot.sel.generalizedweightedgenomicestimatedbreedingvalueselection.generalizedweightedgenomicestimatedbreedingvaluerealselection property)": [[132, "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueRealSelection.moalgo"]], "mosolve() (pybrops.breed.prot.sel.generalizedweightedgenomicestimatedbreedingvalueselection.generalizedweightedgenomicestimatedbreedingvaluerealselection method)": [[132, "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueRealSelection.mosolve"]], "ncross (pybrops.breed.prot.sel.generalizedweightedgenomicestimatedbreedingvalueselection.generalizedweightedgenomicestimatedbreedingvaluerealselection property)": [[132, "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueRealSelection.ncross"]], "ndset_trans (pybrops.breed.prot.sel.generalizedweightedgenomicestimatedbreedingvalueselection.generalizedweightedgenomicestimatedbreedingvaluerealselection property)": [[132, "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueRealSelection.ndset_trans"]], "ndset_trans_kwargs (pybrops.breed.prot.sel.generalizedweightedgenomicestimatedbreedingvalueselection.generalizedweightedgenomicestimatedbreedingvaluerealselection property)": [[132, "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueRealSelection.ndset_trans_kwargs"]], "ndset_wt (pybrops.breed.prot.sel.generalizedweightedgenomicestimatedbreedingvalueselection.generalizedweightedgenomicestimatedbreedingvaluerealselection property)": [[132, "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueRealSelection.ndset_wt"]], "neqcv (pybrops.breed.prot.sel.generalizedweightedgenomicestimatedbreedingvalueselection.generalizedweightedgenomicestimatedbreedingvaluerealselection property)": [[132, "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueRealSelection.neqcv"]], "nineqcv (pybrops.breed.prot.sel.generalizedweightedgenomicestimatedbreedingvalueselection.generalizedweightedgenomicestimatedbreedingvaluerealselection property)": [[132, "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueRealSelection.nineqcv"]], "nmating (pybrops.breed.prot.sel.generalizedweightedgenomicestimatedbreedingvalueselection.generalizedweightedgenomicestimatedbreedingvaluerealselection property)": [[132, "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueRealSelection.nmating"]], "nobj (pybrops.breed.prot.sel.generalizedweightedgenomicestimatedbreedingvalueselection.generalizedweightedgenomicestimatedbreedingvaluerealselection property)": [[132, "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueRealSelection.nobj"]], "nparent (pybrops.breed.prot.sel.generalizedweightedgenomicestimatedbreedingvalueselection.generalizedweightedgenomicestimatedbreedingvaluerealselection property)": [[132, "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueRealSelection.nparent"]], "nprogeny (pybrops.breed.prot.sel.generalizedweightedgenomicestimatedbreedingvalueselection.generalizedweightedgenomicestimatedbreedingvaluerealselection property)": [[132, "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueRealSelection.nprogeny"]], "nselindiv (pybrops.breed.prot.sel.generalizedweightedgenomicestimatedbreedingvalueselection.generalizedweightedgenomicestimatedbreedingvaluerealselection property)": [[132, "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueRealSelection.nselindiv"]], "ntrait (pybrops.breed.prot.sel.generalizedweightedgenomicestimatedbreedingvalueselection.generalizedweightedgenomicestimatedbreedingvaluerealselection property)": [[132, "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueRealSelection.ntrait"]], "obj_trans (pybrops.breed.prot.sel.generalizedweightedgenomicestimatedbreedingvalueselection.generalizedweightedgenomicestimatedbreedingvaluerealselection property)": [[132, "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueRealSelection.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.generalizedweightedgenomicestimatedbreedingvalueselection.generalizedweightedgenomicestimatedbreedingvaluerealselection property)": [[132, "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueRealSelection.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.generalizedweightedgenomicestimatedbreedingvalueselection.generalizedweightedgenomicestimatedbreedingvaluerealselection property)": [[132, "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueRealSelection.obj_wt"]], "problem() (pybrops.breed.prot.sel.generalizedweightedgenomicestimatedbreedingvalueselection.generalizedweightedgenomicestimatedbreedingvaluerealselection method)": [[132, "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueRealSelection.problem"]], "rng (pybrops.breed.prot.sel.generalizedweightedgenomicestimatedbreedingvalueselection.generalizedweightedgenomicestimatedbreedingvaluerealselection property)": [[132, "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueRealSelection.rng"]], "select() (pybrops.breed.prot.sel.generalizedweightedgenomicestimatedbreedingvalueselection.generalizedweightedgenomicestimatedbreedingvaluerealselection method)": [[132, "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueRealSelection.select"]], "soalgo (pybrops.breed.prot.sel.generalizedweightedgenomicestimatedbreedingvalueselection.generalizedweightedgenomicestimatedbreedingvaluerealselection property)": [[132, "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueRealSelection.soalgo"]], "sosolve() (pybrops.breed.prot.sel.generalizedweightedgenomicestimatedbreedingvalueselection.generalizedweightedgenomicestimatedbreedingvaluerealselection method)": [[132, "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueRealSelection.sosolve"]], "generalizedweightedgenomicestimatedbreedingvalueselectionmixin (class in pybrops.breed.prot.sel.generalizedweightedgenomicestimatedbreedingvalueselection)": [[133, "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionMixin"]], "alpha (pybrops.breed.prot.sel.generalizedweightedgenomicestimatedbreedingvalueselection.generalizedweightedgenomicestimatedbreedingvalueselectionmixin property)": [[133, "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionMixin.alpha"]], "ntrait (pybrops.breed.prot.sel.generalizedweightedgenomicestimatedbreedingvalueselection.generalizedweightedgenomicestimatedbreedingvalueselectionmixin property)": [[133, "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionMixin.ntrait"]], "generalizedweightedgenomicestimatedbreedingvaluesubsetselection (class in pybrops.breed.prot.sel.generalizedweightedgenomicestimatedbreedingvalueselection)": [[134, "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueSubsetSelection"]], "alpha (pybrops.breed.prot.sel.generalizedweightedgenomicestimatedbreedingvalueselection.generalizedweightedgenomicestimatedbreedingvaluesubsetselection property)": [[134, "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueSubsetSelection.alpha"]], "eqcv_trans (pybrops.breed.prot.sel.generalizedweightedgenomicestimatedbreedingvalueselection.generalizedweightedgenomicestimatedbreedingvaluesubsetselection property)": [[134, "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueSubsetSelection.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.generalizedweightedgenomicestimatedbreedingvalueselection.generalizedweightedgenomicestimatedbreedingvaluesubsetselection property)": [[134, "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueSubsetSelection.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.generalizedweightedgenomicestimatedbreedingvalueselection.generalizedweightedgenomicestimatedbreedingvaluesubsetselection property)": [[134, "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueSubsetSelection.eqcv_wt"]], "ineqcv_trans (pybrops.breed.prot.sel.generalizedweightedgenomicestimatedbreedingvalueselection.generalizedweightedgenomicestimatedbreedingvaluesubsetselection property)": [[134, "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueSubsetSelection.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.generalizedweightedgenomicestimatedbreedingvalueselection.generalizedweightedgenomicestimatedbreedingvaluesubsetselection property)": [[134, "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueSubsetSelection.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.generalizedweightedgenomicestimatedbreedingvalueselection.generalizedweightedgenomicestimatedbreedingvaluesubsetselection property)": [[134, "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueSubsetSelection.ineqcv_wt"]], "moalgo (pybrops.breed.prot.sel.generalizedweightedgenomicestimatedbreedingvalueselection.generalizedweightedgenomicestimatedbreedingvaluesubsetselection property)": [[134, "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueSubsetSelection.moalgo"]], "mosolve() (pybrops.breed.prot.sel.generalizedweightedgenomicestimatedbreedingvalueselection.generalizedweightedgenomicestimatedbreedingvaluesubsetselection method)": [[134, "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueSubsetSelection.mosolve"]], "ncross (pybrops.breed.prot.sel.generalizedweightedgenomicestimatedbreedingvalueselection.generalizedweightedgenomicestimatedbreedingvaluesubsetselection property)": [[134, "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueSubsetSelection.ncross"]], "ndset_trans (pybrops.breed.prot.sel.generalizedweightedgenomicestimatedbreedingvalueselection.generalizedweightedgenomicestimatedbreedingvaluesubsetselection property)": [[134, "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueSubsetSelection.ndset_trans"]], "ndset_trans_kwargs (pybrops.breed.prot.sel.generalizedweightedgenomicestimatedbreedingvalueselection.generalizedweightedgenomicestimatedbreedingvaluesubsetselection property)": [[134, "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueSubsetSelection.ndset_trans_kwargs"]], "ndset_wt (pybrops.breed.prot.sel.generalizedweightedgenomicestimatedbreedingvalueselection.generalizedweightedgenomicestimatedbreedingvaluesubsetselection property)": [[134, "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueSubsetSelection.ndset_wt"]], "neqcv (pybrops.breed.prot.sel.generalizedweightedgenomicestimatedbreedingvalueselection.generalizedweightedgenomicestimatedbreedingvaluesubsetselection property)": [[134, "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueSubsetSelection.neqcv"]], "nineqcv (pybrops.breed.prot.sel.generalizedweightedgenomicestimatedbreedingvalueselection.generalizedweightedgenomicestimatedbreedingvaluesubsetselection property)": [[134, "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueSubsetSelection.nineqcv"]], "nmating (pybrops.breed.prot.sel.generalizedweightedgenomicestimatedbreedingvalueselection.generalizedweightedgenomicestimatedbreedingvaluesubsetselection property)": [[134, "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueSubsetSelection.nmating"]], "nobj (pybrops.breed.prot.sel.generalizedweightedgenomicestimatedbreedingvalueselection.generalizedweightedgenomicestimatedbreedingvaluesubsetselection property)": [[134, "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueSubsetSelection.nobj"]], "nparent (pybrops.breed.prot.sel.generalizedweightedgenomicestimatedbreedingvalueselection.generalizedweightedgenomicestimatedbreedingvaluesubsetselection property)": [[134, "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueSubsetSelection.nparent"]], "nprogeny (pybrops.breed.prot.sel.generalizedweightedgenomicestimatedbreedingvalueselection.generalizedweightedgenomicestimatedbreedingvaluesubsetselection property)": [[134, "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueSubsetSelection.nprogeny"]], "nselindiv (pybrops.breed.prot.sel.generalizedweightedgenomicestimatedbreedingvalueselection.generalizedweightedgenomicestimatedbreedingvaluesubsetselection property)": [[134, "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueSubsetSelection.nselindiv"]], "ntrait (pybrops.breed.prot.sel.generalizedweightedgenomicestimatedbreedingvalueselection.generalizedweightedgenomicestimatedbreedingvaluesubsetselection property)": [[134, "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueSubsetSelection.ntrait"]], "obj_trans (pybrops.breed.prot.sel.generalizedweightedgenomicestimatedbreedingvalueselection.generalizedweightedgenomicestimatedbreedingvaluesubsetselection property)": [[134, "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueSubsetSelection.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.generalizedweightedgenomicestimatedbreedingvalueselection.generalizedweightedgenomicestimatedbreedingvaluesubsetselection property)": [[134, "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueSubsetSelection.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.generalizedweightedgenomicestimatedbreedingvalueselection.generalizedweightedgenomicestimatedbreedingvaluesubsetselection property)": [[134, "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueSubsetSelection.obj_wt"]], "problem() (pybrops.breed.prot.sel.generalizedweightedgenomicestimatedbreedingvalueselection.generalizedweightedgenomicestimatedbreedingvaluesubsetselection method)": [[134, "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueSubsetSelection.problem"]], "rng (pybrops.breed.prot.sel.generalizedweightedgenomicestimatedbreedingvalueselection.generalizedweightedgenomicestimatedbreedingvaluesubsetselection property)": [[134, "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueSubsetSelection.rng"]], "select() (pybrops.breed.prot.sel.generalizedweightedgenomicestimatedbreedingvalueselection.generalizedweightedgenomicestimatedbreedingvaluesubsetselection method)": [[134, "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueSubsetSelection.select"]], "soalgo (pybrops.breed.prot.sel.generalizedweightedgenomicestimatedbreedingvalueselection.generalizedweightedgenomicestimatedbreedingvaluesubsetselection property)": [[134, "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueSubsetSelection.soalgo"]], "sosolve() (pybrops.breed.prot.sel.generalizedweightedgenomicestimatedbreedingvalueselection.generalizedweightedgenomicestimatedbreedingvaluesubsetselection method)": [[134, "pybrops.breed.prot.sel.GeneralizedWeightedGenomicEstimatedBreedingValueSelection.GeneralizedWeightedGenomicEstimatedBreedingValueSubsetSelection.sosolve"]], "pybrops.breed.prot.sel.genomicestimatedbreedingvalueselection": [[135, "module-pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection"]], "genomicestimatedbreedingvaluebinaryselection (class in pybrops.breed.prot.sel.genomicestimatedbreedingvalueselection)": [[136, "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueBinarySelection"]], "eqcv_trans (pybrops.breed.prot.sel.genomicestimatedbreedingvalueselection.genomicestimatedbreedingvaluebinaryselection property)": [[136, "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueBinarySelection.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.genomicestimatedbreedingvalueselection.genomicestimatedbreedingvaluebinaryselection property)": [[136, "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueBinarySelection.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.genomicestimatedbreedingvalueselection.genomicestimatedbreedingvaluebinaryselection property)": [[136, "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueBinarySelection.eqcv_wt"]], "ineqcv_trans (pybrops.breed.prot.sel.genomicestimatedbreedingvalueselection.genomicestimatedbreedingvaluebinaryselection property)": [[136, "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueBinarySelection.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.genomicestimatedbreedingvalueselection.genomicestimatedbreedingvaluebinaryselection property)": [[136, "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueBinarySelection.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.genomicestimatedbreedingvalueselection.genomicestimatedbreedingvaluebinaryselection property)": [[136, "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueBinarySelection.ineqcv_wt"]], "moalgo (pybrops.breed.prot.sel.genomicestimatedbreedingvalueselection.genomicestimatedbreedingvaluebinaryselection property)": [[136, "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueBinarySelection.moalgo"]], "mosolve() (pybrops.breed.prot.sel.genomicestimatedbreedingvalueselection.genomicestimatedbreedingvaluebinaryselection method)": [[136, "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueBinarySelection.mosolve"]], "ncross (pybrops.breed.prot.sel.genomicestimatedbreedingvalueselection.genomicestimatedbreedingvaluebinaryselection property)": [[136, "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueBinarySelection.ncross"]], "ndset_trans (pybrops.breed.prot.sel.genomicestimatedbreedingvalueselection.genomicestimatedbreedingvaluebinaryselection property)": [[136, "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueBinarySelection.ndset_trans"]], "ndset_trans_kwargs (pybrops.breed.prot.sel.genomicestimatedbreedingvalueselection.genomicestimatedbreedingvaluebinaryselection property)": [[136, "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueBinarySelection.ndset_trans_kwargs"]], "ndset_wt (pybrops.breed.prot.sel.genomicestimatedbreedingvalueselection.genomicestimatedbreedingvaluebinaryselection property)": [[136, "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueBinarySelection.ndset_wt"]], "neqcv (pybrops.breed.prot.sel.genomicestimatedbreedingvalueselection.genomicestimatedbreedingvaluebinaryselection property)": [[136, "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueBinarySelection.neqcv"]], "nineqcv (pybrops.breed.prot.sel.genomicestimatedbreedingvalueselection.genomicestimatedbreedingvaluebinaryselection property)": [[136, "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueBinarySelection.nineqcv"]], "nmating (pybrops.breed.prot.sel.genomicestimatedbreedingvalueselection.genomicestimatedbreedingvaluebinaryselection property)": [[136, "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueBinarySelection.nmating"]], "nobj (pybrops.breed.prot.sel.genomicestimatedbreedingvalueselection.genomicestimatedbreedingvaluebinaryselection property)": [[136, "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueBinarySelection.nobj"]], "nparent (pybrops.breed.prot.sel.genomicestimatedbreedingvalueselection.genomicestimatedbreedingvaluebinaryselection property)": [[136, "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueBinarySelection.nparent"]], "nprogeny (pybrops.breed.prot.sel.genomicestimatedbreedingvalueselection.genomicestimatedbreedingvaluebinaryselection property)": [[136, "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueBinarySelection.nprogeny"]], "nselindiv (pybrops.breed.prot.sel.genomicestimatedbreedingvalueselection.genomicestimatedbreedingvaluebinaryselection property)": [[136, "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueBinarySelection.nselindiv"]], "ntrait (pybrops.breed.prot.sel.genomicestimatedbreedingvalueselection.genomicestimatedbreedingvaluebinaryselection property)": [[136, "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueBinarySelection.ntrait"]], "obj_trans (pybrops.breed.prot.sel.genomicestimatedbreedingvalueselection.genomicestimatedbreedingvaluebinaryselection property)": [[136, "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueBinarySelection.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.genomicestimatedbreedingvalueselection.genomicestimatedbreedingvaluebinaryselection property)": [[136, "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueBinarySelection.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.genomicestimatedbreedingvalueselection.genomicestimatedbreedingvaluebinaryselection property)": [[136, "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueBinarySelection.obj_wt"]], "problem() (pybrops.breed.prot.sel.genomicestimatedbreedingvalueselection.genomicestimatedbreedingvaluebinaryselection method)": [[136, "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueBinarySelection.problem"]], "rng (pybrops.breed.prot.sel.genomicestimatedbreedingvalueselection.genomicestimatedbreedingvaluebinaryselection property)": [[136, "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueBinarySelection.rng"]], "select() (pybrops.breed.prot.sel.genomicestimatedbreedingvalueselection.genomicestimatedbreedingvaluebinaryselection method)": [[136, "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueBinarySelection.select"]], "soalgo (pybrops.breed.prot.sel.genomicestimatedbreedingvalueselection.genomicestimatedbreedingvaluebinaryselection property)": [[136, "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueBinarySelection.soalgo"]], "sosolve() (pybrops.breed.prot.sel.genomicestimatedbreedingvalueselection.genomicestimatedbreedingvaluebinaryselection method)": [[136, "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueBinarySelection.sosolve"]], "unscale (pybrops.breed.prot.sel.genomicestimatedbreedingvalueselection.genomicestimatedbreedingvaluebinaryselection property)": [[136, "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueBinarySelection.unscale"]], "genomicestimatedbreedingvalueintegerselection (class in pybrops.breed.prot.sel.genomicestimatedbreedingvalueselection)": [[137, "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueIntegerSelection"]], "eqcv_trans (pybrops.breed.prot.sel.genomicestimatedbreedingvalueselection.genomicestimatedbreedingvalueintegerselection property)": [[137, "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueIntegerSelection.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.genomicestimatedbreedingvalueselection.genomicestimatedbreedingvalueintegerselection property)": [[137, "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueIntegerSelection.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.genomicestimatedbreedingvalueselection.genomicestimatedbreedingvalueintegerselection property)": [[137, "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueIntegerSelection.eqcv_wt"]], "ineqcv_trans (pybrops.breed.prot.sel.genomicestimatedbreedingvalueselection.genomicestimatedbreedingvalueintegerselection property)": [[137, "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueIntegerSelection.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.genomicestimatedbreedingvalueselection.genomicestimatedbreedingvalueintegerselection property)": [[137, "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueIntegerSelection.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.genomicestimatedbreedingvalueselection.genomicestimatedbreedingvalueintegerselection property)": [[137, "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueIntegerSelection.ineqcv_wt"]], "moalgo (pybrops.breed.prot.sel.genomicestimatedbreedingvalueselection.genomicestimatedbreedingvalueintegerselection property)": [[137, "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueIntegerSelection.moalgo"]], "mosolve() (pybrops.breed.prot.sel.genomicestimatedbreedingvalueselection.genomicestimatedbreedingvalueintegerselection method)": [[137, "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueIntegerSelection.mosolve"]], "ncross (pybrops.breed.prot.sel.genomicestimatedbreedingvalueselection.genomicestimatedbreedingvalueintegerselection property)": [[137, "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueIntegerSelection.ncross"]], "ndset_trans (pybrops.breed.prot.sel.genomicestimatedbreedingvalueselection.genomicestimatedbreedingvalueintegerselection property)": [[137, "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueIntegerSelection.ndset_trans"]], "ndset_trans_kwargs (pybrops.breed.prot.sel.genomicestimatedbreedingvalueselection.genomicestimatedbreedingvalueintegerselection property)": [[137, "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueIntegerSelection.ndset_trans_kwargs"]], "ndset_wt (pybrops.breed.prot.sel.genomicestimatedbreedingvalueselection.genomicestimatedbreedingvalueintegerselection property)": [[137, "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueIntegerSelection.ndset_wt"]], "neqcv (pybrops.breed.prot.sel.genomicestimatedbreedingvalueselection.genomicestimatedbreedingvalueintegerselection property)": [[137, "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueIntegerSelection.neqcv"]], "nineqcv (pybrops.breed.prot.sel.genomicestimatedbreedingvalueselection.genomicestimatedbreedingvalueintegerselection property)": [[137, "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueIntegerSelection.nineqcv"]], "nmating (pybrops.breed.prot.sel.genomicestimatedbreedingvalueselection.genomicestimatedbreedingvalueintegerselection property)": [[137, "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueIntegerSelection.nmating"]], "nobj (pybrops.breed.prot.sel.genomicestimatedbreedingvalueselection.genomicestimatedbreedingvalueintegerselection property)": [[137, "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueIntegerSelection.nobj"]], "nparent (pybrops.breed.prot.sel.genomicestimatedbreedingvalueselection.genomicestimatedbreedingvalueintegerselection property)": [[137, "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueIntegerSelection.nparent"]], "nprogeny (pybrops.breed.prot.sel.genomicestimatedbreedingvalueselection.genomicestimatedbreedingvalueintegerselection property)": [[137, "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueIntegerSelection.nprogeny"]], "nselindiv (pybrops.breed.prot.sel.genomicestimatedbreedingvalueselection.genomicestimatedbreedingvalueintegerselection property)": [[137, "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueIntegerSelection.nselindiv"]], "ntrait (pybrops.breed.prot.sel.genomicestimatedbreedingvalueselection.genomicestimatedbreedingvalueintegerselection property)": [[137, "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueIntegerSelection.ntrait"]], "obj_trans (pybrops.breed.prot.sel.genomicestimatedbreedingvalueselection.genomicestimatedbreedingvalueintegerselection property)": [[137, "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueIntegerSelection.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.genomicestimatedbreedingvalueselection.genomicestimatedbreedingvalueintegerselection property)": [[137, "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueIntegerSelection.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.genomicestimatedbreedingvalueselection.genomicestimatedbreedingvalueintegerselection property)": [[137, "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueIntegerSelection.obj_wt"]], "problem() (pybrops.breed.prot.sel.genomicestimatedbreedingvalueselection.genomicestimatedbreedingvalueintegerselection method)": [[137, "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueIntegerSelection.problem"]], "rng (pybrops.breed.prot.sel.genomicestimatedbreedingvalueselection.genomicestimatedbreedingvalueintegerselection property)": [[137, "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueIntegerSelection.rng"]], "select() (pybrops.breed.prot.sel.genomicestimatedbreedingvalueselection.genomicestimatedbreedingvalueintegerselection method)": [[137, "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueIntegerSelection.select"]], "soalgo (pybrops.breed.prot.sel.genomicestimatedbreedingvalueselection.genomicestimatedbreedingvalueintegerselection property)": [[137, "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueIntegerSelection.soalgo"]], "sosolve() (pybrops.breed.prot.sel.genomicestimatedbreedingvalueselection.genomicestimatedbreedingvalueintegerselection method)": [[137, "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueIntegerSelection.sosolve"]], "unscale (pybrops.breed.prot.sel.genomicestimatedbreedingvalueselection.genomicestimatedbreedingvalueintegerselection property)": [[137, "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueIntegerSelection.unscale"]], "genomicestimatedbreedingvaluerealselection (class in pybrops.breed.prot.sel.genomicestimatedbreedingvalueselection)": [[138, "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueRealSelection"]], "eqcv_trans (pybrops.breed.prot.sel.genomicestimatedbreedingvalueselection.genomicestimatedbreedingvaluerealselection property)": [[138, "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueRealSelection.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.genomicestimatedbreedingvalueselection.genomicestimatedbreedingvaluerealselection property)": [[138, "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueRealSelection.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.genomicestimatedbreedingvalueselection.genomicestimatedbreedingvaluerealselection property)": [[138, "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueRealSelection.eqcv_wt"]], "ineqcv_trans (pybrops.breed.prot.sel.genomicestimatedbreedingvalueselection.genomicestimatedbreedingvaluerealselection property)": [[138, "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueRealSelection.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.genomicestimatedbreedingvalueselection.genomicestimatedbreedingvaluerealselection property)": [[138, "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueRealSelection.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.genomicestimatedbreedingvalueselection.genomicestimatedbreedingvaluerealselection property)": [[138, "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueRealSelection.ineqcv_wt"]], "moalgo (pybrops.breed.prot.sel.genomicestimatedbreedingvalueselection.genomicestimatedbreedingvaluerealselection property)": [[138, "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueRealSelection.moalgo"]], "mosolve() (pybrops.breed.prot.sel.genomicestimatedbreedingvalueselection.genomicestimatedbreedingvaluerealselection method)": [[138, "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueRealSelection.mosolve"]], "ncross (pybrops.breed.prot.sel.genomicestimatedbreedingvalueselection.genomicestimatedbreedingvaluerealselection property)": [[138, "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueRealSelection.ncross"]], "ndset_trans (pybrops.breed.prot.sel.genomicestimatedbreedingvalueselection.genomicestimatedbreedingvaluerealselection property)": [[138, "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueRealSelection.ndset_trans"]], "ndset_trans_kwargs (pybrops.breed.prot.sel.genomicestimatedbreedingvalueselection.genomicestimatedbreedingvaluerealselection property)": [[138, "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueRealSelection.ndset_trans_kwargs"]], "ndset_wt (pybrops.breed.prot.sel.genomicestimatedbreedingvalueselection.genomicestimatedbreedingvaluerealselection property)": [[138, "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueRealSelection.ndset_wt"]], "neqcv (pybrops.breed.prot.sel.genomicestimatedbreedingvalueselection.genomicestimatedbreedingvaluerealselection property)": [[138, "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueRealSelection.neqcv"]], "nineqcv (pybrops.breed.prot.sel.genomicestimatedbreedingvalueselection.genomicestimatedbreedingvaluerealselection property)": [[138, "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueRealSelection.nineqcv"]], "nmating (pybrops.breed.prot.sel.genomicestimatedbreedingvalueselection.genomicestimatedbreedingvaluerealselection property)": [[138, "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueRealSelection.nmating"]], "nobj (pybrops.breed.prot.sel.genomicestimatedbreedingvalueselection.genomicestimatedbreedingvaluerealselection property)": [[138, "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueRealSelection.nobj"]], "nparent (pybrops.breed.prot.sel.genomicestimatedbreedingvalueselection.genomicestimatedbreedingvaluerealselection property)": [[138, "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueRealSelection.nparent"]], "nprogeny (pybrops.breed.prot.sel.genomicestimatedbreedingvalueselection.genomicestimatedbreedingvaluerealselection property)": [[138, "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueRealSelection.nprogeny"]], "nselindiv (pybrops.breed.prot.sel.genomicestimatedbreedingvalueselection.genomicestimatedbreedingvaluerealselection property)": [[138, "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueRealSelection.nselindiv"]], "ntrait (pybrops.breed.prot.sel.genomicestimatedbreedingvalueselection.genomicestimatedbreedingvaluerealselection property)": [[138, "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueRealSelection.ntrait"]], "obj_trans (pybrops.breed.prot.sel.genomicestimatedbreedingvalueselection.genomicestimatedbreedingvaluerealselection property)": [[138, "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueRealSelection.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.genomicestimatedbreedingvalueselection.genomicestimatedbreedingvaluerealselection property)": [[138, "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueRealSelection.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.genomicestimatedbreedingvalueselection.genomicestimatedbreedingvaluerealselection property)": [[138, "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueRealSelection.obj_wt"]], "problem() (pybrops.breed.prot.sel.genomicestimatedbreedingvalueselection.genomicestimatedbreedingvaluerealselection method)": [[138, "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueRealSelection.problem"]], "rng (pybrops.breed.prot.sel.genomicestimatedbreedingvalueselection.genomicestimatedbreedingvaluerealselection property)": [[138, "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueRealSelection.rng"]], "select() (pybrops.breed.prot.sel.genomicestimatedbreedingvalueselection.genomicestimatedbreedingvaluerealselection method)": [[138, "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueRealSelection.select"]], "soalgo (pybrops.breed.prot.sel.genomicestimatedbreedingvalueselection.genomicestimatedbreedingvaluerealselection property)": [[138, "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueRealSelection.soalgo"]], "sosolve() (pybrops.breed.prot.sel.genomicestimatedbreedingvalueselection.genomicestimatedbreedingvaluerealselection method)": [[138, "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueRealSelection.sosolve"]], "unscale (pybrops.breed.prot.sel.genomicestimatedbreedingvalueselection.genomicestimatedbreedingvaluerealselection property)": [[138, "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueRealSelection.unscale"]], "genomicestimatedbreedingvalueselectionmixin (class in pybrops.breed.prot.sel.genomicestimatedbreedingvalueselection)": [[139, "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueSelectionMixin"]], "ntrait (pybrops.breed.prot.sel.genomicestimatedbreedingvalueselection.genomicestimatedbreedingvalueselectionmixin property)": [[139, "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueSelectionMixin.ntrait"]], "unscale (pybrops.breed.prot.sel.genomicestimatedbreedingvalueselection.genomicestimatedbreedingvalueselectionmixin property)": [[139, "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueSelectionMixin.unscale"]], "genomicestimatedbreedingvaluesubsetselection (class in pybrops.breed.prot.sel.genomicestimatedbreedingvalueselection)": [[140, "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueSubsetSelection"]], "eqcv_trans (pybrops.breed.prot.sel.genomicestimatedbreedingvalueselection.genomicestimatedbreedingvaluesubsetselection property)": [[140, "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueSubsetSelection.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.genomicestimatedbreedingvalueselection.genomicestimatedbreedingvaluesubsetselection property)": [[140, "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueSubsetSelection.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.genomicestimatedbreedingvalueselection.genomicestimatedbreedingvaluesubsetselection property)": [[140, "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueSubsetSelection.eqcv_wt"]], "ineqcv_trans (pybrops.breed.prot.sel.genomicestimatedbreedingvalueselection.genomicestimatedbreedingvaluesubsetselection property)": [[140, "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueSubsetSelection.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.genomicestimatedbreedingvalueselection.genomicestimatedbreedingvaluesubsetselection property)": [[140, "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueSubsetSelection.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.genomicestimatedbreedingvalueselection.genomicestimatedbreedingvaluesubsetselection property)": [[140, "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueSubsetSelection.ineqcv_wt"]], "moalgo (pybrops.breed.prot.sel.genomicestimatedbreedingvalueselection.genomicestimatedbreedingvaluesubsetselection property)": [[140, "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueSubsetSelection.moalgo"]], "mosolve() (pybrops.breed.prot.sel.genomicestimatedbreedingvalueselection.genomicestimatedbreedingvaluesubsetselection method)": [[140, "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueSubsetSelection.mosolve"]], "ncross (pybrops.breed.prot.sel.genomicestimatedbreedingvalueselection.genomicestimatedbreedingvaluesubsetselection property)": [[140, "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueSubsetSelection.ncross"]], "ndset_trans (pybrops.breed.prot.sel.genomicestimatedbreedingvalueselection.genomicestimatedbreedingvaluesubsetselection property)": [[140, "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueSubsetSelection.ndset_trans"]], "ndset_trans_kwargs (pybrops.breed.prot.sel.genomicestimatedbreedingvalueselection.genomicestimatedbreedingvaluesubsetselection property)": [[140, "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueSubsetSelection.ndset_trans_kwargs"]], "ndset_wt (pybrops.breed.prot.sel.genomicestimatedbreedingvalueselection.genomicestimatedbreedingvaluesubsetselection property)": [[140, "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueSubsetSelection.ndset_wt"]], "neqcv (pybrops.breed.prot.sel.genomicestimatedbreedingvalueselection.genomicestimatedbreedingvaluesubsetselection property)": [[140, "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueSubsetSelection.neqcv"]], "nineqcv (pybrops.breed.prot.sel.genomicestimatedbreedingvalueselection.genomicestimatedbreedingvaluesubsetselection property)": [[140, "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueSubsetSelection.nineqcv"]], "nmating (pybrops.breed.prot.sel.genomicestimatedbreedingvalueselection.genomicestimatedbreedingvaluesubsetselection property)": [[140, "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueSubsetSelection.nmating"]], "nobj (pybrops.breed.prot.sel.genomicestimatedbreedingvalueselection.genomicestimatedbreedingvaluesubsetselection property)": [[140, "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueSubsetSelection.nobj"]], "nparent (pybrops.breed.prot.sel.genomicestimatedbreedingvalueselection.genomicestimatedbreedingvaluesubsetselection property)": [[140, "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueSubsetSelection.nparent"]], "nprogeny (pybrops.breed.prot.sel.genomicestimatedbreedingvalueselection.genomicestimatedbreedingvaluesubsetselection property)": [[140, "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueSubsetSelection.nprogeny"]], "nselindiv (pybrops.breed.prot.sel.genomicestimatedbreedingvalueselection.genomicestimatedbreedingvaluesubsetselection property)": [[140, "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueSubsetSelection.nselindiv"]], "ntrait (pybrops.breed.prot.sel.genomicestimatedbreedingvalueselection.genomicestimatedbreedingvaluesubsetselection property)": [[140, "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueSubsetSelection.ntrait"]], "obj_trans (pybrops.breed.prot.sel.genomicestimatedbreedingvalueselection.genomicestimatedbreedingvaluesubsetselection property)": [[140, "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueSubsetSelection.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.genomicestimatedbreedingvalueselection.genomicestimatedbreedingvaluesubsetselection property)": [[140, "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueSubsetSelection.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.genomicestimatedbreedingvalueselection.genomicestimatedbreedingvaluesubsetselection property)": [[140, "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueSubsetSelection.obj_wt"]], "problem() (pybrops.breed.prot.sel.genomicestimatedbreedingvalueselection.genomicestimatedbreedingvaluesubsetselection method)": [[140, "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueSubsetSelection.problem"]], "rng (pybrops.breed.prot.sel.genomicestimatedbreedingvalueselection.genomicestimatedbreedingvaluesubsetselection property)": [[140, "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueSubsetSelection.rng"]], "select() (pybrops.breed.prot.sel.genomicestimatedbreedingvalueselection.genomicestimatedbreedingvaluesubsetselection method)": [[140, "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueSubsetSelection.select"]], "soalgo (pybrops.breed.prot.sel.genomicestimatedbreedingvalueselection.genomicestimatedbreedingvaluesubsetselection property)": [[140, "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueSubsetSelection.soalgo"]], "sosolve() (pybrops.breed.prot.sel.genomicestimatedbreedingvalueselection.genomicestimatedbreedingvaluesubsetselection method)": [[140, "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueSubsetSelection.sosolve"]], "unscale (pybrops.breed.prot.sel.genomicestimatedbreedingvalueselection.genomicestimatedbreedingvaluesubsetselection property)": [[140, "pybrops.breed.prot.sel.GenomicEstimatedBreedingValueSelection.GenomicEstimatedBreedingValueSubsetSelection.unscale"]], "pybrops.breed.prot.sel.genotypebuilderselection": [[141, "module-pybrops.breed.prot.sel.GenotypeBuilderSelection"]], "genotypebuilderselectionmixin (class in pybrops.breed.prot.sel.genotypebuilderselection)": [[142, "pybrops.breed.prot.sel.GenotypeBuilderSelection.GenotypeBuilderSelectionMixin"]], "nbestfndr (pybrops.breed.prot.sel.genotypebuilderselection.genotypebuilderselectionmixin property)": [[142, "pybrops.breed.prot.sel.GenotypeBuilderSelection.GenotypeBuilderSelectionMixin.nbestfndr"]], "nhaploblk (pybrops.breed.prot.sel.genotypebuilderselection.genotypebuilderselectionmixin property)": [[142, "pybrops.breed.prot.sel.GenotypeBuilderSelection.GenotypeBuilderSelectionMixin.nhaploblk"]], "ntrait (pybrops.breed.prot.sel.genotypebuilderselection.genotypebuilderselectionmixin property)": [[142, "pybrops.breed.prot.sel.GenotypeBuilderSelection.GenotypeBuilderSelectionMixin.ntrait"]], "genotypebuildersubsetselection (class in pybrops.breed.prot.sel.genotypebuilderselection)": [[143, "pybrops.breed.prot.sel.GenotypeBuilderSelection.GenotypeBuilderSubsetSelection"]], "eqcv_trans (pybrops.breed.prot.sel.genotypebuilderselection.genotypebuildersubsetselection property)": [[143, "pybrops.breed.prot.sel.GenotypeBuilderSelection.GenotypeBuilderSubsetSelection.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.genotypebuilderselection.genotypebuildersubsetselection property)": [[143, "pybrops.breed.prot.sel.GenotypeBuilderSelection.GenotypeBuilderSubsetSelection.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.genotypebuilderselection.genotypebuildersubsetselection property)": [[143, "pybrops.breed.prot.sel.GenotypeBuilderSelection.GenotypeBuilderSubsetSelection.eqcv_wt"]], "ineqcv_trans (pybrops.breed.prot.sel.genotypebuilderselection.genotypebuildersubsetselection property)": [[143, "pybrops.breed.prot.sel.GenotypeBuilderSelection.GenotypeBuilderSubsetSelection.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.genotypebuilderselection.genotypebuildersubsetselection property)": [[143, "pybrops.breed.prot.sel.GenotypeBuilderSelection.GenotypeBuilderSubsetSelection.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.genotypebuilderselection.genotypebuildersubsetselection property)": [[143, "pybrops.breed.prot.sel.GenotypeBuilderSelection.GenotypeBuilderSubsetSelection.ineqcv_wt"]], "moalgo (pybrops.breed.prot.sel.genotypebuilderselection.genotypebuildersubsetselection property)": [[143, "pybrops.breed.prot.sel.GenotypeBuilderSelection.GenotypeBuilderSubsetSelection.moalgo"]], "mosolve() (pybrops.breed.prot.sel.genotypebuilderselection.genotypebuildersubsetselection method)": [[143, "pybrops.breed.prot.sel.GenotypeBuilderSelection.GenotypeBuilderSubsetSelection.mosolve"]], "nbestfndr (pybrops.breed.prot.sel.genotypebuilderselection.genotypebuildersubsetselection property)": [[143, "pybrops.breed.prot.sel.GenotypeBuilderSelection.GenotypeBuilderSubsetSelection.nbestfndr"]], "ncross (pybrops.breed.prot.sel.genotypebuilderselection.genotypebuildersubsetselection property)": [[143, "pybrops.breed.prot.sel.GenotypeBuilderSelection.GenotypeBuilderSubsetSelection.ncross"]], "ndset_trans (pybrops.breed.prot.sel.genotypebuilderselection.genotypebuildersubsetselection property)": [[143, "pybrops.breed.prot.sel.GenotypeBuilderSelection.GenotypeBuilderSubsetSelection.ndset_trans"]], "ndset_trans_kwargs (pybrops.breed.prot.sel.genotypebuilderselection.genotypebuildersubsetselection property)": [[143, "pybrops.breed.prot.sel.GenotypeBuilderSelection.GenotypeBuilderSubsetSelection.ndset_trans_kwargs"]], "ndset_wt (pybrops.breed.prot.sel.genotypebuilderselection.genotypebuildersubsetselection property)": [[143, "pybrops.breed.prot.sel.GenotypeBuilderSelection.GenotypeBuilderSubsetSelection.ndset_wt"]], "neqcv (pybrops.breed.prot.sel.genotypebuilderselection.genotypebuildersubsetselection property)": [[143, "pybrops.breed.prot.sel.GenotypeBuilderSelection.GenotypeBuilderSubsetSelection.neqcv"]], "nhaploblk (pybrops.breed.prot.sel.genotypebuilderselection.genotypebuildersubsetselection property)": [[143, "pybrops.breed.prot.sel.GenotypeBuilderSelection.GenotypeBuilderSubsetSelection.nhaploblk"]], "nineqcv (pybrops.breed.prot.sel.genotypebuilderselection.genotypebuildersubsetselection property)": [[143, "pybrops.breed.prot.sel.GenotypeBuilderSelection.GenotypeBuilderSubsetSelection.nineqcv"]], "nmating (pybrops.breed.prot.sel.genotypebuilderselection.genotypebuildersubsetselection property)": [[143, "pybrops.breed.prot.sel.GenotypeBuilderSelection.GenotypeBuilderSubsetSelection.nmating"]], "nobj (pybrops.breed.prot.sel.genotypebuilderselection.genotypebuildersubsetselection property)": [[143, "pybrops.breed.prot.sel.GenotypeBuilderSelection.GenotypeBuilderSubsetSelection.nobj"]], "nparent (pybrops.breed.prot.sel.genotypebuilderselection.genotypebuildersubsetselection property)": [[143, "pybrops.breed.prot.sel.GenotypeBuilderSelection.GenotypeBuilderSubsetSelection.nparent"]], "nprogeny (pybrops.breed.prot.sel.genotypebuilderselection.genotypebuildersubsetselection property)": [[143, "pybrops.breed.prot.sel.GenotypeBuilderSelection.GenotypeBuilderSubsetSelection.nprogeny"]], "nselindiv (pybrops.breed.prot.sel.genotypebuilderselection.genotypebuildersubsetselection property)": [[143, "pybrops.breed.prot.sel.GenotypeBuilderSelection.GenotypeBuilderSubsetSelection.nselindiv"]], "ntrait (pybrops.breed.prot.sel.genotypebuilderselection.genotypebuildersubsetselection property)": [[143, "pybrops.breed.prot.sel.GenotypeBuilderSelection.GenotypeBuilderSubsetSelection.ntrait"]], "obj_trans (pybrops.breed.prot.sel.genotypebuilderselection.genotypebuildersubsetselection property)": [[143, "pybrops.breed.prot.sel.GenotypeBuilderSelection.GenotypeBuilderSubsetSelection.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.genotypebuilderselection.genotypebuildersubsetselection property)": [[143, "pybrops.breed.prot.sel.GenotypeBuilderSelection.GenotypeBuilderSubsetSelection.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.genotypebuilderselection.genotypebuildersubsetselection property)": [[143, "pybrops.breed.prot.sel.GenotypeBuilderSelection.GenotypeBuilderSubsetSelection.obj_wt"]], "problem() (pybrops.breed.prot.sel.genotypebuilderselection.genotypebuildersubsetselection method)": [[143, "pybrops.breed.prot.sel.GenotypeBuilderSelection.GenotypeBuilderSubsetSelection.problem"]], "rng (pybrops.breed.prot.sel.genotypebuilderselection.genotypebuildersubsetselection property)": [[143, "pybrops.breed.prot.sel.GenotypeBuilderSelection.GenotypeBuilderSubsetSelection.rng"]], "select() (pybrops.breed.prot.sel.genotypebuilderselection.genotypebuildersubsetselection method)": [[143, "pybrops.breed.prot.sel.GenotypeBuilderSelection.GenotypeBuilderSubsetSelection.select"]], "soalgo (pybrops.breed.prot.sel.genotypebuilderselection.genotypebuildersubsetselection property)": [[143, "pybrops.breed.prot.sel.GenotypeBuilderSelection.GenotypeBuilderSubsetSelection.soalgo"]], "sosolve() (pybrops.breed.prot.sel.genotypebuilderselection.genotypebuildersubsetselection method)": [[143, "pybrops.breed.prot.sel.GenotypeBuilderSelection.GenotypeBuilderSubsetSelection.sosolve"]], "pybrops.breed.prot.sel.integermateselectionprotocol": [[144, "module-pybrops.breed.prot.sel.IntegerMateSelectionProtocol"]], "integermateselectionprotocol (class in pybrops.breed.prot.sel.integermateselectionprotocol)": [[145, "pybrops.breed.prot.sel.IntegerMateSelectionProtocol.IntegerMateSelectionProtocol"]], "eqcv_trans (pybrops.breed.prot.sel.integermateselectionprotocol.integermateselectionprotocol property)": [[145, "pybrops.breed.prot.sel.IntegerMateSelectionProtocol.IntegerMateSelectionProtocol.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.integermateselectionprotocol.integermateselectionprotocol property)": [[145, "pybrops.breed.prot.sel.IntegerMateSelectionProtocol.IntegerMateSelectionProtocol.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.integermateselectionprotocol.integermateselectionprotocol property)": [[145, "pybrops.breed.prot.sel.IntegerMateSelectionProtocol.IntegerMateSelectionProtocol.eqcv_wt"]], "ineqcv_trans (pybrops.breed.prot.sel.integermateselectionprotocol.integermateselectionprotocol property)": [[145, "pybrops.breed.prot.sel.IntegerMateSelectionProtocol.IntegerMateSelectionProtocol.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.integermateselectionprotocol.integermateselectionprotocol property)": [[145, "pybrops.breed.prot.sel.IntegerMateSelectionProtocol.IntegerMateSelectionProtocol.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.integermateselectionprotocol.integermateselectionprotocol property)": [[145, "pybrops.breed.prot.sel.IntegerMateSelectionProtocol.IntegerMateSelectionProtocol.ineqcv_wt"]], "moalgo (pybrops.breed.prot.sel.integermateselectionprotocol.integermateselectionprotocol property)": [[145, "pybrops.breed.prot.sel.IntegerMateSelectionProtocol.IntegerMateSelectionProtocol.moalgo"]], "mosolve() (pybrops.breed.prot.sel.integermateselectionprotocol.integermateselectionprotocol method)": [[145, "pybrops.breed.prot.sel.IntegerMateSelectionProtocol.IntegerMateSelectionProtocol.mosolve"]], "ncross (pybrops.breed.prot.sel.integermateselectionprotocol.integermateselectionprotocol property)": [[145, "pybrops.breed.prot.sel.IntegerMateSelectionProtocol.IntegerMateSelectionProtocol.ncross"]], "ndset_trans (pybrops.breed.prot.sel.integermateselectionprotocol.integermateselectionprotocol property)": [[145, "pybrops.breed.prot.sel.IntegerMateSelectionProtocol.IntegerMateSelectionProtocol.ndset_trans"]], "ndset_trans_kwargs (pybrops.breed.prot.sel.integermateselectionprotocol.integermateselectionprotocol property)": [[145, "pybrops.breed.prot.sel.IntegerMateSelectionProtocol.IntegerMateSelectionProtocol.ndset_trans_kwargs"]], "ndset_wt (pybrops.breed.prot.sel.integermateselectionprotocol.integermateselectionprotocol property)": [[145, "pybrops.breed.prot.sel.IntegerMateSelectionProtocol.IntegerMateSelectionProtocol.ndset_wt"]], "neqcv (pybrops.breed.prot.sel.integermateselectionprotocol.integermateselectionprotocol property)": [[145, "pybrops.breed.prot.sel.IntegerMateSelectionProtocol.IntegerMateSelectionProtocol.neqcv"]], "nineqcv (pybrops.breed.prot.sel.integermateselectionprotocol.integermateselectionprotocol property)": [[145, "pybrops.breed.prot.sel.IntegerMateSelectionProtocol.IntegerMateSelectionProtocol.nineqcv"]], "nmating (pybrops.breed.prot.sel.integermateselectionprotocol.integermateselectionprotocol property)": [[145, "pybrops.breed.prot.sel.IntegerMateSelectionProtocol.IntegerMateSelectionProtocol.nmating"]], "nobj (pybrops.breed.prot.sel.integermateselectionprotocol.integermateselectionprotocol property)": [[145, "pybrops.breed.prot.sel.IntegerMateSelectionProtocol.IntegerMateSelectionProtocol.nobj"]], "nparent (pybrops.breed.prot.sel.integermateselectionprotocol.integermateselectionprotocol property)": [[145, "pybrops.breed.prot.sel.IntegerMateSelectionProtocol.IntegerMateSelectionProtocol.nparent"]], "nprogeny (pybrops.breed.prot.sel.integermateselectionprotocol.integermateselectionprotocol property)": [[145, "pybrops.breed.prot.sel.IntegerMateSelectionProtocol.IntegerMateSelectionProtocol.nprogeny"]], "nselindiv (pybrops.breed.prot.sel.integermateselectionprotocol.integermateselectionprotocol property)": [[145, "pybrops.breed.prot.sel.IntegerMateSelectionProtocol.IntegerMateSelectionProtocol.nselindiv"]], "obj_trans (pybrops.breed.prot.sel.integermateselectionprotocol.integermateselectionprotocol property)": [[145, "pybrops.breed.prot.sel.IntegerMateSelectionProtocol.IntegerMateSelectionProtocol.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.integermateselectionprotocol.integermateselectionprotocol property)": [[145, "pybrops.breed.prot.sel.IntegerMateSelectionProtocol.IntegerMateSelectionProtocol.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.integermateselectionprotocol.integermateselectionprotocol property)": [[145, "pybrops.breed.prot.sel.IntegerMateSelectionProtocol.IntegerMateSelectionProtocol.obj_wt"]], "problem() (pybrops.breed.prot.sel.integermateselectionprotocol.integermateselectionprotocol method)": [[145, "pybrops.breed.prot.sel.IntegerMateSelectionProtocol.IntegerMateSelectionProtocol.problem"]], "rng (pybrops.breed.prot.sel.integermateselectionprotocol.integermateselectionprotocol property)": [[145, "pybrops.breed.prot.sel.IntegerMateSelectionProtocol.IntegerMateSelectionProtocol.rng"]], "select() (pybrops.breed.prot.sel.integermateselectionprotocol.integermateselectionprotocol method)": [[145, "pybrops.breed.prot.sel.IntegerMateSelectionProtocol.IntegerMateSelectionProtocol.select"]], "soalgo (pybrops.breed.prot.sel.integermateselectionprotocol.integermateselectionprotocol property)": [[145, "pybrops.breed.prot.sel.IntegerMateSelectionProtocol.IntegerMateSelectionProtocol.soalgo"]], "sosolve() (pybrops.breed.prot.sel.integermateselectionprotocol.integermateselectionprotocol method)": [[145, "pybrops.breed.prot.sel.IntegerMateSelectionProtocol.IntegerMateSelectionProtocol.sosolve"]], "check_is_integermateselectionprotocol() (in module pybrops.breed.prot.sel.integermateselectionprotocol)": [[146, "pybrops.breed.prot.sel.IntegerMateSelectionProtocol.check_is_IntegerMateSelectionProtocol"]], "pybrops.breed.prot.sel.integerselectionprotocol": [[147, "module-pybrops.breed.prot.sel.IntegerSelectionProtocol"]], "integerselectionprotocol (class in pybrops.breed.prot.sel.integerselectionprotocol)": [[148, "pybrops.breed.prot.sel.IntegerSelectionProtocol.IntegerSelectionProtocol"]], "eqcv_trans (pybrops.breed.prot.sel.integerselectionprotocol.integerselectionprotocol property)": [[148, "pybrops.breed.prot.sel.IntegerSelectionProtocol.IntegerSelectionProtocol.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.integerselectionprotocol.integerselectionprotocol property)": [[148, "pybrops.breed.prot.sel.IntegerSelectionProtocol.IntegerSelectionProtocol.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.integerselectionprotocol.integerselectionprotocol property)": [[148, "pybrops.breed.prot.sel.IntegerSelectionProtocol.IntegerSelectionProtocol.eqcv_wt"]], "ineqcv_trans (pybrops.breed.prot.sel.integerselectionprotocol.integerselectionprotocol property)": [[148, "pybrops.breed.prot.sel.IntegerSelectionProtocol.IntegerSelectionProtocol.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.integerselectionprotocol.integerselectionprotocol property)": [[148, "pybrops.breed.prot.sel.IntegerSelectionProtocol.IntegerSelectionProtocol.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.integerselectionprotocol.integerselectionprotocol property)": [[148, "pybrops.breed.prot.sel.IntegerSelectionProtocol.IntegerSelectionProtocol.ineqcv_wt"]], "moalgo (pybrops.breed.prot.sel.integerselectionprotocol.integerselectionprotocol property)": [[148, "pybrops.breed.prot.sel.IntegerSelectionProtocol.IntegerSelectionProtocol.moalgo"]], "mosolve() (pybrops.breed.prot.sel.integerselectionprotocol.integerselectionprotocol method)": [[148, "pybrops.breed.prot.sel.IntegerSelectionProtocol.IntegerSelectionProtocol.mosolve"]], "ncross (pybrops.breed.prot.sel.integerselectionprotocol.integerselectionprotocol property)": [[148, "pybrops.breed.prot.sel.IntegerSelectionProtocol.IntegerSelectionProtocol.ncross"]], "ndset_trans (pybrops.breed.prot.sel.integerselectionprotocol.integerselectionprotocol property)": [[148, "pybrops.breed.prot.sel.IntegerSelectionProtocol.IntegerSelectionProtocol.ndset_trans"]], "ndset_trans_kwargs (pybrops.breed.prot.sel.integerselectionprotocol.integerselectionprotocol property)": [[148, "pybrops.breed.prot.sel.IntegerSelectionProtocol.IntegerSelectionProtocol.ndset_trans_kwargs"]], "ndset_wt (pybrops.breed.prot.sel.integerselectionprotocol.integerselectionprotocol property)": [[148, "pybrops.breed.prot.sel.IntegerSelectionProtocol.IntegerSelectionProtocol.ndset_wt"]], "neqcv (pybrops.breed.prot.sel.integerselectionprotocol.integerselectionprotocol property)": [[148, "pybrops.breed.prot.sel.IntegerSelectionProtocol.IntegerSelectionProtocol.neqcv"]], "nineqcv (pybrops.breed.prot.sel.integerselectionprotocol.integerselectionprotocol property)": [[148, "pybrops.breed.prot.sel.IntegerSelectionProtocol.IntegerSelectionProtocol.nineqcv"]], "nmating (pybrops.breed.prot.sel.integerselectionprotocol.integerselectionprotocol property)": [[148, "pybrops.breed.prot.sel.IntegerSelectionProtocol.IntegerSelectionProtocol.nmating"]], "nobj (pybrops.breed.prot.sel.integerselectionprotocol.integerselectionprotocol property)": [[148, "pybrops.breed.prot.sel.IntegerSelectionProtocol.IntegerSelectionProtocol.nobj"]], "nparent (pybrops.breed.prot.sel.integerselectionprotocol.integerselectionprotocol property)": [[148, "pybrops.breed.prot.sel.IntegerSelectionProtocol.IntegerSelectionProtocol.nparent"]], "nprogeny (pybrops.breed.prot.sel.integerselectionprotocol.integerselectionprotocol property)": [[148, "pybrops.breed.prot.sel.IntegerSelectionProtocol.IntegerSelectionProtocol.nprogeny"]], "nselindiv (pybrops.breed.prot.sel.integerselectionprotocol.integerselectionprotocol property)": [[148, "pybrops.breed.prot.sel.IntegerSelectionProtocol.IntegerSelectionProtocol.nselindiv"]], "obj_trans (pybrops.breed.prot.sel.integerselectionprotocol.integerselectionprotocol property)": [[148, "pybrops.breed.prot.sel.IntegerSelectionProtocol.IntegerSelectionProtocol.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.integerselectionprotocol.integerselectionprotocol property)": [[148, "pybrops.breed.prot.sel.IntegerSelectionProtocol.IntegerSelectionProtocol.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.integerselectionprotocol.integerselectionprotocol property)": [[148, "pybrops.breed.prot.sel.IntegerSelectionProtocol.IntegerSelectionProtocol.obj_wt"]], "problem() (pybrops.breed.prot.sel.integerselectionprotocol.integerselectionprotocol method)": [[148, "pybrops.breed.prot.sel.IntegerSelectionProtocol.IntegerSelectionProtocol.problem"]], "rng (pybrops.breed.prot.sel.integerselectionprotocol.integerselectionprotocol property)": [[148, "pybrops.breed.prot.sel.IntegerSelectionProtocol.IntegerSelectionProtocol.rng"]], "select() (pybrops.breed.prot.sel.integerselectionprotocol.integerselectionprotocol method)": [[148, "pybrops.breed.prot.sel.IntegerSelectionProtocol.IntegerSelectionProtocol.select"]], "soalgo (pybrops.breed.prot.sel.integerselectionprotocol.integerselectionprotocol property)": [[148, "pybrops.breed.prot.sel.IntegerSelectionProtocol.IntegerSelectionProtocol.soalgo"]], "sosolve() (pybrops.breed.prot.sel.integerselectionprotocol.integerselectionprotocol method)": [[148, "pybrops.breed.prot.sel.IntegerSelectionProtocol.IntegerSelectionProtocol.sosolve"]], "check_is_integerselectionprotocol() (in module pybrops.breed.prot.sel.integerselectionprotocol)": [[149, "pybrops.breed.prot.sel.IntegerSelectionProtocol.check_is_IntegerSelectionProtocol"]], "pybrops.breed.prot.sel.l1normgenomicselection": [[150, "module-pybrops.breed.prot.sel.L1NormGenomicSelection"]], "pybrops.breed.prot.sel.l2normgenomicselection": [[151, "module-pybrops.breed.prot.sel.L2NormGenomicSelection"]], "l2normgenomicbinaryselection (class in pybrops.breed.prot.sel.l2normgenomicselection)": [[152, "pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicBinarySelection"]], "cmatfcty (pybrops.breed.prot.sel.l2normgenomicselection.l2normgenomicbinaryselection property)": [[152, "pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicBinarySelection.cmatfcty"]], "eqcv_trans (pybrops.breed.prot.sel.l2normgenomicselection.l2normgenomicbinaryselection property)": [[152, "pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicBinarySelection.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.l2normgenomicselection.l2normgenomicbinaryselection property)": [[152, "pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicBinarySelection.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.l2normgenomicselection.l2normgenomicbinaryselection property)": [[152, "pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicBinarySelection.eqcv_wt"]], "ineqcv_trans (pybrops.breed.prot.sel.l2normgenomicselection.l2normgenomicbinaryselection property)": [[152, "pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicBinarySelection.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.l2normgenomicselection.l2normgenomicbinaryselection property)": [[152, "pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicBinarySelection.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.l2normgenomicselection.l2normgenomicbinaryselection property)": [[152, "pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicBinarySelection.ineqcv_wt"]], "moalgo (pybrops.breed.prot.sel.l2normgenomicselection.l2normgenomicbinaryselection property)": [[152, "pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicBinarySelection.moalgo"]], "mosolve() (pybrops.breed.prot.sel.l2normgenomicselection.l2normgenomicbinaryselection method)": [[152, "pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicBinarySelection.mosolve"]], "ncross (pybrops.breed.prot.sel.l2normgenomicselection.l2normgenomicbinaryselection property)": [[152, "pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicBinarySelection.ncross"]], "ndset_trans (pybrops.breed.prot.sel.l2normgenomicselection.l2normgenomicbinaryselection property)": [[152, "pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicBinarySelection.ndset_trans"]], "ndset_trans_kwargs (pybrops.breed.prot.sel.l2normgenomicselection.l2normgenomicbinaryselection property)": [[152, "pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicBinarySelection.ndset_trans_kwargs"]], "ndset_wt (pybrops.breed.prot.sel.l2normgenomicselection.l2normgenomicbinaryselection property)": [[152, "pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicBinarySelection.ndset_wt"]], "neqcv (pybrops.breed.prot.sel.l2normgenomicselection.l2normgenomicbinaryselection property)": [[152, "pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicBinarySelection.neqcv"]], "nineqcv (pybrops.breed.prot.sel.l2normgenomicselection.l2normgenomicbinaryselection property)": [[152, "pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicBinarySelection.nineqcv"]], "nmating (pybrops.breed.prot.sel.l2normgenomicselection.l2normgenomicbinaryselection property)": [[152, "pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicBinarySelection.nmating"]], "nobj (pybrops.breed.prot.sel.l2normgenomicselection.l2normgenomicbinaryselection property)": [[152, "pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicBinarySelection.nobj"]], "nparent (pybrops.breed.prot.sel.l2normgenomicselection.l2normgenomicbinaryselection property)": [[152, "pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicBinarySelection.nparent"]], "nprogeny (pybrops.breed.prot.sel.l2normgenomicselection.l2normgenomicbinaryselection property)": [[152, "pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicBinarySelection.nprogeny"]], "nselindiv (pybrops.breed.prot.sel.l2normgenomicselection.l2normgenomicbinaryselection property)": [[152, "pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicBinarySelection.nselindiv"]], "obj_trans (pybrops.breed.prot.sel.l2normgenomicselection.l2normgenomicbinaryselection property)": [[152, "pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicBinarySelection.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.l2normgenomicselection.l2normgenomicbinaryselection property)": [[152, "pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicBinarySelection.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.l2normgenomicselection.l2normgenomicbinaryselection property)": [[152, "pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicBinarySelection.obj_wt"]], "problem() (pybrops.breed.prot.sel.l2normgenomicselection.l2normgenomicbinaryselection method)": [[152, "pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicBinarySelection.problem"]], "rng (pybrops.breed.prot.sel.l2normgenomicselection.l2normgenomicbinaryselection property)": [[152, "pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicBinarySelection.rng"]], "select() (pybrops.breed.prot.sel.l2normgenomicselection.l2normgenomicbinaryselection method)": [[152, "pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicBinarySelection.select"]], "soalgo (pybrops.breed.prot.sel.l2normgenomicselection.l2normgenomicbinaryselection property)": [[152, "pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicBinarySelection.soalgo"]], "sosolve() (pybrops.breed.prot.sel.l2normgenomicselection.l2normgenomicbinaryselection method)": [[152, "pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicBinarySelection.sosolve"]], "l2normgenomicintegerselection (class in pybrops.breed.prot.sel.l2normgenomicselection)": [[153, "pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicIntegerSelection"]], "cmatfcty (pybrops.breed.prot.sel.l2normgenomicselection.l2normgenomicintegerselection property)": [[153, "pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicIntegerSelection.cmatfcty"]], "eqcv_trans (pybrops.breed.prot.sel.l2normgenomicselection.l2normgenomicintegerselection property)": [[153, "pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicIntegerSelection.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.l2normgenomicselection.l2normgenomicintegerselection property)": [[153, "pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicIntegerSelection.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.l2normgenomicselection.l2normgenomicintegerselection property)": [[153, "pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicIntegerSelection.eqcv_wt"]], "ineqcv_trans (pybrops.breed.prot.sel.l2normgenomicselection.l2normgenomicintegerselection property)": [[153, "pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicIntegerSelection.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.l2normgenomicselection.l2normgenomicintegerselection property)": [[153, "pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicIntegerSelection.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.l2normgenomicselection.l2normgenomicintegerselection property)": [[153, "pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicIntegerSelection.ineqcv_wt"]], "moalgo (pybrops.breed.prot.sel.l2normgenomicselection.l2normgenomicintegerselection property)": [[153, "pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicIntegerSelection.moalgo"]], "mosolve() (pybrops.breed.prot.sel.l2normgenomicselection.l2normgenomicintegerselection method)": [[153, "pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicIntegerSelection.mosolve"]], "ncross (pybrops.breed.prot.sel.l2normgenomicselection.l2normgenomicintegerselection property)": [[153, "pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicIntegerSelection.ncross"]], "ndset_trans (pybrops.breed.prot.sel.l2normgenomicselection.l2normgenomicintegerselection property)": [[153, "pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicIntegerSelection.ndset_trans"]], "ndset_trans_kwargs (pybrops.breed.prot.sel.l2normgenomicselection.l2normgenomicintegerselection property)": [[153, "pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicIntegerSelection.ndset_trans_kwargs"]], "ndset_wt (pybrops.breed.prot.sel.l2normgenomicselection.l2normgenomicintegerselection property)": [[153, "pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicIntegerSelection.ndset_wt"]], "neqcv (pybrops.breed.prot.sel.l2normgenomicselection.l2normgenomicintegerselection property)": [[153, "pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicIntegerSelection.neqcv"]], "nineqcv (pybrops.breed.prot.sel.l2normgenomicselection.l2normgenomicintegerselection property)": [[153, "pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicIntegerSelection.nineqcv"]], "nmating (pybrops.breed.prot.sel.l2normgenomicselection.l2normgenomicintegerselection property)": [[153, "pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicIntegerSelection.nmating"]], "nobj (pybrops.breed.prot.sel.l2normgenomicselection.l2normgenomicintegerselection property)": [[153, "pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicIntegerSelection.nobj"]], "nparent (pybrops.breed.prot.sel.l2normgenomicselection.l2normgenomicintegerselection property)": [[153, "pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicIntegerSelection.nparent"]], "nprogeny (pybrops.breed.prot.sel.l2normgenomicselection.l2normgenomicintegerselection property)": [[153, "pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicIntegerSelection.nprogeny"]], "nselindiv (pybrops.breed.prot.sel.l2normgenomicselection.l2normgenomicintegerselection property)": [[153, "pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicIntegerSelection.nselindiv"]], "obj_trans (pybrops.breed.prot.sel.l2normgenomicselection.l2normgenomicintegerselection property)": [[153, "pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicIntegerSelection.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.l2normgenomicselection.l2normgenomicintegerselection property)": [[153, "pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicIntegerSelection.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.l2normgenomicselection.l2normgenomicintegerselection property)": [[153, "pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicIntegerSelection.obj_wt"]], "problem() (pybrops.breed.prot.sel.l2normgenomicselection.l2normgenomicintegerselection method)": [[153, "pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicIntegerSelection.problem"]], "rng (pybrops.breed.prot.sel.l2normgenomicselection.l2normgenomicintegerselection property)": [[153, "pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicIntegerSelection.rng"]], "select() (pybrops.breed.prot.sel.l2normgenomicselection.l2normgenomicintegerselection method)": [[153, "pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicIntegerSelection.select"]], "soalgo (pybrops.breed.prot.sel.l2normgenomicselection.l2normgenomicintegerselection property)": [[153, "pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicIntegerSelection.soalgo"]], "sosolve() (pybrops.breed.prot.sel.l2normgenomicselection.l2normgenomicintegerselection method)": [[153, "pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicIntegerSelection.sosolve"]], "l2normgenomicrealselection (class in pybrops.breed.prot.sel.l2normgenomicselection)": [[154, "pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicRealSelection"]], "cmatfcty (pybrops.breed.prot.sel.l2normgenomicselection.l2normgenomicrealselection property)": [[154, "pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicRealSelection.cmatfcty"]], "eqcv_trans (pybrops.breed.prot.sel.l2normgenomicselection.l2normgenomicrealselection property)": [[154, "pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicRealSelection.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.l2normgenomicselection.l2normgenomicrealselection property)": [[154, "pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicRealSelection.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.l2normgenomicselection.l2normgenomicrealselection property)": [[154, "pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicRealSelection.eqcv_wt"]], "ineqcv_trans (pybrops.breed.prot.sel.l2normgenomicselection.l2normgenomicrealselection property)": [[154, "pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicRealSelection.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.l2normgenomicselection.l2normgenomicrealselection property)": [[154, "pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicRealSelection.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.l2normgenomicselection.l2normgenomicrealselection property)": [[154, "pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicRealSelection.ineqcv_wt"]], "moalgo (pybrops.breed.prot.sel.l2normgenomicselection.l2normgenomicrealselection property)": [[154, "pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicRealSelection.moalgo"]], "mosolve() (pybrops.breed.prot.sel.l2normgenomicselection.l2normgenomicrealselection method)": [[154, "pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicRealSelection.mosolve"]], "ncross (pybrops.breed.prot.sel.l2normgenomicselection.l2normgenomicrealselection property)": [[154, "pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicRealSelection.ncross"]], "ndset_trans (pybrops.breed.prot.sel.l2normgenomicselection.l2normgenomicrealselection property)": [[154, "pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicRealSelection.ndset_trans"]], "ndset_trans_kwargs (pybrops.breed.prot.sel.l2normgenomicselection.l2normgenomicrealselection property)": [[154, "pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicRealSelection.ndset_trans_kwargs"]], "ndset_wt (pybrops.breed.prot.sel.l2normgenomicselection.l2normgenomicrealselection property)": [[154, "pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicRealSelection.ndset_wt"]], "neqcv (pybrops.breed.prot.sel.l2normgenomicselection.l2normgenomicrealselection property)": [[154, "pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicRealSelection.neqcv"]], "nineqcv (pybrops.breed.prot.sel.l2normgenomicselection.l2normgenomicrealselection property)": [[154, "pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicRealSelection.nineqcv"]], "nmating (pybrops.breed.prot.sel.l2normgenomicselection.l2normgenomicrealselection property)": [[154, "pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicRealSelection.nmating"]], "nobj (pybrops.breed.prot.sel.l2normgenomicselection.l2normgenomicrealselection property)": [[154, "pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicRealSelection.nobj"]], "nparent (pybrops.breed.prot.sel.l2normgenomicselection.l2normgenomicrealselection property)": [[154, "pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicRealSelection.nparent"]], "nprogeny (pybrops.breed.prot.sel.l2normgenomicselection.l2normgenomicrealselection property)": [[154, "pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicRealSelection.nprogeny"]], "nselindiv (pybrops.breed.prot.sel.l2normgenomicselection.l2normgenomicrealselection property)": [[154, "pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicRealSelection.nselindiv"]], "obj_trans (pybrops.breed.prot.sel.l2normgenomicselection.l2normgenomicrealselection property)": [[154, "pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicRealSelection.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.l2normgenomicselection.l2normgenomicrealselection property)": [[154, "pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicRealSelection.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.l2normgenomicselection.l2normgenomicrealselection property)": [[154, "pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicRealSelection.obj_wt"]], "problem() (pybrops.breed.prot.sel.l2normgenomicselection.l2normgenomicrealselection method)": [[154, "pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicRealSelection.problem"]], "rng (pybrops.breed.prot.sel.l2normgenomicselection.l2normgenomicrealselection property)": [[154, "pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicRealSelection.rng"]], "select() (pybrops.breed.prot.sel.l2normgenomicselection.l2normgenomicrealselection method)": [[154, "pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicRealSelection.select"]], "soalgo (pybrops.breed.prot.sel.l2normgenomicselection.l2normgenomicrealselection property)": [[154, "pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicRealSelection.soalgo"]], "sosolve() (pybrops.breed.prot.sel.l2normgenomicselection.l2normgenomicrealselection method)": [[154, "pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicRealSelection.sosolve"]], "l2normgenomicselectionmixin (class in pybrops.breed.prot.sel.l2normgenomicselection)": [[155, "pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicSelectionMixin"]], "cmatfcty (pybrops.breed.prot.sel.l2normgenomicselection.l2normgenomicselectionmixin property)": [[155, "pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicSelectionMixin.cmatfcty"]], "l2normgenomicsubsetselection (class in pybrops.breed.prot.sel.l2normgenomicselection)": [[156, "pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicSubsetSelection"]], "cmatfcty (pybrops.breed.prot.sel.l2normgenomicselection.l2normgenomicsubsetselection property)": [[156, "pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicSubsetSelection.cmatfcty"]], "eqcv_trans (pybrops.breed.prot.sel.l2normgenomicselection.l2normgenomicsubsetselection property)": [[156, "pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicSubsetSelection.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.l2normgenomicselection.l2normgenomicsubsetselection property)": [[156, "pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicSubsetSelection.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.l2normgenomicselection.l2normgenomicsubsetselection property)": [[156, "pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicSubsetSelection.eqcv_wt"]], "ineqcv_trans (pybrops.breed.prot.sel.l2normgenomicselection.l2normgenomicsubsetselection property)": [[156, "pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicSubsetSelection.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.l2normgenomicselection.l2normgenomicsubsetselection property)": [[156, "pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicSubsetSelection.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.l2normgenomicselection.l2normgenomicsubsetselection property)": [[156, "pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicSubsetSelection.ineqcv_wt"]], "moalgo (pybrops.breed.prot.sel.l2normgenomicselection.l2normgenomicsubsetselection property)": [[156, "pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicSubsetSelection.moalgo"]], "mosolve() (pybrops.breed.prot.sel.l2normgenomicselection.l2normgenomicsubsetselection method)": [[156, "pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicSubsetSelection.mosolve"]], "ncross (pybrops.breed.prot.sel.l2normgenomicselection.l2normgenomicsubsetselection property)": [[156, "pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicSubsetSelection.ncross"]], "ndset_trans (pybrops.breed.prot.sel.l2normgenomicselection.l2normgenomicsubsetselection property)": [[156, "pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicSubsetSelection.ndset_trans"]], "ndset_trans_kwargs (pybrops.breed.prot.sel.l2normgenomicselection.l2normgenomicsubsetselection property)": [[156, "pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicSubsetSelection.ndset_trans_kwargs"]], "ndset_wt (pybrops.breed.prot.sel.l2normgenomicselection.l2normgenomicsubsetselection property)": [[156, "pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicSubsetSelection.ndset_wt"]], "neqcv (pybrops.breed.prot.sel.l2normgenomicselection.l2normgenomicsubsetselection property)": [[156, "pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicSubsetSelection.neqcv"]], "nineqcv (pybrops.breed.prot.sel.l2normgenomicselection.l2normgenomicsubsetselection property)": [[156, "pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicSubsetSelection.nineqcv"]], "nmating (pybrops.breed.prot.sel.l2normgenomicselection.l2normgenomicsubsetselection property)": [[156, "pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicSubsetSelection.nmating"]], "nobj (pybrops.breed.prot.sel.l2normgenomicselection.l2normgenomicsubsetselection property)": [[156, "pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicSubsetSelection.nobj"]], "nparent (pybrops.breed.prot.sel.l2normgenomicselection.l2normgenomicsubsetselection property)": [[156, "pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicSubsetSelection.nparent"]], "nprogeny (pybrops.breed.prot.sel.l2normgenomicselection.l2normgenomicsubsetselection property)": [[156, "pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicSubsetSelection.nprogeny"]], "nselindiv (pybrops.breed.prot.sel.l2normgenomicselection.l2normgenomicsubsetselection property)": [[156, "pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicSubsetSelection.nselindiv"]], "obj_trans (pybrops.breed.prot.sel.l2normgenomicselection.l2normgenomicsubsetselection property)": [[156, "pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicSubsetSelection.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.l2normgenomicselection.l2normgenomicsubsetselection property)": [[156, "pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicSubsetSelection.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.l2normgenomicselection.l2normgenomicsubsetselection property)": [[156, "pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicSubsetSelection.obj_wt"]], "problem() (pybrops.breed.prot.sel.l2normgenomicselection.l2normgenomicsubsetselection method)": [[156, "pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicSubsetSelection.problem"]], "rng (pybrops.breed.prot.sel.l2normgenomicselection.l2normgenomicsubsetselection property)": [[156, "pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicSubsetSelection.rng"]], "select() (pybrops.breed.prot.sel.l2normgenomicselection.l2normgenomicsubsetselection method)": [[156, "pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicSubsetSelection.select"]], "soalgo (pybrops.breed.prot.sel.l2normgenomicselection.l2normgenomicsubsetselection property)": [[156, "pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicSubsetSelection.soalgo"]], "sosolve() (pybrops.breed.prot.sel.l2normgenomicselection.l2normgenomicsubsetselection method)": [[156, "pybrops.breed.prot.sel.L2NormGenomicSelection.L2NormGenomicSubsetSelection.sosolve"]], "pybrops.breed.prot.sel.mateselectionprotocol": [[157, "module-pybrops.breed.prot.sel.MateSelectionProtocol"]], "mateselectionprotocol (class in pybrops.breed.prot.sel.mateselectionprotocol)": [[158, "pybrops.breed.prot.sel.MateSelectionProtocol.MateSelectionProtocol"]], "eqcv_trans (pybrops.breed.prot.sel.mateselectionprotocol.mateselectionprotocol property)": [[158, "pybrops.breed.prot.sel.MateSelectionProtocol.MateSelectionProtocol.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.mateselectionprotocol.mateselectionprotocol property)": [[158, "pybrops.breed.prot.sel.MateSelectionProtocol.MateSelectionProtocol.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.mateselectionprotocol.mateselectionprotocol property)": [[158, "pybrops.breed.prot.sel.MateSelectionProtocol.MateSelectionProtocol.eqcv_wt"]], "ineqcv_trans (pybrops.breed.prot.sel.mateselectionprotocol.mateselectionprotocol property)": [[158, "pybrops.breed.prot.sel.MateSelectionProtocol.MateSelectionProtocol.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.mateselectionprotocol.mateselectionprotocol property)": [[158, "pybrops.breed.prot.sel.MateSelectionProtocol.MateSelectionProtocol.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.mateselectionprotocol.mateselectionprotocol property)": [[158, "pybrops.breed.prot.sel.MateSelectionProtocol.MateSelectionProtocol.ineqcv_wt"]], "moalgo (pybrops.breed.prot.sel.mateselectionprotocol.mateselectionprotocol property)": [[158, "pybrops.breed.prot.sel.MateSelectionProtocol.MateSelectionProtocol.moalgo"]], "mosolve() (pybrops.breed.prot.sel.mateselectionprotocol.mateselectionprotocol method)": [[158, "pybrops.breed.prot.sel.MateSelectionProtocol.MateSelectionProtocol.mosolve"]], "ncross (pybrops.breed.prot.sel.mateselectionprotocol.mateselectionprotocol property)": [[158, "pybrops.breed.prot.sel.MateSelectionProtocol.MateSelectionProtocol.ncross"]], "ndset_trans (pybrops.breed.prot.sel.mateselectionprotocol.mateselectionprotocol property)": [[158, "pybrops.breed.prot.sel.MateSelectionProtocol.MateSelectionProtocol.ndset_trans"]], "ndset_trans_kwargs (pybrops.breed.prot.sel.mateselectionprotocol.mateselectionprotocol property)": [[158, "pybrops.breed.prot.sel.MateSelectionProtocol.MateSelectionProtocol.ndset_trans_kwargs"]], "ndset_wt (pybrops.breed.prot.sel.mateselectionprotocol.mateselectionprotocol property)": [[158, "pybrops.breed.prot.sel.MateSelectionProtocol.MateSelectionProtocol.ndset_wt"]], "neqcv (pybrops.breed.prot.sel.mateselectionprotocol.mateselectionprotocol property)": [[158, "pybrops.breed.prot.sel.MateSelectionProtocol.MateSelectionProtocol.neqcv"]], "nineqcv (pybrops.breed.prot.sel.mateselectionprotocol.mateselectionprotocol property)": [[158, "pybrops.breed.prot.sel.MateSelectionProtocol.MateSelectionProtocol.nineqcv"]], "nmating (pybrops.breed.prot.sel.mateselectionprotocol.mateselectionprotocol property)": [[158, "pybrops.breed.prot.sel.MateSelectionProtocol.MateSelectionProtocol.nmating"]], "nobj (pybrops.breed.prot.sel.mateselectionprotocol.mateselectionprotocol property)": [[158, "pybrops.breed.prot.sel.MateSelectionProtocol.MateSelectionProtocol.nobj"]], "nparent (pybrops.breed.prot.sel.mateselectionprotocol.mateselectionprotocol property)": [[158, "pybrops.breed.prot.sel.MateSelectionProtocol.MateSelectionProtocol.nparent"]], "nprogeny (pybrops.breed.prot.sel.mateselectionprotocol.mateselectionprotocol property)": [[158, "pybrops.breed.prot.sel.MateSelectionProtocol.MateSelectionProtocol.nprogeny"]], "nselindiv (pybrops.breed.prot.sel.mateselectionprotocol.mateselectionprotocol property)": [[158, "pybrops.breed.prot.sel.MateSelectionProtocol.MateSelectionProtocol.nselindiv"]], "obj_trans (pybrops.breed.prot.sel.mateselectionprotocol.mateselectionprotocol property)": [[158, "pybrops.breed.prot.sel.MateSelectionProtocol.MateSelectionProtocol.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.mateselectionprotocol.mateselectionprotocol property)": [[158, "pybrops.breed.prot.sel.MateSelectionProtocol.MateSelectionProtocol.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.mateselectionprotocol.mateselectionprotocol property)": [[158, "pybrops.breed.prot.sel.MateSelectionProtocol.MateSelectionProtocol.obj_wt"]], "problem() (pybrops.breed.prot.sel.mateselectionprotocol.mateselectionprotocol method)": [[158, "pybrops.breed.prot.sel.MateSelectionProtocol.MateSelectionProtocol.problem"]], "rng (pybrops.breed.prot.sel.mateselectionprotocol.mateselectionprotocol property)": [[158, "pybrops.breed.prot.sel.MateSelectionProtocol.MateSelectionProtocol.rng"]], "select() (pybrops.breed.prot.sel.mateselectionprotocol.mateselectionprotocol method)": [[158, "pybrops.breed.prot.sel.MateSelectionProtocol.MateSelectionProtocol.select"]], "soalgo (pybrops.breed.prot.sel.mateselectionprotocol.mateselectionprotocol property)": [[158, "pybrops.breed.prot.sel.MateSelectionProtocol.MateSelectionProtocol.soalgo"]], "sosolve() (pybrops.breed.prot.sel.mateselectionprotocol.mateselectionprotocol method)": [[158, "pybrops.breed.prot.sel.MateSelectionProtocol.MateSelectionProtocol.sosolve"]], "check_is_mateselectionprotocol() (in module pybrops.breed.prot.sel.mateselectionprotocol)": [[159, "pybrops.breed.prot.sel.MateSelectionProtocol.check_is_MateSelectionProtocol"]], "pybrops.breed.prot.sel.meanexpectedheterozygosityselection": [[160, "module-pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection"]], "meanexpectedheterozygositybinaryselection (class in pybrops.breed.prot.sel.meanexpectedheterozygosityselection)": [[161, "pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection.MeanExpectedHeterozygosityBinarySelection"]], "eqcv_trans (pybrops.breed.prot.sel.meanexpectedheterozygosityselection.meanexpectedheterozygositybinaryselection property)": [[161, "pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection.MeanExpectedHeterozygosityBinarySelection.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.meanexpectedheterozygosityselection.meanexpectedheterozygositybinaryselection property)": [[161, "pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection.MeanExpectedHeterozygosityBinarySelection.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.meanexpectedheterozygosityselection.meanexpectedheterozygositybinaryselection property)": [[161, "pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection.MeanExpectedHeterozygosityBinarySelection.eqcv_wt"]], "ineqcv_trans (pybrops.breed.prot.sel.meanexpectedheterozygosityselection.meanexpectedheterozygositybinaryselection property)": [[161, "pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection.MeanExpectedHeterozygosityBinarySelection.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.meanexpectedheterozygosityselection.meanexpectedheterozygositybinaryselection property)": [[161, "pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection.MeanExpectedHeterozygosityBinarySelection.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.meanexpectedheterozygosityselection.meanexpectedheterozygositybinaryselection property)": [[161, "pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection.MeanExpectedHeterozygosityBinarySelection.ineqcv_wt"]], "moalgo (pybrops.breed.prot.sel.meanexpectedheterozygosityselection.meanexpectedheterozygositybinaryselection property)": [[161, "pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection.MeanExpectedHeterozygosityBinarySelection.moalgo"]], "mosolve() (pybrops.breed.prot.sel.meanexpectedheterozygosityselection.meanexpectedheterozygositybinaryselection method)": [[161, "pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection.MeanExpectedHeterozygosityBinarySelection.mosolve"]], "ncross (pybrops.breed.prot.sel.meanexpectedheterozygosityselection.meanexpectedheterozygositybinaryselection property)": [[161, "pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection.MeanExpectedHeterozygosityBinarySelection.ncross"]], "ndset_trans (pybrops.breed.prot.sel.meanexpectedheterozygosityselection.meanexpectedheterozygositybinaryselection property)": [[161, "pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection.MeanExpectedHeterozygosityBinarySelection.ndset_trans"]], "ndset_trans_kwargs (pybrops.breed.prot.sel.meanexpectedheterozygosityselection.meanexpectedheterozygositybinaryselection property)": [[161, "pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection.MeanExpectedHeterozygosityBinarySelection.ndset_trans_kwargs"]], "ndset_wt (pybrops.breed.prot.sel.meanexpectedheterozygosityselection.meanexpectedheterozygositybinaryselection property)": [[161, "pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection.MeanExpectedHeterozygosityBinarySelection.ndset_wt"]], "neqcv (pybrops.breed.prot.sel.meanexpectedheterozygosityselection.meanexpectedheterozygositybinaryselection property)": [[161, "pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection.MeanExpectedHeterozygosityBinarySelection.neqcv"]], "nineqcv (pybrops.breed.prot.sel.meanexpectedheterozygosityselection.meanexpectedheterozygositybinaryselection property)": [[161, "pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection.MeanExpectedHeterozygosityBinarySelection.nineqcv"]], "nmating (pybrops.breed.prot.sel.meanexpectedheterozygosityselection.meanexpectedheterozygositybinaryselection property)": [[161, "pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection.MeanExpectedHeterozygosityBinarySelection.nmating"]], "nobj (pybrops.breed.prot.sel.meanexpectedheterozygosityselection.meanexpectedheterozygositybinaryselection property)": [[161, "pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection.MeanExpectedHeterozygosityBinarySelection.nobj"]], "nparent (pybrops.breed.prot.sel.meanexpectedheterozygosityselection.meanexpectedheterozygositybinaryselection property)": [[161, "pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection.MeanExpectedHeterozygosityBinarySelection.nparent"]], "nprogeny (pybrops.breed.prot.sel.meanexpectedheterozygosityselection.meanexpectedheterozygositybinaryselection property)": [[161, "pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection.MeanExpectedHeterozygosityBinarySelection.nprogeny"]], "nselindiv (pybrops.breed.prot.sel.meanexpectedheterozygosityselection.meanexpectedheterozygositybinaryselection property)": [[161, "pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection.MeanExpectedHeterozygosityBinarySelection.nselindiv"]], "obj_trans (pybrops.breed.prot.sel.meanexpectedheterozygosityselection.meanexpectedheterozygositybinaryselection property)": [[161, "pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection.MeanExpectedHeterozygosityBinarySelection.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.meanexpectedheterozygosityselection.meanexpectedheterozygositybinaryselection property)": [[161, "pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection.MeanExpectedHeterozygosityBinarySelection.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.meanexpectedheterozygosityselection.meanexpectedheterozygositybinaryselection property)": [[161, "pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection.MeanExpectedHeterozygosityBinarySelection.obj_wt"]], "problem() (pybrops.breed.prot.sel.meanexpectedheterozygosityselection.meanexpectedheterozygositybinaryselection method)": [[161, "pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection.MeanExpectedHeterozygosityBinarySelection.problem"]], "rng (pybrops.breed.prot.sel.meanexpectedheterozygosityselection.meanexpectedheterozygositybinaryselection property)": [[161, "pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection.MeanExpectedHeterozygosityBinarySelection.rng"]], "select() (pybrops.breed.prot.sel.meanexpectedheterozygosityselection.meanexpectedheterozygositybinaryselection method)": [[161, "pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection.MeanExpectedHeterozygosityBinarySelection.select"]], "soalgo (pybrops.breed.prot.sel.meanexpectedheterozygosityselection.meanexpectedheterozygositybinaryselection property)": [[161, "pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection.MeanExpectedHeterozygosityBinarySelection.soalgo"]], "sosolve() (pybrops.breed.prot.sel.meanexpectedheterozygosityselection.meanexpectedheterozygositybinaryselection method)": [[161, "pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection.MeanExpectedHeterozygosityBinarySelection.sosolve"]], "meanexpectedheterozygosityintegerselection (class in pybrops.breed.prot.sel.meanexpectedheterozygosityselection)": [[162, "pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection.MeanExpectedHeterozygosityIntegerSelection"]], "eqcv_trans (pybrops.breed.prot.sel.meanexpectedheterozygosityselection.meanexpectedheterozygosityintegerselection property)": [[162, "pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection.MeanExpectedHeterozygosityIntegerSelection.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.meanexpectedheterozygosityselection.meanexpectedheterozygosityintegerselection property)": [[162, "pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection.MeanExpectedHeterozygosityIntegerSelection.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.meanexpectedheterozygosityselection.meanexpectedheterozygosityintegerselection property)": [[162, "pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection.MeanExpectedHeterozygosityIntegerSelection.eqcv_wt"]], "ineqcv_trans (pybrops.breed.prot.sel.meanexpectedheterozygosityselection.meanexpectedheterozygosityintegerselection property)": [[162, "pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection.MeanExpectedHeterozygosityIntegerSelection.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.meanexpectedheterozygosityselection.meanexpectedheterozygosityintegerselection property)": [[162, "pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection.MeanExpectedHeterozygosityIntegerSelection.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.meanexpectedheterozygosityselection.meanexpectedheterozygosityintegerselection property)": [[162, "pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection.MeanExpectedHeterozygosityIntegerSelection.ineqcv_wt"]], "moalgo (pybrops.breed.prot.sel.meanexpectedheterozygosityselection.meanexpectedheterozygosityintegerselection property)": [[162, "pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection.MeanExpectedHeterozygosityIntegerSelection.moalgo"]], "mosolve() (pybrops.breed.prot.sel.meanexpectedheterozygosityselection.meanexpectedheterozygosityintegerselection method)": [[162, "pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection.MeanExpectedHeterozygosityIntegerSelection.mosolve"]], "ncross (pybrops.breed.prot.sel.meanexpectedheterozygosityselection.meanexpectedheterozygosityintegerselection property)": [[162, "pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection.MeanExpectedHeterozygosityIntegerSelection.ncross"]], "ndset_trans (pybrops.breed.prot.sel.meanexpectedheterozygosityselection.meanexpectedheterozygosityintegerselection property)": [[162, "pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection.MeanExpectedHeterozygosityIntegerSelection.ndset_trans"]], "ndset_trans_kwargs (pybrops.breed.prot.sel.meanexpectedheterozygosityselection.meanexpectedheterozygosityintegerselection property)": [[162, "pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection.MeanExpectedHeterozygosityIntegerSelection.ndset_trans_kwargs"]], "ndset_wt (pybrops.breed.prot.sel.meanexpectedheterozygosityselection.meanexpectedheterozygosityintegerselection property)": [[162, "pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection.MeanExpectedHeterozygosityIntegerSelection.ndset_wt"]], "neqcv (pybrops.breed.prot.sel.meanexpectedheterozygosityselection.meanexpectedheterozygosityintegerselection property)": [[162, "pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection.MeanExpectedHeterozygosityIntegerSelection.neqcv"]], "nineqcv (pybrops.breed.prot.sel.meanexpectedheterozygosityselection.meanexpectedheterozygosityintegerselection property)": [[162, "pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection.MeanExpectedHeterozygosityIntegerSelection.nineqcv"]], "nmating (pybrops.breed.prot.sel.meanexpectedheterozygosityselection.meanexpectedheterozygosityintegerselection property)": [[162, "pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection.MeanExpectedHeterozygosityIntegerSelection.nmating"]], "nobj (pybrops.breed.prot.sel.meanexpectedheterozygosityselection.meanexpectedheterozygosityintegerselection property)": [[162, "pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection.MeanExpectedHeterozygosityIntegerSelection.nobj"]], "nparent (pybrops.breed.prot.sel.meanexpectedheterozygosityselection.meanexpectedheterozygosityintegerselection property)": [[162, "pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection.MeanExpectedHeterozygosityIntegerSelection.nparent"]], "nprogeny (pybrops.breed.prot.sel.meanexpectedheterozygosityselection.meanexpectedheterozygosityintegerselection property)": [[162, "pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection.MeanExpectedHeterozygosityIntegerSelection.nprogeny"]], "nselindiv (pybrops.breed.prot.sel.meanexpectedheterozygosityselection.meanexpectedheterozygosityintegerselection property)": [[162, "pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection.MeanExpectedHeterozygosityIntegerSelection.nselindiv"]], "obj_trans (pybrops.breed.prot.sel.meanexpectedheterozygosityselection.meanexpectedheterozygosityintegerselection property)": [[162, "pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection.MeanExpectedHeterozygosityIntegerSelection.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.meanexpectedheterozygosityselection.meanexpectedheterozygosityintegerselection property)": [[162, "pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection.MeanExpectedHeterozygosityIntegerSelection.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.meanexpectedheterozygosityselection.meanexpectedheterozygosityintegerselection property)": [[162, "pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection.MeanExpectedHeterozygosityIntegerSelection.obj_wt"]], "problem() (pybrops.breed.prot.sel.meanexpectedheterozygosityselection.meanexpectedheterozygosityintegerselection method)": [[162, "pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection.MeanExpectedHeterozygosityIntegerSelection.problem"]], "rng (pybrops.breed.prot.sel.meanexpectedheterozygosityselection.meanexpectedheterozygosityintegerselection property)": [[162, "pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection.MeanExpectedHeterozygosityIntegerSelection.rng"]], "select() (pybrops.breed.prot.sel.meanexpectedheterozygosityselection.meanexpectedheterozygosityintegerselection method)": [[162, "pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection.MeanExpectedHeterozygosityIntegerSelection.select"]], "soalgo (pybrops.breed.prot.sel.meanexpectedheterozygosityselection.meanexpectedheterozygosityintegerselection property)": [[162, "pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection.MeanExpectedHeterozygosityIntegerSelection.soalgo"]], "sosolve() (pybrops.breed.prot.sel.meanexpectedheterozygosityselection.meanexpectedheterozygosityintegerselection method)": [[162, "pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection.MeanExpectedHeterozygosityIntegerSelection.sosolve"]], "meanexpectedheterozygosityrealselection (class in pybrops.breed.prot.sel.meanexpectedheterozygosityselection)": [[163, "pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection.MeanExpectedHeterozygosityRealSelection"]], "eqcv_trans (pybrops.breed.prot.sel.meanexpectedheterozygosityselection.meanexpectedheterozygosityrealselection property)": [[163, "pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection.MeanExpectedHeterozygosityRealSelection.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.meanexpectedheterozygosityselection.meanexpectedheterozygosityrealselection property)": [[163, "pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection.MeanExpectedHeterozygosityRealSelection.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.meanexpectedheterozygosityselection.meanexpectedheterozygosityrealselection property)": [[163, "pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection.MeanExpectedHeterozygosityRealSelection.eqcv_wt"]], "ineqcv_trans (pybrops.breed.prot.sel.meanexpectedheterozygosityselection.meanexpectedheterozygosityrealselection property)": [[163, "pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection.MeanExpectedHeterozygosityRealSelection.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.meanexpectedheterozygosityselection.meanexpectedheterozygosityrealselection property)": [[163, "pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection.MeanExpectedHeterozygosityRealSelection.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.meanexpectedheterozygosityselection.meanexpectedheterozygosityrealselection property)": [[163, "pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection.MeanExpectedHeterozygosityRealSelection.ineqcv_wt"]], "moalgo (pybrops.breed.prot.sel.meanexpectedheterozygosityselection.meanexpectedheterozygosityrealselection property)": [[163, "pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection.MeanExpectedHeterozygosityRealSelection.moalgo"]], "mosolve() (pybrops.breed.prot.sel.meanexpectedheterozygosityselection.meanexpectedheterozygosityrealselection method)": [[163, "pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection.MeanExpectedHeterozygosityRealSelection.mosolve"]], "ncross (pybrops.breed.prot.sel.meanexpectedheterozygosityselection.meanexpectedheterozygosityrealselection property)": [[163, "pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection.MeanExpectedHeterozygosityRealSelection.ncross"]], "ndset_trans (pybrops.breed.prot.sel.meanexpectedheterozygosityselection.meanexpectedheterozygosityrealselection property)": [[163, "pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection.MeanExpectedHeterozygosityRealSelection.ndset_trans"]], "ndset_trans_kwargs (pybrops.breed.prot.sel.meanexpectedheterozygosityselection.meanexpectedheterozygosityrealselection property)": [[163, "pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection.MeanExpectedHeterozygosityRealSelection.ndset_trans_kwargs"]], "ndset_wt (pybrops.breed.prot.sel.meanexpectedheterozygosityselection.meanexpectedheterozygosityrealselection property)": [[163, "pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection.MeanExpectedHeterozygosityRealSelection.ndset_wt"]], "neqcv (pybrops.breed.prot.sel.meanexpectedheterozygosityselection.meanexpectedheterozygosityrealselection property)": [[163, "pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection.MeanExpectedHeterozygosityRealSelection.neqcv"]], "nineqcv (pybrops.breed.prot.sel.meanexpectedheterozygosityselection.meanexpectedheterozygosityrealselection property)": [[163, "pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection.MeanExpectedHeterozygosityRealSelection.nineqcv"]], "nmating (pybrops.breed.prot.sel.meanexpectedheterozygosityselection.meanexpectedheterozygosityrealselection property)": [[163, "pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection.MeanExpectedHeterozygosityRealSelection.nmating"]], "nobj (pybrops.breed.prot.sel.meanexpectedheterozygosityselection.meanexpectedheterozygosityrealselection property)": [[163, "pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection.MeanExpectedHeterozygosityRealSelection.nobj"]], "nparent (pybrops.breed.prot.sel.meanexpectedheterozygosityselection.meanexpectedheterozygosityrealselection property)": [[163, "pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection.MeanExpectedHeterozygosityRealSelection.nparent"]], "nprogeny (pybrops.breed.prot.sel.meanexpectedheterozygosityselection.meanexpectedheterozygosityrealselection property)": [[163, "pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection.MeanExpectedHeterozygosityRealSelection.nprogeny"]], "nselindiv (pybrops.breed.prot.sel.meanexpectedheterozygosityselection.meanexpectedheterozygosityrealselection property)": [[163, "pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection.MeanExpectedHeterozygosityRealSelection.nselindiv"]], "obj_trans (pybrops.breed.prot.sel.meanexpectedheterozygosityselection.meanexpectedheterozygosityrealselection property)": [[163, "pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection.MeanExpectedHeterozygosityRealSelection.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.meanexpectedheterozygosityselection.meanexpectedheterozygosityrealselection property)": [[163, "pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection.MeanExpectedHeterozygosityRealSelection.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.meanexpectedheterozygosityselection.meanexpectedheterozygosityrealselection property)": [[163, "pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection.MeanExpectedHeterozygosityRealSelection.obj_wt"]], "problem() (pybrops.breed.prot.sel.meanexpectedheterozygosityselection.meanexpectedheterozygosityrealselection method)": [[163, "pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection.MeanExpectedHeterozygosityRealSelection.problem"]], "rng (pybrops.breed.prot.sel.meanexpectedheterozygosityselection.meanexpectedheterozygosityrealselection property)": [[163, "pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection.MeanExpectedHeterozygosityRealSelection.rng"]], "select() (pybrops.breed.prot.sel.meanexpectedheterozygosityselection.meanexpectedheterozygosityrealselection method)": [[163, "pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection.MeanExpectedHeterozygosityRealSelection.select"]], "soalgo (pybrops.breed.prot.sel.meanexpectedheterozygosityselection.meanexpectedheterozygosityrealselection property)": [[163, "pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection.MeanExpectedHeterozygosityRealSelection.soalgo"]], "sosolve() (pybrops.breed.prot.sel.meanexpectedheterozygosityselection.meanexpectedheterozygosityrealselection method)": [[163, "pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection.MeanExpectedHeterozygosityRealSelection.sosolve"]], "meanexpectedheterozygosityselectionmixin (class in pybrops.breed.prot.sel.meanexpectedheterozygosityselection)": [[164, "pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection.MeanExpectedHeterozygositySelectionMixin"]], "meanexpectedheterozygositysubsetselection (class in pybrops.breed.prot.sel.meanexpectedheterozygosityselection)": [[165, "pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection.MeanExpectedHeterozygositySubsetSelection"]], "eqcv_trans (pybrops.breed.prot.sel.meanexpectedheterozygosityselection.meanexpectedheterozygositysubsetselection property)": [[165, "pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection.MeanExpectedHeterozygositySubsetSelection.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.meanexpectedheterozygosityselection.meanexpectedheterozygositysubsetselection property)": [[165, "pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection.MeanExpectedHeterozygositySubsetSelection.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.meanexpectedheterozygosityselection.meanexpectedheterozygositysubsetselection property)": [[165, "pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection.MeanExpectedHeterozygositySubsetSelection.eqcv_wt"]], "ineqcv_trans (pybrops.breed.prot.sel.meanexpectedheterozygosityselection.meanexpectedheterozygositysubsetselection property)": [[165, "pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection.MeanExpectedHeterozygositySubsetSelection.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.meanexpectedheterozygosityselection.meanexpectedheterozygositysubsetselection property)": [[165, "pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection.MeanExpectedHeterozygositySubsetSelection.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.meanexpectedheterozygosityselection.meanexpectedheterozygositysubsetselection property)": [[165, "pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection.MeanExpectedHeterozygositySubsetSelection.ineqcv_wt"]], "moalgo (pybrops.breed.prot.sel.meanexpectedheterozygosityselection.meanexpectedheterozygositysubsetselection property)": [[165, "pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection.MeanExpectedHeterozygositySubsetSelection.moalgo"]], "mosolve() (pybrops.breed.prot.sel.meanexpectedheterozygosityselection.meanexpectedheterozygositysubsetselection method)": [[165, "pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection.MeanExpectedHeterozygositySubsetSelection.mosolve"]], "ncross (pybrops.breed.prot.sel.meanexpectedheterozygosityselection.meanexpectedheterozygositysubsetselection property)": [[165, "pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection.MeanExpectedHeterozygositySubsetSelection.ncross"]], "ndset_trans (pybrops.breed.prot.sel.meanexpectedheterozygosityselection.meanexpectedheterozygositysubsetselection property)": [[165, "pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection.MeanExpectedHeterozygositySubsetSelection.ndset_trans"]], "ndset_trans_kwargs (pybrops.breed.prot.sel.meanexpectedheterozygosityselection.meanexpectedheterozygositysubsetselection property)": [[165, "pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection.MeanExpectedHeterozygositySubsetSelection.ndset_trans_kwargs"]], "ndset_wt (pybrops.breed.prot.sel.meanexpectedheterozygosityselection.meanexpectedheterozygositysubsetselection property)": [[165, "pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection.MeanExpectedHeterozygositySubsetSelection.ndset_wt"]], "neqcv (pybrops.breed.prot.sel.meanexpectedheterozygosityselection.meanexpectedheterozygositysubsetselection property)": [[165, "pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection.MeanExpectedHeterozygositySubsetSelection.neqcv"]], "nineqcv (pybrops.breed.prot.sel.meanexpectedheterozygosityselection.meanexpectedheterozygositysubsetselection property)": [[165, "pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection.MeanExpectedHeterozygositySubsetSelection.nineqcv"]], "nmating (pybrops.breed.prot.sel.meanexpectedheterozygosityselection.meanexpectedheterozygositysubsetselection property)": [[165, "pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection.MeanExpectedHeterozygositySubsetSelection.nmating"]], "nobj (pybrops.breed.prot.sel.meanexpectedheterozygosityselection.meanexpectedheterozygositysubsetselection property)": [[165, "pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection.MeanExpectedHeterozygositySubsetSelection.nobj"]], "nparent (pybrops.breed.prot.sel.meanexpectedheterozygosityselection.meanexpectedheterozygositysubsetselection property)": [[165, "pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection.MeanExpectedHeterozygositySubsetSelection.nparent"]], "nprogeny (pybrops.breed.prot.sel.meanexpectedheterozygosityselection.meanexpectedheterozygositysubsetselection property)": [[165, "pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection.MeanExpectedHeterozygositySubsetSelection.nprogeny"]], "nselindiv (pybrops.breed.prot.sel.meanexpectedheterozygosityselection.meanexpectedheterozygositysubsetselection property)": [[165, "pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection.MeanExpectedHeterozygositySubsetSelection.nselindiv"]], "obj_trans (pybrops.breed.prot.sel.meanexpectedheterozygosityselection.meanexpectedheterozygositysubsetselection property)": [[165, "pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection.MeanExpectedHeterozygositySubsetSelection.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.meanexpectedheterozygosityselection.meanexpectedheterozygositysubsetselection property)": [[165, "pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection.MeanExpectedHeterozygositySubsetSelection.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.meanexpectedheterozygosityselection.meanexpectedheterozygositysubsetselection property)": [[165, "pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection.MeanExpectedHeterozygositySubsetSelection.obj_wt"]], "problem() (pybrops.breed.prot.sel.meanexpectedheterozygosityselection.meanexpectedheterozygositysubsetselection method)": [[165, "pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection.MeanExpectedHeterozygositySubsetSelection.problem"]], "rng (pybrops.breed.prot.sel.meanexpectedheterozygosityselection.meanexpectedheterozygositysubsetselection property)": [[165, "pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection.MeanExpectedHeterozygositySubsetSelection.rng"]], "select() (pybrops.breed.prot.sel.meanexpectedheterozygosityselection.meanexpectedheterozygositysubsetselection method)": [[165, "pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection.MeanExpectedHeterozygositySubsetSelection.select"]], "soalgo (pybrops.breed.prot.sel.meanexpectedheterozygosityselection.meanexpectedheterozygositysubsetselection property)": [[165, "pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection.MeanExpectedHeterozygositySubsetSelection.soalgo"]], "sosolve() (pybrops.breed.prot.sel.meanexpectedheterozygosityselection.meanexpectedheterozygositysubsetselection method)": [[165, "pybrops.breed.prot.sel.MeanExpectedHeterozygositySelection.MeanExpectedHeterozygositySubsetSelection.sosolve"]], "pybrops.breed.prot.sel.meangenomicrelationshipselection": [[166, "module-pybrops.breed.prot.sel.MeanGenomicRelationshipSelection"]], "meangenomicrelationshipbinaryselection (class in pybrops.breed.prot.sel.meangenomicrelationshipselection)": [[167, "pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipBinarySelection"]], "cmatfcty (pybrops.breed.prot.sel.meangenomicrelationshipselection.meangenomicrelationshipbinaryselection property)": [[167, "pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipBinarySelection.cmatfcty"]], "eqcv_trans (pybrops.breed.prot.sel.meangenomicrelationshipselection.meangenomicrelationshipbinaryselection property)": [[167, "pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipBinarySelection.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.meangenomicrelationshipselection.meangenomicrelationshipbinaryselection property)": [[167, "pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipBinarySelection.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.meangenomicrelationshipselection.meangenomicrelationshipbinaryselection property)": [[167, "pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipBinarySelection.eqcv_wt"]], "ineqcv_trans (pybrops.breed.prot.sel.meangenomicrelationshipselection.meangenomicrelationshipbinaryselection property)": [[167, "pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipBinarySelection.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.meangenomicrelationshipselection.meangenomicrelationshipbinaryselection property)": [[167, "pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipBinarySelection.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.meangenomicrelationshipselection.meangenomicrelationshipbinaryselection property)": [[167, "pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipBinarySelection.ineqcv_wt"]], "moalgo (pybrops.breed.prot.sel.meangenomicrelationshipselection.meangenomicrelationshipbinaryselection property)": [[167, "pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipBinarySelection.moalgo"]], "mosolve() (pybrops.breed.prot.sel.meangenomicrelationshipselection.meangenomicrelationshipbinaryselection method)": [[167, "pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipBinarySelection.mosolve"]], "ncross (pybrops.breed.prot.sel.meangenomicrelationshipselection.meangenomicrelationshipbinaryselection property)": [[167, "pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipBinarySelection.ncross"]], "ndset_trans (pybrops.breed.prot.sel.meangenomicrelationshipselection.meangenomicrelationshipbinaryselection property)": [[167, "pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipBinarySelection.ndset_trans"]], "ndset_trans_kwargs (pybrops.breed.prot.sel.meangenomicrelationshipselection.meangenomicrelationshipbinaryselection property)": [[167, "pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipBinarySelection.ndset_trans_kwargs"]], "ndset_wt (pybrops.breed.prot.sel.meangenomicrelationshipselection.meangenomicrelationshipbinaryselection property)": [[167, "pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipBinarySelection.ndset_wt"]], "neqcv (pybrops.breed.prot.sel.meangenomicrelationshipselection.meangenomicrelationshipbinaryselection property)": [[167, "pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipBinarySelection.neqcv"]], "nineqcv (pybrops.breed.prot.sel.meangenomicrelationshipselection.meangenomicrelationshipbinaryselection property)": [[167, "pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipBinarySelection.nineqcv"]], "nmating (pybrops.breed.prot.sel.meangenomicrelationshipselection.meangenomicrelationshipbinaryselection property)": [[167, "pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipBinarySelection.nmating"]], "nobj (pybrops.breed.prot.sel.meangenomicrelationshipselection.meangenomicrelationshipbinaryselection property)": [[167, "pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipBinarySelection.nobj"]], "nparent (pybrops.breed.prot.sel.meangenomicrelationshipselection.meangenomicrelationshipbinaryselection property)": [[167, "pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipBinarySelection.nparent"]], "nprogeny (pybrops.breed.prot.sel.meangenomicrelationshipselection.meangenomicrelationshipbinaryselection property)": [[167, "pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipBinarySelection.nprogeny"]], "nselindiv (pybrops.breed.prot.sel.meangenomicrelationshipselection.meangenomicrelationshipbinaryselection property)": [[167, "pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipBinarySelection.nselindiv"]], "obj_trans (pybrops.breed.prot.sel.meangenomicrelationshipselection.meangenomicrelationshipbinaryselection property)": [[167, "pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipBinarySelection.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.meangenomicrelationshipselection.meangenomicrelationshipbinaryselection property)": [[167, "pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipBinarySelection.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.meangenomicrelationshipselection.meangenomicrelationshipbinaryselection property)": [[167, "pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipBinarySelection.obj_wt"]], "problem() (pybrops.breed.prot.sel.meangenomicrelationshipselection.meangenomicrelationshipbinaryselection method)": [[167, "pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipBinarySelection.problem"]], "rng (pybrops.breed.prot.sel.meangenomicrelationshipselection.meangenomicrelationshipbinaryselection property)": [[167, "pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipBinarySelection.rng"]], "select() (pybrops.breed.prot.sel.meangenomicrelationshipselection.meangenomicrelationshipbinaryselection method)": [[167, "pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipBinarySelection.select"]], "soalgo (pybrops.breed.prot.sel.meangenomicrelationshipselection.meangenomicrelationshipbinaryselection property)": [[167, "pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipBinarySelection.soalgo"]], "sosolve() (pybrops.breed.prot.sel.meangenomicrelationshipselection.meangenomicrelationshipbinaryselection method)": [[167, "pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipBinarySelection.sosolve"]], "meangenomicrelationshipintegerselection (class in pybrops.breed.prot.sel.meangenomicrelationshipselection)": [[168, "pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipIntegerSelection"]], "cmatfcty (pybrops.breed.prot.sel.meangenomicrelationshipselection.meangenomicrelationshipintegerselection property)": [[168, "pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipIntegerSelection.cmatfcty"]], "eqcv_trans (pybrops.breed.prot.sel.meangenomicrelationshipselection.meangenomicrelationshipintegerselection property)": [[168, "pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipIntegerSelection.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.meangenomicrelationshipselection.meangenomicrelationshipintegerselection property)": [[168, "pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipIntegerSelection.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.meangenomicrelationshipselection.meangenomicrelationshipintegerselection property)": [[168, "pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipIntegerSelection.eqcv_wt"]], "ineqcv_trans (pybrops.breed.prot.sel.meangenomicrelationshipselection.meangenomicrelationshipintegerselection property)": [[168, "pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipIntegerSelection.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.meangenomicrelationshipselection.meangenomicrelationshipintegerselection property)": [[168, "pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipIntegerSelection.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.meangenomicrelationshipselection.meangenomicrelationshipintegerselection property)": [[168, "pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipIntegerSelection.ineqcv_wt"]], "moalgo (pybrops.breed.prot.sel.meangenomicrelationshipselection.meangenomicrelationshipintegerselection property)": [[168, "pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipIntegerSelection.moalgo"]], "mosolve() (pybrops.breed.prot.sel.meangenomicrelationshipselection.meangenomicrelationshipintegerselection method)": [[168, "pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipIntegerSelection.mosolve"]], "ncross (pybrops.breed.prot.sel.meangenomicrelationshipselection.meangenomicrelationshipintegerselection property)": [[168, "pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipIntegerSelection.ncross"]], "ndset_trans (pybrops.breed.prot.sel.meangenomicrelationshipselection.meangenomicrelationshipintegerselection property)": [[168, "pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipIntegerSelection.ndset_trans"]], "ndset_trans_kwargs (pybrops.breed.prot.sel.meangenomicrelationshipselection.meangenomicrelationshipintegerselection property)": [[168, "pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipIntegerSelection.ndset_trans_kwargs"]], "ndset_wt (pybrops.breed.prot.sel.meangenomicrelationshipselection.meangenomicrelationshipintegerselection property)": [[168, "pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipIntegerSelection.ndset_wt"]], "neqcv (pybrops.breed.prot.sel.meangenomicrelationshipselection.meangenomicrelationshipintegerselection property)": [[168, "pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipIntegerSelection.neqcv"]], "nineqcv (pybrops.breed.prot.sel.meangenomicrelationshipselection.meangenomicrelationshipintegerselection property)": [[168, "pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipIntegerSelection.nineqcv"]], "nmating (pybrops.breed.prot.sel.meangenomicrelationshipselection.meangenomicrelationshipintegerselection property)": [[168, "pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipIntegerSelection.nmating"]], "nobj (pybrops.breed.prot.sel.meangenomicrelationshipselection.meangenomicrelationshipintegerselection property)": [[168, "pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipIntegerSelection.nobj"]], "nparent (pybrops.breed.prot.sel.meangenomicrelationshipselection.meangenomicrelationshipintegerselection property)": [[168, "pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipIntegerSelection.nparent"]], "nprogeny (pybrops.breed.prot.sel.meangenomicrelationshipselection.meangenomicrelationshipintegerselection property)": [[168, "pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipIntegerSelection.nprogeny"]], "nselindiv (pybrops.breed.prot.sel.meangenomicrelationshipselection.meangenomicrelationshipintegerselection property)": [[168, "pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipIntegerSelection.nselindiv"]], "obj_trans (pybrops.breed.prot.sel.meangenomicrelationshipselection.meangenomicrelationshipintegerselection property)": [[168, "pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipIntegerSelection.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.meangenomicrelationshipselection.meangenomicrelationshipintegerselection property)": [[168, "pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipIntegerSelection.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.meangenomicrelationshipselection.meangenomicrelationshipintegerselection property)": [[168, "pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipIntegerSelection.obj_wt"]], "problem() (pybrops.breed.prot.sel.meangenomicrelationshipselection.meangenomicrelationshipintegerselection method)": [[168, "pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipIntegerSelection.problem"]], "rng (pybrops.breed.prot.sel.meangenomicrelationshipselection.meangenomicrelationshipintegerselection property)": [[168, "pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipIntegerSelection.rng"]], "select() (pybrops.breed.prot.sel.meangenomicrelationshipselection.meangenomicrelationshipintegerselection method)": [[168, "pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipIntegerSelection.select"]], "soalgo (pybrops.breed.prot.sel.meangenomicrelationshipselection.meangenomicrelationshipintegerselection property)": [[168, "pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipIntegerSelection.soalgo"]], "sosolve() (pybrops.breed.prot.sel.meangenomicrelationshipselection.meangenomicrelationshipintegerselection method)": [[168, "pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipIntegerSelection.sosolve"]], "meangenomicrelationshiprealselection (class in pybrops.breed.prot.sel.meangenomicrelationshipselection)": [[169, "pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipRealSelection"]], "cmatfcty (pybrops.breed.prot.sel.meangenomicrelationshipselection.meangenomicrelationshiprealselection property)": [[169, "pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipRealSelection.cmatfcty"]], "eqcv_trans (pybrops.breed.prot.sel.meangenomicrelationshipselection.meangenomicrelationshiprealselection property)": [[169, "pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipRealSelection.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.meangenomicrelationshipselection.meangenomicrelationshiprealselection property)": [[169, "pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipRealSelection.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.meangenomicrelationshipselection.meangenomicrelationshiprealselection property)": [[169, "pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipRealSelection.eqcv_wt"]], "ineqcv_trans (pybrops.breed.prot.sel.meangenomicrelationshipselection.meangenomicrelationshiprealselection property)": [[169, "pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipRealSelection.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.meangenomicrelationshipselection.meangenomicrelationshiprealselection property)": [[169, "pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipRealSelection.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.meangenomicrelationshipselection.meangenomicrelationshiprealselection property)": [[169, "pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipRealSelection.ineqcv_wt"]], "moalgo (pybrops.breed.prot.sel.meangenomicrelationshipselection.meangenomicrelationshiprealselection property)": [[169, "pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipRealSelection.moalgo"]], "mosolve() (pybrops.breed.prot.sel.meangenomicrelationshipselection.meangenomicrelationshiprealselection method)": [[169, "pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipRealSelection.mosolve"]], "ncross (pybrops.breed.prot.sel.meangenomicrelationshipselection.meangenomicrelationshiprealselection property)": [[169, "pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipRealSelection.ncross"]], "ndset_trans (pybrops.breed.prot.sel.meangenomicrelationshipselection.meangenomicrelationshiprealselection property)": [[169, "pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipRealSelection.ndset_trans"]], "ndset_trans_kwargs (pybrops.breed.prot.sel.meangenomicrelationshipselection.meangenomicrelationshiprealselection property)": [[169, "pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipRealSelection.ndset_trans_kwargs"]], "ndset_wt (pybrops.breed.prot.sel.meangenomicrelationshipselection.meangenomicrelationshiprealselection property)": [[169, "pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipRealSelection.ndset_wt"]], "neqcv (pybrops.breed.prot.sel.meangenomicrelationshipselection.meangenomicrelationshiprealselection property)": [[169, "pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipRealSelection.neqcv"]], "nineqcv (pybrops.breed.prot.sel.meangenomicrelationshipselection.meangenomicrelationshiprealselection property)": [[169, "pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipRealSelection.nineqcv"]], "nmating (pybrops.breed.prot.sel.meangenomicrelationshipselection.meangenomicrelationshiprealselection property)": [[169, "pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipRealSelection.nmating"]], "nobj (pybrops.breed.prot.sel.meangenomicrelationshipselection.meangenomicrelationshiprealselection property)": [[169, "pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipRealSelection.nobj"]], "nparent (pybrops.breed.prot.sel.meangenomicrelationshipselection.meangenomicrelationshiprealselection property)": [[169, "pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipRealSelection.nparent"]], "nprogeny (pybrops.breed.prot.sel.meangenomicrelationshipselection.meangenomicrelationshiprealselection property)": [[169, "pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipRealSelection.nprogeny"]], "nselindiv (pybrops.breed.prot.sel.meangenomicrelationshipselection.meangenomicrelationshiprealselection property)": [[169, "pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipRealSelection.nselindiv"]], "obj_trans (pybrops.breed.prot.sel.meangenomicrelationshipselection.meangenomicrelationshiprealselection property)": [[169, "pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipRealSelection.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.meangenomicrelationshipselection.meangenomicrelationshiprealselection property)": [[169, "pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipRealSelection.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.meangenomicrelationshipselection.meangenomicrelationshiprealselection property)": [[169, "pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipRealSelection.obj_wt"]], "problem() (pybrops.breed.prot.sel.meangenomicrelationshipselection.meangenomicrelationshiprealselection method)": [[169, "pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipRealSelection.problem"]], "rng (pybrops.breed.prot.sel.meangenomicrelationshipselection.meangenomicrelationshiprealselection property)": [[169, "pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipRealSelection.rng"]], "select() (pybrops.breed.prot.sel.meangenomicrelationshipselection.meangenomicrelationshiprealselection method)": [[169, "pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipRealSelection.select"]], "soalgo (pybrops.breed.prot.sel.meangenomicrelationshipselection.meangenomicrelationshiprealselection property)": [[169, "pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipRealSelection.soalgo"]], "sosolve() (pybrops.breed.prot.sel.meangenomicrelationshipselection.meangenomicrelationshiprealselection method)": [[169, "pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipRealSelection.sosolve"]], "meangenomicrelationshipselectionmixin (class in pybrops.breed.prot.sel.meangenomicrelationshipselection)": [[170, "pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipSelectionMixin"]], "cmatfcty (pybrops.breed.prot.sel.meangenomicrelationshipselection.meangenomicrelationshipselectionmixin property)": [[170, "pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipSelectionMixin.cmatfcty"]], "meangenomicrelationshipsubsetselection (class in pybrops.breed.prot.sel.meangenomicrelationshipselection)": [[171, "pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipSubsetSelection"]], "cmatfcty (pybrops.breed.prot.sel.meangenomicrelationshipselection.meangenomicrelationshipsubsetselection property)": [[171, "pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipSubsetSelection.cmatfcty"]], "eqcv_trans (pybrops.breed.prot.sel.meangenomicrelationshipselection.meangenomicrelationshipsubsetselection property)": [[171, "pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipSubsetSelection.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.meangenomicrelationshipselection.meangenomicrelationshipsubsetselection property)": [[171, "pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipSubsetSelection.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.meangenomicrelationshipselection.meangenomicrelationshipsubsetselection property)": [[171, "pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipSubsetSelection.eqcv_wt"]], "ineqcv_trans (pybrops.breed.prot.sel.meangenomicrelationshipselection.meangenomicrelationshipsubsetselection property)": [[171, "pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipSubsetSelection.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.meangenomicrelationshipselection.meangenomicrelationshipsubsetselection property)": [[171, "pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipSubsetSelection.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.meangenomicrelationshipselection.meangenomicrelationshipsubsetselection property)": [[171, "pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipSubsetSelection.ineqcv_wt"]], "moalgo (pybrops.breed.prot.sel.meangenomicrelationshipselection.meangenomicrelationshipsubsetselection property)": [[171, "pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipSubsetSelection.moalgo"]], "mosolve() (pybrops.breed.prot.sel.meangenomicrelationshipselection.meangenomicrelationshipsubsetselection method)": [[171, "pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipSubsetSelection.mosolve"]], "ncross (pybrops.breed.prot.sel.meangenomicrelationshipselection.meangenomicrelationshipsubsetselection property)": [[171, "pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipSubsetSelection.ncross"]], "ndset_trans (pybrops.breed.prot.sel.meangenomicrelationshipselection.meangenomicrelationshipsubsetselection property)": [[171, "pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipSubsetSelection.ndset_trans"]], "ndset_trans_kwargs (pybrops.breed.prot.sel.meangenomicrelationshipselection.meangenomicrelationshipsubsetselection property)": [[171, "pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipSubsetSelection.ndset_trans_kwargs"]], "ndset_wt (pybrops.breed.prot.sel.meangenomicrelationshipselection.meangenomicrelationshipsubsetselection property)": [[171, "pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipSubsetSelection.ndset_wt"]], "neqcv (pybrops.breed.prot.sel.meangenomicrelationshipselection.meangenomicrelationshipsubsetselection property)": [[171, "pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipSubsetSelection.neqcv"]], "nineqcv (pybrops.breed.prot.sel.meangenomicrelationshipselection.meangenomicrelationshipsubsetselection property)": [[171, "pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipSubsetSelection.nineqcv"]], "nmating (pybrops.breed.prot.sel.meangenomicrelationshipselection.meangenomicrelationshipsubsetselection property)": [[171, "pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipSubsetSelection.nmating"]], "nobj (pybrops.breed.prot.sel.meangenomicrelationshipselection.meangenomicrelationshipsubsetselection property)": [[171, "pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipSubsetSelection.nobj"]], "nparent (pybrops.breed.prot.sel.meangenomicrelationshipselection.meangenomicrelationshipsubsetselection property)": [[171, "pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipSubsetSelection.nparent"]], "nprogeny (pybrops.breed.prot.sel.meangenomicrelationshipselection.meangenomicrelationshipsubsetselection property)": [[171, "pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipSubsetSelection.nprogeny"]], "nselindiv (pybrops.breed.prot.sel.meangenomicrelationshipselection.meangenomicrelationshipsubsetselection property)": [[171, "pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipSubsetSelection.nselindiv"]], "obj_trans (pybrops.breed.prot.sel.meangenomicrelationshipselection.meangenomicrelationshipsubsetselection property)": [[171, "pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipSubsetSelection.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.meangenomicrelationshipselection.meangenomicrelationshipsubsetselection property)": [[171, "pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipSubsetSelection.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.meangenomicrelationshipselection.meangenomicrelationshipsubsetselection property)": [[171, "pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipSubsetSelection.obj_wt"]], "problem() (pybrops.breed.prot.sel.meangenomicrelationshipselection.meangenomicrelationshipsubsetselection method)": [[171, "pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipSubsetSelection.problem"]], "rng (pybrops.breed.prot.sel.meangenomicrelationshipselection.meangenomicrelationshipsubsetselection property)": [[171, "pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipSubsetSelection.rng"]], "select() (pybrops.breed.prot.sel.meangenomicrelationshipselection.meangenomicrelationshipsubsetselection method)": [[171, "pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipSubsetSelection.select"]], "soalgo (pybrops.breed.prot.sel.meangenomicrelationshipselection.meangenomicrelationshipsubsetselection property)": [[171, "pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipSubsetSelection.soalgo"]], "sosolve() (pybrops.breed.prot.sel.meangenomicrelationshipselection.meangenomicrelationshipsubsetselection method)": [[171, "pybrops.breed.prot.sel.MeanGenomicRelationshipSelection.MeanGenomicRelationshipSubsetSelection.sosolve"]], "pybrops.breed.prot.sel.multiobjectivegenomicselection": [[172, "module-pybrops.breed.prot.sel.MultiObjectiveGenomicSelection"]], "multiobjectivegenomicselectionmixin (class in pybrops.breed.prot.sel.multiobjectivegenomicselection)": [[173, "pybrops.breed.prot.sel.MultiObjectiveGenomicSelection.MultiObjectiveGenomicSelectionMixin"]], "ntrait (pybrops.breed.prot.sel.multiobjectivegenomicselection.multiobjectivegenomicselectionmixin property)": [[173, "pybrops.breed.prot.sel.MultiObjectiveGenomicSelection.MultiObjectiveGenomicSelectionMixin.ntrait"]], "target (pybrops.breed.prot.sel.multiobjectivegenomicselection.multiobjectivegenomicselectionmixin property)": [[173, "pybrops.breed.prot.sel.MultiObjectiveGenomicSelection.MultiObjectiveGenomicSelectionMixin.target"]], "weight (pybrops.breed.prot.sel.multiobjectivegenomicselection.multiobjectivegenomicselectionmixin property)": [[173, "pybrops.breed.prot.sel.MultiObjectiveGenomicSelection.MultiObjectiveGenomicSelectionMixin.weight"]], "multiobjectivegenomicsubsetselection (class in pybrops.breed.prot.sel.multiobjectivegenomicselection)": [[174, "pybrops.breed.prot.sel.MultiObjectiveGenomicSelection.MultiObjectiveGenomicSubsetSelection"]], "eqcv_trans (pybrops.breed.prot.sel.multiobjectivegenomicselection.multiobjectivegenomicsubsetselection property)": [[174, "pybrops.breed.prot.sel.MultiObjectiveGenomicSelection.MultiObjectiveGenomicSubsetSelection.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.multiobjectivegenomicselection.multiobjectivegenomicsubsetselection property)": [[174, "pybrops.breed.prot.sel.MultiObjectiveGenomicSelection.MultiObjectiveGenomicSubsetSelection.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.multiobjectivegenomicselection.multiobjectivegenomicsubsetselection property)": [[174, "pybrops.breed.prot.sel.MultiObjectiveGenomicSelection.MultiObjectiveGenomicSubsetSelection.eqcv_wt"]], "ineqcv_trans (pybrops.breed.prot.sel.multiobjectivegenomicselection.multiobjectivegenomicsubsetselection property)": [[174, "pybrops.breed.prot.sel.MultiObjectiveGenomicSelection.MultiObjectiveGenomicSubsetSelection.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.multiobjectivegenomicselection.multiobjectivegenomicsubsetselection property)": [[174, "pybrops.breed.prot.sel.MultiObjectiveGenomicSelection.MultiObjectiveGenomicSubsetSelection.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.multiobjectivegenomicselection.multiobjectivegenomicsubsetselection property)": [[174, "pybrops.breed.prot.sel.MultiObjectiveGenomicSelection.MultiObjectiveGenomicSubsetSelection.ineqcv_wt"]], "moalgo (pybrops.breed.prot.sel.multiobjectivegenomicselection.multiobjectivegenomicsubsetselection property)": [[174, "pybrops.breed.prot.sel.MultiObjectiveGenomicSelection.MultiObjectiveGenomicSubsetSelection.moalgo"]], "mosolve() (pybrops.breed.prot.sel.multiobjectivegenomicselection.multiobjectivegenomicsubsetselection method)": [[174, "pybrops.breed.prot.sel.MultiObjectiveGenomicSelection.MultiObjectiveGenomicSubsetSelection.mosolve"]], "ncross (pybrops.breed.prot.sel.multiobjectivegenomicselection.multiobjectivegenomicsubsetselection property)": [[174, "pybrops.breed.prot.sel.MultiObjectiveGenomicSelection.MultiObjectiveGenomicSubsetSelection.ncross"]], "ndset_trans (pybrops.breed.prot.sel.multiobjectivegenomicselection.multiobjectivegenomicsubsetselection property)": [[174, "pybrops.breed.prot.sel.MultiObjectiveGenomicSelection.MultiObjectiveGenomicSubsetSelection.ndset_trans"]], "ndset_trans_kwargs (pybrops.breed.prot.sel.multiobjectivegenomicselection.multiobjectivegenomicsubsetselection property)": [[174, "pybrops.breed.prot.sel.MultiObjectiveGenomicSelection.MultiObjectiveGenomicSubsetSelection.ndset_trans_kwargs"]], "ndset_wt (pybrops.breed.prot.sel.multiobjectivegenomicselection.multiobjectivegenomicsubsetselection property)": [[174, "pybrops.breed.prot.sel.MultiObjectiveGenomicSelection.MultiObjectiveGenomicSubsetSelection.ndset_wt"]], "neqcv (pybrops.breed.prot.sel.multiobjectivegenomicselection.multiobjectivegenomicsubsetselection property)": [[174, "pybrops.breed.prot.sel.MultiObjectiveGenomicSelection.MultiObjectiveGenomicSubsetSelection.neqcv"]], "nineqcv (pybrops.breed.prot.sel.multiobjectivegenomicselection.multiobjectivegenomicsubsetselection property)": [[174, "pybrops.breed.prot.sel.MultiObjectiveGenomicSelection.MultiObjectiveGenomicSubsetSelection.nineqcv"]], "nmating (pybrops.breed.prot.sel.multiobjectivegenomicselection.multiobjectivegenomicsubsetselection property)": [[174, "pybrops.breed.prot.sel.MultiObjectiveGenomicSelection.MultiObjectiveGenomicSubsetSelection.nmating"]], "nobj (pybrops.breed.prot.sel.multiobjectivegenomicselection.multiobjectivegenomicsubsetselection property)": [[174, "pybrops.breed.prot.sel.MultiObjectiveGenomicSelection.MultiObjectiveGenomicSubsetSelection.nobj"]], "nparent (pybrops.breed.prot.sel.multiobjectivegenomicselection.multiobjectivegenomicsubsetselection property)": [[174, "pybrops.breed.prot.sel.MultiObjectiveGenomicSelection.MultiObjectiveGenomicSubsetSelection.nparent"]], "nprogeny (pybrops.breed.prot.sel.multiobjectivegenomicselection.multiobjectivegenomicsubsetselection property)": [[174, "pybrops.breed.prot.sel.MultiObjectiveGenomicSelection.MultiObjectiveGenomicSubsetSelection.nprogeny"]], "nselindiv (pybrops.breed.prot.sel.multiobjectivegenomicselection.multiobjectivegenomicsubsetselection property)": [[174, "pybrops.breed.prot.sel.MultiObjectiveGenomicSelection.MultiObjectiveGenomicSubsetSelection.nselindiv"]], "ntrait (pybrops.breed.prot.sel.multiobjectivegenomicselection.multiobjectivegenomicsubsetselection property)": [[174, "pybrops.breed.prot.sel.MultiObjectiveGenomicSelection.MultiObjectiveGenomicSubsetSelection.ntrait"]], "obj_trans (pybrops.breed.prot.sel.multiobjectivegenomicselection.multiobjectivegenomicsubsetselection property)": [[174, "pybrops.breed.prot.sel.MultiObjectiveGenomicSelection.MultiObjectiveGenomicSubsetSelection.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.multiobjectivegenomicselection.multiobjectivegenomicsubsetselection property)": [[174, "pybrops.breed.prot.sel.MultiObjectiveGenomicSelection.MultiObjectiveGenomicSubsetSelection.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.multiobjectivegenomicselection.multiobjectivegenomicsubsetselection property)": [[174, "pybrops.breed.prot.sel.MultiObjectiveGenomicSelection.MultiObjectiveGenomicSubsetSelection.obj_wt"]], "problem() (pybrops.breed.prot.sel.multiobjectivegenomicselection.multiobjectivegenomicsubsetselection method)": [[174, "pybrops.breed.prot.sel.MultiObjectiveGenomicSelection.MultiObjectiveGenomicSubsetSelection.problem"]], "rng (pybrops.breed.prot.sel.multiobjectivegenomicselection.multiobjectivegenomicsubsetselection property)": [[174, "pybrops.breed.prot.sel.MultiObjectiveGenomicSelection.MultiObjectiveGenomicSubsetSelection.rng"]], "select() (pybrops.breed.prot.sel.multiobjectivegenomicselection.multiobjectivegenomicsubsetselection method)": [[174, "pybrops.breed.prot.sel.MultiObjectiveGenomicSelection.MultiObjectiveGenomicSubsetSelection.select"]], "soalgo (pybrops.breed.prot.sel.multiobjectivegenomicselection.multiobjectivegenomicsubsetselection property)": [[174, "pybrops.breed.prot.sel.MultiObjectiveGenomicSelection.MultiObjectiveGenomicSubsetSelection.soalgo"]], "sosolve() (pybrops.breed.prot.sel.multiobjectivegenomicselection.multiobjectivegenomicsubsetselection method)": [[174, "pybrops.breed.prot.sel.MultiObjectiveGenomicSelection.MultiObjectiveGenomicSubsetSelection.sosolve"]], "target (pybrops.breed.prot.sel.multiobjectivegenomicselection.multiobjectivegenomicsubsetselection property)": [[174, "pybrops.breed.prot.sel.MultiObjectiveGenomicSelection.MultiObjectiveGenomicSubsetSelection.target"]], "weight (pybrops.breed.prot.sel.multiobjectivegenomicselection.multiobjectivegenomicsubsetselection property)": [[174, "pybrops.breed.prot.sel.MultiObjectiveGenomicSelection.MultiObjectiveGenomicSubsetSelection.weight"]], "pybrops.breed.prot.sel.optimalcontributionselection": [[175, "module-pybrops.breed.prot.sel.OptimalContributionSelection"]], "optimalcontributionbinaryselection (class in pybrops.breed.prot.sel.optimalcontributionselection)": [[176, "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionBinarySelection"]], "cmatfcty (pybrops.breed.prot.sel.optimalcontributionselection.optimalcontributionbinaryselection property)": [[176, "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionBinarySelection.cmatfcty"]], "eqcv_trans (pybrops.breed.prot.sel.optimalcontributionselection.optimalcontributionbinaryselection property)": [[176, "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionBinarySelection.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.optimalcontributionselection.optimalcontributionbinaryselection property)": [[176, "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionBinarySelection.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.optimalcontributionselection.optimalcontributionbinaryselection property)": [[176, "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionBinarySelection.eqcv_wt"]], "ineqcv_trans (pybrops.breed.prot.sel.optimalcontributionselection.optimalcontributionbinaryselection property)": [[176, "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionBinarySelection.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.optimalcontributionselection.optimalcontributionbinaryselection property)": [[176, "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionBinarySelection.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.optimalcontributionselection.optimalcontributionbinaryselection property)": [[176, "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionBinarySelection.ineqcv_wt"]], "moalgo (pybrops.breed.prot.sel.optimalcontributionselection.optimalcontributionbinaryselection property)": [[176, "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionBinarySelection.moalgo"]], "mosolve() (pybrops.breed.prot.sel.optimalcontributionselection.optimalcontributionbinaryselection method)": [[176, "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionBinarySelection.mosolve"]], "ncross (pybrops.breed.prot.sel.optimalcontributionselection.optimalcontributionbinaryselection property)": [[176, "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionBinarySelection.ncross"]], "ndset_trans (pybrops.breed.prot.sel.optimalcontributionselection.optimalcontributionbinaryselection property)": [[176, "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionBinarySelection.ndset_trans"]], "ndset_trans_kwargs (pybrops.breed.prot.sel.optimalcontributionselection.optimalcontributionbinaryselection property)": [[176, "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionBinarySelection.ndset_trans_kwargs"]], "ndset_wt (pybrops.breed.prot.sel.optimalcontributionselection.optimalcontributionbinaryselection property)": [[176, "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionBinarySelection.ndset_wt"]], "neqcv (pybrops.breed.prot.sel.optimalcontributionselection.optimalcontributionbinaryselection property)": [[176, "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionBinarySelection.neqcv"]], "nineqcv (pybrops.breed.prot.sel.optimalcontributionselection.optimalcontributionbinaryselection property)": [[176, "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionBinarySelection.nineqcv"]], "nmating (pybrops.breed.prot.sel.optimalcontributionselection.optimalcontributionbinaryselection property)": [[176, "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionBinarySelection.nmating"]], "nobj (pybrops.breed.prot.sel.optimalcontributionselection.optimalcontributionbinaryselection property)": [[176, "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionBinarySelection.nobj"]], "nparent (pybrops.breed.prot.sel.optimalcontributionselection.optimalcontributionbinaryselection property)": [[176, "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionBinarySelection.nparent"]], "nprogeny (pybrops.breed.prot.sel.optimalcontributionselection.optimalcontributionbinaryselection property)": [[176, "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionBinarySelection.nprogeny"]], "nselindiv (pybrops.breed.prot.sel.optimalcontributionselection.optimalcontributionbinaryselection property)": [[176, "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionBinarySelection.nselindiv"]], "ntrait (pybrops.breed.prot.sel.optimalcontributionselection.optimalcontributionbinaryselection property)": [[176, "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionBinarySelection.ntrait"]], "obj_trans (pybrops.breed.prot.sel.optimalcontributionselection.optimalcontributionbinaryselection property)": [[176, "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionBinarySelection.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.optimalcontributionselection.optimalcontributionbinaryselection property)": [[176, "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionBinarySelection.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.optimalcontributionselection.optimalcontributionbinaryselection property)": [[176, "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionBinarySelection.obj_wt"]], "problem() (pybrops.breed.prot.sel.optimalcontributionselection.optimalcontributionbinaryselection method)": [[176, "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionBinarySelection.problem"]], "rng (pybrops.breed.prot.sel.optimalcontributionselection.optimalcontributionbinaryselection property)": [[176, "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionBinarySelection.rng"]], "select() (pybrops.breed.prot.sel.optimalcontributionselection.optimalcontributionbinaryselection method)": [[176, "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionBinarySelection.select"]], "soalgo (pybrops.breed.prot.sel.optimalcontributionselection.optimalcontributionbinaryselection property)": [[176, "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionBinarySelection.soalgo"]], "sosolve() (pybrops.breed.prot.sel.optimalcontributionselection.optimalcontributionbinaryselection method)": [[176, "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionBinarySelection.sosolve"]], "unscale (pybrops.breed.prot.sel.optimalcontributionselection.optimalcontributionbinaryselection property)": [[176, "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionBinarySelection.unscale"]], "optimalcontributionintegerselection (class in pybrops.breed.prot.sel.optimalcontributionselection)": [[177, "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionIntegerSelection"]], "cmatfcty (pybrops.breed.prot.sel.optimalcontributionselection.optimalcontributionintegerselection property)": [[177, "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionIntegerSelection.cmatfcty"]], "eqcv_trans (pybrops.breed.prot.sel.optimalcontributionselection.optimalcontributionintegerselection property)": [[177, "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionIntegerSelection.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.optimalcontributionselection.optimalcontributionintegerselection property)": [[177, "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionIntegerSelection.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.optimalcontributionselection.optimalcontributionintegerselection property)": [[177, "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionIntegerSelection.eqcv_wt"]], "ineqcv_trans (pybrops.breed.prot.sel.optimalcontributionselection.optimalcontributionintegerselection property)": [[177, "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionIntegerSelection.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.optimalcontributionselection.optimalcontributionintegerselection property)": [[177, "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionIntegerSelection.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.optimalcontributionselection.optimalcontributionintegerselection property)": [[177, "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionIntegerSelection.ineqcv_wt"]], "moalgo (pybrops.breed.prot.sel.optimalcontributionselection.optimalcontributionintegerselection property)": [[177, "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionIntegerSelection.moalgo"]], "mosolve() (pybrops.breed.prot.sel.optimalcontributionselection.optimalcontributionintegerselection method)": [[177, "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionIntegerSelection.mosolve"]], "ncross (pybrops.breed.prot.sel.optimalcontributionselection.optimalcontributionintegerselection property)": [[177, "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionIntegerSelection.ncross"]], "ndset_trans (pybrops.breed.prot.sel.optimalcontributionselection.optimalcontributionintegerselection property)": [[177, "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionIntegerSelection.ndset_trans"]], "ndset_trans_kwargs (pybrops.breed.prot.sel.optimalcontributionselection.optimalcontributionintegerselection property)": [[177, "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionIntegerSelection.ndset_trans_kwargs"]], "ndset_wt (pybrops.breed.prot.sel.optimalcontributionselection.optimalcontributionintegerselection property)": [[177, "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionIntegerSelection.ndset_wt"]], "neqcv (pybrops.breed.prot.sel.optimalcontributionselection.optimalcontributionintegerselection property)": [[177, "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionIntegerSelection.neqcv"]], "nineqcv (pybrops.breed.prot.sel.optimalcontributionselection.optimalcontributionintegerselection property)": [[177, "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionIntegerSelection.nineqcv"]], "nmating (pybrops.breed.prot.sel.optimalcontributionselection.optimalcontributionintegerselection property)": [[177, "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionIntegerSelection.nmating"]], "nobj (pybrops.breed.prot.sel.optimalcontributionselection.optimalcontributionintegerselection property)": [[177, "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionIntegerSelection.nobj"]], "nparent (pybrops.breed.prot.sel.optimalcontributionselection.optimalcontributionintegerselection property)": [[177, "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionIntegerSelection.nparent"]], "nprogeny (pybrops.breed.prot.sel.optimalcontributionselection.optimalcontributionintegerselection property)": [[177, "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionIntegerSelection.nprogeny"]], "nselindiv (pybrops.breed.prot.sel.optimalcontributionselection.optimalcontributionintegerselection property)": [[177, "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionIntegerSelection.nselindiv"]], "ntrait (pybrops.breed.prot.sel.optimalcontributionselection.optimalcontributionintegerselection property)": [[177, "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionIntegerSelection.ntrait"]], "obj_trans (pybrops.breed.prot.sel.optimalcontributionselection.optimalcontributionintegerselection property)": [[177, "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionIntegerSelection.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.optimalcontributionselection.optimalcontributionintegerselection property)": [[177, "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionIntegerSelection.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.optimalcontributionselection.optimalcontributionintegerselection property)": [[177, "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionIntegerSelection.obj_wt"]], "problem() (pybrops.breed.prot.sel.optimalcontributionselection.optimalcontributionintegerselection method)": [[177, "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionIntegerSelection.problem"]], "rng (pybrops.breed.prot.sel.optimalcontributionselection.optimalcontributionintegerselection property)": [[177, "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionIntegerSelection.rng"]], "select() (pybrops.breed.prot.sel.optimalcontributionselection.optimalcontributionintegerselection method)": [[177, "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionIntegerSelection.select"]], "soalgo (pybrops.breed.prot.sel.optimalcontributionselection.optimalcontributionintegerselection property)": [[177, "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionIntegerSelection.soalgo"]], "sosolve() (pybrops.breed.prot.sel.optimalcontributionselection.optimalcontributionintegerselection method)": [[177, "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionIntegerSelection.sosolve"]], "unscale (pybrops.breed.prot.sel.optimalcontributionselection.optimalcontributionintegerselection property)": [[177, "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionIntegerSelection.unscale"]], "optimalcontributionrealselection (class in pybrops.breed.prot.sel.optimalcontributionselection)": [[178, "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionRealSelection"]], "cmatfcty (pybrops.breed.prot.sel.optimalcontributionselection.optimalcontributionrealselection property)": [[178, "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionRealSelection.cmatfcty"]], "eqcv_trans (pybrops.breed.prot.sel.optimalcontributionselection.optimalcontributionrealselection property)": [[178, "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionRealSelection.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.optimalcontributionselection.optimalcontributionrealselection property)": [[178, "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionRealSelection.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.optimalcontributionselection.optimalcontributionrealselection property)": [[178, "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionRealSelection.eqcv_wt"]], "ineqcv_trans (pybrops.breed.prot.sel.optimalcontributionselection.optimalcontributionrealselection property)": [[178, "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionRealSelection.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.optimalcontributionselection.optimalcontributionrealselection property)": [[178, "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionRealSelection.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.optimalcontributionselection.optimalcontributionrealselection property)": [[178, "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionRealSelection.ineqcv_wt"]], "moalgo (pybrops.breed.prot.sel.optimalcontributionselection.optimalcontributionrealselection property)": [[178, "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionRealSelection.moalgo"]], "mosolve() (pybrops.breed.prot.sel.optimalcontributionselection.optimalcontributionrealselection method)": [[178, "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionRealSelection.mosolve"]], "ncross (pybrops.breed.prot.sel.optimalcontributionselection.optimalcontributionrealselection property)": [[178, "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionRealSelection.ncross"]], "ndset_trans (pybrops.breed.prot.sel.optimalcontributionselection.optimalcontributionrealselection property)": [[178, "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionRealSelection.ndset_trans"]], "ndset_trans_kwargs (pybrops.breed.prot.sel.optimalcontributionselection.optimalcontributionrealselection property)": [[178, "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionRealSelection.ndset_trans_kwargs"]], "ndset_wt (pybrops.breed.prot.sel.optimalcontributionselection.optimalcontributionrealselection property)": [[178, "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionRealSelection.ndset_wt"]], "neqcv (pybrops.breed.prot.sel.optimalcontributionselection.optimalcontributionrealselection property)": [[178, "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionRealSelection.neqcv"]], "nineqcv (pybrops.breed.prot.sel.optimalcontributionselection.optimalcontributionrealselection property)": [[178, "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionRealSelection.nineqcv"]], "nmating (pybrops.breed.prot.sel.optimalcontributionselection.optimalcontributionrealselection property)": [[178, "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionRealSelection.nmating"]], "nobj (pybrops.breed.prot.sel.optimalcontributionselection.optimalcontributionrealselection property)": [[178, "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionRealSelection.nobj"]], "nparent (pybrops.breed.prot.sel.optimalcontributionselection.optimalcontributionrealselection property)": [[178, "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionRealSelection.nparent"]], "nprogeny (pybrops.breed.prot.sel.optimalcontributionselection.optimalcontributionrealselection property)": [[178, "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionRealSelection.nprogeny"]], "nselindiv (pybrops.breed.prot.sel.optimalcontributionselection.optimalcontributionrealselection property)": [[178, "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionRealSelection.nselindiv"]], "ntrait (pybrops.breed.prot.sel.optimalcontributionselection.optimalcontributionrealselection property)": [[178, "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionRealSelection.ntrait"]], "obj_trans (pybrops.breed.prot.sel.optimalcontributionselection.optimalcontributionrealselection property)": [[178, "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionRealSelection.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.optimalcontributionselection.optimalcontributionrealselection property)": [[178, "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionRealSelection.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.optimalcontributionselection.optimalcontributionrealselection property)": [[178, "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionRealSelection.obj_wt"]], "problem() (pybrops.breed.prot.sel.optimalcontributionselection.optimalcontributionrealselection method)": [[178, "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionRealSelection.problem"]], "rng (pybrops.breed.prot.sel.optimalcontributionselection.optimalcontributionrealselection property)": [[178, "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionRealSelection.rng"]], "select() (pybrops.breed.prot.sel.optimalcontributionselection.optimalcontributionrealselection method)": [[178, "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionRealSelection.select"]], "soalgo (pybrops.breed.prot.sel.optimalcontributionselection.optimalcontributionrealselection property)": [[178, "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionRealSelection.soalgo"]], "sosolve() (pybrops.breed.prot.sel.optimalcontributionselection.optimalcontributionrealselection method)": [[178, "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionRealSelection.sosolve"]], "unscale (pybrops.breed.prot.sel.optimalcontributionselection.optimalcontributionrealselection property)": [[178, "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionRealSelection.unscale"]], "optimalcontributionselectionmixin (class in pybrops.breed.prot.sel.optimalcontributionselection)": [[179, "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionSelectionMixin"]], "cmatfcty (pybrops.breed.prot.sel.optimalcontributionselection.optimalcontributionselectionmixin property)": [[179, "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionSelectionMixin.cmatfcty"]], "ntrait (pybrops.breed.prot.sel.optimalcontributionselection.optimalcontributionselectionmixin property)": [[179, "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionSelectionMixin.ntrait"]], "unscale (pybrops.breed.prot.sel.optimalcontributionselection.optimalcontributionselectionmixin property)": [[179, "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionSelectionMixin.unscale"]], "optimalcontributionsubsetselection (class in pybrops.breed.prot.sel.optimalcontributionselection)": [[180, "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionSubsetSelection"]], "cmatfcty (pybrops.breed.prot.sel.optimalcontributionselection.optimalcontributionsubsetselection property)": [[180, "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionSubsetSelection.cmatfcty"]], "eqcv_trans (pybrops.breed.prot.sel.optimalcontributionselection.optimalcontributionsubsetselection property)": [[180, "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionSubsetSelection.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.optimalcontributionselection.optimalcontributionsubsetselection property)": [[180, "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionSubsetSelection.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.optimalcontributionselection.optimalcontributionsubsetselection property)": [[180, "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionSubsetSelection.eqcv_wt"]], "ineqcv_trans (pybrops.breed.prot.sel.optimalcontributionselection.optimalcontributionsubsetselection property)": [[180, "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionSubsetSelection.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.optimalcontributionselection.optimalcontributionsubsetselection property)": [[180, "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionSubsetSelection.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.optimalcontributionselection.optimalcontributionsubsetselection property)": [[180, "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionSubsetSelection.ineqcv_wt"]], "moalgo (pybrops.breed.prot.sel.optimalcontributionselection.optimalcontributionsubsetselection property)": [[180, "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionSubsetSelection.moalgo"]], "mosolve() (pybrops.breed.prot.sel.optimalcontributionselection.optimalcontributionsubsetselection method)": [[180, "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionSubsetSelection.mosolve"]], "ncross (pybrops.breed.prot.sel.optimalcontributionselection.optimalcontributionsubsetselection property)": [[180, "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionSubsetSelection.ncross"]], "ndset_trans (pybrops.breed.prot.sel.optimalcontributionselection.optimalcontributionsubsetselection property)": [[180, "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionSubsetSelection.ndset_trans"]], "ndset_trans_kwargs (pybrops.breed.prot.sel.optimalcontributionselection.optimalcontributionsubsetselection property)": [[180, "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionSubsetSelection.ndset_trans_kwargs"]], "ndset_wt (pybrops.breed.prot.sel.optimalcontributionselection.optimalcontributionsubsetselection property)": [[180, "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionSubsetSelection.ndset_wt"]], "neqcv (pybrops.breed.prot.sel.optimalcontributionselection.optimalcontributionsubsetselection property)": [[180, "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionSubsetSelection.neqcv"]], "nineqcv (pybrops.breed.prot.sel.optimalcontributionselection.optimalcontributionsubsetselection property)": [[180, "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionSubsetSelection.nineqcv"]], "nmating (pybrops.breed.prot.sel.optimalcontributionselection.optimalcontributionsubsetselection property)": [[180, "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionSubsetSelection.nmating"]], "nobj (pybrops.breed.prot.sel.optimalcontributionselection.optimalcontributionsubsetselection property)": [[180, "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionSubsetSelection.nobj"]], "nparent (pybrops.breed.prot.sel.optimalcontributionselection.optimalcontributionsubsetselection property)": [[180, "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionSubsetSelection.nparent"]], "nprogeny (pybrops.breed.prot.sel.optimalcontributionselection.optimalcontributionsubsetselection property)": [[180, "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionSubsetSelection.nprogeny"]], "nselindiv (pybrops.breed.prot.sel.optimalcontributionselection.optimalcontributionsubsetselection property)": [[180, "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionSubsetSelection.nselindiv"]], "ntrait (pybrops.breed.prot.sel.optimalcontributionselection.optimalcontributionsubsetselection property)": [[180, "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionSubsetSelection.ntrait"]], "obj_trans (pybrops.breed.prot.sel.optimalcontributionselection.optimalcontributionsubsetselection property)": [[180, "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionSubsetSelection.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.optimalcontributionselection.optimalcontributionsubsetselection property)": [[180, "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionSubsetSelection.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.optimalcontributionselection.optimalcontributionsubsetselection property)": [[180, "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionSubsetSelection.obj_wt"]], "problem() (pybrops.breed.prot.sel.optimalcontributionselection.optimalcontributionsubsetselection method)": [[180, "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionSubsetSelection.problem"]], "rng (pybrops.breed.prot.sel.optimalcontributionselection.optimalcontributionsubsetselection property)": [[180, "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionSubsetSelection.rng"]], "select() (pybrops.breed.prot.sel.optimalcontributionselection.optimalcontributionsubsetselection method)": [[180, "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionSubsetSelection.select"]], "soalgo (pybrops.breed.prot.sel.optimalcontributionselection.optimalcontributionsubsetselection property)": [[180, "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionSubsetSelection.soalgo"]], "sosolve() (pybrops.breed.prot.sel.optimalcontributionselection.optimalcontributionsubsetselection method)": [[180, "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionSubsetSelection.sosolve"]], "unscale (pybrops.breed.prot.sel.optimalcontributionselection.optimalcontributionsubsetselection property)": [[180, "pybrops.breed.prot.sel.OptimalContributionSelection.OptimalContributionSubsetSelection.unscale"]], "pybrops.breed.prot.sel.optimalhaploidvalueselection": [[181, "module-pybrops.breed.prot.sel.OptimalHaploidValueSelection"]], "optimalhaploidvaluebinaryselection (class in pybrops.breed.prot.sel.optimalhaploidvalueselection)": [[182, "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueBinarySelection"]], "eqcv_trans (pybrops.breed.prot.sel.optimalhaploidvalueselection.optimalhaploidvaluebinaryselection property)": [[182, "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueBinarySelection.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.optimalhaploidvalueselection.optimalhaploidvaluebinaryselection property)": [[182, "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueBinarySelection.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.optimalhaploidvalueselection.optimalhaploidvaluebinaryselection property)": [[182, "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueBinarySelection.eqcv_wt"]], "ineqcv_trans (pybrops.breed.prot.sel.optimalhaploidvalueselection.optimalhaploidvaluebinaryselection property)": [[182, "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueBinarySelection.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.optimalhaploidvalueselection.optimalhaploidvaluebinaryselection property)": [[182, "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueBinarySelection.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.optimalhaploidvalueselection.optimalhaploidvaluebinaryselection property)": [[182, "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueBinarySelection.ineqcv_wt"]], "moalgo (pybrops.breed.prot.sel.optimalhaploidvalueselection.optimalhaploidvaluebinaryselection property)": [[182, "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueBinarySelection.moalgo"]], "mosolve() (pybrops.breed.prot.sel.optimalhaploidvalueselection.optimalhaploidvaluebinaryselection method)": [[182, "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueBinarySelection.mosolve"]], "ncross (pybrops.breed.prot.sel.optimalhaploidvalueselection.optimalhaploidvaluebinaryselection property)": [[182, "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueBinarySelection.ncross"]], "ndset_trans (pybrops.breed.prot.sel.optimalhaploidvalueselection.optimalhaploidvaluebinaryselection property)": [[182, "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueBinarySelection.ndset_trans"]], "ndset_trans_kwargs (pybrops.breed.prot.sel.optimalhaploidvalueselection.optimalhaploidvaluebinaryselection property)": [[182, "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueBinarySelection.ndset_trans_kwargs"]], "ndset_wt (pybrops.breed.prot.sel.optimalhaploidvalueselection.optimalhaploidvaluebinaryselection property)": [[182, "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueBinarySelection.ndset_wt"]], "neqcv (pybrops.breed.prot.sel.optimalhaploidvalueselection.optimalhaploidvaluebinaryselection property)": [[182, "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueBinarySelection.neqcv"]], "nhaploblk (pybrops.breed.prot.sel.optimalhaploidvalueselection.optimalhaploidvaluebinaryselection property)": [[182, "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueBinarySelection.nhaploblk"]], "nineqcv (pybrops.breed.prot.sel.optimalhaploidvalueselection.optimalhaploidvaluebinaryselection property)": [[182, "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueBinarySelection.nineqcv"]], "nmating (pybrops.breed.prot.sel.optimalhaploidvalueselection.optimalhaploidvaluebinaryselection property)": [[182, "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueBinarySelection.nmating"]], "nobj (pybrops.breed.prot.sel.optimalhaploidvalueselection.optimalhaploidvaluebinaryselection property)": [[182, "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueBinarySelection.nobj"]], "nparent (pybrops.breed.prot.sel.optimalhaploidvalueselection.optimalhaploidvaluebinaryselection property)": [[182, "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueBinarySelection.nparent"]], "nprogeny (pybrops.breed.prot.sel.optimalhaploidvalueselection.optimalhaploidvaluebinaryselection property)": [[182, "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueBinarySelection.nprogeny"]], "nselindiv (pybrops.breed.prot.sel.optimalhaploidvalueselection.optimalhaploidvaluebinaryselection property)": [[182, "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueBinarySelection.nselindiv"]], "ntrait (pybrops.breed.prot.sel.optimalhaploidvalueselection.optimalhaploidvaluebinaryselection property)": [[182, "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueBinarySelection.ntrait"]], "obj_trans (pybrops.breed.prot.sel.optimalhaploidvalueselection.optimalhaploidvaluebinaryselection property)": [[182, "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueBinarySelection.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.optimalhaploidvalueselection.optimalhaploidvaluebinaryselection property)": [[182, "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueBinarySelection.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.optimalhaploidvalueselection.optimalhaploidvaluebinaryselection property)": [[182, "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueBinarySelection.obj_wt"]], "problem() (pybrops.breed.prot.sel.optimalhaploidvalueselection.optimalhaploidvaluebinaryselection method)": [[182, "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueBinarySelection.problem"]], "rng (pybrops.breed.prot.sel.optimalhaploidvalueselection.optimalhaploidvaluebinaryselection property)": [[182, "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueBinarySelection.rng"]], "select() (pybrops.breed.prot.sel.optimalhaploidvalueselection.optimalhaploidvaluebinaryselection method)": [[182, "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueBinarySelection.select"]], "soalgo (pybrops.breed.prot.sel.optimalhaploidvalueselection.optimalhaploidvaluebinaryselection property)": [[182, "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueBinarySelection.soalgo"]], "sosolve() (pybrops.breed.prot.sel.optimalhaploidvalueselection.optimalhaploidvaluebinaryselection method)": [[182, "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueBinarySelection.sosolve"]], "unique_parents (pybrops.breed.prot.sel.optimalhaploidvalueselection.optimalhaploidvaluebinaryselection property)": [[182, "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueBinarySelection.unique_parents"]], "optimalhaploidvalueintegerselection (class in pybrops.breed.prot.sel.optimalhaploidvalueselection)": [[183, "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueIntegerSelection"]], "eqcv_trans (pybrops.breed.prot.sel.optimalhaploidvalueselection.optimalhaploidvalueintegerselection property)": [[183, "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueIntegerSelection.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.optimalhaploidvalueselection.optimalhaploidvalueintegerselection property)": [[183, "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueIntegerSelection.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.optimalhaploidvalueselection.optimalhaploidvalueintegerselection property)": [[183, "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueIntegerSelection.eqcv_wt"]], "ineqcv_trans (pybrops.breed.prot.sel.optimalhaploidvalueselection.optimalhaploidvalueintegerselection property)": [[183, "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueIntegerSelection.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.optimalhaploidvalueselection.optimalhaploidvalueintegerselection property)": [[183, "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueIntegerSelection.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.optimalhaploidvalueselection.optimalhaploidvalueintegerselection property)": [[183, "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueIntegerSelection.ineqcv_wt"]], "moalgo (pybrops.breed.prot.sel.optimalhaploidvalueselection.optimalhaploidvalueintegerselection property)": [[183, "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueIntegerSelection.moalgo"]], "mosolve() (pybrops.breed.prot.sel.optimalhaploidvalueselection.optimalhaploidvalueintegerselection method)": [[183, "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueIntegerSelection.mosolve"]], "ncross (pybrops.breed.prot.sel.optimalhaploidvalueselection.optimalhaploidvalueintegerselection property)": [[183, "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueIntegerSelection.ncross"]], "ndset_trans (pybrops.breed.prot.sel.optimalhaploidvalueselection.optimalhaploidvalueintegerselection property)": [[183, "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueIntegerSelection.ndset_trans"]], "ndset_trans_kwargs (pybrops.breed.prot.sel.optimalhaploidvalueselection.optimalhaploidvalueintegerselection property)": [[183, "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueIntegerSelection.ndset_trans_kwargs"]], "ndset_wt (pybrops.breed.prot.sel.optimalhaploidvalueselection.optimalhaploidvalueintegerselection property)": [[183, "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueIntegerSelection.ndset_wt"]], "neqcv (pybrops.breed.prot.sel.optimalhaploidvalueselection.optimalhaploidvalueintegerselection property)": [[183, "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueIntegerSelection.neqcv"]], "nhaploblk (pybrops.breed.prot.sel.optimalhaploidvalueselection.optimalhaploidvalueintegerselection property)": [[183, "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueIntegerSelection.nhaploblk"]], "nineqcv (pybrops.breed.prot.sel.optimalhaploidvalueselection.optimalhaploidvalueintegerselection property)": [[183, "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueIntegerSelection.nineqcv"]], "nmating (pybrops.breed.prot.sel.optimalhaploidvalueselection.optimalhaploidvalueintegerselection property)": [[183, "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueIntegerSelection.nmating"]], "nobj (pybrops.breed.prot.sel.optimalhaploidvalueselection.optimalhaploidvalueintegerselection property)": [[183, "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueIntegerSelection.nobj"]], "nparent (pybrops.breed.prot.sel.optimalhaploidvalueselection.optimalhaploidvalueintegerselection property)": [[183, "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueIntegerSelection.nparent"]], "nprogeny (pybrops.breed.prot.sel.optimalhaploidvalueselection.optimalhaploidvalueintegerselection property)": [[183, "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueIntegerSelection.nprogeny"]], "nselindiv (pybrops.breed.prot.sel.optimalhaploidvalueselection.optimalhaploidvalueintegerselection property)": [[183, "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueIntegerSelection.nselindiv"]], "ntrait (pybrops.breed.prot.sel.optimalhaploidvalueselection.optimalhaploidvalueintegerselection property)": [[183, "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueIntegerSelection.ntrait"]], "obj_trans (pybrops.breed.prot.sel.optimalhaploidvalueselection.optimalhaploidvalueintegerselection property)": [[183, "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueIntegerSelection.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.optimalhaploidvalueselection.optimalhaploidvalueintegerselection property)": [[183, "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueIntegerSelection.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.optimalhaploidvalueselection.optimalhaploidvalueintegerselection property)": [[183, "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueIntegerSelection.obj_wt"]], "problem() (pybrops.breed.prot.sel.optimalhaploidvalueselection.optimalhaploidvalueintegerselection method)": [[183, "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueIntegerSelection.problem"]], "rng (pybrops.breed.prot.sel.optimalhaploidvalueselection.optimalhaploidvalueintegerselection property)": [[183, "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueIntegerSelection.rng"]], "select() (pybrops.breed.prot.sel.optimalhaploidvalueselection.optimalhaploidvalueintegerselection method)": [[183, "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueIntegerSelection.select"]], "soalgo (pybrops.breed.prot.sel.optimalhaploidvalueselection.optimalhaploidvalueintegerselection property)": [[183, "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueIntegerSelection.soalgo"]], "sosolve() (pybrops.breed.prot.sel.optimalhaploidvalueselection.optimalhaploidvalueintegerselection method)": [[183, "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueIntegerSelection.sosolve"]], "unique_parents (pybrops.breed.prot.sel.optimalhaploidvalueselection.optimalhaploidvalueintegerselection property)": [[183, "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueIntegerSelection.unique_parents"]], "optimalhaploidvaluerealselection (class in pybrops.breed.prot.sel.optimalhaploidvalueselection)": [[184, "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueRealSelection"]], "eqcv_trans (pybrops.breed.prot.sel.optimalhaploidvalueselection.optimalhaploidvaluerealselection property)": [[184, "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueRealSelection.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.optimalhaploidvalueselection.optimalhaploidvaluerealselection property)": [[184, "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueRealSelection.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.optimalhaploidvalueselection.optimalhaploidvaluerealselection property)": [[184, "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueRealSelection.eqcv_wt"]], "ineqcv_trans (pybrops.breed.prot.sel.optimalhaploidvalueselection.optimalhaploidvaluerealselection property)": [[184, "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueRealSelection.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.optimalhaploidvalueselection.optimalhaploidvaluerealselection property)": [[184, "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueRealSelection.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.optimalhaploidvalueselection.optimalhaploidvaluerealselection property)": [[184, "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueRealSelection.ineqcv_wt"]], "moalgo (pybrops.breed.prot.sel.optimalhaploidvalueselection.optimalhaploidvaluerealselection property)": [[184, "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueRealSelection.moalgo"]], "mosolve() (pybrops.breed.prot.sel.optimalhaploidvalueselection.optimalhaploidvaluerealselection method)": [[184, "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueRealSelection.mosolve"]], "ncross (pybrops.breed.prot.sel.optimalhaploidvalueselection.optimalhaploidvaluerealselection property)": [[184, "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueRealSelection.ncross"]], "ndset_trans (pybrops.breed.prot.sel.optimalhaploidvalueselection.optimalhaploidvaluerealselection property)": [[184, "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueRealSelection.ndset_trans"]], "ndset_trans_kwargs (pybrops.breed.prot.sel.optimalhaploidvalueselection.optimalhaploidvaluerealselection property)": [[184, "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueRealSelection.ndset_trans_kwargs"]], "ndset_wt (pybrops.breed.prot.sel.optimalhaploidvalueselection.optimalhaploidvaluerealselection property)": [[184, "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueRealSelection.ndset_wt"]], "neqcv (pybrops.breed.prot.sel.optimalhaploidvalueselection.optimalhaploidvaluerealselection property)": [[184, "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueRealSelection.neqcv"]], "nhaploblk (pybrops.breed.prot.sel.optimalhaploidvalueselection.optimalhaploidvaluerealselection property)": [[184, "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueRealSelection.nhaploblk"]], "nineqcv (pybrops.breed.prot.sel.optimalhaploidvalueselection.optimalhaploidvaluerealselection property)": [[184, "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueRealSelection.nineqcv"]], "nmating (pybrops.breed.prot.sel.optimalhaploidvalueselection.optimalhaploidvaluerealselection property)": [[184, "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueRealSelection.nmating"]], "nobj (pybrops.breed.prot.sel.optimalhaploidvalueselection.optimalhaploidvaluerealselection property)": [[184, "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueRealSelection.nobj"]], "nparent (pybrops.breed.prot.sel.optimalhaploidvalueselection.optimalhaploidvaluerealselection property)": [[184, "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueRealSelection.nparent"]], "nprogeny (pybrops.breed.prot.sel.optimalhaploidvalueselection.optimalhaploidvaluerealselection property)": [[184, "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueRealSelection.nprogeny"]], "nselindiv (pybrops.breed.prot.sel.optimalhaploidvalueselection.optimalhaploidvaluerealselection property)": [[184, "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueRealSelection.nselindiv"]], "ntrait (pybrops.breed.prot.sel.optimalhaploidvalueselection.optimalhaploidvaluerealselection property)": [[184, "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueRealSelection.ntrait"]], "obj_trans (pybrops.breed.prot.sel.optimalhaploidvalueselection.optimalhaploidvaluerealselection property)": [[184, "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueRealSelection.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.optimalhaploidvalueselection.optimalhaploidvaluerealselection property)": [[184, "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueRealSelection.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.optimalhaploidvalueselection.optimalhaploidvaluerealselection property)": [[184, "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueRealSelection.obj_wt"]], "problem() (pybrops.breed.prot.sel.optimalhaploidvalueselection.optimalhaploidvaluerealselection method)": [[184, "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueRealSelection.problem"]], "rng (pybrops.breed.prot.sel.optimalhaploidvalueselection.optimalhaploidvaluerealselection property)": [[184, "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueRealSelection.rng"]], "select() (pybrops.breed.prot.sel.optimalhaploidvalueselection.optimalhaploidvaluerealselection method)": [[184, "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueRealSelection.select"]], "soalgo (pybrops.breed.prot.sel.optimalhaploidvalueselection.optimalhaploidvaluerealselection property)": [[184, "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueRealSelection.soalgo"]], "sosolve() (pybrops.breed.prot.sel.optimalhaploidvalueselection.optimalhaploidvaluerealselection method)": [[184, "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueRealSelection.sosolve"]], "unique_parents (pybrops.breed.prot.sel.optimalhaploidvalueselection.optimalhaploidvaluerealselection property)": [[184, "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueRealSelection.unique_parents"]], "optimalhaploidvalueselectionmixin (class in pybrops.breed.prot.sel.optimalhaploidvalueselection)": [[185, "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueSelectionMixin"]], "nhaploblk (pybrops.breed.prot.sel.optimalhaploidvalueselection.optimalhaploidvalueselectionmixin property)": [[185, "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueSelectionMixin.nhaploblk"]], "ntrait (pybrops.breed.prot.sel.optimalhaploidvalueselection.optimalhaploidvalueselectionmixin property)": [[185, "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueSelectionMixin.ntrait"]], "unique_parents (pybrops.breed.prot.sel.optimalhaploidvalueselection.optimalhaploidvalueselectionmixin property)": [[185, "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueSelectionMixin.unique_parents"]], "optimalhaploidvaluesubsetselection (class in pybrops.breed.prot.sel.optimalhaploidvalueselection)": [[186, "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueSubsetSelection"]], "eqcv_trans (pybrops.breed.prot.sel.optimalhaploidvalueselection.optimalhaploidvaluesubsetselection property)": [[186, "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueSubsetSelection.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.optimalhaploidvalueselection.optimalhaploidvaluesubsetselection property)": [[186, "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueSubsetSelection.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.optimalhaploidvalueselection.optimalhaploidvaluesubsetselection property)": [[186, "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueSubsetSelection.eqcv_wt"]], "ineqcv_trans (pybrops.breed.prot.sel.optimalhaploidvalueselection.optimalhaploidvaluesubsetselection property)": [[186, "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueSubsetSelection.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.optimalhaploidvalueselection.optimalhaploidvaluesubsetselection property)": [[186, "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueSubsetSelection.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.optimalhaploidvalueselection.optimalhaploidvaluesubsetselection property)": [[186, "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueSubsetSelection.ineqcv_wt"]], "moalgo (pybrops.breed.prot.sel.optimalhaploidvalueselection.optimalhaploidvaluesubsetselection property)": [[186, "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueSubsetSelection.moalgo"]], "mosolve() (pybrops.breed.prot.sel.optimalhaploidvalueselection.optimalhaploidvaluesubsetselection method)": [[186, "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueSubsetSelection.mosolve"]], "ncross (pybrops.breed.prot.sel.optimalhaploidvalueselection.optimalhaploidvaluesubsetselection property)": [[186, "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueSubsetSelection.ncross"]], "ndset_trans (pybrops.breed.prot.sel.optimalhaploidvalueselection.optimalhaploidvaluesubsetselection property)": [[186, "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueSubsetSelection.ndset_trans"]], "ndset_trans_kwargs (pybrops.breed.prot.sel.optimalhaploidvalueselection.optimalhaploidvaluesubsetselection property)": [[186, "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueSubsetSelection.ndset_trans_kwargs"]], "ndset_wt (pybrops.breed.prot.sel.optimalhaploidvalueselection.optimalhaploidvaluesubsetselection property)": [[186, "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueSubsetSelection.ndset_wt"]], "neqcv (pybrops.breed.prot.sel.optimalhaploidvalueselection.optimalhaploidvaluesubsetselection property)": [[186, "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueSubsetSelection.neqcv"]], "nhaploblk (pybrops.breed.prot.sel.optimalhaploidvalueselection.optimalhaploidvaluesubsetselection property)": [[186, "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueSubsetSelection.nhaploblk"]], "nineqcv (pybrops.breed.prot.sel.optimalhaploidvalueselection.optimalhaploidvaluesubsetselection property)": [[186, "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueSubsetSelection.nineqcv"]], "nmating (pybrops.breed.prot.sel.optimalhaploidvalueselection.optimalhaploidvaluesubsetselection property)": [[186, "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueSubsetSelection.nmating"]], "nobj (pybrops.breed.prot.sel.optimalhaploidvalueselection.optimalhaploidvaluesubsetselection property)": [[186, "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueSubsetSelection.nobj"]], "nparent (pybrops.breed.prot.sel.optimalhaploidvalueselection.optimalhaploidvaluesubsetselection property)": [[186, "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueSubsetSelection.nparent"]], "nprogeny (pybrops.breed.prot.sel.optimalhaploidvalueselection.optimalhaploidvaluesubsetselection property)": [[186, "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueSubsetSelection.nprogeny"]], "nselindiv (pybrops.breed.prot.sel.optimalhaploidvalueselection.optimalhaploidvaluesubsetselection property)": [[186, "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueSubsetSelection.nselindiv"]], "ntrait (pybrops.breed.prot.sel.optimalhaploidvalueselection.optimalhaploidvaluesubsetselection property)": [[186, "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueSubsetSelection.ntrait"]], "obj_trans (pybrops.breed.prot.sel.optimalhaploidvalueselection.optimalhaploidvaluesubsetselection property)": [[186, "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueSubsetSelection.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.optimalhaploidvalueselection.optimalhaploidvaluesubsetselection property)": [[186, "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueSubsetSelection.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.optimalhaploidvalueselection.optimalhaploidvaluesubsetselection property)": [[186, "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueSubsetSelection.obj_wt"]], "problem() (pybrops.breed.prot.sel.optimalhaploidvalueselection.optimalhaploidvaluesubsetselection method)": [[186, "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueSubsetSelection.problem"]], "rng (pybrops.breed.prot.sel.optimalhaploidvalueselection.optimalhaploidvaluesubsetselection property)": [[186, "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueSubsetSelection.rng"]], "select() (pybrops.breed.prot.sel.optimalhaploidvalueselection.optimalhaploidvaluesubsetselection method)": [[186, "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueSubsetSelection.select"]], "soalgo (pybrops.breed.prot.sel.optimalhaploidvalueselection.optimalhaploidvaluesubsetselection property)": [[186, "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueSubsetSelection.soalgo"]], "sosolve() (pybrops.breed.prot.sel.optimalhaploidvalueselection.optimalhaploidvaluesubsetselection method)": [[186, "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueSubsetSelection.sosolve"]], "unique_parents (pybrops.breed.prot.sel.optimalhaploidvalueselection.optimalhaploidvaluesubsetselection property)": [[186, "pybrops.breed.prot.sel.OptimalHaploidValueSelection.OptimalHaploidValueSubsetSelection.unique_parents"]], "pybrops.breed.prot.sel.optimalpopulationvalueselection": [[187, "module-pybrops.breed.prot.sel.OptimalPopulationValueSelection"]], "optimalpopulationvalueselectionmixin (class in pybrops.breed.prot.sel.optimalpopulationvalueselection)": [[188, "pybrops.breed.prot.sel.OptimalPopulationValueSelection.OptimalPopulationValueSelectionMixin"]], "nhaploblk (pybrops.breed.prot.sel.optimalpopulationvalueselection.optimalpopulationvalueselectionmixin property)": [[188, "pybrops.breed.prot.sel.OptimalPopulationValueSelection.OptimalPopulationValueSelectionMixin.nhaploblk"]], "ntrait (pybrops.breed.prot.sel.optimalpopulationvalueselection.optimalpopulationvalueselectionmixin property)": [[188, "pybrops.breed.prot.sel.OptimalPopulationValueSelection.OptimalPopulationValueSelectionMixin.ntrait"]], "optimalpopulationvaluesubsetselection (class in pybrops.breed.prot.sel.optimalpopulationvalueselection)": [[189, "pybrops.breed.prot.sel.OptimalPopulationValueSelection.OptimalPopulationValueSubsetSelection"]], "eqcv_trans (pybrops.breed.prot.sel.optimalpopulationvalueselection.optimalpopulationvaluesubsetselection property)": [[189, "pybrops.breed.prot.sel.OptimalPopulationValueSelection.OptimalPopulationValueSubsetSelection.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.optimalpopulationvalueselection.optimalpopulationvaluesubsetselection property)": [[189, "pybrops.breed.prot.sel.OptimalPopulationValueSelection.OptimalPopulationValueSubsetSelection.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.optimalpopulationvalueselection.optimalpopulationvaluesubsetselection property)": [[189, "pybrops.breed.prot.sel.OptimalPopulationValueSelection.OptimalPopulationValueSubsetSelection.eqcv_wt"]], "ineqcv_trans (pybrops.breed.prot.sel.optimalpopulationvalueselection.optimalpopulationvaluesubsetselection property)": [[189, "pybrops.breed.prot.sel.OptimalPopulationValueSelection.OptimalPopulationValueSubsetSelection.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.optimalpopulationvalueselection.optimalpopulationvaluesubsetselection property)": [[189, "pybrops.breed.prot.sel.OptimalPopulationValueSelection.OptimalPopulationValueSubsetSelection.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.optimalpopulationvalueselection.optimalpopulationvaluesubsetselection property)": [[189, "pybrops.breed.prot.sel.OptimalPopulationValueSelection.OptimalPopulationValueSubsetSelection.ineqcv_wt"]], "moalgo (pybrops.breed.prot.sel.optimalpopulationvalueselection.optimalpopulationvaluesubsetselection property)": [[189, "pybrops.breed.prot.sel.OptimalPopulationValueSelection.OptimalPopulationValueSubsetSelection.moalgo"]], "mosolve() (pybrops.breed.prot.sel.optimalpopulationvalueselection.optimalpopulationvaluesubsetselection method)": [[189, "pybrops.breed.prot.sel.OptimalPopulationValueSelection.OptimalPopulationValueSubsetSelection.mosolve"]], "ncross (pybrops.breed.prot.sel.optimalpopulationvalueselection.optimalpopulationvaluesubsetselection property)": [[189, "pybrops.breed.prot.sel.OptimalPopulationValueSelection.OptimalPopulationValueSubsetSelection.ncross"]], "ndset_trans (pybrops.breed.prot.sel.optimalpopulationvalueselection.optimalpopulationvaluesubsetselection property)": [[189, "pybrops.breed.prot.sel.OptimalPopulationValueSelection.OptimalPopulationValueSubsetSelection.ndset_trans"]], "ndset_trans_kwargs (pybrops.breed.prot.sel.optimalpopulationvalueselection.optimalpopulationvaluesubsetselection property)": [[189, "pybrops.breed.prot.sel.OptimalPopulationValueSelection.OptimalPopulationValueSubsetSelection.ndset_trans_kwargs"]], "ndset_wt (pybrops.breed.prot.sel.optimalpopulationvalueselection.optimalpopulationvaluesubsetselection property)": [[189, "pybrops.breed.prot.sel.OptimalPopulationValueSelection.OptimalPopulationValueSubsetSelection.ndset_wt"]], "neqcv (pybrops.breed.prot.sel.optimalpopulationvalueselection.optimalpopulationvaluesubsetselection property)": [[189, "pybrops.breed.prot.sel.OptimalPopulationValueSelection.OptimalPopulationValueSubsetSelection.neqcv"]], "nhaploblk (pybrops.breed.prot.sel.optimalpopulationvalueselection.optimalpopulationvaluesubsetselection property)": [[189, "pybrops.breed.prot.sel.OptimalPopulationValueSelection.OptimalPopulationValueSubsetSelection.nhaploblk"]], "nineqcv (pybrops.breed.prot.sel.optimalpopulationvalueselection.optimalpopulationvaluesubsetselection property)": [[189, "pybrops.breed.prot.sel.OptimalPopulationValueSelection.OptimalPopulationValueSubsetSelection.nineqcv"]], "nmating (pybrops.breed.prot.sel.optimalpopulationvalueselection.optimalpopulationvaluesubsetselection property)": [[189, "pybrops.breed.prot.sel.OptimalPopulationValueSelection.OptimalPopulationValueSubsetSelection.nmating"]], "nobj (pybrops.breed.prot.sel.optimalpopulationvalueselection.optimalpopulationvaluesubsetselection property)": [[189, "pybrops.breed.prot.sel.OptimalPopulationValueSelection.OptimalPopulationValueSubsetSelection.nobj"]], "nparent (pybrops.breed.prot.sel.optimalpopulationvalueselection.optimalpopulationvaluesubsetselection property)": [[189, "pybrops.breed.prot.sel.OptimalPopulationValueSelection.OptimalPopulationValueSubsetSelection.nparent"]], "nprogeny (pybrops.breed.prot.sel.optimalpopulationvalueselection.optimalpopulationvaluesubsetselection property)": [[189, "pybrops.breed.prot.sel.OptimalPopulationValueSelection.OptimalPopulationValueSubsetSelection.nprogeny"]], "nselindiv (pybrops.breed.prot.sel.optimalpopulationvalueselection.optimalpopulationvaluesubsetselection property)": [[189, "pybrops.breed.prot.sel.OptimalPopulationValueSelection.OptimalPopulationValueSubsetSelection.nselindiv"]], "ntrait (pybrops.breed.prot.sel.optimalpopulationvalueselection.optimalpopulationvaluesubsetselection property)": [[189, "pybrops.breed.prot.sel.OptimalPopulationValueSelection.OptimalPopulationValueSubsetSelection.ntrait"]], "obj_trans (pybrops.breed.prot.sel.optimalpopulationvalueselection.optimalpopulationvaluesubsetselection property)": [[189, "pybrops.breed.prot.sel.OptimalPopulationValueSelection.OptimalPopulationValueSubsetSelection.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.optimalpopulationvalueselection.optimalpopulationvaluesubsetselection property)": [[189, "pybrops.breed.prot.sel.OptimalPopulationValueSelection.OptimalPopulationValueSubsetSelection.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.optimalpopulationvalueselection.optimalpopulationvaluesubsetselection property)": [[189, "pybrops.breed.prot.sel.OptimalPopulationValueSelection.OptimalPopulationValueSubsetSelection.obj_wt"]], "problem() (pybrops.breed.prot.sel.optimalpopulationvalueselection.optimalpopulationvaluesubsetselection method)": [[189, "pybrops.breed.prot.sel.OptimalPopulationValueSelection.OptimalPopulationValueSubsetSelection.problem"]], "rng (pybrops.breed.prot.sel.optimalpopulationvalueselection.optimalpopulationvaluesubsetselection property)": [[189, "pybrops.breed.prot.sel.OptimalPopulationValueSelection.OptimalPopulationValueSubsetSelection.rng"]], "select() (pybrops.breed.prot.sel.optimalpopulationvalueselection.optimalpopulationvaluesubsetselection method)": [[189, "pybrops.breed.prot.sel.OptimalPopulationValueSelection.OptimalPopulationValueSubsetSelection.select"]], "soalgo (pybrops.breed.prot.sel.optimalpopulationvalueselection.optimalpopulationvaluesubsetselection property)": [[189, "pybrops.breed.prot.sel.OptimalPopulationValueSelection.OptimalPopulationValueSubsetSelection.soalgo"]], "sosolve() (pybrops.breed.prot.sel.optimalpopulationvalueselection.optimalpopulationvaluesubsetselection method)": [[189, "pybrops.breed.prot.sel.OptimalPopulationValueSelection.OptimalPopulationValueSubsetSelection.sosolve"]], "pybrops.breed.prot.sel.randomselection": [[190, "module-pybrops.breed.prot.sel.RandomSelection"]], "randombinaryselection (class in pybrops.breed.prot.sel.randomselection)": [[191, "pybrops.breed.prot.sel.RandomSelection.RandomBinarySelection"]], "eqcv_trans (pybrops.breed.prot.sel.randomselection.randombinaryselection property)": [[191, "pybrops.breed.prot.sel.RandomSelection.RandomBinarySelection.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.randomselection.randombinaryselection property)": [[191, "pybrops.breed.prot.sel.RandomSelection.RandomBinarySelection.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.randomselection.randombinaryselection property)": [[191, "pybrops.breed.prot.sel.RandomSelection.RandomBinarySelection.eqcv_wt"]], "ineqcv_trans (pybrops.breed.prot.sel.randomselection.randombinaryselection property)": [[191, "pybrops.breed.prot.sel.RandomSelection.RandomBinarySelection.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.randomselection.randombinaryselection property)": [[191, "pybrops.breed.prot.sel.RandomSelection.RandomBinarySelection.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.randomselection.randombinaryselection property)": [[191, "pybrops.breed.prot.sel.RandomSelection.RandomBinarySelection.ineqcv_wt"]], "moalgo (pybrops.breed.prot.sel.randomselection.randombinaryselection property)": [[191, "pybrops.breed.prot.sel.RandomSelection.RandomBinarySelection.moalgo"]], "mosolve() (pybrops.breed.prot.sel.randomselection.randombinaryselection method)": [[191, "pybrops.breed.prot.sel.RandomSelection.RandomBinarySelection.mosolve"]], "ncross (pybrops.breed.prot.sel.randomselection.randombinaryselection property)": [[191, "pybrops.breed.prot.sel.RandomSelection.RandomBinarySelection.ncross"]], "ndset_trans (pybrops.breed.prot.sel.randomselection.randombinaryselection property)": [[191, "pybrops.breed.prot.sel.RandomSelection.RandomBinarySelection.ndset_trans"]], "ndset_trans_kwargs (pybrops.breed.prot.sel.randomselection.randombinaryselection property)": [[191, "pybrops.breed.prot.sel.RandomSelection.RandomBinarySelection.ndset_trans_kwargs"]], "ndset_wt (pybrops.breed.prot.sel.randomselection.randombinaryselection property)": [[191, "pybrops.breed.prot.sel.RandomSelection.RandomBinarySelection.ndset_wt"]], "neqcv (pybrops.breed.prot.sel.randomselection.randombinaryselection property)": [[191, "pybrops.breed.prot.sel.RandomSelection.RandomBinarySelection.neqcv"]], "nineqcv (pybrops.breed.prot.sel.randomselection.randombinaryselection property)": [[191, "pybrops.breed.prot.sel.RandomSelection.RandomBinarySelection.nineqcv"]], "nmating (pybrops.breed.prot.sel.randomselection.randombinaryselection property)": [[191, "pybrops.breed.prot.sel.RandomSelection.RandomBinarySelection.nmating"]], "nobj (pybrops.breed.prot.sel.randomselection.randombinaryselection property)": [[191, "pybrops.breed.prot.sel.RandomSelection.RandomBinarySelection.nobj"]], "nparent (pybrops.breed.prot.sel.randomselection.randombinaryselection property)": [[191, "pybrops.breed.prot.sel.RandomSelection.RandomBinarySelection.nparent"]], "nprogeny (pybrops.breed.prot.sel.randomselection.randombinaryselection property)": [[191, "pybrops.breed.prot.sel.RandomSelection.RandomBinarySelection.nprogeny"]], "nselindiv (pybrops.breed.prot.sel.randomselection.randombinaryselection property)": [[191, "pybrops.breed.prot.sel.RandomSelection.RandomBinarySelection.nselindiv"]], "ntrait (pybrops.breed.prot.sel.randomselection.randombinaryselection property)": [[191, "pybrops.breed.prot.sel.RandomSelection.RandomBinarySelection.ntrait"]], "obj_trans (pybrops.breed.prot.sel.randomselection.randombinaryselection property)": [[191, "pybrops.breed.prot.sel.RandomSelection.RandomBinarySelection.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.randomselection.randombinaryselection property)": [[191, "pybrops.breed.prot.sel.RandomSelection.RandomBinarySelection.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.randomselection.randombinaryselection property)": [[191, "pybrops.breed.prot.sel.RandomSelection.RandomBinarySelection.obj_wt"]], "problem() (pybrops.breed.prot.sel.randomselection.randombinaryselection method)": [[191, "pybrops.breed.prot.sel.RandomSelection.RandomBinarySelection.problem"]], "rng (pybrops.breed.prot.sel.randomselection.randombinaryselection property)": [[191, "pybrops.breed.prot.sel.RandomSelection.RandomBinarySelection.rng"]], "select() (pybrops.breed.prot.sel.randomselection.randombinaryselection method)": [[191, "pybrops.breed.prot.sel.RandomSelection.RandomBinarySelection.select"]], "soalgo (pybrops.breed.prot.sel.randomselection.randombinaryselection property)": [[191, "pybrops.breed.prot.sel.RandomSelection.RandomBinarySelection.soalgo"]], "sosolve() (pybrops.breed.prot.sel.randomselection.randombinaryselection method)": [[191, "pybrops.breed.prot.sel.RandomSelection.RandomBinarySelection.sosolve"]], "randomintegerselection (class in pybrops.breed.prot.sel.randomselection)": [[192, "pybrops.breed.prot.sel.RandomSelection.RandomIntegerSelection"]], "eqcv_trans (pybrops.breed.prot.sel.randomselection.randomintegerselection property)": [[192, "pybrops.breed.prot.sel.RandomSelection.RandomIntegerSelection.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.randomselection.randomintegerselection property)": [[192, "pybrops.breed.prot.sel.RandomSelection.RandomIntegerSelection.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.randomselection.randomintegerselection property)": [[192, "pybrops.breed.prot.sel.RandomSelection.RandomIntegerSelection.eqcv_wt"]], "ineqcv_trans (pybrops.breed.prot.sel.randomselection.randomintegerselection property)": [[192, "pybrops.breed.prot.sel.RandomSelection.RandomIntegerSelection.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.randomselection.randomintegerselection property)": [[192, "pybrops.breed.prot.sel.RandomSelection.RandomIntegerSelection.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.randomselection.randomintegerselection property)": [[192, "pybrops.breed.prot.sel.RandomSelection.RandomIntegerSelection.ineqcv_wt"]], "moalgo (pybrops.breed.prot.sel.randomselection.randomintegerselection property)": [[192, "pybrops.breed.prot.sel.RandomSelection.RandomIntegerSelection.moalgo"]], "mosolve() (pybrops.breed.prot.sel.randomselection.randomintegerselection method)": [[192, "pybrops.breed.prot.sel.RandomSelection.RandomIntegerSelection.mosolve"]], "ncross (pybrops.breed.prot.sel.randomselection.randomintegerselection property)": [[192, "pybrops.breed.prot.sel.RandomSelection.RandomIntegerSelection.ncross"]], "ndset_trans (pybrops.breed.prot.sel.randomselection.randomintegerselection property)": [[192, "pybrops.breed.prot.sel.RandomSelection.RandomIntegerSelection.ndset_trans"]], "ndset_trans_kwargs (pybrops.breed.prot.sel.randomselection.randomintegerselection property)": [[192, "pybrops.breed.prot.sel.RandomSelection.RandomIntegerSelection.ndset_trans_kwargs"]], "ndset_wt (pybrops.breed.prot.sel.randomselection.randomintegerselection property)": [[192, "pybrops.breed.prot.sel.RandomSelection.RandomIntegerSelection.ndset_wt"]], "neqcv (pybrops.breed.prot.sel.randomselection.randomintegerselection property)": [[192, "pybrops.breed.prot.sel.RandomSelection.RandomIntegerSelection.neqcv"]], "nineqcv (pybrops.breed.prot.sel.randomselection.randomintegerselection property)": [[192, "pybrops.breed.prot.sel.RandomSelection.RandomIntegerSelection.nineqcv"]], "nmating (pybrops.breed.prot.sel.randomselection.randomintegerselection property)": [[192, "pybrops.breed.prot.sel.RandomSelection.RandomIntegerSelection.nmating"]], "nobj (pybrops.breed.prot.sel.randomselection.randomintegerselection property)": [[192, "pybrops.breed.prot.sel.RandomSelection.RandomIntegerSelection.nobj"]], "nparent (pybrops.breed.prot.sel.randomselection.randomintegerselection property)": [[192, "pybrops.breed.prot.sel.RandomSelection.RandomIntegerSelection.nparent"]], "nprogeny (pybrops.breed.prot.sel.randomselection.randomintegerselection property)": [[192, "pybrops.breed.prot.sel.RandomSelection.RandomIntegerSelection.nprogeny"]], "nselindiv (pybrops.breed.prot.sel.randomselection.randomintegerselection property)": [[192, "pybrops.breed.prot.sel.RandomSelection.RandomIntegerSelection.nselindiv"]], "ntrait (pybrops.breed.prot.sel.randomselection.randomintegerselection property)": [[192, "pybrops.breed.prot.sel.RandomSelection.RandomIntegerSelection.ntrait"]], "obj_trans (pybrops.breed.prot.sel.randomselection.randomintegerselection property)": [[192, "pybrops.breed.prot.sel.RandomSelection.RandomIntegerSelection.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.randomselection.randomintegerselection property)": [[192, "pybrops.breed.prot.sel.RandomSelection.RandomIntegerSelection.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.randomselection.randomintegerselection property)": [[192, "pybrops.breed.prot.sel.RandomSelection.RandomIntegerSelection.obj_wt"]], "problem() (pybrops.breed.prot.sel.randomselection.randomintegerselection method)": [[192, "pybrops.breed.prot.sel.RandomSelection.RandomIntegerSelection.problem"]], "rng (pybrops.breed.prot.sel.randomselection.randomintegerselection property)": [[192, "pybrops.breed.prot.sel.RandomSelection.RandomIntegerSelection.rng"]], "select() (pybrops.breed.prot.sel.randomselection.randomintegerselection method)": [[192, "pybrops.breed.prot.sel.RandomSelection.RandomIntegerSelection.select"]], "soalgo (pybrops.breed.prot.sel.randomselection.randomintegerselection property)": [[192, "pybrops.breed.prot.sel.RandomSelection.RandomIntegerSelection.soalgo"]], "sosolve() (pybrops.breed.prot.sel.randomselection.randomintegerselection method)": [[192, "pybrops.breed.prot.sel.RandomSelection.RandomIntegerSelection.sosolve"]], "randomrealselection (class in pybrops.breed.prot.sel.randomselection)": [[193, "pybrops.breed.prot.sel.RandomSelection.RandomRealSelection"]], "eqcv_trans (pybrops.breed.prot.sel.randomselection.randomrealselection property)": [[193, "pybrops.breed.prot.sel.RandomSelection.RandomRealSelection.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.randomselection.randomrealselection property)": [[193, "pybrops.breed.prot.sel.RandomSelection.RandomRealSelection.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.randomselection.randomrealselection property)": [[193, "pybrops.breed.prot.sel.RandomSelection.RandomRealSelection.eqcv_wt"]], "ineqcv_trans (pybrops.breed.prot.sel.randomselection.randomrealselection property)": [[193, "pybrops.breed.prot.sel.RandomSelection.RandomRealSelection.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.randomselection.randomrealselection property)": [[193, "pybrops.breed.prot.sel.RandomSelection.RandomRealSelection.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.randomselection.randomrealselection property)": [[193, "pybrops.breed.prot.sel.RandomSelection.RandomRealSelection.ineqcv_wt"]], "moalgo (pybrops.breed.prot.sel.randomselection.randomrealselection property)": [[193, "pybrops.breed.prot.sel.RandomSelection.RandomRealSelection.moalgo"]], "mosolve() (pybrops.breed.prot.sel.randomselection.randomrealselection method)": [[193, "pybrops.breed.prot.sel.RandomSelection.RandomRealSelection.mosolve"]], "ncross (pybrops.breed.prot.sel.randomselection.randomrealselection property)": [[193, "pybrops.breed.prot.sel.RandomSelection.RandomRealSelection.ncross"]], "ndset_trans (pybrops.breed.prot.sel.randomselection.randomrealselection property)": [[193, "pybrops.breed.prot.sel.RandomSelection.RandomRealSelection.ndset_trans"]], "ndset_trans_kwargs (pybrops.breed.prot.sel.randomselection.randomrealselection property)": [[193, "pybrops.breed.prot.sel.RandomSelection.RandomRealSelection.ndset_trans_kwargs"]], "ndset_wt (pybrops.breed.prot.sel.randomselection.randomrealselection property)": [[193, "pybrops.breed.prot.sel.RandomSelection.RandomRealSelection.ndset_wt"]], "neqcv (pybrops.breed.prot.sel.randomselection.randomrealselection property)": [[193, "pybrops.breed.prot.sel.RandomSelection.RandomRealSelection.neqcv"]], "nineqcv (pybrops.breed.prot.sel.randomselection.randomrealselection property)": [[193, "pybrops.breed.prot.sel.RandomSelection.RandomRealSelection.nineqcv"]], "nmating (pybrops.breed.prot.sel.randomselection.randomrealselection property)": [[193, "pybrops.breed.prot.sel.RandomSelection.RandomRealSelection.nmating"]], "nobj (pybrops.breed.prot.sel.randomselection.randomrealselection property)": [[193, "pybrops.breed.prot.sel.RandomSelection.RandomRealSelection.nobj"]], "nparent (pybrops.breed.prot.sel.randomselection.randomrealselection property)": [[193, "pybrops.breed.prot.sel.RandomSelection.RandomRealSelection.nparent"]], "nprogeny (pybrops.breed.prot.sel.randomselection.randomrealselection property)": [[193, "pybrops.breed.prot.sel.RandomSelection.RandomRealSelection.nprogeny"]], "nselindiv (pybrops.breed.prot.sel.randomselection.randomrealselection property)": [[193, "pybrops.breed.prot.sel.RandomSelection.RandomRealSelection.nselindiv"]], "ntrait (pybrops.breed.prot.sel.randomselection.randomrealselection property)": [[193, "pybrops.breed.prot.sel.RandomSelection.RandomRealSelection.ntrait"]], "obj_trans (pybrops.breed.prot.sel.randomselection.randomrealselection property)": [[193, "pybrops.breed.prot.sel.RandomSelection.RandomRealSelection.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.randomselection.randomrealselection property)": [[193, "pybrops.breed.prot.sel.RandomSelection.RandomRealSelection.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.randomselection.randomrealselection property)": [[193, "pybrops.breed.prot.sel.RandomSelection.RandomRealSelection.obj_wt"]], "problem() (pybrops.breed.prot.sel.randomselection.randomrealselection method)": [[193, "pybrops.breed.prot.sel.RandomSelection.RandomRealSelection.problem"]], "rng (pybrops.breed.prot.sel.randomselection.randomrealselection property)": [[193, "pybrops.breed.prot.sel.RandomSelection.RandomRealSelection.rng"]], "select() (pybrops.breed.prot.sel.randomselection.randomrealselection method)": [[193, "pybrops.breed.prot.sel.RandomSelection.RandomRealSelection.select"]], "soalgo (pybrops.breed.prot.sel.randomselection.randomrealselection property)": [[193, "pybrops.breed.prot.sel.RandomSelection.RandomRealSelection.soalgo"]], "sosolve() (pybrops.breed.prot.sel.randomselection.randomrealselection method)": [[193, "pybrops.breed.prot.sel.RandomSelection.RandomRealSelection.sosolve"]], "randomselectionmixin (class in pybrops.breed.prot.sel.randomselection)": [[194, "pybrops.breed.prot.sel.RandomSelection.RandomSelectionMixin"]], "ntrait (pybrops.breed.prot.sel.randomselection.randomselectionmixin property)": [[194, "pybrops.breed.prot.sel.RandomSelection.RandomSelectionMixin.ntrait"]], "randomsubsetselection (class in pybrops.breed.prot.sel.randomselection)": [[195, "pybrops.breed.prot.sel.RandomSelection.RandomSubsetSelection"]], "eqcv_trans (pybrops.breed.prot.sel.randomselection.randomsubsetselection property)": [[195, "pybrops.breed.prot.sel.RandomSelection.RandomSubsetSelection.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.randomselection.randomsubsetselection property)": [[195, "pybrops.breed.prot.sel.RandomSelection.RandomSubsetSelection.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.randomselection.randomsubsetselection property)": [[195, "pybrops.breed.prot.sel.RandomSelection.RandomSubsetSelection.eqcv_wt"]], "ineqcv_trans (pybrops.breed.prot.sel.randomselection.randomsubsetselection property)": [[195, "pybrops.breed.prot.sel.RandomSelection.RandomSubsetSelection.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.randomselection.randomsubsetselection property)": [[195, "pybrops.breed.prot.sel.RandomSelection.RandomSubsetSelection.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.randomselection.randomsubsetselection property)": [[195, "pybrops.breed.prot.sel.RandomSelection.RandomSubsetSelection.ineqcv_wt"]], "moalgo (pybrops.breed.prot.sel.randomselection.randomsubsetselection property)": [[195, "pybrops.breed.prot.sel.RandomSelection.RandomSubsetSelection.moalgo"]], "mosolve() (pybrops.breed.prot.sel.randomselection.randomsubsetselection method)": [[195, "pybrops.breed.prot.sel.RandomSelection.RandomSubsetSelection.mosolve"]], "ncross (pybrops.breed.prot.sel.randomselection.randomsubsetselection property)": [[195, "pybrops.breed.prot.sel.RandomSelection.RandomSubsetSelection.ncross"]], "ndset_trans (pybrops.breed.prot.sel.randomselection.randomsubsetselection property)": [[195, "pybrops.breed.prot.sel.RandomSelection.RandomSubsetSelection.ndset_trans"]], "ndset_trans_kwargs (pybrops.breed.prot.sel.randomselection.randomsubsetselection property)": [[195, "pybrops.breed.prot.sel.RandomSelection.RandomSubsetSelection.ndset_trans_kwargs"]], "ndset_wt (pybrops.breed.prot.sel.randomselection.randomsubsetselection property)": [[195, "pybrops.breed.prot.sel.RandomSelection.RandomSubsetSelection.ndset_wt"]], "neqcv (pybrops.breed.prot.sel.randomselection.randomsubsetselection property)": [[195, "pybrops.breed.prot.sel.RandomSelection.RandomSubsetSelection.neqcv"]], "nineqcv (pybrops.breed.prot.sel.randomselection.randomsubsetselection property)": [[195, "pybrops.breed.prot.sel.RandomSelection.RandomSubsetSelection.nineqcv"]], "nmating (pybrops.breed.prot.sel.randomselection.randomsubsetselection property)": [[195, "pybrops.breed.prot.sel.RandomSelection.RandomSubsetSelection.nmating"]], "nobj (pybrops.breed.prot.sel.randomselection.randomsubsetselection property)": [[195, "pybrops.breed.prot.sel.RandomSelection.RandomSubsetSelection.nobj"]], "nparent (pybrops.breed.prot.sel.randomselection.randomsubsetselection property)": [[195, "pybrops.breed.prot.sel.RandomSelection.RandomSubsetSelection.nparent"]], "nprogeny (pybrops.breed.prot.sel.randomselection.randomsubsetselection property)": [[195, "pybrops.breed.prot.sel.RandomSelection.RandomSubsetSelection.nprogeny"]], "nselindiv (pybrops.breed.prot.sel.randomselection.randomsubsetselection property)": [[195, "pybrops.breed.prot.sel.RandomSelection.RandomSubsetSelection.nselindiv"]], "ntrait (pybrops.breed.prot.sel.randomselection.randomsubsetselection property)": [[195, "pybrops.breed.prot.sel.RandomSelection.RandomSubsetSelection.ntrait"]], "obj_trans (pybrops.breed.prot.sel.randomselection.randomsubsetselection property)": [[195, "pybrops.breed.prot.sel.RandomSelection.RandomSubsetSelection.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.randomselection.randomsubsetselection property)": [[195, "pybrops.breed.prot.sel.RandomSelection.RandomSubsetSelection.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.randomselection.randomsubsetselection property)": [[195, "pybrops.breed.prot.sel.RandomSelection.RandomSubsetSelection.obj_wt"]], "problem() (pybrops.breed.prot.sel.randomselection.randomsubsetselection method)": [[195, "pybrops.breed.prot.sel.RandomSelection.RandomSubsetSelection.problem"]], "rng (pybrops.breed.prot.sel.randomselection.randomsubsetselection property)": [[195, "pybrops.breed.prot.sel.RandomSelection.RandomSubsetSelection.rng"]], "select() (pybrops.breed.prot.sel.randomselection.randomsubsetselection method)": [[195, "pybrops.breed.prot.sel.RandomSelection.RandomSubsetSelection.select"]], "soalgo (pybrops.breed.prot.sel.randomselection.randomsubsetselection property)": [[195, "pybrops.breed.prot.sel.RandomSelection.RandomSubsetSelection.soalgo"]], "sosolve() (pybrops.breed.prot.sel.randomselection.randomsubsetselection method)": [[195, "pybrops.breed.prot.sel.RandomSelection.RandomSubsetSelection.sosolve"]], "pybrops.breed.prot.sel.realmateselectionprotocol": [[196, "module-pybrops.breed.prot.sel.RealMateSelectionProtocol"]], "realmateselectionprotocol (class in pybrops.breed.prot.sel.realmateselectionprotocol)": [[197, "pybrops.breed.prot.sel.RealMateSelectionProtocol.RealMateSelectionProtocol"]], "eqcv_trans (pybrops.breed.prot.sel.realmateselectionprotocol.realmateselectionprotocol property)": [[197, "pybrops.breed.prot.sel.RealMateSelectionProtocol.RealMateSelectionProtocol.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.realmateselectionprotocol.realmateselectionprotocol property)": [[197, "pybrops.breed.prot.sel.RealMateSelectionProtocol.RealMateSelectionProtocol.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.realmateselectionprotocol.realmateselectionprotocol property)": [[197, "pybrops.breed.prot.sel.RealMateSelectionProtocol.RealMateSelectionProtocol.eqcv_wt"]], "ineqcv_trans (pybrops.breed.prot.sel.realmateselectionprotocol.realmateselectionprotocol property)": [[197, "pybrops.breed.prot.sel.RealMateSelectionProtocol.RealMateSelectionProtocol.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.realmateselectionprotocol.realmateselectionprotocol property)": [[197, "pybrops.breed.prot.sel.RealMateSelectionProtocol.RealMateSelectionProtocol.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.realmateselectionprotocol.realmateselectionprotocol property)": [[197, "pybrops.breed.prot.sel.RealMateSelectionProtocol.RealMateSelectionProtocol.ineqcv_wt"]], "moalgo (pybrops.breed.prot.sel.realmateselectionprotocol.realmateselectionprotocol property)": [[197, "pybrops.breed.prot.sel.RealMateSelectionProtocol.RealMateSelectionProtocol.moalgo"]], "mosolve() (pybrops.breed.prot.sel.realmateselectionprotocol.realmateselectionprotocol method)": [[197, "pybrops.breed.prot.sel.RealMateSelectionProtocol.RealMateSelectionProtocol.mosolve"]], "ncross (pybrops.breed.prot.sel.realmateselectionprotocol.realmateselectionprotocol property)": [[197, "pybrops.breed.prot.sel.RealMateSelectionProtocol.RealMateSelectionProtocol.ncross"]], "ndset_trans (pybrops.breed.prot.sel.realmateselectionprotocol.realmateselectionprotocol property)": [[197, "pybrops.breed.prot.sel.RealMateSelectionProtocol.RealMateSelectionProtocol.ndset_trans"]], "ndset_trans_kwargs (pybrops.breed.prot.sel.realmateselectionprotocol.realmateselectionprotocol property)": [[197, "pybrops.breed.prot.sel.RealMateSelectionProtocol.RealMateSelectionProtocol.ndset_trans_kwargs"]], "ndset_wt (pybrops.breed.prot.sel.realmateselectionprotocol.realmateselectionprotocol property)": [[197, "pybrops.breed.prot.sel.RealMateSelectionProtocol.RealMateSelectionProtocol.ndset_wt"]], "neqcv (pybrops.breed.prot.sel.realmateselectionprotocol.realmateselectionprotocol property)": [[197, "pybrops.breed.prot.sel.RealMateSelectionProtocol.RealMateSelectionProtocol.neqcv"]], "nineqcv (pybrops.breed.prot.sel.realmateselectionprotocol.realmateselectionprotocol property)": [[197, "pybrops.breed.prot.sel.RealMateSelectionProtocol.RealMateSelectionProtocol.nineqcv"]], "nmating (pybrops.breed.prot.sel.realmateselectionprotocol.realmateselectionprotocol property)": [[197, "pybrops.breed.prot.sel.RealMateSelectionProtocol.RealMateSelectionProtocol.nmating"]], "nobj (pybrops.breed.prot.sel.realmateselectionprotocol.realmateselectionprotocol property)": [[197, "pybrops.breed.prot.sel.RealMateSelectionProtocol.RealMateSelectionProtocol.nobj"]], "nparent (pybrops.breed.prot.sel.realmateselectionprotocol.realmateselectionprotocol property)": [[197, "pybrops.breed.prot.sel.RealMateSelectionProtocol.RealMateSelectionProtocol.nparent"]], "nprogeny (pybrops.breed.prot.sel.realmateselectionprotocol.realmateselectionprotocol property)": [[197, "pybrops.breed.prot.sel.RealMateSelectionProtocol.RealMateSelectionProtocol.nprogeny"]], "nselindiv (pybrops.breed.prot.sel.realmateselectionprotocol.realmateselectionprotocol property)": [[197, "pybrops.breed.prot.sel.RealMateSelectionProtocol.RealMateSelectionProtocol.nselindiv"]], "obj_trans (pybrops.breed.prot.sel.realmateselectionprotocol.realmateselectionprotocol property)": [[197, "pybrops.breed.prot.sel.RealMateSelectionProtocol.RealMateSelectionProtocol.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.realmateselectionprotocol.realmateselectionprotocol property)": [[197, "pybrops.breed.prot.sel.RealMateSelectionProtocol.RealMateSelectionProtocol.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.realmateselectionprotocol.realmateselectionprotocol property)": [[197, "pybrops.breed.prot.sel.RealMateSelectionProtocol.RealMateSelectionProtocol.obj_wt"]], "problem() (pybrops.breed.prot.sel.realmateselectionprotocol.realmateselectionprotocol method)": [[197, "pybrops.breed.prot.sel.RealMateSelectionProtocol.RealMateSelectionProtocol.problem"]], "rng (pybrops.breed.prot.sel.realmateselectionprotocol.realmateselectionprotocol property)": [[197, "pybrops.breed.prot.sel.RealMateSelectionProtocol.RealMateSelectionProtocol.rng"]], "select() (pybrops.breed.prot.sel.realmateselectionprotocol.realmateselectionprotocol method)": [[197, "pybrops.breed.prot.sel.RealMateSelectionProtocol.RealMateSelectionProtocol.select"]], "soalgo (pybrops.breed.prot.sel.realmateselectionprotocol.realmateselectionprotocol property)": [[197, "pybrops.breed.prot.sel.RealMateSelectionProtocol.RealMateSelectionProtocol.soalgo"]], "sosolve() (pybrops.breed.prot.sel.realmateselectionprotocol.realmateselectionprotocol method)": [[197, "pybrops.breed.prot.sel.RealMateSelectionProtocol.RealMateSelectionProtocol.sosolve"]], "check_is_realmateselectionprotocol() (in module pybrops.breed.prot.sel.realmateselectionprotocol)": [[198, "pybrops.breed.prot.sel.RealMateSelectionProtocol.check_is_RealMateSelectionProtocol"]], "pybrops.breed.prot.sel.realselectionprotocol": [[199, "module-pybrops.breed.prot.sel.RealSelectionProtocol"]], "realselectionprotocol (class in pybrops.breed.prot.sel.realselectionprotocol)": [[200, "pybrops.breed.prot.sel.RealSelectionProtocol.RealSelectionProtocol"]], "eqcv_trans (pybrops.breed.prot.sel.realselectionprotocol.realselectionprotocol property)": [[200, "pybrops.breed.prot.sel.RealSelectionProtocol.RealSelectionProtocol.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.realselectionprotocol.realselectionprotocol property)": [[200, "pybrops.breed.prot.sel.RealSelectionProtocol.RealSelectionProtocol.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.realselectionprotocol.realselectionprotocol property)": [[200, "pybrops.breed.prot.sel.RealSelectionProtocol.RealSelectionProtocol.eqcv_wt"]], "ineqcv_trans (pybrops.breed.prot.sel.realselectionprotocol.realselectionprotocol property)": [[200, "pybrops.breed.prot.sel.RealSelectionProtocol.RealSelectionProtocol.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.realselectionprotocol.realselectionprotocol property)": [[200, "pybrops.breed.prot.sel.RealSelectionProtocol.RealSelectionProtocol.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.realselectionprotocol.realselectionprotocol property)": [[200, "pybrops.breed.prot.sel.RealSelectionProtocol.RealSelectionProtocol.ineqcv_wt"]], "moalgo (pybrops.breed.prot.sel.realselectionprotocol.realselectionprotocol property)": [[200, "pybrops.breed.prot.sel.RealSelectionProtocol.RealSelectionProtocol.moalgo"]], "mosolve() (pybrops.breed.prot.sel.realselectionprotocol.realselectionprotocol method)": [[200, "pybrops.breed.prot.sel.RealSelectionProtocol.RealSelectionProtocol.mosolve"]], "ncross (pybrops.breed.prot.sel.realselectionprotocol.realselectionprotocol property)": [[200, "pybrops.breed.prot.sel.RealSelectionProtocol.RealSelectionProtocol.ncross"]], "ndset_trans (pybrops.breed.prot.sel.realselectionprotocol.realselectionprotocol property)": [[200, "pybrops.breed.prot.sel.RealSelectionProtocol.RealSelectionProtocol.ndset_trans"]], "ndset_trans_kwargs (pybrops.breed.prot.sel.realselectionprotocol.realselectionprotocol property)": [[200, "pybrops.breed.prot.sel.RealSelectionProtocol.RealSelectionProtocol.ndset_trans_kwargs"]], "ndset_wt (pybrops.breed.prot.sel.realselectionprotocol.realselectionprotocol property)": [[200, "pybrops.breed.prot.sel.RealSelectionProtocol.RealSelectionProtocol.ndset_wt"]], "neqcv (pybrops.breed.prot.sel.realselectionprotocol.realselectionprotocol property)": [[200, "pybrops.breed.prot.sel.RealSelectionProtocol.RealSelectionProtocol.neqcv"]], "nineqcv (pybrops.breed.prot.sel.realselectionprotocol.realselectionprotocol property)": [[200, "pybrops.breed.prot.sel.RealSelectionProtocol.RealSelectionProtocol.nineqcv"]], "nmating (pybrops.breed.prot.sel.realselectionprotocol.realselectionprotocol property)": [[200, "pybrops.breed.prot.sel.RealSelectionProtocol.RealSelectionProtocol.nmating"]], "nobj (pybrops.breed.prot.sel.realselectionprotocol.realselectionprotocol property)": [[200, "pybrops.breed.prot.sel.RealSelectionProtocol.RealSelectionProtocol.nobj"]], "nparent (pybrops.breed.prot.sel.realselectionprotocol.realselectionprotocol property)": [[200, "pybrops.breed.prot.sel.RealSelectionProtocol.RealSelectionProtocol.nparent"]], "nprogeny (pybrops.breed.prot.sel.realselectionprotocol.realselectionprotocol property)": [[200, "pybrops.breed.prot.sel.RealSelectionProtocol.RealSelectionProtocol.nprogeny"]], "nselindiv (pybrops.breed.prot.sel.realselectionprotocol.realselectionprotocol property)": [[200, "pybrops.breed.prot.sel.RealSelectionProtocol.RealSelectionProtocol.nselindiv"]], "obj_trans (pybrops.breed.prot.sel.realselectionprotocol.realselectionprotocol property)": [[200, "pybrops.breed.prot.sel.RealSelectionProtocol.RealSelectionProtocol.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.realselectionprotocol.realselectionprotocol property)": [[200, "pybrops.breed.prot.sel.RealSelectionProtocol.RealSelectionProtocol.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.realselectionprotocol.realselectionprotocol property)": [[200, "pybrops.breed.prot.sel.RealSelectionProtocol.RealSelectionProtocol.obj_wt"]], "problem() (pybrops.breed.prot.sel.realselectionprotocol.realselectionprotocol method)": [[200, "pybrops.breed.prot.sel.RealSelectionProtocol.RealSelectionProtocol.problem"]], "rng (pybrops.breed.prot.sel.realselectionprotocol.realselectionprotocol property)": [[200, "pybrops.breed.prot.sel.RealSelectionProtocol.RealSelectionProtocol.rng"]], "select() (pybrops.breed.prot.sel.realselectionprotocol.realselectionprotocol method)": [[200, "pybrops.breed.prot.sel.RealSelectionProtocol.RealSelectionProtocol.select"]], "soalgo (pybrops.breed.prot.sel.realselectionprotocol.realselectionprotocol property)": [[200, "pybrops.breed.prot.sel.RealSelectionProtocol.RealSelectionProtocol.soalgo"]], "sosolve() (pybrops.breed.prot.sel.realselectionprotocol.realselectionprotocol method)": [[200, "pybrops.breed.prot.sel.RealSelectionProtocol.RealSelectionProtocol.sosolve"]], "check_is_realselectionprotocol() (in module pybrops.breed.prot.sel.realselectionprotocol)": [[201, "pybrops.breed.prot.sel.RealSelectionProtocol.check_is_RealSelectionProtocol"]], "pybrops.breed.prot.sel.selectionprotocol": [[202, "module-pybrops.breed.prot.sel.SelectionProtocol"]], "selectionprotocol (class in pybrops.breed.prot.sel.selectionprotocol)": [[203, "pybrops.breed.prot.sel.SelectionProtocol.SelectionProtocol"]], "eqcv_trans (pybrops.breed.prot.sel.selectionprotocol.selectionprotocol property)": [[203, "pybrops.breed.prot.sel.SelectionProtocol.SelectionProtocol.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.selectionprotocol.selectionprotocol property)": [[203, "pybrops.breed.prot.sel.SelectionProtocol.SelectionProtocol.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.selectionprotocol.selectionprotocol property)": [[203, "pybrops.breed.prot.sel.SelectionProtocol.SelectionProtocol.eqcv_wt"]], "ineqcv_trans (pybrops.breed.prot.sel.selectionprotocol.selectionprotocol property)": [[203, "pybrops.breed.prot.sel.SelectionProtocol.SelectionProtocol.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.selectionprotocol.selectionprotocol property)": [[203, "pybrops.breed.prot.sel.SelectionProtocol.SelectionProtocol.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.selectionprotocol.selectionprotocol property)": [[203, "pybrops.breed.prot.sel.SelectionProtocol.SelectionProtocol.ineqcv_wt"]], "moalgo (pybrops.breed.prot.sel.selectionprotocol.selectionprotocol property)": [[203, "pybrops.breed.prot.sel.SelectionProtocol.SelectionProtocol.moalgo"]], "mosolve() (pybrops.breed.prot.sel.selectionprotocol.selectionprotocol method)": [[203, "pybrops.breed.prot.sel.SelectionProtocol.SelectionProtocol.mosolve"]], "ncross (pybrops.breed.prot.sel.selectionprotocol.selectionprotocol property)": [[203, "pybrops.breed.prot.sel.SelectionProtocol.SelectionProtocol.ncross"]], "ndset_trans (pybrops.breed.prot.sel.selectionprotocol.selectionprotocol property)": [[203, "pybrops.breed.prot.sel.SelectionProtocol.SelectionProtocol.ndset_trans"]], "ndset_trans_kwargs (pybrops.breed.prot.sel.selectionprotocol.selectionprotocol property)": [[203, "pybrops.breed.prot.sel.SelectionProtocol.SelectionProtocol.ndset_trans_kwargs"]], "ndset_wt (pybrops.breed.prot.sel.selectionprotocol.selectionprotocol property)": [[203, "pybrops.breed.prot.sel.SelectionProtocol.SelectionProtocol.ndset_wt"]], "neqcv (pybrops.breed.prot.sel.selectionprotocol.selectionprotocol property)": [[203, "pybrops.breed.prot.sel.SelectionProtocol.SelectionProtocol.neqcv"]], "nineqcv (pybrops.breed.prot.sel.selectionprotocol.selectionprotocol property)": [[203, "pybrops.breed.prot.sel.SelectionProtocol.SelectionProtocol.nineqcv"]], "nmating (pybrops.breed.prot.sel.selectionprotocol.selectionprotocol property)": [[203, "pybrops.breed.prot.sel.SelectionProtocol.SelectionProtocol.nmating"]], "nobj (pybrops.breed.prot.sel.selectionprotocol.selectionprotocol property)": [[203, "pybrops.breed.prot.sel.SelectionProtocol.SelectionProtocol.nobj"]], "nparent (pybrops.breed.prot.sel.selectionprotocol.selectionprotocol property)": [[203, "pybrops.breed.prot.sel.SelectionProtocol.SelectionProtocol.nparent"]], "nprogeny (pybrops.breed.prot.sel.selectionprotocol.selectionprotocol property)": [[203, "pybrops.breed.prot.sel.SelectionProtocol.SelectionProtocol.nprogeny"]], "nselindiv (pybrops.breed.prot.sel.selectionprotocol.selectionprotocol property)": [[203, "pybrops.breed.prot.sel.SelectionProtocol.SelectionProtocol.nselindiv"]], "obj_trans (pybrops.breed.prot.sel.selectionprotocol.selectionprotocol property)": [[203, "pybrops.breed.prot.sel.SelectionProtocol.SelectionProtocol.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.selectionprotocol.selectionprotocol property)": [[203, "pybrops.breed.prot.sel.SelectionProtocol.SelectionProtocol.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.selectionprotocol.selectionprotocol property)": [[203, "pybrops.breed.prot.sel.SelectionProtocol.SelectionProtocol.obj_wt"]], "problem() (pybrops.breed.prot.sel.selectionprotocol.selectionprotocol method)": [[203, "pybrops.breed.prot.sel.SelectionProtocol.SelectionProtocol.problem"]], "rng (pybrops.breed.prot.sel.selectionprotocol.selectionprotocol property)": [[203, "pybrops.breed.prot.sel.SelectionProtocol.SelectionProtocol.rng"]], "select() (pybrops.breed.prot.sel.selectionprotocol.selectionprotocol method)": [[203, "pybrops.breed.prot.sel.SelectionProtocol.SelectionProtocol.select"]], "soalgo (pybrops.breed.prot.sel.selectionprotocol.selectionprotocol property)": [[203, "pybrops.breed.prot.sel.SelectionProtocol.SelectionProtocol.soalgo"]], "sosolve() (pybrops.breed.prot.sel.selectionprotocol.selectionprotocol method)": [[203, "pybrops.breed.prot.sel.SelectionProtocol.SelectionProtocol.sosolve"]], "check_is_selectionprotocol() (in module pybrops.breed.prot.sel.selectionprotocol)": [[204, "pybrops.breed.prot.sel.SelectionProtocol.check_is_SelectionProtocol"]], "pybrops.breed.prot.sel.subsetmateselectionprotocol": [[205, "module-pybrops.breed.prot.sel.SubsetMateSelectionProtocol"]], "subsetmateselectionprotocol (class in pybrops.breed.prot.sel.subsetmateselectionprotocol)": [[206, "pybrops.breed.prot.sel.SubsetMateSelectionProtocol.SubsetMateSelectionProtocol"]], "eqcv_trans (pybrops.breed.prot.sel.subsetmateselectionprotocol.subsetmateselectionprotocol property)": [[206, "pybrops.breed.prot.sel.SubsetMateSelectionProtocol.SubsetMateSelectionProtocol.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.subsetmateselectionprotocol.subsetmateselectionprotocol property)": [[206, "pybrops.breed.prot.sel.SubsetMateSelectionProtocol.SubsetMateSelectionProtocol.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.subsetmateselectionprotocol.subsetmateselectionprotocol property)": [[206, "pybrops.breed.prot.sel.SubsetMateSelectionProtocol.SubsetMateSelectionProtocol.eqcv_wt"]], "ineqcv_trans (pybrops.breed.prot.sel.subsetmateselectionprotocol.subsetmateselectionprotocol property)": [[206, "pybrops.breed.prot.sel.SubsetMateSelectionProtocol.SubsetMateSelectionProtocol.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.subsetmateselectionprotocol.subsetmateselectionprotocol property)": [[206, "pybrops.breed.prot.sel.SubsetMateSelectionProtocol.SubsetMateSelectionProtocol.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.subsetmateselectionprotocol.subsetmateselectionprotocol property)": [[206, "pybrops.breed.prot.sel.SubsetMateSelectionProtocol.SubsetMateSelectionProtocol.ineqcv_wt"]], "moalgo (pybrops.breed.prot.sel.subsetmateselectionprotocol.subsetmateselectionprotocol property)": [[206, "pybrops.breed.prot.sel.SubsetMateSelectionProtocol.SubsetMateSelectionProtocol.moalgo"]], "mosolve() (pybrops.breed.prot.sel.subsetmateselectionprotocol.subsetmateselectionprotocol method)": [[206, "pybrops.breed.prot.sel.SubsetMateSelectionProtocol.SubsetMateSelectionProtocol.mosolve"]], "ncross (pybrops.breed.prot.sel.subsetmateselectionprotocol.subsetmateselectionprotocol property)": [[206, "pybrops.breed.prot.sel.SubsetMateSelectionProtocol.SubsetMateSelectionProtocol.ncross"]], "ndset_trans (pybrops.breed.prot.sel.subsetmateselectionprotocol.subsetmateselectionprotocol property)": [[206, "pybrops.breed.prot.sel.SubsetMateSelectionProtocol.SubsetMateSelectionProtocol.ndset_trans"]], "ndset_trans_kwargs (pybrops.breed.prot.sel.subsetmateselectionprotocol.subsetmateselectionprotocol property)": [[206, "pybrops.breed.prot.sel.SubsetMateSelectionProtocol.SubsetMateSelectionProtocol.ndset_trans_kwargs"]], "ndset_wt (pybrops.breed.prot.sel.subsetmateselectionprotocol.subsetmateselectionprotocol property)": [[206, "pybrops.breed.prot.sel.SubsetMateSelectionProtocol.SubsetMateSelectionProtocol.ndset_wt"]], "neqcv (pybrops.breed.prot.sel.subsetmateselectionprotocol.subsetmateselectionprotocol property)": [[206, "pybrops.breed.prot.sel.SubsetMateSelectionProtocol.SubsetMateSelectionProtocol.neqcv"]], "nineqcv (pybrops.breed.prot.sel.subsetmateselectionprotocol.subsetmateselectionprotocol property)": [[206, "pybrops.breed.prot.sel.SubsetMateSelectionProtocol.SubsetMateSelectionProtocol.nineqcv"]], "nmating (pybrops.breed.prot.sel.subsetmateselectionprotocol.subsetmateselectionprotocol property)": [[206, "pybrops.breed.prot.sel.SubsetMateSelectionProtocol.SubsetMateSelectionProtocol.nmating"]], "nobj (pybrops.breed.prot.sel.subsetmateselectionprotocol.subsetmateselectionprotocol property)": [[206, "pybrops.breed.prot.sel.SubsetMateSelectionProtocol.SubsetMateSelectionProtocol.nobj"]], "nparent (pybrops.breed.prot.sel.subsetmateselectionprotocol.subsetmateselectionprotocol property)": [[206, "pybrops.breed.prot.sel.SubsetMateSelectionProtocol.SubsetMateSelectionProtocol.nparent"]], "nprogeny (pybrops.breed.prot.sel.subsetmateselectionprotocol.subsetmateselectionprotocol property)": [[206, "pybrops.breed.prot.sel.SubsetMateSelectionProtocol.SubsetMateSelectionProtocol.nprogeny"]], "nselindiv (pybrops.breed.prot.sel.subsetmateselectionprotocol.subsetmateselectionprotocol property)": [[206, "pybrops.breed.prot.sel.SubsetMateSelectionProtocol.SubsetMateSelectionProtocol.nselindiv"]], "obj_trans (pybrops.breed.prot.sel.subsetmateselectionprotocol.subsetmateselectionprotocol property)": [[206, "pybrops.breed.prot.sel.SubsetMateSelectionProtocol.SubsetMateSelectionProtocol.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.subsetmateselectionprotocol.subsetmateselectionprotocol property)": [[206, "pybrops.breed.prot.sel.SubsetMateSelectionProtocol.SubsetMateSelectionProtocol.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.subsetmateselectionprotocol.subsetmateselectionprotocol property)": [[206, "pybrops.breed.prot.sel.SubsetMateSelectionProtocol.SubsetMateSelectionProtocol.obj_wt"]], "problem() (pybrops.breed.prot.sel.subsetmateselectionprotocol.subsetmateselectionprotocol method)": [[206, "pybrops.breed.prot.sel.SubsetMateSelectionProtocol.SubsetMateSelectionProtocol.problem"]], "rng (pybrops.breed.prot.sel.subsetmateselectionprotocol.subsetmateselectionprotocol property)": [[206, "pybrops.breed.prot.sel.SubsetMateSelectionProtocol.SubsetMateSelectionProtocol.rng"]], "select() (pybrops.breed.prot.sel.subsetmateselectionprotocol.subsetmateselectionprotocol method)": [[206, "pybrops.breed.prot.sel.SubsetMateSelectionProtocol.SubsetMateSelectionProtocol.select"]], "soalgo (pybrops.breed.prot.sel.subsetmateselectionprotocol.subsetmateselectionprotocol property)": [[206, "pybrops.breed.prot.sel.SubsetMateSelectionProtocol.SubsetMateSelectionProtocol.soalgo"]], "sosolve() (pybrops.breed.prot.sel.subsetmateselectionprotocol.subsetmateselectionprotocol method)": [[206, "pybrops.breed.prot.sel.SubsetMateSelectionProtocol.SubsetMateSelectionProtocol.sosolve"]], "check_is_subsetmateselectionprotocol() (in module pybrops.breed.prot.sel.subsetmateselectionprotocol)": [[207, "pybrops.breed.prot.sel.SubsetMateSelectionProtocol.check_is_SubsetMateSelectionProtocol"]], "pybrops.breed.prot.sel.subsetselectionprotocol": [[208, "module-pybrops.breed.prot.sel.SubsetSelectionProtocol"]], "subsetselectionprotocol (class in pybrops.breed.prot.sel.subsetselectionprotocol)": [[209, "pybrops.breed.prot.sel.SubsetSelectionProtocol.SubsetSelectionProtocol"]], "eqcv_trans (pybrops.breed.prot.sel.subsetselectionprotocol.subsetselectionprotocol property)": [[209, "pybrops.breed.prot.sel.SubsetSelectionProtocol.SubsetSelectionProtocol.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.subsetselectionprotocol.subsetselectionprotocol property)": [[209, "pybrops.breed.prot.sel.SubsetSelectionProtocol.SubsetSelectionProtocol.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.subsetselectionprotocol.subsetselectionprotocol property)": [[209, "pybrops.breed.prot.sel.SubsetSelectionProtocol.SubsetSelectionProtocol.eqcv_wt"]], "ineqcv_trans (pybrops.breed.prot.sel.subsetselectionprotocol.subsetselectionprotocol property)": [[209, "pybrops.breed.prot.sel.SubsetSelectionProtocol.SubsetSelectionProtocol.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.subsetselectionprotocol.subsetselectionprotocol property)": [[209, "pybrops.breed.prot.sel.SubsetSelectionProtocol.SubsetSelectionProtocol.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.subsetselectionprotocol.subsetselectionprotocol property)": [[209, "pybrops.breed.prot.sel.SubsetSelectionProtocol.SubsetSelectionProtocol.ineqcv_wt"]], "moalgo (pybrops.breed.prot.sel.subsetselectionprotocol.subsetselectionprotocol property)": [[209, "pybrops.breed.prot.sel.SubsetSelectionProtocol.SubsetSelectionProtocol.moalgo"]], "mosolve() (pybrops.breed.prot.sel.subsetselectionprotocol.subsetselectionprotocol method)": [[209, "pybrops.breed.prot.sel.SubsetSelectionProtocol.SubsetSelectionProtocol.mosolve"]], "ncross (pybrops.breed.prot.sel.subsetselectionprotocol.subsetselectionprotocol property)": [[209, "pybrops.breed.prot.sel.SubsetSelectionProtocol.SubsetSelectionProtocol.ncross"]], "ndset_trans (pybrops.breed.prot.sel.subsetselectionprotocol.subsetselectionprotocol property)": [[209, "pybrops.breed.prot.sel.SubsetSelectionProtocol.SubsetSelectionProtocol.ndset_trans"]], "ndset_trans_kwargs (pybrops.breed.prot.sel.subsetselectionprotocol.subsetselectionprotocol property)": [[209, "pybrops.breed.prot.sel.SubsetSelectionProtocol.SubsetSelectionProtocol.ndset_trans_kwargs"]], "ndset_wt (pybrops.breed.prot.sel.subsetselectionprotocol.subsetselectionprotocol property)": [[209, "pybrops.breed.prot.sel.SubsetSelectionProtocol.SubsetSelectionProtocol.ndset_wt"]], "neqcv (pybrops.breed.prot.sel.subsetselectionprotocol.subsetselectionprotocol property)": [[209, "pybrops.breed.prot.sel.SubsetSelectionProtocol.SubsetSelectionProtocol.neqcv"]], "nineqcv (pybrops.breed.prot.sel.subsetselectionprotocol.subsetselectionprotocol property)": [[209, "pybrops.breed.prot.sel.SubsetSelectionProtocol.SubsetSelectionProtocol.nineqcv"]], "nmating (pybrops.breed.prot.sel.subsetselectionprotocol.subsetselectionprotocol property)": [[209, "pybrops.breed.prot.sel.SubsetSelectionProtocol.SubsetSelectionProtocol.nmating"]], "nobj (pybrops.breed.prot.sel.subsetselectionprotocol.subsetselectionprotocol property)": [[209, "pybrops.breed.prot.sel.SubsetSelectionProtocol.SubsetSelectionProtocol.nobj"]], "nparent (pybrops.breed.prot.sel.subsetselectionprotocol.subsetselectionprotocol property)": [[209, "pybrops.breed.prot.sel.SubsetSelectionProtocol.SubsetSelectionProtocol.nparent"]], "nprogeny (pybrops.breed.prot.sel.subsetselectionprotocol.subsetselectionprotocol property)": [[209, "pybrops.breed.prot.sel.SubsetSelectionProtocol.SubsetSelectionProtocol.nprogeny"]], "nselindiv (pybrops.breed.prot.sel.subsetselectionprotocol.subsetselectionprotocol property)": [[209, "pybrops.breed.prot.sel.SubsetSelectionProtocol.SubsetSelectionProtocol.nselindiv"]], "obj_trans (pybrops.breed.prot.sel.subsetselectionprotocol.subsetselectionprotocol property)": [[209, "pybrops.breed.prot.sel.SubsetSelectionProtocol.SubsetSelectionProtocol.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.subsetselectionprotocol.subsetselectionprotocol property)": [[209, "pybrops.breed.prot.sel.SubsetSelectionProtocol.SubsetSelectionProtocol.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.subsetselectionprotocol.subsetselectionprotocol property)": [[209, "pybrops.breed.prot.sel.SubsetSelectionProtocol.SubsetSelectionProtocol.obj_wt"]], "problem() (pybrops.breed.prot.sel.subsetselectionprotocol.subsetselectionprotocol method)": [[209, "pybrops.breed.prot.sel.SubsetSelectionProtocol.SubsetSelectionProtocol.problem"]], "rng (pybrops.breed.prot.sel.subsetselectionprotocol.subsetselectionprotocol property)": [[209, "pybrops.breed.prot.sel.SubsetSelectionProtocol.SubsetSelectionProtocol.rng"]], "select() (pybrops.breed.prot.sel.subsetselectionprotocol.subsetselectionprotocol method)": [[209, "pybrops.breed.prot.sel.SubsetSelectionProtocol.SubsetSelectionProtocol.select"]], "soalgo (pybrops.breed.prot.sel.subsetselectionprotocol.subsetselectionprotocol property)": [[209, "pybrops.breed.prot.sel.SubsetSelectionProtocol.SubsetSelectionProtocol.soalgo"]], "sosolve() (pybrops.breed.prot.sel.subsetselectionprotocol.subsetselectionprotocol method)": [[209, "pybrops.breed.prot.sel.SubsetSelectionProtocol.SubsetSelectionProtocol.sosolve"]], "check_is_subsetselectionprotocol() (in module pybrops.breed.prot.sel.subsetselectionprotocol)": [[210, "pybrops.breed.prot.sel.SubsetSelectionProtocol.check_is_SubsetSelectionProtocol"]], "pybrops.breed.prot.sel.unconstrainedgeneralized1normgenomicselection": [[211, "module-pybrops.breed.prot.sel.UnconstrainedGeneralized1NormGenomicSelection"]], "generalized1normgenomicselection (class in pybrops.breed.prot.sel.unconstrainedgeneralized1normgenomicselection)": [[212, "pybrops.breed.prot.sel.UnconstrainedGeneralized1NormGenomicSelection.Generalized1NormGenomicSelection"]], "method (pybrops.breed.prot.sel.unconstrainedgeneralized1normgenomicselection.generalized1normgenomicselection property)": [[212, "pybrops.breed.prot.sel.UnconstrainedGeneralized1NormGenomicSelection.Generalized1NormGenomicSelection.method"]], "moalgo (pybrops.breed.prot.sel.unconstrainedgeneralized1normgenomicselection.generalized1normgenomicselection property)": [[212, "pybrops.breed.prot.sel.UnconstrainedGeneralized1NormGenomicSelection.Generalized1NormGenomicSelection.moalgo"]], "ncross (pybrops.breed.prot.sel.unconstrainedgeneralized1normgenomicselection.generalized1normgenomicselection property)": [[212, "pybrops.breed.prot.sel.UnconstrainedGeneralized1NormGenomicSelection.Generalized1NormGenomicSelection.ncross"]], "ndset_trans (pybrops.breed.prot.sel.unconstrainedgeneralized1normgenomicselection.generalized1normgenomicselection property)": [[212, "pybrops.breed.prot.sel.UnconstrainedGeneralized1NormGenomicSelection.Generalized1NormGenomicSelection.ndset_trans"]], "ndset_trans_kwargs (pybrops.breed.prot.sel.unconstrainedgeneralized1normgenomicselection.generalized1normgenomicselection property)": [[212, "pybrops.breed.prot.sel.UnconstrainedGeneralized1NormGenomicSelection.Generalized1NormGenomicSelection.ndset_trans_kwargs"]], "ndset_wt (pybrops.breed.prot.sel.unconstrainedgeneralized1normgenomicselection.generalized1normgenomicselection property)": [[212, "pybrops.breed.prot.sel.UnconstrainedGeneralized1NormGenomicSelection.Generalized1NormGenomicSelection.ndset_wt"]], "nparent (pybrops.breed.prot.sel.unconstrainedgeneralized1normgenomicselection.generalized1normgenomicselection property)": [[212, "pybrops.breed.prot.sel.UnconstrainedGeneralized1NormGenomicSelection.Generalized1NormGenomicSelection.nparent"]], "nprogeny (pybrops.breed.prot.sel.unconstrainedgeneralized1normgenomicselection.generalized1normgenomicselection property)": [[212, "pybrops.breed.prot.sel.UnconstrainedGeneralized1NormGenomicSelection.Generalized1NormGenomicSelection.nprogeny"]], "objfn() (pybrops.breed.prot.sel.unconstrainedgeneralized1normgenomicselection.generalized1normgenomicselection method)": [[212, "pybrops.breed.prot.sel.UnconstrainedGeneralized1NormGenomicSelection.Generalized1NormGenomicSelection.objfn"]], "objfn_static() (pybrops.breed.prot.sel.unconstrainedgeneralized1normgenomicselection.generalized1normgenomicselection static method)": [[212, "pybrops.breed.prot.sel.UnconstrainedGeneralized1NormGenomicSelection.Generalized1NormGenomicSelection.objfn_static"]], "objfn_trans (pybrops.breed.prot.sel.unconstrainedgeneralized1normgenomicselection.generalized1normgenomicselection property)": [[212, "pybrops.breed.prot.sel.UnconstrainedGeneralized1NormGenomicSelection.Generalized1NormGenomicSelection.objfn_trans"]], "objfn_trans_kwargs (pybrops.breed.prot.sel.unconstrainedgeneralized1normgenomicselection.generalized1normgenomicselection property)": [[212, "pybrops.breed.prot.sel.UnconstrainedGeneralized1NormGenomicSelection.Generalized1NormGenomicSelection.objfn_trans_kwargs"]], "objfn_vec() (pybrops.breed.prot.sel.unconstrainedgeneralized1normgenomicselection.generalized1normgenomicselection method)": [[212, "pybrops.breed.prot.sel.UnconstrainedGeneralized1NormGenomicSelection.Generalized1NormGenomicSelection.objfn_vec"]], "objfn_vec_static() (pybrops.breed.prot.sel.unconstrainedgeneralized1normgenomicselection.generalized1normgenomicselection static method)": [[212, "pybrops.breed.prot.sel.UnconstrainedGeneralized1NormGenomicSelection.Generalized1NormGenomicSelection.objfn_vec_static"]], "objfn_wt (pybrops.breed.prot.sel.unconstrainedgeneralized1normgenomicselection.generalized1normgenomicselection property)": [[212, "pybrops.breed.prot.sel.UnconstrainedGeneralized1NormGenomicSelection.Generalized1NormGenomicSelection.objfn_wt"]], "pareto() (pybrops.breed.prot.sel.unconstrainedgeneralized1normgenomicselection.generalized1normgenomicselection method)": [[212, "pybrops.breed.prot.sel.UnconstrainedGeneralized1NormGenomicSelection.Generalized1NormGenomicSelection.pareto"]], "rng (pybrops.breed.prot.sel.unconstrainedgeneralized1normgenomicselection.generalized1normgenomicselection property)": [[212, "pybrops.breed.prot.sel.UnconstrainedGeneralized1NormGenomicSelection.Generalized1NormGenomicSelection.rng"]], "select() (pybrops.breed.prot.sel.unconstrainedgeneralized1normgenomicselection.generalized1normgenomicselection method)": [[212, "pybrops.breed.prot.sel.UnconstrainedGeneralized1NormGenomicSelection.Generalized1NormGenomicSelection.select"]], "soalgo (pybrops.breed.prot.sel.unconstrainedgeneralized1normgenomicselection.generalized1normgenomicselection property)": [[212, "pybrops.breed.prot.sel.UnconstrainedGeneralized1NormGenomicSelection.Generalized1NormGenomicSelection.soalgo"]], "target (pybrops.breed.prot.sel.unconstrainedgeneralized1normgenomicselection.generalized1normgenomicselection property)": [[212, "pybrops.breed.prot.sel.UnconstrainedGeneralized1NormGenomicSelection.Generalized1NormGenomicSelection.target"]], "weight (pybrops.breed.prot.sel.unconstrainedgeneralized1normgenomicselection.generalized1normgenomicselection property)": [[212, "pybrops.breed.prot.sel.UnconstrainedGeneralized1NormGenomicSelection.Generalized1NormGenomicSelection.weight"]], "pybrops.breed.prot.sel.unconstrainedmultiobjectivegenomicmating": [[213, "module-pybrops.breed.prot.sel.UnconstrainedMultiObjectiveGenomicMating"]], "multiobjectivegenomicmating (class in pybrops.breed.prot.sel.unconstrainedmultiobjectivegenomicmating)": [[214, "pybrops.breed.prot.sel.UnconstrainedMultiObjectiveGenomicMating.MultiObjectiveGenomicMating"]], "gmapfn (pybrops.breed.prot.sel.unconstrainedmultiobjectivegenomicmating.multiobjectivegenomicmating property)": [[214, "pybrops.breed.prot.sel.UnconstrainedMultiObjectiveGenomicMating.MultiObjectiveGenomicMating.gmapfn"]], "mem (pybrops.breed.prot.sel.unconstrainedmultiobjectivegenomicmating.multiobjectivegenomicmating property)": [[214, "pybrops.breed.prot.sel.UnconstrainedMultiObjectiveGenomicMating.MultiObjectiveGenomicMating.mem"]], "method (pybrops.breed.prot.sel.unconstrainedmultiobjectivegenomicmating.multiobjectivegenomicmating property)": [[214, "pybrops.breed.prot.sel.UnconstrainedMultiObjectiveGenomicMating.MultiObjectiveGenomicMating.method"]], "moalgo (pybrops.breed.prot.sel.unconstrainedmultiobjectivegenomicmating.multiobjectivegenomicmating property)": [[214, "pybrops.breed.prot.sel.UnconstrainedMultiObjectiveGenomicMating.MultiObjectiveGenomicMating.moalgo"]], "nconfig (pybrops.breed.prot.sel.unconstrainedmultiobjectivegenomicmating.multiobjectivegenomicmating property)": [[214, "pybrops.breed.prot.sel.UnconstrainedMultiObjectiveGenomicMating.MultiObjectiveGenomicMating.nconfig"]], "ncross (pybrops.breed.prot.sel.unconstrainedmultiobjectivegenomicmating.multiobjectivegenomicmating property)": [[214, "pybrops.breed.prot.sel.UnconstrainedMultiObjectiveGenomicMating.MultiObjectiveGenomicMating.ncross"]], "ndset_trans (pybrops.breed.prot.sel.unconstrainedmultiobjectivegenomicmating.multiobjectivegenomicmating property)": [[214, "pybrops.breed.prot.sel.UnconstrainedMultiObjectiveGenomicMating.MultiObjectiveGenomicMating.ndset_trans"]], "ndset_trans_kwargs (pybrops.breed.prot.sel.unconstrainedmultiobjectivegenomicmating.multiobjectivegenomicmating property)": [[214, "pybrops.breed.prot.sel.UnconstrainedMultiObjectiveGenomicMating.MultiObjectiveGenomicMating.ndset_trans_kwargs"]], "ndset_wt (pybrops.breed.prot.sel.unconstrainedmultiobjectivegenomicmating.multiobjectivegenomicmating property)": [[214, "pybrops.breed.prot.sel.UnconstrainedMultiObjectiveGenomicMating.MultiObjectiveGenomicMating.ndset_wt"]], "nparent (pybrops.breed.prot.sel.unconstrainedmultiobjectivegenomicmating.multiobjectivegenomicmating property)": [[214, "pybrops.breed.prot.sel.UnconstrainedMultiObjectiveGenomicMating.MultiObjectiveGenomicMating.nparent"]], "nprogeny (pybrops.breed.prot.sel.unconstrainedmultiobjectivegenomicmating.multiobjectivegenomicmating property)": [[214, "pybrops.breed.prot.sel.UnconstrainedMultiObjectiveGenomicMating.MultiObjectiveGenomicMating.nprogeny"]], "nself (pybrops.breed.prot.sel.unconstrainedmultiobjectivegenomicmating.multiobjectivegenomicmating property)": [[214, "pybrops.breed.prot.sel.UnconstrainedMultiObjectiveGenomicMating.MultiObjectiveGenomicMating.nself"]], "objfn() (pybrops.breed.prot.sel.unconstrainedmultiobjectivegenomicmating.multiobjectivegenomicmating method)": [[214, "pybrops.breed.prot.sel.UnconstrainedMultiObjectiveGenomicMating.MultiObjectiveGenomicMating.objfn"]], "objfn_static() (pybrops.breed.prot.sel.unconstrainedmultiobjectivegenomicmating.multiobjectivegenomicmating static method)": [[214, "pybrops.breed.prot.sel.UnconstrainedMultiObjectiveGenomicMating.MultiObjectiveGenomicMating.objfn_static"]], "objfn_trans (pybrops.breed.prot.sel.unconstrainedmultiobjectivegenomicmating.multiobjectivegenomicmating property)": [[214, "pybrops.breed.prot.sel.UnconstrainedMultiObjectiveGenomicMating.MultiObjectiveGenomicMating.objfn_trans"]], "objfn_trans_kwargs (pybrops.breed.prot.sel.unconstrainedmultiobjectivegenomicmating.multiobjectivegenomicmating property)": [[214, "pybrops.breed.prot.sel.UnconstrainedMultiObjectiveGenomicMating.MultiObjectiveGenomicMating.objfn_trans_kwargs"]], "objfn_vec() (pybrops.breed.prot.sel.unconstrainedmultiobjectivegenomicmating.multiobjectivegenomicmating method)": [[214, "pybrops.breed.prot.sel.UnconstrainedMultiObjectiveGenomicMating.MultiObjectiveGenomicMating.objfn_vec"]], "objfn_vec_static() (pybrops.breed.prot.sel.unconstrainedmultiobjectivegenomicmating.multiobjectivegenomicmating static method)": [[214, "pybrops.breed.prot.sel.UnconstrainedMultiObjectiveGenomicMating.MultiObjectiveGenomicMating.objfn_vec_static"]], "objfn_wt (pybrops.breed.prot.sel.unconstrainedmultiobjectivegenomicmating.multiobjectivegenomicmating property)": [[214, "pybrops.breed.prot.sel.UnconstrainedMultiObjectiveGenomicMating.MultiObjectiveGenomicMating.objfn_wt"]], "pareto() (pybrops.breed.prot.sel.unconstrainedmultiobjectivegenomicmating.multiobjectivegenomicmating method)": [[214, "pybrops.breed.prot.sel.UnconstrainedMultiObjectiveGenomicMating.MultiObjectiveGenomicMating.pareto"]], "rng (pybrops.breed.prot.sel.unconstrainedmultiobjectivegenomicmating.multiobjectivegenomicmating property)": [[214, "pybrops.breed.prot.sel.UnconstrainedMultiObjectiveGenomicMating.MultiObjectiveGenomicMating.rng"]], "select() (pybrops.breed.prot.sel.unconstrainedmultiobjectivegenomicmating.multiobjectivegenomicmating method)": [[214, "pybrops.breed.prot.sel.UnconstrainedMultiObjectiveGenomicMating.MultiObjectiveGenomicMating.select"]], "soalgo (pybrops.breed.prot.sel.unconstrainedmultiobjectivegenomicmating.multiobjectivegenomicmating property)": [[214, "pybrops.breed.prot.sel.UnconstrainedMultiObjectiveGenomicMating.MultiObjectiveGenomicMating.soalgo"]], "target (pybrops.breed.prot.sel.unconstrainedmultiobjectivegenomicmating.multiobjectivegenomicmating property)": [[214, "pybrops.breed.prot.sel.UnconstrainedMultiObjectiveGenomicMating.MultiObjectiveGenomicMating.target"]], "unique_parents (pybrops.breed.prot.sel.unconstrainedmultiobjectivegenomicmating.multiobjectivegenomicmating property)": [[214, "pybrops.breed.prot.sel.UnconstrainedMultiObjectiveGenomicMating.MultiObjectiveGenomicMating.unique_parents"]], "vmatfcty (pybrops.breed.prot.sel.unconstrainedmultiobjectivegenomicmating.multiobjectivegenomicmating property)": [[214, "pybrops.breed.prot.sel.UnconstrainedMultiObjectiveGenomicMating.MultiObjectiveGenomicMating.vmatfcty"]], "weight (pybrops.breed.prot.sel.unconstrainedmultiobjectivegenomicmating.multiobjectivegenomicmating property)": [[214, "pybrops.breed.prot.sel.UnconstrainedMultiObjectiveGenomicMating.MultiObjectiveGenomicMating.weight"]], "pybrops.breed.prot.sel.unconstrainedpopulationallelefrequencydistanceselection": [[215, "module-pybrops.breed.prot.sel.UnconstrainedPopulationAlleleFrequencyDistanceSelection"]], "populationallelefrequencydistanceselection (class in pybrops.breed.prot.sel.unconstrainedpopulationallelefrequencydistanceselection)": [[216, "pybrops.breed.prot.sel.UnconstrainedPopulationAlleleFrequencyDistanceSelection.PopulationAlleleFrequencyDistanceSelection"]], "method (pybrops.breed.prot.sel.unconstrainedpopulationallelefrequencydistanceselection.populationallelefrequencydistanceselection property)": [[216, "pybrops.breed.prot.sel.UnconstrainedPopulationAlleleFrequencyDistanceSelection.PopulationAlleleFrequencyDistanceSelection.method"]], "moalgo (pybrops.breed.prot.sel.unconstrainedpopulationallelefrequencydistanceselection.populationallelefrequencydistanceselection property)": [[216, "pybrops.breed.prot.sel.UnconstrainedPopulationAlleleFrequencyDistanceSelection.PopulationAlleleFrequencyDistanceSelection.moalgo"]], "ncross (pybrops.breed.prot.sel.unconstrainedpopulationallelefrequencydistanceselection.populationallelefrequencydistanceselection property)": [[216, "pybrops.breed.prot.sel.UnconstrainedPopulationAlleleFrequencyDistanceSelection.PopulationAlleleFrequencyDistanceSelection.ncross"]], "ndset_trans (pybrops.breed.prot.sel.unconstrainedpopulationallelefrequencydistanceselection.populationallelefrequencydistanceselection property)": [[216, "pybrops.breed.prot.sel.UnconstrainedPopulationAlleleFrequencyDistanceSelection.PopulationAlleleFrequencyDistanceSelection.ndset_trans"]], "ndset_trans_kwargs (pybrops.breed.prot.sel.unconstrainedpopulationallelefrequencydistanceselection.populationallelefrequencydistanceselection property)": [[216, "pybrops.breed.prot.sel.UnconstrainedPopulationAlleleFrequencyDistanceSelection.PopulationAlleleFrequencyDistanceSelection.ndset_trans_kwargs"]], "ndset_wt (pybrops.breed.prot.sel.unconstrainedpopulationallelefrequencydistanceselection.populationallelefrequencydistanceselection property)": [[216, "pybrops.breed.prot.sel.UnconstrainedPopulationAlleleFrequencyDistanceSelection.PopulationAlleleFrequencyDistanceSelection.ndset_wt"]], "nparent (pybrops.breed.prot.sel.unconstrainedpopulationallelefrequencydistanceselection.populationallelefrequencydistanceselection property)": [[216, "pybrops.breed.prot.sel.UnconstrainedPopulationAlleleFrequencyDistanceSelection.PopulationAlleleFrequencyDistanceSelection.nparent"]], "nprogeny (pybrops.breed.prot.sel.unconstrainedpopulationallelefrequencydistanceselection.populationallelefrequencydistanceselection property)": [[216, "pybrops.breed.prot.sel.UnconstrainedPopulationAlleleFrequencyDistanceSelection.PopulationAlleleFrequencyDistanceSelection.nprogeny"]], "objfn() (pybrops.breed.prot.sel.unconstrainedpopulationallelefrequencydistanceselection.populationallelefrequencydistanceselection method)": [[216, "pybrops.breed.prot.sel.UnconstrainedPopulationAlleleFrequencyDistanceSelection.PopulationAlleleFrequencyDistanceSelection.objfn"]], "objfn_static() (pybrops.breed.prot.sel.unconstrainedpopulationallelefrequencydistanceselection.populationallelefrequencydistanceselection static method)": [[216, "pybrops.breed.prot.sel.UnconstrainedPopulationAlleleFrequencyDistanceSelection.PopulationAlleleFrequencyDistanceSelection.objfn_static"]], "objfn_trans (pybrops.breed.prot.sel.unconstrainedpopulationallelefrequencydistanceselection.populationallelefrequencydistanceselection property)": [[216, "pybrops.breed.prot.sel.UnconstrainedPopulationAlleleFrequencyDistanceSelection.PopulationAlleleFrequencyDistanceSelection.objfn_trans"]], "objfn_trans_kwargs (pybrops.breed.prot.sel.unconstrainedpopulationallelefrequencydistanceselection.populationallelefrequencydistanceselection property)": [[216, "pybrops.breed.prot.sel.UnconstrainedPopulationAlleleFrequencyDistanceSelection.PopulationAlleleFrequencyDistanceSelection.objfn_trans_kwargs"]], "objfn_vec() (pybrops.breed.prot.sel.unconstrainedpopulationallelefrequencydistanceselection.populationallelefrequencydistanceselection method)": [[216, "pybrops.breed.prot.sel.UnconstrainedPopulationAlleleFrequencyDistanceSelection.PopulationAlleleFrequencyDistanceSelection.objfn_vec"]], "objfn_vec_static() (pybrops.breed.prot.sel.unconstrainedpopulationallelefrequencydistanceselection.populationallelefrequencydistanceselection static method)": [[216, "pybrops.breed.prot.sel.UnconstrainedPopulationAlleleFrequencyDistanceSelection.PopulationAlleleFrequencyDistanceSelection.objfn_vec_static"]], "objfn_wt (pybrops.breed.prot.sel.unconstrainedpopulationallelefrequencydistanceselection.populationallelefrequencydistanceselection property)": [[216, "pybrops.breed.prot.sel.UnconstrainedPopulationAlleleFrequencyDistanceSelection.PopulationAlleleFrequencyDistanceSelection.objfn_wt"]], "pareto() (pybrops.breed.prot.sel.unconstrainedpopulationallelefrequencydistanceselection.populationallelefrequencydistanceselection method)": [[216, "pybrops.breed.prot.sel.UnconstrainedPopulationAlleleFrequencyDistanceSelection.PopulationAlleleFrequencyDistanceSelection.pareto"]], "rng (pybrops.breed.prot.sel.unconstrainedpopulationallelefrequencydistanceselection.populationallelefrequencydistanceselection property)": [[216, "pybrops.breed.prot.sel.UnconstrainedPopulationAlleleFrequencyDistanceSelection.PopulationAlleleFrequencyDistanceSelection.rng"]], "select() (pybrops.breed.prot.sel.unconstrainedpopulationallelefrequencydistanceselection.populationallelefrequencydistanceselection method)": [[216, "pybrops.breed.prot.sel.UnconstrainedPopulationAlleleFrequencyDistanceSelection.PopulationAlleleFrequencyDistanceSelection.select"]], "soalgo (pybrops.breed.prot.sel.unconstrainedpopulationallelefrequencydistanceselection.populationallelefrequencydistanceselection property)": [[216, "pybrops.breed.prot.sel.UnconstrainedPopulationAlleleFrequencyDistanceSelection.PopulationAlleleFrequencyDistanceSelection.soalgo"]], "target (pybrops.breed.prot.sel.unconstrainedpopulationallelefrequencydistanceselection.populationallelefrequencydistanceselection property)": [[216, "pybrops.breed.prot.sel.UnconstrainedPopulationAlleleFrequencyDistanceSelection.PopulationAlleleFrequencyDistanceSelection.target"]], "weight (pybrops.breed.prot.sel.unconstrainedpopulationallelefrequencydistanceselection.populationallelefrequencydistanceselection property)": [[216, "pybrops.breed.prot.sel.UnconstrainedPopulationAlleleFrequencyDistanceSelection.PopulationAlleleFrequencyDistanceSelection.weight"]], "pybrops.breed.prot.sel.unconstrainedpopulationalleleunavailabilityselection": [[217, "module-pybrops.breed.prot.sel.UnconstrainedPopulationAlleleUnavailabilitySelection"]], "populationalleleunavailabilityselection (class in pybrops.breed.prot.sel.unconstrainedpopulationalleleunavailabilityselection)": [[218, "pybrops.breed.prot.sel.UnconstrainedPopulationAlleleUnavailabilitySelection.PopulationAlleleUnavailabilitySelection"]], "method (pybrops.breed.prot.sel.unconstrainedpopulationalleleunavailabilityselection.populationalleleunavailabilityselection property)": [[218, "pybrops.breed.prot.sel.UnconstrainedPopulationAlleleUnavailabilitySelection.PopulationAlleleUnavailabilitySelection.method"]], "moalgo (pybrops.breed.prot.sel.unconstrainedpopulationalleleunavailabilityselection.populationalleleunavailabilityselection property)": [[218, "pybrops.breed.prot.sel.UnconstrainedPopulationAlleleUnavailabilitySelection.PopulationAlleleUnavailabilitySelection.moalgo"]], "ncross (pybrops.breed.prot.sel.unconstrainedpopulationalleleunavailabilityselection.populationalleleunavailabilityselection property)": [[218, "pybrops.breed.prot.sel.UnconstrainedPopulationAlleleUnavailabilitySelection.PopulationAlleleUnavailabilitySelection.ncross"]], "ndset_trans (pybrops.breed.prot.sel.unconstrainedpopulationalleleunavailabilityselection.populationalleleunavailabilityselection property)": [[218, "pybrops.breed.prot.sel.UnconstrainedPopulationAlleleUnavailabilitySelection.PopulationAlleleUnavailabilitySelection.ndset_trans"]], "ndset_trans_kwargs (pybrops.breed.prot.sel.unconstrainedpopulationalleleunavailabilityselection.populationalleleunavailabilityselection property)": [[218, "pybrops.breed.prot.sel.UnconstrainedPopulationAlleleUnavailabilitySelection.PopulationAlleleUnavailabilitySelection.ndset_trans_kwargs"]], "ndset_wt (pybrops.breed.prot.sel.unconstrainedpopulationalleleunavailabilityselection.populationalleleunavailabilityselection property)": [[218, "pybrops.breed.prot.sel.UnconstrainedPopulationAlleleUnavailabilitySelection.PopulationAlleleUnavailabilitySelection.ndset_wt"]], "nparent (pybrops.breed.prot.sel.unconstrainedpopulationalleleunavailabilityselection.populationalleleunavailabilityselection property)": [[218, "pybrops.breed.prot.sel.UnconstrainedPopulationAlleleUnavailabilitySelection.PopulationAlleleUnavailabilitySelection.nparent"]], "nprogeny (pybrops.breed.prot.sel.unconstrainedpopulationalleleunavailabilityselection.populationalleleunavailabilityselection property)": [[218, "pybrops.breed.prot.sel.UnconstrainedPopulationAlleleUnavailabilitySelection.PopulationAlleleUnavailabilitySelection.nprogeny"]], "objfn() (pybrops.breed.prot.sel.unconstrainedpopulationalleleunavailabilityselection.populationalleleunavailabilityselection method)": [[218, "pybrops.breed.prot.sel.UnconstrainedPopulationAlleleUnavailabilitySelection.PopulationAlleleUnavailabilitySelection.objfn"]], "objfn_static() (pybrops.breed.prot.sel.unconstrainedpopulationalleleunavailabilityselection.populationalleleunavailabilityselection static method)": [[218, "pybrops.breed.prot.sel.UnconstrainedPopulationAlleleUnavailabilitySelection.PopulationAlleleUnavailabilitySelection.objfn_static"]], "objfn_trans (pybrops.breed.prot.sel.unconstrainedpopulationalleleunavailabilityselection.populationalleleunavailabilityselection property)": [[218, "pybrops.breed.prot.sel.UnconstrainedPopulationAlleleUnavailabilitySelection.PopulationAlleleUnavailabilitySelection.objfn_trans"]], "objfn_trans_kwargs (pybrops.breed.prot.sel.unconstrainedpopulationalleleunavailabilityselection.populationalleleunavailabilityselection property)": [[218, "pybrops.breed.prot.sel.UnconstrainedPopulationAlleleUnavailabilitySelection.PopulationAlleleUnavailabilitySelection.objfn_trans_kwargs"]], "objfn_vec() (pybrops.breed.prot.sel.unconstrainedpopulationalleleunavailabilityselection.populationalleleunavailabilityselection method)": [[218, "pybrops.breed.prot.sel.UnconstrainedPopulationAlleleUnavailabilitySelection.PopulationAlleleUnavailabilitySelection.objfn_vec"]], "objfn_vec_static() (pybrops.breed.prot.sel.unconstrainedpopulationalleleunavailabilityselection.populationalleleunavailabilityselection static method)": [[218, "pybrops.breed.prot.sel.UnconstrainedPopulationAlleleUnavailabilitySelection.PopulationAlleleUnavailabilitySelection.objfn_vec_static"]], "objfn_wt (pybrops.breed.prot.sel.unconstrainedpopulationalleleunavailabilityselection.populationalleleunavailabilityselection property)": [[218, "pybrops.breed.prot.sel.UnconstrainedPopulationAlleleUnavailabilitySelection.PopulationAlleleUnavailabilitySelection.objfn_wt"]], "pareto() (pybrops.breed.prot.sel.unconstrainedpopulationalleleunavailabilityselection.populationalleleunavailabilityselection method)": [[218, "pybrops.breed.prot.sel.UnconstrainedPopulationAlleleUnavailabilitySelection.PopulationAlleleUnavailabilitySelection.pareto"]], "rng (pybrops.breed.prot.sel.unconstrainedpopulationalleleunavailabilityselection.populationalleleunavailabilityselection property)": [[218, "pybrops.breed.prot.sel.UnconstrainedPopulationAlleleUnavailabilitySelection.PopulationAlleleUnavailabilitySelection.rng"]], "select() (pybrops.breed.prot.sel.unconstrainedpopulationalleleunavailabilityselection.populationalleleunavailabilityselection method)": [[218, "pybrops.breed.prot.sel.UnconstrainedPopulationAlleleUnavailabilitySelection.PopulationAlleleUnavailabilitySelection.select"]], "soalgo (pybrops.breed.prot.sel.unconstrainedpopulationalleleunavailabilityselection.populationalleleunavailabilityselection property)": [[218, "pybrops.breed.prot.sel.UnconstrainedPopulationAlleleUnavailabilitySelection.PopulationAlleleUnavailabilitySelection.soalgo"]], "target (pybrops.breed.prot.sel.unconstrainedpopulationalleleunavailabilityselection.populationalleleunavailabilityselection property)": [[218, "pybrops.breed.prot.sel.UnconstrainedPopulationAlleleUnavailabilitySelection.PopulationAlleleUnavailabilitySelection.target"]], "weight (pybrops.breed.prot.sel.unconstrainedpopulationalleleunavailabilityselection.populationalleleunavailabilityselection property)": [[218, "pybrops.breed.prot.sel.UnconstrainedPopulationAlleleUnavailabilitySelection.PopulationAlleleUnavailabilitySelection.weight"]], "pybrops.breed.prot.sel.unconstrainedselectionprotocol": [[219, "module-pybrops.breed.prot.sel.UnconstrainedSelectionProtocol"]], "unconstrainedselectionprotocol (class in pybrops.breed.prot.sel.unconstrainedselectionprotocol)": [[220, "pybrops.breed.prot.sel.UnconstrainedSelectionProtocol.UnconstrainedSelectionProtocol"]], "objfn() (pybrops.breed.prot.sel.unconstrainedselectionprotocol.unconstrainedselectionprotocol method)": [[220, "pybrops.breed.prot.sel.UnconstrainedSelectionProtocol.UnconstrainedSelectionProtocol.objfn"]], "objfn_static() (pybrops.breed.prot.sel.unconstrainedselectionprotocol.unconstrainedselectionprotocol static method)": [[220, "pybrops.breed.prot.sel.UnconstrainedSelectionProtocol.UnconstrainedSelectionProtocol.objfn_static"]], "objfn_vec() (pybrops.breed.prot.sel.unconstrainedselectionprotocol.unconstrainedselectionprotocol method)": [[220, "pybrops.breed.prot.sel.UnconstrainedSelectionProtocol.UnconstrainedSelectionProtocol.objfn_vec"]], "objfn_vec_static() (pybrops.breed.prot.sel.unconstrainedselectionprotocol.unconstrainedselectionprotocol static method)": [[220, "pybrops.breed.prot.sel.UnconstrainedSelectionProtocol.UnconstrainedSelectionProtocol.objfn_vec_static"]], "pareto() (pybrops.breed.prot.sel.unconstrainedselectionprotocol.unconstrainedselectionprotocol method)": [[220, "pybrops.breed.prot.sel.UnconstrainedSelectionProtocol.UnconstrainedSelectionProtocol.pareto"]], "select() (pybrops.breed.prot.sel.unconstrainedselectionprotocol.unconstrainedselectionprotocol method)": [[220, "pybrops.breed.prot.sel.UnconstrainedSelectionProtocol.UnconstrainedSelectionProtocol.select"]], "check_is_selectionprotocol() (in module pybrops.breed.prot.sel.unconstrainedselectionprotocol)": [[221, "pybrops.breed.prot.sel.UnconstrainedSelectionProtocol.check_is_SelectionProtocol"]], "pybrops.breed.prot.sel.usefulnesscriterionselection": [[222, "module-pybrops.breed.prot.sel.UsefulnessCriterionSelection"]], "usefulnesscriterionbinaryselection (class in pybrops.breed.prot.sel.usefulnesscriterionselection)": [[223, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionBinarySelection"]], "eqcv_trans (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionbinaryselection property)": [[223, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionBinarySelection.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionbinaryselection property)": [[223, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionBinarySelection.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionbinaryselection property)": [[223, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionBinarySelection.eqcv_wt"]], "gmapfn (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionbinaryselection property)": [[223, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionBinarySelection.gmapfn"]], "ineqcv_trans (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionbinaryselection property)": [[223, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionBinarySelection.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionbinaryselection property)": [[223, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionBinarySelection.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionbinaryselection property)": [[223, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionBinarySelection.ineqcv_wt"]], "moalgo (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionbinaryselection property)": [[223, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionBinarySelection.moalgo"]], "mosolve() (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionbinaryselection method)": [[223, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionBinarySelection.mosolve"]], "ncross (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionbinaryselection property)": [[223, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionBinarySelection.ncross"]], "ndset_trans (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionbinaryselection property)": [[223, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionBinarySelection.ndset_trans"]], "ndset_trans_kwargs (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionbinaryselection property)": [[223, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionBinarySelection.ndset_trans_kwargs"]], "ndset_wt (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionbinaryselection property)": [[223, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionBinarySelection.ndset_wt"]], "neqcv (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionbinaryselection property)": [[223, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionBinarySelection.neqcv"]], "nineqcv (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionbinaryselection property)": [[223, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionBinarySelection.nineqcv"]], "nmating (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionbinaryselection property)": [[223, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionBinarySelection.nmating"]], "nobj (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionbinaryselection property)": [[223, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionBinarySelection.nobj"]], "nparent (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionbinaryselection property)": [[223, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionBinarySelection.nparent"]], "nprogeny (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionbinaryselection property)": [[223, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionBinarySelection.nprogeny"]], "nself (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionbinaryselection property)": [[223, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionBinarySelection.nself"]], "nselindiv (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionbinaryselection property)": [[223, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionBinarySelection.nselindiv"]], "ntrait (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionbinaryselection property)": [[223, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionBinarySelection.ntrait"]], "obj_trans (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionbinaryselection property)": [[223, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionBinarySelection.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionbinaryselection property)": [[223, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionBinarySelection.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionbinaryselection property)": [[223, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionBinarySelection.obj_wt"]], "problem() (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionbinaryselection method)": [[223, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionBinarySelection.problem"]], "rng (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionbinaryselection property)": [[223, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionBinarySelection.rng"]], "select() (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionbinaryselection method)": [[223, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionBinarySelection.select"]], "selection_intensity (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionbinaryselection property)": [[223, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionBinarySelection.selection_intensity"]], "soalgo (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionbinaryselection property)": [[223, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionBinarySelection.soalgo"]], "sosolve() (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionbinaryselection method)": [[223, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionBinarySelection.sosolve"]], "unique_parents (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionbinaryselection property)": [[223, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionBinarySelection.unique_parents"]], "upper_percentile (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionbinaryselection property)": [[223, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionBinarySelection.upper_percentile"]], "vmatfcty (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionbinaryselection property)": [[223, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionBinarySelection.vmatfcty"]], "usefulnesscriterionintegerselection (class in pybrops.breed.prot.sel.usefulnesscriterionselection)": [[224, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionIntegerSelection"]], "eqcv_trans (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionintegerselection property)": [[224, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionIntegerSelection.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionintegerselection property)": [[224, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionIntegerSelection.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionintegerselection property)": [[224, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionIntegerSelection.eqcv_wt"]], "gmapfn (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionintegerselection property)": [[224, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionIntegerSelection.gmapfn"]], "ineqcv_trans (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionintegerselection property)": [[224, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionIntegerSelection.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionintegerselection property)": [[224, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionIntegerSelection.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionintegerselection property)": [[224, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionIntegerSelection.ineqcv_wt"]], "moalgo (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionintegerselection property)": [[224, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionIntegerSelection.moalgo"]], "mosolve() (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionintegerselection method)": [[224, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionIntegerSelection.mosolve"]], "ncross (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionintegerselection property)": [[224, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionIntegerSelection.ncross"]], "ndset_trans (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionintegerselection property)": [[224, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionIntegerSelection.ndset_trans"]], "ndset_trans_kwargs (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionintegerselection property)": [[224, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionIntegerSelection.ndset_trans_kwargs"]], "ndset_wt (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionintegerselection property)": [[224, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionIntegerSelection.ndset_wt"]], "neqcv (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionintegerselection property)": [[224, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionIntegerSelection.neqcv"]], "nineqcv (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionintegerselection property)": [[224, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionIntegerSelection.nineqcv"]], "nmating (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionintegerselection property)": [[224, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionIntegerSelection.nmating"]], "nobj (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionintegerselection property)": [[224, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionIntegerSelection.nobj"]], "nparent (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionintegerselection property)": [[224, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionIntegerSelection.nparent"]], "nprogeny (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionintegerselection property)": [[224, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionIntegerSelection.nprogeny"]], "nself (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionintegerselection property)": [[224, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionIntegerSelection.nself"]], "nselindiv (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionintegerselection property)": [[224, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionIntegerSelection.nselindiv"]], "ntrait (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionintegerselection property)": [[224, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionIntegerSelection.ntrait"]], "obj_trans (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionintegerselection property)": [[224, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionIntegerSelection.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionintegerselection property)": [[224, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionIntegerSelection.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionintegerselection property)": [[224, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionIntegerSelection.obj_wt"]], "problem() (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionintegerselection method)": [[224, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionIntegerSelection.problem"]], "rng (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionintegerselection property)": [[224, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionIntegerSelection.rng"]], "select() (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionintegerselection method)": [[224, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionIntegerSelection.select"]], "selection_intensity (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionintegerselection property)": [[224, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionIntegerSelection.selection_intensity"]], "soalgo (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionintegerselection property)": [[224, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionIntegerSelection.soalgo"]], "sosolve() (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionintegerselection method)": [[224, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionIntegerSelection.sosolve"]], "unique_parents (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionintegerselection property)": [[224, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionIntegerSelection.unique_parents"]], "upper_percentile (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionintegerselection property)": [[224, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionIntegerSelection.upper_percentile"]], "vmatfcty (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionintegerselection property)": [[224, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionIntegerSelection.vmatfcty"]], "usefulnesscriterionrealselection (class in pybrops.breed.prot.sel.usefulnesscriterionselection)": [[225, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionRealSelection"]], "eqcv_trans (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionrealselection property)": [[225, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionRealSelection.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionrealselection property)": [[225, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionRealSelection.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionrealselection property)": [[225, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionRealSelection.eqcv_wt"]], "gmapfn (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionrealselection property)": [[225, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionRealSelection.gmapfn"]], "ineqcv_trans (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionrealselection property)": [[225, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionRealSelection.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionrealselection property)": [[225, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionRealSelection.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionrealselection property)": [[225, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionRealSelection.ineqcv_wt"]], "moalgo (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionrealselection property)": [[225, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionRealSelection.moalgo"]], "mosolve() (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionrealselection method)": [[225, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionRealSelection.mosolve"]], "ncross (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionrealselection property)": [[225, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionRealSelection.ncross"]], "ndset_trans (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionrealselection property)": [[225, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionRealSelection.ndset_trans"]], "ndset_trans_kwargs (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionrealselection property)": [[225, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionRealSelection.ndset_trans_kwargs"]], "ndset_wt (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionrealselection property)": [[225, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionRealSelection.ndset_wt"]], "neqcv (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionrealselection property)": [[225, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionRealSelection.neqcv"]], "nineqcv (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionrealselection property)": [[225, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionRealSelection.nineqcv"]], "nmating (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionrealselection property)": [[225, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionRealSelection.nmating"]], "nobj (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionrealselection property)": [[225, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionRealSelection.nobj"]], "nparent (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionrealselection property)": [[225, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionRealSelection.nparent"]], "nprogeny (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionrealselection property)": [[225, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionRealSelection.nprogeny"]], "nself (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionrealselection property)": [[225, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionRealSelection.nself"]], "nselindiv (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionrealselection property)": [[225, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionRealSelection.nselindiv"]], "ntrait (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionrealselection property)": [[225, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionRealSelection.ntrait"]], "obj_trans (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionrealselection property)": [[225, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionRealSelection.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionrealselection property)": [[225, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionRealSelection.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionrealselection property)": [[225, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionRealSelection.obj_wt"]], "problem() (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionrealselection method)": [[225, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionRealSelection.problem"]], "rng (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionrealselection property)": [[225, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionRealSelection.rng"]], "select() (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionrealselection method)": [[225, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionRealSelection.select"]], "selection_intensity (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionrealselection property)": [[225, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionRealSelection.selection_intensity"]], "soalgo (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionrealselection property)": [[225, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionRealSelection.soalgo"]], "sosolve() (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionrealselection method)": [[225, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionRealSelection.sosolve"]], "unique_parents (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionrealselection property)": [[225, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionRealSelection.unique_parents"]], "upper_percentile (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionrealselection property)": [[225, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionRealSelection.upper_percentile"]], "vmatfcty (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionrealselection property)": [[225, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionRealSelection.vmatfcty"]], "usefulnesscriterionselectionmixin (class in pybrops.breed.prot.sel.usefulnesscriterionselection)": [[226, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionSelectionMixin"]], "gmapfn (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionselectionmixin property)": [[226, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionSelectionMixin.gmapfn"]], "nself (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionselectionmixin property)": [[226, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionSelectionMixin.nself"]], "ntrait (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionselectionmixin property)": [[226, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionSelectionMixin.ntrait"]], "selection_intensity (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionselectionmixin property)": [[226, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionSelectionMixin.selection_intensity"]], "unique_parents (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionselectionmixin property)": [[226, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionSelectionMixin.unique_parents"]], "upper_percentile (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionselectionmixin property)": [[226, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionSelectionMixin.upper_percentile"]], "vmatfcty (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionselectionmixin property)": [[226, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionSelectionMixin.vmatfcty"]], "usefulnesscriterionsubsetselection (class in pybrops.breed.prot.sel.usefulnesscriterionselection)": [[227, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionSubsetSelection"]], "eqcv_trans (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionsubsetselection property)": [[227, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionSubsetSelection.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionsubsetselection property)": [[227, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionSubsetSelection.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionsubsetselection property)": [[227, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionSubsetSelection.eqcv_wt"]], "gmapfn (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionsubsetselection property)": [[227, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionSubsetSelection.gmapfn"]], "ineqcv_trans (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionsubsetselection property)": [[227, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionSubsetSelection.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionsubsetselection property)": [[227, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionSubsetSelection.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionsubsetselection property)": [[227, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionSubsetSelection.ineqcv_wt"]], "moalgo (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionsubsetselection property)": [[227, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionSubsetSelection.moalgo"]], "mosolve() (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionsubsetselection method)": [[227, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionSubsetSelection.mosolve"]], "ncross (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionsubsetselection property)": [[227, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionSubsetSelection.ncross"]], "ndset_trans (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionsubsetselection property)": [[227, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionSubsetSelection.ndset_trans"]], "ndset_trans_kwargs (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionsubsetselection property)": [[227, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionSubsetSelection.ndset_trans_kwargs"]], "ndset_wt (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionsubsetselection property)": [[227, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionSubsetSelection.ndset_wt"]], "neqcv (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionsubsetselection property)": [[227, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionSubsetSelection.neqcv"]], "nineqcv (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionsubsetselection property)": [[227, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionSubsetSelection.nineqcv"]], "nmating (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionsubsetselection property)": [[227, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionSubsetSelection.nmating"]], "nobj (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionsubsetselection property)": [[227, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionSubsetSelection.nobj"]], "nparent (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionsubsetselection property)": [[227, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionSubsetSelection.nparent"]], "nprogeny (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionsubsetselection property)": [[227, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionSubsetSelection.nprogeny"]], "nself (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionsubsetselection property)": [[227, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionSubsetSelection.nself"]], "nselindiv (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionsubsetselection property)": [[227, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionSubsetSelection.nselindiv"]], "ntrait (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionsubsetselection property)": [[227, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionSubsetSelection.ntrait"]], "obj_trans (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionsubsetselection property)": [[227, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionSubsetSelection.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionsubsetselection property)": [[227, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionSubsetSelection.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionsubsetselection property)": [[227, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionSubsetSelection.obj_wt"]], "problem() (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionsubsetselection method)": [[227, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionSubsetSelection.problem"]], "rng (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionsubsetselection property)": [[227, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionSubsetSelection.rng"]], "select() (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionsubsetselection method)": [[227, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionSubsetSelection.select"]], "selection_intensity (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionsubsetselection property)": [[227, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionSubsetSelection.selection_intensity"]], "soalgo (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionsubsetselection property)": [[227, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionSubsetSelection.soalgo"]], "sosolve() (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionsubsetselection method)": [[227, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionSubsetSelection.sosolve"]], "unique_parents (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionsubsetselection property)": [[227, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionSubsetSelection.unique_parents"]], "upper_percentile (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionsubsetselection property)": [[227, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionSubsetSelection.upper_percentile"]], "vmatfcty (pybrops.breed.prot.sel.usefulnesscriterionselection.usefulnesscriterionsubsetselection property)": [[227, "pybrops.breed.prot.sel.UsefulnessCriterionSelection.UsefulnessCriterionSubsetSelection.vmatfcty"]], "pybrops.breed.prot.sel.weightedgenomicselection": [[228, "module-pybrops.breed.prot.sel.WeightedGenomicSelection"]], "weightedgenomicbinaryselection (class in pybrops.breed.prot.sel.weightedgenomicselection)": [[229, "pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicBinarySelection"]], "alpha (pybrops.breed.prot.sel.weightedgenomicselection.weightedgenomicbinaryselection property)": [[229, "pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicBinarySelection.alpha"]], "eqcv_trans (pybrops.breed.prot.sel.weightedgenomicselection.weightedgenomicbinaryselection property)": [[229, "pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicBinarySelection.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.weightedgenomicselection.weightedgenomicbinaryselection property)": [[229, "pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicBinarySelection.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.weightedgenomicselection.weightedgenomicbinaryselection property)": [[229, "pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicBinarySelection.eqcv_wt"]], "ineqcv_trans (pybrops.breed.prot.sel.weightedgenomicselection.weightedgenomicbinaryselection property)": [[229, "pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicBinarySelection.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.weightedgenomicselection.weightedgenomicbinaryselection property)": [[229, "pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicBinarySelection.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.weightedgenomicselection.weightedgenomicbinaryselection property)": [[229, "pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicBinarySelection.ineqcv_wt"]], "moalgo (pybrops.breed.prot.sel.weightedgenomicselection.weightedgenomicbinaryselection property)": [[229, "pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicBinarySelection.moalgo"]], "mosolve() (pybrops.breed.prot.sel.weightedgenomicselection.weightedgenomicbinaryselection method)": [[229, "pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicBinarySelection.mosolve"]], "ncross (pybrops.breed.prot.sel.weightedgenomicselection.weightedgenomicbinaryselection property)": [[229, "pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicBinarySelection.ncross"]], "ndset_trans (pybrops.breed.prot.sel.weightedgenomicselection.weightedgenomicbinaryselection property)": [[229, "pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicBinarySelection.ndset_trans"]], "ndset_trans_kwargs (pybrops.breed.prot.sel.weightedgenomicselection.weightedgenomicbinaryselection property)": [[229, "pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicBinarySelection.ndset_trans_kwargs"]], "ndset_wt (pybrops.breed.prot.sel.weightedgenomicselection.weightedgenomicbinaryselection property)": [[229, "pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicBinarySelection.ndset_wt"]], "neqcv (pybrops.breed.prot.sel.weightedgenomicselection.weightedgenomicbinaryselection property)": [[229, "pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicBinarySelection.neqcv"]], "nineqcv (pybrops.breed.prot.sel.weightedgenomicselection.weightedgenomicbinaryselection property)": [[229, "pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicBinarySelection.nineqcv"]], "nmating (pybrops.breed.prot.sel.weightedgenomicselection.weightedgenomicbinaryselection property)": [[229, "pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicBinarySelection.nmating"]], "nobj (pybrops.breed.prot.sel.weightedgenomicselection.weightedgenomicbinaryselection property)": [[229, "pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicBinarySelection.nobj"]], "nparent (pybrops.breed.prot.sel.weightedgenomicselection.weightedgenomicbinaryselection property)": [[229, "pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicBinarySelection.nparent"]], "nprogeny (pybrops.breed.prot.sel.weightedgenomicselection.weightedgenomicbinaryselection property)": [[229, "pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicBinarySelection.nprogeny"]], "nselindiv (pybrops.breed.prot.sel.weightedgenomicselection.weightedgenomicbinaryselection property)": [[229, "pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicBinarySelection.nselindiv"]], "ntrait (pybrops.breed.prot.sel.weightedgenomicselection.weightedgenomicbinaryselection property)": [[229, "pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicBinarySelection.ntrait"]], "obj_trans (pybrops.breed.prot.sel.weightedgenomicselection.weightedgenomicbinaryselection property)": [[229, "pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicBinarySelection.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.weightedgenomicselection.weightedgenomicbinaryselection property)": [[229, "pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicBinarySelection.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.weightedgenomicselection.weightedgenomicbinaryselection property)": [[229, "pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicBinarySelection.obj_wt"]], "problem() (pybrops.breed.prot.sel.weightedgenomicselection.weightedgenomicbinaryselection method)": [[229, "pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicBinarySelection.problem"]], "rng (pybrops.breed.prot.sel.weightedgenomicselection.weightedgenomicbinaryselection property)": [[229, "pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicBinarySelection.rng"]], "select() (pybrops.breed.prot.sel.weightedgenomicselection.weightedgenomicbinaryselection method)": [[229, "pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicBinarySelection.select"]], "soalgo (pybrops.breed.prot.sel.weightedgenomicselection.weightedgenomicbinaryselection property)": [[229, "pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicBinarySelection.soalgo"]], "sosolve() (pybrops.breed.prot.sel.weightedgenomicselection.weightedgenomicbinaryselection method)": [[229, "pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicBinarySelection.sosolve"]], "weightedgenomicintegerselection (class in pybrops.breed.prot.sel.weightedgenomicselection)": [[230, "pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicIntegerSelection"]], "alpha (pybrops.breed.prot.sel.weightedgenomicselection.weightedgenomicintegerselection property)": [[230, "pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicIntegerSelection.alpha"]], "eqcv_trans (pybrops.breed.prot.sel.weightedgenomicselection.weightedgenomicintegerselection property)": [[230, "pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicIntegerSelection.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.weightedgenomicselection.weightedgenomicintegerselection property)": [[230, "pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicIntegerSelection.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.weightedgenomicselection.weightedgenomicintegerselection property)": [[230, "pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicIntegerSelection.eqcv_wt"]], "ineqcv_trans (pybrops.breed.prot.sel.weightedgenomicselection.weightedgenomicintegerselection property)": [[230, "pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicIntegerSelection.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.weightedgenomicselection.weightedgenomicintegerselection property)": [[230, "pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicIntegerSelection.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.weightedgenomicselection.weightedgenomicintegerselection property)": [[230, "pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicIntegerSelection.ineqcv_wt"]], "moalgo (pybrops.breed.prot.sel.weightedgenomicselection.weightedgenomicintegerselection property)": [[230, "pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicIntegerSelection.moalgo"]], "mosolve() (pybrops.breed.prot.sel.weightedgenomicselection.weightedgenomicintegerselection method)": [[230, "pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicIntegerSelection.mosolve"]], "ncross (pybrops.breed.prot.sel.weightedgenomicselection.weightedgenomicintegerselection property)": [[230, "pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicIntegerSelection.ncross"]], "ndset_trans (pybrops.breed.prot.sel.weightedgenomicselection.weightedgenomicintegerselection property)": [[230, "pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicIntegerSelection.ndset_trans"]], "ndset_trans_kwargs (pybrops.breed.prot.sel.weightedgenomicselection.weightedgenomicintegerselection property)": [[230, "pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicIntegerSelection.ndset_trans_kwargs"]], "ndset_wt (pybrops.breed.prot.sel.weightedgenomicselection.weightedgenomicintegerselection property)": [[230, "pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicIntegerSelection.ndset_wt"]], "neqcv (pybrops.breed.prot.sel.weightedgenomicselection.weightedgenomicintegerselection property)": [[230, "pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicIntegerSelection.neqcv"]], "nineqcv (pybrops.breed.prot.sel.weightedgenomicselection.weightedgenomicintegerselection property)": [[230, "pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicIntegerSelection.nineqcv"]], "nmating (pybrops.breed.prot.sel.weightedgenomicselection.weightedgenomicintegerselection property)": [[230, "pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicIntegerSelection.nmating"]], "nobj (pybrops.breed.prot.sel.weightedgenomicselection.weightedgenomicintegerselection property)": [[230, "pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicIntegerSelection.nobj"]], "nparent (pybrops.breed.prot.sel.weightedgenomicselection.weightedgenomicintegerselection property)": [[230, "pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicIntegerSelection.nparent"]], "nprogeny (pybrops.breed.prot.sel.weightedgenomicselection.weightedgenomicintegerselection property)": [[230, "pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicIntegerSelection.nprogeny"]], "nselindiv (pybrops.breed.prot.sel.weightedgenomicselection.weightedgenomicintegerselection property)": [[230, "pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicIntegerSelection.nselindiv"]], "ntrait (pybrops.breed.prot.sel.weightedgenomicselection.weightedgenomicintegerselection property)": [[230, "pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicIntegerSelection.ntrait"]], "obj_trans (pybrops.breed.prot.sel.weightedgenomicselection.weightedgenomicintegerselection property)": [[230, "pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicIntegerSelection.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.weightedgenomicselection.weightedgenomicintegerselection property)": [[230, "pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicIntegerSelection.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.weightedgenomicselection.weightedgenomicintegerselection property)": [[230, "pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicIntegerSelection.obj_wt"]], "problem() (pybrops.breed.prot.sel.weightedgenomicselection.weightedgenomicintegerselection method)": [[230, "pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicIntegerSelection.problem"]], "rng (pybrops.breed.prot.sel.weightedgenomicselection.weightedgenomicintegerselection property)": [[230, "pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicIntegerSelection.rng"]], "select() (pybrops.breed.prot.sel.weightedgenomicselection.weightedgenomicintegerselection method)": [[230, "pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicIntegerSelection.select"]], "soalgo (pybrops.breed.prot.sel.weightedgenomicselection.weightedgenomicintegerselection property)": [[230, "pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicIntegerSelection.soalgo"]], "sosolve() (pybrops.breed.prot.sel.weightedgenomicselection.weightedgenomicintegerselection method)": [[230, "pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicIntegerSelection.sosolve"]], "weightedgenomicrealselection (class in pybrops.breed.prot.sel.weightedgenomicselection)": [[231, "pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicRealSelection"]], "alpha (pybrops.breed.prot.sel.weightedgenomicselection.weightedgenomicrealselection property)": [[231, "pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicRealSelection.alpha"]], "eqcv_trans (pybrops.breed.prot.sel.weightedgenomicselection.weightedgenomicrealselection property)": [[231, "pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicRealSelection.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.weightedgenomicselection.weightedgenomicrealselection property)": [[231, "pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicRealSelection.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.weightedgenomicselection.weightedgenomicrealselection property)": [[231, "pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicRealSelection.eqcv_wt"]], "ineqcv_trans (pybrops.breed.prot.sel.weightedgenomicselection.weightedgenomicrealselection property)": [[231, "pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicRealSelection.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.weightedgenomicselection.weightedgenomicrealselection property)": [[231, "pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicRealSelection.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.weightedgenomicselection.weightedgenomicrealselection property)": [[231, "pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicRealSelection.ineqcv_wt"]], "moalgo (pybrops.breed.prot.sel.weightedgenomicselection.weightedgenomicrealselection property)": [[231, "pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicRealSelection.moalgo"]], "mosolve() (pybrops.breed.prot.sel.weightedgenomicselection.weightedgenomicrealselection method)": [[231, "pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicRealSelection.mosolve"]], "ncross (pybrops.breed.prot.sel.weightedgenomicselection.weightedgenomicrealselection property)": [[231, "pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicRealSelection.ncross"]], "ndset_trans (pybrops.breed.prot.sel.weightedgenomicselection.weightedgenomicrealselection property)": [[231, "pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicRealSelection.ndset_trans"]], "ndset_trans_kwargs (pybrops.breed.prot.sel.weightedgenomicselection.weightedgenomicrealselection property)": [[231, "pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicRealSelection.ndset_trans_kwargs"]], "ndset_wt (pybrops.breed.prot.sel.weightedgenomicselection.weightedgenomicrealselection property)": [[231, "pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicRealSelection.ndset_wt"]], "neqcv (pybrops.breed.prot.sel.weightedgenomicselection.weightedgenomicrealselection property)": [[231, "pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicRealSelection.neqcv"]], "nineqcv (pybrops.breed.prot.sel.weightedgenomicselection.weightedgenomicrealselection property)": [[231, "pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicRealSelection.nineqcv"]], "nmating (pybrops.breed.prot.sel.weightedgenomicselection.weightedgenomicrealselection property)": [[231, "pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicRealSelection.nmating"]], "nobj (pybrops.breed.prot.sel.weightedgenomicselection.weightedgenomicrealselection property)": [[231, "pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicRealSelection.nobj"]], "nparent (pybrops.breed.prot.sel.weightedgenomicselection.weightedgenomicrealselection property)": [[231, "pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicRealSelection.nparent"]], "nprogeny (pybrops.breed.prot.sel.weightedgenomicselection.weightedgenomicrealselection property)": [[231, "pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicRealSelection.nprogeny"]], "nselindiv (pybrops.breed.prot.sel.weightedgenomicselection.weightedgenomicrealselection property)": [[231, "pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicRealSelection.nselindiv"]], "ntrait (pybrops.breed.prot.sel.weightedgenomicselection.weightedgenomicrealselection property)": [[231, "pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicRealSelection.ntrait"]], "obj_trans (pybrops.breed.prot.sel.weightedgenomicselection.weightedgenomicrealselection property)": [[231, "pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicRealSelection.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.weightedgenomicselection.weightedgenomicrealselection property)": [[231, "pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicRealSelection.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.weightedgenomicselection.weightedgenomicrealselection property)": [[231, "pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicRealSelection.obj_wt"]], "problem() (pybrops.breed.prot.sel.weightedgenomicselection.weightedgenomicrealselection method)": [[231, "pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicRealSelection.problem"]], "rng (pybrops.breed.prot.sel.weightedgenomicselection.weightedgenomicrealselection property)": [[231, "pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicRealSelection.rng"]], "select() (pybrops.breed.prot.sel.weightedgenomicselection.weightedgenomicrealselection method)": [[231, "pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicRealSelection.select"]], "soalgo (pybrops.breed.prot.sel.weightedgenomicselection.weightedgenomicrealselection property)": [[231, "pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicRealSelection.soalgo"]], "sosolve() (pybrops.breed.prot.sel.weightedgenomicselection.weightedgenomicrealselection method)": [[231, "pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicRealSelection.sosolve"]], "weightedgenomicsubsetselection (class in pybrops.breed.prot.sel.weightedgenomicselection)": [[232, "pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicSubsetSelection"]], "alpha (pybrops.breed.prot.sel.weightedgenomicselection.weightedgenomicsubsetselection property)": [[232, "pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicSubsetSelection.alpha"]], "eqcv_trans (pybrops.breed.prot.sel.weightedgenomicselection.weightedgenomicsubsetselection property)": [[232, "pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicSubsetSelection.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.weightedgenomicselection.weightedgenomicsubsetselection property)": [[232, "pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicSubsetSelection.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.weightedgenomicselection.weightedgenomicsubsetselection property)": [[232, "pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicSubsetSelection.eqcv_wt"]], "ineqcv_trans (pybrops.breed.prot.sel.weightedgenomicselection.weightedgenomicsubsetselection property)": [[232, "pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicSubsetSelection.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.weightedgenomicselection.weightedgenomicsubsetselection property)": [[232, "pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicSubsetSelection.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.weightedgenomicselection.weightedgenomicsubsetselection property)": [[232, "pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicSubsetSelection.ineqcv_wt"]], "moalgo (pybrops.breed.prot.sel.weightedgenomicselection.weightedgenomicsubsetselection property)": [[232, "pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicSubsetSelection.moalgo"]], "mosolve() (pybrops.breed.prot.sel.weightedgenomicselection.weightedgenomicsubsetselection method)": [[232, "pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicSubsetSelection.mosolve"]], "ncross (pybrops.breed.prot.sel.weightedgenomicselection.weightedgenomicsubsetselection property)": [[232, "pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicSubsetSelection.ncross"]], "ndset_trans (pybrops.breed.prot.sel.weightedgenomicselection.weightedgenomicsubsetselection property)": [[232, "pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicSubsetSelection.ndset_trans"]], "ndset_trans_kwargs (pybrops.breed.prot.sel.weightedgenomicselection.weightedgenomicsubsetselection property)": [[232, "pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicSubsetSelection.ndset_trans_kwargs"]], "ndset_wt (pybrops.breed.prot.sel.weightedgenomicselection.weightedgenomicsubsetselection property)": [[232, "pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicSubsetSelection.ndset_wt"]], "neqcv (pybrops.breed.prot.sel.weightedgenomicselection.weightedgenomicsubsetselection property)": [[232, "pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicSubsetSelection.neqcv"]], "nineqcv (pybrops.breed.prot.sel.weightedgenomicselection.weightedgenomicsubsetselection property)": [[232, "pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicSubsetSelection.nineqcv"]], "nmating (pybrops.breed.prot.sel.weightedgenomicselection.weightedgenomicsubsetselection property)": [[232, "pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicSubsetSelection.nmating"]], "nobj (pybrops.breed.prot.sel.weightedgenomicselection.weightedgenomicsubsetselection property)": [[232, "pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicSubsetSelection.nobj"]], "nparent (pybrops.breed.prot.sel.weightedgenomicselection.weightedgenomicsubsetselection property)": [[232, "pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicSubsetSelection.nparent"]], "nprogeny (pybrops.breed.prot.sel.weightedgenomicselection.weightedgenomicsubsetselection property)": [[232, "pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicSubsetSelection.nprogeny"]], "nselindiv (pybrops.breed.prot.sel.weightedgenomicselection.weightedgenomicsubsetselection property)": [[232, "pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicSubsetSelection.nselindiv"]], "ntrait (pybrops.breed.prot.sel.weightedgenomicselection.weightedgenomicsubsetselection property)": [[232, "pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicSubsetSelection.ntrait"]], "obj_trans (pybrops.breed.prot.sel.weightedgenomicselection.weightedgenomicsubsetselection property)": [[232, "pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicSubsetSelection.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.weightedgenomicselection.weightedgenomicsubsetselection property)": [[232, "pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicSubsetSelection.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.weightedgenomicselection.weightedgenomicsubsetselection property)": [[232, "pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicSubsetSelection.obj_wt"]], "problem() (pybrops.breed.prot.sel.weightedgenomicselection.weightedgenomicsubsetselection method)": [[232, "pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicSubsetSelection.problem"]], "rng (pybrops.breed.prot.sel.weightedgenomicselection.weightedgenomicsubsetselection property)": [[232, "pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicSubsetSelection.rng"]], "select() (pybrops.breed.prot.sel.weightedgenomicselection.weightedgenomicsubsetselection method)": [[232, "pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicSubsetSelection.select"]], "soalgo (pybrops.breed.prot.sel.weightedgenomicselection.weightedgenomicsubsetselection property)": [[232, "pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicSubsetSelection.soalgo"]], "sosolve() (pybrops.breed.prot.sel.weightedgenomicselection.weightedgenomicsubsetselection method)": [[232, "pybrops.breed.prot.sel.WeightedGenomicSelection.WeightedGenomicSubsetSelection.sosolve"]], "pybrops.breed.prot.sel.cfg": [[233, "module-pybrops.breed.prot.sel.cfg"]], "pybrops.breed.prot.sel.cfg.binarymateselectionconfiguration": [[234, "module-pybrops.breed.prot.sel.cfg.BinaryMateSelectionConfiguration"]], "binarymateselectionconfiguration (class in pybrops.breed.prot.sel.cfg.binarymateselectionconfiguration)": [[235, "pybrops.breed.prot.sel.cfg.BinaryMateSelectionConfiguration.BinaryMateSelectionConfiguration"]], "ncross (pybrops.breed.prot.sel.cfg.binarymateselectionconfiguration.binarymateselectionconfiguration property)": [[235, "pybrops.breed.prot.sel.cfg.BinaryMateSelectionConfiguration.BinaryMateSelectionConfiguration.ncross"]], "nmating (pybrops.breed.prot.sel.cfg.binarymateselectionconfiguration.binarymateselectionconfiguration property)": [[235, "pybrops.breed.prot.sel.cfg.BinaryMateSelectionConfiguration.BinaryMateSelectionConfiguration.nmating"]], "nparent (pybrops.breed.prot.sel.cfg.binarymateselectionconfiguration.binarymateselectionconfiguration property)": [[235, "pybrops.breed.prot.sel.cfg.BinaryMateSelectionConfiguration.BinaryMateSelectionConfiguration.nparent"]], "nprogeny (pybrops.breed.prot.sel.cfg.binarymateselectionconfiguration.binarymateselectionconfiguration property)": [[235, "pybrops.breed.prot.sel.cfg.BinaryMateSelectionConfiguration.BinaryMateSelectionConfiguration.nprogeny"]], "pgmat (pybrops.breed.prot.sel.cfg.binarymateselectionconfiguration.binarymateselectionconfiguration property)": [[235, "pybrops.breed.prot.sel.cfg.BinaryMateSelectionConfiguration.BinaryMateSelectionConfiguration.pgmat"]], "rng (pybrops.breed.prot.sel.cfg.binarymateselectionconfiguration.binarymateselectionconfiguration property)": [[235, "pybrops.breed.prot.sel.cfg.BinaryMateSelectionConfiguration.BinaryMateSelectionConfiguration.rng"]], "sample_xconfig() (pybrops.breed.prot.sel.cfg.binarymateselectionconfiguration.binarymateselectionconfiguration method)": [[235, "pybrops.breed.prot.sel.cfg.BinaryMateSelectionConfiguration.BinaryMateSelectionConfiguration.sample_xconfig"]], "xconfig (pybrops.breed.prot.sel.cfg.binarymateselectionconfiguration.binarymateselectionconfiguration property)": [[235, "pybrops.breed.prot.sel.cfg.BinaryMateSelectionConfiguration.BinaryMateSelectionConfiguration.xconfig"]], "xconfig_decn (pybrops.breed.prot.sel.cfg.binarymateselectionconfiguration.binarymateselectionconfiguration property)": [[235, "pybrops.breed.prot.sel.cfg.BinaryMateSelectionConfiguration.BinaryMateSelectionConfiguration.xconfig_decn"]], "xconfig_xmap (pybrops.breed.prot.sel.cfg.binarymateselectionconfiguration.binarymateselectionconfiguration property)": [[235, "pybrops.breed.prot.sel.cfg.BinaryMateSelectionConfiguration.BinaryMateSelectionConfiguration.xconfig_xmap"]], "pybrops.breed.prot.sel.cfg.binaryselectionconfiguration": [[236, "module-pybrops.breed.prot.sel.cfg.BinarySelectionConfiguration"]], "binaryselectionconfiguration (class in pybrops.breed.prot.sel.cfg.binaryselectionconfiguration)": [[237, "pybrops.breed.prot.sel.cfg.BinarySelectionConfiguration.BinarySelectionConfiguration"]], "ncross (pybrops.breed.prot.sel.cfg.binaryselectionconfiguration.binaryselectionconfiguration property)": [[237, "pybrops.breed.prot.sel.cfg.BinarySelectionConfiguration.BinarySelectionConfiguration.ncross"]], "nmating (pybrops.breed.prot.sel.cfg.binaryselectionconfiguration.binaryselectionconfiguration property)": [[237, "pybrops.breed.prot.sel.cfg.BinarySelectionConfiguration.BinarySelectionConfiguration.nmating"]], "nparent (pybrops.breed.prot.sel.cfg.binaryselectionconfiguration.binaryselectionconfiguration property)": [[237, "pybrops.breed.prot.sel.cfg.BinarySelectionConfiguration.BinarySelectionConfiguration.nparent"]], "nprogeny (pybrops.breed.prot.sel.cfg.binaryselectionconfiguration.binaryselectionconfiguration property)": [[237, "pybrops.breed.prot.sel.cfg.BinarySelectionConfiguration.BinarySelectionConfiguration.nprogeny"]], "pgmat (pybrops.breed.prot.sel.cfg.binaryselectionconfiguration.binaryselectionconfiguration property)": [[237, "pybrops.breed.prot.sel.cfg.BinarySelectionConfiguration.BinarySelectionConfiguration.pgmat"]], "rng (pybrops.breed.prot.sel.cfg.binaryselectionconfiguration.binaryselectionconfiguration property)": [[237, "pybrops.breed.prot.sel.cfg.BinarySelectionConfiguration.BinarySelectionConfiguration.rng"]], "sample_xconfig() (pybrops.breed.prot.sel.cfg.binaryselectionconfiguration.binaryselectionconfiguration method)": [[237, "pybrops.breed.prot.sel.cfg.BinarySelectionConfiguration.BinarySelectionConfiguration.sample_xconfig"]], "xconfig (pybrops.breed.prot.sel.cfg.binaryselectionconfiguration.binaryselectionconfiguration property)": [[237, "pybrops.breed.prot.sel.cfg.BinarySelectionConfiguration.BinarySelectionConfiguration.xconfig"]], "xconfig_decn (pybrops.breed.prot.sel.cfg.binaryselectionconfiguration.binaryselectionconfiguration property)": [[237, "pybrops.breed.prot.sel.cfg.BinarySelectionConfiguration.BinarySelectionConfiguration.xconfig_decn"]], "pybrops.breed.prot.sel.cfg.integermateselectionconfiguration": [[238, "module-pybrops.breed.prot.sel.cfg.IntegerMateSelectionConfiguration"]], "integermateselectionconfiguration (class in pybrops.breed.prot.sel.cfg.integermateselectionconfiguration)": [[239, "pybrops.breed.prot.sel.cfg.IntegerMateSelectionConfiguration.IntegerMateSelectionConfiguration"]], "ncross (pybrops.breed.prot.sel.cfg.integermateselectionconfiguration.integermateselectionconfiguration property)": [[239, "pybrops.breed.prot.sel.cfg.IntegerMateSelectionConfiguration.IntegerMateSelectionConfiguration.ncross"]], "nmating (pybrops.breed.prot.sel.cfg.integermateselectionconfiguration.integermateselectionconfiguration property)": [[239, "pybrops.breed.prot.sel.cfg.IntegerMateSelectionConfiguration.IntegerMateSelectionConfiguration.nmating"]], "nparent (pybrops.breed.prot.sel.cfg.integermateselectionconfiguration.integermateselectionconfiguration property)": [[239, "pybrops.breed.prot.sel.cfg.IntegerMateSelectionConfiguration.IntegerMateSelectionConfiguration.nparent"]], "nprogeny (pybrops.breed.prot.sel.cfg.integermateselectionconfiguration.integermateselectionconfiguration property)": [[239, "pybrops.breed.prot.sel.cfg.IntegerMateSelectionConfiguration.IntegerMateSelectionConfiguration.nprogeny"]], "pgmat (pybrops.breed.prot.sel.cfg.integermateselectionconfiguration.integermateselectionconfiguration property)": [[239, "pybrops.breed.prot.sel.cfg.IntegerMateSelectionConfiguration.IntegerMateSelectionConfiguration.pgmat"]], "rng (pybrops.breed.prot.sel.cfg.integermateselectionconfiguration.integermateselectionconfiguration property)": [[239, "pybrops.breed.prot.sel.cfg.IntegerMateSelectionConfiguration.IntegerMateSelectionConfiguration.rng"]], "sample_xconfig() (pybrops.breed.prot.sel.cfg.integermateselectionconfiguration.integermateselectionconfiguration method)": [[239, "pybrops.breed.prot.sel.cfg.IntegerMateSelectionConfiguration.IntegerMateSelectionConfiguration.sample_xconfig"]], "xconfig (pybrops.breed.prot.sel.cfg.integermateselectionconfiguration.integermateselectionconfiguration property)": [[239, "pybrops.breed.prot.sel.cfg.IntegerMateSelectionConfiguration.IntegerMateSelectionConfiguration.xconfig"]], "xconfig_decn (pybrops.breed.prot.sel.cfg.integermateselectionconfiguration.integermateselectionconfiguration property)": [[239, "pybrops.breed.prot.sel.cfg.IntegerMateSelectionConfiguration.IntegerMateSelectionConfiguration.xconfig_decn"]], "xconfig_xmap (pybrops.breed.prot.sel.cfg.integermateselectionconfiguration.integermateselectionconfiguration property)": [[239, "pybrops.breed.prot.sel.cfg.IntegerMateSelectionConfiguration.IntegerMateSelectionConfiguration.xconfig_xmap"]], "pybrops.breed.prot.sel.cfg.integerselectionconfiguration": [[240, "module-pybrops.breed.prot.sel.cfg.IntegerSelectionConfiguration"]], "integerselectionconfiguration (class in pybrops.breed.prot.sel.cfg.integerselectionconfiguration)": [[241, "pybrops.breed.prot.sel.cfg.IntegerSelectionConfiguration.IntegerSelectionConfiguration"]], "ncross (pybrops.breed.prot.sel.cfg.integerselectionconfiguration.integerselectionconfiguration property)": [[241, "pybrops.breed.prot.sel.cfg.IntegerSelectionConfiguration.IntegerSelectionConfiguration.ncross"]], "nmating (pybrops.breed.prot.sel.cfg.integerselectionconfiguration.integerselectionconfiguration property)": [[241, "pybrops.breed.prot.sel.cfg.IntegerSelectionConfiguration.IntegerSelectionConfiguration.nmating"]], "nparent (pybrops.breed.prot.sel.cfg.integerselectionconfiguration.integerselectionconfiguration property)": [[241, "pybrops.breed.prot.sel.cfg.IntegerSelectionConfiguration.IntegerSelectionConfiguration.nparent"]], "nprogeny (pybrops.breed.prot.sel.cfg.integerselectionconfiguration.integerselectionconfiguration property)": [[241, "pybrops.breed.prot.sel.cfg.IntegerSelectionConfiguration.IntegerSelectionConfiguration.nprogeny"]], "pgmat (pybrops.breed.prot.sel.cfg.integerselectionconfiguration.integerselectionconfiguration property)": [[241, "pybrops.breed.prot.sel.cfg.IntegerSelectionConfiguration.IntegerSelectionConfiguration.pgmat"]], "rng (pybrops.breed.prot.sel.cfg.integerselectionconfiguration.integerselectionconfiguration property)": [[241, "pybrops.breed.prot.sel.cfg.IntegerSelectionConfiguration.IntegerSelectionConfiguration.rng"]], "sample_xconfig() (pybrops.breed.prot.sel.cfg.integerselectionconfiguration.integerselectionconfiguration method)": [[241, "pybrops.breed.prot.sel.cfg.IntegerSelectionConfiguration.IntegerSelectionConfiguration.sample_xconfig"]], "xconfig (pybrops.breed.prot.sel.cfg.integerselectionconfiguration.integerselectionconfiguration property)": [[241, "pybrops.breed.prot.sel.cfg.IntegerSelectionConfiguration.IntegerSelectionConfiguration.xconfig"]], "xconfig_decn (pybrops.breed.prot.sel.cfg.integerselectionconfiguration.integerselectionconfiguration property)": [[241, "pybrops.breed.prot.sel.cfg.IntegerSelectionConfiguration.IntegerSelectionConfiguration.xconfig_decn"]], "pybrops.breed.prot.sel.cfg.mateselectionconfiguration": [[242, "module-pybrops.breed.prot.sel.cfg.MateSelectionConfiguration"]], "mateselectionconfiguration (class in pybrops.breed.prot.sel.cfg.mateselectionconfiguration)": [[243, "pybrops.breed.prot.sel.cfg.MateSelectionConfiguration.MateSelectionConfiguration"]], "ncross (pybrops.breed.prot.sel.cfg.mateselectionconfiguration.mateselectionconfiguration property)": [[243, "pybrops.breed.prot.sel.cfg.MateSelectionConfiguration.MateSelectionConfiguration.ncross"]], "nmating (pybrops.breed.prot.sel.cfg.mateselectionconfiguration.mateselectionconfiguration property)": [[243, "pybrops.breed.prot.sel.cfg.MateSelectionConfiguration.MateSelectionConfiguration.nmating"]], "nparent (pybrops.breed.prot.sel.cfg.mateselectionconfiguration.mateselectionconfiguration property)": [[243, "pybrops.breed.prot.sel.cfg.MateSelectionConfiguration.MateSelectionConfiguration.nparent"]], "nprogeny (pybrops.breed.prot.sel.cfg.mateselectionconfiguration.mateselectionconfiguration property)": [[243, "pybrops.breed.prot.sel.cfg.MateSelectionConfiguration.MateSelectionConfiguration.nprogeny"]], "pgmat (pybrops.breed.prot.sel.cfg.mateselectionconfiguration.mateselectionconfiguration property)": [[243, "pybrops.breed.prot.sel.cfg.MateSelectionConfiguration.MateSelectionConfiguration.pgmat"]], "xconfig (pybrops.breed.prot.sel.cfg.mateselectionconfiguration.mateselectionconfiguration property)": [[243, "pybrops.breed.prot.sel.cfg.MateSelectionConfiguration.MateSelectionConfiguration.xconfig"]], "xconfig_xmap (pybrops.breed.prot.sel.cfg.mateselectionconfiguration.mateselectionconfiguration property)": [[243, "pybrops.breed.prot.sel.cfg.MateSelectionConfiguration.MateSelectionConfiguration.xconfig_xmap"]], "check_is_mateselectionconfiguration() (in module pybrops.breed.prot.sel.cfg.mateselectionconfiguration)": [[244, "pybrops.breed.prot.sel.cfg.MateSelectionConfiguration.check_is_MateSelectionConfiguration"]], "pybrops.breed.prot.sel.cfg.realmateselectionconfiguration": [[245, "module-pybrops.breed.prot.sel.cfg.RealMateSelectionConfiguration"]], "realmateselectionconfiguration (class in pybrops.breed.prot.sel.cfg.realmateselectionconfiguration)": [[246, "pybrops.breed.prot.sel.cfg.RealMateSelectionConfiguration.RealMateSelectionConfiguration"]], "ncross (pybrops.breed.prot.sel.cfg.realmateselectionconfiguration.realmateselectionconfiguration property)": [[246, "pybrops.breed.prot.sel.cfg.RealMateSelectionConfiguration.RealMateSelectionConfiguration.ncross"]], "nmating (pybrops.breed.prot.sel.cfg.realmateselectionconfiguration.realmateselectionconfiguration property)": [[246, "pybrops.breed.prot.sel.cfg.RealMateSelectionConfiguration.RealMateSelectionConfiguration.nmating"]], "nparent (pybrops.breed.prot.sel.cfg.realmateselectionconfiguration.realmateselectionconfiguration property)": [[246, "pybrops.breed.prot.sel.cfg.RealMateSelectionConfiguration.RealMateSelectionConfiguration.nparent"]], "nprogeny (pybrops.breed.prot.sel.cfg.realmateselectionconfiguration.realmateselectionconfiguration property)": [[246, "pybrops.breed.prot.sel.cfg.RealMateSelectionConfiguration.RealMateSelectionConfiguration.nprogeny"]], "pgmat (pybrops.breed.prot.sel.cfg.realmateselectionconfiguration.realmateselectionconfiguration property)": [[246, "pybrops.breed.prot.sel.cfg.RealMateSelectionConfiguration.RealMateSelectionConfiguration.pgmat"]], "rng (pybrops.breed.prot.sel.cfg.realmateselectionconfiguration.realmateselectionconfiguration property)": [[246, "pybrops.breed.prot.sel.cfg.RealMateSelectionConfiguration.RealMateSelectionConfiguration.rng"]], "sample_xconfig() (pybrops.breed.prot.sel.cfg.realmateselectionconfiguration.realmateselectionconfiguration method)": [[246, "pybrops.breed.prot.sel.cfg.RealMateSelectionConfiguration.RealMateSelectionConfiguration.sample_xconfig"]], "xconfig (pybrops.breed.prot.sel.cfg.realmateselectionconfiguration.realmateselectionconfiguration property)": [[246, "pybrops.breed.prot.sel.cfg.RealMateSelectionConfiguration.RealMateSelectionConfiguration.xconfig"]], "xconfig_decn (pybrops.breed.prot.sel.cfg.realmateselectionconfiguration.realmateselectionconfiguration property)": [[246, "pybrops.breed.prot.sel.cfg.RealMateSelectionConfiguration.RealMateSelectionConfiguration.xconfig_decn"]], "xconfig_xmap (pybrops.breed.prot.sel.cfg.realmateselectionconfiguration.realmateselectionconfiguration property)": [[246, "pybrops.breed.prot.sel.cfg.RealMateSelectionConfiguration.RealMateSelectionConfiguration.xconfig_xmap"]], "pybrops.breed.prot.sel.cfg.realselectionconfiguration": [[247, "module-pybrops.breed.prot.sel.cfg.RealSelectionConfiguration"]], "realselectionconfiguration (class in pybrops.breed.prot.sel.cfg.realselectionconfiguration)": [[248, "pybrops.breed.prot.sel.cfg.RealSelectionConfiguration.RealSelectionConfiguration"]], "ncross (pybrops.breed.prot.sel.cfg.realselectionconfiguration.realselectionconfiguration property)": [[248, "pybrops.breed.prot.sel.cfg.RealSelectionConfiguration.RealSelectionConfiguration.ncross"]], "nmating (pybrops.breed.prot.sel.cfg.realselectionconfiguration.realselectionconfiguration property)": [[248, "pybrops.breed.prot.sel.cfg.RealSelectionConfiguration.RealSelectionConfiguration.nmating"]], "nparent (pybrops.breed.prot.sel.cfg.realselectionconfiguration.realselectionconfiguration property)": [[248, "pybrops.breed.prot.sel.cfg.RealSelectionConfiguration.RealSelectionConfiguration.nparent"]], "nprogeny (pybrops.breed.prot.sel.cfg.realselectionconfiguration.realselectionconfiguration property)": [[248, "pybrops.breed.prot.sel.cfg.RealSelectionConfiguration.RealSelectionConfiguration.nprogeny"]], "pgmat (pybrops.breed.prot.sel.cfg.realselectionconfiguration.realselectionconfiguration property)": [[248, "pybrops.breed.prot.sel.cfg.RealSelectionConfiguration.RealSelectionConfiguration.pgmat"]], "rng (pybrops.breed.prot.sel.cfg.realselectionconfiguration.realselectionconfiguration property)": [[248, "pybrops.breed.prot.sel.cfg.RealSelectionConfiguration.RealSelectionConfiguration.rng"]], "sample_xconfig() (pybrops.breed.prot.sel.cfg.realselectionconfiguration.realselectionconfiguration method)": [[248, "pybrops.breed.prot.sel.cfg.RealSelectionConfiguration.RealSelectionConfiguration.sample_xconfig"]], "xconfig (pybrops.breed.prot.sel.cfg.realselectionconfiguration.realselectionconfiguration property)": [[248, "pybrops.breed.prot.sel.cfg.RealSelectionConfiguration.RealSelectionConfiguration.xconfig"]], "xconfig_decn (pybrops.breed.prot.sel.cfg.realselectionconfiguration.realselectionconfiguration property)": [[248, "pybrops.breed.prot.sel.cfg.RealSelectionConfiguration.RealSelectionConfiguration.xconfig_decn"]], "pybrops.breed.prot.sel.cfg.sampledselectionconfigurationmixin": [[249, "module-pybrops.breed.prot.sel.cfg.SampledSelectionConfigurationMixin"]], "sampledselectionconfigurationmixin (class in pybrops.breed.prot.sel.cfg.sampledselectionconfigurationmixin)": [[250, "pybrops.breed.prot.sel.cfg.SampledSelectionConfigurationMixin.SampledSelectionConfigurationMixin"]], "rng (pybrops.breed.prot.sel.cfg.sampledselectionconfigurationmixin.sampledselectionconfigurationmixin property)": [[250, "pybrops.breed.prot.sel.cfg.SampledSelectionConfigurationMixin.SampledSelectionConfigurationMixin.rng"]], "sample_xconfig() (pybrops.breed.prot.sel.cfg.sampledselectionconfigurationmixin.sampledselectionconfigurationmixin method)": [[250, "pybrops.breed.prot.sel.cfg.SampledSelectionConfigurationMixin.SampledSelectionConfigurationMixin.sample_xconfig"]], "xconfig_decn (pybrops.breed.prot.sel.cfg.sampledselectionconfigurationmixin.sampledselectionconfigurationmixin property)": [[250, "pybrops.breed.prot.sel.cfg.SampledSelectionConfigurationMixin.SampledSelectionConfigurationMixin.xconfig_decn"]], "pybrops.breed.prot.sel.cfg.selectionconfiguration": [[251, "module-pybrops.breed.prot.sel.cfg.SelectionConfiguration"]], "selectionconfiguration (class in pybrops.breed.prot.sel.cfg.selectionconfiguration)": [[252, "pybrops.breed.prot.sel.cfg.SelectionConfiguration.SelectionConfiguration"]], "ncross (pybrops.breed.prot.sel.cfg.selectionconfiguration.selectionconfiguration property)": [[252, "pybrops.breed.prot.sel.cfg.SelectionConfiguration.SelectionConfiguration.ncross"]], "nmating (pybrops.breed.prot.sel.cfg.selectionconfiguration.selectionconfiguration property)": [[252, "pybrops.breed.prot.sel.cfg.SelectionConfiguration.SelectionConfiguration.nmating"]], "nparent (pybrops.breed.prot.sel.cfg.selectionconfiguration.selectionconfiguration property)": [[252, "pybrops.breed.prot.sel.cfg.SelectionConfiguration.SelectionConfiguration.nparent"]], "nprogeny (pybrops.breed.prot.sel.cfg.selectionconfiguration.selectionconfiguration property)": [[252, "pybrops.breed.prot.sel.cfg.SelectionConfiguration.SelectionConfiguration.nprogeny"]], "pgmat (pybrops.breed.prot.sel.cfg.selectionconfiguration.selectionconfiguration property)": [[252, "pybrops.breed.prot.sel.cfg.SelectionConfiguration.SelectionConfiguration.pgmat"]], "xconfig (pybrops.breed.prot.sel.cfg.selectionconfiguration.selectionconfiguration property)": [[252, "pybrops.breed.prot.sel.cfg.SelectionConfiguration.SelectionConfiguration.xconfig"]], "check_is_selectionconfiguration() (in module pybrops.breed.prot.sel.cfg.selectionconfiguration)": [[253, "pybrops.breed.prot.sel.cfg.SelectionConfiguration.check_is_SelectionConfiguration"]], "pybrops.breed.prot.sel.cfg.simplemateselectionconfiguration": [[254, "module-pybrops.breed.prot.sel.cfg.SimpleMateSelectionConfiguration"]], "simplemateselectionconfiguration (class in pybrops.breed.prot.sel.cfg.simplemateselectionconfiguration)": [[255, "pybrops.breed.prot.sel.cfg.SimpleMateSelectionConfiguration.SimpleMateSelectionConfiguration"]], "ncross (pybrops.breed.prot.sel.cfg.simplemateselectionconfiguration.simplemateselectionconfiguration property)": [[255, "pybrops.breed.prot.sel.cfg.SimpleMateSelectionConfiguration.SimpleMateSelectionConfiguration.ncross"]], "nmating (pybrops.breed.prot.sel.cfg.simplemateselectionconfiguration.simplemateselectionconfiguration property)": [[255, "pybrops.breed.prot.sel.cfg.SimpleMateSelectionConfiguration.SimpleMateSelectionConfiguration.nmating"]], "nparent (pybrops.breed.prot.sel.cfg.simplemateselectionconfiguration.simplemateselectionconfiguration property)": [[255, "pybrops.breed.prot.sel.cfg.SimpleMateSelectionConfiguration.SimpleMateSelectionConfiguration.nparent"]], "nprogeny (pybrops.breed.prot.sel.cfg.simplemateselectionconfiguration.simplemateselectionconfiguration property)": [[255, "pybrops.breed.prot.sel.cfg.SimpleMateSelectionConfiguration.SimpleMateSelectionConfiguration.nprogeny"]], "pgmat (pybrops.breed.prot.sel.cfg.simplemateselectionconfiguration.simplemateselectionconfiguration property)": [[255, "pybrops.breed.prot.sel.cfg.SimpleMateSelectionConfiguration.SimpleMateSelectionConfiguration.pgmat"]], "xconfig (pybrops.breed.prot.sel.cfg.simplemateselectionconfiguration.simplemateselectionconfiguration property)": [[255, "pybrops.breed.prot.sel.cfg.SimpleMateSelectionConfiguration.SimpleMateSelectionConfiguration.xconfig"]], "xconfig_xmap (pybrops.breed.prot.sel.cfg.simplemateselectionconfiguration.simplemateselectionconfiguration property)": [[255, "pybrops.breed.prot.sel.cfg.SimpleMateSelectionConfiguration.SimpleMateSelectionConfiguration.xconfig_xmap"]], "pybrops.breed.prot.sel.cfg.simpleselectionconfiguration": [[256, "module-pybrops.breed.prot.sel.cfg.SimpleSelectionConfiguration"]], "simpleselectionconfiguration (class in pybrops.breed.prot.sel.cfg.simpleselectionconfiguration)": [[257, "pybrops.breed.prot.sel.cfg.SimpleSelectionConfiguration.SimpleSelectionConfiguration"]], "ncross (pybrops.breed.prot.sel.cfg.simpleselectionconfiguration.simpleselectionconfiguration property)": [[257, "pybrops.breed.prot.sel.cfg.SimpleSelectionConfiguration.SimpleSelectionConfiguration.ncross"]], "nmating (pybrops.breed.prot.sel.cfg.simpleselectionconfiguration.simpleselectionconfiguration property)": [[257, "pybrops.breed.prot.sel.cfg.SimpleSelectionConfiguration.SimpleSelectionConfiguration.nmating"]], "nparent (pybrops.breed.prot.sel.cfg.simpleselectionconfiguration.simpleselectionconfiguration property)": [[257, "pybrops.breed.prot.sel.cfg.SimpleSelectionConfiguration.SimpleSelectionConfiguration.nparent"]], "nprogeny (pybrops.breed.prot.sel.cfg.simpleselectionconfiguration.simpleselectionconfiguration property)": [[257, "pybrops.breed.prot.sel.cfg.SimpleSelectionConfiguration.SimpleSelectionConfiguration.nprogeny"]], "pgmat (pybrops.breed.prot.sel.cfg.simpleselectionconfiguration.simpleselectionconfiguration property)": [[257, "pybrops.breed.prot.sel.cfg.SimpleSelectionConfiguration.SimpleSelectionConfiguration.pgmat"]], "xconfig (pybrops.breed.prot.sel.cfg.simpleselectionconfiguration.simpleselectionconfiguration property)": [[257, "pybrops.breed.prot.sel.cfg.SimpleSelectionConfiguration.SimpleSelectionConfiguration.xconfig"]], "pybrops.breed.prot.sel.cfg.subsetmateselectionconfiguration": [[258, "module-pybrops.breed.prot.sel.cfg.SubsetMateSelectionConfiguration"]], "subsetmateselectionconfiguration (class in pybrops.breed.prot.sel.cfg.subsetmateselectionconfiguration)": [[259, "pybrops.breed.prot.sel.cfg.SubsetMateSelectionConfiguration.SubsetMateSelectionConfiguration"]], "ncross (pybrops.breed.prot.sel.cfg.subsetmateselectionconfiguration.subsetmateselectionconfiguration property)": [[259, "pybrops.breed.prot.sel.cfg.SubsetMateSelectionConfiguration.SubsetMateSelectionConfiguration.ncross"]], "nmating (pybrops.breed.prot.sel.cfg.subsetmateselectionconfiguration.subsetmateselectionconfiguration property)": [[259, "pybrops.breed.prot.sel.cfg.SubsetMateSelectionConfiguration.SubsetMateSelectionConfiguration.nmating"]], "nparent (pybrops.breed.prot.sel.cfg.subsetmateselectionconfiguration.subsetmateselectionconfiguration property)": [[259, "pybrops.breed.prot.sel.cfg.SubsetMateSelectionConfiguration.SubsetMateSelectionConfiguration.nparent"]], "nprogeny (pybrops.breed.prot.sel.cfg.subsetmateselectionconfiguration.subsetmateselectionconfiguration property)": [[259, "pybrops.breed.prot.sel.cfg.SubsetMateSelectionConfiguration.SubsetMateSelectionConfiguration.nprogeny"]], "pgmat (pybrops.breed.prot.sel.cfg.subsetmateselectionconfiguration.subsetmateselectionconfiguration property)": [[259, "pybrops.breed.prot.sel.cfg.SubsetMateSelectionConfiguration.SubsetMateSelectionConfiguration.pgmat"]], "rng (pybrops.breed.prot.sel.cfg.subsetmateselectionconfiguration.subsetmateselectionconfiguration property)": [[259, "pybrops.breed.prot.sel.cfg.SubsetMateSelectionConfiguration.SubsetMateSelectionConfiguration.rng"]], "sample_xconfig() (pybrops.breed.prot.sel.cfg.subsetmateselectionconfiguration.subsetmateselectionconfiguration method)": [[259, "pybrops.breed.prot.sel.cfg.SubsetMateSelectionConfiguration.SubsetMateSelectionConfiguration.sample_xconfig"]], "xconfig (pybrops.breed.prot.sel.cfg.subsetmateselectionconfiguration.subsetmateselectionconfiguration property)": [[259, "pybrops.breed.prot.sel.cfg.SubsetMateSelectionConfiguration.SubsetMateSelectionConfiguration.xconfig"]], "xconfig_decn (pybrops.breed.prot.sel.cfg.subsetmateselectionconfiguration.subsetmateselectionconfiguration property)": [[259, "pybrops.breed.prot.sel.cfg.SubsetMateSelectionConfiguration.SubsetMateSelectionConfiguration.xconfig_decn"]], "xconfig_xmap (pybrops.breed.prot.sel.cfg.subsetmateselectionconfiguration.subsetmateselectionconfiguration property)": [[259, "pybrops.breed.prot.sel.cfg.SubsetMateSelectionConfiguration.SubsetMateSelectionConfiguration.xconfig_xmap"]], "pybrops.breed.prot.sel.cfg.subsetselectionconfiguration": [[260, "module-pybrops.breed.prot.sel.cfg.SubsetSelectionConfiguration"]], "subsetselectionconfiguration (class in pybrops.breed.prot.sel.cfg.subsetselectionconfiguration)": [[261, "pybrops.breed.prot.sel.cfg.SubsetSelectionConfiguration.SubsetSelectionConfiguration"]], "ncross (pybrops.breed.prot.sel.cfg.subsetselectionconfiguration.subsetselectionconfiguration property)": [[261, "pybrops.breed.prot.sel.cfg.SubsetSelectionConfiguration.SubsetSelectionConfiguration.ncross"]], "nmating (pybrops.breed.prot.sel.cfg.subsetselectionconfiguration.subsetselectionconfiguration property)": [[261, "pybrops.breed.prot.sel.cfg.SubsetSelectionConfiguration.SubsetSelectionConfiguration.nmating"]], "nparent (pybrops.breed.prot.sel.cfg.subsetselectionconfiguration.subsetselectionconfiguration property)": [[261, "pybrops.breed.prot.sel.cfg.SubsetSelectionConfiguration.SubsetSelectionConfiguration.nparent"]], "nprogeny (pybrops.breed.prot.sel.cfg.subsetselectionconfiguration.subsetselectionconfiguration property)": [[261, "pybrops.breed.prot.sel.cfg.SubsetSelectionConfiguration.SubsetSelectionConfiguration.nprogeny"]], "pgmat (pybrops.breed.prot.sel.cfg.subsetselectionconfiguration.subsetselectionconfiguration property)": [[261, "pybrops.breed.prot.sel.cfg.SubsetSelectionConfiguration.SubsetSelectionConfiguration.pgmat"]], "rng (pybrops.breed.prot.sel.cfg.subsetselectionconfiguration.subsetselectionconfiguration property)": [[261, "pybrops.breed.prot.sel.cfg.SubsetSelectionConfiguration.SubsetSelectionConfiguration.rng"]], "sample_xconfig() (pybrops.breed.prot.sel.cfg.subsetselectionconfiguration.subsetselectionconfiguration method)": [[261, "pybrops.breed.prot.sel.cfg.SubsetSelectionConfiguration.SubsetSelectionConfiguration.sample_xconfig"]], "xconfig (pybrops.breed.prot.sel.cfg.subsetselectionconfiguration.subsetselectionconfiguration property)": [[261, "pybrops.breed.prot.sel.cfg.SubsetSelectionConfiguration.SubsetSelectionConfiguration.xconfig"]], "xconfig_decn (pybrops.breed.prot.sel.cfg.subsetselectionconfiguration.subsetselectionconfiguration property)": [[261, "pybrops.breed.prot.sel.cfg.SubsetSelectionConfiguration.SubsetSelectionConfiguration.xconfig_decn"]], "pybrops.breed.prot.sel.prob": [[262, "module-pybrops.breed.prot.sel.prob"]], "pybrops.breed.prot.sel.prob.binarymateselectionproblem": [[263, "module-pybrops.breed.prot.sel.prob.BinaryMateSelectionProblem"]], "binarymateselectionproblem (class in pybrops.breed.prot.sel.prob.binarymateselectionproblem)": [[264, "pybrops.breed.prot.sel.prob.BinaryMateSelectionProblem.BinaryMateSelectionProblem"]], "callback (pybrops.breed.prot.sel.prob.binarymateselectionproblem.binarymateselectionproblem property)": [[264, "pybrops.breed.prot.sel.prob.BinaryMateSelectionProblem.BinaryMateSelectionProblem.callback"]], "data (pybrops.breed.prot.sel.prob.binarymateselectionproblem.binarymateselectionproblem property)": [[264, "pybrops.breed.prot.sel.prob.BinaryMateSelectionProblem.BinaryMateSelectionProblem.data"]], "decn_space (pybrops.breed.prot.sel.prob.binarymateselectionproblem.binarymateselectionproblem property)": [[264, "pybrops.breed.prot.sel.prob.BinaryMateSelectionProblem.BinaryMateSelectionProblem.decn_space"]], "decn_space_lower (pybrops.breed.prot.sel.prob.binarymateselectionproblem.binarymateselectionproblem property)": [[264, "pybrops.breed.prot.sel.prob.BinaryMateSelectionProblem.BinaryMateSelectionProblem.decn_space_lower"]], "decn_space_upper (pybrops.breed.prot.sel.prob.binarymateselectionproblem.binarymateselectionproblem property)": [[264, "pybrops.breed.prot.sel.prob.BinaryMateSelectionProblem.BinaryMateSelectionProblem.decn_space_upper"]], "decn_space_xmap (pybrops.breed.prot.sel.prob.binarymateselectionproblem.binarymateselectionproblem property)": [[264, "pybrops.breed.prot.sel.prob.BinaryMateSelectionProblem.BinaryMateSelectionProblem.decn_space_xmap"]], "elementwise (pybrops.breed.prot.sel.prob.binarymateselectionproblem.binarymateselectionproblem property)": [[264, "pybrops.breed.prot.sel.prob.BinaryMateSelectionProblem.BinaryMateSelectionProblem.elementwise"]], "elementwise_func (pybrops.breed.prot.sel.prob.binarymateselectionproblem.binarymateselectionproblem property)": [[264, "pybrops.breed.prot.sel.prob.BinaryMateSelectionProblem.BinaryMateSelectionProblem.elementwise_func"]], "elementwise_runner (pybrops.breed.prot.sel.prob.binarymateselectionproblem.binarymateselectionproblem property)": [[264, "pybrops.breed.prot.sel.prob.BinaryMateSelectionProblem.BinaryMateSelectionProblem.elementwise_runner"]], "eqcv_trans (pybrops.breed.prot.sel.prob.binarymateselectionproblem.binarymateselectionproblem property)": [[264, "pybrops.breed.prot.sel.prob.BinaryMateSelectionProblem.BinaryMateSelectionProblem.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.prob.binarymateselectionproblem.binarymateselectionproblem property)": [[264, "pybrops.breed.prot.sel.prob.BinaryMateSelectionProblem.BinaryMateSelectionProblem.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.prob.binarymateselectionproblem.binarymateselectionproblem property)": [[264, "pybrops.breed.prot.sel.prob.BinaryMateSelectionProblem.BinaryMateSelectionProblem.eqcv_wt"]], "evalfn() (pybrops.breed.prot.sel.prob.binarymateselectionproblem.binarymateselectionproblem method)": [[264, "pybrops.breed.prot.sel.prob.BinaryMateSelectionProblem.BinaryMateSelectionProblem.evalfn"]], "exclude_from_serialization (pybrops.breed.prot.sel.prob.binarymateselectionproblem.binarymateselectionproblem property)": [[264, "pybrops.breed.prot.sel.prob.BinaryMateSelectionProblem.BinaryMateSelectionProblem.exclude_from_serialization"]], "ineqcv_trans (pybrops.breed.prot.sel.prob.binarymateselectionproblem.binarymateselectionproblem property)": [[264, "pybrops.breed.prot.sel.prob.BinaryMateSelectionProblem.BinaryMateSelectionProblem.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.prob.binarymateselectionproblem.binarymateselectionproblem property)": [[264, "pybrops.breed.prot.sel.prob.BinaryMateSelectionProblem.BinaryMateSelectionProblem.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.prob.binarymateselectionproblem.binarymateselectionproblem property)": [[264, "pybrops.breed.prot.sel.prob.BinaryMateSelectionProblem.BinaryMateSelectionProblem.ineqcv_wt"]], "latentfn() (pybrops.breed.prot.sel.prob.binarymateselectionproblem.binarymateselectionproblem method)": [[264, "pybrops.breed.prot.sel.prob.BinaryMateSelectionProblem.BinaryMateSelectionProblem.latentfn"]], "n_eq_constr (pybrops.breed.prot.sel.prob.binarymateselectionproblem.binarymateselectionproblem property)": [[264, "pybrops.breed.prot.sel.prob.BinaryMateSelectionProblem.BinaryMateSelectionProblem.n_eq_constr"]], "n_ieq_constr (pybrops.breed.prot.sel.prob.binarymateselectionproblem.binarymateselectionproblem property)": [[264, "pybrops.breed.prot.sel.prob.BinaryMateSelectionProblem.BinaryMateSelectionProblem.n_ieq_constr"]], "n_obj (pybrops.breed.prot.sel.prob.binarymateselectionproblem.binarymateselectionproblem property)": [[264, "pybrops.breed.prot.sel.prob.BinaryMateSelectionProblem.BinaryMateSelectionProblem.n_obj"]], "n_var (pybrops.breed.prot.sel.prob.binarymateselectionproblem.binarymateselectionproblem property)": [[264, "pybrops.breed.prot.sel.prob.BinaryMateSelectionProblem.BinaryMateSelectionProblem.n_var"]], "ndecn (pybrops.breed.prot.sel.prob.binarymateselectionproblem.binarymateselectionproblem property)": [[264, "pybrops.breed.prot.sel.prob.BinaryMateSelectionProblem.BinaryMateSelectionProblem.ndecn"]], "neqcv (pybrops.breed.prot.sel.prob.binarymateselectionproblem.binarymateselectionproblem property)": [[264, "pybrops.breed.prot.sel.prob.BinaryMateSelectionProblem.BinaryMateSelectionProblem.neqcv"]], "nineqcv (pybrops.breed.prot.sel.prob.binarymateselectionproblem.binarymateselectionproblem property)": [[264, "pybrops.breed.prot.sel.prob.BinaryMateSelectionProblem.BinaryMateSelectionProblem.nineqcv"]], "nlatent (pybrops.breed.prot.sel.prob.binarymateselectionproblem.binarymateselectionproblem property)": [[264, "pybrops.breed.prot.sel.prob.BinaryMateSelectionProblem.BinaryMateSelectionProblem.nlatent"]], "nobj (pybrops.breed.prot.sel.prob.binarymateselectionproblem.binarymateselectionproblem property)": [[264, "pybrops.breed.prot.sel.prob.BinaryMateSelectionProblem.BinaryMateSelectionProblem.nobj"]], "obj_trans (pybrops.breed.prot.sel.prob.binarymateselectionproblem.binarymateselectionproblem property)": [[264, "pybrops.breed.prot.sel.prob.BinaryMateSelectionProblem.BinaryMateSelectionProblem.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.prob.binarymateselectionproblem.binarymateselectionproblem property)": [[264, "pybrops.breed.prot.sel.prob.BinaryMateSelectionProblem.BinaryMateSelectionProblem.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.prob.binarymateselectionproblem.binarymateselectionproblem property)": [[264, "pybrops.breed.prot.sel.prob.BinaryMateSelectionProblem.BinaryMateSelectionProblem.obj_wt"]], "replace_nan_values_by (pybrops.breed.prot.sel.prob.binarymateselectionproblem.binarymateselectionproblem property)": [[264, "pybrops.breed.prot.sel.prob.BinaryMateSelectionProblem.BinaryMateSelectionProblem.replace_nan_values_by"]], "strict (pybrops.breed.prot.sel.prob.binarymateselectionproblem.binarymateselectionproblem property)": [[264, "pybrops.breed.prot.sel.prob.BinaryMateSelectionProblem.BinaryMateSelectionProblem.strict"]], "vars (pybrops.breed.prot.sel.prob.binarymateselectionproblem.binarymateselectionproblem property)": [[264, "pybrops.breed.prot.sel.prob.BinaryMateSelectionProblem.BinaryMateSelectionProblem.vars"]], "vtype (pybrops.breed.prot.sel.prob.binarymateselectionproblem.binarymateselectionproblem property)": [[264, "pybrops.breed.prot.sel.prob.BinaryMateSelectionProblem.BinaryMateSelectionProblem.vtype"]], "xl (pybrops.breed.prot.sel.prob.binarymateselectionproblem.binarymateselectionproblem property)": [[264, "pybrops.breed.prot.sel.prob.BinaryMateSelectionProblem.BinaryMateSelectionProblem.xl"]], "xu (pybrops.breed.prot.sel.prob.binarymateselectionproblem.binarymateselectionproblem property)": [[264, "pybrops.breed.prot.sel.prob.BinaryMateSelectionProblem.BinaryMateSelectionProblem.xu"]], "pybrops.breed.prot.sel.prob.binaryselectionproblem": [[265, "module-pybrops.breed.prot.sel.prob.BinarySelectionProblem"]], "binaryselectionproblem (class in pybrops.breed.prot.sel.prob.binaryselectionproblem)": [[266, "pybrops.breed.prot.sel.prob.BinarySelectionProblem.BinarySelectionProblem"]], "callback (pybrops.breed.prot.sel.prob.binaryselectionproblem.binaryselectionproblem property)": [[266, "pybrops.breed.prot.sel.prob.BinarySelectionProblem.BinarySelectionProblem.callback"]], "data (pybrops.breed.prot.sel.prob.binaryselectionproblem.binaryselectionproblem property)": [[266, "pybrops.breed.prot.sel.prob.BinarySelectionProblem.BinarySelectionProblem.data"]], "decn_space (pybrops.breed.prot.sel.prob.binaryselectionproblem.binaryselectionproblem property)": [[266, "pybrops.breed.prot.sel.prob.BinarySelectionProblem.BinarySelectionProblem.decn_space"]], "decn_space_lower (pybrops.breed.prot.sel.prob.binaryselectionproblem.binaryselectionproblem property)": [[266, "pybrops.breed.prot.sel.prob.BinarySelectionProblem.BinarySelectionProblem.decn_space_lower"]], "decn_space_upper (pybrops.breed.prot.sel.prob.binaryselectionproblem.binaryselectionproblem property)": [[266, "pybrops.breed.prot.sel.prob.BinarySelectionProblem.BinarySelectionProblem.decn_space_upper"]], "elementwise (pybrops.breed.prot.sel.prob.binaryselectionproblem.binaryselectionproblem property)": [[266, "pybrops.breed.prot.sel.prob.BinarySelectionProblem.BinarySelectionProblem.elementwise"]], "elementwise_func (pybrops.breed.prot.sel.prob.binaryselectionproblem.binaryselectionproblem property)": [[266, "pybrops.breed.prot.sel.prob.BinarySelectionProblem.BinarySelectionProblem.elementwise_func"]], "elementwise_runner (pybrops.breed.prot.sel.prob.binaryselectionproblem.binaryselectionproblem property)": [[266, "pybrops.breed.prot.sel.prob.BinarySelectionProblem.BinarySelectionProblem.elementwise_runner"]], "eqcv_trans (pybrops.breed.prot.sel.prob.binaryselectionproblem.binaryselectionproblem property)": [[266, "pybrops.breed.prot.sel.prob.BinarySelectionProblem.BinarySelectionProblem.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.prob.binaryselectionproblem.binaryselectionproblem property)": [[266, "pybrops.breed.prot.sel.prob.BinarySelectionProblem.BinarySelectionProblem.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.prob.binaryselectionproblem.binaryselectionproblem property)": [[266, "pybrops.breed.prot.sel.prob.BinarySelectionProblem.BinarySelectionProblem.eqcv_wt"]], "evalfn() (pybrops.breed.prot.sel.prob.binaryselectionproblem.binaryselectionproblem method)": [[266, "pybrops.breed.prot.sel.prob.BinarySelectionProblem.BinarySelectionProblem.evalfn"]], "exclude_from_serialization (pybrops.breed.prot.sel.prob.binaryselectionproblem.binaryselectionproblem property)": [[266, "pybrops.breed.prot.sel.prob.BinarySelectionProblem.BinarySelectionProblem.exclude_from_serialization"]], "ineqcv_trans (pybrops.breed.prot.sel.prob.binaryselectionproblem.binaryselectionproblem property)": [[266, "pybrops.breed.prot.sel.prob.BinarySelectionProblem.BinarySelectionProblem.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.prob.binaryselectionproblem.binaryselectionproblem property)": [[266, "pybrops.breed.prot.sel.prob.BinarySelectionProblem.BinarySelectionProblem.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.prob.binaryselectionproblem.binaryselectionproblem property)": [[266, "pybrops.breed.prot.sel.prob.BinarySelectionProblem.BinarySelectionProblem.ineqcv_wt"]], "latentfn() (pybrops.breed.prot.sel.prob.binaryselectionproblem.binaryselectionproblem method)": [[266, "pybrops.breed.prot.sel.prob.BinarySelectionProblem.BinarySelectionProblem.latentfn"]], "n_eq_constr (pybrops.breed.prot.sel.prob.binaryselectionproblem.binaryselectionproblem property)": [[266, "pybrops.breed.prot.sel.prob.BinarySelectionProblem.BinarySelectionProblem.n_eq_constr"]], "n_ieq_constr (pybrops.breed.prot.sel.prob.binaryselectionproblem.binaryselectionproblem property)": [[266, "pybrops.breed.prot.sel.prob.BinarySelectionProblem.BinarySelectionProblem.n_ieq_constr"]], "n_obj (pybrops.breed.prot.sel.prob.binaryselectionproblem.binaryselectionproblem property)": [[266, "pybrops.breed.prot.sel.prob.BinarySelectionProblem.BinarySelectionProblem.n_obj"]], "n_var (pybrops.breed.prot.sel.prob.binaryselectionproblem.binaryselectionproblem property)": [[266, "pybrops.breed.prot.sel.prob.BinarySelectionProblem.BinarySelectionProblem.n_var"]], "ndecn (pybrops.breed.prot.sel.prob.binaryselectionproblem.binaryselectionproblem property)": [[266, "pybrops.breed.prot.sel.prob.BinarySelectionProblem.BinarySelectionProblem.ndecn"]], "neqcv (pybrops.breed.prot.sel.prob.binaryselectionproblem.binaryselectionproblem property)": [[266, "pybrops.breed.prot.sel.prob.BinarySelectionProblem.BinarySelectionProblem.neqcv"]], "nineqcv (pybrops.breed.prot.sel.prob.binaryselectionproblem.binaryselectionproblem property)": [[266, "pybrops.breed.prot.sel.prob.BinarySelectionProblem.BinarySelectionProblem.nineqcv"]], "nlatent (pybrops.breed.prot.sel.prob.binaryselectionproblem.binaryselectionproblem property)": [[266, "pybrops.breed.prot.sel.prob.BinarySelectionProblem.BinarySelectionProblem.nlatent"]], "nobj (pybrops.breed.prot.sel.prob.binaryselectionproblem.binaryselectionproblem property)": [[266, "pybrops.breed.prot.sel.prob.BinarySelectionProblem.BinarySelectionProblem.nobj"]], "obj_trans (pybrops.breed.prot.sel.prob.binaryselectionproblem.binaryselectionproblem property)": [[266, "pybrops.breed.prot.sel.prob.BinarySelectionProblem.BinarySelectionProblem.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.prob.binaryselectionproblem.binaryselectionproblem property)": [[266, "pybrops.breed.prot.sel.prob.BinarySelectionProblem.BinarySelectionProblem.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.prob.binaryselectionproblem.binaryselectionproblem property)": [[266, "pybrops.breed.prot.sel.prob.BinarySelectionProblem.BinarySelectionProblem.obj_wt"]], "replace_nan_values_by (pybrops.breed.prot.sel.prob.binaryselectionproblem.binaryselectionproblem property)": [[266, "pybrops.breed.prot.sel.prob.BinarySelectionProblem.BinarySelectionProblem.replace_nan_values_by"]], "strict (pybrops.breed.prot.sel.prob.binaryselectionproblem.binaryselectionproblem property)": [[266, "pybrops.breed.prot.sel.prob.BinarySelectionProblem.BinarySelectionProblem.strict"]], "vars (pybrops.breed.prot.sel.prob.binaryselectionproblem.binaryselectionproblem property)": [[266, "pybrops.breed.prot.sel.prob.BinarySelectionProblem.BinarySelectionProblem.vars"]], "vtype (pybrops.breed.prot.sel.prob.binaryselectionproblem.binaryselectionproblem property)": [[266, "pybrops.breed.prot.sel.prob.BinarySelectionProblem.BinarySelectionProblem.vtype"]], "xl (pybrops.breed.prot.sel.prob.binaryselectionproblem.binaryselectionproblem property)": [[266, "pybrops.breed.prot.sel.prob.BinarySelectionProblem.BinarySelectionProblem.xl"]], "xu (pybrops.breed.prot.sel.prob.binaryselectionproblem.binaryselectionproblem property)": [[266, "pybrops.breed.prot.sel.prob.BinarySelectionProblem.BinarySelectionProblem.xu"]], "check_is_binaryselectionproblem() (in module pybrops.breed.prot.sel.prob.binaryselectionproblem)": [[267, "pybrops.breed.prot.sel.prob.BinarySelectionProblem.check_is_BinarySelectionProblem"]], "pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem": [[268, "module-pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem"]], "estimatedbreedingvaluebinaryselectionproblem (class in pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem)": [[269, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueBinarySelectionProblem"]], "callback (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvaluebinaryselectionproblem property)": [[269, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueBinarySelectionProblem.callback"]], "data (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvaluebinaryselectionproblem property)": [[269, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueBinarySelectionProblem.data"]], "decn_space (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvaluebinaryselectionproblem property)": [[269, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueBinarySelectionProblem.decn_space"]], "decn_space_lower (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvaluebinaryselectionproblem property)": [[269, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueBinarySelectionProblem.decn_space_lower"]], "decn_space_upper (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvaluebinaryselectionproblem property)": [[269, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueBinarySelectionProblem.decn_space_upper"]], "ebv (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvaluebinaryselectionproblem property)": [[269, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueBinarySelectionProblem.ebv"]], "elementwise (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvaluebinaryselectionproblem property)": [[269, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueBinarySelectionProblem.elementwise"]], "elementwise_func (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvaluebinaryselectionproblem property)": [[269, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueBinarySelectionProblem.elementwise_func"]], "elementwise_runner (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvaluebinaryselectionproblem property)": [[269, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueBinarySelectionProblem.elementwise_runner"]], "eqcv_trans (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvaluebinaryselectionproblem property)": [[269, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueBinarySelectionProblem.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvaluebinaryselectionproblem property)": [[269, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueBinarySelectionProblem.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvaluebinaryselectionproblem property)": [[269, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueBinarySelectionProblem.eqcv_wt"]], "evalfn() (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvaluebinaryselectionproblem method)": [[269, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueBinarySelectionProblem.evalfn"]], "exclude_from_serialization (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvaluebinaryselectionproblem property)": [[269, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueBinarySelectionProblem.exclude_from_serialization"]], "ineqcv_trans (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvaluebinaryselectionproblem property)": [[269, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueBinarySelectionProblem.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvaluebinaryselectionproblem property)": [[269, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueBinarySelectionProblem.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvaluebinaryselectionproblem property)": [[269, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueBinarySelectionProblem.ineqcv_wt"]], "latentfn() (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvaluebinaryselectionproblem method)": [[269, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueBinarySelectionProblem.latentfn"]], "n_eq_constr (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvaluebinaryselectionproblem property)": [[269, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueBinarySelectionProblem.n_eq_constr"]], "n_ieq_constr (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvaluebinaryselectionproblem property)": [[269, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueBinarySelectionProblem.n_ieq_constr"]], "n_obj (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvaluebinaryselectionproblem property)": [[269, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueBinarySelectionProblem.n_obj"]], "n_var (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvaluebinaryselectionproblem property)": [[269, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueBinarySelectionProblem.n_var"]], "ndecn (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvaluebinaryselectionproblem property)": [[269, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueBinarySelectionProblem.ndecn"]], "neqcv (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvaluebinaryselectionproblem property)": [[269, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueBinarySelectionProblem.neqcv"]], "nineqcv (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvaluebinaryselectionproblem property)": [[269, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueBinarySelectionProblem.nineqcv"]], "nlatent (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvaluebinaryselectionproblem property)": [[269, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueBinarySelectionProblem.nlatent"]], "nobj (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvaluebinaryselectionproblem property)": [[269, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueBinarySelectionProblem.nobj"]], "obj_trans (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvaluebinaryselectionproblem property)": [[269, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueBinarySelectionProblem.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvaluebinaryselectionproblem property)": [[269, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueBinarySelectionProblem.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvaluebinaryselectionproblem property)": [[269, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueBinarySelectionProblem.obj_wt"]], "replace_nan_values_by (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvaluebinaryselectionproblem property)": [[269, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueBinarySelectionProblem.replace_nan_values_by"]], "strict (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvaluebinaryselectionproblem property)": [[269, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueBinarySelectionProblem.strict"]], "vars (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvaluebinaryselectionproblem property)": [[269, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueBinarySelectionProblem.vars"]], "vtype (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvaluebinaryselectionproblem property)": [[269, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueBinarySelectionProblem.vtype"]], "xl (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvaluebinaryselectionproblem property)": [[269, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueBinarySelectionProblem.xl"]], "xu (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvaluebinaryselectionproblem property)": [[269, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueBinarySelectionProblem.xu"]], "estimatedbreedingvalueintegerselectionproblem (class in pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem)": [[270, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueIntegerSelectionProblem"]], "callback (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvalueintegerselectionproblem property)": [[270, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueIntegerSelectionProblem.callback"]], "data (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvalueintegerselectionproblem property)": [[270, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueIntegerSelectionProblem.data"]], "decn_space (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvalueintegerselectionproblem property)": [[270, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueIntegerSelectionProblem.decn_space"]], "decn_space_lower (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvalueintegerselectionproblem property)": [[270, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueIntegerSelectionProblem.decn_space_lower"]], "decn_space_upper (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvalueintegerselectionproblem property)": [[270, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueIntegerSelectionProblem.decn_space_upper"]], "ebv (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvalueintegerselectionproblem property)": [[270, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueIntegerSelectionProblem.ebv"]], "elementwise (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvalueintegerselectionproblem property)": [[270, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueIntegerSelectionProblem.elementwise"]], "elementwise_func (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvalueintegerselectionproblem property)": [[270, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueIntegerSelectionProblem.elementwise_func"]], "elementwise_runner (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvalueintegerselectionproblem property)": [[270, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueIntegerSelectionProblem.elementwise_runner"]], "eqcv_trans (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvalueintegerselectionproblem property)": [[270, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueIntegerSelectionProblem.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvalueintegerselectionproblem property)": [[270, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueIntegerSelectionProblem.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvalueintegerselectionproblem property)": [[270, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueIntegerSelectionProblem.eqcv_wt"]], "evalfn() (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvalueintegerselectionproblem method)": [[270, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueIntegerSelectionProblem.evalfn"]], "exclude_from_serialization (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvalueintegerselectionproblem property)": [[270, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueIntegerSelectionProblem.exclude_from_serialization"]], "ineqcv_trans (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvalueintegerselectionproblem property)": [[270, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueIntegerSelectionProblem.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvalueintegerselectionproblem property)": [[270, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueIntegerSelectionProblem.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvalueintegerselectionproblem property)": [[270, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueIntegerSelectionProblem.ineqcv_wt"]], "latentfn() (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvalueintegerselectionproblem method)": [[270, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueIntegerSelectionProblem.latentfn"]], "n_eq_constr (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvalueintegerselectionproblem property)": [[270, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueIntegerSelectionProblem.n_eq_constr"]], "n_ieq_constr (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvalueintegerselectionproblem property)": [[270, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueIntegerSelectionProblem.n_ieq_constr"]], "n_obj (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvalueintegerselectionproblem property)": [[270, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueIntegerSelectionProblem.n_obj"]], "n_var (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvalueintegerselectionproblem property)": [[270, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueIntegerSelectionProblem.n_var"]], "ndecn (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvalueintegerselectionproblem property)": [[270, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueIntegerSelectionProblem.ndecn"]], "neqcv (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvalueintegerselectionproblem property)": [[270, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueIntegerSelectionProblem.neqcv"]], "nineqcv (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvalueintegerselectionproblem property)": [[270, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueIntegerSelectionProblem.nineqcv"]], "nlatent (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvalueintegerselectionproblem property)": [[270, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueIntegerSelectionProblem.nlatent"]], "nobj (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvalueintegerselectionproblem property)": [[270, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueIntegerSelectionProblem.nobj"]], "obj_trans (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvalueintegerselectionproblem property)": [[270, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueIntegerSelectionProblem.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvalueintegerselectionproblem property)": [[270, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueIntegerSelectionProblem.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvalueintegerselectionproblem property)": [[270, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueIntegerSelectionProblem.obj_wt"]], "replace_nan_values_by (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvalueintegerselectionproblem property)": [[270, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueIntegerSelectionProblem.replace_nan_values_by"]], "strict (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvalueintegerselectionproblem property)": [[270, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueIntegerSelectionProblem.strict"]], "vars (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvalueintegerselectionproblem property)": [[270, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueIntegerSelectionProblem.vars"]], "vtype (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvalueintegerselectionproblem property)": [[270, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueIntegerSelectionProblem.vtype"]], "xl (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvalueintegerselectionproblem property)": [[270, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueIntegerSelectionProblem.xl"]], "xu (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvalueintegerselectionproblem property)": [[270, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueIntegerSelectionProblem.xu"]], "estimatedbreedingvaluerealselectionproblem (class in pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem)": [[271, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueRealSelectionProblem"]], "callback (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvaluerealselectionproblem property)": [[271, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueRealSelectionProblem.callback"]], "data (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvaluerealselectionproblem property)": [[271, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueRealSelectionProblem.data"]], "decn_space (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvaluerealselectionproblem property)": [[271, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueRealSelectionProblem.decn_space"]], "decn_space_lower (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvaluerealselectionproblem property)": [[271, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueRealSelectionProblem.decn_space_lower"]], "decn_space_upper (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvaluerealselectionproblem property)": [[271, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueRealSelectionProblem.decn_space_upper"]], "ebv (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvaluerealselectionproblem property)": [[271, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueRealSelectionProblem.ebv"]], "elementwise (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvaluerealselectionproblem property)": [[271, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueRealSelectionProblem.elementwise"]], "elementwise_func (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvaluerealselectionproblem property)": [[271, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueRealSelectionProblem.elementwise_func"]], "elementwise_runner (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvaluerealselectionproblem property)": [[271, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueRealSelectionProblem.elementwise_runner"]], "eqcv_trans (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvaluerealselectionproblem property)": [[271, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueRealSelectionProblem.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvaluerealselectionproblem property)": [[271, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueRealSelectionProblem.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvaluerealselectionproblem property)": [[271, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueRealSelectionProblem.eqcv_wt"]], "evalfn() (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvaluerealselectionproblem method)": [[271, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueRealSelectionProblem.evalfn"]], "exclude_from_serialization (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvaluerealselectionproblem property)": [[271, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueRealSelectionProblem.exclude_from_serialization"]], "ineqcv_trans (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvaluerealselectionproblem property)": [[271, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueRealSelectionProblem.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvaluerealselectionproblem property)": [[271, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueRealSelectionProblem.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvaluerealselectionproblem property)": [[271, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueRealSelectionProblem.ineqcv_wt"]], "latentfn() (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvaluerealselectionproblem method)": [[271, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueRealSelectionProblem.latentfn"]], "n_eq_constr (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvaluerealselectionproblem property)": [[271, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueRealSelectionProblem.n_eq_constr"]], "n_ieq_constr (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvaluerealselectionproblem property)": [[271, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueRealSelectionProblem.n_ieq_constr"]], "n_obj (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvaluerealselectionproblem property)": [[271, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueRealSelectionProblem.n_obj"]], "n_var (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvaluerealselectionproblem property)": [[271, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueRealSelectionProblem.n_var"]], "ndecn (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvaluerealselectionproblem property)": [[271, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueRealSelectionProblem.ndecn"]], "neqcv (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvaluerealselectionproblem property)": [[271, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueRealSelectionProblem.neqcv"]], "nineqcv (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvaluerealselectionproblem property)": [[271, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueRealSelectionProblem.nineqcv"]], "nlatent (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvaluerealselectionproblem property)": [[271, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueRealSelectionProblem.nlatent"]], "nobj (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvaluerealselectionproblem property)": [[271, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueRealSelectionProblem.nobj"]], "obj_trans (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvaluerealselectionproblem property)": [[271, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueRealSelectionProblem.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvaluerealselectionproblem property)": [[271, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueRealSelectionProblem.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvaluerealselectionproblem property)": [[271, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueRealSelectionProblem.obj_wt"]], "replace_nan_values_by (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvaluerealselectionproblem property)": [[271, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueRealSelectionProblem.replace_nan_values_by"]], "strict (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvaluerealselectionproblem property)": [[271, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueRealSelectionProblem.strict"]], "vars (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvaluerealselectionproblem property)": [[271, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueRealSelectionProblem.vars"]], "vtype (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvaluerealselectionproblem property)": [[271, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueRealSelectionProblem.vtype"]], "xl (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvaluerealselectionproblem property)": [[271, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueRealSelectionProblem.xl"]], "xu (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvaluerealselectionproblem property)": [[271, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueRealSelectionProblem.xu"]], "estimatedbreedingvalueselectionproblemmixin (class in pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem)": [[272, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueSelectionProblemMixin"]], "ebv (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvalueselectionproblemmixin property)": [[272, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueSelectionProblemMixin.ebv"]], "nlatent (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvalueselectionproblemmixin property)": [[272, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueSelectionProblemMixin.nlatent"]], "estimatedbreedingvaluesubsetselectionproblem (class in pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem)": [[273, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueSubsetSelectionProblem"]], "callback (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvaluesubsetselectionproblem property)": [[273, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueSubsetSelectionProblem.callback"]], "data (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvaluesubsetselectionproblem property)": [[273, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueSubsetSelectionProblem.data"]], "decn_space (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvaluesubsetselectionproblem property)": [[273, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueSubsetSelectionProblem.decn_space"]], "decn_space_lower (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvaluesubsetselectionproblem property)": [[273, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueSubsetSelectionProblem.decn_space_lower"]], "decn_space_upper (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvaluesubsetselectionproblem property)": [[273, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueSubsetSelectionProblem.decn_space_upper"]], "ebv (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvaluesubsetselectionproblem property)": [[273, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueSubsetSelectionProblem.ebv"]], "elementwise (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvaluesubsetselectionproblem property)": [[273, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueSubsetSelectionProblem.elementwise"]], "elementwise_func (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvaluesubsetselectionproblem property)": [[273, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueSubsetSelectionProblem.elementwise_func"]], "elementwise_runner (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvaluesubsetselectionproblem property)": [[273, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueSubsetSelectionProblem.elementwise_runner"]], "eqcv_trans (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvaluesubsetselectionproblem property)": [[273, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueSubsetSelectionProblem.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvaluesubsetselectionproblem property)": [[273, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueSubsetSelectionProblem.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvaluesubsetselectionproblem property)": [[273, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueSubsetSelectionProblem.eqcv_wt"]], "evalfn() (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvaluesubsetselectionproblem method)": [[273, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueSubsetSelectionProblem.evalfn"]], "exclude_from_serialization (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvaluesubsetselectionproblem property)": [[273, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueSubsetSelectionProblem.exclude_from_serialization"]], "ineqcv_trans (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvaluesubsetselectionproblem property)": [[273, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueSubsetSelectionProblem.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvaluesubsetselectionproblem property)": [[273, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueSubsetSelectionProblem.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvaluesubsetselectionproblem property)": [[273, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueSubsetSelectionProblem.ineqcv_wt"]], "latentfn() (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvaluesubsetselectionproblem method)": [[273, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueSubsetSelectionProblem.latentfn"]], "n_eq_constr (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvaluesubsetselectionproblem property)": [[273, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueSubsetSelectionProblem.n_eq_constr"]], "n_ieq_constr (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvaluesubsetselectionproblem property)": [[273, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueSubsetSelectionProblem.n_ieq_constr"]], "n_obj (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvaluesubsetselectionproblem property)": [[273, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueSubsetSelectionProblem.n_obj"]], "n_var (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvaluesubsetselectionproblem property)": [[273, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueSubsetSelectionProblem.n_var"]], "ndecn (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvaluesubsetselectionproblem property)": [[273, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueSubsetSelectionProblem.ndecn"]], "neqcv (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvaluesubsetselectionproblem property)": [[273, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueSubsetSelectionProblem.neqcv"]], "nineqcv (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvaluesubsetselectionproblem property)": [[273, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueSubsetSelectionProblem.nineqcv"]], "nlatent (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvaluesubsetselectionproblem property)": [[273, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueSubsetSelectionProblem.nlatent"]], "nobj (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvaluesubsetselectionproblem property)": [[273, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueSubsetSelectionProblem.nobj"]], "obj_trans (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvaluesubsetselectionproblem property)": [[273, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueSubsetSelectionProblem.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvaluesubsetselectionproblem property)": [[273, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueSubsetSelectionProblem.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvaluesubsetselectionproblem property)": [[273, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueSubsetSelectionProblem.obj_wt"]], "replace_nan_values_by (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvaluesubsetselectionproblem property)": [[273, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueSubsetSelectionProblem.replace_nan_values_by"]], "strict (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvaluesubsetselectionproblem property)": [[273, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueSubsetSelectionProblem.strict"]], "vars (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvaluesubsetselectionproblem property)": [[273, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueSubsetSelectionProblem.vars"]], "vtype (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvaluesubsetselectionproblem property)": [[273, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueSubsetSelectionProblem.vtype"]], "xl (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvaluesubsetselectionproblem property)": [[273, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueSubsetSelectionProblem.xl"]], "xu (pybrops.breed.prot.sel.prob.estimatedbreedingvalueselectionproblem.estimatedbreedingvaluesubsetselectionproblem property)": [[273, "pybrops.breed.prot.sel.prob.EstimatedBreedingValueSelectionProblem.EstimatedBreedingValueSubsetSelectionProblem.xu"]], "pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem": [[274, "module-pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem"]], "expectedmaximumbreedingvaluebinaryselectionproblem (class in pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem)": [[275, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueBinarySelectionProblem"]], "callback (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvaluebinaryselectionproblem property)": [[275, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueBinarySelectionProblem.callback"]], "data (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvaluebinaryselectionproblem property)": [[275, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueBinarySelectionProblem.data"]], "decn_space (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvaluebinaryselectionproblem property)": [[275, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueBinarySelectionProblem.decn_space"]], "decn_space_lower (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvaluebinaryselectionproblem property)": [[275, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueBinarySelectionProblem.decn_space_lower"]], "decn_space_upper (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvaluebinaryselectionproblem property)": [[275, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueBinarySelectionProblem.decn_space_upper"]], "elementwise (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvaluebinaryselectionproblem property)": [[275, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueBinarySelectionProblem.elementwise"]], "elementwise_func (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvaluebinaryselectionproblem property)": [[275, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueBinarySelectionProblem.elementwise_func"]], "elementwise_runner (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvaluebinaryselectionproblem property)": [[275, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueBinarySelectionProblem.elementwise_runner"]], "embv (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvaluebinaryselectionproblem property)": [[275, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueBinarySelectionProblem.embv"]], "eqcv_trans (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvaluebinaryselectionproblem property)": [[275, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueBinarySelectionProblem.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvaluebinaryselectionproblem property)": [[275, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueBinarySelectionProblem.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvaluebinaryselectionproblem property)": [[275, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueBinarySelectionProblem.eqcv_wt"]], "evalfn() (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvaluebinaryselectionproblem method)": [[275, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueBinarySelectionProblem.evalfn"]], "exclude_from_serialization (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvaluebinaryselectionproblem property)": [[275, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueBinarySelectionProblem.exclude_from_serialization"]], "ineqcv_trans (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvaluebinaryselectionproblem property)": [[275, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueBinarySelectionProblem.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvaluebinaryselectionproblem property)": [[275, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueBinarySelectionProblem.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvaluebinaryselectionproblem property)": [[275, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueBinarySelectionProblem.ineqcv_wt"]], "latentfn() (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvaluebinaryselectionproblem method)": [[275, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueBinarySelectionProblem.latentfn"]], "n_eq_constr (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvaluebinaryselectionproblem property)": [[275, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueBinarySelectionProblem.n_eq_constr"]], "n_ieq_constr (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvaluebinaryselectionproblem property)": [[275, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueBinarySelectionProblem.n_ieq_constr"]], "n_obj (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvaluebinaryselectionproblem property)": [[275, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueBinarySelectionProblem.n_obj"]], "n_var (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvaluebinaryselectionproblem property)": [[275, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueBinarySelectionProblem.n_var"]], "ndecn (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvaluebinaryselectionproblem property)": [[275, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueBinarySelectionProblem.ndecn"]], "neqcv (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvaluebinaryselectionproblem property)": [[275, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueBinarySelectionProblem.neqcv"]], "nineqcv (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvaluebinaryselectionproblem property)": [[275, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueBinarySelectionProblem.nineqcv"]], "nlatent (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvaluebinaryselectionproblem property)": [[275, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueBinarySelectionProblem.nlatent"]], "nobj (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvaluebinaryselectionproblem property)": [[275, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueBinarySelectionProblem.nobj"]], "obj_trans (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvaluebinaryselectionproblem property)": [[275, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueBinarySelectionProblem.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvaluebinaryselectionproblem property)": [[275, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueBinarySelectionProblem.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvaluebinaryselectionproblem property)": [[275, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueBinarySelectionProblem.obj_wt"]], "replace_nan_values_by (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvaluebinaryselectionproblem property)": [[275, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueBinarySelectionProblem.replace_nan_values_by"]], "strict (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvaluebinaryselectionproblem property)": [[275, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueBinarySelectionProblem.strict"]], "vars (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvaluebinaryselectionproblem property)": [[275, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueBinarySelectionProblem.vars"]], "vtype (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvaluebinaryselectionproblem property)": [[275, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueBinarySelectionProblem.vtype"]], "xl (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvaluebinaryselectionproblem property)": [[275, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueBinarySelectionProblem.xl"]], "xu (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvaluebinaryselectionproblem property)": [[275, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueBinarySelectionProblem.xu"]], "expectedmaximumbreedingvalueintegerselectionproblem (class in pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem)": [[276, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueIntegerSelectionProblem"]], "callback (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvalueintegerselectionproblem property)": [[276, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueIntegerSelectionProblem.callback"]], "data (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvalueintegerselectionproblem property)": [[276, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueIntegerSelectionProblem.data"]], "decn_space (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvalueintegerselectionproblem property)": [[276, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueIntegerSelectionProblem.decn_space"]], "decn_space_lower (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvalueintegerselectionproblem property)": [[276, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueIntegerSelectionProblem.decn_space_lower"]], "decn_space_upper (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvalueintegerselectionproblem property)": [[276, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueIntegerSelectionProblem.decn_space_upper"]], "elementwise (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvalueintegerselectionproblem property)": [[276, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueIntegerSelectionProblem.elementwise"]], "elementwise_func (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvalueintegerselectionproblem property)": [[276, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueIntegerSelectionProblem.elementwise_func"]], "elementwise_runner (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvalueintegerselectionproblem property)": [[276, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueIntegerSelectionProblem.elementwise_runner"]], "embv (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvalueintegerselectionproblem property)": [[276, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueIntegerSelectionProblem.embv"]], "eqcv_trans (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvalueintegerselectionproblem property)": [[276, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueIntegerSelectionProblem.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvalueintegerselectionproblem property)": [[276, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueIntegerSelectionProblem.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvalueintegerselectionproblem property)": [[276, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueIntegerSelectionProblem.eqcv_wt"]], "evalfn() (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvalueintegerselectionproblem method)": [[276, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueIntegerSelectionProblem.evalfn"]], "exclude_from_serialization (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvalueintegerselectionproblem property)": [[276, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueIntegerSelectionProblem.exclude_from_serialization"]], "ineqcv_trans (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvalueintegerselectionproblem property)": [[276, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueIntegerSelectionProblem.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvalueintegerselectionproblem property)": [[276, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueIntegerSelectionProblem.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvalueintegerselectionproblem property)": [[276, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueIntegerSelectionProblem.ineqcv_wt"]], "latentfn() (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvalueintegerselectionproblem method)": [[276, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueIntegerSelectionProblem.latentfn"]], "n_eq_constr (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvalueintegerselectionproblem property)": [[276, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueIntegerSelectionProblem.n_eq_constr"]], "n_ieq_constr (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvalueintegerselectionproblem property)": [[276, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueIntegerSelectionProblem.n_ieq_constr"]], "n_obj (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvalueintegerselectionproblem property)": [[276, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueIntegerSelectionProblem.n_obj"]], "n_var (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvalueintegerselectionproblem property)": [[276, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueIntegerSelectionProblem.n_var"]], "ndecn (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvalueintegerselectionproblem property)": [[276, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueIntegerSelectionProblem.ndecn"]], "neqcv (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvalueintegerselectionproblem property)": [[276, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueIntegerSelectionProblem.neqcv"]], "nineqcv (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvalueintegerselectionproblem property)": [[276, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueIntegerSelectionProblem.nineqcv"]], "nlatent (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvalueintegerselectionproblem property)": [[276, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueIntegerSelectionProblem.nlatent"]], "nobj (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvalueintegerselectionproblem property)": [[276, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueIntegerSelectionProblem.nobj"]], "obj_trans (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvalueintegerselectionproblem property)": [[276, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueIntegerSelectionProblem.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvalueintegerselectionproblem property)": [[276, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueIntegerSelectionProblem.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvalueintegerselectionproblem property)": [[276, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueIntegerSelectionProblem.obj_wt"]], "replace_nan_values_by (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvalueintegerselectionproblem property)": [[276, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueIntegerSelectionProblem.replace_nan_values_by"]], "strict (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvalueintegerselectionproblem property)": [[276, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueIntegerSelectionProblem.strict"]], "vars (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvalueintegerselectionproblem property)": [[276, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueIntegerSelectionProblem.vars"]], "vtype (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvalueintegerselectionproblem property)": [[276, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueIntegerSelectionProblem.vtype"]], "xl (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvalueintegerselectionproblem property)": [[276, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueIntegerSelectionProblem.xl"]], "xu (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvalueintegerselectionproblem property)": [[276, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueIntegerSelectionProblem.xu"]], "expectedmaximumbreedingvaluerealselectionproblem (class in pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem)": [[277, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueRealSelectionProblem"]], "callback (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvaluerealselectionproblem property)": [[277, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueRealSelectionProblem.callback"]], "data (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvaluerealselectionproblem property)": [[277, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueRealSelectionProblem.data"]], "decn_space (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvaluerealselectionproblem property)": [[277, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueRealSelectionProblem.decn_space"]], "decn_space_lower (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvaluerealselectionproblem property)": [[277, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueRealSelectionProblem.decn_space_lower"]], "decn_space_upper (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvaluerealselectionproblem property)": [[277, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueRealSelectionProblem.decn_space_upper"]], "elementwise (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvaluerealselectionproblem property)": [[277, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueRealSelectionProblem.elementwise"]], "elementwise_func (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvaluerealselectionproblem property)": [[277, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueRealSelectionProblem.elementwise_func"]], "elementwise_runner (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvaluerealselectionproblem property)": [[277, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueRealSelectionProblem.elementwise_runner"]], "embv (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvaluerealselectionproblem property)": [[277, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueRealSelectionProblem.embv"]], "eqcv_trans (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvaluerealselectionproblem property)": [[277, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueRealSelectionProblem.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvaluerealselectionproblem property)": [[277, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueRealSelectionProblem.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvaluerealselectionproblem property)": [[277, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueRealSelectionProblem.eqcv_wt"]], "evalfn() (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvaluerealselectionproblem method)": [[277, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueRealSelectionProblem.evalfn"]], "exclude_from_serialization (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvaluerealselectionproblem property)": [[277, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueRealSelectionProblem.exclude_from_serialization"]], "ineqcv_trans (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvaluerealselectionproblem property)": [[277, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueRealSelectionProblem.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvaluerealselectionproblem property)": [[277, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueRealSelectionProblem.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvaluerealselectionproblem property)": [[277, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueRealSelectionProblem.ineqcv_wt"]], "latentfn() (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvaluerealselectionproblem method)": [[277, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueRealSelectionProblem.latentfn"]], "n_eq_constr (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvaluerealselectionproblem property)": [[277, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueRealSelectionProblem.n_eq_constr"]], "n_ieq_constr (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvaluerealselectionproblem property)": [[277, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueRealSelectionProblem.n_ieq_constr"]], "n_obj (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvaluerealselectionproblem property)": [[277, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueRealSelectionProblem.n_obj"]], "n_var (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvaluerealselectionproblem property)": [[277, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueRealSelectionProblem.n_var"]], "ndecn (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvaluerealselectionproblem property)": [[277, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueRealSelectionProblem.ndecn"]], "neqcv (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvaluerealselectionproblem property)": [[277, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueRealSelectionProblem.neqcv"]], "nineqcv (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvaluerealselectionproblem property)": [[277, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueRealSelectionProblem.nineqcv"]], "nlatent (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvaluerealselectionproblem property)": [[277, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueRealSelectionProblem.nlatent"]], "nobj (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvaluerealselectionproblem property)": [[277, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueRealSelectionProblem.nobj"]], "obj_trans (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvaluerealselectionproblem property)": [[277, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueRealSelectionProblem.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvaluerealselectionproblem property)": [[277, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueRealSelectionProblem.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvaluerealselectionproblem property)": [[277, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueRealSelectionProblem.obj_wt"]], "replace_nan_values_by (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvaluerealselectionproblem property)": [[277, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueRealSelectionProblem.replace_nan_values_by"]], "strict (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvaluerealselectionproblem property)": [[277, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueRealSelectionProblem.strict"]], "vars (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvaluerealselectionproblem property)": [[277, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueRealSelectionProblem.vars"]], "vtype (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvaluerealselectionproblem property)": [[277, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueRealSelectionProblem.vtype"]], "xl (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvaluerealselectionproblem property)": [[277, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueRealSelectionProblem.xl"]], "xu (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvaluerealselectionproblem property)": [[277, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueRealSelectionProblem.xu"]], "expectedmaximumbreedingvalueselectionproblemmixin (class in pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem)": [[278, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueSelectionProblemMixin"]], "embv (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvalueselectionproblemmixin property)": [[278, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueSelectionProblemMixin.embv"]], "nlatent (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvalueselectionproblemmixin property)": [[278, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueSelectionProblemMixin.nlatent"]], "expectedmaximumbreedingvaluesubsetselectionproblem (class in pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem)": [[279, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueSubsetSelectionProblem"]], "callback (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvaluesubsetselectionproblem property)": [[279, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueSubsetSelectionProblem.callback"]], "data (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvaluesubsetselectionproblem property)": [[279, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueSubsetSelectionProblem.data"]], "decn_space (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvaluesubsetselectionproblem property)": [[279, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueSubsetSelectionProblem.decn_space"]], "decn_space_lower (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvaluesubsetselectionproblem property)": [[279, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueSubsetSelectionProblem.decn_space_lower"]], "decn_space_upper (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvaluesubsetselectionproblem property)": [[279, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueSubsetSelectionProblem.decn_space_upper"]], "elementwise (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvaluesubsetselectionproblem property)": [[279, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueSubsetSelectionProblem.elementwise"]], "elementwise_func (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvaluesubsetselectionproblem property)": [[279, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueSubsetSelectionProblem.elementwise_func"]], "elementwise_runner (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvaluesubsetselectionproblem property)": [[279, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueSubsetSelectionProblem.elementwise_runner"]], "embv (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvaluesubsetselectionproblem property)": [[279, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueSubsetSelectionProblem.embv"]], "eqcv_trans (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvaluesubsetselectionproblem property)": [[279, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueSubsetSelectionProblem.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvaluesubsetselectionproblem property)": [[279, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueSubsetSelectionProblem.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvaluesubsetselectionproblem property)": [[279, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueSubsetSelectionProblem.eqcv_wt"]], "evalfn() (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvaluesubsetselectionproblem method)": [[279, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueSubsetSelectionProblem.evalfn"]], "exclude_from_serialization (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvaluesubsetselectionproblem property)": [[279, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueSubsetSelectionProblem.exclude_from_serialization"]], "ineqcv_trans (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvaluesubsetselectionproblem property)": [[279, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueSubsetSelectionProblem.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvaluesubsetselectionproblem property)": [[279, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueSubsetSelectionProblem.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvaluesubsetselectionproblem property)": [[279, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueSubsetSelectionProblem.ineqcv_wt"]], "latentfn() (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvaluesubsetselectionproblem method)": [[279, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueSubsetSelectionProblem.latentfn"]], "n_eq_constr (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvaluesubsetselectionproblem property)": [[279, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueSubsetSelectionProblem.n_eq_constr"]], "n_ieq_constr (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvaluesubsetselectionproblem property)": [[279, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueSubsetSelectionProblem.n_ieq_constr"]], "n_obj (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvaluesubsetselectionproblem property)": [[279, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueSubsetSelectionProblem.n_obj"]], "n_var (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvaluesubsetselectionproblem property)": [[279, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueSubsetSelectionProblem.n_var"]], "ndecn (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvaluesubsetselectionproblem property)": [[279, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueSubsetSelectionProblem.ndecn"]], "neqcv (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvaluesubsetselectionproblem property)": [[279, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueSubsetSelectionProblem.neqcv"]], "nineqcv (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvaluesubsetselectionproblem property)": [[279, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueSubsetSelectionProblem.nineqcv"]], "nlatent (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvaluesubsetselectionproblem property)": [[279, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueSubsetSelectionProblem.nlatent"]], "nobj (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvaluesubsetselectionproblem property)": [[279, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueSubsetSelectionProblem.nobj"]], "obj_trans (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvaluesubsetselectionproblem property)": [[279, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueSubsetSelectionProblem.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvaluesubsetselectionproblem property)": [[279, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueSubsetSelectionProblem.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvaluesubsetselectionproblem property)": [[279, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueSubsetSelectionProblem.obj_wt"]], "replace_nan_values_by (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvaluesubsetselectionproblem property)": [[279, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueSubsetSelectionProblem.replace_nan_values_by"]], "strict (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvaluesubsetselectionproblem property)": [[279, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueSubsetSelectionProblem.strict"]], "vars (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvaluesubsetselectionproblem property)": [[279, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueSubsetSelectionProblem.vars"]], "vtype (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvaluesubsetselectionproblem property)": [[279, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueSubsetSelectionProblem.vtype"]], "xl (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvaluesubsetselectionproblem property)": [[279, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueSubsetSelectionProblem.xl"]], "xu (pybrops.breed.prot.sel.prob.expectedmaximumbreedingvalueselectionproblem.expectedmaximumbreedingvaluesubsetselectionproblem property)": [[279, "pybrops.breed.prot.sel.prob.ExpectedMaximumBreedingValueSelectionProblem.ExpectedMaximumBreedingValueSubsetSelectionProblem.xu"]], "pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem": [[280, "module-pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem"]], "familyestimatedbreedingvaluebinaryselectionproblem (class in pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem)": [[281, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueBinarySelectionProblem"]], "callback (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvaluebinaryselectionproblem property)": [[281, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueBinarySelectionProblem.callback"]], "data (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvaluebinaryselectionproblem property)": [[281, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueBinarySelectionProblem.data"]], "decn_space (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvaluebinaryselectionproblem property)": [[281, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueBinarySelectionProblem.decn_space"]], "decn_space_lower (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvaluebinaryselectionproblem property)": [[281, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueBinarySelectionProblem.decn_space_lower"]], "decn_space_upper (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvaluebinaryselectionproblem property)": [[281, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueBinarySelectionProblem.decn_space_upper"]], "ebv (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvaluebinaryselectionproblem property)": [[281, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueBinarySelectionProblem.ebv"]], "elementwise (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvaluebinaryselectionproblem property)": [[281, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueBinarySelectionProblem.elementwise"]], "elementwise_func (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvaluebinaryselectionproblem property)": [[281, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueBinarySelectionProblem.elementwise_func"]], "elementwise_runner (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvaluebinaryselectionproblem property)": [[281, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueBinarySelectionProblem.elementwise_runner"]], "eqcv_trans (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvaluebinaryselectionproblem property)": [[281, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueBinarySelectionProblem.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvaluebinaryselectionproblem property)": [[281, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueBinarySelectionProblem.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvaluebinaryselectionproblem property)": [[281, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueBinarySelectionProblem.eqcv_wt"]], "evalfn() (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvaluebinaryselectionproblem method)": [[281, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueBinarySelectionProblem.evalfn"]], "exclude_from_serialization (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvaluebinaryselectionproblem property)": [[281, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueBinarySelectionProblem.exclude_from_serialization"]], "family (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvaluebinaryselectionproblem property)": [[281, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueBinarySelectionProblem.family"]], "familyid (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvaluebinaryselectionproblem property)": [[281, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueBinarySelectionProblem.familyid"]], "familyix (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvaluebinaryselectionproblem property)": [[281, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueBinarySelectionProblem.familyix"]], "ineqcv_trans (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvaluebinaryselectionproblem property)": [[281, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueBinarySelectionProblem.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvaluebinaryselectionproblem property)": [[281, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueBinarySelectionProblem.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvaluebinaryselectionproblem property)": [[281, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueBinarySelectionProblem.ineqcv_wt"]], "latentfn() (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvaluebinaryselectionproblem method)": [[281, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueBinarySelectionProblem.latentfn"]], "n_eq_constr (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvaluebinaryselectionproblem property)": [[281, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueBinarySelectionProblem.n_eq_constr"]], "n_ieq_constr (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvaluebinaryselectionproblem property)": [[281, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueBinarySelectionProblem.n_ieq_constr"]], "n_obj (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvaluebinaryselectionproblem property)": [[281, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueBinarySelectionProblem.n_obj"]], "n_var (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvaluebinaryselectionproblem property)": [[281, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueBinarySelectionProblem.n_var"]], "ndecn (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvaluebinaryselectionproblem property)": [[281, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueBinarySelectionProblem.ndecn"]], "neqcv (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvaluebinaryselectionproblem property)": [[281, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueBinarySelectionProblem.neqcv"]], "nineqcv (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvaluebinaryselectionproblem property)": [[281, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueBinarySelectionProblem.nineqcv"]], "nlatent (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvaluebinaryselectionproblem property)": [[281, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueBinarySelectionProblem.nlatent"]], "nobj (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvaluebinaryselectionproblem property)": [[281, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueBinarySelectionProblem.nobj"]], "obj_trans (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvaluebinaryselectionproblem property)": [[281, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueBinarySelectionProblem.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvaluebinaryselectionproblem property)": [[281, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueBinarySelectionProblem.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvaluebinaryselectionproblem property)": [[281, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueBinarySelectionProblem.obj_wt"]], "replace_nan_values_by (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvaluebinaryselectionproblem property)": [[281, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueBinarySelectionProblem.replace_nan_values_by"]], "strict (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvaluebinaryselectionproblem property)": [[281, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueBinarySelectionProblem.strict"]], "vars (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvaluebinaryselectionproblem property)": [[281, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueBinarySelectionProblem.vars"]], "vtype (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvaluebinaryselectionproblem property)": [[281, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueBinarySelectionProblem.vtype"]], "xl (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvaluebinaryselectionproblem property)": [[281, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueBinarySelectionProblem.xl"]], "xu (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvaluebinaryselectionproblem property)": [[281, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueBinarySelectionProblem.xu"]], "familyestimatedbreedingvalueintegerselectionproblem (class in pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem)": [[282, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueIntegerSelectionProblem"]], "callback (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvalueintegerselectionproblem property)": [[282, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueIntegerSelectionProblem.callback"]], "data (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvalueintegerselectionproblem property)": [[282, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueIntegerSelectionProblem.data"]], "decn_space (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvalueintegerselectionproblem property)": [[282, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueIntegerSelectionProblem.decn_space"]], "decn_space_lower (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvalueintegerselectionproblem property)": [[282, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueIntegerSelectionProblem.decn_space_lower"]], "decn_space_upper (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvalueintegerselectionproblem property)": [[282, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueIntegerSelectionProblem.decn_space_upper"]], "ebv (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvalueintegerselectionproblem property)": [[282, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueIntegerSelectionProblem.ebv"]], "elementwise (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvalueintegerselectionproblem property)": [[282, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueIntegerSelectionProblem.elementwise"]], "elementwise_func (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvalueintegerselectionproblem property)": [[282, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueIntegerSelectionProblem.elementwise_func"]], "elementwise_runner (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvalueintegerselectionproblem property)": [[282, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueIntegerSelectionProblem.elementwise_runner"]], "eqcv_trans (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvalueintegerselectionproblem property)": [[282, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueIntegerSelectionProblem.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvalueintegerselectionproblem property)": [[282, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueIntegerSelectionProblem.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvalueintegerselectionproblem property)": [[282, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueIntegerSelectionProblem.eqcv_wt"]], "evalfn() (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvalueintegerselectionproblem method)": [[282, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueIntegerSelectionProblem.evalfn"]], "exclude_from_serialization (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvalueintegerselectionproblem property)": [[282, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueIntegerSelectionProblem.exclude_from_serialization"]], "family (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvalueintegerselectionproblem property)": [[282, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueIntegerSelectionProblem.family"]], "familyid (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvalueintegerselectionproblem property)": [[282, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueIntegerSelectionProblem.familyid"]], "familyix (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvalueintegerselectionproblem property)": [[282, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueIntegerSelectionProblem.familyix"]], "ineqcv_trans (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvalueintegerselectionproblem property)": [[282, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueIntegerSelectionProblem.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvalueintegerselectionproblem property)": [[282, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueIntegerSelectionProblem.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvalueintegerselectionproblem property)": [[282, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueIntegerSelectionProblem.ineqcv_wt"]], "latentfn() (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvalueintegerselectionproblem method)": [[282, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueIntegerSelectionProblem.latentfn"]], "n_eq_constr (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvalueintegerselectionproblem property)": [[282, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueIntegerSelectionProblem.n_eq_constr"]], "n_ieq_constr (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvalueintegerselectionproblem property)": [[282, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueIntegerSelectionProblem.n_ieq_constr"]], "n_obj (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvalueintegerselectionproblem property)": [[282, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueIntegerSelectionProblem.n_obj"]], "n_var (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvalueintegerselectionproblem property)": [[282, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueIntegerSelectionProblem.n_var"]], "ndecn (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvalueintegerselectionproblem property)": [[282, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueIntegerSelectionProblem.ndecn"]], "neqcv (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvalueintegerselectionproblem property)": [[282, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueIntegerSelectionProblem.neqcv"]], "nineqcv (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvalueintegerselectionproblem property)": [[282, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueIntegerSelectionProblem.nineqcv"]], "nlatent (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvalueintegerselectionproblem property)": [[282, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueIntegerSelectionProblem.nlatent"]], "nobj (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvalueintegerselectionproblem property)": [[282, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueIntegerSelectionProblem.nobj"]], "obj_trans (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvalueintegerselectionproblem property)": [[282, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueIntegerSelectionProblem.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvalueintegerselectionproblem property)": [[282, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueIntegerSelectionProblem.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvalueintegerselectionproblem property)": [[282, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueIntegerSelectionProblem.obj_wt"]], "replace_nan_values_by (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvalueintegerselectionproblem property)": [[282, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueIntegerSelectionProblem.replace_nan_values_by"]], "strict (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvalueintegerselectionproblem property)": [[282, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueIntegerSelectionProblem.strict"]], "vars (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvalueintegerselectionproblem property)": [[282, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueIntegerSelectionProblem.vars"]], "vtype (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvalueintegerselectionproblem property)": [[282, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueIntegerSelectionProblem.vtype"]], "xl (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvalueintegerselectionproblem property)": [[282, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueIntegerSelectionProblem.xl"]], "xu (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvalueintegerselectionproblem property)": [[282, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueIntegerSelectionProblem.xu"]], "familyestimatedbreedingvaluerealselectionproblem (class in pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem)": [[283, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueRealSelectionProblem"]], "callback (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvaluerealselectionproblem property)": [[283, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueRealSelectionProblem.callback"]], "data (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvaluerealselectionproblem property)": [[283, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueRealSelectionProblem.data"]], "decn_space (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvaluerealselectionproblem property)": [[283, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueRealSelectionProblem.decn_space"]], "decn_space_lower (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvaluerealselectionproblem property)": [[283, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueRealSelectionProblem.decn_space_lower"]], "decn_space_upper (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvaluerealselectionproblem property)": [[283, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueRealSelectionProblem.decn_space_upper"]], "ebv (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvaluerealselectionproblem property)": [[283, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueRealSelectionProblem.ebv"]], "elementwise (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvaluerealselectionproblem property)": [[283, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueRealSelectionProblem.elementwise"]], "elementwise_func (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvaluerealselectionproblem property)": [[283, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueRealSelectionProblem.elementwise_func"]], "elementwise_runner (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvaluerealselectionproblem property)": [[283, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueRealSelectionProblem.elementwise_runner"]], "eqcv_trans (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvaluerealselectionproblem property)": [[283, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueRealSelectionProblem.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvaluerealselectionproblem property)": [[283, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueRealSelectionProblem.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvaluerealselectionproblem property)": [[283, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueRealSelectionProblem.eqcv_wt"]], "evalfn() (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvaluerealselectionproblem method)": [[283, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueRealSelectionProblem.evalfn"]], "exclude_from_serialization (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvaluerealselectionproblem property)": [[283, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueRealSelectionProblem.exclude_from_serialization"]], "family (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvaluerealselectionproblem property)": [[283, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueRealSelectionProblem.family"]], "familyid (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvaluerealselectionproblem property)": [[283, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueRealSelectionProblem.familyid"]], "familyix (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvaluerealselectionproblem property)": [[283, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueRealSelectionProblem.familyix"]], "ineqcv_trans (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvaluerealselectionproblem property)": [[283, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueRealSelectionProblem.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvaluerealselectionproblem property)": [[283, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueRealSelectionProblem.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvaluerealselectionproblem property)": [[283, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueRealSelectionProblem.ineqcv_wt"]], "latentfn() (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvaluerealselectionproblem method)": [[283, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueRealSelectionProblem.latentfn"]], "n_eq_constr (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvaluerealselectionproblem property)": [[283, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueRealSelectionProblem.n_eq_constr"]], "n_ieq_constr (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvaluerealselectionproblem property)": [[283, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueRealSelectionProblem.n_ieq_constr"]], "n_obj (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvaluerealselectionproblem property)": [[283, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueRealSelectionProblem.n_obj"]], "n_var (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvaluerealselectionproblem property)": [[283, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueRealSelectionProblem.n_var"]], "ndecn (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvaluerealselectionproblem property)": [[283, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueRealSelectionProblem.ndecn"]], "neqcv (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvaluerealselectionproblem property)": [[283, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueRealSelectionProblem.neqcv"]], "nineqcv (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvaluerealselectionproblem property)": [[283, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueRealSelectionProblem.nineqcv"]], "nlatent (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvaluerealselectionproblem property)": [[283, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueRealSelectionProblem.nlatent"]], "nobj (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvaluerealselectionproblem property)": [[283, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueRealSelectionProblem.nobj"]], "obj_trans (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvaluerealselectionproblem property)": [[283, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueRealSelectionProblem.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvaluerealselectionproblem property)": [[283, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueRealSelectionProblem.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvaluerealselectionproblem property)": [[283, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueRealSelectionProblem.obj_wt"]], "replace_nan_values_by (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvaluerealselectionproblem property)": [[283, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueRealSelectionProblem.replace_nan_values_by"]], "strict (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvaluerealselectionproblem property)": [[283, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueRealSelectionProblem.strict"]], "vars (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvaluerealselectionproblem property)": [[283, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueRealSelectionProblem.vars"]], "vtype (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvaluerealselectionproblem property)": [[283, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueRealSelectionProblem.vtype"]], "xl (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvaluerealselectionproblem property)": [[283, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueRealSelectionProblem.xl"]], "xu (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvaluerealselectionproblem property)": [[283, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueRealSelectionProblem.xu"]], "familyestimatedbreedingvalueselectionproblemmixin (class in pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem)": [[284, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueSelectionProblemMixin"]], "ebv (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvalueselectionproblemmixin property)": [[284, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueSelectionProblemMixin.ebv"]], "family (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvalueselectionproblemmixin property)": [[284, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueSelectionProblemMixin.family"]], "familyid (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvalueselectionproblemmixin property)": [[284, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueSelectionProblemMixin.familyid"]], "familyix (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvalueselectionproblemmixin property)": [[284, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueSelectionProblemMixin.familyix"]], "nlatent (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvalueselectionproblemmixin property)": [[284, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueSelectionProblemMixin.nlatent"]], "familyestimatedbreedingvaluesubsetselectionproblem (class in pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem)": [[285, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueSubsetSelectionProblem"]], "callback (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvaluesubsetselectionproblem property)": [[285, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueSubsetSelectionProblem.callback"]], "data (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvaluesubsetselectionproblem property)": [[285, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueSubsetSelectionProblem.data"]], "decn_space (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvaluesubsetselectionproblem property)": [[285, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueSubsetSelectionProblem.decn_space"]], "decn_space_lower (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvaluesubsetselectionproblem property)": [[285, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueSubsetSelectionProblem.decn_space_lower"]], "decn_space_upper (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvaluesubsetselectionproblem property)": [[285, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueSubsetSelectionProblem.decn_space_upper"]], "ebv (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvaluesubsetselectionproblem property)": [[285, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueSubsetSelectionProblem.ebv"]], "elementwise (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvaluesubsetselectionproblem property)": [[285, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueSubsetSelectionProblem.elementwise"]], "elementwise_func (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvaluesubsetselectionproblem property)": [[285, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueSubsetSelectionProblem.elementwise_func"]], "elementwise_runner (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvaluesubsetselectionproblem property)": [[285, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueSubsetSelectionProblem.elementwise_runner"]], "eqcv_trans (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvaluesubsetselectionproblem property)": [[285, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueSubsetSelectionProblem.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvaluesubsetselectionproblem property)": [[285, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueSubsetSelectionProblem.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvaluesubsetselectionproblem property)": [[285, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueSubsetSelectionProblem.eqcv_wt"]], "evalfn() (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvaluesubsetselectionproblem method)": [[285, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueSubsetSelectionProblem.evalfn"]], "exclude_from_serialization (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvaluesubsetselectionproblem property)": [[285, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueSubsetSelectionProblem.exclude_from_serialization"]], "family (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvaluesubsetselectionproblem property)": [[285, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueSubsetSelectionProblem.family"]], "familyid (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvaluesubsetselectionproblem property)": [[285, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueSubsetSelectionProblem.familyid"]], "familyix (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvaluesubsetselectionproblem property)": [[285, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueSubsetSelectionProblem.familyix"]], "ineqcv_trans (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvaluesubsetselectionproblem property)": [[285, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueSubsetSelectionProblem.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvaluesubsetselectionproblem property)": [[285, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueSubsetSelectionProblem.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvaluesubsetselectionproblem property)": [[285, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueSubsetSelectionProblem.ineqcv_wt"]], "latentfn() (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvaluesubsetselectionproblem method)": [[285, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueSubsetSelectionProblem.latentfn"]], "n_eq_constr (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvaluesubsetselectionproblem property)": [[285, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueSubsetSelectionProblem.n_eq_constr"]], "n_ieq_constr (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvaluesubsetselectionproblem property)": [[285, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueSubsetSelectionProblem.n_ieq_constr"]], "n_obj (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvaluesubsetselectionproblem property)": [[285, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueSubsetSelectionProblem.n_obj"]], "n_var (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvaluesubsetselectionproblem property)": [[285, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueSubsetSelectionProblem.n_var"]], "ndecn (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvaluesubsetselectionproblem property)": [[285, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueSubsetSelectionProblem.ndecn"]], "neqcv (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvaluesubsetselectionproblem property)": [[285, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueSubsetSelectionProblem.neqcv"]], "nineqcv (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvaluesubsetselectionproblem property)": [[285, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueSubsetSelectionProblem.nineqcv"]], "nlatent (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvaluesubsetselectionproblem property)": [[285, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueSubsetSelectionProblem.nlatent"]], "nobj (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvaluesubsetselectionproblem property)": [[285, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueSubsetSelectionProblem.nobj"]], "obj_trans (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvaluesubsetselectionproblem property)": [[285, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueSubsetSelectionProblem.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvaluesubsetselectionproblem property)": [[285, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueSubsetSelectionProblem.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvaluesubsetselectionproblem property)": [[285, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueSubsetSelectionProblem.obj_wt"]], "replace_nan_values_by (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvaluesubsetselectionproblem property)": [[285, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueSubsetSelectionProblem.replace_nan_values_by"]], "strict (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvaluesubsetselectionproblem property)": [[285, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueSubsetSelectionProblem.strict"]], "vars (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvaluesubsetselectionproblem property)": [[285, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueSubsetSelectionProblem.vars"]], "vtype (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvaluesubsetselectionproblem property)": [[285, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueSubsetSelectionProblem.vtype"]], "xl (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvaluesubsetselectionproblem property)": [[285, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueSubsetSelectionProblem.xl"]], "xu (pybrops.breed.prot.sel.prob.familyestimatedbreedingvalueselectionproblem.familyestimatedbreedingvaluesubsetselectionproblem property)": [[285, "pybrops.breed.prot.sel.prob.FamilyEstimatedBreedingValueSelectionProblem.FamilyEstimatedBreedingValueSubsetSelectionProblem.xu"]], "pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem": [[286, "module-pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem"]], "generalizedweightedgenomicestimatedbreedingvaluebinaryselectionproblem (class in pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem)": [[287, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueBinarySelectionProblem"]], "callback (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvaluebinaryselectionproblem property)": [[287, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueBinarySelectionProblem.callback"]], "data (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvaluebinaryselectionproblem property)": [[287, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueBinarySelectionProblem.data"]], "decn_space (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvaluebinaryselectionproblem property)": [[287, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueBinarySelectionProblem.decn_space"]], "decn_space_lower (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvaluebinaryselectionproblem property)": [[287, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueBinarySelectionProblem.decn_space_lower"]], "decn_space_upper (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvaluebinaryselectionproblem property)": [[287, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueBinarySelectionProblem.decn_space_upper"]], "elementwise (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvaluebinaryselectionproblem property)": [[287, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueBinarySelectionProblem.elementwise"]], "elementwise_func (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvaluebinaryselectionproblem property)": [[287, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueBinarySelectionProblem.elementwise_func"]], "elementwise_runner (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvaluebinaryselectionproblem property)": [[287, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueBinarySelectionProblem.elementwise_runner"]], "eqcv_trans (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvaluebinaryselectionproblem property)": [[287, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueBinarySelectionProblem.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvaluebinaryselectionproblem property)": [[287, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueBinarySelectionProblem.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvaluebinaryselectionproblem property)": [[287, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueBinarySelectionProblem.eqcv_wt"]], "evalfn() (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvaluebinaryselectionproblem method)": [[287, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueBinarySelectionProblem.evalfn"]], "exclude_from_serialization (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvaluebinaryselectionproblem property)": [[287, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueBinarySelectionProblem.exclude_from_serialization"]], "gwgebv (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvaluebinaryselectionproblem property)": [[287, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueBinarySelectionProblem.gwgebv"]], "ineqcv_trans (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvaluebinaryselectionproblem property)": [[287, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueBinarySelectionProblem.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvaluebinaryselectionproblem property)": [[287, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueBinarySelectionProblem.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvaluebinaryselectionproblem property)": [[287, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueBinarySelectionProblem.ineqcv_wt"]], "latentfn() (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvaluebinaryselectionproblem method)": [[287, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueBinarySelectionProblem.latentfn"]], "n_eq_constr (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvaluebinaryselectionproblem property)": [[287, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueBinarySelectionProblem.n_eq_constr"]], "n_ieq_constr (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvaluebinaryselectionproblem property)": [[287, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueBinarySelectionProblem.n_ieq_constr"]], "n_obj (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvaluebinaryselectionproblem property)": [[287, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueBinarySelectionProblem.n_obj"]], "n_var (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvaluebinaryselectionproblem property)": [[287, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueBinarySelectionProblem.n_var"]], "ndecn (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvaluebinaryselectionproblem property)": [[287, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueBinarySelectionProblem.ndecn"]], "neqcv (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvaluebinaryselectionproblem property)": [[287, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueBinarySelectionProblem.neqcv"]], "nineqcv (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvaluebinaryselectionproblem property)": [[287, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueBinarySelectionProblem.nineqcv"]], "nlatent (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvaluebinaryselectionproblem property)": [[287, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueBinarySelectionProblem.nlatent"]], "nobj (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvaluebinaryselectionproblem property)": [[287, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueBinarySelectionProblem.nobj"]], "obj_trans (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvaluebinaryselectionproblem property)": [[287, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueBinarySelectionProblem.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvaluebinaryselectionproblem property)": [[287, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueBinarySelectionProblem.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvaluebinaryselectionproblem property)": [[287, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueBinarySelectionProblem.obj_wt"]], "replace_nan_values_by (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvaluebinaryselectionproblem property)": [[287, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueBinarySelectionProblem.replace_nan_values_by"]], "strict (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvaluebinaryselectionproblem property)": [[287, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueBinarySelectionProblem.strict"]], "vars (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvaluebinaryselectionproblem property)": [[287, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueBinarySelectionProblem.vars"]], "vtype (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvaluebinaryselectionproblem property)": [[287, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueBinarySelectionProblem.vtype"]], "xl (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvaluebinaryselectionproblem property)": [[287, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueBinarySelectionProblem.xl"]], "xu (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvaluebinaryselectionproblem property)": [[287, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueBinarySelectionProblem.xu"]], "generalizedweightedgenomicestimatedbreedingvalueintegerselectionproblem (class in pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem)": [[288, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueIntegerSelectionProblem"]], "callback (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvalueintegerselectionproblem property)": [[288, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueIntegerSelectionProblem.callback"]], "data (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvalueintegerselectionproblem property)": [[288, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueIntegerSelectionProblem.data"]], "decn_space (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvalueintegerselectionproblem property)": [[288, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueIntegerSelectionProblem.decn_space"]], "decn_space_lower (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvalueintegerselectionproblem property)": [[288, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueIntegerSelectionProblem.decn_space_lower"]], "decn_space_upper (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvalueintegerselectionproblem property)": [[288, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueIntegerSelectionProblem.decn_space_upper"]], "elementwise (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvalueintegerselectionproblem property)": [[288, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueIntegerSelectionProblem.elementwise"]], "elementwise_func (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvalueintegerselectionproblem property)": [[288, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueIntegerSelectionProblem.elementwise_func"]], "elementwise_runner (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvalueintegerselectionproblem property)": [[288, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueIntegerSelectionProblem.elementwise_runner"]], "eqcv_trans (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvalueintegerselectionproblem property)": [[288, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueIntegerSelectionProblem.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvalueintegerselectionproblem property)": [[288, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueIntegerSelectionProblem.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvalueintegerselectionproblem property)": [[288, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueIntegerSelectionProblem.eqcv_wt"]], "evalfn() (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvalueintegerselectionproblem method)": [[288, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueIntegerSelectionProblem.evalfn"]], "exclude_from_serialization (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvalueintegerselectionproblem property)": [[288, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueIntegerSelectionProblem.exclude_from_serialization"]], "gwgebv (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvalueintegerselectionproblem property)": [[288, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueIntegerSelectionProblem.gwgebv"]], "ineqcv_trans (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvalueintegerselectionproblem property)": [[288, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueIntegerSelectionProblem.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvalueintegerselectionproblem property)": [[288, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueIntegerSelectionProblem.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvalueintegerselectionproblem property)": [[288, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueIntegerSelectionProblem.ineqcv_wt"]], "latentfn() (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvalueintegerselectionproblem method)": [[288, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueIntegerSelectionProblem.latentfn"]], "n_eq_constr (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvalueintegerselectionproblem property)": [[288, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueIntegerSelectionProblem.n_eq_constr"]], "n_ieq_constr (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvalueintegerselectionproblem property)": [[288, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueIntegerSelectionProblem.n_ieq_constr"]], "n_obj (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvalueintegerselectionproblem property)": [[288, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueIntegerSelectionProblem.n_obj"]], "n_var (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvalueintegerselectionproblem property)": [[288, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueIntegerSelectionProblem.n_var"]], "ndecn (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvalueintegerselectionproblem property)": [[288, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueIntegerSelectionProblem.ndecn"]], "neqcv (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvalueintegerselectionproblem property)": [[288, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueIntegerSelectionProblem.neqcv"]], "nineqcv (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvalueintegerselectionproblem property)": [[288, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueIntegerSelectionProblem.nineqcv"]], "nlatent (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvalueintegerselectionproblem property)": [[288, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueIntegerSelectionProblem.nlatent"]], "nobj (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvalueintegerselectionproblem property)": [[288, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueIntegerSelectionProblem.nobj"]], "obj_trans (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvalueintegerselectionproblem property)": [[288, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueIntegerSelectionProblem.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvalueintegerselectionproblem property)": [[288, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueIntegerSelectionProblem.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvalueintegerselectionproblem property)": [[288, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueIntegerSelectionProblem.obj_wt"]], "replace_nan_values_by (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvalueintegerselectionproblem property)": [[288, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueIntegerSelectionProblem.replace_nan_values_by"]], "strict (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvalueintegerselectionproblem property)": [[288, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueIntegerSelectionProblem.strict"]], "vars (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvalueintegerselectionproblem property)": [[288, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueIntegerSelectionProblem.vars"]], "vtype (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvalueintegerselectionproblem property)": [[288, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueIntegerSelectionProblem.vtype"]], "xl (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvalueintegerselectionproblem property)": [[288, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueIntegerSelectionProblem.xl"]], "xu (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvalueintegerselectionproblem property)": [[288, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueIntegerSelectionProblem.xu"]], "generalizedweightedgenomicestimatedbreedingvaluerealselectionproblem (class in pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem)": [[289, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueRealSelectionProblem"]], "callback (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvaluerealselectionproblem property)": [[289, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueRealSelectionProblem.callback"]], "data (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvaluerealselectionproblem property)": [[289, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueRealSelectionProblem.data"]], "decn_space (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvaluerealselectionproblem property)": [[289, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueRealSelectionProblem.decn_space"]], "decn_space_lower (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvaluerealselectionproblem property)": [[289, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueRealSelectionProblem.decn_space_lower"]], "decn_space_upper (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvaluerealselectionproblem property)": [[289, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueRealSelectionProblem.decn_space_upper"]], "elementwise (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvaluerealselectionproblem property)": [[289, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueRealSelectionProblem.elementwise"]], "elementwise_func (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvaluerealselectionproblem property)": [[289, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueRealSelectionProblem.elementwise_func"]], "elementwise_runner (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvaluerealselectionproblem property)": [[289, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueRealSelectionProblem.elementwise_runner"]], "eqcv_trans (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvaluerealselectionproblem property)": [[289, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueRealSelectionProblem.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvaluerealselectionproblem property)": [[289, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueRealSelectionProblem.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvaluerealselectionproblem property)": [[289, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueRealSelectionProblem.eqcv_wt"]], "evalfn() (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvaluerealselectionproblem method)": [[289, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueRealSelectionProblem.evalfn"]], "exclude_from_serialization (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvaluerealselectionproblem property)": [[289, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueRealSelectionProblem.exclude_from_serialization"]], "gwgebv (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvaluerealselectionproblem property)": [[289, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueRealSelectionProblem.gwgebv"]], "ineqcv_trans (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvaluerealselectionproblem property)": [[289, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueRealSelectionProblem.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvaluerealselectionproblem property)": [[289, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueRealSelectionProblem.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvaluerealselectionproblem property)": [[289, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueRealSelectionProblem.ineqcv_wt"]], "latentfn() (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvaluerealselectionproblem method)": [[289, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueRealSelectionProblem.latentfn"]], "n_eq_constr (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvaluerealselectionproblem property)": [[289, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueRealSelectionProblem.n_eq_constr"]], "n_ieq_constr (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvaluerealselectionproblem property)": [[289, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueRealSelectionProblem.n_ieq_constr"]], "n_obj (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvaluerealselectionproblem property)": [[289, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueRealSelectionProblem.n_obj"]], "n_var (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvaluerealselectionproblem property)": [[289, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueRealSelectionProblem.n_var"]], "ndecn (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvaluerealselectionproblem property)": [[289, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueRealSelectionProblem.ndecn"]], "neqcv (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvaluerealselectionproblem property)": [[289, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueRealSelectionProblem.neqcv"]], "nineqcv (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvaluerealselectionproblem property)": [[289, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueRealSelectionProblem.nineqcv"]], "nlatent (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvaluerealselectionproblem property)": [[289, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueRealSelectionProblem.nlatent"]], "nobj (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvaluerealselectionproblem property)": [[289, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueRealSelectionProblem.nobj"]], "obj_trans (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvaluerealselectionproblem property)": [[289, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueRealSelectionProblem.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvaluerealselectionproblem property)": [[289, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueRealSelectionProblem.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvaluerealselectionproblem property)": [[289, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueRealSelectionProblem.obj_wt"]], "replace_nan_values_by (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvaluerealselectionproblem property)": [[289, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueRealSelectionProblem.replace_nan_values_by"]], "strict (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvaluerealselectionproblem property)": [[289, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueRealSelectionProblem.strict"]], "vars (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvaluerealselectionproblem property)": [[289, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueRealSelectionProblem.vars"]], "vtype (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvaluerealselectionproblem property)": [[289, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueRealSelectionProblem.vtype"]], "xl (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvaluerealselectionproblem property)": [[289, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueRealSelectionProblem.xl"]], "xu (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvaluerealselectionproblem property)": [[289, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueRealSelectionProblem.xu"]], "generalizedweightedgenomicestimatedbreedingvalueselectionproblemmixin (class in pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem)": [[290, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblemMixin"]], "gwgebv (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvalueselectionproblemmixin property)": [[290, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblemMixin.gwgebv"]], "nlatent (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvalueselectionproblemmixin property)": [[290, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblemMixin.nlatent"]], "generalizedweightedgenomicestimatedbreedingvaluesubsetselectionproblem (class in pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem)": [[291, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueSubsetSelectionProblem"]], "callback (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvaluesubsetselectionproblem property)": [[291, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueSubsetSelectionProblem.callback"]], "data (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvaluesubsetselectionproblem property)": [[291, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueSubsetSelectionProblem.data"]], "decn_space (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvaluesubsetselectionproblem property)": [[291, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueSubsetSelectionProblem.decn_space"]], "decn_space_lower (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvaluesubsetselectionproblem property)": [[291, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueSubsetSelectionProblem.decn_space_lower"]], "decn_space_upper (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvaluesubsetselectionproblem property)": [[291, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueSubsetSelectionProblem.decn_space_upper"]], "elementwise (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvaluesubsetselectionproblem property)": [[291, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueSubsetSelectionProblem.elementwise"]], "elementwise_func (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvaluesubsetselectionproblem property)": [[291, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueSubsetSelectionProblem.elementwise_func"]], "elementwise_runner (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvaluesubsetselectionproblem property)": [[291, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueSubsetSelectionProblem.elementwise_runner"]], "eqcv_trans (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvaluesubsetselectionproblem property)": [[291, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueSubsetSelectionProblem.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvaluesubsetselectionproblem property)": [[291, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueSubsetSelectionProblem.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvaluesubsetselectionproblem property)": [[291, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueSubsetSelectionProblem.eqcv_wt"]], "evalfn() (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvaluesubsetselectionproblem method)": [[291, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueSubsetSelectionProblem.evalfn"]], "exclude_from_serialization (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvaluesubsetselectionproblem property)": [[291, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueSubsetSelectionProblem.exclude_from_serialization"]], "gwgebv (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvaluesubsetselectionproblem property)": [[291, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueSubsetSelectionProblem.gwgebv"]], "ineqcv_trans (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvaluesubsetselectionproblem property)": [[291, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueSubsetSelectionProblem.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvaluesubsetselectionproblem property)": [[291, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueSubsetSelectionProblem.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvaluesubsetselectionproblem property)": [[291, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueSubsetSelectionProblem.ineqcv_wt"]], "latentfn() (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvaluesubsetselectionproblem method)": [[291, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueSubsetSelectionProblem.latentfn"]], "n_eq_constr (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvaluesubsetselectionproblem property)": [[291, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueSubsetSelectionProblem.n_eq_constr"]], "n_ieq_constr (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvaluesubsetselectionproblem property)": [[291, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueSubsetSelectionProblem.n_ieq_constr"]], "n_obj (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvaluesubsetselectionproblem property)": [[291, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueSubsetSelectionProblem.n_obj"]], "n_var (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvaluesubsetselectionproblem property)": [[291, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueSubsetSelectionProblem.n_var"]], "ndecn (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvaluesubsetselectionproblem property)": [[291, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueSubsetSelectionProblem.ndecn"]], "neqcv (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvaluesubsetselectionproblem property)": [[291, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueSubsetSelectionProblem.neqcv"]], "nineqcv (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvaluesubsetselectionproblem property)": [[291, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueSubsetSelectionProblem.nineqcv"]], "nlatent (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvaluesubsetselectionproblem property)": [[291, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueSubsetSelectionProblem.nlatent"]], "nobj (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvaluesubsetselectionproblem property)": [[291, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueSubsetSelectionProblem.nobj"]], "obj_trans (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvaluesubsetselectionproblem property)": [[291, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueSubsetSelectionProblem.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvaluesubsetselectionproblem property)": [[291, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueSubsetSelectionProblem.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvaluesubsetselectionproblem property)": [[291, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueSubsetSelectionProblem.obj_wt"]], "replace_nan_values_by (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvaluesubsetselectionproblem property)": [[291, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueSubsetSelectionProblem.replace_nan_values_by"]], "strict (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvaluesubsetselectionproblem property)": [[291, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueSubsetSelectionProblem.strict"]], "vars (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvaluesubsetselectionproblem property)": [[291, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueSubsetSelectionProblem.vars"]], "vtype (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvaluesubsetselectionproblem property)": [[291, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueSubsetSelectionProblem.vtype"]], "xl (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvaluesubsetselectionproblem property)": [[291, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueSubsetSelectionProblem.xl"]], "xu (pybrops.breed.prot.sel.prob.generalizedweightedgenomicestimatedbreedingvalueselectionproblem.generalizedweightedgenomicestimatedbreedingvaluesubsetselectionproblem property)": [[291, "pybrops.breed.prot.sel.prob.GeneralizedWeightedGenomicEstimatedBreedingValueSelectionProblem.GeneralizedWeightedGenomicEstimatedBreedingValueSubsetSelectionProblem.xu"]], "pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem": [[292, "module-pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem"]], "genomicestimatedbreedingvaluebinaryselectionproblem (class in pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem)": [[293, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueBinarySelectionProblem"]], "callback (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvaluebinaryselectionproblem property)": [[293, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueBinarySelectionProblem.callback"]], "data (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvaluebinaryselectionproblem property)": [[293, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueBinarySelectionProblem.data"]], "decn_space (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvaluebinaryselectionproblem property)": [[293, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueBinarySelectionProblem.decn_space"]], "decn_space_lower (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvaluebinaryselectionproblem property)": [[293, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueBinarySelectionProblem.decn_space_lower"]], "decn_space_upper (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvaluebinaryselectionproblem property)": [[293, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueBinarySelectionProblem.decn_space_upper"]], "elementwise (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvaluebinaryselectionproblem property)": [[293, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueBinarySelectionProblem.elementwise"]], "elementwise_func (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvaluebinaryselectionproblem property)": [[293, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueBinarySelectionProblem.elementwise_func"]], "elementwise_runner (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvaluebinaryselectionproblem property)": [[293, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueBinarySelectionProblem.elementwise_runner"]], "eqcv_trans (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvaluebinaryselectionproblem property)": [[293, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueBinarySelectionProblem.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvaluebinaryselectionproblem property)": [[293, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueBinarySelectionProblem.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvaluebinaryselectionproblem property)": [[293, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueBinarySelectionProblem.eqcv_wt"]], "evalfn() (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvaluebinaryselectionproblem method)": [[293, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueBinarySelectionProblem.evalfn"]], "exclude_from_serialization (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvaluebinaryselectionproblem property)": [[293, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueBinarySelectionProblem.exclude_from_serialization"]], "gebv (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvaluebinaryselectionproblem property)": [[293, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueBinarySelectionProblem.gebv"]], "ineqcv_trans (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvaluebinaryselectionproblem property)": [[293, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueBinarySelectionProblem.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvaluebinaryselectionproblem property)": [[293, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueBinarySelectionProblem.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvaluebinaryselectionproblem property)": [[293, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueBinarySelectionProblem.ineqcv_wt"]], "latentfn() (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvaluebinaryselectionproblem method)": [[293, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueBinarySelectionProblem.latentfn"]], "n_eq_constr (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvaluebinaryselectionproblem property)": [[293, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueBinarySelectionProblem.n_eq_constr"]], "n_ieq_constr (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvaluebinaryselectionproblem property)": [[293, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueBinarySelectionProblem.n_ieq_constr"]], "n_obj (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvaluebinaryselectionproblem property)": [[293, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueBinarySelectionProblem.n_obj"]], "n_var (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvaluebinaryselectionproblem property)": [[293, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueBinarySelectionProblem.n_var"]], "ndecn (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvaluebinaryselectionproblem property)": [[293, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueBinarySelectionProblem.ndecn"]], "neqcv (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvaluebinaryselectionproblem property)": [[293, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueBinarySelectionProblem.neqcv"]], "nineqcv (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvaluebinaryselectionproblem property)": [[293, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueBinarySelectionProblem.nineqcv"]], "nlatent (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvaluebinaryselectionproblem property)": [[293, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueBinarySelectionProblem.nlatent"]], "nobj (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvaluebinaryselectionproblem property)": [[293, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueBinarySelectionProblem.nobj"]], "obj_trans (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvaluebinaryselectionproblem property)": [[293, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueBinarySelectionProblem.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvaluebinaryselectionproblem property)": [[293, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueBinarySelectionProblem.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvaluebinaryselectionproblem property)": [[293, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueBinarySelectionProblem.obj_wt"]], "replace_nan_values_by (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvaluebinaryselectionproblem property)": [[293, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueBinarySelectionProblem.replace_nan_values_by"]], "strict (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvaluebinaryselectionproblem property)": [[293, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueBinarySelectionProblem.strict"]], "vars (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvaluebinaryselectionproblem property)": [[293, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueBinarySelectionProblem.vars"]], "vtype (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvaluebinaryselectionproblem property)": [[293, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueBinarySelectionProblem.vtype"]], "xl (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvaluebinaryselectionproblem property)": [[293, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueBinarySelectionProblem.xl"]], "xu (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvaluebinaryselectionproblem property)": [[293, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueBinarySelectionProblem.xu"]], "genomicestimatedbreedingvalueintegerselectionproblem (class in pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem)": [[294, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueIntegerSelectionProblem"]], "callback (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvalueintegerselectionproblem property)": [[294, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueIntegerSelectionProblem.callback"]], "data (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvalueintegerselectionproblem property)": [[294, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueIntegerSelectionProblem.data"]], "decn_space (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvalueintegerselectionproblem property)": [[294, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueIntegerSelectionProblem.decn_space"]], "decn_space_lower (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvalueintegerselectionproblem property)": [[294, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueIntegerSelectionProblem.decn_space_lower"]], "decn_space_upper (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvalueintegerselectionproblem property)": [[294, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueIntegerSelectionProblem.decn_space_upper"]], "elementwise (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvalueintegerselectionproblem property)": [[294, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueIntegerSelectionProblem.elementwise"]], "elementwise_func (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvalueintegerselectionproblem property)": [[294, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueIntegerSelectionProblem.elementwise_func"]], "elementwise_runner (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvalueintegerselectionproblem property)": [[294, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueIntegerSelectionProblem.elementwise_runner"]], "eqcv_trans (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvalueintegerselectionproblem property)": [[294, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueIntegerSelectionProblem.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvalueintegerselectionproblem property)": [[294, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueIntegerSelectionProblem.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvalueintegerselectionproblem property)": [[294, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueIntegerSelectionProblem.eqcv_wt"]], "evalfn() (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvalueintegerselectionproblem method)": [[294, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueIntegerSelectionProblem.evalfn"]], "exclude_from_serialization (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvalueintegerselectionproblem property)": [[294, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueIntegerSelectionProblem.exclude_from_serialization"]], "gebv (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvalueintegerselectionproblem property)": [[294, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueIntegerSelectionProblem.gebv"]], "ineqcv_trans (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvalueintegerselectionproblem property)": [[294, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueIntegerSelectionProblem.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvalueintegerselectionproblem property)": [[294, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueIntegerSelectionProblem.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvalueintegerselectionproblem property)": [[294, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueIntegerSelectionProblem.ineqcv_wt"]], "latentfn() (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvalueintegerselectionproblem method)": [[294, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueIntegerSelectionProblem.latentfn"]], "n_eq_constr (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvalueintegerselectionproblem property)": [[294, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueIntegerSelectionProblem.n_eq_constr"]], "n_ieq_constr (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvalueintegerselectionproblem property)": [[294, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueIntegerSelectionProblem.n_ieq_constr"]], "n_obj (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvalueintegerselectionproblem property)": [[294, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueIntegerSelectionProblem.n_obj"]], "n_var (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvalueintegerselectionproblem property)": [[294, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueIntegerSelectionProblem.n_var"]], "ndecn (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvalueintegerselectionproblem property)": [[294, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueIntegerSelectionProblem.ndecn"]], "neqcv (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvalueintegerselectionproblem property)": [[294, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueIntegerSelectionProblem.neqcv"]], "nineqcv (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvalueintegerselectionproblem property)": [[294, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueIntegerSelectionProblem.nineqcv"]], "nlatent (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvalueintegerselectionproblem property)": [[294, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueIntegerSelectionProblem.nlatent"]], "nobj (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvalueintegerselectionproblem property)": [[294, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueIntegerSelectionProblem.nobj"]], "obj_trans (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvalueintegerselectionproblem property)": [[294, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueIntegerSelectionProblem.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvalueintegerselectionproblem property)": [[294, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueIntegerSelectionProblem.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvalueintegerselectionproblem property)": [[294, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueIntegerSelectionProblem.obj_wt"]], "replace_nan_values_by (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvalueintegerselectionproblem property)": [[294, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueIntegerSelectionProblem.replace_nan_values_by"]], "strict (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvalueintegerselectionproblem property)": [[294, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueIntegerSelectionProblem.strict"]], "vars (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvalueintegerselectionproblem property)": [[294, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueIntegerSelectionProblem.vars"]], "vtype (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvalueintegerselectionproblem property)": [[294, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueIntegerSelectionProblem.vtype"]], "xl (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvalueintegerselectionproblem property)": [[294, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueIntegerSelectionProblem.xl"]], "xu (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvalueintegerselectionproblem property)": [[294, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueIntegerSelectionProblem.xu"]], "genomicestimatedbreedingvaluerealselectionproblem (class in pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem)": [[295, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueRealSelectionProblem"]], "callback (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvaluerealselectionproblem property)": [[295, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueRealSelectionProblem.callback"]], "data (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvaluerealselectionproblem property)": [[295, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueRealSelectionProblem.data"]], "decn_space (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvaluerealselectionproblem property)": [[295, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueRealSelectionProblem.decn_space"]], "decn_space_lower (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvaluerealselectionproblem property)": [[295, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueRealSelectionProblem.decn_space_lower"]], "decn_space_upper (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvaluerealselectionproblem property)": [[295, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueRealSelectionProblem.decn_space_upper"]], "elementwise (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvaluerealselectionproblem property)": [[295, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueRealSelectionProblem.elementwise"]], "elementwise_func (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvaluerealselectionproblem property)": [[295, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueRealSelectionProblem.elementwise_func"]], "elementwise_runner (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvaluerealselectionproblem property)": [[295, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueRealSelectionProblem.elementwise_runner"]], "eqcv_trans (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvaluerealselectionproblem property)": [[295, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueRealSelectionProblem.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvaluerealselectionproblem property)": [[295, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueRealSelectionProblem.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvaluerealselectionproblem property)": [[295, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueRealSelectionProblem.eqcv_wt"]], "evalfn() (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvaluerealselectionproblem method)": [[295, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueRealSelectionProblem.evalfn"]], "exclude_from_serialization (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvaluerealselectionproblem property)": [[295, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueRealSelectionProblem.exclude_from_serialization"]], "gebv (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvaluerealselectionproblem property)": [[295, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueRealSelectionProblem.gebv"]], "ineqcv_trans (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvaluerealselectionproblem property)": [[295, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueRealSelectionProblem.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvaluerealselectionproblem property)": [[295, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueRealSelectionProblem.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvaluerealselectionproblem property)": [[295, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueRealSelectionProblem.ineqcv_wt"]], "latentfn() (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvaluerealselectionproblem method)": [[295, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueRealSelectionProblem.latentfn"]], "n_eq_constr (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvaluerealselectionproblem property)": [[295, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueRealSelectionProblem.n_eq_constr"]], "n_ieq_constr (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvaluerealselectionproblem property)": [[295, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueRealSelectionProblem.n_ieq_constr"]], "n_obj (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvaluerealselectionproblem property)": [[295, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueRealSelectionProblem.n_obj"]], "n_var (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvaluerealselectionproblem property)": [[295, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueRealSelectionProblem.n_var"]], "ndecn (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvaluerealselectionproblem property)": [[295, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueRealSelectionProblem.ndecn"]], "neqcv (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvaluerealselectionproblem property)": [[295, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueRealSelectionProblem.neqcv"]], "nineqcv (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvaluerealselectionproblem property)": [[295, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueRealSelectionProblem.nineqcv"]], "nlatent (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvaluerealselectionproblem property)": [[295, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueRealSelectionProblem.nlatent"]], "nobj (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvaluerealselectionproblem property)": [[295, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueRealSelectionProblem.nobj"]], "obj_trans (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvaluerealselectionproblem property)": [[295, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueRealSelectionProblem.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvaluerealselectionproblem property)": [[295, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueRealSelectionProblem.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvaluerealselectionproblem property)": [[295, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueRealSelectionProblem.obj_wt"]], "replace_nan_values_by (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvaluerealselectionproblem property)": [[295, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueRealSelectionProblem.replace_nan_values_by"]], "strict (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvaluerealselectionproblem property)": [[295, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueRealSelectionProblem.strict"]], "vars (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvaluerealselectionproblem property)": [[295, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueRealSelectionProblem.vars"]], "vtype (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvaluerealselectionproblem property)": [[295, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueRealSelectionProblem.vtype"]], "xl (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvaluerealselectionproblem property)": [[295, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueRealSelectionProblem.xl"]], "xu (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvaluerealselectionproblem property)": [[295, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueRealSelectionProblem.xu"]], "genomicestimatedbreedingvalueselectionproblemmixin (class in pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem)": [[296, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueSelectionProblemMixin"]], "gebv (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvalueselectionproblemmixin property)": [[296, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueSelectionProblemMixin.gebv"]], "nlatent (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvalueselectionproblemmixin property)": [[296, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueSelectionProblemMixin.nlatent"]], "genomicestimatedbreedingvaluesubsetselectionproblem (class in pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem)": [[297, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueSubsetSelectionProblem"]], "callback (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvaluesubsetselectionproblem property)": [[297, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueSubsetSelectionProblem.callback"]], "data (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvaluesubsetselectionproblem property)": [[297, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueSubsetSelectionProblem.data"]], "decn_space (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvaluesubsetselectionproblem property)": [[297, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueSubsetSelectionProblem.decn_space"]], "decn_space_lower (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvaluesubsetselectionproblem property)": [[297, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueSubsetSelectionProblem.decn_space_lower"]], "decn_space_upper (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvaluesubsetselectionproblem property)": [[297, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueSubsetSelectionProblem.decn_space_upper"]], "elementwise (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvaluesubsetselectionproblem property)": [[297, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueSubsetSelectionProblem.elementwise"]], "elementwise_func (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvaluesubsetselectionproblem property)": [[297, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueSubsetSelectionProblem.elementwise_func"]], "elementwise_runner (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvaluesubsetselectionproblem property)": [[297, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueSubsetSelectionProblem.elementwise_runner"]], "eqcv_trans (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvaluesubsetselectionproblem property)": [[297, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueSubsetSelectionProblem.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvaluesubsetselectionproblem property)": [[297, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueSubsetSelectionProblem.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvaluesubsetselectionproblem property)": [[297, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueSubsetSelectionProblem.eqcv_wt"]], "evalfn() (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvaluesubsetselectionproblem method)": [[297, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueSubsetSelectionProblem.evalfn"]], "exclude_from_serialization (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvaluesubsetselectionproblem property)": [[297, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueSubsetSelectionProblem.exclude_from_serialization"]], "gebv (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvaluesubsetselectionproblem property)": [[297, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueSubsetSelectionProblem.gebv"]], "ineqcv_trans (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvaluesubsetselectionproblem property)": [[297, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueSubsetSelectionProblem.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvaluesubsetselectionproblem property)": [[297, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueSubsetSelectionProblem.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvaluesubsetselectionproblem property)": [[297, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueSubsetSelectionProblem.ineqcv_wt"]], "latentfn() (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvaluesubsetselectionproblem method)": [[297, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueSubsetSelectionProblem.latentfn"]], "n_eq_constr (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvaluesubsetselectionproblem property)": [[297, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueSubsetSelectionProblem.n_eq_constr"]], "n_ieq_constr (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvaluesubsetselectionproblem property)": [[297, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueSubsetSelectionProblem.n_ieq_constr"]], "n_obj (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvaluesubsetselectionproblem property)": [[297, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueSubsetSelectionProblem.n_obj"]], "n_var (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvaluesubsetselectionproblem property)": [[297, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueSubsetSelectionProblem.n_var"]], "ndecn (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvaluesubsetselectionproblem property)": [[297, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueSubsetSelectionProblem.ndecn"]], "neqcv (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvaluesubsetselectionproblem property)": [[297, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueSubsetSelectionProblem.neqcv"]], "nineqcv (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvaluesubsetselectionproblem property)": [[297, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueSubsetSelectionProblem.nineqcv"]], "nlatent (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvaluesubsetselectionproblem property)": [[297, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueSubsetSelectionProblem.nlatent"]], "nobj (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvaluesubsetselectionproblem property)": [[297, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueSubsetSelectionProblem.nobj"]], "obj_trans (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvaluesubsetselectionproblem property)": [[297, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueSubsetSelectionProblem.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvaluesubsetselectionproblem property)": [[297, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueSubsetSelectionProblem.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvaluesubsetselectionproblem property)": [[297, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueSubsetSelectionProblem.obj_wt"]], "replace_nan_values_by (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvaluesubsetselectionproblem property)": [[297, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueSubsetSelectionProblem.replace_nan_values_by"]], "strict (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvaluesubsetselectionproblem property)": [[297, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueSubsetSelectionProblem.strict"]], "vars (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvaluesubsetselectionproblem property)": [[297, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueSubsetSelectionProblem.vars"]], "vtype (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvaluesubsetselectionproblem property)": [[297, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueSubsetSelectionProblem.vtype"]], "xl (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvaluesubsetselectionproblem property)": [[297, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueSubsetSelectionProblem.xl"]], "xu (pybrops.breed.prot.sel.prob.genomicestimatedbreedingvalueselectionproblem.genomicestimatedbreedingvaluesubsetselectionproblem property)": [[297, "pybrops.breed.prot.sel.prob.GenomicEstimatedBreedingValueSelectionProblem.GenomicEstimatedBreedingValueSubsetSelectionProblem.xu"]], "pybrops.breed.prot.sel.prob.genotypebuilderselectionproblem": [[298, "module-pybrops.breed.prot.sel.prob.GenotypeBuilderSelectionProblem"]], "genotypebuilderselectionproblemmixin (class in pybrops.breed.prot.sel.prob.genotypebuilderselectionproblem)": [[299, "pybrops.breed.prot.sel.prob.GenotypeBuilderSelectionProblem.GenotypeBuilderSelectionProblemMixin"]], "haplomat (pybrops.breed.prot.sel.prob.genotypebuilderselectionproblem.genotypebuilderselectionproblemmixin property)": [[299, "pybrops.breed.prot.sel.prob.GenotypeBuilderSelectionProblem.GenotypeBuilderSelectionProblemMixin.haplomat"]], "nbestfndr (pybrops.breed.prot.sel.prob.genotypebuilderselectionproblem.genotypebuilderselectionproblemmixin property)": [[299, "pybrops.breed.prot.sel.prob.GenotypeBuilderSelectionProblem.GenotypeBuilderSelectionProblemMixin.nbestfndr"]], "nlatent (pybrops.breed.prot.sel.prob.genotypebuilderselectionproblem.genotypebuilderselectionproblemmixin property)": [[299, "pybrops.breed.prot.sel.prob.GenotypeBuilderSelectionProblem.GenotypeBuilderSelectionProblemMixin.nlatent"]], "ploidy (pybrops.breed.prot.sel.prob.genotypebuilderselectionproblem.genotypebuilderselectionproblemmixin property)": [[299, "pybrops.breed.prot.sel.prob.GenotypeBuilderSelectionProblem.GenotypeBuilderSelectionProblemMixin.ploidy"]], "genotypebuildersubsetselectionproblem (class in pybrops.breed.prot.sel.prob.genotypebuilderselectionproblem)": [[300, "pybrops.breed.prot.sel.prob.GenotypeBuilderSelectionProblem.GenotypeBuilderSubsetSelectionProblem"]], "callback (pybrops.breed.prot.sel.prob.genotypebuilderselectionproblem.genotypebuildersubsetselectionproblem property)": [[300, "pybrops.breed.prot.sel.prob.GenotypeBuilderSelectionProblem.GenotypeBuilderSubsetSelectionProblem.callback"]], "data (pybrops.breed.prot.sel.prob.genotypebuilderselectionproblem.genotypebuildersubsetselectionproblem property)": [[300, "pybrops.breed.prot.sel.prob.GenotypeBuilderSelectionProblem.GenotypeBuilderSubsetSelectionProblem.data"]], "decn_space (pybrops.breed.prot.sel.prob.genotypebuilderselectionproblem.genotypebuildersubsetselectionproblem property)": [[300, "pybrops.breed.prot.sel.prob.GenotypeBuilderSelectionProblem.GenotypeBuilderSubsetSelectionProblem.decn_space"]], "decn_space_lower (pybrops.breed.prot.sel.prob.genotypebuilderselectionproblem.genotypebuildersubsetselectionproblem property)": [[300, "pybrops.breed.prot.sel.prob.GenotypeBuilderSelectionProblem.GenotypeBuilderSubsetSelectionProblem.decn_space_lower"]], "decn_space_upper (pybrops.breed.prot.sel.prob.genotypebuilderselectionproblem.genotypebuildersubsetselectionproblem property)": [[300, "pybrops.breed.prot.sel.prob.GenotypeBuilderSelectionProblem.GenotypeBuilderSubsetSelectionProblem.decn_space_upper"]], "elementwise (pybrops.breed.prot.sel.prob.genotypebuilderselectionproblem.genotypebuildersubsetselectionproblem property)": [[300, "pybrops.breed.prot.sel.prob.GenotypeBuilderSelectionProblem.GenotypeBuilderSubsetSelectionProblem.elementwise"]], "elementwise_func (pybrops.breed.prot.sel.prob.genotypebuilderselectionproblem.genotypebuildersubsetselectionproblem property)": [[300, "pybrops.breed.prot.sel.prob.GenotypeBuilderSelectionProblem.GenotypeBuilderSubsetSelectionProblem.elementwise_func"]], "elementwise_runner (pybrops.breed.prot.sel.prob.genotypebuilderselectionproblem.genotypebuildersubsetselectionproblem property)": [[300, "pybrops.breed.prot.sel.prob.GenotypeBuilderSelectionProblem.GenotypeBuilderSubsetSelectionProblem.elementwise_runner"]], "eqcv_trans (pybrops.breed.prot.sel.prob.genotypebuilderselectionproblem.genotypebuildersubsetselectionproblem property)": [[300, "pybrops.breed.prot.sel.prob.GenotypeBuilderSelectionProblem.GenotypeBuilderSubsetSelectionProblem.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.prob.genotypebuilderselectionproblem.genotypebuildersubsetselectionproblem property)": [[300, "pybrops.breed.prot.sel.prob.GenotypeBuilderSelectionProblem.GenotypeBuilderSubsetSelectionProblem.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.prob.genotypebuilderselectionproblem.genotypebuildersubsetselectionproblem property)": [[300, "pybrops.breed.prot.sel.prob.GenotypeBuilderSelectionProblem.GenotypeBuilderSubsetSelectionProblem.eqcv_wt"]], "evalfn() (pybrops.breed.prot.sel.prob.genotypebuilderselectionproblem.genotypebuildersubsetselectionproblem method)": [[300, "pybrops.breed.prot.sel.prob.GenotypeBuilderSelectionProblem.GenotypeBuilderSubsetSelectionProblem.evalfn"]], "exclude_from_serialization (pybrops.breed.prot.sel.prob.genotypebuilderselectionproblem.genotypebuildersubsetselectionproblem property)": [[300, "pybrops.breed.prot.sel.prob.GenotypeBuilderSelectionProblem.GenotypeBuilderSubsetSelectionProblem.exclude_from_serialization"]], "haplomat (pybrops.breed.prot.sel.prob.genotypebuilderselectionproblem.genotypebuildersubsetselectionproblem property)": [[300, "pybrops.breed.prot.sel.prob.GenotypeBuilderSelectionProblem.GenotypeBuilderSubsetSelectionProblem.haplomat"]], "ineqcv_trans (pybrops.breed.prot.sel.prob.genotypebuilderselectionproblem.genotypebuildersubsetselectionproblem property)": [[300, "pybrops.breed.prot.sel.prob.GenotypeBuilderSelectionProblem.GenotypeBuilderSubsetSelectionProblem.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.prob.genotypebuilderselectionproblem.genotypebuildersubsetselectionproblem property)": [[300, "pybrops.breed.prot.sel.prob.GenotypeBuilderSelectionProblem.GenotypeBuilderSubsetSelectionProblem.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.prob.genotypebuilderselectionproblem.genotypebuildersubsetselectionproblem property)": [[300, "pybrops.breed.prot.sel.prob.GenotypeBuilderSelectionProblem.GenotypeBuilderSubsetSelectionProblem.ineqcv_wt"]], "latentfn() (pybrops.breed.prot.sel.prob.genotypebuilderselectionproblem.genotypebuildersubsetselectionproblem method)": [[300, "pybrops.breed.prot.sel.prob.GenotypeBuilderSelectionProblem.GenotypeBuilderSubsetSelectionProblem.latentfn"]], "n_eq_constr (pybrops.breed.prot.sel.prob.genotypebuilderselectionproblem.genotypebuildersubsetselectionproblem property)": [[300, "pybrops.breed.prot.sel.prob.GenotypeBuilderSelectionProblem.GenotypeBuilderSubsetSelectionProblem.n_eq_constr"]], "n_ieq_constr (pybrops.breed.prot.sel.prob.genotypebuilderselectionproblem.genotypebuildersubsetselectionproblem property)": [[300, "pybrops.breed.prot.sel.prob.GenotypeBuilderSelectionProblem.GenotypeBuilderSubsetSelectionProblem.n_ieq_constr"]], "n_obj (pybrops.breed.prot.sel.prob.genotypebuilderselectionproblem.genotypebuildersubsetselectionproblem property)": [[300, "pybrops.breed.prot.sel.prob.GenotypeBuilderSelectionProblem.GenotypeBuilderSubsetSelectionProblem.n_obj"]], "n_var (pybrops.breed.prot.sel.prob.genotypebuilderselectionproblem.genotypebuildersubsetselectionproblem property)": [[300, "pybrops.breed.prot.sel.prob.GenotypeBuilderSelectionProblem.GenotypeBuilderSubsetSelectionProblem.n_var"]], "nbestfndr (pybrops.breed.prot.sel.prob.genotypebuilderselectionproblem.genotypebuildersubsetselectionproblem property)": [[300, "pybrops.breed.prot.sel.prob.GenotypeBuilderSelectionProblem.GenotypeBuilderSubsetSelectionProblem.nbestfndr"]], "ndecn (pybrops.breed.prot.sel.prob.genotypebuilderselectionproblem.genotypebuildersubsetselectionproblem property)": [[300, "pybrops.breed.prot.sel.prob.GenotypeBuilderSelectionProblem.GenotypeBuilderSubsetSelectionProblem.ndecn"]], "neqcv (pybrops.breed.prot.sel.prob.genotypebuilderselectionproblem.genotypebuildersubsetselectionproblem property)": [[300, "pybrops.breed.prot.sel.prob.GenotypeBuilderSelectionProblem.GenotypeBuilderSubsetSelectionProblem.neqcv"]], "nineqcv (pybrops.breed.prot.sel.prob.genotypebuilderselectionproblem.genotypebuildersubsetselectionproblem property)": [[300, "pybrops.breed.prot.sel.prob.GenotypeBuilderSelectionProblem.GenotypeBuilderSubsetSelectionProblem.nineqcv"]], "nlatent (pybrops.breed.prot.sel.prob.genotypebuilderselectionproblem.genotypebuildersubsetselectionproblem property)": [[300, "pybrops.breed.prot.sel.prob.GenotypeBuilderSelectionProblem.GenotypeBuilderSubsetSelectionProblem.nlatent"]], "nobj (pybrops.breed.prot.sel.prob.genotypebuilderselectionproblem.genotypebuildersubsetselectionproblem property)": [[300, "pybrops.breed.prot.sel.prob.GenotypeBuilderSelectionProblem.GenotypeBuilderSubsetSelectionProblem.nobj"]], "obj_trans (pybrops.breed.prot.sel.prob.genotypebuilderselectionproblem.genotypebuildersubsetselectionproblem property)": [[300, "pybrops.breed.prot.sel.prob.GenotypeBuilderSelectionProblem.GenotypeBuilderSubsetSelectionProblem.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.prob.genotypebuilderselectionproblem.genotypebuildersubsetselectionproblem property)": [[300, "pybrops.breed.prot.sel.prob.GenotypeBuilderSelectionProblem.GenotypeBuilderSubsetSelectionProblem.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.prob.genotypebuilderselectionproblem.genotypebuildersubsetselectionproblem property)": [[300, "pybrops.breed.prot.sel.prob.GenotypeBuilderSelectionProblem.GenotypeBuilderSubsetSelectionProblem.obj_wt"]], "ploidy (pybrops.breed.prot.sel.prob.genotypebuilderselectionproblem.genotypebuildersubsetselectionproblem property)": [[300, "pybrops.breed.prot.sel.prob.GenotypeBuilderSelectionProblem.GenotypeBuilderSubsetSelectionProblem.ploidy"]], "replace_nan_values_by (pybrops.breed.prot.sel.prob.genotypebuilderselectionproblem.genotypebuildersubsetselectionproblem property)": [[300, "pybrops.breed.prot.sel.prob.GenotypeBuilderSelectionProblem.GenotypeBuilderSubsetSelectionProblem.replace_nan_values_by"]], "strict (pybrops.breed.prot.sel.prob.genotypebuilderselectionproblem.genotypebuildersubsetselectionproblem property)": [[300, "pybrops.breed.prot.sel.prob.GenotypeBuilderSelectionProblem.GenotypeBuilderSubsetSelectionProblem.strict"]], "vars (pybrops.breed.prot.sel.prob.genotypebuilderselectionproblem.genotypebuildersubsetselectionproblem property)": [[300, "pybrops.breed.prot.sel.prob.GenotypeBuilderSelectionProblem.GenotypeBuilderSubsetSelectionProblem.vars"]], "vtype (pybrops.breed.prot.sel.prob.genotypebuilderselectionproblem.genotypebuildersubsetselectionproblem property)": [[300, "pybrops.breed.prot.sel.prob.GenotypeBuilderSelectionProblem.GenotypeBuilderSubsetSelectionProblem.vtype"]], "xl (pybrops.breed.prot.sel.prob.genotypebuilderselectionproblem.genotypebuildersubsetselectionproblem property)": [[300, "pybrops.breed.prot.sel.prob.GenotypeBuilderSelectionProblem.GenotypeBuilderSubsetSelectionProblem.xl"]], "xu (pybrops.breed.prot.sel.prob.genotypebuilderselectionproblem.genotypebuildersubsetselectionproblem property)": [[300, "pybrops.breed.prot.sel.prob.GenotypeBuilderSelectionProblem.GenotypeBuilderSubsetSelectionProblem.xu"]], "pybrops.breed.prot.sel.prob.integermateselectionproblem": [[301, "module-pybrops.breed.prot.sel.prob.IntegerMateSelectionProblem"]], "integermateselectionproblem (class in pybrops.breed.prot.sel.prob.integermateselectionproblem)": [[302, "pybrops.breed.prot.sel.prob.IntegerMateSelectionProblem.IntegerMateSelectionProblem"]], "callback (pybrops.breed.prot.sel.prob.integermateselectionproblem.integermateselectionproblem property)": [[302, "pybrops.breed.prot.sel.prob.IntegerMateSelectionProblem.IntegerMateSelectionProblem.callback"]], "data (pybrops.breed.prot.sel.prob.integermateselectionproblem.integermateselectionproblem property)": [[302, "pybrops.breed.prot.sel.prob.IntegerMateSelectionProblem.IntegerMateSelectionProblem.data"]], "decn_space (pybrops.breed.prot.sel.prob.integermateselectionproblem.integermateselectionproblem property)": [[302, "pybrops.breed.prot.sel.prob.IntegerMateSelectionProblem.IntegerMateSelectionProblem.decn_space"]], "decn_space_lower (pybrops.breed.prot.sel.prob.integermateselectionproblem.integermateselectionproblem property)": [[302, "pybrops.breed.prot.sel.prob.IntegerMateSelectionProblem.IntegerMateSelectionProblem.decn_space_lower"]], "decn_space_upper (pybrops.breed.prot.sel.prob.integermateselectionproblem.integermateselectionproblem property)": [[302, "pybrops.breed.prot.sel.prob.IntegerMateSelectionProblem.IntegerMateSelectionProblem.decn_space_upper"]], "decn_space_xmap (pybrops.breed.prot.sel.prob.integermateselectionproblem.integermateselectionproblem property)": [[302, "pybrops.breed.prot.sel.prob.IntegerMateSelectionProblem.IntegerMateSelectionProblem.decn_space_xmap"]], "elementwise (pybrops.breed.prot.sel.prob.integermateselectionproblem.integermateselectionproblem property)": [[302, "pybrops.breed.prot.sel.prob.IntegerMateSelectionProblem.IntegerMateSelectionProblem.elementwise"]], "elementwise_func (pybrops.breed.prot.sel.prob.integermateselectionproblem.integermateselectionproblem property)": [[302, "pybrops.breed.prot.sel.prob.IntegerMateSelectionProblem.IntegerMateSelectionProblem.elementwise_func"]], "elementwise_runner (pybrops.breed.prot.sel.prob.integermateselectionproblem.integermateselectionproblem property)": [[302, "pybrops.breed.prot.sel.prob.IntegerMateSelectionProblem.IntegerMateSelectionProblem.elementwise_runner"]], "eqcv_trans (pybrops.breed.prot.sel.prob.integermateselectionproblem.integermateselectionproblem property)": [[302, "pybrops.breed.prot.sel.prob.IntegerMateSelectionProblem.IntegerMateSelectionProblem.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.prob.integermateselectionproblem.integermateselectionproblem property)": [[302, "pybrops.breed.prot.sel.prob.IntegerMateSelectionProblem.IntegerMateSelectionProblem.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.prob.integermateselectionproblem.integermateselectionproblem property)": [[302, "pybrops.breed.prot.sel.prob.IntegerMateSelectionProblem.IntegerMateSelectionProblem.eqcv_wt"]], "evalfn() (pybrops.breed.prot.sel.prob.integermateselectionproblem.integermateselectionproblem method)": [[302, "pybrops.breed.prot.sel.prob.IntegerMateSelectionProblem.IntegerMateSelectionProblem.evalfn"]], "exclude_from_serialization (pybrops.breed.prot.sel.prob.integermateselectionproblem.integermateselectionproblem property)": [[302, "pybrops.breed.prot.sel.prob.IntegerMateSelectionProblem.IntegerMateSelectionProblem.exclude_from_serialization"]], "ineqcv_trans (pybrops.breed.prot.sel.prob.integermateselectionproblem.integermateselectionproblem property)": [[302, "pybrops.breed.prot.sel.prob.IntegerMateSelectionProblem.IntegerMateSelectionProblem.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.prob.integermateselectionproblem.integermateselectionproblem property)": [[302, "pybrops.breed.prot.sel.prob.IntegerMateSelectionProblem.IntegerMateSelectionProblem.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.prob.integermateselectionproblem.integermateselectionproblem property)": [[302, "pybrops.breed.prot.sel.prob.IntegerMateSelectionProblem.IntegerMateSelectionProblem.ineqcv_wt"]], "latentfn() (pybrops.breed.prot.sel.prob.integermateselectionproblem.integermateselectionproblem method)": [[302, "pybrops.breed.prot.sel.prob.IntegerMateSelectionProblem.IntegerMateSelectionProblem.latentfn"]], "n_eq_constr (pybrops.breed.prot.sel.prob.integermateselectionproblem.integermateselectionproblem property)": [[302, "pybrops.breed.prot.sel.prob.IntegerMateSelectionProblem.IntegerMateSelectionProblem.n_eq_constr"]], "n_ieq_constr (pybrops.breed.prot.sel.prob.integermateselectionproblem.integermateselectionproblem property)": [[302, "pybrops.breed.prot.sel.prob.IntegerMateSelectionProblem.IntegerMateSelectionProblem.n_ieq_constr"]], "n_obj (pybrops.breed.prot.sel.prob.integermateselectionproblem.integermateselectionproblem property)": [[302, "pybrops.breed.prot.sel.prob.IntegerMateSelectionProblem.IntegerMateSelectionProblem.n_obj"]], "n_var (pybrops.breed.prot.sel.prob.integermateselectionproblem.integermateselectionproblem property)": [[302, "pybrops.breed.prot.sel.prob.IntegerMateSelectionProblem.IntegerMateSelectionProblem.n_var"]], "ndecn (pybrops.breed.prot.sel.prob.integermateselectionproblem.integermateselectionproblem property)": [[302, "pybrops.breed.prot.sel.prob.IntegerMateSelectionProblem.IntegerMateSelectionProblem.ndecn"]], "neqcv (pybrops.breed.prot.sel.prob.integermateselectionproblem.integermateselectionproblem property)": [[302, "pybrops.breed.prot.sel.prob.IntegerMateSelectionProblem.IntegerMateSelectionProblem.neqcv"]], "nineqcv (pybrops.breed.prot.sel.prob.integermateselectionproblem.integermateselectionproblem property)": [[302, "pybrops.breed.prot.sel.prob.IntegerMateSelectionProblem.IntegerMateSelectionProblem.nineqcv"]], "nlatent (pybrops.breed.prot.sel.prob.integermateselectionproblem.integermateselectionproblem property)": [[302, "pybrops.breed.prot.sel.prob.IntegerMateSelectionProblem.IntegerMateSelectionProblem.nlatent"]], "nobj (pybrops.breed.prot.sel.prob.integermateselectionproblem.integermateselectionproblem property)": [[302, "pybrops.breed.prot.sel.prob.IntegerMateSelectionProblem.IntegerMateSelectionProblem.nobj"]], "obj_trans (pybrops.breed.prot.sel.prob.integermateselectionproblem.integermateselectionproblem property)": [[302, "pybrops.breed.prot.sel.prob.IntegerMateSelectionProblem.IntegerMateSelectionProblem.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.prob.integermateselectionproblem.integermateselectionproblem property)": [[302, "pybrops.breed.prot.sel.prob.IntegerMateSelectionProblem.IntegerMateSelectionProblem.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.prob.integermateselectionproblem.integermateselectionproblem property)": [[302, "pybrops.breed.prot.sel.prob.IntegerMateSelectionProblem.IntegerMateSelectionProblem.obj_wt"]], "replace_nan_values_by (pybrops.breed.prot.sel.prob.integermateselectionproblem.integermateselectionproblem property)": [[302, "pybrops.breed.prot.sel.prob.IntegerMateSelectionProblem.IntegerMateSelectionProblem.replace_nan_values_by"]], "strict (pybrops.breed.prot.sel.prob.integermateselectionproblem.integermateselectionproblem property)": [[302, "pybrops.breed.prot.sel.prob.IntegerMateSelectionProblem.IntegerMateSelectionProblem.strict"]], "vars (pybrops.breed.prot.sel.prob.integermateselectionproblem.integermateselectionproblem property)": [[302, "pybrops.breed.prot.sel.prob.IntegerMateSelectionProblem.IntegerMateSelectionProblem.vars"]], "vtype (pybrops.breed.prot.sel.prob.integermateselectionproblem.integermateselectionproblem property)": [[302, "pybrops.breed.prot.sel.prob.IntegerMateSelectionProblem.IntegerMateSelectionProblem.vtype"]], "xl (pybrops.breed.prot.sel.prob.integermateselectionproblem.integermateselectionproblem property)": [[302, "pybrops.breed.prot.sel.prob.IntegerMateSelectionProblem.IntegerMateSelectionProblem.xl"]], "xu (pybrops.breed.prot.sel.prob.integermateselectionproblem.integermateselectionproblem property)": [[302, "pybrops.breed.prot.sel.prob.IntegerMateSelectionProblem.IntegerMateSelectionProblem.xu"]], "pybrops.breed.prot.sel.prob.integerselectionproblem": [[303, "module-pybrops.breed.prot.sel.prob.IntegerSelectionProblem"]], "integerselectionproblem (class in pybrops.breed.prot.sel.prob.integerselectionproblem)": [[304, "pybrops.breed.prot.sel.prob.IntegerSelectionProblem.IntegerSelectionProblem"]], "callback (pybrops.breed.prot.sel.prob.integerselectionproblem.integerselectionproblem property)": [[304, "pybrops.breed.prot.sel.prob.IntegerSelectionProblem.IntegerSelectionProblem.callback"]], "data (pybrops.breed.prot.sel.prob.integerselectionproblem.integerselectionproblem property)": [[304, "pybrops.breed.prot.sel.prob.IntegerSelectionProblem.IntegerSelectionProblem.data"]], "decn_space (pybrops.breed.prot.sel.prob.integerselectionproblem.integerselectionproblem property)": [[304, "pybrops.breed.prot.sel.prob.IntegerSelectionProblem.IntegerSelectionProblem.decn_space"]], "decn_space_lower (pybrops.breed.prot.sel.prob.integerselectionproblem.integerselectionproblem property)": [[304, "pybrops.breed.prot.sel.prob.IntegerSelectionProblem.IntegerSelectionProblem.decn_space_lower"]], "decn_space_upper (pybrops.breed.prot.sel.prob.integerselectionproblem.integerselectionproblem property)": [[304, "pybrops.breed.prot.sel.prob.IntegerSelectionProblem.IntegerSelectionProblem.decn_space_upper"]], "elementwise (pybrops.breed.prot.sel.prob.integerselectionproblem.integerselectionproblem property)": [[304, "pybrops.breed.prot.sel.prob.IntegerSelectionProblem.IntegerSelectionProblem.elementwise"]], "elementwise_func (pybrops.breed.prot.sel.prob.integerselectionproblem.integerselectionproblem property)": [[304, "pybrops.breed.prot.sel.prob.IntegerSelectionProblem.IntegerSelectionProblem.elementwise_func"]], "elementwise_runner (pybrops.breed.prot.sel.prob.integerselectionproblem.integerselectionproblem property)": [[304, "pybrops.breed.prot.sel.prob.IntegerSelectionProblem.IntegerSelectionProblem.elementwise_runner"]], "eqcv_trans (pybrops.breed.prot.sel.prob.integerselectionproblem.integerselectionproblem property)": [[304, "pybrops.breed.prot.sel.prob.IntegerSelectionProblem.IntegerSelectionProblem.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.prob.integerselectionproblem.integerselectionproblem property)": [[304, "pybrops.breed.prot.sel.prob.IntegerSelectionProblem.IntegerSelectionProblem.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.prob.integerselectionproblem.integerselectionproblem property)": [[304, "pybrops.breed.prot.sel.prob.IntegerSelectionProblem.IntegerSelectionProblem.eqcv_wt"]], "evalfn() (pybrops.breed.prot.sel.prob.integerselectionproblem.integerselectionproblem method)": [[304, "pybrops.breed.prot.sel.prob.IntegerSelectionProblem.IntegerSelectionProblem.evalfn"]], "exclude_from_serialization (pybrops.breed.prot.sel.prob.integerselectionproblem.integerselectionproblem property)": [[304, "pybrops.breed.prot.sel.prob.IntegerSelectionProblem.IntegerSelectionProblem.exclude_from_serialization"]], "ineqcv_trans (pybrops.breed.prot.sel.prob.integerselectionproblem.integerselectionproblem property)": [[304, "pybrops.breed.prot.sel.prob.IntegerSelectionProblem.IntegerSelectionProblem.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.prob.integerselectionproblem.integerselectionproblem property)": [[304, "pybrops.breed.prot.sel.prob.IntegerSelectionProblem.IntegerSelectionProblem.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.prob.integerselectionproblem.integerselectionproblem property)": [[304, "pybrops.breed.prot.sel.prob.IntegerSelectionProblem.IntegerSelectionProblem.ineqcv_wt"]], "latentfn() (pybrops.breed.prot.sel.prob.integerselectionproblem.integerselectionproblem method)": [[304, "pybrops.breed.prot.sel.prob.IntegerSelectionProblem.IntegerSelectionProblem.latentfn"]], "n_eq_constr (pybrops.breed.prot.sel.prob.integerselectionproblem.integerselectionproblem property)": [[304, "pybrops.breed.prot.sel.prob.IntegerSelectionProblem.IntegerSelectionProblem.n_eq_constr"]], "n_ieq_constr (pybrops.breed.prot.sel.prob.integerselectionproblem.integerselectionproblem property)": [[304, "pybrops.breed.prot.sel.prob.IntegerSelectionProblem.IntegerSelectionProblem.n_ieq_constr"]], "n_obj (pybrops.breed.prot.sel.prob.integerselectionproblem.integerselectionproblem property)": [[304, "pybrops.breed.prot.sel.prob.IntegerSelectionProblem.IntegerSelectionProblem.n_obj"]], "n_var (pybrops.breed.prot.sel.prob.integerselectionproblem.integerselectionproblem property)": [[304, "pybrops.breed.prot.sel.prob.IntegerSelectionProblem.IntegerSelectionProblem.n_var"]], "ndecn (pybrops.breed.prot.sel.prob.integerselectionproblem.integerselectionproblem property)": [[304, "pybrops.breed.prot.sel.prob.IntegerSelectionProblem.IntegerSelectionProblem.ndecn"]], "neqcv (pybrops.breed.prot.sel.prob.integerselectionproblem.integerselectionproblem property)": [[304, "pybrops.breed.prot.sel.prob.IntegerSelectionProblem.IntegerSelectionProblem.neqcv"]], "nineqcv (pybrops.breed.prot.sel.prob.integerselectionproblem.integerselectionproblem property)": [[304, "pybrops.breed.prot.sel.prob.IntegerSelectionProblem.IntegerSelectionProblem.nineqcv"]], "nlatent (pybrops.breed.prot.sel.prob.integerselectionproblem.integerselectionproblem property)": [[304, "pybrops.breed.prot.sel.prob.IntegerSelectionProblem.IntegerSelectionProblem.nlatent"]], "nobj (pybrops.breed.prot.sel.prob.integerselectionproblem.integerselectionproblem property)": [[304, "pybrops.breed.prot.sel.prob.IntegerSelectionProblem.IntegerSelectionProblem.nobj"]], "obj_trans (pybrops.breed.prot.sel.prob.integerselectionproblem.integerselectionproblem property)": [[304, "pybrops.breed.prot.sel.prob.IntegerSelectionProblem.IntegerSelectionProblem.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.prob.integerselectionproblem.integerselectionproblem property)": [[304, "pybrops.breed.prot.sel.prob.IntegerSelectionProblem.IntegerSelectionProblem.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.prob.integerselectionproblem.integerselectionproblem property)": [[304, "pybrops.breed.prot.sel.prob.IntegerSelectionProblem.IntegerSelectionProblem.obj_wt"]], "replace_nan_values_by (pybrops.breed.prot.sel.prob.integerselectionproblem.integerselectionproblem property)": [[304, "pybrops.breed.prot.sel.prob.IntegerSelectionProblem.IntegerSelectionProblem.replace_nan_values_by"]], "strict (pybrops.breed.prot.sel.prob.integerselectionproblem.integerselectionproblem property)": [[304, "pybrops.breed.prot.sel.prob.IntegerSelectionProblem.IntegerSelectionProblem.strict"]], "vars (pybrops.breed.prot.sel.prob.integerselectionproblem.integerselectionproblem property)": [[304, "pybrops.breed.prot.sel.prob.IntegerSelectionProblem.IntegerSelectionProblem.vars"]], "vtype (pybrops.breed.prot.sel.prob.integerselectionproblem.integerselectionproblem property)": [[304, "pybrops.breed.prot.sel.prob.IntegerSelectionProblem.IntegerSelectionProblem.vtype"]], "xl (pybrops.breed.prot.sel.prob.integerselectionproblem.integerselectionproblem property)": [[304, "pybrops.breed.prot.sel.prob.IntegerSelectionProblem.IntegerSelectionProblem.xl"]], "xu (pybrops.breed.prot.sel.prob.integerselectionproblem.integerselectionproblem property)": [[304, "pybrops.breed.prot.sel.prob.IntegerSelectionProblem.IntegerSelectionProblem.xu"]], "check_is_integerselectionproblem() (in module pybrops.breed.prot.sel.prob.integerselectionproblem)": [[305, "pybrops.breed.prot.sel.prob.IntegerSelectionProblem.check_is_IntegerSelectionProblem"]], "pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem": [[306, "module-pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem"]], "l1normgenomicbinaryselectionproblem (class in pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem)": [[307, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicBinarySelectionProblem"]], "v (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicbinaryselectionproblem property)": [[307, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicBinarySelectionProblem.V"]], "callback (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicbinaryselectionproblem property)": [[307, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicBinarySelectionProblem.callback"]], "data (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicbinaryselectionproblem property)": [[307, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicBinarySelectionProblem.data"]], "decn_space (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicbinaryselectionproblem property)": [[307, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicBinarySelectionProblem.decn_space"]], "decn_space_lower (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicbinaryselectionproblem property)": [[307, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicBinarySelectionProblem.decn_space_lower"]], "decn_space_upper (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicbinaryselectionproblem property)": [[307, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicBinarySelectionProblem.decn_space_upper"]], "elementwise (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicbinaryselectionproblem property)": [[307, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicBinarySelectionProblem.elementwise"]], "elementwise_func (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicbinaryselectionproblem property)": [[307, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicBinarySelectionProblem.elementwise_func"]], "elementwise_runner (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicbinaryselectionproblem property)": [[307, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicBinarySelectionProblem.elementwise_runner"]], "eqcv_trans (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicbinaryselectionproblem property)": [[307, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicBinarySelectionProblem.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicbinaryselectionproblem property)": [[307, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicBinarySelectionProblem.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicbinaryselectionproblem property)": [[307, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicBinarySelectionProblem.eqcv_wt"]], "evalfn() (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicbinaryselectionproblem method)": [[307, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicBinarySelectionProblem.evalfn"]], "exclude_from_serialization (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicbinaryselectionproblem property)": [[307, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicBinarySelectionProblem.exclude_from_serialization"]], "from_numpy() (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicbinaryselectionproblem class method)": [[307, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicBinarySelectionProblem.from_numpy"]], "ineqcv_trans (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicbinaryselectionproblem property)": [[307, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicBinarySelectionProblem.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicbinaryselectionproblem property)": [[307, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicBinarySelectionProblem.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicbinaryselectionproblem property)": [[307, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicBinarySelectionProblem.ineqcv_wt"]], "latentfn() (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicbinaryselectionproblem method)": [[307, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicBinarySelectionProblem.latentfn"]], "n_eq_constr (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicbinaryselectionproblem property)": [[307, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicBinarySelectionProblem.n_eq_constr"]], "n_ieq_constr (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicbinaryselectionproblem property)": [[307, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicBinarySelectionProblem.n_ieq_constr"]], "n_obj (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicbinaryselectionproblem property)": [[307, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicBinarySelectionProblem.n_obj"]], "n_var (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicbinaryselectionproblem property)": [[307, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicBinarySelectionProblem.n_var"]], "ndecn (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicbinaryselectionproblem property)": [[307, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicBinarySelectionProblem.ndecn"]], "neqcv (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicbinaryselectionproblem property)": [[307, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicBinarySelectionProblem.neqcv"]], "nineqcv (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicbinaryselectionproblem property)": [[307, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicBinarySelectionProblem.nineqcv"]], "nlatent (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicbinaryselectionproblem property)": [[307, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicBinarySelectionProblem.nlatent"]], "nobj (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicbinaryselectionproblem property)": [[307, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicBinarySelectionProblem.nobj"]], "obj_trans (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicbinaryselectionproblem property)": [[307, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicBinarySelectionProblem.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicbinaryselectionproblem property)": [[307, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicBinarySelectionProblem.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicbinaryselectionproblem property)": [[307, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicBinarySelectionProblem.obj_wt"]], "replace_nan_values_by (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicbinaryselectionproblem property)": [[307, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicBinarySelectionProblem.replace_nan_values_by"]], "strict (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicbinaryselectionproblem property)": [[307, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicBinarySelectionProblem.strict"]], "vars (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicbinaryselectionproblem property)": [[307, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicBinarySelectionProblem.vars"]], "vtype (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicbinaryselectionproblem property)": [[307, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicBinarySelectionProblem.vtype"]], "xl (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicbinaryselectionproblem property)": [[307, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicBinarySelectionProblem.xl"]], "xu (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicbinaryselectionproblem property)": [[307, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicBinarySelectionProblem.xu"]], "l1normgenomicintegerselectionproblem (class in pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem)": [[308, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicIntegerSelectionProblem"]], "v (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicintegerselectionproblem property)": [[308, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicIntegerSelectionProblem.V"]], "callback (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicintegerselectionproblem property)": [[308, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicIntegerSelectionProblem.callback"]], "data (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicintegerselectionproblem property)": [[308, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicIntegerSelectionProblem.data"]], "decn_space (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicintegerselectionproblem property)": [[308, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicIntegerSelectionProblem.decn_space"]], "decn_space_lower (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicintegerselectionproblem property)": [[308, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicIntegerSelectionProblem.decn_space_lower"]], "decn_space_upper (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicintegerselectionproblem property)": [[308, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicIntegerSelectionProblem.decn_space_upper"]], "elementwise (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicintegerselectionproblem property)": [[308, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicIntegerSelectionProblem.elementwise"]], "elementwise_func (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicintegerselectionproblem property)": [[308, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicIntegerSelectionProblem.elementwise_func"]], "elementwise_runner (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicintegerselectionproblem property)": [[308, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicIntegerSelectionProblem.elementwise_runner"]], "eqcv_trans (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicintegerselectionproblem property)": [[308, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicIntegerSelectionProblem.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicintegerselectionproblem property)": [[308, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicIntegerSelectionProblem.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicintegerselectionproblem property)": [[308, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicIntegerSelectionProblem.eqcv_wt"]], "evalfn() (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicintegerselectionproblem method)": [[308, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicIntegerSelectionProblem.evalfn"]], "exclude_from_serialization (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicintegerselectionproblem property)": [[308, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicIntegerSelectionProblem.exclude_from_serialization"]], "from_numpy() (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicintegerselectionproblem class method)": [[308, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicIntegerSelectionProblem.from_numpy"]], "ineqcv_trans (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicintegerselectionproblem property)": [[308, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicIntegerSelectionProblem.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicintegerselectionproblem property)": [[308, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicIntegerSelectionProblem.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicintegerselectionproblem property)": [[308, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicIntegerSelectionProblem.ineqcv_wt"]], "latentfn() (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicintegerselectionproblem method)": [[308, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicIntegerSelectionProblem.latentfn"]], "n_eq_constr (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicintegerselectionproblem property)": [[308, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicIntegerSelectionProblem.n_eq_constr"]], "n_ieq_constr (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicintegerselectionproblem property)": [[308, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicIntegerSelectionProblem.n_ieq_constr"]], "n_obj (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicintegerselectionproblem property)": [[308, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicIntegerSelectionProblem.n_obj"]], "n_var (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicintegerselectionproblem property)": [[308, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicIntegerSelectionProblem.n_var"]], "ndecn (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicintegerselectionproblem property)": [[308, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicIntegerSelectionProblem.ndecn"]], "neqcv (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicintegerselectionproblem property)": [[308, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicIntegerSelectionProblem.neqcv"]], "nineqcv (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicintegerselectionproblem property)": [[308, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicIntegerSelectionProblem.nineqcv"]], "nlatent (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicintegerselectionproblem property)": [[308, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicIntegerSelectionProblem.nlatent"]], "nobj (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicintegerselectionproblem property)": [[308, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicIntegerSelectionProblem.nobj"]], "obj_trans (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicintegerselectionproblem property)": [[308, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicIntegerSelectionProblem.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicintegerselectionproblem property)": [[308, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicIntegerSelectionProblem.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicintegerselectionproblem property)": [[308, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicIntegerSelectionProblem.obj_wt"]], "replace_nan_values_by (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicintegerselectionproblem property)": [[308, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicIntegerSelectionProblem.replace_nan_values_by"]], "strict (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicintegerselectionproblem property)": [[308, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicIntegerSelectionProblem.strict"]], "vars (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicintegerselectionproblem property)": [[308, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicIntegerSelectionProblem.vars"]], "vtype (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicintegerselectionproblem property)": [[308, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicIntegerSelectionProblem.vtype"]], "xl (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicintegerselectionproblem property)": [[308, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicIntegerSelectionProblem.xl"]], "xu (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicintegerselectionproblem property)": [[308, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicIntegerSelectionProblem.xu"]], "l1normgenomicrealselectionproblem (class in pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem)": [[309, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicRealSelectionProblem"]], "v (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicrealselectionproblem property)": [[309, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicRealSelectionProblem.V"]], "callback (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicrealselectionproblem property)": [[309, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicRealSelectionProblem.callback"]], "data (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicrealselectionproblem property)": [[309, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicRealSelectionProblem.data"]], "decn_space (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicrealselectionproblem property)": [[309, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicRealSelectionProblem.decn_space"]], "decn_space_lower (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicrealselectionproblem property)": [[309, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicRealSelectionProblem.decn_space_lower"]], "decn_space_upper (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicrealselectionproblem property)": [[309, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicRealSelectionProblem.decn_space_upper"]], "elementwise (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicrealselectionproblem property)": [[309, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicRealSelectionProblem.elementwise"]], "elementwise_func (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicrealselectionproblem property)": [[309, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicRealSelectionProblem.elementwise_func"]], "elementwise_runner (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicrealselectionproblem property)": [[309, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicRealSelectionProblem.elementwise_runner"]], "eqcv_trans (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicrealselectionproblem property)": [[309, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicRealSelectionProblem.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicrealselectionproblem property)": [[309, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicRealSelectionProblem.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicrealselectionproblem property)": [[309, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicRealSelectionProblem.eqcv_wt"]], "evalfn() (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicrealselectionproblem method)": [[309, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicRealSelectionProblem.evalfn"]], "exclude_from_serialization (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicrealselectionproblem property)": [[309, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicRealSelectionProblem.exclude_from_serialization"]], "from_numpy() (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicrealselectionproblem class method)": [[309, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicRealSelectionProblem.from_numpy"]], "ineqcv_trans (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicrealselectionproblem property)": [[309, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicRealSelectionProblem.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicrealselectionproblem property)": [[309, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicRealSelectionProblem.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicrealselectionproblem property)": [[309, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicRealSelectionProblem.ineqcv_wt"]], "latentfn() (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicrealselectionproblem method)": [[309, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicRealSelectionProblem.latentfn"]], "n_eq_constr (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicrealselectionproblem property)": [[309, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicRealSelectionProblem.n_eq_constr"]], "n_ieq_constr (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicrealselectionproblem property)": [[309, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicRealSelectionProblem.n_ieq_constr"]], "n_obj (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicrealselectionproblem property)": [[309, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicRealSelectionProblem.n_obj"]], "n_var (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicrealselectionproblem property)": [[309, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicRealSelectionProblem.n_var"]], "ndecn (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicrealselectionproblem property)": [[309, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicRealSelectionProblem.ndecn"]], "neqcv (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicrealselectionproblem property)": [[309, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicRealSelectionProblem.neqcv"]], "nineqcv (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicrealselectionproblem property)": [[309, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicRealSelectionProblem.nineqcv"]], "nlatent (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicrealselectionproblem property)": [[309, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicRealSelectionProblem.nlatent"]], "nobj (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicrealselectionproblem property)": [[309, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicRealSelectionProblem.nobj"]], "obj_trans (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicrealselectionproblem property)": [[309, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicRealSelectionProblem.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicrealselectionproblem property)": [[309, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicRealSelectionProblem.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicrealselectionproblem property)": [[309, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicRealSelectionProblem.obj_wt"]], "replace_nan_values_by (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicrealselectionproblem property)": [[309, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicRealSelectionProblem.replace_nan_values_by"]], "strict (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicrealselectionproblem property)": [[309, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicRealSelectionProblem.strict"]], "vars (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicrealselectionproblem property)": [[309, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicRealSelectionProblem.vars"]], "vtype (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicrealselectionproblem property)": [[309, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicRealSelectionProblem.vtype"]], "xl (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicrealselectionproblem property)": [[309, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicRealSelectionProblem.xl"]], "xu (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicrealselectionproblem property)": [[309, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicRealSelectionProblem.xu"]], "l1normgenomicselectionproblemmixin (class in pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem)": [[310, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicSelectionProblemMixin"]], "v (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicselectionproblemmixin property)": [[310, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicSelectionProblemMixin.V"]], "from_numpy() (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicselectionproblemmixin class method)": [[310, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicSelectionProblemMixin.from_numpy"]], "nlatent (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicselectionproblemmixin property)": [[310, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicSelectionProblemMixin.nlatent"]], "l1normgenomicsubsetselectionproblem (class in pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem)": [[311, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicSubsetSelectionProblem"]], "v (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicsubsetselectionproblem property)": [[311, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicSubsetSelectionProblem.V"]], "callback (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicsubsetselectionproblem property)": [[311, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicSubsetSelectionProblem.callback"]], "data (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicsubsetselectionproblem property)": [[311, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicSubsetSelectionProblem.data"]], "decn_space (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicsubsetselectionproblem property)": [[311, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicSubsetSelectionProblem.decn_space"]], "decn_space_lower (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicsubsetselectionproblem property)": [[311, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicSubsetSelectionProblem.decn_space_lower"]], "decn_space_upper (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicsubsetselectionproblem property)": [[311, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicSubsetSelectionProblem.decn_space_upper"]], "elementwise (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicsubsetselectionproblem property)": [[311, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicSubsetSelectionProblem.elementwise"]], "elementwise_func (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicsubsetselectionproblem property)": [[311, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicSubsetSelectionProblem.elementwise_func"]], "elementwise_runner (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicsubsetselectionproblem property)": [[311, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicSubsetSelectionProblem.elementwise_runner"]], "eqcv_trans (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicsubsetselectionproblem property)": [[311, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicSubsetSelectionProblem.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicsubsetselectionproblem property)": [[311, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicSubsetSelectionProblem.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicsubsetselectionproblem property)": [[311, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicSubsetSelectionProblem.eqcv_wt"]], "evalfn() (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicsubsetselectionproblem method)": [[311, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicSubsetSelectionProblem.evalfn"]], "exclude_from_serialization (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicsubsetselectionproblem property)": [[311, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicSubsetSelectionProblem.exclude_from_serialization"]], "from_numpy() (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicsubsetselectionproblem class method)": [[311, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicSubsetSelectionProblem.from_numpy"]], "ineqcv_trans (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicsubsetselectionproblem property)": [[311, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicSubsetSelectionProblem.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicsubsetselectionproblem property)": [[311, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicSubsetSelectionProblem.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicsubsetselectionproblem property)": [[311, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicSubsetSelectionProblem.ineqcv_wt"]], "latentfn() (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicsubsetselectionproblem method)": [[311, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicSubsetSelectionProblem.latentfn"]], "n_eq_constr (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicsubsetselectionproblem property)": [[311, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicSubsetSelectionProblem.n_eq_constr"]], "n_ieq_constr (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicsubsetselectionproblem property)": [[311, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicSubsetSelectionProblem.n_ieq_constr"]], "n_obj (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicsubsetselectionproblem property)": [[311, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicSubsetSelectionProblem.n_obj"]], "n_var (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicsubsetselectionproblem property)": [[311, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicSubsetSelectionProblem.n_var"]], "ndecn (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicsubsetselectionproblem property)": [[311, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicSubsetSelectionProblem.ndecn"]], "neqcv (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicsubsetselectionproblem property)": [[311, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicSubsetSelectionProblem.neqcv"]], "nineqcv (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicsubsetselectionproblem property)": [[311, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicSubsetSelectionProblem.nineqcv"]], "nlatent (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicsubsetselectionproblem property)": [[311, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicSubsetSelectionProblem.nlatent"]], "nobj (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicsubsetselectionproblem property)": [[311, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicSubsetSelectionProblem.nobj"]], "obj_trans (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicsubsetselectionproblem property)": [[311, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicSubsetSelectionProblem.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicsubsetselectionproblem property)": [[311, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicSubsetSelectionProblem.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicsubsetselectionproblem property)": [[311, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicSubsetSelectionProblem.obj_wt"]], "replace_nan_values_by (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicsubsetselectionproblem property)": [[311, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicSubsetSelectionProblem.replace_nan_values_by"]], "strict (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicsubsetselectionproblem property)": [[311, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicSubsetSelectionProblem.strict"]], "vars (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicsubsetselectionproblem property)": [[311, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicSubsetSelectionProblem.vars"]], "vtype (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicsubsetselectionproblem property)": [[311, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicSubsetSelectionProblem.vtype"]], "xl (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicsubsetselectionproblem property)": [[311, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicSubsetSelectionProblem.xl"]], "xu (pybrops.breed.prot.sel.prob.l1normgenomicselectionproblem.l1normgenomicsubsetselectionproblem property)": [[311, "pybrops.breed.prot.sel.prob.L1NormGenomicSelectionProblem.L1NormGenomicSubsetSelectionProblem.xu"]], "pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem": [[312, "module-pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem"]], "c (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicbinaryselectionproblem property)": [[313, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicBinarySelectionProblem.C"]], "l2normgenomicbinaryselectionproblem (class in pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem)": [[313, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicBinarySelectionProblem"]], "callback (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicbinaryselectionproblem property)": [[313, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicBinarySelectionProblem.callback"]], "data (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicbinaryselectionproblem property)": [[313, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicBinarySelectionProblem.data"]], "decn_space (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicbinaryselectionproblem property)": [[313, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicBinarySelectionProblem.decn_space"]], "decn_space_lower (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicbinaryselectionproblem property)": [[313, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicBinarySelectionProblem.decn_space_lower"]], "decn_space_upper (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicbinaryselectionproblem property)": [[313, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicBinarySelectionProblem.decn_space_upper"]], "elementwise (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicbinaryselectionproblem property)": [[313, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicBinarySelectionProblem.elementwise"]], "elementwise_func (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicbinaryselectionproblem property)": [[313, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicBinarySelectionProblem.elementwise_func"]], "elementwise_runner (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicbinaryselectionproblem property)": [[313, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicBinarySelectionProblem.elementwise_runner"]], "eqcv_trans (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicbinaryselectionproblem property)": [[313, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicBinarySelectionProblem.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicbinaryselectionproblem property)": [[313, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicBinarySelectionProblem.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicbinaryselectionproblem property)": [[313, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicBinarySelectionProblem.eqcv_wt"]], "evalfn() (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicbinaryselectionproblem method)": [[313, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicBinarySelectionProblem.evalfn"]], "exclude_from_serialization (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicbinaryselectionproblem property)": [[313, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicBinarySelectionProblem.exclude_from_serialization"]], "from_gmat() (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicbinaryselectionproblem class method)": [[313, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicBinarySelectionProblem.from_gmat"]], "ineqcv_trans (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicbinaryselectionproblem property)": [[313, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicBinarySelectionProblem.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicbinaryselectionproblem property)": [[313, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicBinarySelectionProblem.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicbinaryselectionproblem property)": [[313, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicBinarySelectionProblem.ineqcv_wt"]], "latentfn() (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicbinaryselectionproblem method)": [[313, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicBinarySelectionProblem.latentfn"]], "n_eq_constr (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicbinaryselectionproblem property)": [[313, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicBinarySelectionProblem.n_eq_constr"]], "n_ieq_constr (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicbinaryselectionproblem property)": [[313, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicBinarySelectionProblem.n_ieq_constr"]], "n_obj (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicbinaryselectionproblem property)": [[313, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicBinarySelectionProblem.n_obj"]], "n_var (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicbinaryselectionproblem property)": [[313, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicBinarySelectionProblem.n_var"]], "ndecn (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicbinaryselectionproblem property)": [[313, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicBinarySelectionProblem.ndecn"]], "neqcv (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicbinaryselectionproblem property)": [[313, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicBinarySelectionProblem.neqcv"]], "nineqcv (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicbinaryselectionproblem property)": [[313, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicBinarySelectionProblem.nineqcv"]], "nlatent (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicbinaryselectionproblem property)": [[313, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicBinarySelectionProblem.nlatent"]], "nobj (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicbinaryselectionproblem property)": [[313, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicBinarySelectionProblem.nobj"]], "obj_trans (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicbinaryselectionproblem property)": [[313, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicBinarySelectionProblem.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicbinaryselectionproblem property)": [[313, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicBinarySelectionProblem.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicbinaryselectionproblem property)": [[313, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicBinarySelectionProblem.obj_wt"]], "replace_nan_values_by (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicbinaryselectionproblem property)": [[313, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicBinarySelectionProblem.replace_nan_values_by"]], "strict (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicbinaryselectionproblem property)": [[313, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicBinarySelectionProblem.strict"]], "vars (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicbinaryselectionproblem property)": [[313, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicBinarySelectionProblem.vars"]], "vtype (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicbinaryselectionproblem property)": [[313, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicBinarySelectionProblem.vtype"]], "xl (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicbinaryselectionproblem property)": [[313, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicBinarySelectionProblem.xl"]], "xu (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicbinaryselectionproblem property)": [[313, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicBinarySelectionProblem.xu"]], "c (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicintegerselectionproblem property)": [[314, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicIntegerSelectionProblem.C"]], "l2normgenomicintegerselectionproblem (class in pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem)": [[314, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicIntegerSelectionProblem"]], "callback (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicintegerselectionproblem property)": [[314, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicIntegerSelectionProblem.callback"]], "data (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicintegerselectionproblem property)": [[314, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicIntegerSelectionProblem.data"]], "decn_space (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicintegerselectionproblem property)": [[314, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicIntegerSelectionProblem.decn_space"]], "decn_space_lower (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicintegerselectionproblem property)": [[314, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicIntegerSelectionProblem.decn_space_lower"]], "decn_space_upper (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicintegerselectionproblem property)": [[314, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicIntegerSelectionProblem.decn_space_upper"]], "elementwise (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicintegerselectionproblem property)": [[314, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicIntegerSelectionProblem.elementwise"]], "elementwise_func (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicintegerselectionproblem property)": [[314, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicIntegerSelectionProblem.elementwise_func"]], "elementwise_runner (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicintegerselectionproblem property)": [[314, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicIntegerSelectionProblem.elementwise_runner"]], "eqcv_trans (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicintegerselectionproblem property)": [[314, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicIntegerSelectionProblem.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicintegerselectionproblem property)": [[314, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicIntegerSelectionProblem.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicintegerselectionproblem property)": [[314, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicIntegerSelectionProblem.eqcv_wt"]], "evalfn() (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicintegerselectionproblem method)": [[314, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicIntegerSelectionProblem.evalfn"]], "exclude_from_serialization (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicintegerselectionproblem property)": [[314, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicIntegerSelectionProblem.exclude_from_serialization"]], "from_gmat() (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicintegerselectionproblem class method)": [[314, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicIntegerSelectionProblem.from_gmat"]], "ineqcv_trans (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicintegerselectionproblem property)": [[314, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicIntegerSelectionProblem.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicintegerselectionproblem property)": [[314, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicIntegerSelectionProblem.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicintegerselectionproblem property)": [[314, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicIntegerSelectionProblem.ineqcv_wt"]], "latentfn() (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicintegerselectionproblem method)": [[314, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicIntegerSelectionProblem.latentfn"]], "n_eq_constr (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicintegerselectionproblem property)": [[314, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicIntegerSelectionProblem.n_eq_constr"]], "n_ieq_constr (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicintegerselectionproblem property)": [[314, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicIntegerSelectionProblem.n_ieq_constr"]], "n_obj (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicintegerselectionproblem property)": [[314, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicIntegerSelectionProblem.n_obj"]], "n_var (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicintegerselectionproblem property)": [[314, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicIntegerSelectionProblem.n_var"]], "ndecn (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicintegerselectionproblem property)": [[314, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicIntegerSelectionProblem.ndecn"]], "neqcv (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicintegerselectionproblem property)": [[314, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicIntegerSelectionProblem.neqcv"]], "nineqcv (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicintegerselectionproblem property)": [[314, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicIntegerSelectionProblem.nineqcv"]], "nlatent (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicintegerselectionproblem property)": [[314, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicIntegerSelectionProblem.nlatent"]], "nobj (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicintegerselectionproblem property)": [[314, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicIntegerSelectionProblem.nobj"]], "obj_trans (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicintegerselectionproblem property)": [[314, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicIntegerSelectionProblem.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicintegerselectionproblem property)": [[314, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicIntegerSelectionProblem.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicintegerselectionproblem property)": [[314, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicIntegerSelectionProblem.obj_wt"]], "replace_nan_values_by (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicintegerselectionproblem property)": [[314, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicIntegerSelectionProblem.replace_nan_values_by"]], "strict (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicintegerselectionproblem property)": [[314, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicIntegerSelectionProblem.strict"]], "vars (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicintegerselectionproblem property)": [[314, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicIntegerSelectionProblem.vars"]], "vtype (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicintegerselectionproblem property)": [[314, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicIntegerSelectionProblem.vtype"]], "xl (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicintegerselectionproblem property)": [[314, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicIntegerSelectionProblem.xl"]], "xu (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicintegerselectionproblem property)": [[314, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicIntegerSelectionProblem.xu"]], "c (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicrealselectionproblem property)": [[315, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicRealSelectionProblem.C"]], "l2normgenomicrealselectionproblem (class in pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem)": [[315, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicRealSelectionProblem"]], "callback (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicrealselectionproblem property)": [[315, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicRealSelectionProblem.callback"]], "data (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicrealselectionproblem property)": [[315, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicRealSelectionProblem.data"]], "decn_space (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicrealselectionproblem property)": [[315, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicRealSelectionProblem.decn_space"]], "decn_space_lower (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicrealselectionproblem property)": [[315, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicRealSelectionProblem.decn_space_lower"]], "decn_space_upper (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicrealselectionproblem property)": [[315, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicRealSelectionProblem.decn_space_upper"]], "elementwise (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicrealselectionproblem property)": [[315, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicRealSelectionProblem.elementwise"]], "elementwise_func (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicrealselectionproblem property)": [[315, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicRealSelectionProblem.elementwise_func"]], "elementwise_runner (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicrealselectionproblem property)": [[315, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicRealSelectionProblem.elementwise_runner"]], "eqcv_trans (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicrealselectionproblem property)": [[315, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicRealSelectionProblem.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicrealselectionproblem property)": [[315, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicRealSelectionProblem.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicrealselectionproblem property)": [[315, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicRealSelectionProblem.eqcv_wt"]], "evalfn() (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicrealselectionproblem method)": [[315, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicRealSelectionProblem.evalfn"]], "exclude_from_serialization (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicrealselectionproblem property)": [[315, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicRealSelectionProblem.exclude_from_serialization"]], "from_gmat() (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicrealselectionproblem class method)": [[315, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicRealSelectionProblem.from_gmat"]], "ineqcv_trans (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicrealselectionproblem property)": [[315, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicRealSelectionProblem.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicrealselectionproblem property)": [[315, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicRealSelectionProblem.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicrealselectionproblem property)": [[315, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicRealSelectionProblem.ineqcv_wt"]], "latentfn() (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicrealselectionproblem method)": [[315, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicRealSelectionProblem.latentfn"]], "n_eq_constr (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicrealselectionproblem property)": [[315, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicRealSelectionProblem.n_eq_constr"]], "n_ieq_constr (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicrealselectionproblem property)": [[315, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicRealSelectionProblem.n_ieq_constr"]], "n_obj (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicrealselectionproblem property)": [[315, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicRealSelectionProblem.n_obj"]], "n_var (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicrealselectionproblem property)": [[315, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicRealSelectionProblem.n_var"]], "ndecn (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicrealselectionproblem property)": [[315, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicRealSelectionProblem.ndecn"]], "neqcv (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicrealselectionproblem property)": [[315, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicRealSelectionProblem.neqcv"]], "nineqcv (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicrealselectionproblem property)": [[315, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicRealSelectionProblem.nineqcv"]], "nlatent (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicrealselectionproblem property)": [[315, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicRealSelectionProblem.nlatent"]], "nobj (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicrealselectionproblem property)": [[315, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicRealSelectionProblem.nobj"]], "obj_trans (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicrealselectionproblem property)": [[315, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicRealSelectionProblem.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicrealselectionproblem property)": [[315, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicRealSelectionProblem.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicrealselectionproblem property)": [[315, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicRealSelectionProblem.obj_wt"]], "replace_nan_values_by (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicrealselectionproblem property)": [[315, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicRealSelectionProblem.replace_nan_values_by"]], "strict (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicrealselectionproblem property)": [[315, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicRealSelectionProblem.strict"]], "vars (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicrealselectionproblem property)": [[315, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicRealSelectionProblem.vars"]], "vtype (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicrealselectionproblem property)": [[315, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicRealSelectionProblem.vtype"]], "xl (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicrealselectionproblem property)": [[315, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicRealSelectionProblem.xl"]], "xu (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicrealselectionproblem property)": [[315, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicRealSelectionProblem.xu"]], "c (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicselectionproblemmixin property)": [[316, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicSelectionProblemMixin.C"]], "l2normgenomicselectionproblemmixin (class in pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem)": [[316, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicSelectionProblemMixin"]], "from_gmat() (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicselectionproblemmixin class method)": [[316, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicSelectionProblemMixin.from_gmat"]], "nlatent (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicselectionproblemmixin property)": [[316, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicSelectionProblemMixin.nlatent"]], "c (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicsubsetselectionproblem property)": [[317, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicSubsetSelectionProblem.C"]], "l2normgenomicsubsetselectionproblem (class in pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem)": [[317, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicSubsetSelectionProblem"]], "callback (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicsubsetselectionproblem property)": [[317, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicSubsetSelectionProblem.callback"]], "data (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicsubsetselectionproblem property)": [[317, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicSubsetSelectionProblem.data"]], "decn_space (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicsubsetselectionproblem property)": [[317, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicSubsetSelectionProblem.decn_space"]], "decn_space_lower (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicsubsetselectionproblem property)": [[317, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicSubsetSelectionProblem.decn_space_lower"]], "decn_space_upper (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicsubsetselectionproblem property)": [[317, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicSubsetSelectionProblem.decn_space_upper"]], "elementwise (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicsubsetselectionproblem property)": [[317, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicSubsetSelectionProblem.elementwise"]], "elementwise_func (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicsubsetselectionproblem property)": [[317, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicSubsetSelectionProblem.elementwise_func"]], "elementwise_runner (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicsubsetselectionproblem property)": [[317, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicSubsetSelectionProblem.elementwise_runner"]], "eqcv_trans (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicsubsetselectionproblem property)": [[317, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicSubsetSelectionProblem.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicsubsetselectionproblem property)": [[317, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicSubsetSelectionProblem.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicsubsetselectionproblem property)": [[317, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicSubsetSelectionProblem.eqcv_wt"]], "evalfn() (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicsubsetselectionproblem method)": [[317, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicSubsetSelectionProblem.evalfn"]], "exclude_from_serialization (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicsubsetselectionproblem property)": [[317, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicSubsetSelectionProblem.exclude_from_serialization"]], "from_gmat() (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicsubsetselectionproblem class method)": [[317, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicSubsetSelectionProblem.from_gmat"]], "ineqcv_trans (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicsubsetselectionproblem property)": [[317, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicSubsetSelectionProblem.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicsubsetselectionproblem property)": [[317, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicSubsetSelectionProblem.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicsubsetselectionproblem property)": [[317, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicSubsetSelectionProblem.ineqcv_wt"]], "latentfn() (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicsubsetselectionproblem method)": [[317, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicSubsetSelectionProblem.latentfn"]], "n_eq_constr (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicsubsetselectionproblem property)": [[317, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicSubsetSelectionProblem.n_eq_constr"]], "n_ieq_constr (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicsubsetselectionproblem property)": [[317, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicSubsetSelectionProblem.n_ieq_constr"]], "n_obj (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicsubsetselectionproblem property)": [[317, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicSubsetSelectionProblem.n_obj"]], "n_var (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicsubsetselectionproblem property)": [[317, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicSubsetSelectionProblem.n_var"]], "ndecn (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicsubsetselectionproblem property)": [[317, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicSubsetSelectionProblem.ndecn"]], "neqcv (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicsubsetselectionproblem property)": [[317, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicSubsetSelectionProblem.neqcv"]], "nineqcv (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicsubsetselectionproblem property)": [[317, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicSubsetSelectionProblem.nineqcv"]], "nlatent (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicsubsetselectionproblem property)": [[317, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicSubsetSelectionProblem.nlatent"]], "nobj (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicsubsetselectionproblem property)": [[317, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicSubsetSelectionProblem.nobj"]], "obj_trans (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicsubsetselectionproblem property)": [[317, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicSubsetSelectionProblem.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicsubsetselectionproblem property)": [[317, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicSubsetSelectionProblem.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicsubsetselectionproblem property)": [[317, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicSubsetSelectionProblem.obj_wt"]], "replace_nan_values_by (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicsubsetselectionproblem property)": [[317, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicSubsetSelectionProblem.replace_nan_values_by"]], "strict (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicsubsetselectionproblem property)": [[317, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicSubsetSelectionProblem.strict"]], "vars (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicsubsetselectionproblem property)": [[317, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicSubsetSelectionProblem.vars"]], "vtype (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicsubsetselectionproblem property)": [[317, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicSubsetSelectionProblem.vtype"]], "xl (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicsubsetselectionproblem property)": [[317, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicSubsetSelectionProblem.xl"]], "xu (pybrops.breed.prot.sel.prob.l2normgenomicselectionproblem.l2normgenomicsubsetselectionproblem property)": [[317, "pybrops.breed.prot.sel.prob.L2NormGenomicSelectionProblem.L2NormGenomicSubsetSelectionProblem.xu"]], "pybrops.breed.prot.sel.prob.mateselectionproblem": [[318, "module-pybrops.breed.prot.sel.prob.MateSelectionProblem"]], "mateselectionproblem (class in pybrops.breed.prot.sel.prob.mateselectionproblem)": [[319, "pybrops.breed.prot.sel.prob.MateSelectionProblem.MateSelectionProblem"]], "callback (pybrops.breed.prot.sel.prob.mateselectionproblem.mateselectionproblem property)": [[319, "pybrops.breed.prot.sel.prob.MateSelectionProblem.MateSelectionProblem.callback"]], "data (pybrops.breed.prot.sel.prob.mateselectionproblem.mateselectionproblem property)": [[319, "pybrops.breed.prot.sel.prob.MateSelectionProblem.MateSelectionProblem.data"]], "decn_space (pybrops.breed.prot.sel.prob.mateselectionproblem.mateselectionproblem property)": [[319, "pybrops.breed.prot.sel.prob.MateSelectionProblem.MateSelectionProblem.decn_space"]], "decn_space_lower (pybrops.breed.prot.sel.prob.mateselectionproblem.mateselectionproblem property)": [[319, "pybrops.breed.prot.sel.prob.MateSelectionProblem.MateSelectionProblem.decn_space_lower"]], "decn_space_upper (pybrops.breed.prot.sel.prob.mateselectionproblem.mateselectionproblem property)": [[319, "pybrops.breed.prot.sel.prob.MateSelectionProblem.MateSelectionProblem.decn_space_upper"]], "decn_space_xmap (pybrops.breed.prot.sel.prob.mateselectionproblem.mateselectionproblem property)": [[319, "pybrops.breed.prot.sel.prob.MateSelectionProblem.MateSelectionProblem.decn_space_xmap"]], "elementwise (pybrops.breed.prot.sel.prob.mateselectionproblem.mateselectionproblem property)": [[319, "pybrops.breed.prot.sel.prob.MateSelectionProblem.MateSelectionProblem.elementwise"]], "elementwise_func (pybrops.breed.prot.sel.prob.mateselectionproblem.mateselectionproblem property)": [[319, "pybrops.breed.prot.sel.prob.MateSelectionProblem.MateSelectionProblem.elementwise_func"]], "elementwise_runner (pybrops.breed.prot.sel.prob.mateselectionproblem.mateselectionproblem property)": [[319, "pybrops.breed.prot.sel.prob.MateSelectionProblem.MateSelectionProblem.elementwise_runner"]], "eqcv_trans (pybrops.breed.prot.sel.prob.mateselectionproblem.mateselectionproblem property)": [[319, "pybrops.breed.prot.sel.prob.MateSelectionProblem.MateSelectionProblem.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.prob.mateselectionproblem.mateselectionproblem property)": [[319, "pybrops.breed.prot.sel.prob.MateSelectionProblem.MateSelectionProblem.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.prob.mateselectionproblem.mateselectionproblem property)": [[319, "pybrops.breed.prot.sel.prob.MateSelectionProblem.MateSelectionProblem.eqcv_wt"]], "evalfn() (pybrops.breed.prot.sel.prob.mateselectionproblem.mateselectionproblem method)": [[319, "pybrops.breed.prot.sel.prob.MateSelectionProblem.MateSelectionProblem.evalfn"]], "exclude_from_serialization (pybrops.breed.prot.sel.prob.mateselectionproblem.mateselectionproblem property)": [[319, "pybrops.breed.prot.sel.prob.MateSelectionProblem.MateSelectionProblem.exclude_from_serialization"]], "ineqcv_trans (pybrops.breed.prot.sel.prob.mateselectionproblem.mateselectionproblem property)": [[319, "pybrops.breed.prot.sel.prob.MateSelectionProblem.MateSelectionProblem.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.prob.mateselectionproblem.mateselectionproblem property)": [[319, "pybrops.breed.prot.sel.prob.MateSelectionProblem.MateSelectionProblem.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.prob.mateselectionproblem.mateselectionproblem property)": [[319, "pybrops.breed.prot.sel.prob.MateSelectionProblem.MateSelectionProblem.ineqcv_wt"]], "latentfn() (pybrops.breed.prot.sel.prob.mateselectionproblem.mateselectionproblem method)": [[319, "pybrops.breed.prot.sel.prob.MateSelectionProblem.MateSelectionProblem.latentfn"]], "n_eq_constr (pybrops.breed.prot.sel.prob.mateselectionproblem.mateselectionproblem property)": [[319, "pybrops.breed.prot.sel.prob.MateSelectionProblem.MateSelectionProblem.n_eq_constr"]], "n_ieq_constr (pybrops.breed.prot.sel.prob.mateselectionproblem.mateselectionproblem property)": [[319, "pybrops.breed.prot.sel.prob.MateSelectionProblem.MateSelectionProblem.n_ieq_constr"]], "n_obj (pybrops.breed.prot.sel.prob.mateselectionproblem.mateselectionproblem property)": [[319, "pybrops.breed.prot.sel.prob.MateSelectionProblem.MateSelectionProblem.n_obj"]], "n_var (pybrops.breed.prot.sel.prob.mateselectionproblem.mateselectionproblem property)": [[319, "pybrops.breed.prot.sel.prob.MateSelectionProblem.MateSelectionProblem.n_var"]], "ndecn (pybrops.breed.prot.sel.prob.mateselectionproblem.mateselectionproblem property)": [[319, "pybrops.breed.prot.sel.prob.MateSelectionProblem.MateSelectionProblem.ndecn"]], "neqcv (pybrops.breed.prot.sel.prob.mateselectionproblem.mateselectionproblem property)": [[319, "pybrops.breed.prot.sel.prob.MateSelectionProblem.MateSelectionProblem.neqcv"]], "nineqcv (pybrops.breed.prot.sel.prob.mateselectionproblem.mateselectionproblem property)": [[319, "pybrops.breed.prot.sel.prob.MateSelectionProblem.MateSelectionProblem.nineqcv"]], "nlatent (pybrops.breed.prot.sel.prob.mateselectionproblem.mateselectionproblem property)": [[319, "pybrops.breed.prot.sel.prob.MateSelectionProblem.MateSelectionProblem.nlatent"]], "nobj (pybrops.breed.prot.sel.prob.mateselectionproblem.mateselectionproblem property)": [[319, "pybrops.breed.prot.sel.prob.MateSelectionProblem.MateSelectionProblem.nobj"]], "obj_trans (pybrops.breed.prot.sel.prob.mateselectionproblem.mateselectionproblem property)": [[319, "pybrops.breed.prot.sel.prob.MateSelectionProblem.MateSelectionProblem.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.prob.mateselectionproblem.mateselectionproblem property)": [[319, "pybrops.breed.prot.sel.prob.MateSelectionProblem.MateSelectionProblem.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.prob.mateselectionproblem.mateselectionproblem property)": [[319, "pybrops.breed.prot.sel.prob.MateSelectionProblem.MateSelectionProblem.obj_wt"]], "replace_nan_values_by (pybrops.breed.prot.sel.prob.mateselectionproblem.mateselectionproblem property)": [[319, "pybrops.breed.prot.sel.prob.MateSelectionProblem.MateSelectionProblem.replace_nan_values_by"]], "strict (pybrops.breed.prot.sel.prob.mateselectionproblem.mateselectionproblem property)": [[319, "pybrops.breed.prot.sel.prob.MateSelectionProblem.MateSelectionProblem.strict"]], "vars (pybrops.breed.prot.sel.prob.mateselectionproblem.mateselectionproblem property)": [[319, "pybrops.breed.prot.sel.prob.MateSelectionProblem.MateSelectionProblem.vars"]], "vtype (pybrops.breed.prot.sel.prob.mateselectionproblem.mateselectionproblem property)": [[319, "pybrops.breed.prot.sel.prob.MateSelectionProblem.MateSelectionProblem.vtype"]], "xl (pybrops.breed.prot.sel.prob.mateselectionproblem.mateselectionproblem property)": [[319, "pybrops.breed.prot.sel.prob.MateSelectionProblem.MateSelectionProblem.xl"]], "xu (pybrops.breed.prot.sel.prob.mateselectionproblem.mateselectionproblem property)": [[319, "pybrops.breed.prot.sel.prob.MateSelectionProblem.MateSelectionProblem.xu"]], "pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem": [[320, "module-pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem"]], "c (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygositybinaryselectionproblem property)": [[321, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygosityBinarySelectionProblem.C"]], "meanexpectedheterozygositybinaryselectionproblem (class in pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem)": [[321, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygosityBinarySelectionProblem"]], "callback (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygositybinaryselectionproblem property)": [[321, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygosityBinarySelectionProblem.callback"]], "data (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygositybinaryselectionproblem property)": [[321, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygosityBinarySelectionProblem.data"]], "decn_space (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygositybinaryselectionproblem property)": [[321, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygosityBinarySelectionProblem.decn_space"]], "decn_space_lower (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygositybinaryselectionproblem property)": [[321, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygosityBinarySelectionProblem.decn_space_lower"]], "decn_space_upper (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygositybinaryselectionproblem property)": [[321, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygosityBinarySelectionProblem.decn_space_upper"]], "elementwise (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygositybinaryselectionproblem property)": [[321, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygosityBinarySelectionProblem.elementwise"]], "elementwise_func (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygositybinaryselectionproblem property)": [[321, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygosityBinarySelectionProblem.elementwise_func"]], "elementwise_runner (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygositybinaryselectionproblem property)": [[321, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygosityBinarySelectionProblem.elementwise_runner"]], "eqcv_trans (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygositybinaryselectionproblem property)": [[321, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygosityBinarySelectionProblem.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygositybinaryselectionproblem property)": [[321, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygosityBinarySelectionProblem.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygositybinaryselectionproblem property)": [[321, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygosityBinarySelectionProblem.eqcv_wt"]], "evalfn() (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygositybinaryselectionproblem method)": [[321, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygosityBinarySelectionProblem.evalfn"]], "exclude_from_serialization (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygositybinaryselectionproblem property)": [[321, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygosityBinarySelectionProblem.exclude_from_serialization"]], "ineqcv_trans (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygositybinaryselectionproblem property)": [[321, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygosityBinarySelectionProblem.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygositybinaryselectionproblem property)": [[321, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygosityBinarySelectionProblem.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygositybinaryselectionproblem property)": [[321, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygosityBinarySelectionProblem.ineqcv_wt"]], "latentfn() (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygositybinaryselectionproblem method)": [[321, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygosityBinarySelectionProblem.latentfn"]], "n_eq_constr (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygositybinaryselectionproblem property)": [[321, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygosityBinarySelectionProblem.n_eq_constr"]], "n_ieq_constr (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygositybinaryselectionproblem property)": [[321, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygosityBinarySelectionProblem.n_ieq_constr"]], "n_obj (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygositybinaryselectionproblem property)": [[321, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygosityBinarySelectionProblem.n_obj"]], "n_var (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygositybinaryselectionproblem property)": [[321, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygosityBinarySelectionProblem.n_var"]], "ndecn (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygositybinaryselectionproblem property)": [[321, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygosityBinarySelectionProblem.ndecn"]], "neqcv (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygositybinaryselectionproblem property)": [[321, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygosityBinarySelectionProblem.neqcv"]], "nineqcv (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygositybinaryselectionproblem property)": [[321, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygosityBinarySelectionProblem.nineqcv"]], "nlatent (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygositybinaryselectionproblem property)": [[321, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygosityBinarySelectionProblem.nlatent"]], "nobj (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygositybinaryselectionproblem property)": [[321, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygosityBinarySelectionProblem.nobj"]], "obj_trans (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygositybinaryselectionproblem property)": [[321, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygosityBinarySelectionProblem.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygositybinaryselectionproblem property)": [[321, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygosityBinarySelectionProblem.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygositybinaryselectionproblem property)": [[321, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygosityBinarySelectionProblem.obj_wt"]], "replace_nan_values_by (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygositybinaryselectionproblem property)": [[321, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygosityBinarySelectionProblem.replace_nan_values_by"]], "strict (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygositybinaryselectionproblem property)": [[321, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygosityBinarySelectionProblem.strict"]], "vars (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygositybinaryselectionproblem property)": [[321, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygosityBinarySelectionProblem.vars"]], "vtype (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygositybinaryselectionproblem property)": [[321, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygosityBinarySelectionProblem.vtype"]], "xl (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygositybinaryselectionproblem property)": [[321, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygosityBinarySelectionProblem.xl"]], "xu (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygositybinaryselectionproblem property)": [[321, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygosityBinarySelectionProblem.xu"]], "c (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygosityintegerselectionproblem property)": [[322, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygosityIntegerSelectionProblem.C"]], "meanexpectedheterozygosityintegerselectionproblem (class in pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem)": [[322, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygosityIntegerSelectionProblem"]], "callback (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygosityintegerselectionproblem property)": [[322, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygosityIntegerSelectionProblem.callback"]], "data (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygosityintegerselectionproblem property)": [[322, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygosityIntegerSelectionProblem.data"]], "decn_space (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygosityintegerselectionproblem property)": [[322, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygosityIntegerSelectionProblem.decn_space"]], "decn_space_lower (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygosityintegerselectionproblem property)": [[322, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygosityIntegerSelectionProblem.decn_space_lower"]], "decn_space_upper (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygosityintegerselectionproblem property)": [[322, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygosityIntegerSelectionProblem.decn_space_upper"]], "elementwise (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygosityintegerselectionproblem property)": [[322, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygosityIntegerSelectionProblem.elementwise"]], "elementwise_func (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygosityintegerselectionproblem property)": [[322, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygosityIntegerSelectionProblem.elementwise_func"]], "elementwise_runner (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygosityintegerselectionproblem property)": [[322, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygosityIntegerSelectionProblem.elementwise_runner"]], "eqcv_trans (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygosityintegerselectionproblem property)": [[322, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygosityIntegerSelectionProblem.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygosityintegerselectionproblem property)": [[322, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygosityIntegerSelectionProblem.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygosityintegerselectionproblem property)": [[322, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygosityIntegerSelectionProblem.eqcv_wt"]], "evalfn() (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygosityintegerselectionproblem method)": [[322, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygosityIntegerSelectionProblem.evalfn"]], "exclude_from_serialization (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygosityintegerselectionproblem property)": [[322, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygosityIntegerSelectionProblem.exclude_from_serialization"]], "ineqcv_trans (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygosityintegerselectionproblem property)": [[322, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygosityIntegerSelectionProblem.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygosityintegerselectionproblem property)": [[322, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygosityIntegerSelectionProblem.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygosityintegerselectionproblem property)": [[322, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygosityIntegerSelectionProblem.ineqcv_wt"]], "latentfn() (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygosityintegerselectionproblem method)": [[322, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygosityIntegerSelectionProblem.latentfn"]], "n_eq_constr (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygosityintegerselectionproblem property)": [[322, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygosityIntegerSelectionProblem.n_eq_constr"]], "n_ieq_constr (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygosityintegerselectionproblem property)": [[322, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygosityIntegerSelectionProblem.n_ieq_constr"]], "n_obj (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygosityintegerselectionproblem property)": [[322, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygosityIntegerSelectionProblem.n_obj"]], "n_var (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygosityintegerselectionproblem property)": [[322, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygosityIntegerSelectionProblem.n_var"]], "ndecn (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygosityintegerselectionproblem property)": [[322, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygosityIntegerSelectionProblem.ndecn"]], "neqcv (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygosityintegerselectionproblem property)": [[322, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygosityIntegerSelectionProblem.neqcv"]], "nineqcv (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygosityintegerselectionproblem property)": [[322, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygosityIntegerSelectionProblem.nineqcv"]], "nlatent (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygosityintegerselectionproblem property)": [[322, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygosityIntegerSelectionProblem.nlatent"]], "nobj (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygosityintegerselectionproblem property)": [[322, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygosityIntegerSelectionProblem.nobj"]], "obj_trans (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygosityintegerselectionproblem property)": [[322, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygosityIntegerSelectionProblem.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygosityintegerselectionproblem property)": [[322, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygosityIntegerSelectionProblem.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygosityintegerselectionproblem property)": [[322, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygosityIntegerSelectionProblem.obj_wt"]], "replace_nan_values_by (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygosityintegerselectionproblem property)": [[322, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygosityIntegerSelectionProblem.replace_nan_values_by"]], "strict (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygosityintegerselectionproblem property)": [[322, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygosityIntegerSelectionProblem.strict"]], "vars (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygosityintegerselectionproblem property)": [[322, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygosityIntegerSelectionProblem.vars"]], "vtype (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygosityintegerselectionproblem property)": [[322, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygosityIntegerSelectionProblem.vtype"]], "xl (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygosityintegerselectionproblem property)": [[322, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygosityIntegerSelectionProblem.xl"]], "xu (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygosityintegerselectionproblem property)": [[322, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygosityIntegerSelectionProblem.xu"]], "c (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygosityrealselectionproblem property)": [[323, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygosityRealSelectionProblem.C"]], "meanexpectedheterozygosityrealselectionproblem (class in pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem)": [[323, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygosityRealSelectionProblem"]], "callback (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygosityrealselectionproblem property)": [[323, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygosityRealSelectionProblem.callback"]], "data (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygosityrealselectionproblem property)": [[323, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygosityRealSelectionProblem.data"]], "decn_space (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygosityrealselectionproblem property)": [[323, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygosityRealSelectionProblem.decn_space"]], "decn_space_lower (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygosityrealselectionproblem property)": [[323, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygosityRealSelectionProblem.decn_space_lower"]], "decn_space_upper (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygosityrealselectionproblem property)": [[323, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygosityRealSelectionProblem.decn_space_upper"]], "elementwise (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygosityrealselectionproblem property)": [[323, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygosityRealSelectionProblem.elementwise"]], "elementwise_func (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygosityrealselectionproblem property)": [[323, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygosityRealSelectionProblem.elementwise_func"]], "elementwise_runner (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygosityrealselectionproblem property)": [[323, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygosityRealSelectionProblem.elementwise_runner"]], "eqcv_trans (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygosityrealselectionproblem property)": [[323, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygosityRealSelectionProblem.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygosityrealselectionproblem property)": [[323, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygosityRealSelectionProblem.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygosityrealselectionproblem property)": [[323, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygosityRealSelectionProblem.eqcv_wt"]], "evalfn() (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygosityrealselectionproblem method)": [[323, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygosityRealSelectionProblem.evalfn"]], "exclude_from_serialization (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygosityrealselectionproblem property)": [[323, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygosityRealSelectionProblem.exclude_from_serialization"]], "ineqcv_trans (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygosityrealselectionproblem property)": [[323, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygosityRealSelectionProblem.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygosityrealselectionproblem property)": [[323, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygosityRealSelectionProblem.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygosityrealselectionproblem property)": [[323, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygosityRealSelectionProblem.ineqcv_wt"]], "latentfn() (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygosityrealselectionproblem method)": [[323, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygosityRealSelectionProblem.latentfn"]], "n_eq_constr (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygosityrealselectionproblem property)": [[323, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygosityRealSelectionProblem.n_eq_constr"]], "n_ieq_constr (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygosityrealselectionproblem property)": [[323, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygosityRealSelectionProblem.n_ieq_constr"]], "n_obj (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygosityrealselectionproblem property)": [[323, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygosityRealSelectionProblem.n_obj"]], "n_var (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygosityrealselectionproblem property)": [[323, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygosityRealSelectionProblem.n_var"]], "ndecn (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygosityrealselectionproblem property)": [[323, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygosityRealSelectionProblem.ndecn"]], "neqcv (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygosityrealselectionproblem property)": [[323, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygosityRealSelectionProblem.neqcv"]], "nineqcv (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygosityrealselectionproblem property)": [[323, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygosityRealSelectionProblem.nineqcv"]], "nlatent (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygosityrealselectionproblem property)": [[323, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygosityRealSelectionProblem.nlatent"]], "nobj (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygosityrealselectionproblem property)": [[323, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygosityRealSelectionProblem.nobj"]], "obj_trans (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygosityrealselectionproblem property)": [[323, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygosityRealSelectionProblem.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygosityrealselectionproblem property)": [[323, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygosityRealSelectionProblem.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygosityrealselectionproblem property)": [[323, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygosityRealSelectionProblem.obj_wt"]], "replace_nan_values_by (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygosityrealselectionproblem property)": [[323, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygosityRealSelectionProblem.replace_nan_values_by"]], "strict (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygosityrealselectionproblem property)": [[323, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygosityRealSelectionProblem.strict"]], "vars (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygosityrealselectionproblem property)": [[323, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygosityRealSelectionProblem.vars"]], "vtype (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygosityrealselectionproblem property)": [[323, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygosityRealSelectionProblem.vtype"]], "xl (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygosityrealselectionproblem property)": [[323, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygosityRealSelectionProblem.xl"]], "xu (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygosityrealselectionproblem property)": [[323, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygosityRealSelectionProblem.xu"]], "c (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygosityselectionproblemmixin property)": [[324, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygositySelectionProblemMixin.C"]], "meanexpectedheterozygosityselectionproblemmixin (class in pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem)": [[324, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygositySelectionProblemMixin"]], "nlatent (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygosityselectionproblemmixin property)": [[324, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygositySelectionProblemMixin.nlatent"]], "c (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygositysubsetselectionproblem property)": [[325, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygositySubsetSelectionProblem.C"]], "meanexpectedheterozygositysubsetselectionproblem (class in pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem)": [[325, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygositySubsetSelectionProblem"]], "callback (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygositysubsetselectionproblem property)": [[325, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygositySubsetSelectionProblem.callback"]], "data (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygositysubsetselectionproblem property)": [[325, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygositySubsetSelectionProblem.data"]], "decn_space (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygositysubsetselectionproblem property)": [[325, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygositySubsetSelectionProblem.decn_space"]], "decn_space_lower (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygositysubsetselectionproblem property)": [[325, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygositySubsetSelectionProblem.decn_space_lower"]], "decn_space_upper (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygositysubsetselectionproblem property)": [[325, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygositySubsetSelectionProblem.decn_space_upper"]], "elementwise (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygositysubsetselectionproblem property)": [[325, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygositySubsetSelectionProblem.elementwise"]], "elementwise_func (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygositysubsetselectionproblem property)": [[325, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygositySubsetSelectionProblem.elementwise_func"]], "elementwise_runner (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygositysubsetselectionproblem property)": [[325, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygositySubsetSelectionProblem.elementwise_runner"]], "eqcv_trans (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygositysubsetselectionproblem property)": [[325, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygositySubsetSelectionProblem.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygositysubsetselectionproblem property)": [[325, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygositySubsetSelectionProblem.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygositysubsetselectionproblem property)": [[325, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygositySubsetSelectionProblem.eqcv_wt"]], "evalfn() (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygositysubsetselectionproblem method)": [[325, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygositySubsetSelectionProblem.evalfn"]], "exclude_from_serialization (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygositysubsetselectionproblem property)": [[325, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygositySubsetSelectionProblem.exclude_from_serialization"]], "ineqcv_trans (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygositysubsetselectionproblem property)": [[325, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygositySubsetSelectionProblem.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygositysubsetselectionproblem property)": [[325, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygositySubsetSelectionProblem.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygositysubsetselectionproblem property)": [[325, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygositySubsetSelectionProblem.ineqcv_wt"]], "latentfn() (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygositysubsetselectionproblem method)": [[325, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygositySubsetSelectionProblem.latentfn"]], "n_eq_constr (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygositysubsetselectionproblem property)": [[325, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygositySubsetSelectionProblem.n_eq_constr"]], "n_ieq_constr (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygositysubsetselectionproblem property)": [[325, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygositySubsetSelectionProblem.n_ieq_constr"]], "n_obj (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygositysubsetselectionproblem property)": [[325, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygositySubsetSelectionProblem.n_obj"]], "n_var (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygositysubsetselectionproblem property)": [[325, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygositySubsetSelectionProblem.n_var"]], "ndecn (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygositysubsetselectionproblem property)": [[325, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygositySubsetSelectionProblem.ndecn"]], "neqcv (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygositysubsetselectionproblem property)": [[325, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygositySubsetSelectionProblem.neqcv"]], "nineqcv (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygositysubsetselectionproblem property)": [[325, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygositySubsetSelectionProblem.nineqcv"]], "nlatent (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygositysubsetselectionproblem property)": [[325, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygositySubsetSelectionProblem.nlatent"]], "nobj (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygositysubsetselectionproblem property)": [[325, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygositySubsetSelectionProblem.nobj"]], "obj_trans (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygositysubsetselectionproblem property)": [[325, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygositySubsetSelectionProblem.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygositysubsetselectionproblem property)": [[325, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygositySubsetSelectionProblem.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygositysubsetselectionproblem property)": [[325, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygositySubsetSelectionProblem.obj_wt"]], "replace_nan_values_by (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygositysubsetselectionproblem property)": [[325, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygositySubsetSelectionProblem.replace_nan_values_by"]], "strict (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygositysubsetselectionproblem property)": [[325, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygositySubsetSelectionProblem.strict"]], "vars (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygositysubsetselectionproblem property)": [[325, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygositySubsetSelectionProblem.vars"]], "vtype (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygositysubsetselectionproblem property)": [[325, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygositySubsetSelectionProblem.vtype"]], "xl (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygositysubsetselectionproblem property)": [[325, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygositySubsetSelectionProblem.xl"]], "xu (pybrops.breed.prot.sel.prob.meanexpectedheterozygosityselectionproblem.meanexpectedheterozygositysubsetselectionproblem property)": [[325, "pybrops.breed.prot.sel.prob.MeanExpectedHeterozygositySelectionProblem.MeanExpectedHeterozygositySubsetSelectionProblem.xu"]], "pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem": [[326, "module-pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem"]], "c (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshipbinaryselectionproblem property)": [[327, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipBinarySelectionProblem.C"]], "meangenomicrelationshipbinaryselectionproblem (class in pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem)": [[327, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipBinarySelectionProblem"]], "callback (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshipbinaryselectionproblem property)": [[327, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipBinarySelectionProblem.callback"]], "data (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshipbinaryselectionproblem property)": [[327, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipBinarySelectionProblem.data"]], "decn_space (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshipbinaryselectionproblem property)": [[327, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipBinarySelectionProblem.decn_space"]], "decn_space_lower (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshipbinaryselectionproblem property)": [[327, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipBinarySelectionProblem.decn_space_lower"]], "decn_space_upper (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshipbinaryselectionproblem property)": [[327, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipBinarySelectionProblem.decn_space_upper"]], "elementwise (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshipbinaryselectionproblem property)": [[327, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipBinarySelectionProblem.elementwise"]], "elementwise_func (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshipbinaryselectionproblem property)": [[327, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipBinarySelectionProblem.elementwise_func"]], "elementwise_runner (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshipbinaryselectionproblem property)": [[327, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipBinarySelectionProblem.elementwise_runner"]], "eqcv_trans (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshipbinaryselectionproblem property)": [[327, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipBinarySelectionProblem.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshipbinaryselectionproblem property)": [[327, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipBinarySelectionProblem.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshipbinaryselectionproblem property)": [[327, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipBinarySelectionProblem.eqcv_wt"]], "evalfn() (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshipbinaryselectionproblem method)": [[327, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipBinarySelectionProblem.evalfn"]], "exclude_from_serialization (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshipbinaryselectionproblem property)": [[327, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipBinarySelectionProblem.exclude_from_serialization"]], "ineqcv_trans (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshipbinaryselectionproblem property)": [[327, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipBinarySelectionProblem.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshipbinaryselectionproblem property)": [[327, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipBinarySelectionProblem.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshipbinaryselectionproblem property)": [[327, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipBinarySelectionProblem.ineqcv_wt"]], "latentfn() (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshipbinaryselectionproblem method)": [[327, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipBinarySelectionProblem.latentfn"]], "n_eq_constr (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshipbinaryselectionproblem property)": [[327, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipBinarySelectionProblem.n_eq_constr"]], "n_ieq_constr (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshipbinaryselectionproblem property)": [[327, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipBinarySelectionProblem.n_ieq_constr"]], "n_obj (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshipbinaryselectionproblem property)": [[327, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipBinarySelectionProblem.n_obj"]], "n_var (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshipbinaryselectionproblem property)": [[327, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipBinarySelectionProblem.n_var"]], "ndecn (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshipbinaryselectionproblem property)": [[327, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipBinarySelectionProblem.ndecn"]], "neqcv (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshipbinaryselectionproblem property)": [[327, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipBinarySelectionProblem.neqcv"]], "nineqcv (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshipbinaryselectionproblem property)": [[327, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipBinarySelectionProblem.nineqcv"]], "nlatent (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshipbinaryselectionproblem property)": [[327, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipBinarySelectionProblem.nlatent"]], "nobj (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshipbinaryselectionproblem property)": [[327, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipBinarySelectionProblem.nobj"]], "obj_trans (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshipbinaryselectionproblem property)": [[327, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipBinarySelectionProblem.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshipbinaryselectionproblem property)": [[327, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipBinarySelectionProblem.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshipbinaryselectionproblem property)": [[327, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipBinarySelectionProblem.obj_wt"]], "replace_nan_values_by (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshipbinaryselectionproblem property)": [[327, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipBinarySelectionProblem.replace_nan_values_by"]], "strict (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshipbinaryselectionproblem property)": [[327, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipBinarySelectionProblem.strict"]], "vars (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshipbinaryselectionproblem property)": [[327, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipBinarySelectionProblem.vars"]], "vtype (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshipbinaryselectionproblem property)": [[327, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipBinarySelectionProblem.vtype"]], "xl (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshipbinaryselectionproblem property)": [[327, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipBinarySelectionProblem.xl"]], "xu (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshipbinaryselectionproblem property)": [[327, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipBinarySelectionProblem.xu"]], "c (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshipintegerselectionproblem property)": [[328, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipIntegerSelectionProblem.C"]], "meangenomicrelationshipintegerselectionproblem (class in pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem)": [[328, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipIntegerSelectionProblem"]], "callback (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshipintegerselectionproblem property)": [[328, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipIntegerSelectionProblem.callback"]], "data (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshipintegerselectionproblem property)": [[328, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipIntegerSelectionProblem.data"]], "decn_space (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshipintegerselectionproblem property)": [[328, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipIntegerSelectionProblem.decn_space"]], "decn_space_lower (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshipintegerselectionproblem property)": [[328, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipIntegerSelectionProblem.decn_space_lower"]], "decn_space_upper (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshipintegerselectionproblem property)": [[328, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipIntegerSelectionProblem.decn_space_upper"]], "elementwise (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshipintegerselectionproblem property)": [[328, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipIntegerSelectionProblem.elementwise"]], "elementwise_func (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshipintegerselectionproblem property)": [[328, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipIntegerSelectionProblem.elementwise_func"]], "elementwise_runner (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshipintegerselectionproblem property)": [[328, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipIntegerSelectionProblem.elementwise_runner"]], "eqcv_trans (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshipintegerselectionproblem property)": [[328, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipIntegerSelectionProblem.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshipintegerselectionproblem property)": [[328, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipIntegerSelectionProblem.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshipintegerselectionproblem property)": [[328, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipIntegerSelectionProblem.eqcv_wt"]], "evalfn() (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshipintegerselectionproblem method)": [[328, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipIntegerSelectionProblem.evalfn"]], "exclude_from_serialization (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshipintegerselectionproblem property)": [[328, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipIntegerSelectionProblem.exclude_from_serialization"]], "ineqcv_trans (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshipintegerselectionproblem property)": [[328, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipIntegerSelectionProblem.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshipintegerselectionproblem property)": [[328, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipIntegerSelectionProblem.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshipintegerselectionproblem property)": [[328, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipIntegerSelectionProblem.ineqcv_wt"]], "latentfn() (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshipintegerselectionproblem method)": [[328, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipIntegerSelectionProblem.latentfn"]], "n_eq_constr (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshipintegerselectionproblem property)": [[328, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipIntegerSelectionProblem.n_eq_constr"]], "n_ieq_constr (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshipintegerselectionproblem property)": [[328, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipIntegerSelectionProblem.n_ieq_constr"]], "n_obj (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshipintegerselectionproblem property)": [[328, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipIntegerSelectionProblem.n_obj"]], "n_var (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshipintegerselectionproblem property)": [[328, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipIntegerSelectionProblem.n_var"]], "ndecn (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshipintegerselectionproblem property)": [[328, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipIntegerSelectionProblem.ndecn"]], "neqcv (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshipintegerselectionproblem property)": [[328, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipIntegerSelectionProblem.neqcv"]], "nineqcv (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshipintegerselectionproblem property)": [[328, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipIntegerSelectionProblem.nineqcv"]], "nlatent (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshipintegerselectionproblem property)": [[328, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipIntegerSelectionProblem.nlatent"]], "nobj (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshipintegerselectionproblem property)": [[328, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipIntegerSelectionProblem.nobj"]], "obj_trans (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshipintegerselectionproblem property)": [[328, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipIntegerSelectionProblem.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshipintegerselectionproblem property)": [[328, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipIntegerSelectionProblem.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshipintegerselectionproblem property)": [[328, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipIntegerSelectionProblem.obj_wt"]], "replace_nan_values_by (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshipintegerselectionproblem property)": [[328, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipIntegerSelectionProblem.replace_nan_values_by"]], "strict (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshipintegerselectionproblem property)": [[328, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipIntegerSelectionProblem.strict"]], "vars (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshipintegerselectionproblem property)": [[328, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipIntegerSelectionProblem.vars"]], "vtype (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshipintegerselectionproblem property)": [[328, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipIntegerSelectionProblem.vtype"]], "xl (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshipintegerselectionproblem property)": [[328, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipIntegerSelectionProblem.xl"]], "xu (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshipintegerselectionproblem property)": [[328, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipIntegerSelectionProblem.xu"]], "c (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshiprealselectionproblem property)": [[329, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipRealSelectionProblem.C"]], "meangenomicrelationshiprealselectionproblem (class in pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem)": [[329, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipRealSelectionProblem"]], "callback (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshiprealselectionproblem property)": [[329, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipRealSelectionProblem.callback"]], "data (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshiprealselectionproblem property)": [[329, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipRealSelectionProblem.data"]], "decn_space (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshiprealselectionproblem property)": [[329, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipRealSelectionProblem.decn_space"]], "decn_space_lower (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshiprealselectionproblem property)": [[329, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipRealSelectionProblem.decn_space_lower"]], "decn_space_upper (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshiprealselectionproblem property)": [[329, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipRealSelectionProblem.decn_space_upper"]], "elementwise (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshiprealselectionproblem property)": [[329, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipRealSelectionProblem.elementwise"]], "elementwise_func (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshiprealselectionproblem property)": [[329, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipRealSelectionProblem.elementwise_func"]], "elementwise_runner (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshiprealselectionproblem property)": [[329, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipRealSelectionProblem.elementwise_runner"]], "eqcv_trans (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshiprealselectionproblem property)": [[329, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipRealSelectionProblem.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshiprealselectionproblem property)": [[329, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipRealSelectionProblem.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshiprealselectionproblem property)": [[329, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipRealSelectionProblem.eqcv_wt"]], "evalfn() (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshiprealselectionproblem method)": [[329, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipRealSelectionProblem.evalfn"]], "exclude_from_serialization (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshiprealselectionproblem property)": [[329, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipRealSelectionProblem.exclude_from_serialization"]], "ineqcv_trans (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshiprealselectionproblem property)": [[329, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipRealSelectionProblem.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshiprealselectionproblem property)": [[329, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipRealSelectionProblem.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshiprealselectionproblem property)": [[329, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipRealSelectionProblem.ineqcv_wt"]], "latentfn() (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshiprealselectionproblem method)": [[329, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipRealSelectionProblem.latentfn"]], "n_eq_constr (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshiprealselectionproblem property)": [[329, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipRealSelectionProblem.n_eq_constr"]], "n_ieq_constr (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshiprealselectionproblem property)": [[329, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipRealSelectionProblem.n_ieq_constr"]], "n_obj (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshiprealselectionproblem property)": [[329, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipRealSelectionProblem.n_obj"]], "n_var (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshiprealselectionproblem property)": [[329, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipRealSelectionProblem.n_var"]], "ndecn (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshiprealselectionproblem property)": [[329, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipRealSelectionProblem.ndecn"]], "neqcv (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshiprealselectionproblem property)": [[329, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipRealSelectionProblem.neqcv"]], "nineqcv (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshiprealselectionproblem property)": [[329, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipRealSelectionProblem.nineqcv"]], "nlatent (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshiprealselectionproblem property)": [[329, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipRealSelectionProblem.nlatent"]], "nobj (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshiprealselectionproblem property)": [[329, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipRealSelectionProblem.nobj"]], "obj_trans (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshiprealselectionproblem property)": [[329, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipRealSelectionProblem.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshiprealselectionproblem property)": [[329, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipRealSelectionProblem.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshiprealselectionproblem property)": [[329, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipRealSelectionProblem.obj_wt"]], "replace_nan_values_by (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshiprealselectionproblem property)": [[329, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipRealSelectionProblem.replace_nan_values_by"]], "strict (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshiprealselectionproblem property)": [[329, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipRealSelectionProblem.strict"]], "vars (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshiprealselectionproblem property)": [[329, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipRealSelectionProblem.vars"]], "vtype (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshiprealselectionproblem property)": [[329, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipRealSelectionProblem.vtype"]], "xl (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshiprealselectionproblem property)": [[329, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipRealSelectionProblem.xl"]], "xu (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshiprealselectionproblem property)": [[329, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipRealSelectionProblem.xu"]], "c (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshipselectionproblemmixin property)": [[330, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipSelectionProblemMixin.C"]], "meangenomicrelationshipselectionproblemmixin (class in pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem)": [[330, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipSelectionProblemMixin"]], "nlatent (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshipselectionproblemmixin property)": [[330, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipSelectionProblemMixin.nlatent"]], "c (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshipsubsetselectionproblem property)": [[331, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipSubsetSelectionProblem.C"]], "meangenomicrelationshipsubsetselectionproblem (class in pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem)": [[331, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipSubsetSelectionProblem"]], "callback (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshipsubsetselectionproblem property)": [[331, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipSubsetSelectionProblem.callback"]], "data (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshipsubsetselectionproblem property)": [[331, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipSubsetSelectionProblem.data"]], "decn_space (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshipsubsetselectionproblem property)": [[331, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipSubsetSelectionProblem.decn_space"]], "decn_space_lower (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshipsubsetselectionproblem property)": [[331, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipSubsetSelectionProblem.decn_space_lower"]], "decn_space_upper (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshipsubsetselectionproblem property)": [[331, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipSubsetSelectionProblem.decn_space_upper"]], "elementwise (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshipsubsetselectionproblem property)": [[331, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipSubsetSelectionProblem.elementwise"]], "elementwise_func (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshipsubsetselectionproblem property)": [[331, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipSubsetSelectionProblem.elementwise_func"]], "elementwise_runner (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshipsubsetselectionproblem property)": [[331, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipSubsetSelectionProblem.elementwise_runner"]], "eqcv_trans (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshipsubsetselectionproblem property)": [[331, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipSubsetSelectionProblem.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshipsubsetselectionproblem property)": [[331, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipSubsetSelectionProblem.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshipsubsetselectionproblem property)": [[331, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipSubsetSelectionProblem.eqcv_wt"]], "evalfn() (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshipsubsetselectionproblem method)": [[331, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipSubsetSelectionProblem.evalfn"]], "exclude_from_serialization (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshipsubsetselectionproblem property)": [[331, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipSubsetSelectionProblem.exclude_from_serialization"]], "ineqcv_trans (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshipsubsetselectionproblem property)": [[331, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipSubsetSelectionProblem.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshipsubsetselectionproblem property)": [[331, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipSubsetSelectionProblem.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshipsubsetselectionproblem property)": [[331, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipSubsetSelectionProblem.ineqcv_wt"]], "latentfn() (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshipsubsetselectionproblem method)": [[331, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipSubsetSelectionProblem.latentfn"]], "n_eq_constr (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshipsubsetselectionproblem property)": [[331, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipSubsetSelectionProblem.n_eq_constr"]], "n_ieq_constr (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshipsubsetselectionproblem property)": [[331, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipSubsetSelectionProblem.n_ieq_constr"]], "n_obj (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshipsubsetselectionproblem property)": [[331, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipSubsetSelectionProblem.n_obj"]], "n_var (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshipsubsetselectionproblem property)": [[331, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipSubsetSelectionProblem.n_var"]], "ndecn (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshipsubsetselectionproblem property)": [[331, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipSubsetSelectionProblem.ndecn"]], "neqcv (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshipsubsetselectionproblem property)": [[331, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipSubsetSelectionProblem.neqcv"]], "nineqcv (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshipsubsetselectionproblem property)": [[331, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipSubsetSelectionProblem.nineqcv"]], "nlatent (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshipsubsetselectionproblem property)": [[331, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipSubsetSelectionProblem.nlatent"]], "nobj (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshipsubsetselectionproblem property)": [[331, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipSubsetSelectionProblem.nobj"]], "obj_trans (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshipsubsetselectionproblem property)": [[331, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipSubsetSelectionProblem.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshipsubsetselectionproblem property)": [[331, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipSubsetSelectionProblem.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshipsubsetselectionproblem property)": [[331, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipSubsetSelectionProblem.obj_wt"]], "replace_nan_values_by (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshipsubsetselectionproblem property)": [[331, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipSubsetSelectionProblem.replace_nan_values_by"]], "strict (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshipsubsetselectionproblem property)": [[331, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipSubsetSelectionProblem.strict"]], "vars (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshipsubsetselectionproblem property)": [[331, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipSubsetSelectionProblem.vars"]], "vtype (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshipsubsetselectionproblem property)": [[331, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipSubsetSelectionProblem.vtype"]], "xl (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshipsubsetselectionproblem property)": [[331, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipSubsetSelectionProblem.xl"]], "xu (pybrops.breed.prot.sel.prob.meangenomicrelationshipselectionproblem.meangenomicrelationshipsubsetselectionproblem property)": [[331, "pybrops.breed.prot.sel.prob.MeanGenomicRelationshipSelectionProblem.MeanGenomicRelationshipSubsetSelectionProblem.xu"]], "pybrops.breed.prot.sel.prob.multiobjectivegenomicmatingproblem": [[332, "module-pybrops.breed.prot.sel.prob.MultiObjectiveGenomicMatingProblem"]], "multiobjectivegenomicmatingproblemmixin (class in pybrops.breed.prot.sel.prob.multiobjectivegenomicmatingproblem)": [[333, "pybrops.breed.prot.sel.prob.MultiObjectiveGenomicMatingProblem.MultiObjectiveGenomicMatingProblemMixin"]], "geno (pybrops.breed.prot.sel.prob.multiobjectivegenomicmatingproblem.multiobjectivegenomicmatingproblemmixin property)": [[333, "pybrops.breed.prot.sel.prob.MultiObjectiveGenomicMatingProblem.MultiObjectiveGenomicMatingProblemMixin.geno"]], "mkrwt (pybrops.breed.prot.sel.prob.multiobjectivegenomicmatingproblem.multiobjectivegenomicmatingproblemmixin property)": [[333, "pybrops.breed.prot.sel.prob.MultiObjectiveGenomicMatingProblem.MultiObjectiveGenomicMatingProblemMixin.mkrwt"]], "nlatent (pybrops.breed.prot.sel.prob.multiobjectivegenomicmatingproblem.multiobjectivegenomicmatingproblemmixin property)": [[333, "pybrops.breed.prot.sel.prob.MultiObjectiveGenomicMatingProblem.MultiObjectiveGenomicMatingProblemMixin.nlatent"]], "ploidy (pybrops.breed.prot.sel.prob.multiobjectivegenomicmatingproblem.multiobjectivegenomicmatingproblemmixin property)": [[333, "pybrops.breed.prot.sel.prob.MultiObjectiveGenomicMatingProblem.MultiObjectiveGenomicMatingProblemMixin.ploidy"]], "tfreq (pybrops.breed.prot.sel.prob.multiobjectivegenomicmatingproblem.multiobjectivegenomicmatingproblemmixin property)": [[333, "pybrops.breed.prot.sel.prob.MultiObjectiveGenomicMatingProblem.MultiObjectiveGenomicMatingProblemMixin.tfreq"]], "thet (pybrops.breed.prot.sel.prob.multiobjectivegenomicmatingproblem.multiobjectivegenomicmatingproblemmixin property)": [[333, "pybrops.breed.prot.sel.prob.MultiObjectiveGenomicMatingProblem.MultiObjectiveGenomicMatingProblemMixin.thet"]], "tmajor (pybrops.breed.prot.sel.prob.multiobjectivegenomicmatingproblem.multiobjectivegenomicmatingproblemmixin property)": [[333, "pybrops.breed.prot.sel.prob.MultiObjectiveGenomicMatingProblem.MultiObjectiveGenomicMatingProblemMixin.tmajor"]], "tminor (pybrops.breed.prot.sel.prob.multiobjectivegenomicmatingproblem.multiobjectivegenomicmatingproblemmixin property)": [[333, "pybrops.breed.prot.sel.prob.MultiObjectiveGenomicMatingProblem.MultiObjectiveGenomicMatingProblemMixin.tminor"]], "xmap (pybrops.breed.prot.sel.prob.multiobjectivegenomicmatingproblem.multiobjectivegenomicmatingproblemmixin property)": [[333, "pybrops.breed.prot.sel.prob.MultiObjectiveGenomicMatingProblem.MultiObjectiveGenomicMatingProblemMixin.xmap"]], "multiobjectivegenomicsubsetmatingproblem (class in pybrops.breed.prot.sel.prob.multiobjectivegenomicmatingproblem)": [[334, "pybrops.breed.prot.sel.prob.MultiObjectiveGenomicMatingProblem.MultiObjectiveGenomicSubsetMatingProblem"]], "callback (pybrops.breed.prot.sel.prob.multiobjectivegenomicmatingproblem.multiobjectivegenomicsubsetmatingproblem property)": [[334, "pybrops.breed.prot.sel.prob.MultiObjectiveGenomicMatingProblem.MultiObjectiveGenomicSubsetMatingProblem.callback"]], "data (pybrops.breed.prot.sel.prob.multiobjectivegenomicmatingproblem.multiobjectivegenomicsubsetmatingproblem property)": [[334, "pybrops.breed.prot.sel.prob.MultiObjectiveGenomicMatingProblem.MultiObjectiveGenomicSubsetMatingProblem.data"]], "decn_space (pybrops.breed.prot.sel.prob.multiobjectivegenomicmatingproblem.multiobjectivegenomicsubsetmatingproblem property)": [[334, "pybrops.breed.prot.sel.prob.MultiObjectiveGenomicMatingProblem.MultiObjectiveGenomicSubsetMatingProblem.decn_space"]], "decn_space_lower (pybrops.breed.prot.sel.prob.multiobjectivegenomicmatingproblem.multiobjectivegenomicsubsetmatingproblem property)": [[334, "pybrops.breed.prot.sel.prob.MultiObjectiveGenomicMatingProblem.MultiObjectiveGenomicSubsetMatingProblem.decn_space_lower"]], "decn_space_upper (pybrops.breed.prot.sel.prob.multiobjectivegenomicmatingproblem.multiobjectivegenomicsubsetmatingproblem property)": [[334, "pybrops.breed.prot.sel.prob.MultiObjectiveGenomicMatingProblem.MultiObjectiveGenomicSubsetMatingProblem.decn_space_upper"]], "decn_space_xmap (pybrops.breed.prot.sel.prob.multiobjectivegenomicmatingproblem.multiobjectivegenomicsubsetmatingproblem property)": [[334, "pybrops.breed.prot.sel.prob.MultiObjectiveGenomicMatingProblem.MultiObjectiveGenomicSubsetMatingProblem.decn_space_xmap"]], "elementwise (pybrops.breed.prot.sel.prob.multiobjectivegenomicmatingproblem.multiobjectivegenomicsubsetmatingproblem property)": [[334, "pybrops.breed.prot.sel.prob.MultiObjectiveGenomicMatingProblem.MultiObjectiveGenomicSubsetMatingProblem.elementwise"]], "elementwise_func (pybrops.breed.prot.sel.prob.multiobjectivegenomicmatingproblem.multiobjectivegenomicsubsetmatingproblem property)": [[334, "pybrops.breed.prot.sel.prob.MultiObjectiveGenomicMatingProblem.MultiObjectiveGenomicSubsetMatingProblem.elementwise_func"]], "elementwise_runner (pybrops.breed.prot.sel.prob.multiobjectivegenomicmatingproblem.multiobjectivegenomicsubsetmatingproblem property)": [[334, "pybrops.breed.prot.sel.prob.MultiObjectiveGenomicMatingProblem.MultiObjectiveGenomicSubsetMatingProblem.elementwise_runner"]], "eqcv_trans (pybrops.breed.prot.sel.prob.multiobjectivegenomicmatingproblem.multiobjectivegenomicsubsetmatingproblem property)": [[334, "pybrops.breed.prot.sel.prob.MultiObjectiveGenomicMatingProblem.MultiObjectiveGenomicSubsetMatingProblem.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.prob.multiobjectivegenomicmatingproblem.multiobjectivegenomicsubsetmatingproblem property)": [[334, "pybrops.breed.prot.sel.prob.MultiObjectiveGenomicMatingProblem.MultiObjectiveGenomicSubsetMatingProblem.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.prob.multiobjectivegenomicmatingproblem.multiobjectivegenomicsubsetmatingproblem property)": [[334, "pybrops.breed.prot.sel.prob.MultiObjectiveGenomicMatingProblem.MultiObjectiveGenomicSubsetMatingProblem.eqcv_wt"]], "evalfn() (pybrops.breed.prot.sel.prob.multiobjectivegenomicmatingproblem.multiobjectivegenomicsubsetmatingproblem method)": [[334, "pybrops.breed.prot.sel.prob.MultiObjectiveGenomicMatingProblem.MultiObjectiveGenomicSubsetMatingProblem.evalfn"]], "exclude_from_serialization (pybrops.breed.prot.sel.prob.multiobjectivegenomicmatingproblem.multiobjectivegenomicsubsetmatingproblem property)": [[334, "pybrops.breed.prot.sel.prob.MultiObjectiveGenomicMatingProblem.MultiObjectiveGenomicSubsetMatingProblem.exclude_from_serialization"]], "geno (pybrops.breed.prot.sel.prob.multiobjectivegenomicmatingproblem.multiobjectivegenomicsubsetmatingproblem property)": [[334, "pybrops.breed.prot.sel.prob.MultiObjectiveGenomicMatingProblem.MultiObjectiveGenomicSubsetMatingProblem.geno"]], "ineqcv_trans (pybrops.breed.prot.sel.prob.multiobjectivegenomicmatingproblem.multiobjectivegenomicsubsetmatingproblem property)": [[334, "pybrops.breed.prot.sel.prob.MultiObjectiveGenomicMatingProblem.MultiObjectiveGenomicSubsetMatingProblem.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.prob.multiobjectivegenomicmatingproblem.multiobjectivegenomicsubsetmatingproblem property)": [[334, "pybrops.breed.prot.sel.prob.MultiObjectiveGenomicMatingProblem.MultiObjectiveGenomicSubsetMatingProblem.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.prob.multiobjectivegenomicmatingproblem.multiobjectivegenomicsubsetmatingproblem property)": [[334, "pybrops.breed.prot.sel.prob.MultiObjectiveGenomicMatingProblem.MultiObjectiveGenomicSubsetMatingProblem.ineqcv_wt"]], "latentfn() (pybrops.breed.prot.sel.prob.multiobjectivegenomicmatingproblem.multiobjectivegenomicsubsetmatingproblem method)": [[334, "pybrops.breed.prot.sel.prob.MultiObjectiveGenomicMatingProblem.MultiObjectiveGenomicSubsetMatingProblem.latentfn"]], "mkrwt (pybrops.breed.prot.sel.prob.multiobjectivegenomicmatingproblem.multiobjectivegenomicsubsetmatingproblem property)": [[334, "pybrops.breed.prot.sel.prob.MultiObjectiveGenomicMatingProblem.MultiObjectiveGenomicSubsetMatingProblem.mkrwt"]], "n_eq_constr (pybrops.breed.prot.sel.prob.multiobjectivegenomicmatingproblem.multiobjectivegenomicsubsetmatingproblem property)": [[334, "pybrops.breed.prot.sel.prob.MultiObjectiveGenomicMatingProblem.MultiObjectiveGenomicSubsetMatingProblem.n_eq_constr"]], "n_ieq_constr (pybrops.breed.prot.sel.prob.multiobjectivegenomicmatingproblem.multiobjectivegenomicsubsetmatingproblem property)": [[334, "pybrops.breed.prot.sel.prob.MultiObjectiveGenomicMatingProblem.MultiObjectiveGenomicSubsetMatingProblem.n_ieq_constr"]], "n_obj (pybrops.breed.prot.sel.prob.multiobjectivegenomicmatingproblem.multiobjectivegenomicsubsetmatingproblem property)": [[334, "pybrops.breed.prot.sel.prob.MultiObjectiveGenomicMatingProblem.MultiObjectiveGenomicSubsetMatingProblem.n_obj"]], "n_var (pybrops.breed.prot.sel.prob.multiobjectivegenomicmatingproblem.multiobjectivegenomicsubsetmatingproblem property)": [[334, "pybrops.breed.prot.sel.prob.MultiObjectiveGenomicMatingProblem.MultiObjectiveGenomicSubsetMatingProblem.n_var"]], "ndecn (pybrops.breed.prot.sel.prob.multiobjectivegenomicmatingproblem.multiobjectivegenomicsubsetmatingproblem property)": [[334, "pybrops.breed.prot.sel.prob.MultiObjectiveGenomicMatingProblem.MultiObjectiveGenomicSubsetMatingProblem.ndecn"]], "neqcv (pybrops.breed.prot.sel.prob.multiobjectivegenomicmatingproblem.multiobjectivegenomicsubsetmatingproblem property)": [[334, "pybrops.breed.prot.sel.prob.MultiObjectiveGenomicMatingProblem.MultiObjectiveGenomicSubsetMatingProblem.neqcv"]], "nineqcv (pybrops.breed.prot.sel.prob.multiobjectivegenomicmatingproblem.multiobjectivegenomicsubsetmatingproblem property)": [[334, "pybrops.breed.prot.sel.prob.MultiObjectiveGenomicMatingProblem.MultiObjectiveGenomicSubsetMatingProblem.nineqcv"]], "nlatent (pybrops.breed.prot.sel.prob.multiobjectivegenomicmatingproblem.multiobjectivegenomicsubsetmatingproblem property)": [[334, "pybrops.breed.prot.sel.prob.MultiObjectiveGenomicMatingProblem.MultiObjectiveGenomicSubsetMatingProblem.nlatent"]], "nobj (pybrops.breed.prot.sel.prob.multiobjectivegenomicmatingproblem.multiobjectivegenomicsubsetmatingproblem property)": [[334, "pybrops.breed.prot.sel.prob.MultiObjectiveGenomicMatingProblem.MultiObjectiveGenomicSubsetMatingProblem.nobj"]], "obj_trans (pybrops.breed.prot.sel.prob.multiobjectivegenomicmatingproblem.multiobjectivegenomicsubsetmatingproblem property)": [[334, "pybrops.breed.prot.sel.prob.MultiObjectiveGenomicMatingProblem.MultiObjectiveGenomicSubsetMatingProblem.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.prob.multiobjectivegenomicmatingproblem.multiobjectivegenomicsubsetmatingproblem property)": [[334, "pybrops.breed.prot.sel.prob.MultiObjectiveGenomicMatingProblem.MultiObjectiveGenomicSubsetMatingProblem.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.prob.multiobjectivegenomicmatingproblem.multiobjectivegenomicsubsetmatingproblem property)": [[334, "pybrops.breed.prot.sel.prob.MultiObjectiveGenomicMatingProblem.MultiObjectiveGenomicSubsetMatingProblem.obj_wt"]], "ploidy (pybrops.breed.prot.sel.prob.multiobjectivegenomicmatingproblem.multiobjectivegenomicsubsetmatingproblem property)": [[334, "pybrops.breed.prot.sel.prob.MultiObjectiveGenomicMatingProblem.MultiObjectiveGenomicSubsetMatingProblem.ploidy"]], "replace_nan_values_by (pybrops.breed.prot.sel.prob.multiobjectivegenomicmatingproblem.multiobjectivegenomicsubsetmatingproblem property)": [[334, "pybrops.breed.prot.sel.prob.MultiObjectiveGenomicMatingProblem.MultiObjectiveGenomicSubsetMatingProblem.replace_nan_values_by"]], "strict (pybrops.breed.prot.sel.prob.multiobjectivegenomicmatingproblem.multiobjectivegenomicsubsetmatingproblem property)": [[334, "pybrops.breed.prot.sel.prob.MultiObjectiveGenomicMatingProblem.MultiObjectiveGenomicSubsetMatingProblem.strict"]], "tfreq (pybrops.breed.prot.sel.prob.multiobjectivegenomicmatingproblem.multiobjectivegenomicsubsetmatingproblem property)": [[334, "pybrops.breed.prot.sel.prob.MultiObjectiveGenomicMatingProblem.MultiObjectiveGenomicSubsetMatingProblem.tfreq"]], "thet (pybrops.breed.prot.sel.prob.multiobjectivegenomicmatingproblem.multiobjectivegenomicsubsetmatingproblem property)": [[334, "pybrops.breed.prot.sel.prob.MultiObjectiveGenomicMatingProblem.MultiObjectiveGenomicSubsetMatingProblem.thet"]], "tmajor (pybrops.breed.prot.sel.prob.multiobjectivegenomicmatingproblem.multiobjectivegenomicsubsetmatingproblem property)": [[334, "pybrops.breed.prot.sel.prob.MultiObjectiveGenomicMatingProblem.MultiObjectiveGenomicSubsetMatingProblem.tmajor"]], "tminor (pybrops.breed.prot.sel.prob.multiobjectivegenomicmatingproblem.multiobjectivegenomicsubsetmatingproblem property)": [[334, "pybrops.breed.prot.sel.prob.MultiObjectiveGenomicMatingProblem.MultiObjectiveGenomicSubsetMatingProblem.tminor"]], "vars (pybrops.breed.prot.sel.prob.multiobjectivegenomicmatingproblem.multiobjectivegenomicsubsetmatingproblem property)": [[334, "pybrops.breed.prot.sel.prob.MultiObjectiveGenomicMatingProblem.MultiObjectiveGenomicSubsetMatingProblem.vars"]], "vtype (pybrops.breed.prot.sel.prob.multiobjectivegenomicmatingproblem.multiobjectivegenomicsubsetmatingproblem property)": [[334, "pybrops.breed.prot.sel.prob.MultiObjectiveGenomicMatingProblem.MultiObjectiveGenomicSubsetMatingProblem.vtype"]], "xl (pybrops.breed.prot.sel.prob.multiobjectivegenomicmatingproblem.multiobjectivegenomicsubsetmatingproblem property)": [[334, "pybrops.breed.prot.sel.prob.MultiObjectiveGenomicMatingProblem.MultiObjectiveGenomicSubsetMatingProblem.xl"]], "xmap (pybrops.breed.prot.sel.prob.multiobjectivegenomicmatingproblem.multiobjectivegenomicsubsetmatingproblem property)": [[334, "pybrops.breed.prot.sel.prob.MultiObjectiveGenomicMatingProblem.MultiObjectiveGenomicSubsetMatingProblem.xmap"]], "xu (pybrops.breed.prot.sel.prob.multiobjectivegenomicmatingproblem.multiobjectivegenomicsubsetmatingproblem property)": [[334, "pybrops.breed.prot.sel.prob.MultiObjectiveGenomicMatingProblem.MultiObjectiveGenomicSubsetMatingProblem.xu"]], "pybrops.breed.prot.sel.prob.multiobjectivegenomicselectionproblem": [[335, "module-pybrops.breed.prot.sel.prob.MultiObjectiveGenomicSelectionProblem"]], "multiobjectivegenomicselectionproblemmixin (class in pybrops.breed.prot.sel.prob.multiobjectivegenomicselectionproblem)": [[336, "pybrops.breed.prot.sel.prob.MultiObjectiveGenomicSelectionProblem.MultiObjectiveGenomicSelectionProblemMixin"]], "geno (pybrops.breed.prot.sel.prob.multiobjectivegenomicselectionproblem.multiobjectivegenomicselectionproblemmixin property)": [[336, "pybrops.breed.prot.sel.prob.MultiObjectiveGenomicSelectionProblem.MultiObjectiveGenomicSelectionProblemMixin.geno"]], "mkrwt (pybrops.breed.prot.sel.prob.multiobjectivegenomicselectionproblem.multiobjectivegenomicselectionproblemmixin property)": [[336, "pybrops.breed.prot.sel.prob.MultiObjectiveGenomicSelectionProblem.MultiObjectiveGenomicSelectionProblemMixin.mkrwt"]], "nlatent (pybrops.breed.prot.sel.prob.multiobjectivegenomicselectionproblem.multiobjectivegenomicselectionproblemmixin property)": [[336, "pybrops.breed.prot.sel.prob.MultiObjectiveGenomicSelectionProblem.MultiObjectiveGenomicSelectionProblemMixin.nlatent"]], "ploidy (pybrops.breed.prot.sel.prob.multiobjectivegenomicselectionproblem.multiobjectivegenomicselectionproblemmixin property)": [[336, "pybrops.breed.prot.sel.prob.MultiObjectiveGenomicSelectionProblem.MultiObjectiveGenomicSelectionProblemMixin.ploidy"]], "tfreq (pybrops.breed.prot.sel.prob.multiobjectivegenomicselectionproblem.multiobjectivegenomicselectionproblemmixin property)": [[336, "pybrops.breed.prot.sel.prob.MultiObjectiveGenomicSelectionProblem.MultiObjectiveGenomicSelectionProblemMixin.tfreq"]], "thet (pybrops.breed.prot.sel.prob.multiobjectivegenomicselectionproblem.multiobjectivegenomicselectionproblemmixin property)": [[336, "pybrops.breed.prot.sel.prob.MultiObjectiveGenomicSelectionProblem.MultiObjectiveGenomicSelectionProblemMixin.thet"]], "tmajor (pybrops.breed.prot.sel.prob.multiobjectivegenomicselectionproblem.multiobjectivegenomicselectionproblemmixin property)": [[336, "pybrops.breed.prot.sel.prob.MultiObjectiveGenomicSelectionProblem.MultiObjectiveGenomicSelectionProblemMixin.tmajor"]], "tminor (pybrops.breed.prot.sel.prob.multiobjectivegenomicselectionproblem.multiobjectivegenomicselectionproblemmixin property)": [[336, "pybrops.breed.prot.sel.prob.MultiObjectiveGenomicSelectionProblem.MultiObjectiveGenomicSelectionProblemMixin.tminor"]], "multiobjectivegenomicsubsetselectionproblem (class in pybrops.breed.prot.sel.prob.multiobjectivegenomicselectionproblem)": [[337, "pybrops.breed.prot.sel.prob.MultiObjectiveGenomicSelectionProblem.MultiObjectiveGenomicSubsetSelectionProblem"]], "callback (pybrops.breed.prot.sel.prob.multiobjectivegenomicselectionproblem.multiobjectivegenomicsubsetselectionproblem property)": [[337, "pybrops.breed.prot.sel.prob.MultiObjectiveGenomicSelectionProblem.MultiObjectiveGenomicSubsetSelectionProblem.callback"]], "data (pybrops.breed.prot.sel.prob.multiobjectivegenomicselectionproblem.multiobjectivegenomicsubsetselectionproblem property)": [[337, "pybrops.breed.prot.sel.prob.MultiObjectiveGenomicSelectionProblem.MultiObjectiveGenomicSubsetSelectionProblem.data"]], "decn_space (pybrops.breed.prot.sel.prob.multiobjectivegenomicselectionproblem.multiobjectivegenomicsubsetselectionproblem property)": [[337, "pybrops.breed.prot.sel.prob.MultiObjectiveGenomicSelectionProblem.MultiObjectiveGenomicSubsetSelectionProblem.decn_space"]], "decn_space_lower (pybrops.breed.prot.sel.prob.multiobjectivegenomicselectionproblem.multiobjectivegenomicsubsetselectionproblem property)": [[337, "pybrops.breed.prot.sel.prob.MultiObjectiveGenomicSelectionProblem.MultiObjectiveGenomicSubsetSelectionProblem.decn_space_lower"]], "decn_space_upper (pybrops.breed.prot.sel.prob.multiobjectivegenomicselectionproblem.multiobjectivegenomicsubsetselectionproblem property)": [[337, "pybrops.breed.prot.sel.prob.MultiObjectiveGenomicSelectionProblem.MultiObjectiveGenomicSubsetSelectionProblem.decn_space_upper"]], "elementwise (pybrops.breed.prot.sel.prob.multiobjectivegenomicselectionproblem.multiobjectivegenomicsubsetselectionproblem property)": [[337, "pybrops.breed.prot.sel.prob.MultiObjectiveGenomicSelectionProblem.MultiObjectiveGenomicSubsetSelectionProblem.elementwise"]], "elementwise_func (pybrops.breed.prot.sel.prob.multiobjectivegenomicselectionproblem.multiobjectivegenomicsubsetselectionproblem property)": [[337, "pybrops.breed.prot.sel.prob.MultiObjectiveGenomicSelectionProblem.MultiObjectiveGenomicSubsetSelectionProblem.elementwise_func"]], "elementwise_runner (pybrops.breed.prot.sel.prob.multiobjectivegenomicselectionproblem.multiobjectivegenomicsubsetselectionproblem property)": [[337, "pybrops.breed.prot.sel.prob.MultiObjectiveGenomicSelectionProblem.MultiObjectiveGenomicSubsetSelectionProblem.elementwise_runner"]], "eqcv_trans (pybrops.breed.prot.sel.prob.multiobjectivegenomicselectionproblem.multiobjectivegenomicsubsetselectionproblem property)": [[337, "pybrops.breed.prot.sel.prob.MultiObjectiveGenomicSelectionProblem.MultiObjectiveGenomicSubsetSelectionProblem.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.prob.multiobjectivegenomicselectionproblem.multiobjectivegenomicsubsetselectionproblem property)": [[337, "pybrops.breed.prot.sel.prob.MultiObjectiveGenomicSelectionProblem.MultiObjectiveGenomicSubsetSelectionProblem.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.prob.multiobjectivegenomicselectionproblem.multiobjectivegenomicsubsetselectionproblem property)": [[337, "pybrops.breed.prot.sel.prob.MultiObjectiveGenomicSelectionProblem.MultiObjectiveGenomicSubsetSelectionProblem.eqcv_wt"]], "evalfn() (pybrops.breed.prot.sel.prob.multiobjectivegenomicselectionproblem.multiobjectivegenomicsubsetselectionproblem method)": [[337, "pybrops.breed.prot.sel.prob.MultiObjectiveGenomicSelectionProblem.MultiObjectiveGenomicSubsetSelectionProblem.evalfn"]], "exclude_from_serialization (pybrops.breed.prot.sel.prob.multiobjectivegenomicselectionproblem.multiobjectivegenomicsubsetselectionproblem property)": [[337, "pybrops.breed.prot.sel.prob.MultiObjectiveGenomicSelectionProblem.MultiObjectiveGenomicSubsetSelectionProblem.exclude_from_serialization"]], "geno (pybrops.breed.prot.sel.prob.multiobjectivegenomicselectionproblem.multiobjectivegenomicsubsetselectionproblem property)": [[337, "pybrops.breed.prot.sel.prob.MultiObjectiveGenomicSelectionProblem.MultiObjectiveGenomicSubsetSelectionProblem.geno"]], "ineqcv_trans (pybrops.breed.prot.sel.prob.multiobjectivegenomicselectionproblem.multiobjectivegenomicsubsetselectionproblem property)": [[337, "pybrops.breed.prot.sel.prob.MultiObjectiveGenomicSelectionProblem.MultiObjectiveGenomicSubsetSelectionProblem.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.prob.multiobjectivegenomicselectionproblem.multiobjectivegenomicsubsetselectionproblem property)": [[337, "pybrops.breed.prot.sel.prob.MultiObjectiveGenomicSelectionProblem.MultiObjectiveGenomicSubsetSelectionProblem.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.prob.multiobjectivegenomicselectionproblem.multiobjectivegenomicsubsetselectionproblem property)": [[337, "pybrops.breed.prot.sel.prob.MultiObjectiveGenomicSelectionProblem.MultiObjectiveGenomicSubsetSelectionProblem.ineqcv_wt"]], "latentfn() (pybrops.breed.prot.sel.prob.multiobjectivegenomicselectionproblem.multiobjectivegenomicsubsetselectionproblem method)": [[337, "pybrops.breed.prot.sel.prob.MultiObjectiveGenomicSelectionProblem.MultiObjectiveGenomicSubsetSelectionProblem.latentfn"]], "mkrwt (pybrops.breed.prot.sel.prob.multiobjectivegenomicselectionproblem.multiobjectivegenomicsubsetselectionproblem property)": [[337, "pybrops.breed.prot.sel.prob.MultiObjectiveGenomicSelectionProblem.MultiObjectiveGenomicSubsetSelectionProblem.mkrwt"]], "n_eq_constr (pybrops.breed.prot.sel.prob.multiobjectivegenomicselectionproblem.multiobjectivegenomicsubsetselectionproblem property)": [[337, "pybrops.breed.prot.sel.prob.MultiObjectiveGenomicSelectionProblem.MultiObjectiveGenomicSubsetSelectionProblem.n_eq_constr"]], "n_ieq_constr (pybrops.breed.prot.sel.prob.multiobjectivegenomicselectionproblem.multiobjectivegenomicsubsetselectionproblem property)": [[337, "pybrops.breed.prot.sel.prob.MultiObjectiveGenomicSelectionProblem.MultiObjectiveGenomicSubsetSelectionProblem.n_ieq_constr"]], "n_obj (pybrops.breed.prot.sel.prob.multiobjectivegenomicselectionproblem.multiobjectivegenomicsubsetselectionproblem property)": [[337, "pybrops.breed.prot.sel.prob.MultiObjectiveGenomicSelectionProblem.MultiObjectiveGenomicSubsetSelectionProblem.n_obj"]], "n_var (pybrops.breed.prot.sel.prob.multiobjectivegenomicselectionproblem.multiobjectivegenomicsubsetselectionproblem property)": [[337, "pybrops.breed.prot.sel.prob.MultiObjectiveGenomicSelectionProblem.MultiObjectiveGenomicSubsetSelectionProblem.n_var"]], "ndecn (pybrops.breed.prot.sel.prob.multiobjectivegenomicselectionproblem.multiobjectivegenomicsubsetselectionproblem property)": [[337, "pybrops.breed.prot.sel.prob.MultiObjectiveGenomicSelectionProblem.MultiObjectiveGenomicSubsetSelectionProblem.ndecn"]], "neqcv (pybrops.breed.prot.sel.prob.multiobjectivegenomicselectionproblem.multiobjectivegenomicsubsetselectionproblem property)": [[337, "pybrops.breed.prot.sel.prob.MultiObjectiveGenomicSelectionProblem.MultiObjectiveGenomicSubsetSelectionProblem.neqcv"]], "nineqcv (pybrops.breed.prot.sel.prob.multiobjectivegenomicselectionproblem.multiobjectivegenomicsubsetselectionproblem property)": [[337, "pybrops.breed.prot.sel.prob.MultiObjectiveGenomicSelectionProblem.MultiObjectiveGenomicSubsetSelectionProblem.nineqcv"]], "nlatent (pybrops.breed.prot.sel.prob.multiobjectivegenomicselectionproblem.multiobjectivegenomicsubsetselectionproblem property)": [[337, "pybrops.breed.prot.sel.prob.MultiObjectiveGenomicSelectionProblem.MultiObjectiveGenomicSubsetSelectionProblem.nlatent"]], "nobj (pybrops.breed.prot.sel.prob.multiobjectivegenomicselectionproblem.multiobjectivegenomicsubsetselectionproblem property)": [[337, "pybrops.breed.prot.sel.prob.MultiObjectiveGenomicSelectionProblem.MultiObjectiveGenomicSubsetSelectionProblem.nobj"]], "obj_trans (pybrops.breed.prot.sel.prob.multiobjectivegenomicselectionproblem.multiobjectivegenomicsubsetselectionproblem property)": [[337, "pybrops.breed.prot.sel.prob.MultiObjectiveGenomicSelectionProblem.MultiObjectiveGenomicSubsetSelectionProblem.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.prob.multiobjectivegenomicselectionproblem.multiobjectivegenomicsubsetselectionproblem property)": [[337, "pybrops.breed.prot.sel.prob.MultiObjectiveGenomicSelectionProblem.MultiObjectiveGenomicSubsetSelectionProblem.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.prob.multiobjectivegenomicselectionproblem.multiobjectivegenomicsubsetselectionproblem property)": [[337, "pybrops.breed.prot.sel.prob.MultiObjectiveGenomicSelectionProblem.MultiObjectiveGenomicSubsetSelectionProblem.obj_wt"]], "ploidy (pybrops.breed.prot.sel.prob.multiobjectivegenomicselectionproblem.multiobjectivegenomicsubsetselectionproblem property)": [[337, "pybrops.breed.prot.sel.prob.MultiObjectiveGenomicSelectionProblem.MultiObjectiveGenomicSubsetSelectionProblem.ploidy"]], "replace_nan_values_by (pybrops.breed.prot.sel.prob.multiobjectivegenomicselectionproblem.multiobjectivegenomicsubsetselectionproblem property)": [[337, "pybrops.breed.prot.sel.prob.MultiObjectiveGenomicSelectionProblem.MultiObjectiveGenomicSubsetSelectionProblem.replace_nan_values_by"]], "strict (pybrops.breed.prot.sel.prob.multiobjectivegenomicselectionproblem.multiobjectivegenomicsubsetselectionproblem property)": [[337, "pybrops.breed.prot.sel.prob.MultiObjectiveGenomicSelectionProblem.MultiObjectiveGenomicSubsetSelectionProblem.strict"]], "tfreq (pybrops.breed.prot.sel.prob.multiobjectivegenomicselectionproblem.multiobjectivegenomicsubsetselectionproblem property)": [[337, "pybrops.breed.prot.sel.prob.MultiObjectiveGenomicSelectionProblem.MultiObjectiveGenomicSubsetSelectionProblem.tfreq"]], "thet (pybrops.breed.prot.sel.prob.multiobjectivegenomicselectionproblem.multiobjectivegenomicsubsetselectionproblem property)": [[337, "pybrops.breed.prot.sel.prob.MultiObjectiveGenomicSelectionProblem.MultiObjectiveGenomicSubsetSelectionProblem.thet"]], "tmajor (pybrops.breed.prot.sel.prob.multiobjectivegenomicselectionproblem.multiobjectivegenomicsubsetselectionproblem property)": [[337, "pybrops.breed.prot.sel.prob.MultiObjectiveGenomicSelectionProblem.MultiObjectiveGenomicSubsetSelectionProblem.tmajor"]], "tminor (pybrops.breed.prot.sel.prob.multiobjectivegenomicselectionproblem.multiobjectivegenomicsubsetselectionproblem property)": [[337, "pybrops.breed.prot.sel.prob.MultiObjectiveGenomicSelectionProblem.MultiObjectiveGenomicSubsetSelectionProblem.tminor"]], "vars (pybrops.breed.prot.sel.prob.multiobjectivegenomicselectionproblem.multiobjectivegenomicsubsetselectionproblem property)": [[337, "pybrops.breed.prot.sel.prob.MultiObjectiveGenomicSelectionProblem.MultiObjectiveGenomicSubsetSelectionProblem.vars"]], "vtype (pybrops.breed.prot.sel.prob.multiobjectivegenomicselectionproblem.multiobjectivegenomicsubsetselectionproblem property)": [[337, "pybrops.breed.prot.sel.prob.MultiObjectiveGenomicSelectionProblem.MultiObjectiveGenomicSubsetSelectionProblem.vtype"]], "xl (pybrops.breed.prot.sel.prob.multiobjectivegenomicselectionproblem.multiobjectivegenomicsubsetselectionproblem property)": [[337, "pybrops.breed.prot.sel.prob.MultiObjectiveGenomicSelectionProblem.MultiObjectiveGenomicSubsetSelectionProblem.xl"]], "xu (pybrops.breed.prot.sel.prob.multiobjectivegenomicselectionproblem.multiobjectivegenomicsubsetselectionproblem property)": [[337, "pybrops.breed.prot.sel.prob.MultiObjectiveGenomicSelectionProblem.MultiObjectiveGenomicSubsetSelectionProblem.xu"]], "pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem": [[338, "module-pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem"]], "c (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionbinaryselectionproblem property)": [[339, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionBinarySelectionProblem.C"]], "optimalcontributionbinaryselectionproblem (class in pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem)": [[339, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionBinarySelectionProblem"]], "callback (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionbinaryselectionproblem property)": [[339, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionBinarySelectionProblem.callback"]], "data (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionbinaryselectionproblem property)": [[339, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionBinarySelectionProblem.data"]], "decn_space (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionbinaryselectionproblem property)": [[339, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionBinarySelectionProblem.decn_space"]], "decn_space_lower (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionbinaryselectionproblem property)": [[339, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionBinarySelectionProblem.decn_space_lower"]], "decn_space_upper (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionbinaryselectionproblem property)": [[339, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionBinarySelectionProblem.decn_space_upper"]], "ebv (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionbinaryselectionproblem property)": [[339, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionBinarySelectionProblem.ebv"]], "elementwise (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionbinaryselectionproblem property)": [[339, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionBinarySelectionProblem.elementwise"]], "elementwise_func (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionbinaryselectionproblem property)": [[339, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionBinarySelectionProblem.elementwise_func"]], "elementwise_runner (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionbinaryselectionproblem property)": [[339, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionBinarySelectionProblem.elementwise_runner"]], "eqcv_trans (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionbinaryselectionproblem property)": [[339, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionBinarySelectionProblem.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionbinaryselectionproblem property)": [[339, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionBinarySelectionProblem.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionbinaryselectionproblem property)": [[339, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionBinarySelectionProblem.eqcv_wt"]], "evalfn() (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionbinaryselectionproblem method)": [[339, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionBinarySelectionProblem.evalfn"]], "exclude_from_serialization (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionbinaryselectionproblem property)": [[339, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionBinarySelectionProblem.exclude_from_serialization"]], "ineqcv_trans (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionbinaryselectionproblem property)": [[339, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionBinarySelectionProblem.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionbinaryselectionproblem property)": [[339, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionBinarySelectionProblem.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionbinaryselectionproblem property)": [[339, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionBinarySelectionProblem.ineqcv_wt"]], "latentfn() (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionbinaryselectionproblem method)": [[339, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionBinarySelectionProblem.latentfn"]], "n_eq_constr (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionbinaryselectionproblem property)": [[339, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionBinarySelectionProblem.n_eq_constr"]], "n_ieq_constr (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionbinaryselectionproblem property)": [[339, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionBinarySelectionProblem.n_ieq_constr"]], "n_obj (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionbinaryselectionproblem property)": [[339, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionBinarySelectionProblem.n_obj"]], "n_var (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionbinaryselectionproblem property)": [[339, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionBinarySelectionProblem.n_var"]], "ndecn (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionbinaryselectionproblem property)": [[339, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionBinarySelectionProblem.ndecn"]], "neqcv (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionbinaryselectionproblem property)": [[339, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionBinarySelectionProblem.neqcv"]], "nineqcv (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionbinaryselectionproblem property)": [[339, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionBinarySelectionProblem.nineqcv"]], "nlatent (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionbinaryselectionproblem property)": [[339, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionBinarySelectionProblem.nlatent"]], "nobj (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionbinaryselectionproblem property)": [[339, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionBinarySelectionProblem.nobj"]], "obj_trans (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionbinaryselectionproblem property)": [[339, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionBinarySelectionProblem.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionbinaryselectionproblem property)": [[339, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionBinarySelectionProblem.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionbinaryselectionproblem property)": [[339, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionBinarySelectionProblem.obj_wt"]], "replace_nan_values_by (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionbinaryselectionproblem property)": [[339, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionBinarySelectionProblem.replace_nan_values_by"]], "strict (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionbinaryselectionproblem property)": [[339, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionBinarySelectionProblem.strict"]], "vars (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionbinaryselectionproblem property)": [[339, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionBinarySelectionProblem.vars"]], "vtype (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionbinaryselectionproblem property)": [[339, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionBinarySelectionProblem.vtype"]], "xl (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionbinaryselectionproblem property)": [[339, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionBinarySelectionProblem.xl"]], "xu (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionbinaryselectionproblem property)": [[339, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionBinarySelectionProblem.xu"]], "c (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionintegerselectionproblem property)": [[340, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionIntegerSelectionProblem.C"]], "optimalcontributionintegerselectionproblem (class in pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem)": [[340, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionIntegerSelectionProblem"]], "callback (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionintegerselectionproblem property)": [[340, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionIntegerSelectionProblem.callback"]], "data (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionintegerselectionproblem property)": [[340, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionIntegerSelectionProblem.data"]], "decn_space (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionintegerselectionproblem property)": [[340, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionIntegerSelectionProblem.decn_space"]], "decn_space_lower (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionintegerselectionproblem property)": [[340, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionIntegerSelectionProblem.decn_space_lower"]], "decn_space_upper (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionintegerselectionproblem property)": [[340, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionIntegerSelectionProblem.decn_space_upper"]], "ebv (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionintegerselectionproblem property)": [[340, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionIntegerSelectionProblem.ebv"]], "elementwise (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionintegerselectionproblem property)": [[340, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionIntegerSelectionProblem.elementwise"]], "elementwise_func (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionintegerselectionproblem property)": [[340, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionIntegerSelectionProblem.elementwise_func"]], "elementwise_runner (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionintegerselectionproblem property)": [[340, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionIntegerSelectionProblem.elementwise_runner"]], "eqcv_trans (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionintegerselectionproblem property)": [[340, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionIntegerSelectionProblem.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionintegerselectionproblem property)": [[340, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionIntegerSelectionProblem.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionintegerselectionproblem property)": [[340, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionIntegerSelectionProblem.eqcv_wt"]], "evalfn() (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionintegerselectionproblem method)": [[340, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionIntegerSelectionProblem.evalfn"]], "exclude_from_serialization (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionintegerselectionproblem property)": [[340, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionIntegerSelectionProblem.exclude_from_serialization"]], "ineqcv_trans (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionintegerselectionproblem property)": [[340, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionIntegerSelectionProblem.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionintegerselectionproblem property)": [[340, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionIntegerSelectionProblem.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionintegerselectionproblem property)": [[340, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionIntegerSelectionProblem.ineqcv_wt"]], "latentfn() (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionintegerselectionproblem method)": [[340, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionIntegerSelectionProblem.latentfn"]], "n_eq_constr (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionintegerselectionproblem property)": [[340, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionIntegerSelectionProblem.n_eq_constr"]], "n_ieq_constr (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionintegerselectionproblem property)": [[340, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionIntegerSelectionProblem.n_ieq_constr"]], "n_obj (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionintegerselectionproblem property)": [[340, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionIntegerSelectionProblem.n_obj"]], "n_var (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionintegerselectionproblem property)": [[340, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionIntegerSelectionProblem.n_var"]], "ndecn (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionintegerselectionproblem property)": [[340, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionIntegerSelectionProblem.ndecn"]], "neqcv (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionintegerselectionproblem property)": [[340, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionIntegerSelectionProblem.neqcv"]], "nineqcv (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionintegerselectionproblem property)": [[340, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionIntegerSelectionProblem.nineqcv"]], "nlatent (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionintegerselectionproblem property)": [[340, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionIntegerSelectionProblem.nlatent"]], "nobj (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionintegerselectionproblem property)": [[340, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionIntegerSelectionProblem.nobj"]], "obj_trans (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionintegerselectionproblem property)": [[340, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionIntegerSelectionProblem.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionintegerselectionproblem property)": [[340, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionIntegerSelectionProblem.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionintegerselectionproblem property)": [[340, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionIntegerSelectionProblem.obj_wt"]], "replace_nan_values_by (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionintegerselectionproblem property)": [[340, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionIntegerSelectionProblem.replace_nan_values_by"]], "strict (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionintegerselectionproblem property)": [[340, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionIntegerSelectionProblem.strict"]], "vars (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionintegerselectionproblem property)": [[340, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionIntegerSelectionProblem.vars"]], "vtype (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionintegerselectionproblem property)": [[340, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionIntegerSelectionProblem.vtype"]], "xl (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionintegerselectionproblem property)": [[340, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionIntegerSelectionProblem.xl"]], "xu (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionintegerselectionproblem property)": [[340, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionIntegerSelectionProblem.xu"]], "c (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionrealselectionproblem property)": [[341, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionRealSelectionProblem.C"]], "optimalcontributionrealselectionproblem (class in pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem)": [[341, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionRealSelectionProblem"]], "callback (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionrealselectionproblem property)": [[341, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionRealSelectionProblem.callback"]], "data (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionrealselectionproblem property)": [[341, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionRealSelectionProblem.data"]], "decn_space (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionrealselectionproblem property)": [[341, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionRealSelectionProblem.decn_space"]], "decn_space_lower (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionrealselectionproblem property)": [[341, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionRealSelectionProblem.decn_space_lower"]], "decn_space_upper (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionrealselectionproblem property)": [[341, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionRealSelectionProblem.decn_space_upper"]], "ebv (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionrealselectionproblem property)": [[341, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionRealSelectionProblem.ebv"]], "elementwise (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionrealselectionproblem property)": [[341, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionRealSelectionProblem.elementwise"]], "elementwise_func (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionrealselectionproblem property)": [[341, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionRealSelectionProblem.elementwise_func"]], "elementwise_runner (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionrealselectionproblem property)": [[341, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionRealSelectionProblem.elementwise_runner"]], "eqcv_trans (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionrealselectionproblem property)": [[341, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionRealSelectionProblem.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionrealselectionproblem property)": [[341, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionRealSelectionProblem.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionrealselectionproblem property)": [[341, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionRealSelectionProblem.eqcv_wt"]], "evalfn() (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionrealselectionproblem method)": [[341, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionRealSelectionProblem.evalfn"]], "exclude_from_serialization (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionrealselectionproblem property)": [[341, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionRealSelectionProblem.exclude_from_serialization"]], "ineqcv_trans (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionrealselectionproblem property)": [[341, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionRealSelectionProblem.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionrealselectionproblem property)": [[341, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionRealSelectionProblem.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionrealselectionproblem property)": [[341, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionRealSelectionProblem.ineqcv_wt"]], "latentfn() (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionrealselectionproblem method)": [[341, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionRealSelectionProblem.latentfn"]], "n_eq_constr (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionrealselectionproblem property)": [[341, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionRealSelectionProblem.n_eq_constr"]], "n_ieq_constr (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionrealselectionproblem property)": [[341, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionRealSelectionProblem.n_ieq_constr"]], "n_obj (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionrealselectionproblem property)": [[341, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionRealSelectionProblem.n_obj"]], "n_var (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionrealselectionproblem property)": [[341, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionRealSelectionProblem.n_var"]], "ndecn (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionrealselectionproblem property)": [[341, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionRealSelectionProblem.ndecn"]], "neqcv (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionrealselectionproblem property)": [[341, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionRealSelectionProblem.neqcv"]], "nineqcv (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionrealselectionproblem property)": [[341, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionRealSelectionProblem.nineqcv"]], "nlatent (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionrealselectionproblem property)": [[341, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionRealSelectionProblem.nlatent"]], "nobj (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionrealselectionproblem property)": [[341, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionRealSelectionProblem.nobj"]], "obj_trans (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionrealselectionproblem property)": [[341, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionRealSelectionProblem.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionrealselectionproblem property)": [[341, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionRealSelectionProblem.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionrealselectionproblem property)": [[341, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionRealSelectionProblem.obj_wt"]], "replace_nan_values_by (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionrealselectionproblem property)": [[341, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionRealSelectionProblem.replace_nan_values_by"]], "strict (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionrealselectionproblem property)": [[341, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionRealSelectionProblem.strict"]], "vars (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionrealselectionproblem property)": [[341, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionRealSelectionProblem.vars"]], "vtype (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionrealselectionproblem property)": [[341, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionRealSelectionProblem.vtype"]], "xl (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionrealselectionproblem property)": [[341, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionRealSelectionProblem.xl"]], "xu (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionrealselectionproblem property)": [[341, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionRealSelectionProblem.xu"]], "c (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionselectionproblemmixin property)": [[342, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionSelectionProblemMixin.C"]], "optimalcontributionselectionproblemmixin (class in pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem)": [[342, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionSelectionProblemMixin"]], "ebv (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionselectionproblemmixin property)": [[342, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionSelectionProblemMixin.ebv"]], "nlatent (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionselectionproblemmixin property)": [[342, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionSelectionProblemMixin.nlatent"]], "c (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionsubsetselectionproblem property)": [[343, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionSubsetSelectionProblem.C"]], "optimalcontributionsubsetselectionproblem (class in pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem)": [[343, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionSubsetSelectionProblem"]], "callback (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionsubsetselectionproblem property)": [[343, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionSubsetSelectionProblem.callback"]], "data (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionsubsetselectionproblem property)": [[343, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionSubsetSelectionProblem.data"]], "decn_space (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionsubsetselectionproblem property)": [[343, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionSubsetSelectionProblem.decn_space"]], "decn_space_lower (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionsubsetselectionproblem property)": [[343, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionSubsetSelectionProblem.decn_space_lower"]], "decn_space_upper (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionsubsetselectionproblem property)": [[343, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionSubsetSelectionProblem.decn_space_upper"]], "ebv (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionsubsetselectionproblem property)": [[343, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionSubsetSelectionProblem.ebv"]], "elementwise (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionsubsetselectionproblem property)": [[343, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionSubsetSelectionProblem.elementwise"]], "elementwise_func (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionsubsetselectionproblem property)": [[343, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionSubsetSelectionProblem.elementwise_func"]], "elementwise_runner (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionsubsetselectionproblem property)": [[343, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionSubsetSelectionProblem.elementwise_runner"]], "eqcv_trans (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionsubsetselectionproblem property)": [[343, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionSubsetSelectionProblem.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionsubsetselectionproblem property)": [[343, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionSubsetSelectionProblem.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionsubsetselectionproblem property)": [[343, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionSubsetSelectionProblem.eqcv_wt"]], "evalfn() (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionsubsetselectionproblem method)": [[343, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionSubsetSelectionProblem.evalfn"]], "exclude_from_serialization (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionsubsetselectionproblem property)": [[343, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionSubsetSelectionProblem.exclude_from_serialization"]], "ineqcv_trans (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionsubsetselectionproblem property)": [[343, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionSubsetSelectionProblem.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionsubsetselectionproblem property)": [[343, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionSubsetSelectionProblem.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionsubsetselectionproblem property)": [[343, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionSubsetSelectionProblem.ineqcv_wt"]], "latentfn() (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionsubsetselectionproblem method)": [[343, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionSubsetSelectionProblem.latentfn"]], "n_eq_constr (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionsubsetselectionproblem property)": [[343, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionSubsetSelectionProblem.n_eq_constr"]], "n_ieq_constr (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionsubsetselectionproblem property)": [[343, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionSubsetSelectionProblem.n_ieq_constr"]], "n_obj (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionsubsetselectionproblem property)": [[343, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionSubsetSelectionProblem.n_obj"]], "n_var (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionsubsetselectionproblem property)": [[343, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionSubsetSelectionProblem.n_var"]], "ndecn (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionsubsetselectionproblem property)": [[343, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionSubsetSelectionProblem.ndecn"]], "neqcv (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionsubsetselectionproblem property)": [[343, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionSubsetSelectionProblem.neqcv"]], "nineqcv (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionsubsetselectionproblem property)": [[343, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionSubsetSelectionProblem.nineqcv"]], "nlatent (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionsubsetselectionproblem property)": [[343, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionSubsetSelectionProblem.nlatent"]], "nobj (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionsubsetselectionproblem property)": [[343, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionSubsetSelectionProblem.nobj"]], "obj_trans (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionsubsetselectionproblem property)": [[343, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionSubsetSelectionProblem.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionsubsetselectionproblem property)": [[343, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionSubsetSelectionProblem.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionsubsetselectionproblem property)": [[343, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionSubsetSelectionProblem.obj_wt"]], "replace_nan_values_by (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionsubsetselectionproblem property)": [[343, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionSubsetSelectionProblem.replace_nan_values_by"]], "strict (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionsubsetselectionproblem property)": [[343, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionSubsetSelectionProblem.strict"]], "vars (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionsubsetselectionproblem property)": [[343, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionSubsetSelectionProblem.vars"]], "vtype (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionsubsetselectionproblem property)": [[343, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionSubsetSelectionProblem.vtype"]], "xl (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionsubsetselectionproblem property)": [[343, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionSubsetSelectionProblem.xl"]], "xu (pybrops.breed.prot.sel.prob.optimalcontributionselectionproblem.optimalcontributionsubsetselectionproblem property)": [[343, "pybrops.breed.prot.sel.prob.OptimalContributionSelectionProblem.OptimalContributionSubsetSelectionProblem.xu"]], "pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem": [[344, "module-pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem"]], "optimalhaploidvaluebinaryselectionproblem (class in pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem)": [[345, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueBinarySelectionProblem"]], "callback (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvaluebinaryselectionproblem property)": [[345, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueBinarySelectionProblem.callback"]], "data (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvaluebinaryselectionproblem property)": [[345, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueBinarySelectionProblem.data"]], "decn_space (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvaluebinaryselectionproblem property)": [[345, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueBinarySelectionProblem.decn_space"]], "decn_space_lower (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvaluebinaryselectionproblem property)": [[345, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueBinarySelectionProblem.decn_space_lower"]], "decn_space_upper (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvaluebinaryselectionproblem property)": [[345, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueBinarySelectionProblem.decn_space_upper"]], "elementwise (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvaluebinaryselectionproblem property)": [[345, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueBinarySelectionProblem.elementwise"]], "elementwise_func (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvaluebinaryselectionproblem property)": [[345, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueBinarySelectionProblem.elementwise_func"]], "elementwise_runner (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvaluebinaryselectionproblem property)": [[345, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueBinarySelectionProblem.elementwise_runner"]], "eqcv_trans (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvaluebinaryselectionproblem property)": [[345, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueBinarySelectionProblem.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvaluebinaryselectionproblem property)": [[345, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueBinarySelectionProblem.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvaluebinaryselectionproblem property)": [[345, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueBinarySelectionProblem.eqcv_wt"]], "evalfn() (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvaluebinaryselectionproblem method)": [[345, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueBinarySelectionProblem.evalfn"]], "exclude_from_serialization (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvaluebinaryselectionproblem property)": [[345, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueBinarySelectionProblem.exclude_from_serialization"]], "ineqcv_trans (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvaluebinaryselectionproblem property)": [[345, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueBinarySelectionProblem.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvaluebinaryselectionproblem property)": [[345, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueBinarySelectionProblem.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvaluebinaryselectionproblem property)": [[345, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueBinarySelectionProblem.ineqcv_wt"]], "latentfn() (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvaluebinaryselectionproblem method)": [[345, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueBinarySelectionProblem.latentfn"]], "n_eq_constr (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvaluebinaryselectionproblem property)": [[345, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueBinarySelectionProblem.n_eq_constr"]], "n_ieq_constr (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvaluebinaryselectionproblem property)": [[345, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueBinarySelectionProblem.n_ieq_constr"]], "n_obj (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvaluebinaryselectionproblem property)": [[345, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueBinarySelectionProblem.n_obj"]], "n_var (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvaluebinaryselectionproblem property)": [[345, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueBinarySelectionProblem.n_var"]], "ndecn (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvaluebinaryselectionproblem property)": [[345, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueBinarySelectionProblem.ndecn"]], "neqcv (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvaluebinaryselectionproblem property)": [[345, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueBinarySelectionProblem.neqcv"]], "nineqcv (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvaluebinaryselectionproblem property)": [[345, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueBinarySelectionProblem.nineqcv"]], "nlatent (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvaluebinaryselectionproblem property)": [[345, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueBinarySelectionProblem.nlatent"]], "nobj (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvaluebinaryselectionproblem property)": [[345, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueBinarySelectionProblem.nobj"]], "obj_trans (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvaluebinaryselectionproblem property)": [[345, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueBinarySelectionProblem.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvaluebinaryselectionproblem property)": [[345, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueBinarySelectionProblem.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvaluebinaryselectionproblem property)": [[345, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueBinarySelectionProblem.obj_wt"]], "ohvmat (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvaluebinaryselectionproblem property)": [[345, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueBinarySelectionProblem.ohvmat"]], "replace_nan_values_by (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvaluebinaryselectionproblem property)": [[345, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueBinarySelectionProblem.replace_nan_values_by"]], "strict (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvaluebinaryselectionproblem property)": [[345, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueBinarySelectionProblem.strict"]], "vars (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvaluebinaryselectionproblem property)": [[345, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueBinarySelectionProblem.vars"]], "vtype (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvaluebinaryselectionproblem property)": [[345, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueBinarySelectionProblem.vtype"]], "xl (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvaluebinaryselectionproblem property)": [[345, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueBinarySelectionProblem.xl"]], "xu (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvaluebinaryselectionproblem property)": [[345, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueBinarySelectionProblem.xu"]], "optimalhaploidvalueintegerselectionproblem (class in pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem)": [[346, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueIntegerSelectionProblem"]], "callback (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvalueintegerselectionproblem property)": [[346, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueIntegerSelectionProblem.callback"]], "data (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvalueintegerselectionproblem property)": [[346, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueIntegerSelectionProblem.data"]], "decn_space (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvalueintegerselectionproblem property)": [[346, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueIntegerSelectionProblem.decn_space"]], "decn_space_lower (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvalueintegerselectionproblem property)": [[346, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueIntegerSelectionProblem.decn_space_lower"]], "decn_space_upper (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvalueintegerselectionproblem property)": [[346, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueIntegerSelectionProblem.decn_space_upper"]], "elementwise (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvalueintegerselectionproblem property)": [[346, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueIntegerSelectionProblem.elementwise"]], "elementwise_func (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvalueintegerselectionproblem property)": [[346, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueIntegerSelectionProblem.elementwise_func"]], "elementwise_runner (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvalueintegerselectionproblem property)": [[346, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueIntegerSelectionProblem.elementwise_runner"]], "eqcv_trans (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvalueintegerselectionproblem property)": [[346, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueIntegerSelectionProblem.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvalueintegerselectionproblem property)": [[346, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueIntegerSelectionProblem.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvalueintegerselectionproblem property)": [[346, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueIntegerSelectionProblem.eqcv_wt"]], "evalfn() (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvalueintegerselectionproblem method)": [[346, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueIntegerSelectionProblem.evalfn"]], "exclude_from_serialization (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvalueintegerselectionproblem property)": [[346, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueIntegerSelectionProblem.exclude_from_serialization"]], "ineqcv_trans (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvalueintegerselectionproblem property)": [[346, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueIntegerSelectionProblem.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvalueintegerselectionproblem property)": [[346, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueIntegerSelectionProblem.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvalueintegerselectionproblem property)": [[346, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueIntegerSelectionProblem.ineqcv_wt"]], "latentfn() (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvalueintegerselectionproblem method)": [[346, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueIntegerSelectionProblem.latentfn"]], "n_eq_constr (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvalueintegerselectionproblem property)": [[346, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueIntegerSelectionProblem.n_eq_constr"]], "n_ieq_constr (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvalueintegerselectionproblem property)": [[346, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueIntegerSelectionProblem.n_ieq_constr"]], "n_obj (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvalueintegerselectionproblem property)": [[346, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueIntegerSelectionProblem.n_obj"]], "n_var (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvalueintegerselectionproblem property)": [[346, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueIntegerSelectionProblem.n_var"]], "ndecn (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvalueintegerselectionproblem property)": [[346, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueIntegerSelectionProblem.ndecn"]], "neqcv (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvalueintegerselectionproblem property)": [[346, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueIntegerSelectionProblem.neqcv"]], "nineqcv (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvalueintegerselectionproblem property)": [[346, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueIntegerSelectionProblem.nineqcv"]], "nlatent (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvalueintegerselectionproblem property)": [[346, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueIntegerSelectionProblem.nlatent"]], "nobj (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvalueintegerselectionproblem property)": [[346, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueIntegerSelectionProblem.nobj"]], "obj_trans (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvalueintegerselectionproblem property)": [[346, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueIntegerSelectionProblem.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvalueintegerselectionproblem property)": [[346, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueIntegerSelectionProblem.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvalueintegerselectionproblem property)": [[346, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueIntegerSelectionProblem.obj_wt"]], "ohvmat (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvalueintegerselectionproblem property)": [[346, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueIntegerSelectionProblem.ohvmat"]], "replace_nan_values_by (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvalueintegerselectionproblem property)": [[346, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueIntegerSelectionProblem.replace_nan_values_by"]], "strict (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvalueintegerselectionproblem property)": [[346, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueIntegerSelectionProblem.strict"]], "vars (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvalueintegerselectionproblem property)": [[346, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueIntegerSelectionProblem.vars"]], "vtype (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvalueintegerselectionproblem property)": [[346, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueIntegerSelectionProblem.vtype"]], "xl (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvalueintegerselectionproblem property)": [[346, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueIntegerSelectionProblem.xl"]], "xu (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvalueintegerselectionproblem property)": [[346, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueIntegerSelectionProblem.xu"]], "optimalhaploidvaluerealselectionproblem (class in pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem)": [[347, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueRealSelectionProblem"]], "callback (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvaluerealselectionproblem property)": [[347, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueRealSelectionProblem.callback"]], "data (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvaluerealselectionproblem property)": [[347, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueRealSelectionProblem.data"]], "decn_space (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvaluerealselectionproblem property)": [[347, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueRealSelectionProblem.decn_space"]], "decn_space_lower (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvaluerealselectionproblem property)": [[347, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueRealSelectionProblem.decn_space_lower"]], "decn_space_upper (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvaluerealselectionproblem property)": [[347, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueRealSelectionProblem.decn_space_upper"]], "elementwise (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvaluerealselectionproblem property)": [[347, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueRealSelectionProblem.elementwise"]], "elementwise_func (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvaluerealselectionproblem property)": [[347, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueRealSelectionProblem.elementwise_func"]], "elementwise_runner (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvaluerealselectionproblem property)": [[347, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueRealSelectionProblem.elementwise_runner"]], "eqcv_trans (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvaluerealselectionproblem property)": [[347, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueRealSelectionProblem.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvaluerealselectionproblem property)": [[347, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueRealSelectionProblem.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvaluerealselectionproblem property)": [[347, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueRealSelectionProblem.eqcv_wt"]], "evalfn() (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvaluerealselectionproblem method)": [[347, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueRealSelectionProblem.evalfn"]], "exclude_from_serialization (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvaluerealselectionproblem property)": [[347, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueRealSelectionProblem.exclude_from_serialization"]], "ineqcv_trans (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvaluerealselectionproblem property)": [[347, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueRealSelectionProblem.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvaluerealselectionproblem property)": [[347, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueRealSelectionProblem.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvaluerealselectionproblem property)": [[347, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueRealSelectionProblem.ineqcv_wt"]], "latentfn() (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvaluerealselectionproblem method)": [[347, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueRealSelectionProblem.latentfn"]], "n_eq_constr (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvaluerealselectionproblem property)": [[347, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueRealSelectionProblem.n_eq_constr"]], "n_ieq_constr (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvaluerealselectionproblem property)": [[347, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueRealSelectionProblem.n_ieq_constr"]], "n_obj (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvaluerealselectionproblem property)": [[347, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueRealSelectionProblem.n_obj"]], "n_var (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvaluerealselectionproblem property)": [[347, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueRealSelectionProblem.n_var"]], "ndecn (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvaluerealselectionproblem property)": [[347, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueRealSelectionProblem.ndecn"]], "neqcv (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvaluerealselectionproblem property)": [[347, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueRealSelectionProblem.neqcv"]], "nineqcv (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvaluerealselectionproblem property)": [[347, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueRealSelectionProblem.nineqcv"]], "nlatent (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvaluerealselectionproblem property)": [[347, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueRealSelectionProblem.nlatent"]], "nobj (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvaluerealselectionproblem property)": [[347, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueRealSelectionProblem.nobj"]], "obj_trans (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvaluerealselectionproblem property)": [[347, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueRealSelectionProblem.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvaluerealselectionproblem property)": [[347, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueRealSelectionProblem.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvaluerealselectionproblem property)": [[347, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueRealSelectionProblem.obj_wt"]], "ohvmat (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvaluerealselectionproblem property)": [[347, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueRealSelectionProblem.ohvmat"]], "replace_nan_values_by (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvaluerealselectionproblem property)": [[347, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueRealSelectionProblem.replace_nan_values_by"]], "strict (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvaluerealselectionproblem property)": [[347, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueRealSelectionProblem.strict"]], "vars (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvaluerealselectionproblem property)": [[347, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueRealSelectionProblem.vars"]], "vtype (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvaluerealselectionproblem property)": [[347, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueRealSelectionProblem.vtype"]], "xl (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvaluerealselectionproblem property)": [[347, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueRealSelectionProblem.xl"]], "xu (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvaluerealselectionproblem property)": [[347, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueRealSelectionProblem.xu"]], "optimalhaploidvalueselectionproblemmixin (class in pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem)": [[348, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueSelectionProblemMixin"]], "nlatent (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvalueselectionproblemmixin property)": [[348, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueSelectionProblemMixin.nlatent"]], "ohvmat (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvalueselectionproblemmixin property)": [[348, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueSelectionProblemMixin.ohvmat"]], "optimalhaploidvaluesubsetselectionproblem (class in pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem)": [[349, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueSubsetSelectionProblem"]], "callback (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvaluesubsetselectionproblem property)": [[349, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueSubsetSelectionProblem.callback"]], "data (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvaluesubsetselectionproblem property)": [[349, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueSubsetSelectionProblem.data"]], "decn_space (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvaluesubsetselectionproblem property)": [[349, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueSubsetSelectionProblem.decn_space"]], "decn_space_lower (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvaluesubsetselectionproblem property)": [[349, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueSubsetSelectionProblem.decn_space_lower"]], "decn_space_upper (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvaluesubsetselectionproblem property)": [[349, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueSubsetSelectionProblem.decn_space_upper"]], "elementwise (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvaluesubsetselectionproblem property)": [[349, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueSubsetSelectionProblem.elementwise"]], "elementwise_func (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvaluesubsetselectionproblem property)": [[349, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueSubsetSelectionProblem.elementwise_func"]], "elementwise_runner (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvaluesubsetselectionproblem property)": [[349, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueSubsetSelectionProblem.elementwise_runner"]], "eqcv_trans (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvaluesubsetselectionproblem property)": [[349, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueSubsetSelectionProblem.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvaluesubsetselectionproblem property)": [[349, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueSubsetSelectionProblem.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvaluesubsetselectionproblem property)": [[349, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueSubsetSelectionProblem.eqcv_wt"]], "evalfn() (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvaluesubsetselectionproblem method)": [[349, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueSubsetSelectionProblem.evalfn"]], "exclude_from_serialization (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvaluesubsetselectionproblem property)": [[349, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueSubsetSelectionProblem.exclude_from_serialization"]], "ineqcv_trans (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvaluesubsetselectionproblem property)": [[349, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueSubsetSelectionProblem.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvaluesubsetselectionproblem property)": [[349, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueSubsetSelectionProblem.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvaluesubsetselectionproblem property)": [[349, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueSubsetSelectionProblem.ineqcv_wt"]], "latentfn() (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvaluesubsetselectionproblem method)": [[349, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueSubsetSelectionProblem.latentfn"]], "n_eq_constr (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvaluesubsetselectionproblem property)": [[349, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueSubsetSelectionProblem.n_eq_constr"]], "n_ieq_constr (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvaluesubsetselectionproblem property)": [[349, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueSubsetSelectionProblem.n_ieq_constr"]], "n_obj (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvaluesubsetselectionproblem property)": [[349, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueSubsetSelectionProblem.n_obj"]], "n_var (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvaluesubsetselectionproblem property)": [[349, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueSubsetSelectionProblem.n_var"]], "ndecn (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvaluesubsetselectionproblem property)": [[349, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueSubsetSelectionProblem.ndecn"]], "neqcv (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvaluesubsetselectionproblem property)": [[349, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueSubsetSelectionProblem.neqcv"]], "nineqcv (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvaluesubsetselectionproblem property)": [[349, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueSubsetSelectionProblem.nineqcv"]], "nlatent (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvaluesubsetselectionproblem property)": [[349, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueSubsetSelectionProblem.nlatent"]], "nobj (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvaluesubsetselectionproblem property)": [[349, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueSubsetSelectionProblem.nobj"]], "obj_trans (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvaluesubsetselectionproblem property)": [[349, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueSubsetSelectionProblem.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvaluesubsetselectionproblem property)": [[349, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueSubsetSelectionProblem.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvaluesubsetselectionproblem property)": [[349, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueSubsetSelectionProblem.obj_wt"]], "ohvmat (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvaluesubsetselectionproblem property)": [[349, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueSubsetSelectionProblem.ohvmat"]], "replace_nan_values_by (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvaluesubsetselectionproblem property)": [[349, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueSubsetSelectionProblem.replace_nan_values_by"]], "strict (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvaluesubsetselectionproblem property)": [[349, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueSubsetSelectionProblem.strict"]], "vars (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvaluesubsetselectionproblem property)": [[349, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueSubsetSelectionProblem.vars"]], "vtype (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvaluesubsetselectionproblem property)": [[349, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueSubsetSelectionProblem.vtype"]], "xl (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvaluesubsetselectionproblem property)": [[349, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueSubsetSelectionProblem.xl"]], "xu (pybrops.breed.prot.sel.prob.optimalhaploidvalueselectionproblem.optimalhaploidvaluesubsetselectionproblem property)": [[349, "pybrops.breed.prot.sel.prob.OptimalHaploidValueSelectionProblem.OptimalHaploidValueSubsetSelectionProblem.xu"]], "pybrops.breed.prot.sel.prob.optimalpopulationvalueselectionproblem": [[350, "module-pybrops.breed.prot.sel.prob.OptimalPopulationValueSelectionProblem"]], "optimalpopulationvalueselectionproblemmixin (class in pybrops.breed.prot.sel.prob.optimalpopulationvalueselectionproblem)": [[351, "pybrops.breed.prot.sel.prob.OptimalPopulationValueSelectionProblem.OptimalPopulationValueSelectionProblemMixin"]], "haplomat (pybrops.breed.prot.sel.prob.optimalpopulationvalueselectionproblem.optimalpopulationvalueselectionproblemmixin property)": [[351, "pybrops.breed.prot.sel.prob.OptimalPopulationValueSelectionProblem.OptimalPopulationValueSelectionProblemMixin.haplomat"]], "nlatent (pybrops.breed.prot.sel.prob.optimalpopulationvalueselectionproblem.optimalpopulationvalueselectionproblemmixin property)": [[351, "pybrops.breed.prot.sel.prob.OptimalPopulationValueSelectionProblem.OptimalPopulationValueSelectionProblemMixin.nlatent"]], "ploidy (pybrops.breed.prot.sel.prob.optimalpopulationvalueselectionproblem.optimalpopulationvalueselectionproblemmixin property)": [[351, "pybrops.breed.prot.sel.prob.OptimalPopulationValueSelectionProblem.OptimalPopulationValueSelectionProblemMixin.ploidy"]], "optimalpopulationvaluesubsetselectionproblem (class in pybrops.breed.prot.sel.prob.optimalpopulationvalueselectionproblem)": [[352, "pybrops.breed.prot.sel.prob.OptimalPopulationValueSelectionProblem.OptimalPopulationValueSubsetSelectionProblem"]], "callback (pybrops.breed.prot.sel.prob.optimalpopulationvalueselectionproblem.optimalpopulationvaluesubsetselectionproblem property)": [[352, "pybrops.breed.prot.sel.prob.OptimalPopulationValueSelectionProblem.OptimalPopulationValueSubsetSelectionProblem.callback"]], "data (pybrops.breed.prot.sel.prob.optimalpopulationvalueselectionproblem.optimalpopulationvaluesubsetselectionproblem property)": [[352, "pybrops.breed.prot.sel.prob.OptimalPopulationValueSelectionProblem.OptimalPopulationValueSubsetSelectionProblem.data"]], "decn_space (pybrops.breed.prot.sel.prob.optimalpopulationvalueselectionproblem.optimalpopulationvaluesubsetselectionproblem property)": [[352, "pybrops.breed.prot.sel.prob.OptimalPopulationValueSelectionProblem.OptimalPopulationValueSubsetSelectionProblem.decn_space"]], "decn_space_lower (pybrops.breed.prot.sel.prob.optimalpopulationvalueselectionproblem.optimalpopulationvaluesubsetselectionproblem property)": [[352, "pybrops.breed.prot.sel.prob.OptimalPopulationValueSelectionProblem.OptimalPopulationValueSubsetSelectionProblem.decn_space_lower"]], "decn_space_upper (pybrops.breed.prot.sel.prob.optimalpopulationvalueselectionproblem.optimalpopulationvaluesubsetselectionproblem property)": [[352, "pybrops.breed.prot.sel.prob.OptimalPopulationValueSelectionProblem.OptimalPopulationValueSubsetSelectionProblem.decn_space_upper"]], "elementwise (pybrops.breed.prot.sel.prob.optimalpopulationvalueselectionproblem.optimalpopulationvaluesubsetselectionproblem property)": [[352, "pybrops.breed.prot.sel.prob.OptimalPopulationValueSelectionProblem.OptimalPopulationValueSubsetSelectionProblem.elementwise"]], "elementwise_func (pybrops.breed.prot.sel.prob.optimalpopulationvalueselectionproblem.optimalpopulationvaluesubsetselectionproblem property)": [[352, "pybrops.breed.prot.sel.prob.OptimalPopulationValueSelectionProblem.OptimalPopulationValueSubsetSelectionProblem.elementwise_func"]], "elementwise_runner (pybrops.breed.prot.sel.prob.optimalpopulationvalueselectionproblem.optimalpopulationvaluesubsetselectionproblem property)": [[352, "pybrops.breed.prot.sel.prob.OptimalPopulationValueSelectionProblem.OptimalPopulationValueSubsetSelectionProblem.elementwise_runner"]], "eqcv_trans (pybrops.breed.prot.sel.prob.optimalpopulationvalueselectionproblem.optimalpopulationvaluesubsetselectionproblem property)": [[352, "pybrops.breed.prot.sel.prob.OptimalPopulationValueSelectionProblem.OptimalPopulationValueSubsetSelectionProblem.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.prob.optimalpopulationvalueselectionproblem.optimalpopulationvaluesubsetselectionproblem property)": [[352, "pybrops.breed.prot.sel.prob.OptimalPopulationValueSelectionProblem.OptimalPopulationValueSubsetSelectionProblem.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.prob.optimalpopulationvalueselectionproblem.optimalpopulationvaluesubsetselectionproblem property)": [[352, "pybrops.breed.prot.sel.prob.OptimalPopulationValueSelectionProblem.OptimalPopulationValueSubsetSelectionProblem.eqcv_wt"]], "evalfn() (pybrops.breed.prot.sel.prob.optimalpopulationvalueselectionproblem.optimalpopulationvaluesubsetselectionproblem method)": [[352, "pybrops.breed.prot.sel.prob.OptimalPopulationValueSelectionProblem.OptimalPopulationValueSubsetSelectionProblem.evalfn"]], "exclude_from_serialization (pybrops.breed.prot.sel.prob.optimalpopulationvalueselectionproblem.optimalpopulationvaluesubsetselectionproblem property)": [[352, "pybrops.breed.prot.sel.prob.OptimalPopulationValueSelectionProblem.OptimalPopulationValueSubsetSelectionProblem.exclude_from_serialization"]], "haplomat (pybrops.breed.prot.sel.prob.optimalpopulationvalueselectionproblem.optimalpopulationvaluesubsetselectionproblem property)": [[352, "pybrops.breed.prot.sel.prob.OptimalPopulationValueSelectionProblem.OptimalPopulationValueSubsetSelectionProblem.haplomat"]], "ineqcv_trans (pybrops.breed.prot.sel.prob.optimalpopulationvalueselectionproblem.optimalpopulationvaluesubsetselectionproblem property)": [[352, "pybrops.breed.prot.sel.prob.OptimalPopulationValueSelectionProblem.OptimalPopulationValueSubsetSelectionProblem.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.prob.optimalpopulationvalueselectionproblem.optimalpopulationvaluesubsetselectionproblem property)": [[352, "pybrops.breed.prot.sel.prob.OptimalPopulationValueSelectionProblem.OptimalPopulationValueSubsetSelectionProblem.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.prob.optimalpopulationvalueselectionproblem.optimalpopulationvaluesubsetselectionproblem property)": [[352, "pybrops.breed.prot.sel.prob.OptimalPopulationValueSelectionProblem.OptimalPopulationValueSubsetSelectionProblem.ineqcv_wt"]], "latentfn() (pybrops.breed.prot.sel.prob.optimalpopulationvalueselectionproblem.optimalpopulationvaluesubsetselectionproblem method)": [[352, "pybrops.breed.prot.sel.prob.OptimalPopulationValueSelectionProblem.OptimalPopulationValueSubsetSelectionProblem.latentfn"]], "n_eq_constr (pybrops.breed.prot.sel.prob.optimalpopulationvalueselectionproblem.optimalpopulationvaluesubsetselectionproblem property)": [[352, "pybrops.breed.prot.sel.prob.OptimalPopulationValueSelectionProblem.OptimalPopulationValueSubsetSelectionProblem.n_eq_constr"]], "n_ieq_constr (pybrops.breed.prot.sel.prob.optimalpopulationvalueselectionproblem.optimalpopulationvaluesubsetselectionproblem property)": [[352, "pybrops.breed.prot.sel.prob.OptimalPopulationValueSelectionProblem.OptimalPopulationValueSubsetSelectionProblem.n_ieq_constr"]], "n_obj (pybrops.breed.prot.sel.prob.optimalpopulationvalueselectionproblem.optimalpopulationvaluesubsetselectionproblem property)": [[352, "pybrops.breed.prot.sel.prob.OptimalPopulationValueSelectionProblem.OptimalPopulationValueSubsetSelectionProblem.n_obj"]], "n_var (pybrops.breed.prot.sel.prob.optimalpopulationvalueselectionproblem.optimalpopulationvaluesubsetselectionproblem property)": [[352, "pybrops.breed.prot.sel.prob.OptimalPopulationValueSelectionProblem.OptimalPopulationValueSubsetSelectionProblem.n_var"]], "ndecn (pybrops.breed.prot.sel.prob.optimalpopulationvalueselectionproblem.optimalpopulationvaluesubsetselectionproblem property)": [[352, "pybrops.breed.prot.sel.prob.OptimalPopulationValueSelectionProblem.OptimalPopulationValueSubsetSelectionProblem.ndecn"]], "neqcv (pybrops.breed.prot.sel.prob.optimalpopulationvalueselectionproblem.optimalpopulationvaluesubsetselectionproblem property)": [[352, "pybrops.breed.prot.sel.prob.OptimalPopulationValueSelectionProblem.OptimalPopulationValueSubsetSelectionProblem.neqcv"]], "nineqcv (pybrops.breed.prot.sel.prob.optimalpopulationvalueselectionproblem.optimalpopulationvaluesubsetselectionproblem property)": [[352, "pybrops.breed.prot.sel.prob.OptimalPopulationValueSelectionProblem.OptimalPopulationValueSubsetSelectionProblem.nineqcv"]], "nlatent (pybrops.breed.prot.sel.prob.optimalpopulationvalueselectionproblem.optimalpopulationvaluesubsetselectionproblem property)": [[352, "pybrops.breed.prot.sel.prob.OptimalPopulationValueSelectionProblem.OptimalPopulationValueSubsetSelectionProblem.nlatent"]], "nobj (pybrops.breed.prot.sel.prob.optimalpopulationvalueselectionproblem.optimalpopulationvaluesubsetselectionproblem property)": [[352, "pybrops.breed.prot.sel.prob.OptimalPopulationValueSelectionProblem.OptimalPopulationValueSubsetSelectionProblem.nobj"]], "obj_trans (pybrops.breed.prot.sel.prob.optimalpopulationvalueselectionproblem.optimalpopulationvaluesubsetselectionproblem property)": [[352, "pybrops.breed.prot.sel.prob.OptimalPopulationValueSelectionProblem.OptimalPopulationValueSubsetSelectionProblem.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.prob.optimalpopulationvalueselectionproblem.optimalpopulationvaluesubsetselectionproblem property)": [[352, "pybrops.breed.prot.sel.prob.OptimalPopulationValueSelectionProblem.OptimalPopulationValueSubsetSelectionProblem.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.prob.optimalpopulationvalueselectionproblem.optimalpopulationvaluesubsetselectionproblem property)": [[352, "pybrops.breed.prot.sel.prob.OptimalPopulationValueSelectionProblem.OptimalPopulationValueSubsetSelectionProblem.obj_wt"]], "ploidy (pybrops.breed.prot.sel.prob.optimalpopulationvalueselectionproblem.optimalpopulationvaluesubsetselectionproblem property)": [[352, "pybrops.breed.prot.sel.prob.OptimalPopulationValueSelectionProblem.OptimalPopulationValueSubsetSelectionProblem.ploidy"]], "replace_nan_values_by (pybrops.breed.prot.sel.prob.optimalpopulationvalueselectionproblem.optimalpopulationvaluesubsetselectionproblem property)": [[352, "pybrops.breed.prot.sel.prob.OptimalPopulationValueSelectionProblem.OptimalPopulationValueSubsetSelectionProblem.replace_nan_values_by"]], "strict (pybrops.breed.prot.sel.prob.optimalpopulationvalueselectionproblem.optimalpopulationvaluesubsetselectionproblem property)": [[352, "pybrops.breed.prot.sel.prob.OptimalPopulationValueSelectionProblem.OptimalPopulationValueSubsetSelectionProblem.strict"]], "vars (pybrops.breed.prot.sel.prob.optimalpopulationvalueselectionproblem.optimalpopulationvaluesubsetselectionproblem property)": [[352, "pybrops.breed.prot.sel.prob.OptimalPopulationValueSelectionProblem.OptimalPopulationValueSubsetSelectionProblem.vars"]], "vtype (pybrops.breed.prot.sel.prob.optimalpopulationvalueselectionproblem.optimalpopulationvaluesubsetselectionproblem property)": [[352, "pybrops.breed.prot.sel.prob.OptimalPopulationValueSelectionProblem.OptimalPopulationValueSubsetSelectionProblem.vtype"]], "xl (pybrops.breed.prot.sel.prob.optimalpopulationvalueselectionproblem.optimalpopulationvaluesubsetselectionproblem property)": [[352, "pybrops.breed.prot.sel.prob.OptimalPopulationValueSelectionProblem.OptimalPopulationValueSubsetSelectionProblem.xl"]], "xu (pybrops.breed.prot.sel.prob.optimalpopulationvalueselectionproblem.optimalpopulationvaluesubsetselectionproblem property)": [[352, "pybrops.breed.prot.sel.prob.OptimalPopulationValueSelectionProblem.OptimalPopulationValueSubsetSelectionProblem.xu"]], "pybrops.breed.prot.sel.prob.randomselectionproblem": [[353, "module-pybrops.breed.prot.sel.prob.RandomSelectionProblem"]], "randombinaryselectionproblem (class in pybrops.breed.prot.sel.prob.randomselectionproblem)": [[354, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomBinarySelectionProblem"]], "callback (pybrops.breed.prot.sel.prob.randomselectionproblem.randombinaryselectionproblem property)": [[354, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomBinarySelectionProblem.callback"]], "data (pybrops.breed.prot.sel.prob.randomselectionproblem.randombinaryselectionproblem property)": [[354, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomBinarySelectionProblem.data"]], "decn_space (pybrops.breed.prot.sel.prob.randomselectionproblem.randombinaryselectionproblem property)": [[354, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomBinarySelectionProblem.decn_space"]], "decn_space_lower (pybrops.breed.prot.sel.prob.randomselectionproblem.randombinaryselectionproblem property)": [[354, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomBinarySelectionProblem.decn_space_lower"]], "decn_space_upper (pybrops.breed.prot.sel.prob.randomselectionproblem.randombinaryselectionproblem property)": [[354, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomBinarySelectionProblem.decn_space_upper"]], "elementwise (pybrops.breed.prot.sel.prob.randomselectionproblem.randombinaryselectionproblem property)": [[354, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomBinarySelectionProblem.elementwise"]], "elementwise_func (pybrops.breed.prot.sel.prob.randomselectionproblem.randombinaryselectionproblem property)": [[354, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomBinarySelectionProblem.elementwise_func"]], "elementwise_runner (pybrops.breed.prot.sel.prob.randomselectionproblem.randombinaryselectionproblem property)": [[354, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomBinarySelectionProblem.elementwise_runner"]], "eqcv_trans (pybrops.breed.prot.sel.prob.randomselectionproblem.randombinaryselectionproblem property)": [[354, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomBinarySelectionProblem.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.prob.randomselectionproblem.randombinaryselectionproblem property)": [[354, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomBinarySelectionProblem.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.prob.randomselectionproblem.randombinaryselectionproblem property)": [[354, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomBinarySelectionProblem.eqcv_wt"]], "evalfn() (pybrops.breed.prot.sel.prob.randomselectionproblem.randombinaryselectionproblem method)": [[354, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomBinarySelectionProblem.evalfn"]], "exclude_from_serialization (pybrops.breed.prot.sel.prob.randomselectionproblem.randombinaryselectionproblem property)": [[354, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomBinarySelectionProblem.exclude_from_serialization"]], "ineqcv_trans (pybrops.breed.prot.sel.prob.randomselectionproblem.randombinaryselectionproblem property)": [[354, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomBinarySelectionProblem.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.prob.randomselectionproblem.randombinaryselectionproblem property)": [[354, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomBinarySelectionProblem.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.prob.randomselectionproblem.randombinaryselectionproblem property)": [[354, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomBinarySelectionProblem.ineqcv_wt"]], "latentfn() (pybrops.breed.prot.sel.prob.randomselectionproblem.randombinaryselectionproblem method)": [[354, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomBinarySelectionProblem.latentfn"]], "n_eq_constr (pybrops.breed.prot.sel.prob.randomselectionproblem.randombinaryselectionproblem property)": [[354, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomBinarySelectionProblem.n_eq_constr"]], "n_ieq_constr (pybrops.breed.prot.sel.prob.randomselectionproblem.randombinaryselectionproblem property)": [[354, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomBinarySelectionProblem.n_ieq_constr"]], "n_obj (pybrops.breed.prot.sel.prob.randomselectionproblem.randombinaryselectionproblem property)": [[354, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomBinarySelectionProblem.n_obj"]], "n_var (pybrops.breed.prot.sel.prob.randomselectionproblem.randombinaryselectionproblem property)": [[354, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomBinarySelectionProblem.n_var"]], "ndecn (pybrops.breed.prot.sel.prob.randomselectionproblem.randombinaryselectionproblem property)": [[354, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomBinarySelectionProblem.ndecn"]], "neqcv (pybrops.breed.prot.sel.prob.randomselectionproblem.randombinaryselectionproblem property)": [[354, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomBinarySelectionProblem.neqcv"]], "nineqcv (pybrops.breed.prot.sel.prob.randomselectionproblem.randombinaryselectionproblem property)": [[354, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomBinarySelectionProblem.nineqcv"]], "nlatent (pybrops.breed.prot.sel.prob.randomselectionproblem.randombinaryselectionproblem property)": [[354, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomBinarySelectionProblem.nlatent"]], "nobj (pybrops.breed.prot.sel.prob.randomselectionproblem.randombinaryselectionproblem property)": [[354, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomBinarySelectionProblem.nobj"]], "obj_trans (pybrops.breed.prot.sel.prob.randomselectionproblem.randombinaryselectionproblem property)": [[354, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomBinarySelectionProblem.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.prob.randomselectionproblem.randombinaryselectionproblem property)": [[354, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomBinarySelectionProblem.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.prob.randomselectionproblem.randombinaryselectionproblem property)": [[354, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomBinarySelectionProblem.obj_wt"]], "rbv (pybrops.breed.prot.sel.prob.randomselectionproblem.randombinaryselectionproblem property)": [[354, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomBinarySelectionProblem.rbv"]], "replace_nan_values_by (pybrops.breed.prot.sel.prob.randomselectionproblem.randombinaryselectionproblem property)": [[354, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomBinarySelectionProblem.replace_nan_values_by"]], "strict (pybrops.breed.prot.sel.prob.randomselectionproblem.randombinaryselectionproblem property)": [[354, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomBinarySelectionProblem.strict"]], "vars (pybrops.breed.prot.sel.prob.randomselectionproblem.randombinaryselectionproblem property)": [[354, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomBinarySelectionProblem.vars"]], "vtype (pybrops.breed.prot.sel.prob.randomselectionproblem.randombinaryselectionproblem property)": [[354, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomBinarySelectionProblem.vtype"]], "xl (pybrops.breed.prot.sel.prob.randomselectionproblem.randombinaryselectionproblem property)": [[354, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomBinarySelectionProblem.xl"]], "xu (pybrops.breed.prot.sel.prob.randomselectionproblem.randombinaryselectionproblem property)": [[354, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomBinarySelectionProblem.xu"]], "randomintegerselectionproblem (class in pybrops.breed.prot.sel.prob.randomselectionproblem)": [[355, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomIntegerSelectionProblem"]], "callback (pybrops.breed.prot.sel.prob.randomselectionproblem.randomintegerselectionproblem property)": [[355, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomIntegerSelectionProblem.callback"]], "data (pybrops.breed.prot.sel.prob.randomselectionproblem.randomintegerselectionproblem property)": [[355, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomIntegerSelectionProblem.data"]], "decn_space (pybrops.breed.prot.sel.prob.randomselectionproblem.randomintegerselectionproblem property)": [[355, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomIntegerSelectionProblem.decn_space"]], "decn_space_lower (pybrops.breed.prot.sel.prob.randomselectionproblem.randomintegerselectionproblem property)": [[355, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomIntegerSelectionProblem.decn_space_lower"]], "decn_space_upper (pybrops.breed.prot.sel.prob.randomselectionproblem.randomintegerselectionproblem property)": [[355, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomIntegerSelectionProblem.decn_space_upper"]], "elementwise (pybrops.breed.prot.sel.prob.randomselectionproblem.randomintegerselectionproblem property)": [[355, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomIntegerSelectionProblem.elementwise"]], "elementwise_func (pybrops.breed.prot.sel.prob.randomselectionproblem.randomintegerselectionproblem property)": [[355, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomIntegerSelectionProblem.elementwise_func"]], "elementwise_runner (pybrops.breed.prot.sel.prob.randomselectionproblem.randomintegerselectionproblem property)": [[355, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomIntegerSelectionProblem.elementwise_runner"]], "eqcv_trans (pybrops.breed.prot.sel.prob.randomselectionproblem.randomintegerselectionproblem property)": [[355, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomIntegerSelectionProblem.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.prob.randomselectionproblem.randomintegerselectionproblem property)": [[355, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomIntegerSelectionProblem.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.prob.randomselectionproblem.randomintegerselectionproblem property)": [[355, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomIntegerSelectionProblem.eqcv_wt"]], "evalfn() (pybrops.breed.prot.sel.prob.randomselectionproblem.randomintegerselectionproblem method)": [[355, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomIntegerSelectionProblem.evalfn"]], "exclude_from_serialization (pybrops.breed.prot.sel.prob.randomselectionproblem.randomintegerselectionproblem property)": [[355, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomIntegerSelectionProblem.exclude_from_serialization"]], "ineqcv_trans (pybrops.breed.prot.sel.prob.randomselectionproblem.randomintegerselectionproblem property)": [[355, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomIntegerSelectionProblem.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.prob.randomselectionproblem.randomintegerselectionproblem property)": [[355, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomIntegerSelectionProblem.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.prob.randomselectionproblem.randomintegerselectionproblem property)": [[355, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomIntegerSelectionProblem.ineqcv_wt"]], "latentfn() (pybrops.breed.prot.sel.prob.randomselectionproblem.randomintegerselectionproblem method)": [[355, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomIntegerSelectionProblem.latentfn"]], "n_eq_constr (pybrops.breed.prot.sel.prob.randomselectionproblem.randomintegerselectionproblem property)": [[355, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomIntegerSelectionProblem.n_eq_constr"]], "n_ieq_constr (pybrops.breed.prot.sel.prob.randomselectionproblem.randomintegerselectionproblem property)": [[355, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomIntegerSelectionProblem.n_ieq_constr"]], "n_obj (pybrops.breed.prot.sel.prob.randomselectionproblem.randomintegerselectionproblem property)": [[355, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomIntegerSelectionProblem.n_obj"]], "n_var (pybrops.breed.prot.sel.prob.randomselectionproblem.randomintegerselectionproblem property)": [[355, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomIntegerSelectionProblem.n_var"]], "ndecn (pybrops.breed.prot.sel.prob.randomselectionproblem.randomintegerselectionproblem property)": [[355, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomIntegerSelectionProblem.ndecn"]], "neqcv (pybrops.breed.prot.sel.prob.randomselectionproblem.randomintegerselectionproblem property)": [[355, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomIntegerSelectionProblem.neqcv"]], "nineqcv (pybrops.breed.prot.sel.prob.randomselectionproblem.randomintegerselectionproblem property)": [[355, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomIntegerSelectionProblem.nineqcv"]], "nlatent (pybrops.breed.prot.sel.prob.randomselectionproblem.randomintegerselectionproblem property)": [[355, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomIntegerSelectionProblem.nlatent"]], "nobj (pybrops.breed.prot.sel.prob.randomselectionproblem.randomintegerselectionproblem property)": [[355, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomIntegerSelectionProblem.nobj"]], "obj_trans (pybrops.breed.prot.sel.prob.randomselectionproblem.randomintegerselectionproblem property)": [[355, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomIntegerSelectionProblem.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.prob.randomselectionproblem.randomintegerselectionproblem property)": [[355, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomIntegerSelectionProblem.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.prob.randomselectionproblem.randomintegerselectionproblem property)": [[355, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomIntegerSelectionProblem.obj_wt"]], "rbv (pybrops.breed.prot.sel.prob.randomselectionproblem.randomintegerselectionproblem property)": [[355, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomIntegerSelectionProblem.rbv"]], "replace_nan_values_by (pybrops.breed.prot.sel.prob.randomselectionproblem.randomintegerselectionproblem property)": [[355, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomIntegerSelectionProblem.replace_nan_values_by"]], "strict (pybrops.breed.prot.sel.prob.randomselectionproblem.randomintegerselectionproblem property)": [[355, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomIntegerSelectionProblem.strict"]], "vars (pybrops.breed.prot.sel.prob.randomselectionproblem.randomintegerselectionproblem property)": [[355, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomIntegerSelectionProblem.vars"]], "vtype (pybrops.breed.prot.sel.prob.randomselectionproblem.randomintegerselectionproblem property)": [[355, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomIntegerSelectionProblem.vtype"]], "xl (pybrops.breed.prot.sel.prob.randomselectionproblem.randomintegerselectionproblem property)": [[355, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomIntegerSelectionProblem.xl"]], "xu (pybrops.breed.prot.sel.prob.randomselectionproblem.randomintegerselectionproblem property)": [[355, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomIntegerSelectionProblem.xu"]], "randomrealselectionproblem (class in pybrops.breed.prot.sel.prob.randomselectionproblem)": [[356, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomRealSelectionProblem"]], "callback (pybrops.breed.prot.sel.prob.randomselectionproblem.randomrealselectionproblem property)": [[356, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomRealSelectionProblem.callback"]], "data (pybrops.breed.prot.sel.prob.randomselectionproblem.randomrealselectionproblem property)": [[356, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomRealSelectionProblem.data"]], "decn_space (pybrops.breed.prot.sel.prob.randomselectionproblem.randomrealselectionproblem property)": [[356, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomRealSelectionProblem.decn_space"]], "decn_space_lower (pybrops.breed.prot.sel.prob.randomselectionproblem.randomrealselectionproblem property)": [[356, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomRealSelectionProblem.decn_space_lower"]], "decn_space_upper (pybrops.breed.prot.sel.prob.randomselectionproblem.randomrealselectionproblem property)": [[356, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomRealSelectionProblem.decn_space_upper"]], "elementwise (pybrops.breed.prot.sel.prob.randomselectionproblem.randomrealselectionproblem property)": [[356, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomRealSelectionProblem.elementwise"]], "elementwise_func (pybrops.breed.prot.sel.prob.randomselectionproblem.randomrealselectionproblem property)": [[356, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomRealSelectionProblem.elementwise_func"]], "elementwise_runner (pybrops.breed.prot.sel.prob.randomselectionproblem.randomrealselectionproblem property)": [[356, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomRealSelectionProblem.elementwise_runner"]], "eqcv_trans (pybrops.breed.prot.sel.prob.randomselectionproblem.randomrealselectionproblem property)": [[356, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomRealSelectionProblem.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.prob.randomselectionproblem.randomrealselectionproblem property)": [[356, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomRealSelectionProblem.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.prob.randomselectionproblem.randomrealselectionproblem property)": [[356, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomRealSelectionProblem.eqcv_wt"]], "evalfn() (pybrops.breed.prot.sel.prob.randomselectionproblem.randomrealselectionproblem method)": [[356, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomRealSelectionProblem.evalfn"]], "exclude_from_serialization (pybrops.breed.prot.sel.prob.randomselectionproblem.randomrealselectionproblem property)": [[356, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomRealSelectionProblem.exclude_from_serialization"]], "ineqcv_trans (pybrops.breed.prot.sel.prob.randomselectionproblem.randomrealselectionproblem property)": [[356, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomRealSelectionProblem.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.prob.randomselectionproblem.randomrealselectionproblem property)": [[356, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomRealSelectionProblem.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.prob.randomselectionproblem.randomrealselectionproblem property)": [[356, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomRealSelectionProblem.ineqcv_wt"]], "latentfn() (pybrops.breed.prot.sel.prob.randomselectionproblem.randomrealselectionproblem method)": [[356, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomRealSelectionProblem.latentfn"]], "n_eq_constr (pybrops.breed.prot.sel.prob.randomselectionproblem.randomrealselectionproblem property)": [[356, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomRealSelectionProblem.n_eq_constr"]], "n_ieq_constr (pybrops.breed.prot.sel.prob.randomselectionproblem.randomrealselectionproblem property)": [[356, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomRealSelectionProblem.n_ieq_constr"]], "n_obj (pybrops.breed.prot.sel.prob.randomselectionproblem.randomrealselectionproblem property)": [[356, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomRealSelectionProblem.n_obj"]], "n_var (pybrops.breed.prot.sel.prob.randomselectionproblem.randomrealselectionproblem property)": [[356, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomRealSelectionProblem.n_var"]], "ndecn (pybrops.breed.prot.sel.prob.randomselectionproblem.randomrealselectionproblem property)": [[356, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomRealSelectionProblem.ndecn"]], "neqcv (pybrops.breed.prot.sel.prob.randomselectionproblem.randomrealselectionproblem property)": [[356, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomRealSelectionProblem.neqcv"]], "nineqcv (pybrops.breed.prot.sel.prob.randomselectionproblem.randomrealselectionproblem property)": [[356, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomRealSelectionProblem.nineqcv"]], "nlatent (pybrops.breed.prot.sel.prob.randomselectionproblem.randomrealselectionproblem property)": [[356, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomRealSelectionProblem.nlatent"]], "nobj (pybrops.breed.prot.sel.prob.randomselectionproblem.randomrealselectionproblem property)": [[356, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomRealSelectionProblem.nobj"]], "obj_trans (pybrops.breed.prot.sel.prob.randomselectionproblem.randomrealselectionproblem property)": [[356, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomRealSelectionProblem.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.prob.randomselectionproblem.randomrealselectionproblem property)": [[356, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomRealSelectionProblem.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.prob.randomselectionproblem.randomrealselectionproblem property)": [[356, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomRealSelectionProblem.obj_wt"]], "rbv (pybrops.breed.prot.sel.prob.randomselectionproblem.randomrealselectionproblem property)": [[356, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomRealSelectionProblem.rbv"]], "replace_nan_values_by (pybrops.breed.prot.sel.prob.randomselectionproblem.randomrealselectionproblem property)": [[356, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomRealSelectionProblem.replace_nan_values_by"]], "strict (pybrops.breed.prot.sel.prob.randomselectionproblem.randomrealselectionproblem property)": [[356, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomRealSelectionProblem.strict"]], "vars (pybrops.breed.prot.sel.prob.randomselectionproblem.randomrealselectionproblem property)": [[356, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomRealSelectionProblem.vars"]], "vtype (pybrops.breed.prot.sel.prob.randomselectionproblem.randomrealselectionproblem property)": [[356, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomRealSelectionProblem.vtype"]], "xl (pybrops.breed.prot.sel.prob.randomselectionproblem.randomrealselectionproblem property)": [[356, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomRealSelectionProblem.xl"]], "xu (pybrops.breed.prot.sel.prob.randomselectionproblem.randomrealselectionproblem property)": [[356, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomRealSelectionProblem.xu"]], "randomselectionproblemmixin (class in pybrops.breed.prot.sel.prob.randomselectionproblem)": [[357, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomSelectionProblemMixin"]], "nlatent (pybrops.breed.prot.sel.prob.randomselectionproblem.randomselectionproblemmixin property)": [[357, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomSelectionProblemMixin.nlatent"]], "rbv (pybrops.breed.prot.sel.prob.randomselectionproblem.randomselectionproblemmixin property)": [[357, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomSelectionProblemMixin.rbv"]], "randomsubsetselectionproblem (class in pybrops.breed.prot.sel.prob.randomselectionproblem)": [[358, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomSubsetSelectionProblem"]], "callback (pybrops.breed.prot.sel.prob.randomselectionproblem.randomsubsetselectionproblem property)": [[358, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomSubsetSelectionProblem.callback"]], "data (pybrops.breed.prot.sel.prob.randomselectionproblem.randomsubsetselectionproblem property)": [[358, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomSubsetSelectionProblem.data"]], "decn_space (pybrops.breed.prot.sel.prob.randomselectionproblem.randomsubsetselectionproblem property)": [[358, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomSubsetSelectionProblem.decn_space"]], "decn_space_lower (pybrops.breed.prot.sel.prob.randomselectionproblem.randomsubsetselectionproblem property)": [[358, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomSubsetSelectionProblem.decn_space_lower"]], "decn_space_upper (pybrops.breed.prot.sel.prob.randomselectionproblem.randomsubsetselectionproblem property)": [[358, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomSubsetSelectionProblem.decn_space_upper"]], "elementwise (pybrops.breed.prot.sel.prob.randomselectionproblem.randomsubsetselectionproblem property)": [[358, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomSubsetSelectionProblem.elementwise"]], "elementwise_func (pybrops.breed.prot.sel.prob.randomselectionproblem.randomsubsetselectionproblem property)": [[358, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomSubsetSelectionProblem.elementwise_func"]], "elementwise_runner (pybrops.breed.prot.sel.prob.randomselectionproblem.randomsubsetselectionproblem property)": [[358, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomSubsetSelectionProblem.elementwise_runner"]], "eqcv_trans (pybrops.breed.prot.sel.prob.randomselectionproblem.randomsubsetselectionproblem property)": [[358, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomSubsetSelectionProblem.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.prob.randomselectionproblem.randomsubsetselectionproblem property)": [[358, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomSubsetSelectionProblem.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.prob.randomselectionproblem.randomsubsetselectionproblem property)": [[358, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomSubsetSelectionProblem.eqcv_wt"]], "evalfn() (pybrops.breed.prot.sel.prob.randomselectionproblem.randomsubsetselectionproblem method)": [[358, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomSubsetSelectionProblem.evalfn"]], "exclude_from_serialization (pybrops.breed.prot.sel.prob.randomselectionproblem.randomsubsetselectionproblem property)": [[358, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomSubsetSelectionProblem.exclude_from_serialization"]], "ineqcv_trans (pybrops.breed.prot.sel.prob.randomselectionproblem.randomsubsetselectionproblem property)": [[358, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomSubsetSelectionProblem.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.prob.randomselectionproblem.randomsubsetselectionproblem property)": [[358, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomSubsetSelectionProblem.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.prob.randomselectionproblem.randomsubsetselectionproblem property)": [[358, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomSubsetSelectionProblem.ineqcv_wt"]], "latentfn() (pybrops.breed.prot.sel.prob.randomselectionproblem.randomsubsetselectionproblem method)": [[358, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomSubsetSelectionProblem.latentfn"]], "n_eq_constr (pybrops.breed.prot.sel.prob.randomselectionproblem.randomsubsetselectionproblem property)": [[358, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomSubsetSelectionProblem.n_eq_constr"]], "n_ieq_constr (pybrops.breed.prot.sel.prob.randomselectionproblem.randomsubsetselectionproblem property)": [[358, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomSubsetSelectionProblem.n_ieq_constr"]], "n_obj (pybrops.breed.prot.sel.prob.randomselectionproblem.randomsubsetselectionproblem property)": [[358, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomSubsetSelectionProblem.n_obj"]], "n_var (pybrops.breed.prot.sel.prob.randomselectionproblem.randomsubsetselectionproblem property)": [[358, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomSubsetSelectionProblem.n_var"]], "ndecn (pybrops.breed.prot.sel.prob.randomselectionproblem.randomsubsetselectionproblem property)": [[358, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomSubsetSelectionProblem.ndecn"]], "neqcv (pybrops.breed.prot.sel.prob.randomselectionproblem.randomsubsetselectionproblem property)": [[358, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomSubsetSelectionProblem.neqcv"]], "nineqcv (pybrops.breed.prot.sel.prob.randomselectionproblem.randomsubsetselectionproblem property)": [[358, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomSubsetSelectionProblem.nineqcv"]], "nlatent (pybrops.breed.prot.sel.prob.randomselectionproblem.randomsubsetselectionproblem property)": [[358, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomSubsetSelectionProblem.nlatent"]], "nobj (pybrops.breed.prot.sel.prob.randomselectionproblem.randomsubsetselectionproblem property)": [[358, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomSubsetSelectionProblem.nobj"]], "obj_trans (pybrops.breed.prot.sel.prob.randomselectionproblem.randomsubsetselectionproblem property)": [[358, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomSubsetSelectionProblem.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.prob.randomselectionproblem.randomsubsetselectionproblem property)": [[358, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomSubsetSelectionProblem.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.prob.randomselectionproblem.randomsubsetselectionproblem property)": [[358, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomSubsetSelectionProblem.obj_wt"]], "rbv (pybrops.breed.prot.sel.prob.randomselectionproblem.randomsubsetselectionproblem property)": [[358, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomSubsetSelectionProblem.rbv"]], "replace_nan_values_by (pybrops.breed.prot.sel.prob.randomselectionproblem.randomsubsetselectionproblem property)": [[358, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomSubsetSelectionProblem.replace_nan_values_by"]], "strict (pybrops.breed.prot.sel.prob.randomselectionproblem.randomsubsetselectionproblem property)": [[358, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomSubsetSelectionProblem.strict"]], "vars (pybrops.breed.prot.sel.prob.randomselectionproblem.randomsubsetselectionproblem property)": [[358, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomSubsetSelectionProblem.vars"]], "vtype (pybrops.breed.prot.sel.prob.randomselectionproblem.randomsubsetselectionproblem property)": [[358, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomSubsetSelectionProblem.vtype"]], "xl (pybrops.breed.prot.sel.prob.randomselectionproblem.randomsubsetselectionproblem property)": [[358, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomSubsetSelectionProblem.xl"]], "xu (pybrops.breed.prot.sel.prob.randomselectionproblem.randomsubsetselectionproblem property)": [[358, "pybrops.breed.prot.sel.prob.RandomSelectionProblem.RandomSubsetSelectionProblem.xu"]], "pybrops.breed.prot.sel.prob.reallookaheadgeneralizedweightedgenomicselectionproblem": [[359, "module-pybrops.breed.prot.sel.prob.RealLookAheadGeneralizedWeightedGenomicSelectionProblem"]], "reallookaheadgeneralizedweightedgenomicselectionproblem (class in pybrops.breed.prot.sel.prob.reallookaheadgeneralizedweightedgenomicselectionproblem)": [[360, "pybrops.breed.prot.sel.prob.RealLookAheadGeneralizedWeightedGenomicSelectionProblem.RealLookAheadGeneralizedWeightedGenomicSelectionProblem"]], "callback (pybrops.breed.prot.sel.prob.reallookaheadgeneralizedweightedgenomicselectionproblem.reallookaheadgeneralizedweightedgenomicselectionproblem property)": [[360, "pybrops.breed.prot.sel.prob.RealLookAheadGeneralizedWeightedGenomicSelectionProblem.RealLookAheadGeneralizedWeightedGenomicSelectionProblem.callback"]], "data (pybrops.breed.prot.sel.prob.reallookaheadgeneralizedweightedgenomicselectionproblem.reallookaheadgeneralizedweightedgenomicselectionproblem property)": [[360, "pybrops.breed.prot.sel.prob.RealLookAheadGeneralizedWeightedGenomicSelectionProblem.RealLookAheadGeneralizedWeightedGenomicSelectionProblem.data"]], "decn_space (pybrops.breed.prot.sel.prob.reallookaheadgeneralizedweightedgenomicselectionproblem.reallookaheadgeneralizedweightedgenomicselectionproblem property)": [[360, "pybrops.breed.prot.sel.prob.RealLookAheadGeneralizedWeightedGenomicSelectionProblem.RealLookAheadGeneralizedWeightedGenomicSelectionProblem.decn_space"]], "decn_space_lower (pybrops.breed.prot.sel.prob.reallookaheadgeneralizedweightedgenomicselectionproblem.reallookaheadgeneralizedweightedgenomicselectionproblem property)": [[360, "pybrops.breed.prot.sel.prob.RealLookAheadGeneralizedWeightedGenomicSelectionProblem.RealLookAheadGeneralizedWeightedGenomicSelectionProblem.decn_space_lower"]], "decn_space_upper (pybrops.breed.prot.sel.prob.reallookaheadgeneralizedweightedgenomicselectionproblem.reallookaheadgeneralizedweightedgenomicselectionproblem property)": [[360, "pybrops.breed.prot.sel.prob.RealLookAheadGeneralizedWeightedGenomicSelectionProblem.RealLookAheadGeneralizedWeightedGenomicSelectionProblem.decn_space_upper"]], "elementwise (pybrops.breed.prot.sel.prob.reallookaheadgeneralizedweightedgenomicselectionproblem.reallookaheadgeneralizedweightedgenomicselectionproblem property)": [[360, "pybrops.breed.prot.sel.prob.RealLookAheadGeneralizedWeightedGenomicSelectionProblem.RealLookAheadGeneralizedWeightedGenomicSelectionProblem.elementwise"]], "elementwise_func (pybrops.breed.prot.sel.prob.reallookaheadgeneralizedweightedgenomicselectionproblem.reallookaheadgeneralizedweightedgenomicselectionproblem property)": [[360, "pybrops.breed.prot.sel.prob.RealLookAheadGeneralizedWeightedGenomicSelectionProblem.RealLookAheadGeneralizedWeightedGenomicSelectionProblem.elementwise_func"]], "elementwise_runner (pybrops.breed.prot.sel.prob.reallookaheadgeneralizedweightedgenomicselectionproblem.reallookaheadgeneralizedweightedgenomicselectionproblem property)": [[360, "pybrops.breed.prot.sel.prob.RealLookAheadGeneralizedWeightedGenomicSelectionProblem.RealLookAheadGeneralizedWeightedGenomicSelectionProblem.elementwise_runner"]], "eqcv_trans (pybrops.breed.prot.sel.prob.reallookaheadgeneralizedweightedgenomicselectionproblem.reallookaheadgeneralizedweightedgenomicselectionproblem property)": [[360, "pybrops.breed.prot.sel.prob.RealLookAheadGeneralizedWeightedGenomicSelectionProblem.RealLookAheadGeneralizedWeightedGenomicSelectionProblem.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.prob.reallookaheadgeneralizedweightedgenomicselectionproblem.reallookaheadgeneralizedweightedgenomicselectionproblem property)": [[360, "pybrops.breed.prot.sel.prob.RealLookAheadGeneralizedWeightedGenomicSelectionProblem.RealLookAheadGeneralizedWeightedGenomicSelectionProblem.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.prob.reallookaheadgeneralizedweightedgenomicselectionproblem.reallookaheadgeneralizedweightedgenomicselectionproblem property)": [[360, "pybrops.breed.prot.sel.prob.RealLookAheadGeneralizedWeightedGenomicSelectionProblem.RealLookAheadGeneralizedWeightedGenomicSelectionProblem.eqcv_wt"]], "evalfn() (pybrops.breed.prot.sel.prob.reallookaheadgeneralizedweightedgenomicselectionproblem.reallookaheadgeneralizedweightedgenomicselectionproblem method)": [[360, "pybrops.breed.prot.sel.prob.RealLookAheadGeneralizedWeightedGenomicSelectionProblem.RealLookAheadGeneralizedWeightedGenomicSelectionProblem.evalfn"]], "exclude_from_serialization (pybrops.breed.prot.sel.prob.reallookaheadgeneralizedweightedgenomicselectionproblem.reallookaheadgeneralizedweightedgenomicselectionproblem property)": [[360, "pybrops.breed.prot.sel.prob.RealLookAheadGeneralizedWeightedGenomicSelectionProblem.RealLookAheadGeneralizedWeightedGenomicSelectionProblem.exclude_from_serialization"]], "fndr_algmod (pybrops.breed.prot.sel.prob.reallookaheadgeneralizedweightedgenomicselectionproblem.reallookaheadgeneralizedweightedgenomicselectionproblem property)": [[360, "pybrops.breed.prot.sel.prob.RealLookAheadGeneralizedWeightedGenomicSelectionProblem.RealLookAheadGeneralizedWeightedGenomicSelectionProblem.fndr_algmod"]], "fndr_pgmat (pybrops.breed.prot.sel.prob.reallookaheadgeneralizedweightedgenomicselectionproblem.reallookaheadgeneralizedweightedgenomicselectionproblem property)": [[360, "pybrops.breed.prot.sel.prob.RealLookAheadGeneralizedWeightedGenomicSelectionProblem.RealLookAheadGeneralizedWeightedGenomicSelectionProblem.fndr_pgmat"]], "ineqcv_trans (pybrops.breed.prot.sel.prob.reallookaheadgeneralizedweightedgenomicselectionproblem.reallookaheadgeneralizedweightedgenomicselectionproblem property)": [[360, "pybrops.breed.prot.sel.prob.RealLookAheadGeneralizedWeightedGenomicSelectionProblem.RealLookAheadGeneralizedWeightedGenomicSelectionProblem.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.prob.reallookaheadgeneralizedweightedgenomicselectionproblem.reallookaheadgeneralizedweightedgenomicselectionproblem property)": [[360, "pybrops.breed.prot.sel.prob.RealLookAheadGeneralizedWeightedGenomicSelectionProblem.RealLookAheadGeneralizedWeightedGenomicSelectionProblem.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.prob.reallookaheadgeneralizedweightedgenomicselectionproblem.reallookaheadgeneralizedweightedgenomicselectionproblem property)": [[360, "pybrops.breed.prot.sel.prob.RealLookAheadGeneralizedWeightedGenomicSelectionProblem.RealLookAheadGeneralizedWeightedGenomicSelectionProblem.ineqcv_wt"]], "latentfn() (pybrops.breed.prot.sel.prob.reallookaheadgeneralizedweightedgenomicselectionproblem.reallookaheadgeneralizedweightedgenomicselectionproblem method)": [[360, "pybrops.breed.prot.sel.prob.RealLookAheadGeneralizedWeightedGenomicSelectionProblem.RealLookAheadGeneralizedWeightedGenomicSelectionProblem.latentfn"]], "mtprot (pybrops.breed.prot.sel.prob.reallookaheadgeneralizedweightedgenomicselectionproblem.reallookaheadgeneralizedweightedgenomicselectionproblem property)": [[360, "pybrops.breed.prot.sel.prob.RealLookAheadGeneralizedWeightedGenomicSelectionProblem.RealLookAheadGeneralizedWeightedGenomicSelectionProblem.mtprot"]], "n_eq_constr (pybrops.breed.prot.sel.prob.reallookaheadgeneralizedweightedgenomicselectionproblem.reallookaheadgeneralizedweightedgenomicselectionproblem property)": [[360, "pybrops.breed.prot.sel.prob.RealLookAheadGeneralizedWeightedGenomicSelectionProblem.RealLookAheadGeneralizedWeightedGenomicSelectionProblem.n_eq_constr"]], "n_ieq_constr (pybrops.breed.prot.sel.prob.reallookaheadgeneralizedweightedgenomicselectionproblem.reallookaheadgeneralizedweightedgenomicselectionproblem property)": [[360, "pybrops.breed.prot.sel.prob.RealLookAheadGeneralizedWeightedGenomicSelectionProblem.RealLookAheadGeneralizedWeightedGenomicSelectionProblem.n_ieq_constr"]], "n_obj (pybrops.breed.prot.sel.prob.reallookaheadgeneralizedweightedgenomicselectionproblem.reallookaheadgeneralizedweightedgenomicselectionproblem property)": [[360, "pybrops.breed.prot.sel.prob.RealLookAheadGeneralizedWeightedGenomicSelectionProblem.RealLookAheadGeneralizedWeightedGenomicSelectionProblem.n_obj"]], "n_var (pybrops.breed.prot.sel.prob.reallookaheadgeneralizedweightedgenomicselectionproblem.reallookaheadgeneralizedweightedgenomicselectionproblem property)": [[360, "pybrops.breed.prot.sel.prob.RealLookAheadGeneralizedWeightedGenomicSelectionProblem.RealLookAheadGeneralizedWeightedGenomicSelectionProblem.n_var"]], "ncross (pybrops.breed.prot.sel.prob.reallookaheadgeneralizedweightedgenomicselectionproblem.reallookaheadgeneralizedweightedgenomicselectionproblem property)": [[360, "pybrops.breed.prot.sel.prob.RealLookAheadGeneralizedWeightedGenomicSelectionProblem.RealLookAheadGeneralizedWeightedGenomicSelectionProblem.ncross"]], "ndecn (pybrops.breed.prot.sel.prob.reallookaheadgeneralizedweightedgenomicselectionproblem.reallookaheadgeneralizedweightedgenomicselectionproblem property)": [[360, "pybrops.breed.prot.sel.prob.RealLookAheadGeneralizedWeightedGenomicSelectionProblem.RealLookAheadGeneralizedWeightedGenomicSelectionProblem.ndecn"]], "neqcv (pybrops.breed.prot.sel.prob.reallookaheadgeneralizedweightedgenomicselectionproblem.reallookaheadgeneralizedweightedgenomicselectionproblem property)": [[360, "pybrops.breed.prot.sel.prob.RealLookAheadGeneralizedWeightedGenomicSelectionProblem.RealLookAheadGeneralizedWeightedGenomicSelectionProblem.neqcv"]], "nineqcv (pybrops.breed.prot.sel.prob.reallookaheadgeneralizedweightedgenomicselectionproblem.reallookaheadgeneralizedweightedgenomicselectionproblem property)": [[360, "pybrops.breed.prot.sel.prob.RealLookAheadGeneralizedWeightedGenomicSelectionProblem.RealLookAheadGeneralizedWeightedGenomicSelectionProblem.nineqcv"]], "nlatent (pybrops.breed.prot.sel.prob.reallookaheadgeneralizedweightedgenomicselectionproblem.reallookaheadgeneralizedweightedgenomicselectionproblem property)": [[360, "pybrops.breed.prot.sel.prob.RealLookAheadGeneralizedWeightedGenomicSelectionProblem.RealLookAheadGeneralizedWeightedGenomicSelectionProblem.nlatent"]], "nobj (pybrops.breed.prot.sel.prob.reallookaheadgeneralizedweightedgenomicselectionproblem.reallookaheadgeneralizedweightedgenomicselectionproblem property)": [[360, "pybrops.breed.prot.sel.prob.RealLookAheadGeneralizedWeightedGenomicSelectionProblem.RealLookAheadGeneralizedWeightedGenomicSelectionProblem.nobj"]], "nparent (pybrops.breed.prot.sel.prob.reallookaheadgeneralizedweightedgenomicselectionproblem.reallookaheadgeneralizedweightedgenomicselectionproblem property)": [[360, "pybrops.breed.prot.sel.prob.RealLookAheadGeneralizedWeightedGenomicSelectionProblem.RealLookAheadGeneralizedWeightedGenomicSelectionProblem.nparent"]], "nprogeny (pybrops.breed.prot.sel.prob.reallookaheadgeneralizedweightedgenomicselectionproblem.reallookaheadgeneralizedweightedgenomicselectionproblem property)": [[360, "pybrops.breed.prot.sel.prob.RealLookAheadGeneralizedWeightedGenomicSelectionProblem.RealLookAheadGeneralizedWeightedGenomicSelectionProblem.nprogeny"]], "nsimul (pybrops.breed.prot.sel.prob.reallookaheadgeneralizedweightedgenomicselectionproblem.reallookaheadgeneralizedweightedgenomicselectionproblem property)": [[360, "pybrops.breed.prot.sel.prob.RealLookAheadGeneralizedWeightedGenomicSelectionProblem.RealLookAheadGeneralizedWeightedGenomicSelectionProblem.nsimul"]], "obj_trans (pybrops.breed.prot.sel.prob.reallookaheadgeneralizedweightedgenomicselectionproblem.reallookaheadgeneralizedweightedgenomicselectionproblem property)": [[360, "pybrops.breed.prot.sel.prob.RealLookAheadGeneralizedWeightedGenomicSelectionProblem.RealLookAheadGeneralizedWeightedGenomicSelectionProblem.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.prob.reallookaheadgeneralizedweightedgenomicselectionproblem.reallookaheadgeneralizedweightedgenomicselectionproblem property)": [[360, "pybrops.breed.prot.sel.prob.RealLookAheadGeneralizedWeightedGenomicSelectionProblem.RealLookAheadGeneralizedWeightedGenomicSelectionProblem.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.prob.reallookaheadgeneralizedweightedgenomicselectionproblem.reallookaheadgeneralizedweightedgenomicselectionproblem property)": [[360, "pybrops.breed.prot.sel.prob.RealLookAheadGeneralizedWeightedGenomicSelectionProblem.RealLookAheadGeneralizedWeightedGenomicSelectionProblem.obj_wt"]], "replace_nan_values_by (pybrops.breed.prot.sel.prob.reallookaheadgeneralizedweightedgenomicselectionproblem.reallookaheadgeneralizedweightedgenomicselectionproblem property)": [[360, "pybrops.breed.prot.sel.prob.RealLookAheadGeneralizedWeightedGenomicSelectionProblem.RealLookAheadGeneralizedWeightedGenomicSelectionProblem.replace_nan_values_by"]], "strict (pybrops.breed.prot.sel.prob.reallookaheadgeneralizedweightedgenomicselectionproblem.reallookaheadgeneralizedweightedgenomicselectionproblem property)": [[360, "pybrops.breed.prot.sel.prob.RealLookAheadGeneralizedWeightedGenomicSelectionProblem.RealLookAheadGeneralizedWeightedGenomicSelectionProblem.strict"]], "vars (pybrops.breed.prot.sel.prob.reallookaheadgeneralizedweightedgenomicselectionproblem.reallookaheadgeneralizedweightedgenomicselectionproblem property)": [[360, "pybrops.breed.prot.sel.prob.RealLookAheadGeneralizedWeightedGenomicSelectionProblem.RealLookAheadGeneralizedWeightedGenomicSelectionProblem.vars"]], "vtype (pybrops.breed.prot.sel.prob.reallookaheadgeneralizedweightedgenomicselectionproblem.reallookaheadgeneralizedweightedgenomicselectionproblem property)": [[360, "pybrops.breed.prot.sel.prob.RealLookAheadGeneralizedWeightedGenomicSelectionProblem.RealLookAheadGeneralizedWeightedGenomicSelectionProblem.vtype"]], "xl (pybrops.breed.prot.sel.prob.reallookaheadgeneralizedweightedgenomicselectionproblem.reallookaheadgeneralizedweightedgenomicselectionproblem property)": [[360, "pybrops.breed.prot.sel.prob.RealLookAheadGeneralizedWeightedGenomicSelectionProblem.RealLookAheadGeneralizedWeightedGenomicSelectionProblem.xl"]], "xu (pybrops.breed.prot.sel.prob.reallookaheadgeneralizedweightedgenomicselectionproblem.reallookaheadgeneralizedweightedgenomicselectionproblem property)": [[360, "pybrops.breed.prot.sel.prob.RealLookAheadGeneralizedWeightedGenomicSelectionProblem.RealLookAheadGeneralizedWeightedGenomicSelectionProblem.xu"]], "pybrops.breed.prot.sel.prob.realmateselectionproblem": [[361, "module-pybrops.breed.prot.sel.prob.RealMateSelectionProblem"]], "realmateselectionproblem (class in pybrops.breed.prot.sel.prob.realmateselectionproblem)": [[362, "pybrops.breed.prot.sel.prob.RealMateSelectionProblem.RealMateSelectionProblem"]], "callback (pybrops.breed.prot.sel.prob.realmateselectionproblem.realmateselectionproblem property)": [[362, "pybrops.breed.prot.sel.prob.RealMateSelectionProblem.RealMateSelectionProblem.callback"]], "data (pybrops.breed.prot.sel.prob.realmateselectionproblem.realmateselectionproblem property)": [[362, "pybrops.breed.prot.sel.prob.RealMateSelectionProblem.RealMateSelectionProblem.data"]], "decn_space (pybrops.breed.prot.sel.prob.realmateselectionproblem.realmateselectionproblem property)": [[362, "pybrops.breed.prot.sel.prob.RealMateSelectionProblem.RealMateSelectionProblem.decn_space"]], "decn_space_lower (pybrops.breed.prot.sel.prob.realmateselectionproblem.realmateselectionproblem property)": [[362, "pybrops.breed.prot.sel.prob.RealMateSelectionProblem.RealMateSelectionProblem.decn_space_lower"]], "decn_space_upper (pybrops.breed.prot.sel.prob.realmateselectionproblem.realmateselectionproblem property)": [[362, "pybrops.breed.prot.sel.prob.RealMateSelectionProblem.RealMateSelectionProblem.decn_space_upper"]], "decn_space_xmap (pybrops.breed.prot.sel.prob.realmateselectionproblem.realmateselectionproblem property)": [[362, "pybrops.breed.prot.sel.prob.RealMateSelectionProblem.RealMateSelectionProblem.decn_space_xmap"]], "elementwise (pybrops.breed.prot.sel.prob.realmateselectionproblem.realmateselectionproblem property)": [[362, "pybrops.breed.prot.sel.prob.RealMateSelectionProblem.RealMateSelectionProblem.elementwise"]], "elementwise_func (pybrops.breed.prot.sel.prob.realmateselectionproblem.realmateselectionproblem property)": [[362, "pybrops.breed.prot.sel.prob.RealMateSelectionProblem.RealMateSelectionProblem.elementwise_func"]], "elementwise_runner (pybrops.breed.prot.sel.prob.realmateselectionproblem.realmateselectionproblem property)": [[362, "pybrops.breed.prot.sel.prob.RealMateSelectionProblem.RealMateSelectionProblem.elementwise_runner"]], "eqcv_trans (pybrops.breed.prot.sel.prob.realmateselectionproblem.realmateselectionproblem property)": [[362, "pybrops.breed.prot.sel.prob.RealMateSelectionProblem.RealMateSelectionProblem.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.prob.realmateselectionproblem.realmateselectionproblem property)": [[362, "pybrops.breed.prot.sel.prob.RealMateSelectionProblem.RealMateSelectionProblem.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.prob.realmateselectionproblem.realmateselectionproblem property)": [[362, "pybrops.breed.prot.sel.prob.RealMateSelectionProblem.RealMateSelectionProblem.eqcv_wt"]], "evalfn() (pybrops.breed.prot.sel.prob.realmateselectionproblem.realmateselectionproblem method)": [[362, "pybrops.breed.prot.sel.prob.RealMateSelectionProblem.RealMateSelectionProblem.evalfn"]], "exclude_from_serialization (pybrops.breed.prot.sel.prob.realmateselectionproblem.realmateselectionproblem property)": [[362, "pybrops.breed.prot.sel.prob.RealMateSelectionProblem.RealMateSelectionProblem.exclude_from_serialization"]], "ineqcv_trans (pybrops.breed.prot.sel.prob.realmateselectionproblem.realmateselectionproblem property)": [[362, "pybrops.breed.prot.sel.prob.RealMateSelectionProblem.RealMateSelectionProblem.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.prob.realmateselectionproblem.realmateselectionproblem property)": [[362, "pybrops.breed.prot.sel.prob.RealMateSelectionProblem.RealMateSelectionProblem.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.prob.realmateselectionproblem.realmateselectionproblem property)": [[362, "pybrops.breed.prot.sel.prob.RealMateSelectionProblem.RealMateSelectionProblem.ineqcv_wt"]], "latentfn() (pybrops.breed.prot.sel.prob.realmateselectionproblem.realmateselectionproblem method)": [[362, "pybrops.breed.prot.sel.prob.RealMateSelectionProblem.RealMateSelectionProblem.latentfn"]], "n_eq_constr (pybrops.breed.prot.sel.prob.realmateselectionproblem.realmateselectionproblem property)": [[362, "pybrops.breed.prot.sel.prob.RealMateSelectionProblem.RealMateSelectionProblem.n_eq_constr"]], "n_ieq_constr (pybrops.breed.prot.sel.prob.realmateselectionproblem.realmateselectionproblem property)": [[362, "pybrops.breed.prot.sel.prob.RealMateSelectionProblem.RealMateSelectionProblem.n_ieq_constr"]], "n_obj (pybrops.breed.prot.sel.prob.realmateselectionproblem.realmateselectionproblem property)": [[362, "pybrops.breed.prot.sel.prob.RealMateSelectionProblem.RealMateSelectionProblem.n_obj"]], "n_var (pybrops.breed.prot.sel.prob.realmateselectionproblem.realmateselectionproblem property)": [[362, "pybrops.breed.prot.sel.prob.RealMateSelectionProblem.RealMateSelectionProblem.n_var"]], "ndecn (pybrops.breed.prot.sel.prob.realmateselectionproblem.realmateselectionproblem property)": [[362, "pybrops.breed.prot.sel.prob.RealMateSelectionProblem.RealMateSelectionProblem.ndecn"]], "neqcv (pybrops.breed.prot.sel.prob.realmateselectionproblem.realmateselectionproblem property)": [[362, "pybrops.breed.prot.sel.prob.RealMateSelectionProblem.RealMateSelectionProblem.neqcv"]], "nineqcv (pybrops.breed.prot.sel.prob.realmateselectionproblem.realmateselectionproblem property)": [[362, "pybrops.breed.prot.sel.prob.RealMateSelectionProblem.RealMateSelectionProblem.nineqcv"]], "nlatent (pybrops.breed.prot.sel.prob.realmateselectionproblem.realmateselectionproblem property)": [[362, "pybrops.breed.prot.sel.prob.RealMateSelectionProblem.RealMateSelectionProblem.nlatent"]], "nobj (pybrops.breed.prot.sel.prob.realmateselectionproblem.realmateselectionproblem property)": [[362, "pybrops.breed.prot.sel.prob.RealMateSelectionProblem.RealMateSelectionProblem.nobj"]], "obj_trans (pybrops.breed.prot.sel.prob.realmateselectionproblem.realmateselectionproblem property)": [[362, "pybrops.breed.prot.sel.prob.RealMateSelectionProblem.RealMateSelectionProblem.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.prob.realmateselectionproblem.realmateselectionproblem property)": [[362, "pybrops.breed.prot.sel.prob.RealMateSelectionProblem.RealMateSelectionProblem.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.prob.realmateselectionproblem.realmateselectionproblem property)": [[362, "pybrops.breed.prot.sel.prob.RealMateSelectionProblem.RealMateSelectionProblem.obj_wt"]], "replace_nan_values_by (pybrops.breed.prot.sel.prob.realmateselectionproblem.realmateselectionproblem property)": [[362, "pybrops.breed.prot.sel.prob.RealMateSelectionProblem.RealMateSelectionProblem.replace_nan_values_by"]], "strict (pybrops.breed.prot.sel.prob.realmateselectionproblem.realmateselectionproblem property)": [[362, "pybrops.breed.prot.sel.prob.RealMateSelectionProblem.RealMateSelectionProblem.strict"]], "vars (pybrops.breed.prot.sel.prob.realmateselectionproblem.realmateselectionproblem property)": [[362, "pybrops.breed.prot.sel.prob.RealMateSelectionProblem.RealMateSelectionProblem.vars"]], "vtype (pybrops.breed.prot.sel.prob.realmateselectionproblem.realmateselectionproblem property)": [[362, "pybrops.breed.prot.sel.prob.RealMateSelectionProblem.RealMateSelectionProblem.vtype"]], "xl (pybrops.breed.prot.sel.prob.realmateselectionproblem.realmateselectionproblem property)": [[362, "pybrops.breed.prot.sel.prob.RealMateSelectionProblem.RealMateSelectionProblem.xl"]], "xu (pybrops.breed.prot.sel.prob.realmateselectionproblem.realmateselectionproblem property)": [[362, "pybrops.breed.prot.sel.prob.RealMateSelectionProblem.RealMateSelectionProblem.xu"]], "pybrops.breed.prot.sel.prob.realselectionproblem": [[363, "module-pybrops.breed.prot.sel.prob.RealSelectionProblem"]], "realselectionproblem (class in pybrops.breed.prot.sel.prob.realselectionproblem)": [[364, "pybrops.breed.prot.sel.prob.RealSelectionProblem.RealSelectionProblem"]], "callback (pybrops.breed.prot.sel.prob.realselectionproblem.realselectionproblem property)": [[364, "pybrops.breed.prot.sel.prob.RealSelectionProblem.RealSelectionProblem.callback"]], "data (pybrops.breed.prot.sel.prob.realselectionproblem.realselectionproblem property)": [[364, "pybrops.breed.prot.sel.prob.RealSelectionProblem.RealSelectionProblem.data"]], "decn_space (pybrops.breed.prot.sel.prob.realselectionproblem.realselectionproblem property)": [[364, "pybrops.breed.prot.sel.prob.RealSelectionProblem.RealSelectionProblem.decn_space"]], "decn_space_lower (pybrops.breed.prot.sel.prob.realselectionproblem.realselectionproblem property)": [[364, "pybrops.breed.prot.sel.prob.RealSelectionProblem.RealSelectionProblem.decn_space_lower"]], "decn_space_upper (pybrops.breed.prot.sel.prob.realselectionproblem.realselectionproblem property)": [[364, "pybrops.breed.prot.sel.prob.RealSelectionProblem.RealSelectionProblem.decn_space_upper"]], "elementwise (pybrops.breed.prot.sel.prob.realselectionproblem.realselectionproblem property)": [[364, "pybrops.breed.prot.sel.prob.RealSelectionProblem.RealSelectionProblem.elementwise"]], "elementwise_func (pybrops.breed.prot.sel.prob.realselectionproblem.realselectionproblem property)": [[364, "pybrops.breed.prot.sel.prob.RealSelectionProblem.RealSelectionProblem.elementwise_func"]], "elementwise_runner (pybrops.breed.prot.sel.prob.realselectionproblem.realselectionproblem property)": [[364, "pybrops.breed.prot.sel.prob.RealSelectionProblem.RealSelectionProblem.elementwise_runner"]], "eqcv_trans (pybrops.breed.prot.sel.prob.realselectionproblem.realselectionproblem property)": [[364, "pybrops.breed.prot.sel.prob.RealSelectionProblem.RealSelectionProblem.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.prob.realselectionproblem.realselectionproblem property)": [[364, "pybrops.breed.prot.sel.prob.RealSelectionProblem.RealSelectionProblem.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.prob.realselectionproblem.realselectionproblem property)": [[364, "pybrops.breed.prot.sel.prob.RealSelectionProblem.RealSelectionProblem.eqcv_wt"]], "evalfn() (pybrops.breed.prot.sel.prob.realselectionproblem.realselectionproblem method)": [[364, "pybrops.breed.prot.sel.prob.RealSelectionProblem.RealSelectionProblem.evalfn"]], "exclude_from_serialization (pybrops.breed.prot.sel.prob.realselectionproblem.realselectionproblem property)": [[364, "pybrops.breed.prot.sel.prob.RealSelectionProblem.RealSelectionProblem.exclude_from_serialization"]], "ineqcv_trans (pybrops.breed.prot.sel.prob.realselectionproblem.realselectionproblem property)": [[364, "pybrops.breed.prot.sel.prob.RealSelectionProblem.RealSelectionProblem.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.prob.realselectionproblem.realselectionproblem property)": [[364, "pybrops.breed.prot.sel.prob.RealSelectionProblem.RealSelectionProblem.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.prob.realselectionproblem.realselectionproblem property)": [[364, "pybrops.breed.prot.sel.prob.RealSelectionProblem.RealSelectionProblem.ineqcv_wt"]], "latentfn() (pybrops.breed.prot.sel.prob.realselectionproblem.realselectionproblem method)": [[364, "pybrops.breed.prot.sel.prob.RealSelectionProblem.RealSelectionProblem.latentfn"]], "n_eq_constr (pybrops.breed.prot.sel.prob.realselectionproblem.realselectionproblem property)": [[364, "pybrops.breed.prot.sel.prob.RealSelectionProblem.RealSelectionProblem.n_eq_constr"]], "n_ieq_constr (pybrops.breed.prot.sel.prob.realselectionproblem.realselectionproblem property)": [[364, "pybrops.breed.prot.sel.prob.RealSelectionProblem.RealSelectionProblem.n_ieq_constr"]], "n_obj (pybrops.breed.prot.sel.prob.realselectionproblem.realselectionproblem property)": [[364, "pybrops.breed.prot.sel.prob.RealSelectionProblem.RealSelectionProblem.n_obj"]], "n_var (pybrops.breed.prot.sel.prob.realselectionproblem.realselectionproblem property)": [[364, "pybrops.breed.prot.sel.prob.RealSelectionProblem.RealSelectionProblem.n_var"]], "ndecn (pybrops.breed.prot.sel.prob.realselectionproblem.realselectionproblem property)": [[364, "pybrops.breed.prot.sel.prob.RealSelectionProblem.RealSelectionProblem.ndecn"]], "neqcv (pybrops.breed.prot.sel.prob.realselectionproblem.realselectionproblem property)": [[364, "pybrops.breed.prot.sel.prob.RealSelectionProblem.RealSelectionProblem.neqcv"]], "nineqcv (pybrops.breed.prot.sel.prob.realselectionproblem.realselectionproblem property)": [[364, "pybrops.breed.prot.sel.prob.RealSelectionProblem.RealSelectionProblem.nineqcv"]], "nlatent (pybrops.breed.prot.sel.prob.realselectionproblem.realselectionproblem property)": [[364, "pybrops.breed.prot.sel.prob.RealSelectionProblem.RealSelectionProblem.nlatent"]], "nobj (pybrops.breed.prot.sel.prob.realselectionproblem.realselectionproblem property)": [[364, "pybrops.breed.prot.sel.prob.RealSelectionProblem.RealSelectionProblem.nobj"]], "obj_trans (pybrops.breed.prot.sel.prob.realselectionproblem.realselectionproblem property)": [[364, "pybrops.breed.prot.sel.prob.RealSelectionProblem.RealSelectionProblem.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.prob.realselectionproblem.realselectionproblem property)": [[364, "pybrops.breed.prot.sel.prob.RealSelectionProblem.RealSelectionProblem.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.prob.realselectionproblem.realselectionproblem property)": [[364, "pybrops.breed.prot.sel.prob.RealSelectionProblem.RealSelectionProblem.obj_wt"]], "replace_nan_values_by (pybrops.breed.prot.sel.prob.realselectionproblem.realselectionproblem property)": [[364, "pybrops.breed.prot.sel.prob.RealSelectionProblem.RealSelectionProblem.replace_nan_values_by"]], "strict (pybrops.breed.prot.sel.prob.realselectionproblem.realselectionproblem property)": [[364, "pybrops.breed.prot.sel.prob.RealSelectionProblem.RealSelectionProblem.strict"]], "vars (pybrops.breed.prot.sel.prob.realselectionproblem.realselectionproblem property)": [[364, "pybrops.breed.prot.sel.prob.RealSelectionProblem.RealSelectionProblem.vars"]], "vtype (pybrops.breed.prot.sel.prob.realselectionproblem.realselectionproblem property)": [[364, "pybrops.breed.prot.sel.prob.RealSelectionProblem.RealSelectionProblem.vtype"]], "xl (pybrops.breed.prot.sel.prob.realselectionproblem.realselectionproblem property)": [[364, "pybrops.breed.prot.sel.prob.RealSelectionProblem.RealSelectionProblem.xl"]], "xu (pybrops.breed.prot.sel.prob.realselectionproblem.realselectionproblem property)": [[364, "pybrops.breed.prot.sel.prob.RealSelectionProblem.RealSelectionProblem.xu"]], "check_is_realselectionproblem() (in module pybrops.breed.prot.sel.prob.realselectionproblem)": [[365, "pybrops.breed.prot.sel.prob.RealSelectionProblem.check_is_RealSelectionProblem"]], "pybrops.breed.prot.sel.prob.selectionproblem": [[366, "module-pybrops.breed.prot.sel.prob.SelectionProblem"]], "selectionproblem (class in pybrops.breed.prot.sel.prob.selectionproblem)": [[367, "pybrops.breed.prot.sel.prob.SelectionProblem.SelectionProblem"]], "callback (pybrops.breed.prot.sel.prob.selectionproblem.selectionproblem property)": [[367, "pybrops.breed.prot.sel.prob.SelectionProblem.SelectionProblem.callback"]], "data (pybrops.breed.prot.sel.prob.selectionproblem.selectionproblem property)": [[367, "pybrops.breed.prot.sel.prob.SelectionProblem.SelectionProblem.data"]], "decn_space (pybrops.breed.prot.sel.prob.selectionproblem.selectionproblem property)": [[367, "pybrops.breed.prot.sel.prob.SelectionProblem.SelectionProblem.decn_space"]], "decn_space_lower (pybrops.breed.prot.sel.prob.selectionproblem.selectionproblem property)": [[367, "pybrops.breed.prot.sel.prob.SelectionProblem.SelectionProblem.decn_space_lower"]], "decn_space_upper (pybrops.breed.prot.sel.prob.selectionproblem.selectionproblem property)": [[367, "pybrops.breed.prot.sel.prob.SelectionProblem.SelectionProblem.decn_space_upper"]], "elementwise (pybrops.breed.prot.sel.prob.selectionproblem.selectionproblem property)": [[367, "pybrops.breed.prot.sel.prob.SelectionProblem.SelectionProblem.elementwise"]], "elementwise_func (pybrops.breed.prot.sel.prob.selectionproblem.selectionproblem property)": [[367, "pybrops.breed.prot.sel.prob.SelectionProblem.SelectionProblem.elementwise_func"]], "elementwise_runner (pybrops.breed.prot.sel.prob.selectionproblem.selectionproblem property)": [[367, "pybrops.breed.prot.sel.prob.SelectionProblem.SelectionProblem.elementwise_runner"]], "eqcv_trans (pybrops.breed.prot.sel.prob.selectionproblem.selectionproblem property)": [[367, "pybrops.breed.prot.sel.prob.SelectionProblem.SelectionProblem.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.prob.selectionproblem.selectionproblem property)": [[367, "pybrops.breed.prot.sel.prob.SelectionProblem.SelectionProblem.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.prob.selectionproblem.selectionproblem property)": [[367, "pybrops.breed.prot.sel.prob.SelectionProblem.SelectionProblem.eqcv_wt"]], "evalfn() (pybrops.breed.prot.sel.prob.selectionproblem.selectionproblem method)": [[367, "pybrops.breed.prot.sel.prob.SelectionProblem.SelectionProblem.evalfn"]], "exclude_from_serialization (pybrops.breed.prot.sel.prob.selectionproblem.selectionproblem property)": [[367, "pybrops.breed.prot.sel.prob.SelectionProblem.SelectionProblem.exclude_from_serialization"]], "ineqcv_trans (pybrops.breed.prot.sel.prob.selectionproblem.selectionproblem property)": [[367, "pybrops.breed.prot.sel.prob.SelectionProblem.SelectionProblem.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.prob.selectionproblem.selectionproblem property)": [[367, "pybrops.breed.prot.sel.prob.SelectionProblem.SelectionProblem.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.prob.selectionproblem.selectionproblem property)": [[367, "pybrops.breed.prot.sel.prob.SelectionProblem.SelectionProblem.ineqcv_wt"]], "latentfn() (pybrops.breed.prot.sel.prob.selectionproblem.selectionproblem method)": [[367, "pybrops.breed.prot.sel.prob.SelectionProblem.SelectionProblem.latentfn"]], "n_eq_constr (pybrops.breed.prot.sel.prob.selectionproblem.selectionproblem property)": [[367, "pybrops.breed.prot.sel.prob.SelectionProblem.SelectionProblem.n_eq_constr"]], "n_ieq_constr (pybrops.breed.prot.sel.prob.selectionproblem.selectionproblem property)": [[367, "pybrops.breed.prot.sel.prob.SelectionProblem.SelectionProblem.n_ieq_constr"]], "n_obj (pybrops.breed.prot.sel.prob.selectionproblem.selectionproblem property)": [[367, "pybrops.breed.prot.sel.prob.SelectionProblem.SelectionProblem.n_obj"]], "n_var (pybrops.breed.prot.sel.prob.selectionproblem.selectionproblem property)": [[367, "pybrops.breed.prot.sel.prob.SelectionProblem.SelectionProblem.n_var"]], "ndecn (pybrops.breed.prot.sel.prob.selectionproblem.selectionproblem property)": [[367, "pybrops.breed.prot.sel.prob.SelectionProblem.SelectionProblem.ndecn"]], "neqcv (pybrops.breed.prot.sel.prob.selectionproblem.selectionproblem property)": [[367, "pybrops.breed.prot.sel.prob.SelectionProblem.SelectionProblem.neqcv"]], "nineqcv (pybrops.breed.prot.sel.prob.selectionproblem.selectionproblem property)": [[367, "pybrops.breed.prot.sel.prob.SelectionProblem.SelectionProblem.nineqcv"]], "nlatent (pybrops.breed.prot.sel.prob.selectionproblem.selectionproblem property)": [[367, "pybrops.breed.prot.sel.prob.SelectionProblem.SelectionProblem.nlatent"]], "nobj (pybrops.breed.prot.sel.prob.selectionproblem.selectionproblem property)": [[367, "pybrops.breed.prot.sel.prob.SelectionProblem.SelectionProblem.nobj"]], "obj_trans (pybrops.breed.prot.sel.prob.selectionproblem.selectionproblem property)": [[367, "pybrops.breed.prot.sel.prob.SelectionProblem.SelectionProblem.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.prob.selectionproblem.selectionproblem property)": [[367, "pybrops.breed.prot.sel.prob.SelectionProblem.SelectionProblem.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.prob.selectionproblem.selectionproblem property)": [[367, "pybrops.breed.prot.sel.prob.SelectionProblem.SelectionProblem.obj_wt"]], "replace_nan_values_by (pybrops.breed.prot.sel.prob.selectionproblem.selectionproblem property)": [[367, "pybrops.breed.prot.sel.prob.SelectionProblem.SelectionProblem.replace_nan_values_by"]], "strict (pybrops.breed.prot.sel.prob.selectionproblem.selectionproblem property)": [[367, "pybrops.breed.prot.sel.prob.SelectionProblem.SelectionProblem.strict"]], "vars (pybrops.breed.prot.sel.prob.selectionproblem.selectionproblem property)": [[367, "pybrops.breed.prot.sel.prob.SelectionProblem.SelectionProblem.vars"]], "vtype (pybrops.breed.prot.sel.prob.selectionproblem.selectionproblem property)": [[367, "pybrops.breed.prot.sel.prob.SelectionProblem.SelectionProblem.vtype"]], "xl (pybrops.breed.prot.sel.prob.selectionproblem.selectionproblem property)": [[367, "pybrops.breed.prot.sel.prob.SelectionProblem.SelectionProblem.xl"]], "xu (pybrops.breed.prot.sel.prob.selectionproblem.selectionproblem property)": [[367, "pybrops.breed.prot.sel.prob.SelectionProblem.SelectionProblem.xu"]], "check_is_selectionproblem() (in module pybrops.breed.prot.sel.prob.selectionproblem)": [[368, "pybrops.breed.prot.sel.prob.SelectionProblem.check_is_SelectionProblem"]], "pybrops.breed.prot.sel.prob.subsetmateselectionproblem": [[369, "module-pybrops.breed.prot.sel.prob.SubsetMateSelectionProblem"]], "subsetmateselectionproblem (class in pybrops.breed.prot.sel.prob.subsetmateselectionproblem)": [[370, "pybrops.breed.prot.sel.prob.SubsetMateSelectionProblem.SubsetMateSelectionProblem"]], "callback (pybrops.breed.prot.sel.prob.subsetmateselectionproblem.subsetmateselectionproblem property)": [[370, "pybrops.breed.prot.sel.prob.SubsetMateSelectionProblem.SubsetMateSelectionProblem.callback"]], "data (pybrops.breed.prot.sel.prob.subsetmateselectionproblem.subsetmateselectionproblem property)": [[370, "pybrops.breed.prot.sel.prob.SubsetMateSelectionProblem.SubsetMateSelectionProblem.data"]], "decn_space (pybrops.breed.prot.sel.prob.subsetmateselectionproblem.subsetmateselectionproblem property)": [[370, "pybrops.breed.prot.sel.prob.SubsetMateSelectionProblem.SubsetMateSelectionProblem.decn_space"]], "decn_space_lower (pybrops.breed.prot.sel.prob.subsetmateselectionproblem.subsetmateselectionproblem property)": [[370, "pybrops.breed.prot.sel.prob.SubsetMateSelectionProblem.SubsetMateSelectionProblem.decn_space_lower"]], "decn_space_upper (pybrops.breed.prot.sel.prob.subsetmateselectionproblem.subsetmateselectionproblem property)": [[370, "pybrops.breed.prot.sel.prob.SubsetMateSelectionProblem.SubsetMateSelectionProblem.decn_space_upper"]], "decn_space_xmap (pybrops.breed.prot.sel.prob.subsetmateselectionproblem.subsetmateselectionproblem property)": [[370, "pybrops.breed.prot.sel.prob.SubsetMateSelectionProblem.SubsetMateSelectionProblem.decn_space_xmap"]], "elementwise (pybrops.breed.prot.sel.prob.subsetmateselectionproblem.subsetmateselectionproblem property)": [[370, "pybrops.breed.prot.sel.prob.SubsetMateSelectionProblem.SubsetMateSelectionProblem.elementwise"]], "elementwise_func (pybrops.breed.prot.sel.prob.subsetmateselectionproblem.subsetmateselectionproblem property)": [[370, "pybrops.breed.prot.sel.prob.SubsetMateSelectionProblem.SubsetMateSelectionProblem.elementwise_func"]], "elementwise_runner (pybrops.breed.prot.sel.prob.subsetmateselectionproblem.subsetmateselectionproblem property)": [[370, "pybrops.breed.prot.sel.prob.SubsetMateSelectionProblem.SubsetMateSelectionProblem.elementwise_runner"]], "eqcv_trans (pybrops.breed.prot.sel.prob.subsetmateselectionproblem.subsetmateselectionproblem property)": [[370, "pybrops.breed.prot.sel.prob.SubsetMateSelectionProblem.SubsetMateSelectionProblem.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.prob.subsetmateselectionproblem.subsetmateselectionproblem property)": [[370, "pybrops.breed.prot.sel.prob.SubsetMateSelectionProblem.SubsetMateSelectionProblem.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.prob.subsetmateselectionproblem.subsetmateselectionproblem property)": [[370, "pybrops.breed.prot.sel.prob.SubsetMateSelectionProblem.SubsetMateSelectionProblem.eqcv_wt"]], "evalfn() (pybrops.breed.prot.sel.prob.subsetmateselectionproblem.subsetmateselectionproblem method)": [[370, "pybrops.breed.prot.sel.prob.SubsetMateSelectionProblem.SubsetMateSelectionProblem.evalfn"]], "exclude_from_serialization (pybrops.breed.prot.sel.prob.subsetmateselectionproblem.subsetmateselectionproblem property)": [[370, "pybrops.breed.prot.sel.prob.SubsetMateSelectionProblem.SubsetMateSelectionProblem.exclude_from_serialization"]], "ineqcv_trans (pybrops.breed.prot.sel.prob.subsetmateselectionproblem.subsetmateselectionproblem property)": [[370, "pybrops.breed.prot.sel.prob.SubsetMateSelectionProblem.SubsetMateSelectionProblem.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.prob.subsetmateselectionproblem.subsetmateselectionproblem property)": [[370, "pybrops.breed.prot.sel.prob.SubsetMateSelectionProblem.SubsetMateSelectionProblem.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.prob.subsetmateselectionproblem.subsetmateselectionproblem property)": [[370, "pybrops.breed.prot.sel.prob.SubsetMateSelectionProblem.SubsetMateSelectionProblem.ineqcv_wt"]], "latentfn() (pybrops.breed.prot.sel.prob.subsetmateselectionproblem.subsetmateselectionproblem method)": [[370, "pybrops.breed.prot.sel.prob.SubsetMateSelectionProblem.SubsetMateSelectionProblem.latentfn"]], "n_eq_constr (pybrops.breed.prot.sel.prob.subsetmateselectionproblem.subsetmateselectionproblem property)": [[370, "pybrops.breed.prot.sel.prob.SubsetMateSelectionProblem.SubsetMateSelectionProblem.n_eq_constr"]], "n_ieq_constr (pybrops.breed.prot.sel.prob.subsetmateselectionproblem.subsetmateselectionproblem property)": [[370, "pybrops.breed.prot.sel.prob.SubsetMateSelectionProblem.SubsetMateSelectionProblem.n_ieq_constr"]], "n_obj (pybrops.breed.prot.sel.prob.subsetmateselectionproblem.subsetmateselectionproblem property)": [[370, "pybrops.breed.prot.sel.prob.SubsetMateSelectionProblem.SubsetMateSelectionProblem.n_obj"]], "n_var (pybrops.breed.prot.sel.prob.subsetmateselectionproblem.subsetmateselectionproblem property)": [[370, "pybrops.breed.prot.sel.prob.SubsetMateSelectionProblem.SubsetMateSelectionProblem.n_var"]], "ndecn (pybrops.breed.prot.sel.prob.subsetmateselectionproblem.subsetmateselectionproblem property)": [[370, "pybrops.breed.prot.sel.prob.SubsetMateSelectionProblem.SubsetMateSelectionProblem.ndecn"]], "neqcv (pybrops.breed.prot.sel.prob.subsetmateselectionproblem.subsetmateselectionproblem property)": [[370, "pybrops.breed.prot.sel.prob.SubsetMateSelectionProblem.SubsetMateSelectionProblem.neqcv"]], "nineqcv (pybrops.breed.prot.sel.prob.subsetmateselectionproblem.subsetmateselectionproblem property)": [[370, "pybrops.breed.prot.sel.prob.SubsetMateSelectionProblem.SubsetMateSelectionProblem.nineqcv"]], "nlatent (pybrops.breed.prot.sel.prob.subsetmateselectionproblem.subsetmateselectionproblem property)": [[370, "pybrops.breed.prot.sel.prob.SubsetMateSelectionProblem.SubsetMateSelectionProblem.nlatent"]], "nobj (pybrops.breed.prot.sel.prob.subsetmateselectionproblem.subsetmateselectionproblem property)": [[370, "pybrops.breed.prot.sel.prob.SubsetMateSelectionProblem.SubsetMateSelectionProblem.nobj"]], "obj_trans (pybrops.breed.prot.sel.prob.subsetmateselectionproblem.subsetmateselectionproblem property)": [[370, "pybrops.breed.prot.sel.prob.SubsetMateSelectionProblem.SubsetMateSelectionProblem.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.prob.subsetmateselectionproblem.subsetmateselectionproblem property)": [[370, "pybrops.breed.prot.sel.prob.SubsetMateSelectionProblem.SubsetMateSelectionProblem.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.prob.subsetmateselectionproblem.subsetmateselectionproblem property)": [[370, "pybrops.breed.prot.sel.prob.SubsetMateSelectionProblem.SubsetMateSelectionProblem.obj_wt"]], "replace_nan_values_by (pybrops.breed.prot.sel.prob.subsetmateselectionproblem.subsetmateselectionproblem property)": [[370, "pybrops.breed.prot.sel.prob.SubsetMateSelectionProblem.SubsetMateSelectionProblem.replace_nan_values_by"]], "strict (pybrops.breed.prot.sel.prob.subsetmateselectionproblem.subsetmateselectionproblem property)": [[370, "pybrops.breed.prot.sel.prob.SubsetMateSelectionProblem.SubsetMateSelectionProblem.strict"]], "vars (pybrops.breed.prot.sel.prob.subsetmateselectionproblem.subsetmateselectionproblem property)": [[370, "pybrops.breed.prot.sel.prob.SubsetMateSelectionProblem.SubsetMateSelectionProblem.vars"]], "vtype (pybrops.breed.prot.sel.prob.subsetmateselectionproblem.subsetmateselectionproblem property)": [[370, "pybrops.breed.prot.sel.prob.SubsetMateSelectionProblem.SubsetMateSelectionProblem.vtype"]], "xl (pybrops.breed.prot.sel.prob.subsetmateselectionproblem.subsetmateselectionproblem property)": [[370, "pybrops.breed.prot.sel.prob.SubsetMateSelectionProblem.SubsetMateSelectionProblem.xl"]], "xu (pybrops.breed.prot.sel.prob.subsetmateselectionproblem.subsetmateselectionproblem property)": [[370, "pybrops.breed.prot.sel.prob.SubsetMateSelectionProblem.SubsetMateSelectionProblem.xu"]], "pybrops.breed.prot.sel.prob.subsetselectionproblem": [[371, "module-pybrops.breed.prot.sel.prob.SubsetSelectionProblem"]], "subsetselectionproblem (class in pybrops.breed.prot.sel.prob.subsetselectionproblem)": [[372, "pybrops.breed.prot.sel.prob.SubsetSelectionProblem.SubsetSelectionProblem"]], "callback (pybrops.breed.prot.sel.prob.subsetselectionproblem.subsetselectionproblem property)": [[372, "pybrops.breed.prot.sel.prob.SubsetSelectionProblem.SubsetSelectionProblem.callback"]], "data (pybrops.breed.prot.sel.prob.subsetselectionproblem.subsetselectionproblem property)": [[372, "pybrops.breed.prot.sel.prob.SubsetSelectionProblem.SubsetSelectionProblem.data"]], "decn_space (pybrops.breed.prot.sel.prob.subsetselectionproblem.subsetselectionproblem property)": [[372, "pybrops.breed.prot.sel.prob.SubsetSelectionProblem.SubsetSelectionProblem.decn_space"]], "decn_space_lower (pybrops.breed.prot.sel.prob.subsetselectionproblem.subsetselectionproblem property)": [[372, "pybrops.breed.prot.sel.prob.SubsetSelectionProblem.SubsetSelectionProblem.decn_space_lower"]], "decn_space_upper (pybrops.breed.prot.sel.prob.subsetselectionproblem.subsetselectionproblem property)": [[372, "pybrops.breed.prot.sel.prob.SubsetSelectionProblem.SubsetSelectionProblem.decn_space_upper"]], "elementwise (pybrops.breed.prot.sel.prob.subsetselectionproblem.subsetselectionproblem property)": [[372, "pybrops.breed.prot.sel.prob.SubsetSelectionProblem.SubsetSelectionProblem.elementwise"]], "elementwise_func (pybrops.breed.prot.sel.prob.subsetselectionproblem.subsetselectionproblem property)": [[372, "pybrops.breed.prot.sel.prob.SubsetSelectionProblem.SubsetSelectionProblem.elementwise_func"]], "elementwise_runner (pybrops.breed.prot.sel.prob.subsetselectionproblem.subsetselectionproblem property)": [[372, "pybrops.breed.prot.sel.prob.SubsetSelectionProblem.SubsetSelectionProblem.elementwise_runner"]], "eqcv_trans (pybrops.breed.prot.sel.prob.subsetselectionproblem.subsetselectionproblem property)": [[372, "pybrops.breed.prot.sel.prob.SubsetSelectionProblem.SubsetSelectionProblem.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.prob.subsetselectionproblem.subsetselectionproblem property)": [[372, "pybrops.breed.prot.sel.prob.SubsetSelectionProblem.SubsetSelectionProblem.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.prob.subsetselectionproblem.subsetselectionproblem property)": [[372, "pybrops.breed.prot.sel.prob.SubsetSelectionProblem.SubsetSelectionProblem.eqcv_wt"]], "evalfn() (pybrops.breed.prot.sel.prob.subsetselectionproblem.subsetselectionproblem method)": [[372, "pybrops.breed.prot.sel.prob.SubsetSelectionProblem.SubsetSelectionProblem.evalfn"]], "exclude_from_serialization (pybrops.breed.prot.sel.prob.subsetselectionproblem.subsetselectionproblem property)": [[372, "pybrops.breed.prot.sel.prob.SubsetSelectionProblem.SubsetSelectionProblem.exclude_from_serialization"]], "ineqcv_trans (pybrops.breed.prot.sel.prob.subsetselectionproblem.subsetselectionproblem property)": [[372, "pybrops.breed.prot.sel.prob.SubsetSelectionProblem.SubsetSelectionProblem.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.prob.subsetselectionproblem.subsetselectionproblem property)": [[372, "pybrops.breed.prot.sel.prob.SubsetSelectionProblem.SubsetSelectionProblem.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.prob.subsetselectionproblem.subsetselectionproblem property)": [[372, "pybrops.breed.prot.sel.prob.SubsetSelectionProblem.SubsetSelectionProblem.ineqcv_wt"]], "latentfn() (pybrops.breed.prot.sel.prob.subsetselectionproblem.subsetselectionproblem method)": [[372, "pybrops.breed.prot.sel.prob.SubsetSelectionProblem.SubsetSelectionProblem.latentfn"]], "n_eq_constr (pybrops.breed.prot.sel.prob.subsetselectionproblem.subsetselectionproblem property)": [[372, "pybrops.breed.prot.sel.prob.SubsetSelectionProblem.SubsetSelectionProblem.n_eq_constr"]], "n_ieq_constr (pybrops.breed.prot.sel.prob.subsetselectionproblem.subsetselectionproblem property)": [[372, "pybrops.breed.prot.sel.prob.SubsetSelectionProblem.SubsetSelectionProblem.n_ieq_constr"]], "n_obj (pybrops.breed.prot.sel.prob.subsetselectionproblem.subsetselectionproblem property)": [[372, "pybrops.breed.prot.sel.prob.SubsetSelectionProblem.SubsetSelectionProblem.n_obj"]], "n_var (pybrops.breed.prot.sel.prob.subsetselectionproblem.subsetselectionproblem property)": [[372, "pybrops.breed.prot.sel.prob.SubsetSelectionProblem.SubsetSelectionProblem.n_var"]], "ndecn (pybrops.breed.prot.sel.prob.subsetselectionproblem.subsetselectionproblem property)": [[372, "pybrops.breed.prot.sel.prob.SubsetSelectionProblem.SubsetSelectionProblem.ndecn"]], "neqcv (pybrops.breed.prot.sel.prob.subsetselectionproblem.subsetselectionproblem property)": [[372, "pybrops.breed.prot.sel.prob.SubsetSelectionProblem.SubsetSelectionProblem.neqcv"]], "nineqcv (pybrops.breed.prot.sel.prob.subsetselectionproblem.subsetselectionproblem property)": [[372, "pybrops.breed.prot.sel.prob.SubsetSelectionProblem.SubsetSelectionProblem.nineqcv"]], "nlatent (pybrops.breed.prot.sel.prob.subsetselectionproblem.subsetselectionproblem property)": [[372, "pybrops.breed.prot.sel.prob.SubsetSelectionProblem.SubsetSelectionProblem.nlatent"]], "nobj (pybrops.breed.prot.sel.prob.subsetselectionproblem.subsetselectionproblem property)": [[372, "pybrops.breed.prot.sel.prob.SubsetSelectionProblem.SubsetSelectionProblem.nobj"]], "obj_trans (pybrops.breed.prot.sel.prob.subsetselectionproblem.subsetselectionproblem property)": [[372, "pybrops.breed.prot.sel.prob.SubsetSelectionProblem.SubsetSelectionProblem.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.prob.subsetselectionproblem.subsetselectionproblem property)": [[372, "pybrops.breed.prot.sel.prob.SubsetSelectionProblem.SubsetSelectionProblem.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.prob.subsetselectionproblem.subsetselectionproblem property)": [[372, "pybrops.breed.prot.sel.prob.SubsetSelectionProblem.SubsetSelectionProblem.obj_wt"]], "replace_nan_values_by (pybrops.breed.prot.sel.prob.subsetselectionproblem.subsetselectionproblem property)": [[372, "pybrops.breed.prot.sel.prob.SubsetSelectionProblem.SubsetSelectionProblem.replace_nan_values_by"]], "strict (pybrops.breed.prot.sel.prob.subsetselectionproblem.subsetselectionproblem property)": [[372, "pybrops.breed.prot.sel.prob.SubsetSelectionProblem.SubsetSelectionProblem.strict"]], "vars (pybrops.breed.prot.sel.prob.subsetselectionproblem.subsetselectionproblem property)": [[372, "pybrops.breed.prot.sel.prob.SubsetSelectionProblem.SubsetSelectionProblem.vars"]], "vtype (pybrops.breed.prot.sel.prob.subsetselectionproblem.subsetselectionproblem property)": [[372, "pybrops.breed.prot.sel.prob.SubsetSelectionProblem.SubsetSelectionProblem.vtype"]], "xl (pybrops.breed.prot.sel.prob.subsetselectionproblem.subsetselectionproblem property)": [[372, "pybrops.breed.prot.sel.prob.SubsetSelectionProblem.SubsetSelectionProblem.xl"]], "xu (pybrops.breed.prot.sel.prob.subsetselectionproblem.subsetselectionproblem property)": [[372, "pybrops.breed.prot.sel.prob.SubsetSelectionProblem.SubsetSelectionProblem.xu"]], "check_is_subsetselectionproblem() (in module pybrops.breed.prot.sel.prob.subsetselectionproblem)": [[373, "pybrops.breed.prot.sel.prob.SubsetSelectionProblem.check_is_SubsetSelectionProblem"]], "pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem": [[374, "module-pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem"]], "usefulnesscriterionbinarymateselectionproblem (class in pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem)": [[375, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionBinaryMateSelectionProblem"]], "callback (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionbinarymateselectionproblem property)": [[375, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionBinaryMateSelectionProblem.callback"]], "data (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionbinarymateselectionproblem property)": [[375, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionBinaryMateSelectionProblem.data"]], "decn_space (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionbinarymateselectionproblem property)": [[375, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionBinaryMateSelectionProblem.decn_space"]], "decn_space_lower (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionbinarymateselectionproblem property)": [[375, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionBinaryMateSelectionProblem.decn_space_lower"]], "decn_space_upper (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionbinarymateselectionproblem property)": [[375, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionBinaryMateSelectionProblem.decn_space_upper"]], "decn_space_xmap (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionbinarymateselectionproblem property)": [[375, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionBinaryMateSelectionProblem.decn_space_xmap"]], "elementwise (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionbinarymateselectionproblem property)": [[375, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionBinaryMateSelectionProblem.elementwise"]], "elementwise_func (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionbinarymateselectionproblem property)": [[375, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionBinaryMateSelectionProblem.elementwise_func"]], "elementwise_runner (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionbinarymateselectionproblem property)": [[375, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionBinaryMateSelectionProblem.elementwise_runner"]], "eqcv_trans (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionbinarymateselectionproblem property)": [[375, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionBinaryMateSelectionProblem.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionbinarymateselectionproblem property)": [[375, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionBinaryMateSelectionProblem.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionbinarymateselectionproblem property)": [[375, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionBinaryMateSelectionProblem.eqcv_wt"]], "evalfn() (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionbinarymateselectionproblem method)": [[375, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionBinaryMateSelectionProblem.evalfn"]], "exclude_from_serialization (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionbinarymateselectionproblem property)": [[375, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionBinaryMateSelectionProblem.exclude_from_serialization"]], "ineqcv_trans (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionbinarymateselectionproblem property)": [[375, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionBinaryMateSelectionProblem.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionbinarymateselectionproblem property)": [[375, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionBinaryMateSelectionProblem.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionbinarymateselectionproblem property)": [[375, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionBinaryMateSelectionProblem.ineqcv_wt"]], "latentfn() (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionbinarymateselectionproblem method)": [[375, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionBinaryMateSelectionProblem.latentfn"]], "n_eq_constr (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionbinarymateselectionproblem property)": [[375, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionBinaryMateSelectionProblem.n_eq_constr"]], "n_ieq_constr (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionbinarymateselectionproblem property)": [[375, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionBinaryMateSelectionProblem.n_ieq_constr"]], "n_obj (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionbinarymateselectionproblem property)": [[375, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionBinaryMateSelectionProblem.n_obj"]], "n_var (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionbinarymateselectionproblem property)": [[375, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionBinaryMateSelectionProblem.n_var"]], "ndecn (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionbinarymateselectionproblem property)": [[375, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionBinaryMateSelectionProblem.ndecn"]], "neqcv (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionbinarymateselectionproblem property)": [[375, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionBinaryMateSelectionProblem.neqcv"]], "nineqcv (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionbinarymateselectionproblem property)": [[375, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionBinaryMateSelectionProblem.nineqcv"]], "nlatent (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionbinarymateselectionproblem property)": [[375, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionBinaryMateSelectionProblem.nlatent"]], "nobj (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionbinarymateselectionproblem property)": [[375, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionBinaryMateSelectionProblem.nobj"]], "obj_trans (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionbinarymateselectionproblem property)": [[375, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionBinaryMateSelectionProblem.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionbinarymateselectionproblem property)": [[375, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionBinaryMateSelectionProblem.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionbinarymateselectionproblem property)": [[375, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionBinaryMateSelectionProblem.obj_wt"]], "replace_nan_values_by (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionbinarymateselectionproblem property)": [[375, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionBinaryMateSelectionProblem.replace_nan_values_by"]], "strict (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionbinarymateselectionproblem property)": [[375, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionBinaryMateSelectionProblem.strict"]], "ucmat (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionbinarymateselectionproblem property)": [[375, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionBinaryMateSelectionProblem.ucmat"]], "vars (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionbinarymateselectionproblem property)": [[375, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionBinaryMateSelectionProblem.vars"]], "vtype (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionbinarymateselectionproblem property)": [[375, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionBinaryMateSelectionProblem.vtype"]], "xl (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionbinarymateselectionproblem property)": [[375, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionBinaryMateSelectionProblem.xl"]], "xu (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionbinarymateselectionproblem property)": [[375, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionBinaryMateSelectionProblem.xu"]], "usefulnesscriterionintegermateselectionproblem (class in pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem)": [[376, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionIntegerMateSelectionProblem"]], "callback (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionintegermateselectionproblem property)": [[376, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionIntegerMateSelectionProblem.callback"]], "data (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionintegermateselectionproblem property)": [[376, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionIntegerMateSelectionProblem.data"]], "decn_space (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionintegermateselectionproblem property)": [[376, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionIntegerMateSelectionProblem.decn_space"]], "decn_space_lower (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionintegermateselectionproblem property)": [[376, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionIntegerMateSelectionProblem.decn_space_lower"]], "decn_space_upper (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionintegermateselectionproblem property)": [[376, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionIntegerMateSelectionProblem.decn_space_upper"]], "decn_space_xmap (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionintegermateselectionproblem property)": [[376, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionIntegerMateSelectionProblem.decn_space_xmap"]], "elementwise (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionintegermateselectionproblem property)": [[376, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionIntegerMateSelectionProblem.elementwise"]], "elementwise_func (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionintegermateselectionproblem property)": [[376, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionIntegerMateSelectionProblem.elementwise_func"]], "elementwise_runner (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionintegermateselectionproblem property)": [[376, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionIntegerMateSelectionProblem.elementwise_runner"]], "eqcv_trans (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionintegermateselectionproblem property)": [[376, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionIntegerMateSelectionProblem.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionintegermateselectionproblem property)": [[376, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionIntegerMateSelectionProblem.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionintegermateselectionproblem property)": [[376, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionIntegerMateSelectionProblem.eqcv_wt"]], "evalfn() (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionintegermateselectionproblem method)": [[376, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionIntegerMateSelectionProblem.evalfn"]], "exclude_from_serialization (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionintegermateselectionproblem property)": [[376, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionIntegerMateSelectionProblem.exclude_from_serialization"]], "ineqcv_trans (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionintegermateselectionproblem property)": [[376, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionIntegerMateSelectionProblem.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionintegermateselectionproblem property)": [[376, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionIntegerMateSelectionProblem.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionintegermateselectionproblem property)": [[376, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionIntegerMateSelectionProblem.ineqcv_wt"]], "latentfn() (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionintegermateselectionproblem method)": [[376, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionIntegerMateSelectionProblem.latentfn"]], "n_eq_constr (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionintegermateselectionproblem property)": [[376, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionIntegerMateSelectionProblem.n_eq_constr"]], "n_ieq_constr (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionintegermateselectionproblem property)": [[376, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionIntegerMateSelectionProblem.n_ieq_constr"]], "n_obj (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionintegermateselectionproblem property)": [[376, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionIntegerMateSelectionProblem.n_obj"]], "n_var (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionintegermateselectionproblem property)": [[376, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionIntegerMateSelectionProblem.n_var"]], "ndecn (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionintegermateselectionproblem property)": [[376, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionIntegerMateSelectionProblem.ndecn"]], "neqcv (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionintegermateselectionproblem property)": [[376, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionIntegerMateSelectionProblem.neqcv"]], "nineqcv (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionintegermateselectionproblem property)": [[376, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionIntegerMateSelectionProblem.nineqcv"]], "nlatent (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionintegermateselectionproblem property)": [[376, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionIntegerMateSelectionProblem.nlatent"]], "nobj (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionintegermateselectionproblem property)": [[376, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionIntegerMateSelectionProblem.nobj"]], "obj_trans (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionintegermateselectionproblem property)": [[376, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionIntegerMateSelectionProblem.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionintegermateselectionproblem property)": [[376, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionIntegerMateSelectionProblem.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionintegermateselectionproblem property)": [[376, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionIntegerMateSelectionProblem.obj_wt"]], "replace_nan_values_by (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionintegermateselectionproblem property)": [[376, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionIntegerMateSelectionProblem.replace_nan_values_by"]], "strict (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionintegermateselectionproblem property)": [[376, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionIntegerMateSelectionProblem.strict"]], "ucmat (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionintegermateselectionproblem property)": [[376, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionIntegerMateSelectionProblem.ucmat"]], "vars (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionintegermateselectionproblem property)": [[376, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionIntegerMateSelectionProblem.vars"]], "vtype (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionintegermateselectionproblem property)": [[376, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionIntegerMateSelectionProblem.vtype"]], "xl (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionintegermateselectionproblem property)": [[376, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionIntegerMateSelectionProblem.xl"]], "xu (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionintegermateselectionproblem property)": [[376, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionIntegerMateSelectionProblem.xu"]], "usefulnesscriterionrealmateselectionproblem (class in pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem)": [[377, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionRealMateSelectionProblem"]], "callback (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionrealmateselectionproblem property)": [[377, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionRealMateSelectionProblem.callback"]], "data (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionrealmateselectionproblem property)": [[377, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionRealMateSelectionProblem.data"]], "decn_space (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionrealmateselectionproblem property)": [[377, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionRealMateSelectionProblem.decn_space"]], "decn_space_lower (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionrealmateselectionproblem property)": [[377, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionRealMateSelectionProblem.decn_space_lower"]], "decn_space_upper (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionrealmateselectionproblem property)": [[377, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionRealMateSelectionProblem.decn_space_upper"]], "decn_space_xmap (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionrealmateselectionproblem property)": [[377, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionRealMateSelectionProblem.decn_space_xmap"]], "elementwise (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionrealmateselectionproblem property)": [[377, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionRealMateSelectionProblem.elementwise"]], "elementwise_func (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionrealmateselectionproblem property)": [[377, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionRealMateSelectionProblem.elementwise_func"]], "elementwise_runner (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionrealmateselectionproblem property)": [[377, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionRealMateSelectionProblem.elementwise_runner"]], "eqcv_trans (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionrealmateselectionproblem property)": [[377, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionRealMateSelectionProblem.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionrealmateselectionproblem property)": [[377, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionRealMateSelectionProblem.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionrealmateselectionproblem property)": [[377, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionRealMateSelectionProblem.eqcv_wt"]], "evalfn() (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionrealmateselectionproblem method)": [[377, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionRealMateSelectionProblem.evalfn"]], "exclude_from_serialization (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionrealmateselectionproblem property)": [[377, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionRealMateSelectionProblem.exclude_from_serialization"]], "ineqcv_trans (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionrealmateselectionproblem property)": [[377, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionRealMateSelectionProblem.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionrealmateselectionproblem property)": [[377, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionRealMateSelectionProblem.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionrealmateselectionproblem property)": [[377, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionRealMateSelectionProblem.ineqcv_wt"]], "latentfn() (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionrealmateselectionproblem method)": [[377, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionRealMateSelectionProblem.latentfn"]], "n_eq_constr (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionrealmateselectionproblem property)": [[377, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionRealMateSelectionProblem.n_eq_constr"]], "n_ieq_constr (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionrealmateselectionproblem property)": [[377, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionRealMateSelectionProblem.n_ieq_constr"]], "n_obj (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionrealmateselectionproblem property)": [[377, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionRealMateSelectionProblem.n_obj"]], "n_var (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionrealmateselectionproblem property)": [[377, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionRealMateSelectionProblem.n_var"]], "ndecn (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionrealmateselectionproblem property)": [[377, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionRealMateSelectionProblem.ndecn"]], "neqcv (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionrealmateselectionproblem property)": [[377, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionRealMateSelectionProblem.neqcv"]], "nineqcv (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionrealmateselectionproblem property)": [[377, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionRealMateSelectionProblem.nineqcv"]], "nlatent (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionrealmateselectionproblem property)": [[377, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionRealMateSelectionProblem.nlatent"]], "nobj (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionrealmateselectionproblem property)": [[377, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionRealMateSelectionProblem.nobj"]], "obj_trans (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionrealmateselectionproblem property)": [[377, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionRealMateSelectionProblem.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionrealmateselectionproblem property)": [[377, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionRealMateSelectionProblem.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionrealmateselectionproblem property)": [[377, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionRealMateSelectionProblem.obj_wt"]], "replace_nan_values_by (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionrealmateselectionproblem property)": [[377, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionRealMateSelectionProblem.replace_nan_values_by"]], "strict (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionrealmateselectionproblem property)": [[377, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionRealMateSelectionProblem.strict"]], "ucmat (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionrealmateselectionproblem property)": [[377, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionRealMateSelectionProblem.ucmat"]], "vars (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionrealmateselectionproblem property)": [[377, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionRealMateSelectionProblem.vars"]], "vtype (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionrealmateselectionproblem property)": [[377, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionRealMateSelectionProblem.vtype"]], "xl (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionrealmateselectionproblem property)": [[377, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionRealMateSelectionProblem.xl"]], "xu (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionrealmateselectionproblem property)": [[377, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionRealMateSelectionProblem.xu"]], "usefulnesscriterionselectionproblemmixin (class in pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem)": [[378, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionSelectionProblemMixin"]], "nlatent (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionselectionproblemmixin property)": [[378, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionSelectionProblemMixin.nlatent"]], "ucmat (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionselectionproblemmixin property)": [[378, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionSelectionProblemMixin.ucmat"]], "usefulnesscriterionsubsetmateselectionproblem (class in pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem)": [[379, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionSubsetMateSelectionProblem"]], "callback (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionsubsetmateselectionproblem property)": [[379, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionSubsetMateSelectionProblem.callback"]], "data (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionsubsetmateselectionproblem property)": [[379, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionSubsetMateSelectionProblem.data"]], "decn_space (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionsubsetmateselectionproblem property)": [[379, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionSubsetMateSelectionProblem.decn_space"]], "decn_space_lower (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionsubsetmateselectionproblem property)": [[379, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionSubsetMateSelectionProblem.decn_space_lower"]], "decn_space_upper (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionsubsetmateselectionproblem property)": [[379, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionSubsetMateSelectionProblem.decn_space_upper"]], "decn_space_xmap (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionsubsetmateselectionproblem property)": [[379, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionSubsetMateSelectionProblem.decn_space_xmap"]], "elementwise (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionsubsetmateselectionproblem property)": [[379, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionSubsetMateSelectionProblem.elementwise"]], "elementwise_func (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionsubsetmateselectionproblem property)": [[379, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionSubsetMateSelectionProblem.elementwise_func"]], "elementwise_runner (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionsubsetmateselectionproblem property)": [[379, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionSubsetMateSelectionProblem.elementwise_runner"]], "eqcv_trans (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionsubsetmateselectionproblem property)": [[379, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionSubsetMateSelectionProblem.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionsubsetmateselectionproblem property)": [[379, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionSubsetMateSelectionProblem.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionsubsetmateselectionproblem property)": [[379, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionSubsetMateSelectionProblem.eqcv_wt"]], "evalfn() (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionsubsetmateselectionproblem method)": [[379, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionSubsetMateSelectionProblem.evalfn"]], "exclude_from_serialization (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionsubsetmateselectionproblem property)": [[379, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionSubsetMateSelectionProblem.exclude_from_serialization"]], "ineqcv_trans (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionsubsetmateselectionproblem property)": [[379, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionSubsetMateSelectionProblem.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionsubsetmateselectionproblem property)": [[379, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionSubsetMateSelectionProblem.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionsubsetmateselectionproblem property)": [[379, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionSubsetMateSelectionProblem.ineqcv_wt"]], "latentfn() (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionsubsetmateselectionproblem method)": [[379, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionSubsetMateSelectionProblem.latentfn"]], "n_eq_constr (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionsubsetmateselectionproblem property)": [[379, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionSubsetMateSelectionProblem.n_eq_constr"]], "n_ieq_constr (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionsubsetmateselectionproblem property)": [[379, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionSubsetMateSelectionProblem.n_ieq_constr"]], "n_obj (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionsubsetmateselectionproblem property)": [[379, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionSubsetMateSelectionProblem.n_obj"]], "n_var (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionsubsetmateselectionproblem property)": [[379, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionSubsetMateSelectionProblem.n_var"]], "ndecn (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionsubsetmateselectionproblem property)": [[379, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionSubsetMateSelectionProblem.ndecn"]], "neqcv (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionsubsetmateselectionproblem property)": [[379, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionSubsetMateSelectionProblem.neqcv"]], "nineqcv (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionsubsetmateselectionproblem property)": [[379, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionSubsetMateSelectionProblem.nineqcv"]], "nlatent (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionsubsetmateselectionproblem property)": [[379, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionSubsetMateSelectionProblem.nlatent"]], "nobj (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionsubsetmateselectionproblem property)": [[379, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionSubsetMateSelectionProblem.nobj"]], "obj_trans (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionsubsetmateselectionproblem property)": [[379, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionSubsetMateSelectionProblem.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionsubsetmateselectionproblem property)": [[379, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionSubsetMateSelectionProblem.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionsubsetmateselectionproblem property)": [[379, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionSubsetMateSelectionProblem.obj_wt"]], "replace_nan_values_by (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionsubsetmateselectionproblem property)": [[379, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionSubsetMateSelectionProblem.replace_nan_values_by"]], "strict (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionsubsetmateselectionproblem property)": [[379, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionSubsetMateSelectionProblem.strict"]], "ucmat (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionsubsetmateselectionproblem property)": [[379, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionSubsetMateSelectionProblem.ucmat"]], "vars (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionsubsetmateselectionproblem property)": [[379, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionSubsetMateSelectionProblem.vars"]], "vtype (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionsubsetmateselectionproblem property)": [[379, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionSubsetMateSelectionProblem.vtype"]], "xl (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionsubsetmateselectionproblem property)": [[379, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionSubsetMateSelectionProblem.xl"]], "xu (pybrops.breed.prot.sel.prob.usefulnesscriterionselectionproblem.usefulnesscriterionsubsetmateselectionproblem property)": [[379, "pybrops.breed.prot.sel.prob.UsefulnessCriterionSelectionProblem.UsefulnessCriterionSubsetMateSelectionProblem.xu"]], "pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem": [[380, "module-pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem"]], "weightedgenomicbinaryselectionproblem (class in pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem)": [[381, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicBinarySelectionProblem"]], "callback (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicbinaryselectionproblem property)": [[381, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicBinarySelectionProblem.callback"]], "data (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicbinaryselectionproblem property)": [[381, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicBinarySelectionProblem.data"]], "decn_space (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicbinaryselectionproblem property)": [[381, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicBinarySelectionProblem.decn_space"]], "decn_space_lower (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicbinaryselectionproblem property)": [[381, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicBinarySelectionProblem.decn_space_lower"]], "decn_space_upper (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicbinaryselectionproblem property)": [[381, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicBinarySelectionProblem.decn_space_upper"]], "elementwise (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicbinaryselectionproblem property)": [[381, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicBinarySelectionProblem.elementwise"]], "elementwise_func (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicbinaryselectionproblem property)": [[381, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicBinarySelectionProblem.elementwise_func"]], "elementwise_runner (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicbinaryselectionproblem property)": [[381, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicBinarySelectionProblem.elementwise_runner"]], "eqcv_trans (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicbinaryselectionproblem property)": [[381, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicBinarySelectionProblem.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicbinaryselectionproblem property)": [[381, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicBinarySelectionProblem.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicbinaryselectionproblem property)": [[381, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicBinarySelectionProblem.eqcv_wt"]], "evalfn() (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicbinaryselectionproblem method)": [[381, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicBinarySelectionProblem.evalfn"]], "exclude_from_serialization (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicbinaryselectionproblem property)": [[381, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicBinarySelectionProblem.exclude_from_serialization"]], "gwgebv (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicbinaryselectionproblem property)": [[381, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicBinarySelectionProblem.gwgebv"]], "ineqcv_trans (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicbinaryselectionproblem property)": [[381, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicBinarySelectionProblem.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicbinaryselectionproblem property)": [[381, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicBinarySelectionProblem.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicbinaryselectionproblem property)": [[381, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicBinarySelectionProblem.ineqcv_wt"]], "latentfn() (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicbinaryselectionproblem method)": [[381, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicBinarySelectionProblem.latentfn"]], "n_eq_constr (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicbinaryselectionproblem property)": [[381, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicBinarySelectionProblem.n_eq_constr"]], "n_ieq_constr (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicbinaryselectionproblem property)": [[381, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicBinarySelectionProblem.n_ieq_constr"]], "n_obj (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicbinaryselectionproblem property)": [[381, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicBinarySelectionProblem.n_obj"]], "n_var (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicbinaryselectionproblem property)": [[381, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicBinarySelectionProblem.n_var"]], "ndecn (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicbinaryselectionproblem property)": [[381, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicBinarySelectionProblem.ndecn"]], "neqcv (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicbinaryselectionproblem property)": [[381, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicBinarySelectionProblem.neqcv"]], "nineqcv (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicbinaryselectionproblem property)": [[381, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicBinarySelectionProblem.nineqcv"]], "nlatent (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicbinaryselectionproblem property)": [[381, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicBinarySelectionProblem.nlatent"]], "nobj (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicbinaryselectionproblem property)": [[381, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicBinarySelectionProblem.nobj"]], "obj_trans (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicbinaryselectionproblem property)": [[381, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicBinarySelectionProblem.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicbinaryselectionproblem property)": [[381, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicBinarySelectionProblem.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicbinaryselectionproblem property)": [[381, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicBinarySelectionProblem.obj_wt"]], "replace_nan_values_by (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicbinaryselectionproblem property)": [[381, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicBinarySelectionProblem.replace_nan_values_by"]], "strict (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicbinaryselectionproblem property)": [[381, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicBinarySelectionProblem.strict"]], "vars (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicbinaryselectionproblem property)": [[381, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicBinarySelectionProblem.vars"]], "vtype (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicbinaryselectionproblem property)": [[381, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicBinarySelectionProblem.vtype"]], "xl (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicbinaryselectionproblem property)": [[381, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicBinarySelectionProblem.xl"]], "xu (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicbinaryselectionproblem property)": [[381, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicBinarySelectionProblem.xu"]], "weightedgenomicintegerselectionproblem (class in pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem)": [[382, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicIntegerSelectionProblem"]], "callback (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicintegerselectionproblem property)": [[382, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicIntegerSelectionProblem.callback"]], "data (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicintegerselectionproblem property)": [[382, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicIntegerSelectionProblem.data"]], "decn_space (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicintegerselectionproblem property)": [[382, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicIntegerSelectionProblem.decn_space"]], "decn_space_lower (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicintegerselectionproblem property)": [[382, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicIntegerSelectionProblem.decn_space_lower"]], "decn_space_upper (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicintegerselectionproblem property)": [[382, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicIntegerSelectionProblem.decn_space_upper"]], "elementwise (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicintegerselectionproblem property)": [[382, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicIntegerSelectionProblem.elementwise"]], "elementwise_func (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicintegerselectionproblem property)": [[382, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicIntegerSelectionProblem.elementwise_func"]], "elementwise_runner (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicintegerselectionproblem property)": [[382, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicIntegerSelectionProblem.elementwise_runner"]], "eqcv_trans (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicintegerselectionproblem property)": [[382, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicIntegerSelectionProblem.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicintegerselectionproblem property)": [[382, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicIntegerSelectionProblem.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicintegerselectionproblem property)": [[382, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicIntegerSelectionProblem.eqcv_wt"]], "evalfn() (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicintegerselectionproblem method)": [[382, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicIntegerSelectionProblem.evalfn"]], "exclude_from_serialization (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicintegerselectionproblem property)": [[382, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicIntegerSelectionProblem.exclude_from_serialization"]], "gwgebv (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicintegerselectionproblem property)": [[382, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicIntegerSelectionProblem.gwgebv"]], "ineqcv_trans (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicintegerselectionproblem property)": [[382, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicIntegerSelectionProblem.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicintegerselectionproblem property)": [[382, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicIntegerSelectionProblem.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicintegerselectionproblem property)": [[382, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicIntegerSelectionProblem.ineqcv_wt"]], "latentfn() (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicintegerselectionproblem method)": [[382, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicIntegerSelectionProblem.latentfn"]], "n_eq_constr (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicintegerselectionproblem property)": [[382, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicIntegerSelectionProblem.n_eq_constr"]], "n_ieq_constr (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicintegerselectionproblem property)": [[382, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicIntegerSelectionProblem.n_ieq_constr"]], "n_obj (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicintegerselectionproblem property)": [[382, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicIntegerSelectionProblem.n_obj"]], "n_var (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicintegerselectionproblem property)": [[382, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicIntegerSelectionProblem.n_var"]], "ndecn (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicintegerselectionproblem property)": [[382, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicIntegerSelectionProblem.ndecn"]], "neqcv (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicintegerselectionproblem property)": [[382, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicIntegerSelectionProblem.neqcv"]], "nineqcv (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicintegerselectionproblem property)": [[382, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicIntegerSelectionProblem.nineqcv"]], "nlatent (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicintegerselectionproblem property)": [[382, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicIntegerSelectionProblem.nlatent"]], "nobj (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicintegerselectionproblem property)": [[382, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicIntegerSelectionProblem.nobj"]], "obj_trans (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicintegerselectionproblem property)": [[382, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicIntegerSelectionProblem.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicintegerselectionproblem property)": [[382, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicIntegerSelectionProblem.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicintegerselectionproblem property)": [[382, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicIntegerSelectionProblem.obj_wt"]], "replace_nan_values_by (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicintegerselectionproblem property)": [[382, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicIntegerSelectionProblem.replace_nan_values_by"]], "strict (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicintegerselectionproblem property)": [[382, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicIntegerSelectionProblem.strict"]], "vars (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicintegerselectionproblem property)": [[382, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicIntegerSelectionProblem.vars"]], "vtype (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicintegerselectionproblem property)": [[382, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicIntegerSelectionProblem.vtype"]], "xl (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicintegerselectionproblem property)": [[382, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicIntegerSelectionProblem.xl"]], "xu (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicintegerselectionproblem property)": [[382, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicIntegerSelectionProblem.xu"]], "weightedgenomicrealselectionproblem (class in pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem)": [[383, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicRealSelectionProblem"]], "callback (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicrealselectionproblem property)": [[383, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicRealSelectionProblem.callback"]], "data (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicrealselectionproblem property)": [[383, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicRealSelectionProblem.data"]], "decn_space (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicrealselectionproblem property)": [[383, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicRealSelectionProblem.decn_space"]], "decn_space_lower (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicrealselectionproblem property)": [[383, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicRealSelectionProblem.decn_space_lower"]], "decn_space_upper (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicrealselectionproblem property)": [[383, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicRealSelectionProblem.decn_space_upper"]], "elementwise (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicrealselectionproblem property)": [[383, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicRealSelectionProblem.elementwise"]], "elementwise_func (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicrealselectionproblem property)": [[383, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicRealSelectionProblem.elementwise_func"]], "elementwise_runner (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicrealselectionproblem property)": [[383, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicRealSelectionProblem.elementwise_runner"]], "eqcv_trans (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicrealselectionproblem property)": [[383, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicRealSelectionProblem.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicrealselectionproblem property)": [[383, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicRealSelectionProblem.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicrealselectionproblem property)": [[383, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicRealSelectionProblem.eqcv_wt"]], "evalfn() (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicrealselectionproblem method)": [[383, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicRealSelectionProblem.evalfn"]], "exclude_from_serialization (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicrealselectionproblem property)": [[383, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicRealSelectionProblem.exclude_from_serialization"]], "gwgebv (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicrealselectionproblem property)": [[383, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicRealSelectionProblem.gwgebv"]], "ineqcv_trans (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicrealselectionproblem property)": [[383, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicRealSelectionProblem.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicrealselectionproblem property)": [[383, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicRealSelectionProblem.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicrealselectionproblem property)": [[383, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicRealSelectionProblem.ineqcv_wt"]], "latentfn() (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicrealselectionproblem method)": [[383, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicRealSelectionProblem.latentfn"]], "n_eq_constr (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicrealselectionproblem property)": [[383, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicRealSelectionProblem.n_eq_constr"]], "n_ieq_constr (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicrealselectionproblem property)": [[383, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicRealSelectionProblem.n_ieq_constr"]], "n_obj (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicrealselectionproblem property)": [[383, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicRealSelectionProblem.n_obj"]], "n_var (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicrealselectionproblem property)": [[383, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicRealSelectionProblem.n_var"]], "ndecn (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicrealselectionproblem property)": [[383, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicRealSelectionProblem.ndecn"]], "neqcv (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicrealselectionproblem property)": [[383, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicRealSelectionProblem.neqcv"]], "nineqcv (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicrealselectionproblem property)": [[383, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicRealSelectionProblem.nineqcv"]], "nlatent (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicrealselectionproblem property)": [[383, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicRealSelectionProblem.nlatent"]], "nobj (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicrealselectionproblem property)": [[383, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicRealSelectionProblem.nobj"]], "obj_trans (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicrealselectionproblem property)": [[383, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicRealSelectionProblem.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicrealselectionproblem property)": [[383, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicRealSelectionProblem.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicrealselectionproblem property)": [[383, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicRealSelectionProblem.obj_wt"]], "replace_nan_values_by (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicrealselectionproblem property)": [[383, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicRealSelectionProblem.replace_nan_values_by"]], "strict (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicrealselectionproblem property)": [[383, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicRealSelectionProblem.strict"]], "vars (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicrealselectionproblem property)": [[383, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicRealSelectionProblem.vars"]], "vtype (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicrealselectionproblem property)": [[383, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicRealSelectionProblem.vtype"]], "xl (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicrealselectionproblem property)": [[383, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicRealSelectionProblem.xl"]], "xu (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicrealselectionproblem property)": [[383, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicRealSelectionProblem.xu"]], "weightedgenomicsubsetselectionproblem (class in pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem)": [[384, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicSubsetSelectionProblem"]], "callback (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicsubsetselectionproblem property)": [[384, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicSubsetSelectionProblem.callback"]], "data (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicsubsetselectionproblem property)": [[384, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicSubsetSelectionProblem.data"]], "decn_space (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicsubsetselectionproblem property)": [[384, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicSubsetSelectionProblem.decn_space"]], "decn_space_lower (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicsubsetselectionproblem property)": [[384, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicSubsetSelectionProblem.decn_space_lower"]], "decn_space_upper (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicsubsetselectionproblem property)": [[384, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicSubsetSelectionProblem.decn_space_upper"]], "elementwise (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicsubsetselectionproblem property)": [[384, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicSubsetSelectionProblem.elementwise"]], "elementwise_func (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicsubsetselectionproblem property)": [[384, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicSubsetSelectionProblem.elementwise_func"]], "elementwise_runner (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicsubsetselectionproblem property)": [[384, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicSubsetSelectionProblem.elementwise_runner"]], "eqcv_trans (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicsubsetselectionproblem property)": [[384, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicSubsetSelectionProblem.eqcv_trans"]], "eqcv_trans_kwargs (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicsubsetselectionproblem property)": [[384, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicSubsetSelectionProblem.eqcv_trans_kwargs"]], "eqcv_wt (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicsubsetselectionproblem property)": [[384, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicSubsetSelectionProblem.eqcv_wt"]], "evalfn() (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicsubsetselectionproblem method)": [[384, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicSubsetSelectionProblem.evalfn"]], "exclude_from_serialization (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicsubsetselectionproblem property)": [[384, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicSubsetSelectionProblem.exclude_from_serialization"]], "gwgebv (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicsubsetselectionproblem property)": [[384, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicSubsetSelectionProblem.gwgebv"]], "ineqcv_trans (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicsubsetselectionproblem property)": [[384, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicSubsetSelectionProblem.ineqcv_trans"]], "ineqcv_trans_kwargs (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicsubsetselectionproblem property)": [[384, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicSubsetSelectionProblem.ineqcv_trans_kwargs"]], "ineqcv_wt (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicsubsetselectionproblem property)": [[384, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicSubsetSelectionProblem.ineqcv_wt"]], "latentfn() (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicsubsetselectionproblem method)": [[384, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicSubsetSelectionProblem.latentfn"]], "n_eq_constr (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicsubsetselectionproblem property)": [[384, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicSubsetSelectionProblem.n_eq_constr"]], "n_ieq_constr (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicsubsetselectionproblem property)": [[384, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicSubsetSelectionProblem.n_ieq_constr"]], "n_obj (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicsubsetselectionproblem property)": [[384, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicSubsetSelectionProblem.n_obj"]], "n_var (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicsubsetselectionproblem property)": [[384, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicSubsetSelectionProblem.n_var"]], "ndecn (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicsubsetselectionproblem property)": [[384, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicSubsetSelectionProblem.ndecn"]], "neqcv (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicsubsetselectionproblem property)": [[384, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicSubsetSelectionProblem.neqcv"]], "nineqcv (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicsubsetselectionproblem property)": [[384, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicSubsetSelectionProblem.nineqcv"]], "nlatent (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicsubsetselectionproblem property)": [[384, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicSubsetSelectionProblem.nlatent"]], "nobj (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicsubsetselectionproblem property)": [[384, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicSubsetSelectionProblem.nobj"]], "obj_trans (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicsubsetselectionproblem property)": [[384, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicSubsetSelectionProblem.obj_trans"]], "obj_trans_kwargs (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicsubsetselectionproblem property)": [[384, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicSubsetSelectionProblem.obj_trans_kwargs"]], "obj_wt (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicsubsetselectionproblem property)": [[384, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicSubsetSelectionProblem.obj_wt"]], "replace_nan_values_by (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicsubsetselectionproblem property)": [[384, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicSubsetSelectionProblem.replace_nan_values_by"]], "strict (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicsubsetselectionproblem property)": [[384, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicSubsetSelectionProblem.strict"]], "vars (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicsubsetselectionproblem property)": [[384, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicSubsetSelectionProblem.vars"]], "vtype (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicsubsetselectionproblem property)": [[384, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicSubsetSelectionProblem.vtype"]], "xl (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicsubsetselectionproblem property)": [[384, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicSubsetSelectionProblem.xl"]], "xu (pybrops.breed.prot.sel.prob.weightedgenomicselectionproblem.weightedgenomicsubsetselectionproblem property)": [[384, "pybrops.breed.prot.sel.prob.WeightedGenomicSelectionProblem.WeightedGenomicSubsetSelectionProblem.xu"]], "pybrops.breed.prot.sel.prob.trans": [[385, "module-pybrops.breed.prot.sel.prob.trans"]], "trans_decnvec_sum_eq() (in module pybrops.breed.prot.sel.prob.trans)": [[386, "pybrops.breed.prot.sel.prob.trans.trans_decnvec_sum_eq"]], "trans_dot() (in module pybrops.breed.prot.sel.prob.trans)": [[387, "pybrops.breed.prot.sel.prob.trans.trans_dot"]], "trans_empty() (in module pybrops.breed.prot.sel.prob.trans)": [[388, "pybrops.breed.prot.sel.prob.trans.trans_empty"]], "trans_identity() (in module pybrops.breed.prot.sel.prob.trans)": [[389, "pybrops.breed.prot.sel.prob.trans.trans_identity"]], "trans_ndpt_to_vec_dist() (in module pybrops.breed.prot.sel.prob.trans)": [[390, "pybrops.breed.prot.sel.prob.trans.trans_ndpt_to_vec_dist"]], "trans_sum() (in module pybrops.breed.prot.sel.prob.trans)": [[391, "pybrops.breed.prot.sel.prob.trans.trans_sum"]], "pybrops.breed.prot.sel.soln": [[392, "module-pybrops.breed.prot.sel.soln"]], "pybrops.breed.prot.sel.soln.binarymateselectionsolution": [[393, "module-pybrops.breed.prot.sel.soln.BinaryMateSelectionSolution"]], "binarymateselectionsolution (class in pybrops.breed.prot.sel.soln.binarymateselectionsolution)": [[394, "pybrops.breed.prot.sel.soln.BinaryMateSelectionSolution.BinaryMateSelectionSolution"]], "decn_space (pybrops.breed.prot.sel.soln.binarymateselectionsolution.binarymateselectionsolution property)": [[394, "pybrops.breed.prot.sel.soln.BinaryMateSelectionSolution.BinaryMateSelectionSolution.decn_space"]], "decn_space_lower (pybrops.breed.prot.sel.soln.binarymateselectionsolution.binarymateselectionsolution property)": [[394, "pybrops.breed.prot.sel.soln.BinaryMateSelectionSolution.BinaryMateSelectionSolution.decn_space_lower"]], "decn_space_upper (pybrops.breed.prot.sel.soln.binarymateselectionsolution.binarymateselectionsolution property)": [[394, "pybrops.breed.prot.sel.soln.BinaryMateSelectionSolution.BinaryMateSelectionSolution.decn_space_upper"]], "decn_space_xmap (pybrops.breed.prot.sel.soln.binarymateselectionsolution.binarymateselectionsolution property)": [[394, "pybrops.breed.prot.sel.soln.BinaryMateSelectionSolution.BinaryMateSelectionSolution.decn_space_xmap"]], "eqcv_wt (pybrops.breed.prot.sel.soln.binarymateselectionsolution.binarymateselectionsolution property)": [[394, "pybrops.breed.prot.sel.soln.BinaryMateSelectionSolution.BinaryMateSelectionSolution.eqcv_wt"]], "ineqcv_wt (pybrops.breed.prot.sel.soln.binarymateselectionsolution.binarymateselectionsolution property)": [[394, "pybrops.breed.prot.sel.soln.BinaryMateSelectionSolution.BinaryMateSelectionSolution.ineqcv_wt"]], "ndecn (pybrops.breed.prot.sel.soln.binarymateselectionsolution.binarymateselectionsolution property)": [[394, "pybrops.breed.prot.sel.soln.BinaryMateSelectionSolution.BinaryMateSelectionSolution.ndecn"]], "neqcv (pybrops.breed.prot.sel.soln.binarymateselectionsolution.binarymateselectionsolution property)": [[394, "pybrops.breed.prot.sel.soln.BinaryMateSelectionSolution.BinaryMateSelectionSolution.neqcv"]], "nineqcv (pybrops.breed.prot.sel.soln.binarymateselectionsolution.binarymateselectionsolution property)": [[394, "pybrops.breed.prot.sel.soln.BinaryMateSelectionSolution.BinaryMateSelectionSolution.nineqcv"]], "nobj (pybrops.breed.prot.sel.soln.binarymateselectionsolution.binarymateselectionsolution property)": [[394, "pybrops.breed.prot.sel.soln.BinaryMateSelectionSolution.BinaryMateSelectionSolution.nobj"]], "nsoln (pybrops.breed.prot.sel.soln.binarymateselectionsolution.binarymateselectionsolution property)": [[394, "pybrops.breed.prot.sel.soln.BinaryMateSelectionSolution.BinaryMateSelectionSolution.nsoln"]], "obj_wt (pybrops.breed.prot.sel.soln.binarymateselectionsolution.binarymateselectionsolution property)": [[394, "pybrops.breed.prot.sel.soln.BinaryMateSelectionSolution.BinaryMateSelectionSolution.obj_wt"]], "soln_decn (pybrops.breed.prot.sel.soln.binarymateselectionsolution.binarymateselectionsolution property)": [[394, "pybrops.breed.prot.sel.soln.BinaryMateSelectionSolution.BinaryMateSelectionSolution.soln_decn"]], "soln_eqcv (pybrops.breed.prot.sel.soln.binarymateselectionsolution.binarymateselectionsolution property)": [[394, "pybrops.breed.prot.sel.soln.BinaryMateSelectionSolution.BinaryMateSelectionSolution.soln_eqcv"]], "soln_ineqcv (pybrops.breed.prot.sel.soln.binarymateselectionsolution.binarymateselectionsolution property)": [[394, "pybrops.breed.prot.sel.soln.BinaryMateSelectionSolution.BinaryMateSelectionSolution.soln_ineqcv"]], "soln_obj (pybrops.breed.prot.sel.soln.binarymateselectionsolution.binarymateselectionsolution property)": [[394, "pybrops.breed.prot.sel.soln.BinaryMateSelectionSolution.BinaryMateSelectionSolution.soln_obj"]], "check_is_binarymateselectionsolution() (in module pybrops.breed.prot.sel.soln.binarymateselectionsolution)": [[395, "pybrops.breed.prot.sel.soln.BinaryMateSelectionSolution.check_is_BinaryMateSelectionSolution"]], "pybrops.breed.prot.sel.soln.binaryselectionsolution": [[396, "module-pybrops.breed.prot.sel.soln.BinarySelectionSolution"]], "binaryselectionsolution (class in pybrops.breed.prot.sel.soln.binaryselectionsolution)": [[397, "pybrops.breed.prot.sel.soln.BinarySelectionSolution.BinarySelectionSolution"]], "decn_space (pybrops.breed.prot.sel.soln.binaryselectionsolution.binaryselectionsolution property)": [[397, "pybrops.breed.prot.sel.soln.BinarySelectionSolution.BinarySelectionSolution.decn_space"]], "decn_space_lower (pybrops.breed.prot.sel.soln.binaryselectionsolution.binaryselectionsolution property)": [[397, "pybrops.breed.prot.sel.soln.BinarySelectionSolution.BinarySelectionSolution.decn_space_lower"]], "decn_space_upper (pybrops.breed.prot.sel.soln.binaryselectionsolution.binaryselectionsolution property)": [[397, "pybrops.breed.prot.sel.soln.BinarySelectionSolution.BinarySelectionSolution.decn_space_upper"]], "eqcv_wt (pybrops.breed.prot.sel.soln.binaryselectionsolution.binaryselectionsolution property)": [[397, "pybrops.breed.prot.sel.soln.BinarySelectionSolution.BinarySelectionSolution.eqcv_wt"]], "ineqcv_wt (pybrops.breed.prot.sel.soln.binaryselectionsolution.binaryselectionsolution property)": [[397, "pybrops.breed.prot.sel.soln.BinarySelectionSolution.BinarySelectionSolution.ineqcv_wt"]], "ndecn (pybrops.breed.prot.sel.soln.binaryselectionsolution.binaryselectionsolution property)": [[397, "pybrops.breed.prot.sel.soln.BinarySelectionSolution.BinarySelectionSolution.ndecn"]], "neqcv (pybrops.breed.prot.sel.soln.binaryselectionsolution.binaryselectionsolution property)": [[397, "pybrops.breed.prot.sel.soln.BinarySelectionSolution.BinarySelectionSolution.neqcv"]], "nineqcv (pybrops.breed.prot.sel.soln.binaryselectionsolution.binaryselectionsolution property)": [[397, "pybrops.breed.prot.sel.soln.BinarySelectionSolution.BinarySelectionSolution.nineqcv"]], "nobj (pybrops.breed.prot.sel.soln.binaryselectionsolution.binaryselectionsolution property)": [[397, "pybrops.breed.prot.sel.soln.BinarySelectionSolution.BinarySelectionSolution.nobj"]], "nsoln (pybrops.breed.prot.sel.soln.binaryselectionsolution.binaryselectionsolution property)": [[397, "pybrops.breed.prot.sel.soln.BinarySelectionSolution.BinarySelectionSolution.nsoln"]], "obj_wt (pybrops.breed.prot.sel.soln.binaryselectionsolution.binaryselectionsolution property)": [[397, "pybrops.breed.prot.sel.soln.BinarySelectionSolution.BinarySelectionSolution.obj_wt"]], "soln_decn (pybrops.breed.prot.sel.soln.binaryselectionsolution.binaryselectionsolution property)": [[397, "pybrops.breed.prot.sel.soln.BinarySelectionSolution.BinarySelectionSolution.soln_decn"]], "soln_eqcv (pybrops.breed.prot.sel.soln.binaryselectionsolution.binaryselectionsolution property)": [[397, "pybrops.breed.prot.sel.soln.BinarySelectionSolution.BinarySelectionSolution.soln_eqcv"]], "soln_ineqcv (pybrops.breed.prot.sel.soln.binaryselectionsolution.binaryselectionsolution property)": [[397, "pybrops.breed.prot.sel.soln.BinarySelectionSolution.BinarySelectionSolution.soln_ineqcv"]], "soln_obj (pybrops.breed.prot.sel.soln.binaryselectionsolution.binaryselectionsolution property)": [[397, "pybrops.breed.prot.sel.soln.BinarySelectionSolution.BinarySelectionSolution.soln_obj"]], "check_is_binaryselectionsolution() (in module pybrops.breed.prot.sel.soln.binaryselectionsolution)": [[398, "pybrops.breed.prot.sel.soln.BinarySelectionSolution.check_is_BinarySelectionSolution"]], "pybrops.breed.prot.sel.soln.integermateselectionsolution": [[399, "module-pybrops.breed.prot.sel.soln.IntegerMateSelectionSolution"]], "integermateselectionsolution (class in pybrops.breed.prot.sel.soln.integermateselectionsolution)": [[400, "pybrops.breed.prot.sel.soln.IntegerMateSelectionSolution.IntegerMateSelectionSolution"]], "decn_space (pybrops.breed.prot.sel.soln.integermateselectionsolution.integermateselectionsolution property)": [[400, "pybrops.breed.prot.sel.soln.IntegerMateSelectionSolution.IntegerMateSelectionSolution.decn_space"]], "decn_space_lower (pybrops.breed.prot.sel.soln.integermateselectionsolution.integermateselectionsolution property)": [[400, "pybrops.breed.prot.sel.soln.IntegerMateSelectionSolution.IntegerMateSelectionSolution.decn_space_lower"]], "decn_space_upper (pybrops.breed.prot.sel.soln.integermateselectionsolution.integermateselectionsolution property)": [[400, "pybrops.breed.prot.sel.soln.IntegerMateSelectionSolution.IntegerMateSelectionSolution.decn_space_upper"]], "decn_space_xmap (pybrops.breed.prot.sel.soln.integermateselectionsolution.integermateselectionsolution property)": [[400, "pybrops.breed.prot.sel.soln.IntegerMateSelectionSolution.IntegerMateSelectionSolution.decn_space_xmap"]], "eqcv_wt (pybrops.breed.prot.sel.soln.integermateselectionsolution.integermateselectionsolution property)": [[400, "pybrops.breed.prot.sel.soln.IntegerMateSelectionSolution.IntegerMateSelectionSolution.eqcv_wt"]], "ineqcv_wt (pybrops.breed.prot.sel.soln.integermateselectionsolution.integermateselectionsolution property)": [[400, "pybrops.breed.prot.sel.soln.IntegerMateSelectionSolution.IntegerMateSelectionSolution.ineqcv_wt"]], "ndecn (pybrops.breed.prot.sel.soln.integermateselectionsolution.integermateselectionsolution property)": [[400, "pybrops.breed.prot.sel.soln.IntegerMateSelectionSolution.IntegerMateSelectionSolution.ndecn"]], "neqcv (pybrops.breed.prot.sel.soln.integermateselectionsolution.integermateselectionsolution property)": [[400, "pybrops.breed.prot.sel.soln.IntegerMateSelectionSolution.IntegerMateSelectionSolution.neqcv"]], "nineqcv (pybrops.breed.prot.sel.soln.integermateselectionsolution.integermateselectionsolution property)": [[400, "pybrops.breed.prot.sel.soln.IntegerMateSelectionSolution.IntegerMateSelectionSolution.nineqcv"]], "nobj (pybrops.breed.prot.sel.soln.integermateselectionsolution.integermateselectionsolution property)": [[400, "pybrops.breed.prot.sel.soln.IntegerMateSelectionSolution.IntegerMateSelectionSolution.nobj"]], "nsoln (pybrops.breed.prot.sel.soln.integermateselectionsolution.integermateselectionsolution property)": [[400, "pybrops.breed.prot.sel.soln.IntegerMateSelectionSolution.IntegerMateSelectionSolution.nsoln"]], "obj_wt (pybrops.breed.prot.sel.soln.integermateselectionsolution.integermateselectionsolution property)": [[400, "pybrops.breed.prot.sel.soln.IntegerMateSelectionSolution.IntegerMateSelectionSolution.obj_wt"]], "soln_decn (pybrops.breed.prot.sel.soln.integermateselectionsolution.integermateselectionsolution property)": [[400, "pybrops.breed.prot.sel.soln.IntegerMateSelectionSolution.IntegerMateSelectionSolution.soln_decn"]], "soln_eqcv (pybrops.breed.prot.sel.soln.integermateselectionsolution.integermateselectionsolution property)": [[400, "pybrops.breed.prot.sel.soln.IntegerMateSelectionSolution.IntegerMateSelectionSolution.soln_eqcv"]], "soln_ineqcv (pybrops.breed.prot.sel.soln.integermateselectionsolution.integermateselectionsolution property)": [[400, "pybrops.breed.prot.sel.soln.IntegerMateSelectionSolution.IntegerMateSelectionSolution.soln_ineqcv"]], "soln_obj (pybrops.breed.prot.sel.soln.integermateselectionsolution.integermateselectionsolution property)": [[400, "pybrops.breed.prot.sel.soln.IntegerMateSelectionSolution.IntegerMateSelectionSolution.soln_obj"]], "check_is_integermateselectionsolution() (in module pybrops.breed.prot.sel.soln.integermateselectionsolution)": [[401, "pybrops.breed.prot.sel.soln.IntegerMateSelectionSolution.check_is_IntegerMateSelectionSolution"]], "pybrops.breed.prot.sel.soln.integerselectionsolution": [[402, "module-pybrops.breed.prot.sel.soln.IntegerSelectionSolution"]], "integerselectionsolution (class in pybrops.breed.prot.sel.soln.integerselectionsolution)": [[403, "pybrops.breed.prot.sel.soln.IntegerSelectionSolution.IntegerSelectionSolution"]], "decn_space (pybrops.breed.prot.sel.soln.integerselectionsolution.integerselectionsolution property)": [[403, "pybrops.breed.prot.sel.soln.IntegerSelectionSolution.IntegerSelectionSolution.decn_space"]], "decn_space_lower (pybrops.breed.prot.sel.soln.integerselectionsolution.integerselectionsolution property)": [[403, "pybrops.breed.prot.sel.soln.IntegerSelectionSolution.IntegerSelectionSolution.decn_space_lower"]], "decn_space_upper (pybrops.breed.prot.sel.soln.integerselectionsolution.integerselectionsolution property)": [[403, "pybrops.breed.prot.sel.soln.IntegerSelectionSolution.IntegerSelectionSolution.decn_space_upper"]], "eqcv_wt (pybrops.breed.prot.sel.soln.integerselectionsolution.integerselectionsolution property)": [[403, "pybrops.breed.prot.sel.soln.IntegerSelectionSolution.IntegerSelectionSolution.eqcv_wt"]], "ineqcv_wt (pybrops.breed.prot.sel.soln.integerselectionsolution.integerselectionsolution property)": [[403, "pybrops.breed.prot.sel.soln.IntegerSelectionSolution.IntegerSelectionSolution.ineqcv_wt"]], "ndecn (pybrops.breed.prot.sel.soln.integerselectionsolution.integerselectionsolution property)": [[403, "pybrops.breed.prot.sel.soln.IntegerSelectionSolution.IntegerSelectionSolution.ndecn"]], "neqcv (pybrops.breed.prot.sel.soln.integerselectionsolution.integerselectionsolution property)": [[403, "pybrops.breed.prot.sel.soln.IntegerSelectionSolution.IntegerSelectionSolution.neqcv"]], "nineqcv (pybrops.breed.prot.sel.soln.integerselectionsolution.integerselectionsolution property)": [[403, "pybrops.breed.prot.sel.soln.IntegerSelectionSolution.IntegerSelectionSolution.nineqcv"]], "nobj (pybrops.breed.prot.sel.soln.integerselectionsolution.integerselectionsolution property)": [[403, "pybrops.breed.prot.sel.soln.IntegerSelectionSolution.IntegerSelectionSolution.nobj"]], "nsoln (pybrops.breed.prot.sel.soln.integerselectionsolution.integerselectionsolution property)": [[403, "pybrops.breed.prot.sel.soln.IntegerSelectionSolution.IntegerSelectionSolution.nsoln"]], "obj_wt (pybrops.breed.prot.sel.soln.integerselectionsolution.integerselectionsolution property)": [[403, "pybrops.breed.prot.sel.soln.IntegerSelectionSolution.IntegerSelectionSolution.obj_wt"]], "soln_decn (pybrops.breed.prot.sel.soln.integerselectionsolution.integerselectionsolution property)": [[403, "pybrops.breed.prot.sel.soln.IntegerSelectionSolution.IntegerSelectionSolution.soln_decn"]], "soln_eqcv (pybrops.breed.prot.sel.soln.integerselectionsolution.integerselectionsolution property)": [[403, "pybrops.breed.prot.sel.soln.IntegerSelectionSolution.IntegerSelectionSolution.soln_eqcv"]], "soln_ineqcv (pybrops.breed.prot.sel.soln.integerselectionsolution.integerselectionsolution property)": [[403, "pybrops.breed.prot.sel.soln.IntegerSelectionSolution.IntegerSelectionSolution.soln_ineqcv"]], "soln_obj (pybrops.breed.prot.sel.soln.integerselectionsolution.integerselectionsolution property)": [[403, "pybrops.breed.prot.sel.soln.IntegerSelectionSolution.IntegerSelectionSolution.soln_obj"]], "check_is_integerselectionsolution() (in module pybrops.breed.prot.sel.soln.integerselectionsolution)": [[404, "pybrops.breed.prot.sel.soln.IntegerSelectionSolution.check_is_IntegerSelectionSolution"]], "pybrops.breed.prot.sel.soln.mateselectionsolution": [[405, "module-pybrops.breed.prot.sel.soln.MateSelectionSolution"]], "mateselectionsolution (class in pybrops.breed.prot.sel.soln.mateselectionsolution)": [[406, "pybrops.breed.prot.sel.soln.MateSelectionSolution.MateSelectionSolution"]], "decn_space (pybrops.breed.prot.sel.soln.mateselectionsolution.mateselectionsolution property)": [[406, "pybrops.breed.prot.sel.soln.MateSelectionSolution.MateSelectionSolution.decn_space"]], "decn_space_lower (pybrops.breed.prot.sel.soln.mateselectionsolution.mateselectionsolution property)": [[406, "pybrops.breed.prot.sel.soln.MateSelectionSolution.MateSelectionSolution.decn_space_lower"]], "decn_space_upper (pybrops.breed.prot.sel.soln.mateselectionsolution.mateselectionsolution property)": [[406, "pybrops.breed.prot.sel.soln.MateSelectionSolution.MateSelectionSolution.decn_space_upper"]], "decn_space_xmap (pybrops.breed.prot.sel.soln.mateselectionsolution.mateselectionsolution property)": [[406, "pybrops.breed.prot.sel.soln.MateSelectionSolution.MateSelectionSolution.decn_space_xmap"]], "eqcv_wt (pybrops.breed.prot.sel.soln.mateselectionsolution.mateselectionsolution property)": [[406, "pybrops.breed.prot.sel.soln.MateSelectionSolution.MateSelectionSolution.eqcv_wt"]], "ineqcv_wt (pybrops.breed.prot.sel.soln.mateselectionsolution.mateselectionsolution property)": [[406, "pybrops.breed.prot.sel.soln.MateSelectionSolution.MateSelectionSolution.ineqcv_wt"]], "ndecn (pybrops.breed.prot.sel.soln.mateselectionsolution.mateselectionsolution property)": [[406, "pybrops.breed.prot.sel.soln.MateSelectionSolution.MateSelectionSolution.ndecn"]], "neqcv (pybrops.breed.prot.sel.soln.mateselectionsolution.mateselectionsolution property)": [[406, "pybrops.breed.prot.sel.soln.MateSelectionSolution.MateSelectionSolution.neqcv"]], "nineqcv (pybrops.breed.prot.sel.soln.mateselectionsolution.mateselectionsolution property)": [[406, "pybrops.breed.prot.sel.soln.MateSelectionSolution.MateSelectionSolution.nineqcv"]], "nobj (pybrops.breed.prot.sel.soln.mateselectionsolution.mateselectionsolution property)": [[406, "pybrops.breed.prot.sel.soln.MateSelectionSolution.MateSelectionSolution.nobj"]], "nsoln (pybrops.breed.prot.sel.soln.mateselectionsolution.mateselectionsolution property)": [[406, "pybrops.breed.prot.sel.soln.MateSelectionSolution.MateSelectionSolution.nsoln"]], "obj_wt (pybrops.breed.prot.sel.soln.mateselectionsolution.mateselectionsolution property)": [[406, "pybrops.breed.prot.sel.soln.MateSelectionSolution.MateSelectionSolution.obj_wt"]], "soln_decn (pybrops.breed.prot.sel.soln.mateselectionsolution.mateselectionsolution property)": [[406, "pybrops.breed.prot.sel.soln.MateSelectionSolution.MateSelectionSolution.soln_decn"]], "soln_eqcv (pybrops.breed.prot.sel.soln.mateselectionsolution.mateselectionsolution property)": [[406, "pybrops.breed.prot.sel.soln.MateSelectionSolution.MateSelectionSolution.soln_eqcv"]], "soln_ineqcv (pybrops.breed.prot.sel.soln.mateselectionsolution.mateselectionsolution property)": [[406, "pybrops.breed.prot.sel.soln.MateSelectionSolution.MateSelectionSolution.soln_ineqcv"]], "soln_obj (pybrops.breed.prot.sel.soln.mateselectionsolution.mateselectionsolution property)": [[406, "pybrops.breed.prot.sel.soln.MateSelectionSolution.MateSelectionSolution.soln_obj"]], "check_is_mateselectionsolution() (in module pybrops.breed.prot.sel.soln.mateselectionsolution)": [[407, "pybrops.breed.prot.sel.soln.MateSelectionSolution.check_is_MateSelectionSolution"]], "pybrops.breed.prot.sel.soln.realmateselectionsolution": [[408, "module-pybrops.breed.prot.sel.soln.RealMateSelectionSolution"]], "realmateselectionsolution (class in pybrops.breed.prot.sel.soln.realmateselectionsolution)": [[409, "pybrops.breed.prot.sel.soln.RealMateSelectionSolution.RealMateSelectionSolution"]], "decn_space (pybrops.breed.prot.sel.soln.realmateselectionsolution.realmateselectionsolution property)": [[409, "pybrops.breed.prot.sel.soln.RealMateSelectionSolution.RealMateSelectionSolution.decn_space"]], "decn_space_lower (pybrops.breed.prot.sel.soln.realmateselectionsolution.realmateselectionsolution property)": [[409, "pybrops.breed.prot.sel.soln.RealMateSelectionSolution.RealMateSelectionSolution.decn_space_lower"]], "decn_space_upper (pybrops.breed.prot.sel.soln.realmateselectionsolution.realmateselectionsolution property)": [[409, "pybrops.breed.prot.sel.soln.RealMateSelectionSolution.RealMateSelectionSolution.decn_space_upper"]], "decn_space_xmap (pybrops.breed.prot.sel.soln.realmateselectionsolution.realmateselectionsolution property)": [[409, "pybrops.breed.prot.sel.soln.RealMateSelectionSolution.RealMateSelectionSolution.decn_space_xmap"]], "eqcv_wt (pybrops.breed.prot.sel.soln.realmateselectionsolution.realmateselectionsolution property)": [[409, "pybrops.breed.prot.sel.soln.RealMateSelectionSolution.RealMateSelectionSolution.eqcv_wt"]], "ineqcv_wt (pybrops.breed.prot.sel.soln.realmateselectionsolution.realmateselectionsolution property)": [[409, "pybrops.breed.prot.sel.soln.RealMateSelectionSolution.RealMateSelectionSolution.ineqcv_wt"]], "ndecn (pybrops.breed.prot.sel.soln.realmateselectionsolution.realmateselectionsolution property)": [[409, "pybrops.breed.prot.sel.soln.RealMateSelectionSolution.RealMateSelectionSolution.ndecn"]], "neqcv (pybrops.breed.prot.sel.soln.realmateselectionsolution.realmateselectionsolution property)": [[409, "pybrops.breed.prot.sel.soln.RealMateSelectionSolution.RealMateSelectionSolution.neqcv"]], "nineqcv (pybrops.breed.prot.sel.soln.realmateselectionsolution.realmateselectionsolution property)": [[409, "pybrops.breed.prot.sel.soln.RealMateSelectionSolution.RealMateSelectionSolution.nineqcv"]], "nobj (pybrops.breed.prot.sel.soln.realmateselectionsolution.realmateselectionsolution property)": [[409, "pybrops.breed.prot.sel.soln.RealMateSelectionSolution.RealMateSelectionSolution.nobj"]], "nsoln (pybrops.breed.prot.sel.soln.realmateselectionsolution.realmateselectionsolution property)": [[409, "pybrops.breed.prot.sel.soln.RealMateSelectionSolution.RealMateSelectionSolution.nsoln"]], "obj_wt (pybrops.breed.prot.sel.soln.realmateselectionsolution.realmateselectionsolution property)": [[409, "pybrops.breed.prot.sel.soln.RealMateSelectionSolution.RealMateSelectionSolution.obj_wt"]], "soln_decn (pybrops.breed.prot.sel.soln.realmateselectionsolution.realmateselectionsolution property)": [[409, "pybrops.breed.prot.sel.soln.RealMateSelectionSolution.RealMateSelectionSolution.soln_decn"]], "soln_eqcv (pybrops.breed.prot.sel.soln.realmateselectionsolution.realmateselectionsolution property)": [[409, "pybrops.breed.prot.sel.soln.RealMateSelectionSolution.RealMateSelectionSolution.soln_eqcv"]], "soln_ineqcv (pybrops.breed.prot.sel.soln.realmateselectionsolution.realmateselectionsolution property)": [[409, "pybrops.breed.prot.sel.soln.RealMateSelectionSolution.RealMateSelectionSolution.soln_ineqcv"]], "soln_obj (pybrops.breed.prot.sel.soln.realmateselectionsolution.realmateselectionsolution property)": [[409, "pybrops.breed.prot.sel.soln.RealMateSelectionSolution.RealMateSelectionSolution.soln_obj"]], "check_is_realmateselectionsolution() (in module pybrops.breed.prot.sel.soln.realmateselectionsolution)": [[410, "pybrops.breed.prot.sel.soln.RealMateSelectionSolution.check_is_RealMateSelectionSolution"]], "pybrops.breed.prot.sel.soln.realselectionsolution": [[411, "module-pybrops.breed.prot.sel.soln.RealSelectionSolution"]], "realselectionsolution (class in pybrops.breed.prot.sel.soln.realselectionsolution)": [[412, "pybrops.breed.prot.sel.soln.RealSelectionSolution.RealSelectionSolution"]], "decn_space (pybrops.breed.prot.sel.soln.realselectionsolution.realselectionsolution property)": [[412, "pybrops.breed.prot.sel.soln.RealSelectionSolution.RealSelectionSolution.decn_space"]], "decn_space_lower (pybrops.breed.prot.sel.soln.realselectionsolution.realselectionsolution property)": [[412, "pybrops.breed.prot.sel.soln.RealSelectionSolution.RealSelectionSolution.decn_space_lower"]], "decn_space_upper (pybrops.breed.prot.sel.soln.realselectionsolution.realselectionsolution property)": [[412, "pybrops.breed.prot.sel.soln.RealSelectionSolution.RealSelectionSolution.decn_space_upper"]], "eqcv_wt (pybrops.breed.prot.sel.soln.realselectionsolution.realselectionsolution property)": [[412, "pybrops.breed.prot.sel.soln.RealSelectionSolution.RealSelectionSolution.eqcv_wt"]], "ineqcv_wt (pybrops.breed.prot.sel.soln.realselectionsolution.realselectionsolution property)": [[412, "pybrops.breed.prot.sel.soln.RealSelectionSolution.RealSelectionSolution.ineqcv_wt"]], "ndecn (pybrops.breed.prot.sel.soln.realselectionsolution.realselectionsolution property)": [[412, "pybrops.breed.prot.sel.soln.RealSelectionSolution.RealSelectionSolution.ndecn"]], "neqcv (pybrops.breed.prot.sel.soln.realselectionsolution.realselectionsolution property)": [[412, "pybrops.breed.prot.sel.soln.RealSelectionSolution.RealSelectionSolution.neqcv"]], "nineqcv (pybrops.breed.prot.sel.soln.realselectionsolution.realselectionsolution property)": [[412, "pybrops.breed.prot.sel.soln.RealSelectionSolution.RealSelectionSolution.nineqcv"]], "nobj (pybrops.breed.prot.sel.soln.realselectionsolution.realselectionsolution property)": [[412, "pybrops.breed.prot.sel.soln.RealSelectionSolution.RealSelectionSolution.nobj"]], "nsoln (pybrops.breed.prot.sel.soln.realselectionsolution.realselectionsolution property)": [[412, "pybrops.breed.prot.sel.soln.RealSelectionSolution.RealSelectionSolution.nsoln"]], "obj_wt (pybrops.breed.prot.sel.soln.realselectionsolution.realselectionsolution property)": [[412, "pybrops.breed.prot.sel.soln.RealSelectionSolution.RealSelectionSolution.obj_wt"]], "soln_decn (pybrops.breed.prot.sel.soln.realselectionsolution.realselectionsolution property)": [[412, "pybrops.breed.prot.sel.soln.RealSelectionSolution.RealSelectionSolution.soln_decn"]], "soln_eqcv (pybrops.breed.prot.sel.soln.realselectionsolution.realselectionsolution property)": [[412, "pybrops.breed.prot.sel.soln.RealSelectionSolution.RealSelectionSolution.soln_eqcv"]], "soln_ineqcv (pybrops.breed.prot.sel.soln.realselectionsolution.realselectionsolution property)": [[412, "pybrops.breed.prot.sel.soln.RealSelectionSolution.RealSelectionSolution.soln_ineqcv"]], "soln_obj (pybrops.breed.prot.sel.soln.realselectionsolution.realselectionsolution property)": [[412, "pybrops.breed.prot.sel.soln.RealSelectionSolution.RealSelectionSolution.soln_obj"]], "check_is_realselectionsolution() (in module pybrops.breed.prot.sel.soln.realselectionsolution)": [[413, "pybrops.breed.prot.sel.soln.RealSelectionSolution.check_is_RealSelectionSolution"]], "pybrops.breed.prot.sel.soln.selectionsolution": [[414, "module-pybrops.breed.prot.sel.soln.SelectionSolution"]], "selectionsolution (class in pybrops.breed.prot.sel.soln.selectionsolution)": [[415, "pybrops.breed.prot.sel.soln.SelectionSolution.SelectionSolution"]], "decn_space (pybrops.breed.prot.sel.soln.selectionsolution.selectionsolution property)": [[415, "pybrops.breed.prot.sel.soln.SelectionSolution.SelectionSolution.decn_space"]], "decn_space_lower (pybrops.breed.prot.sel.soln.selectionsolution.selectionsolution property)": [[415, "pybrops.breed.prot.sel.soln.SelectionSolution.SelectionSolution.decn_space_lower"]], "decn_space_upper (pybrops.breed.prot.sel.soln.selectionsolution.selectionsolution property)": [[415, "pybrops.breed.prot.sel.soln.SelectionSolution.SelectionSolution.decn_space_upper"]], "eqcv_wt (pybrops.breed.prot.sel.soln.selectionsolution.selectionsolution property)": [[415, "pybrops.breed.prot.sel.soln.SelectionSolution.SelectionSolution.eqcv_wt"]], "ineqcv_wt (pybrops.breed.prot.sel.soln.selectionsolution.selectionsolution property)": [[415, "pybrops.breed.prot.sel.soln.SelectionSolution.SelectionSolution.ineqcv_wt"]], "ndecn (pybrops.breed.prot.sel.soln.selectionsolution.selectionsolution property)": [[415, "pybrops.breed.prot.sel.soln.SelectionSolution.SelectionSolution.ndecn"]], "neqcv (pybrops.breed.prot.sel.soln.selectionsolution.selectionsolution property)": [[415, "pybrops.breed.prot.sel.soln.SelectionSolution.SelectionSolution.neqcv"]], "nineqcv (pybrops.breed.prot.sel.soln.selectionsolution.selectionsolution property)": [[415, "pybrops.breed.prot.sel.soln.SelectionSolution.SelectionSolution.nineqcv"]], "nobj (pybrops.breed.prot.sel.soln.selectionsolution.selectionsolution property)": [[415, "pybrops.breed.prot.sel.soln.SelectionSolution.SelectionSolution.nobj"]], "nsoln (pybrops.breed.prot.sel.soln.selectionsolution.selectionsolution property)": [[415, "pybrops.breed.prot.sel.soln.SelectionSolution.SelectionSolution.nsoln"]], "obj_wt (pybrops.breed.prot.sel.soln.selectionsolution.selectionsolution property)": [[415, "pybrops.breed.prot.sel.soln.SelectionSolution.SelectionSolution.obj_wt"]], "soln_decn (pybrops.breed.prot.sel.soln.selectionsolution.selectionsolution property)": [[415, "pybrops.breed.prot.sel.soln.SelectionSolution.SelectionSolution.soln_decn"]], "soln_eqcv (pybrops.breed.prot.sel.soln.selectionsolution.selectionsolution property)": [[415, "pybrops.breed.prot.sel.soln.SelectionSolution.SelectionSolution.soln_eqcv"]], "soln_ineqcv (pybrops.breed.prot.sel.soln.selectionsolution.selectionsolution property)": [[415, "pybrops.breed.prot.sel.soln.SelectionSolution.SelectionSolution.soln_ineqcv"]], "soln_obj (pybrops.breed.prot.sel.soln.selectionsolution.selectionsolution property)": [[415, "pybrops.breed.prot.sel.soln.SelectionSolution.SelectionSolution.soln_obj"]], "check_is_selectionsolution() (in module pybrops.breed.prot.sel.soln.selectionsolution)": [[416, "pybrops.breed.prot.sel.soln.SelectionSolution.check_is_SelectionSolution"]], "pybrops.breed.prot.sel.soln.subsetmateselectionsolution": [[417, "module-pybrops.breed.prot.sel.soln.SubsetMateSelectionSolution"]], "subsetmateselectionsolution (class in pybrops.breed.prot.sel.soln.subsetmateselectionsolution)": [[418, "pybrops.breed.prot.sel.soln.SubsetMateSelectionSolution.SubsetMateSelectionSolution"]], "decn_space (pybrops.breed.prot.sel.soln.subsetmateselectionsolution.subsetmateselectionsolution property)": [[418, "pybrops.breed.prot.sel.soln.SubsetMateSelectionSolution.SubsetMateSelectionSolution.decn_space"]], "decn_space_lower (pybrops.breed.prot.sel.soln.subsetmateselectionsolution.subsetmateselectionsolution property)": [[418, "pybrops.breed.prot.sel.soln.SubsetMateSelectionSolution.SubsetMateSelectionSolution.decn_space_lower"]], "decn_space_upper (pybrops.breed.prot.sel.soln.subsetmateselectionsolution.subsetmateselectionsolution property)": [[418, "pybrops.breed.prot.sel.soln.SubsetMateSelectionSolution.SubsetMateSelectionSolution.decn_space_upper"]], "decn_space_xmap (pybrops.breed.prot.sel.soln.subsetmateselectionsolution.subsetmateselectionsolution property)": [[418, "pybrops.breed.prot.sel.soln.SubsetMateSelectionSolution.SubsetMateSelectionSolution.decn_space_xmap"]], "eqcv_wt (pybrops.breed.prot.sel.soln.subsetmateselectionsolution.subsetmateselectionsolution property)": [[418, "pybrops.breed.prot.sel.soln.SubsetMateSelectionSolution.SubsetMateSelectionSolution.eqcv_wt"]], "ineqcv_wt (pybrops.breed.prot.sel.soln.subsetmateselectionsolution.subsetmateselectionsolution property)": [[418, "pybrops.breed.prot.sel.soln.SubsetMateSelectionSolution.SubsetMateSelectionSolution.ineqcv_wt"]], "ndecn (pybrops.breed.prot.sel.soln.subsetmateselectionsolution.subsetmateselectionsolution property)": [[418, "pybrops.breed.prot.sel.soln.SubsetMateSelectionSolution.SubsetMateSelectionSolution.ndecn"]], "neqcv (pybrops.breed.prot.sel.soln.subsetmateselectionsolution.subsetmateselectionsolution property)": [[418, "pybrops.breed.prot.sel.soln.SubsetMateSelectionSolution.SubsetMateSelectionSolution.neqcv"]], "nineqcv (pybrops.breed.prot.sel.soln.subsetmateselectionsolution.subsetmateselectionsolution property)": [[418, "pybrops.breed.prot.sel.soln.SubsetMateSelectionSolution.SubsetMateSelectionSolution.nineqcv"]], "nobj (pybrops.breed.prot.sel.soln.subsetmateselectionsolution.subsetmateselectionsolution property)": [[418, "pybrops.breed.prot.sel.soln.SubsetMateSelectionSolution.SubsetMateSelectionSolution.nobj"]], "nsoln (pybrops.breed.prot.sel.soln.subsetmateselectionsolution.subsetmateselectionsolution property)": [[418, "pybrops.breed.prot.sel.soln.SubsetMateSelectionSolution.SubsetMateSelectionSolution.nsoln"]], "obj_wt (pybrops.breed.prot.sel.soln.subsetmateselectionsolution.subsetmateselectionsolution property)": [[418, "pybrops.breed.prot.sel.soln.SubsetMateSelectionSolution.SubsetMateSelectionSolution.obj_wt"]], "soln_decn (pybrops.breed.prot.sel.soln.subsetmateselectionsolution.subsetmateselectionsolution property)": [[418, "pybrops.breed.prot.sel.soln.SubsetMateSelectionSolution.SubsetMateSelectionSolution.soln_decn"]], "soln_eqcv (pybrops.breed.prot.sel.soln.subsetmateselectionsolution.subsetmateselectionsolution property)": [[418, "pybrops.breed.prot.sel.soln.SubsetMateSelectionSolution.SubsetMateSelectionSolution.soln_eqcv"]], "soln_ineqcv (pybrops.breed.prot.sel.soln.subsetmateselectionsolution.subsetmateselectionsolution property)": [[418, "pybrops.breed.prot.sel.soln.SubsetMateSelectionSolution.SubsetMateSelectionSolution.soln_ineqcv"]], "soln_obj (pybrops.breed.prot.sel.soln.subsetmateselectionsolution.subsetmateselectionsolution property)": [[418, "pybrops.breed.prot.sel.soln.SubsetMateSelectionSolution.SubsetMateSelectionSolution.soln_obj"]], "check_is_subsetmateselectionsolution() (in module pybrops.breed.prot.sel.soln.subsetmateselectionsolution)": [[419, "pybrops.breed.prot.sel.soln.SubsetMateSelectionSolution.check_is_SubsetMateSelectionSolution"]], "pybrops.breed.prot.sel.soln.subsetselectionsolution": [[420, "module-pybrops.breed.prot.sel.soln.SubsetSelectionSolution"]], "subsetselectionsolution (class in pybrops.breed.prot.sel.soln.subsetselectionsolution)": [[421, "pybrops.breed.prot.sel.soln.SubsetSelectionSolution.SubsetSelectionSolution"]], "decn_space (pybrops.breed.prot.sel.soln.subsetselectionsolution.subsetselectionsolution property)": [[421, "pybrops.breed.prot.sel.soln.SubsetSelectionSolution.SubsetSelectionSolution.decn_space"]], "decn_space_lower (pybrops.breed.prot.sel.soln.subsetselectionsolution.subsetselectionsolution property)": [[421, "pybrops.breed.prot.sel.soln.SubsetSelectionSolution.SubsetSelectionSolution.decn_space_lower"]], "decn_space_upper (pybrops.breed.prot.sel.soln.subsetselectionsolution.subsetselectionsolution property)": [[421, "pybrops.breed.prot.sel.soln.SubsetSelectionSolution.SubsetSelectionSolution.decn_space_upper"]], "eqcv_wt (pybrops.breed.prot.sel.soln.subsetselectionsolution.subsetselectionsolution property)": [[421, "pybrops.breed.prot.sel.soln.SubsetSelectionSolution.SubsetSelectionSolution.eqcv_wt"]], "ineqcv_wt (pybrops.breed.prot.sel.soln.subsetselectionsolution.subsetselectionsolution property)": [[421, "pybrops.breed.prot.sel.soln.SubsetSelectionSolution.SubsetSelectionSolution.ineqcv_wt"]], "ndecn (pybrops.breed.prot.sel.soln.subsetselectionsolution.subsetselectionsolution property)": [[421, "pybrops.breed.prot.sel.soln.SubsetSelectionSolution.SubsetSelectionSolution.ndecn"]], "neqcv (pybrops.breed.prot.sel.soln.subsetselectionsolution.subsetselectionsolution property)": [[421, "pybrops.breed.prot.sel.soln.SubsetSelectionSolution.SubsetSelectionSolution.neqcv"]], "nineqcv (pybrops.breed.prot.sel.soln.subsetselectionsolution.subsetselectionsolution property)": [[421, "pybrops.breed.prot.sel.soln.SubsetSelectionSolution.SubsetSelectionSolution.nineqcv"]], "nobj (pybrops.breed.prot.sel.soln.subsetselectionsolution.subsetselectionsolution property)": [[421, "pybrops.breed.prot.sel.soln.SubsetSelectionSolution.SubsetSelectionSolution.nobj"]], "nsoln (pybrops.breed.prot.sel.soln.subsetselectionsolution.subsetselectionsolution property)": [[421, "pybrops.breed.prot.sel.soln.SubsetSelectionSolution.SubsetSelectionSolution.nsoln"]], "obj_wt (pybrops.breed.prot.sel.soln.subsetselectionsolution.subsetselectionsolution property)": [[421, "pybrops.breed.prot.sel.soln.SubsetSelectionSolution.SubsetSelectionSolution.obj_wt"]], "soln_decn (pybrops.breed.prot.sel.soln.subsetselectionsolution.subsetselectionsolution property)": [[421, "pybrops.breed.prot.sel.soln.SubsetSelectionSolution.SubsetSelectionSolution.soln_decn"]], "soln_eqcv (pybrops.breed.prot.sel.soln.subsetselectionsolution.subsetselectionsolution property)": [[421, "pybrops.breed.prot.sel.soln.SubsetSelectionSolution.SubsetSelectionSolution.soln_eqcv"]], "soln_ineqcv (pybrops.breed.prot.sel.soln.subsetselectionsolution.subsetselectionsolution property)": [[421, "pybrops.breed.prot.sel.soln.SubsetSelectionSolution.SubsetSelectionSolution.soln_ineqcv"]], "soln_obj (pybrops.breed.prot.sel.soln.subsetselectionsolution.subsetselectionsolution property)": [[421, "pybrops.breed.prot.sel.soln.SubsetSelectionSolution.SubsetSelectionSolution.soln_obj"]], "check_is_subsetselectionsolution() (in module pybrops.breed.prot.sel.soln.subsetselectionsolution)": [[422, "pybrops.breed.prot.sel.soln.SubsetSelectionSolution.check_is_SubsetSelectionSolution"]], "pybrops.breed.prot.sel.targetfn": [[423, "module-pybrops.breed.prot.sel.targetfn"]], "target_negative() (in module pybrops.breed.prot.sel.targetfn)": [[424, "pybrops.breed.prot.sel.targetfn.target_negative"]], "target_positive() (in module pybrops.breed.prot.sel.targetfn)": [[425, "pybrops.breed.prot.sel.targetfn.target_positive"]], "target_stabilizing() (in module pybrops.breed.prot.sel.targetfn)": [[426, "pybrops.breed.prot.sel.targetfn.target_stabilizing"]], "pybrops.breed.prot.sel.transfn": [[427, "module-pybrops.breed.prot.sel.transfn"]], "trans_dot() (in module pybrops.breed.prot.sel.transfn)": [[428, "pybrops.breed.prot.sel.transfn.trans_dot"]], "trans_flatten() (in module pybrops.breed.prot.sel.transfn)": [[429, "pybrops.breed.prot.sel.transfn.trans_flatten"]], "trans_identity_unconstrained() (in module pybrops.breed.prot.sel.transfn)": [[430, "pybrops.breed.prot.sel.transfn.trans_identity_unconstrained"]], "trans_inbmax_penalty() (in module pybrops.breed.prot.sel.transfn)": [[431, "pybrops.breed.prot.sel.transfn.trans_inbmax_penalty"]], "trans_max_inbreeding_constraint() (in module pybrops.breed.prot.sel.transfn)": [[432, "pybrops.breed.prot.sel.transfn.trans_max_inbreeding_constraint"]], "trans_ndpt_to_vec_dist() (in module pybrops.breed.prot.sel.transfn)": [[433, "pybrops.breed.prot.sel.transfn.trans_ndpt_to_vec_dist"]], "trans_sum() (in module pybrops.breed.prot.sel.transfn)": [[434, "pybrops.breed.prot.sel.transfn.trans_sum"]], "trans_sum_inbmax_penalty() (in module pybrops.breed.prot.sel.transfn)": [[435, "pybrops.breed.prot.sel.transfn.trans_sum_inbmax_penalty"]], "pybrops.breed.prot.sel.weightfn": [[436, "module-pybrops.breed.prot.sel.weightfn"]], "weight_absolute() (in module pybrops.breed.prot.sel.weightfn)": [[437, "pybrops.breed.prot.sel.weightfn.weight_absolute"]], "weight_one() (in module pybrops.breed.prot.sel.weightfn)": [[438, "pybrops.breed.prot.sel.weightfn.weight_one"]], "pybrops.core": [[439, "module-pybrops.core"]], "pybrops.core.error": [[440, "module-pybrops.core.error"]], "pybrops.core.error.error_attr_python": [[441, "module-pybrops.core.error.error_attr_python"]], "check_is_callable() (in module pybrops.core.error.error_attr_python)": [[442, "pybrops.core.error.error_attr_python.check_is_callable"]], "check_is_iterable() (in module pybrops.core.error.error_attr_python)": [[443, "pybrops.core.error.error_attr_python.check_is_iterable"]], "error_readonly() (in module pybrops.core.error.error_attr_python)": [[444, "pybrops.core.error.error_attr_python.error_readonly"]], "pybrops.core.error.error_generic_numpy": [[445, "module-pybrops.core.error.error_generic_numpy"]], "generic_check_ndarray_eq() (in module pybrops.core.error.error_generic_numpy)": [[446, "pybrops.core.error.error_generic_numpy.generic_check_ndarray_eq"]], "generic_check_ndarray_is_square() (in module pybrops.core.error.error_generic_numpy)": [[447, "pybrops.core.error.error_generic_numpy.generic_check_ndarray_is_square"]], "generic_check_ndarray_ndim() (in module pybrops.core.error.error_generic_numpy)": [[448, "pybrops.core.error.error_generic_numpy.generic_check_ndarray_ndim"]], "generic_check_ndarray_ndim_gteq() (in module pybrops.core.error.error_generic_numpy)": [[449, "pybrops.core.error.error_generic_numpy.generic_check_ndarray_ndim_gteq"]], "generic_check_ndarray_shape() (in module pybrops.core.error.error_generic_numpy)": [[450, "pybrops.core.error.error_generic_numpy.generic_check_ndarray_shape"]], "generic_check_ndarray_size() (in module pybrops.core.error.error_generic_numpy)": [[451, "pybrops.core.error.error_generic_numpy.generic_check_ndarray_size"]], "generic_check_ndarray_sum() (in module pybrops.core.error.error_generic_numpy)": [[452, "pybrops.core.error.error_generic_numpy.generic_check_ndarray_sum"]], "pybrops.core.error.error_generic_python": [[453, "module-pybrops.core.error.error_generic_python"]], "generic_check_isinstance() (in module pybrops.core.error.error_generic_python)": [[454, "pybrops.core.error.error_generic_python.generic_check_isinstance"]], "pybrops.core.error.error_io_python": [[455, "module-pybrops.core.error.error_io_python"]], "check_directory_exists() (in module pybrops.core.error.error_io_python)": [[456, "pybrops.core.error.error_io_python.check_directory_exists"]], "check_file_exists() (in module pybrops.core.error.error_io_python)": [[457, "pybrops.core.error.error_io_python.check_file_exists"]], "check_path_exists() (in module pybrops.core.error.error_io_python)": [[458, "pybrops.core.error.error_io_python.check_path_exists"]], "pybrops.core.error.error_type_h5py": [[459, "module-pybrops.core.error.error_type_h5py"]], "check_is_h5py_file() (in module pybrops.core.error.error_type_h5py)": [[460, "pybrops.core.error.error_type_h5py.check_is_h5py_File"]], "pybrops.core.error.error_type_numpy": [[461, "module-pybrops.core.error.error_type_numpy"]], "check_is_generator() (in module pybrops.core.error.error_type_numpy)": [[462, "pybrops.core.error.error_type_numpy.check_is_Generator"]], "check_is_generator_or_randomstate() (in module pybrops.core.error.error_type_numpy)": [[463, "pybrops.core.error.error_type_numpy.check_is_Generator_or_RandomState"]], "check_is_integral_or_ndarray() (in module pybrops.core.error.error_type_numpy)": [[464, "pybrops.core.error.error_type_numpy.check_is_Integral_or_ndarray"]], "check_is_number_or_ndarray() (in module pybrops.core.error.error_type_numpy)": [[465, "pybrops.core.error.error_type_numpy.check_is_Number_or_ndarray"]], "check_is_randomstate() (in module pybrops.core.error.error_type_numpy)": [[466, "pybrops.core.error.error_type_numpy.check_is_RandomState"]], "check_is_real_or_ndarray() (in module pybrops.core.error.error_type_numpy)": [[467, "pybrops.core.error.error_type_numpy.check_is_Real_or_ndarray"]], "check_is_ndarray() (in module pybrops.core.error.error_type_numpy)": [[468, "pybrops.core.error.error_type_numpy.check_is_ndarray"]], "check_is_str_or_ndarray() (in module pybrops.core.error.error_type_numpy)": [[469, "pybrops.core.error.error_type_numpy.check_is_str_or_ndarray"]], "check_ndarray_dtype() (in module pybrops.core.error.error_type_numpy)": [[470, "pybrops.core.error.error_type_numpy.check_ndarray_dtype"]], "check_ndarray_dtype_is_bool() (in module pybrops.core.error.error_type_numpy)": [[471, "pybrops.core.error.error_type_numpy.check_ndarray_dtype_is_bool"]], "check_ndarray_dtype_is_bool_or_integer() (in module pybrops.core.error.error_type_numpy)": [[472, "pybrops.core.error.error_type_numpy.check_ndarray_dtype_is_bool_or_integer"]], "check_ndarray_dtype_is_bool_or_number() (in module pybrops.core.error.error_type_numpy)": [[473, "pybrops.core.error.error_type_numpy.check_ndarray_dtype_is_bool_or_number"]], "check_ndarray_dtype_is_float16() (in module pybrops.core.error.error_type_numpy)": [[474, "pybrops.core.error.error_type_numpy.check_ndarray_dtype_is_float16"]], "check_ndarray_dtype_is_float32() (in module pybrops.core.error.error_type_numpy)": [[475, "pybrops.core.error.error_type_numpy.check_ndarray_dtype_is_float32"]], "check_ndarray_dtype_is_float64() (in module pybrops.core.error.error_type_numpy)": [[476, "pybrops.core.error.error_type_numpy.check_ndarray_dtype_is_float64"]], "check_ndarray_dtype_is_floating() (in module pybrops.core.error.error_type_numpy)": [[477, "pybrops.core.error.error_type_numpy.check_ndarray_dtype_is_floating"]], "check_ndarray_dtype_is_int16() (in module pybrops.core.error.error_type_numpy)": [[478, "pybrops.core.error.error_type_numpy.check_ndarray_dtype_is_int16"]], "check_ndarray_dtype_is_int32() (in module pybrops.core.error.error_type_numpy)": [[479, "pybrops.core.error.error_type_numpy.check_ndarray_dtype_is_int32"]], "check_ndarray_dtype_is_int64() (in module pybrops.core.error.error_type_numpy)": [[480, "pybrops.core.error.error_type_numpy.check_ndarray_dtype_is_int64"]], "check_ndarray_dtype_is_int8() (in module pybrops.core.error.error_type_numpy)": [[481, "pybrops.core.error.error_type_numpy.check_ndarray_dtype_is_int8"]], "check_ndarray_dtype_is_integer() (in module pybrops.core.error.error_type_numpy)": [[482, "pybrops.core.error.error_type_numpy.check_ndarray_dtype_is_integer"]], "check_ndarray_dtype_is_integer_or_floating() (in module pybrops.core.error.error_type_numpy)": [[483, "pybrops.core.error.error_type_numpy.check_ndarray_dtype_is_integer_or_floating"]], "check_ndarray_dtype_is_number() (in module pybrops.core.error.error_type_numpy)": [[484, "pybrops.core.error.error_type_numpy.check_ndarray_dtype_is_number"]], "check_ndarray_dtype_is_object() (in module pybrops.core.error.error_type_numpy)": [[485, "pybrops.core.error.error_type_numpy.check_ndarray_dtype_is_object"]], "check_ndarray_dtype_is_object_or_string() (in module pybrops.core.error.error_type_numpy)": [[486, "pybrops.core.error.error_type_numpy.check_ndarray_dtype_is_object_or_string"]], "check_ndarray_dtype_is_real() (in module pybrops.core.error.error_type_numpy)": [[487, "pybrops.core.error.error_type_numpy.check_ndarray_dtype_is_real"]], "check_ndarray_dtype_is_string() (in module pybrops.core.error.error_type_numpy)": [[488, "pybrops.core.error.error_type_numpy.check_ndarray_dtype_is_string"]], "check_ndarray_dtype_is_unicode() (in module pybrops.core.error.error_type_numpy)": [[489, "pybrops.core.error.error_type_numpy.check_ndarray_dtype_is_unicode"]], "pybrops.core.error.error_type_pandas": [[490, "module-pybrops.core.error.error_type_pandas"]], "check_series_all_type() (in module pybrops.core.error.error_type_pandas)": [[491, "pybrops.core.error.error_type_pandas.check_Series_all_type"]], "check_is_pandas_dataframe() (in module pybrops.core.error.error_type_pandas)": [[492, "pybrops.core.error.error_type_pandas.check_is_pandas_DataFrame"]], "pybrops.core.error.error_type_python": [[493, "module-pybrops.core.error.error_type_python"]], "check_sequence_all_type() (in module pybrops.core.error.error_type_python)": [[494, "pybrops.core.error.error_type_python.check_Sequence_all_type"]], "check_inherits() (in module pybrops.core.error.error_type_python)": [[495, "pybrops.core.error.error_type_python.check_inherits"]], "check_is_callable() (in module pybrops.core.error.error_type_python)": [[496, "pybrops.core.error.error_type_python.check_is_Callable"]], "check_is_complex() (in module pybrops.core.error.error_type_python)": [[497, "pybrops.core.error.error_type_python.check_is_Complex"]], "check_is_container() (in module pybrops.core.error.error_type_python)": [[498, "pybrops.core.error.error_type_python.check_is_Container"]], "check_is_integral() (in module pybrops.core.error.error_type_python)": [[499, "pybrops.core.error.error_type_python.check_is_Integral"]], "check_is_integral_or_none() (in module pybrops.core.error.error_type_python)": [[500, "pybrops.core.error.error_type_python.check_is_Integral_or_None"]], "check_is_integral_or_inf() (in module pybrops.core.error.error_type_python)": [[501, "pybrops.core.error.error_type_python.check_is_Integral_or_inf"]], "check_is_number() (in module pybrops.core.error.error_type_python)": [[502, "pybrops.core.error.error_type_python.check_is_Number"]], "check_is_real() (in module pybrops.core.error.error_type_python)": [[503, "pybrops.core.error.error_type_python.check_is_Real"]], "check_is_sequence() (in module pybrops.core.error.error_type_python)": [[504, "pybrops.core.error.error_type_python.check_is_Sequence"]], "check_is_array_like() (in module pybrops.core.error.error_type_python)": [[505, "pybrops.core.error.error_type_python.check_is_array_like"]], "check_is_bool() (in module pybrops.core.error.error_type_python)": [[506, "pybrops.core.error.error_type_python.check_is_bool"]], "check_is_bytes() (in module pybrops.core.error.error_type_python)": [[507, "pybrops.core.error.error_type_python.check_is_bytes"]], "check_is_class() (in module pybrops.core.error.error_type_python)": [[508, "pybrops.core.error.error_type_python.check_is_class"]], "check_is_dict() (in module pybrops.core.error.error_type_python)": [[509, "pybrops.core.error.error_type_python.check_is_dict"]], "check_is_float() (in module pybrops.core.error.error_type_python)": [[510, "pybrops.core.error.error_type_python.check_is_float"]], "check_is_frozenset() (in module pybrops.core.error.error_type_python)": [[511, "pybrops.core.error.error_type_python.check_is_frozenset"]], "check_is_int() (in module pybrops.core.error.error_type_python)": [[512, "pybrops.core.error.error_type_python.check_is_int"]], "check_is_int_or_none() (in module pybrops.core.error.error_type_python)": [[513, "pybrops.core.error.error_type_python.check_is_int_or_None"]], "check_is_int_or_inf() (in module pybrops.core.error.error_type_python)": [[514, "pybrops.core.error.error_type_python.check_is_int_or_inf"]], "check_is_list() (in module pybrops.core.error.error_type_python)": [[515, "pybrops.core.error.error_type_python.check_is_list"]], "check_is_list_or_tuple() (in module pybrops.core.error.error_type_python)": [[516, "pybrops.core.error.error_type_python.check_is_list_or_tuple"]], "check_is_range() (in module pybrops.core.error.error_type_python)": [[517, "pybrops.core.error.error_type_python.check_is_range"]], "check_is_set() (in module pybrops.core.error.error_type_python)": [[518, "pybrops.core.error.error_type_python.check_is_set"]], "check_is_str() (in module pybrops.core.error.error_type_python)": [[519, "pybrops.core.error.error_type_python.check_is_str"]], "check_is_str_or_integral() (in module pybrops.core.error.error_type_python)": [[520, "pybrops.core.error.error_type_python.check_is_str_or_Integral"]], "check_is_str_or_sequence() (in module pybrops.core.error.error_type_python)": [[521, "pybrops.core.error.error_type_python.check_is_str_or_Sequence"]], "check_is_str_or_iterable() (in module pybrops.core.error.error_type_python)": [[522, "pybrops.core.error.error_type_python.check_is_str_or_iterable"]], "check_is_tuple() (in module pybrops.core.error.error_type_python)": [[523, "pybrops.core.error.error_type_python.check_is_tuple"]], "check_is_type() (in module pybrops.core.error.error_type_python)": [[524, "pybrops.core.error.error_type_python.check_is_type"]], "check_isinstance() (in module pybrops.core.error.error_type_python)": [[525, "pybrops.core.error.error_type_python.check_isinstance"]], "pybrops.core.error.error_value_h5py": [[526, "module-pybrops.core.error.error_value_h5py"]], "check_h5py_file_has_group() (in module pybrops.core.error.error_value_h5py)": [[527, "pybrops.core.error.error_value_h5py.check_h5py_File_has_group"]], "check_h5py_file_has_groups() (in module pybrops.core.error.error_value_h5py)": [[528, "pybrops.core.error.error_value_h5py.check_h5py_File_has_groups"]], "check_h5py_file_is_writable() (in module pybrops.core.error.error_value_h5py)": [[529, "pybrops.core.error.error_value_h5py.check_h5py_File_is_writable"]], "pybrops.core.error.error_value_numpy": [[530, "module-pybrops.core.error.error_value_numpy"]], "check_ndarray_all_gt() (in module pybrops.core.error.error_value_numpy)": [[531, "pybrops.core.error.error_value_numpy.check_ndarray_all_gt"]], "check_ndarray_all_gteq() (in module pybrops.core.error.error_value_numpy)": [[532, "pybrops.core.error.error_value_numpy.check_ndarray_all_gteq"]], "check_ndarray_axis_len() (in module pybrops.core.error.error_value_numpy)": [[533, "pybrops.core.error.error_value_numpy.check_ndarray_axis_len"]], "check_ndarray_axis_len_eq() (in module pybrops.core.error.error_value_numpy)": [[534, "pybrops.core.error.error_value_numpy.check_ndarray_axis_len_eq"]], "check_ndarray_axis_len_gt() (in module pybrops.core.error.error_value_numpy)": [[535, "pybrops.core.error.error_value_numpy.check_ndarray_axis_len_gt"]], "check_ndarray_axis_len_gteq() (in module pybrops.core.error.error_value_numpy)": [[536, "pybrops.core.error.error_value_numpy.check_ndarray_axis_len_gteq"]], "check_ndarray_axis_len_lt() (in module pybrops.core.error.error_value_numpy)": [[537, "pybrops.core.error.error_value_numpy.check_ndarray_axis_len_lt"]], "check_ndarray_axis_len_lteq() (in module pybrops.core.error.error_value_numpy)": [[538, "pybrops.core.error.error_value_numpy.check_ndarray_axis_len_lteq"]], "check_ndarray_eq() (in module pybrops.core.error.error_value_numpy)": [[539, "pybrops.core.error.error_value_numpy.check_ndarray_eq"]], "check_ndarray_has_value() (in module pybrops.core.error.error_value_numpy)": [[540, "pybrops.core.error.error_value_numpy.check_ndarray_has_value"]], "check_ndarray_has_values() (in module pybrops.core.error.error_value_numpy)": [[541, "pybrops.core.error.error_value_numpy.check_ndarray_has_values"]], "check_ndarray_in_interval() (in module pybrops.core.error.error_value_numpy)": [[542, "pybrops.core.error.error_value_numpy.check_ndarray_in_interval"]], "check_ndarray_is_binary() (in module pybrops.core.error.error_value_numpy)": [[543, "pybrops.core.error.error_value_numpy.check_ndarray_is_binary"]], "check_ndarray_is_hypercube() (in module pybrops.core.error.error_value_numpy)": [[544, "pybrops.core.error.error_value_numpy.check_ndarray_is_hypercube"]], "check_ndarray_is_square() (in module pybrops.core.error.error_value_numpy)": [[545, "pybrops.core.error.error_value_numpy.check_ndarray_is_square"]], "check_ndarray_is_triu() (in module pybrops.core.error.error_value_numpy)": [[546, "pybrops.core.error.error_value_numpy.check_ndarray_is_triu"]], "check_ndarray_len_eq() (in module pybrops.core.error.error_value_numpy)": [[547, "pybrops.core.error.error_value_numpy.check_ndarray_len_eq"]], "check_ndarray_len_gteq() (in module pybrops.core.error.error_value_numpy)": [[548, "pybrops.core.error.error_value_numpy.check_ndarray_len_gteq"]], "check_ndarray_len_is_multiple_of() (in module pybrops.core.error.error_value_numpy)": [[549, "pybrops.core.error.error_value_numpy.check_ndarray_len_is_multiple_of"]], "check_ndarray_mean_is_approx() (in module pybrops.core.error.error_value_numpy)": [[550, "pybrops.core.error.error_value_numpy.check_ndarray_mean_is_approx"]], "check_ndarray_ndim() (in module pybrops.core.error.error_value_numpy)": [[551, "pybrops.core.error.error_value_numpy.check_ndarray_ndim"]], "check_ndarray_ndim_gteq() (in module pybrops.core.error.error_value_numpy)": [[552, "pybrops.core.error.error_value_numpy.check_ndarray_ndim_gteq"]], "check_ndarray_shape_eq() (in module pybrops.core.error.error_value_numpy)": [[553, "pybrops.core.error.error_value_numpy.check_ndarray_shape_eq"]], "check_ndarray_size() (in module pybrops.core.error.error_value_numpy)": [[554, "pybrops.core.error.error_value_numpy.check_ndarray_size"]], "check_ndarray_std_is_approx() (in module pybrops.core.error.error_value_numpy)": [[555, "pybrops.core.error.error_value_numpy.check_ndarray_std_is_approx"]], "check_ndarray_sum() (in module pybrops.core.error.error_value_numpy)": [[556, "pybrops.core.error.error_value_numpy.check_ndarray_sum"]], "pybrops.core.error.error_value_pandas": [[557, "module-pybrops.core.error.error_value_pandas"]], "check_pandas_dataframe_has_column() (in module pybrops.core.error.error_value_pandas)": [[558, "pybrops.core.error.error_value_pandas.check_pandas_DataFrame_has_column"]], "check_pandas_dataframe_has_column_index() (in module pybrops.core.error.error_value_pandas)": [[559, "pybrops.core.error.error_value_pandas.check_pandas_DataFrame_has_column_index"]], "check_pandas_dataframe_has_column_indices() (in module pybrops.core.error.error_value_pandas)": [[560, "pybrops.core.error.error_value_pandas.check_pandas_DataFrame_has_column_indices"]], "check_pandas_dataframe_has_columns() (in module pybrops.core.error.error_value_pandas)": [[561, "pybrops.core.error.error_value_pandas.check_pandas_DataFrame_has_columns"]], "check_pandas_series_has_index() (in module pybrops.core.error.error_value_pandas)": [[562, "pybrops.core.error.error_value_pandas.check_pandas_Series_has_index"]], "check_pandas_series_has_indices() (in module pybrops.core.error.error_value_pandas)": [[563, "pybrops.core.error.error_value_pandas.check_pandas_Series_has_indices"]], "check_pandas_series_has_value() (in module pybrops.core.error.error_value_pandas)": [[564, "pybrops.core.error.error_value_pandas.check_pandas_Series_has_value"]], "check_pandas_series_has_values() (in module pybrops.core.error.error_value_pandas)": [[565, "pybrops.core.error.error_value_pandas.check_pandas_Series_has_values"]], "pybrops.core.error.error_value_python": [[566, "module-pybrops.core.error.error_value_python"]], "check_sequence_has_index() (in module pybrops.core.error.error_value_python)": [[567, "pybrops.core.error.error_value_python.check_Sequence_has_index"]], "check_sequence_has_indices() (in module pybrops.core.error.error_value_python)": [[568, "pybrops.core.error.error_value_python.check_Sequence_has_indices"]], "check_sequence_has_value() (in module pybrops.core.error.error_value_python)": [[569, "pybrops.core.error.error_value_python.check_Sequence_has_value"]], "check_sequence_has_values() (in module pybrops.core.error.error_value_python)": [[570, "pybrops.core.error.error_value_python.check_Sequence_has_values"]], "check_all_equal() (in module pybrops.core.error.error_value_python)": [[571, "pybrops.core.error.error_value_python.check_all_equal"]], "check_dict_has_keys() (in module pybrops.core.error.error_value_python)": [[572, "pybrops.core.error.error_value_python.check_dict_has_keys"]], "check_dict_keys_all_type() (in module pybrops.core.error.error_value_python)": [[573, "pybrops.core.error.error_value_python.check_dict_keys_all_type"]], "check_dict_values_all_type() (in module pybrops.core.error.error_value_python)": [[574, "pybrops.core.error.error_value_python.check_dict_values_all_type"]], "check_dict_values_have_equal_len() (in module pybrops.core.error.error_value_python)": [[575, "pybrops.core.error.error_value_python.check_dict_values_have_equal_len"]], "check_dict_values_len_eq() (in module pybrops.core.error.error_value_python)": [[576, "pybrops.core.error.error_value_python.check_dict_values_len_eq"]], "check_is_eq() (in module pybrops.core.error.error_value_python)": [[577, "pybrops.core.error.error_value_python.check_is_eq"]], "check_is_gt() (in module pybrops.core.error.error_value_python)": [[578, "pybrops.core.error.error_value_python.check_is_gt"]], "check_is_gteq() (in module pybrops.core.error.error_value_python)": [[579, "pybrops.core.error.error_value_python.check_is_gteq"]], "check_is_in_interval_exclusive() (in module pybrops.core.error.error_value_python)": [[580, "pybrops.core.error.error_value_python.check_is_in_interval_exclusive"]], "check_is_in_interval_inclusive() (in module pybrops.core.error.error_value_python)": [[581, "pybrops.core.error.error_value_python.check_is_in_interval_inclusive"]], "check_is_lt() (in module pybrops.core.error.error_value_python)": [[582, "pybrops.core.error.error_value_python.check_is_lt"]], "check_is_lteq() (in module pybrops.core.error.error_value_python)": [[583, "pybrops.core.error.error_value_python.check_is_lteq"]], "check_is_neq() (in module pybrops.core.error.error_value_python)": [[584, "pybrops.core.error.error_value_python.check_is_neq"]], "check_is_not_none() (in module pybrops.core.error.error_value_python)": [[585, "pybrops.core.error.error_value_python.check_is_not_None"]], "check_len() (in module pybrops.core.error.error_value_python)": [[586, "pybrops.core.error.error_value_python.check_len"]], "check_len_eq() (in module pybrops.core.error.error_value_python)": [[587, "pybrops.core.error.error_value_python.check_len_eq"]], "check_str_value() (in module pybrops.core.error.error_value_python)": [[588, "pybrops.core.error.error_value_python.check_str_value"]], "check_tuple_len_eq() (in module pybrops.core.error.error_value_python)": [[589, "pybrops.core.error.error_value_python.check_tuple_len_eq"]], "pybrops.core.io": [[590, "module-pybrops.core.io"]], "pybrops.core.io.csvdictinputoutput": [[591, "module-pybrops.core.io.CSVDictInputOutput"]], "csvdictinputoutput (class in pybrops.core.io.csvdictinputoutput)": [[592, "pybrops.core.io.CSVDictInputOutput.CSVDictInputOutput"]], "from_csv_dict() (pybrops.core.io.csvdictinputoutput.csvdictinputoutput class method)": [[592, "pybrops.core.io.CSVDictInputOutput.CSVDictInputOutput.from_csv_dict"]], "to_csv_dict() (pybrops.core.io.csvdictinputoutput.csvdictinputoutput method)": [[592, "pybrops.core.io.CSVDictInputOutput.CSVDictInputOutput.to_csv_dict"]], "check_is_csvdictinputoutput() (in module pybrops.core.io.csvdictinputoutput)": [[593, "pybrops.core.io.CSVDictInputOutput.check_is_CSVDictInputOutput"]], "pybrops.core.io.csvinputoutput": [[594, "module-pybrops.core.io.CSVInputOutput"]], "csvinputoutput (class in pybrops.core.io.csvinputoutput)": [[595, "pybrops.core.io.CSVInputOutput.CSVInputOutput"]], "from_csv() (pybrops.core.io.csvinputoutput.csvinputoutput class method)": [[595, "pybrops.core.io.CSVInputOutput.CSVInputOutput.from_csv"]], "to_csv() (pybrops.core.io.csvinputoutput.csvinputoutput method)": [[595, "pybrops.core.io.CSVInputOutput.CSVInputOutput.to_csv"]], "check_is_csvinputoutput() (in module pybrops.core.io.csvinputoutput)": [[596, "pybrops.core.io.CSVInputOutput.check_is_CSVInputOutput"]], "pybrops.core.io.dictinputoutput": [[597, "module-pybrops.core.io.DictInputOutput"]], "dictinputoutput (class in pybrops.core.io.dictinputoutput)": [[598, "pybrops.core.io.DictInputOutput.DictInputOutput"]], "from_dict() (pybrops.core.io.dictinputoutput.dictinputoutput class method)": [[598, "pybrops.core.io.DictInputOutput.DictInputOutput.from_dict"]], "to_dict() (pybrops.core.io.dictinputoutput.dictinputoutput method)": [[598, "pybrops.core.io.DictInputOutput.DictInputOutput.to_dict"]], "check_is_dictinputoutput() (in module pybrops.core.io.dictinputoutput)": [[599, "pybrops.core.io.DictInputOutput.check_is_DictInputOutput"]], "pybrops.core.io.hdf5inputoutput": [[600, "module-pybrops.core.io.HDF5InputOutput"]], "hdf5inputoutput (class in pybrops.core.io.hdf5inputoutput)": [[601, "pybrops.core.io.HDF5InputOutput.HDF5InputOutput"]], "from_hdf5() (pybrops.core.io.hdf5inputoutput.hdf5inputoutput class method)": [[601, "pybrops.core.io.HDF5InputOutput.HDF5InputOutput.from_hdf5"]], "to_hdf5() (pybrops.core.io.hdf5inputoutput.hdf5inputoutput method)": [[601, "pybrops.core.io.HDF5InputOutput.HDF5InputOutput.to_hdf5"]], "check_is_hdf5inputoutput() (in module pybrops.core.io.hdf5inputoutput)": [[602, "pybrops.core.io.HDF5InputOutput.check_is_HDF5InputOutput"]], "pybrops.core.io.npyinputoutput": [[603, "module-pybrops.core.io.NPYInputOutput"]], "npyinputoutput (class in pybrops.core.io.npyinputoutput)": [[604, "pybrops.core.io.NPYInputOutput.NPYInputOutput"]], "from_npy() (pybrops.core.io.npyinputoutput.npyinputoutput class method)": [[604, "pybrops.core.io.NPYInputOutput.NPYInputOutput.from_npy"]], "to_npy() (pybrops.core.io.npyinputoutput.npyinputoutput method)": [[604, "pybrops.core.io.NPYInputOutput.NPYInputOutput.to_npy"]], "check_is_npyinputoutput() (in module pybrops.core.io.npyinputoutput)": [[605, "pybrops.core.io.NPYInputOutput.check_is_NPYInputOutput"]], "pybrops.core.io.npzinputoutput": [[606, "module-pybrops.core.io.NPZInputOutput"]], "npzinputoutput (class in pybrops.core.io.npzinputoutput)": [[607, "pybrops.core.io.NPZInputOutput.NPZInputOutput"]], "from_npz() (pybrops.core.io.npzinputoutput.npzinputoutput class method)": [[607, "pybrops.core.io.NPZInputOutput.NPZInputOutput.from_npz"]], "to_npz() (pybrops.core.io.npzinputoutput.npzinputoutput method)": [[607, "pybrops.core.io.NPZInputOutput.NPZInputOutput.to_npz"]], "check_is_npzinputoutput() (in module pybrops.core.io.npzinputoutput)": [[608, "pybrops.core.io.NPZInputOutput.check_is_NPZInputOutput"]], "pybrops.core.io.numpyinputoutput": [[609, "module-pybrops.core.io.NumPyInputOutput"]], "numpyinputoutput (class in pybrops.core.io.numpyinputoutput)": [[610, "pybrops.core.io.NumPyInputOutput.NumPyInputOutput"]], "from_numpy() (pybrops.core.io.numpyinputoutput.numpyinputoutput class method)": [[610, "pybrops.core.io.NumPyInputOutput.NumPyInputOutput.from_numpy"]], "to_numpy() (pybrops.core.io.numpyinputoutput.numpyinputoutput method)": [[610, "pybrops.core.io.NumPyInputOutput.NumPyInputOutput.to_numpy"]], "check_is_numpyinputoutput() (in module pybrops.core.io.numpyinputoutput)": [[611, "pybrops.core.io.NumPyInputOutput.check_is_NumPyInputOutput"]], "pybrops.core.io.pandasdictinputoutput": [[612, "module-pybrops.core.io.PandasDictInputOutput"]], "pandasdictinputoutput (class in pybrops.core.io.pandasdictinputoutput)": [[613, "pybrops.core.io.PandasDictInputOutput.PandasDictInputOutput"]], "from_pandas_dict() (pybrops.core.io.pandasdictinputoutput.pandasdictinputoutput class method)": [[613, "pybrops.core.io.PandasDictInputOutput.PandasDictInputOutput.from_pandas_dict"]], "to_pandas_dict() (pybrops.core.io.pandasdictinputoutput.pandasdictinputoutput method)": [[613, "pybrops.core.io.PandasDictInputOutput.PandasDictInputOutput.to_pandas_dict"]], "check_is_pandasdictinputoutput() (in module pybrops.core.io.pandasdictinputoutput)": [[614, "pybrops.core.io.PandasDictInputOutput.check_is_PandasDictInputOutput"]], "pybrops.core.io.pandasinputoutput": [[615, "module-pybrops.core.io.PandasInputOutput"]], "pandasinputoutput (class in pybrops.core.io.pandasinputoutput)": [[616, "pybrops.core.io.PandasInputOutput.PandasInputOutput"]], "from_pandas() (pybrops.core.io.pandasinputoutput.pandasinputoutput class method)": [[616, "pybrops.core.io.PandasInputOutput.PandasInputOutput.from_pandas"]], "to_pandas() (pybrops.core.io.pandasinputoutput.pandasinputoutput method)": [[616, "pybrops.core.io.PandasInputOutput.PandasInputOutput.to_pandas"]], "check_is_pandasinputoutput() (in module pybrops.core.io.pandasinputoutput)": [[617, "pybrops.core.io.PandasInputOutput.check_is_PandasInputOutput"]], "pybrops.core.mat": [[618, "module-pybrops.core.mat"]], "pybrops.core.mat.densematrix": [[619, "module-pybrops.core.mat.DenseMatrix"]], "densematrix (class in pybrops.core.mat.densematrix)": [[620, "pybrops.core.mat.DenseMatrix.DenseMatrix"]], "__add__() (pybrops.core.mat.densematrix.densematrix method)": [[620, "pybrops.core.mat.DenseMatrix.DenseMatrix.__add__"]], "__mul__() (pybrops.core.mat.densematrix.densematrix method)": [[620, "pybrops.core.mat.DenseMatrix.DenseMatrix.__mul__"]], "adjoin() (pybrops.core.mat.densematrix.densematrix method)": [[620, "pybrops.core.mat.DenseMatrix.DenseMatrix.adjoin"]], "concat() (pybrops.core.mat.densematrix.densematrix static method)": [[620, "pybrops.core.mat.DenseMatrix.DenseMatrix.concat"]], "copy() (pybrops.core.mat.densematrix.densematrix method)": [[620, "pybrops.core.mat.DenseMatrix.DenseMatrix.copy"]], "deepcopy() (pybrops.core.mat.densematrix.densematrix method)": [[620, "pybrops.core.mat.DenseMatrix.DenseMatrix.deepcopy"]], "delete() (pybrops.core.mat.densematrix.densematrix method)": [[620, "pybrops.core.mat.DenseMatrix.DenseMatrix.delete"]], "from_hdf5() (pybrops.core.mat.densematrix.densematrix class method)": [[620, "pybrops.core.mat.DenseMatrix.DenseMatrix.from_hdf5"]], "insert() (pybrops.core.mat.densematrix.densematrix method)": [[620, "pybrops.core.mat.DenseMatrix.DenseMatrix.insert"]], "mat (pybrops.core.mat.densematrix.densematrix property)": [[620, "pybrops.core.mat.DenseMatrix.DenseMatrix.mat"]], "mat_ndim (pybrops.core.mat.densematrix.densematrix property)": [[620, "pybrops.core.mat.DenseMatrix.DenseMatrix.mat_ndim"]], "mat_shape (pybrops.core.mat.densematrix.densematrix property)": [[620, "pybrops.core.mat.DenseMatrix.DenseMatrix.mat_shape"]], "select() (pybrops.core.mat.densematrix.densematrix method)": [[620, "pybrops.core.mat.DenseMatrix.DenseMatrix.select"]], "to_hdf5() (pybrops.core.mat.densematrix.densematrix method)": [[620, "pybrops.core.mat.DenseMatrix.DenseMatrix.to_hdf5"]], "check_is_densematrix() (in module pybrops.core.mat.densematrix)": [[621, "pybrops.core.mat.DenseMatrix.check_is_DenseMatrix"]], "pybrops.core.mat.densemutablematrix": [[622, "module-pybrops.core.mat.DenseMutableMatrix"]], "densemutablematrix (class in pybrops.core.mat.densemutablematrix)": [[623, "pybrops.core.mat.DenseMutableMatrix.DenseMutableMatrix"]], "__add__() (pybrops.core.mat.densemutablematrix.densemutablematrix method)": [[623, "pybrops.core.mat.DenseMutableMatrix.DenseMutableMatrix.__add__"]], "__mul__() (pybrops.core.mat.densemutablematrix.densemutablematrix method)": [[623, "pybrops.core.mat.DenseMutableMatrix.DenseMutableMatrix.__mul__"]], "adjoin() (pybrops.core.mat.densemutablematrix.densemutablematrix method)": [[623, "pybrops.core.mat.DenseMutableMatrix.DenseMutableMatrix.adjoin"]], "append() (pybrops.core.mat.densemutablematrix.densemutablematrix method)": [[623, "pybrops.core.mat.DenseMutableMatrix.DenseMutableMatrix.append"]], "concat() (pybrops.core.mat.densemutablematrix.densemutablematrix static method)": [[623, "pybrops.core.mat.DenseMutableMatrix.DenseMutableMatrix.concat"]], "copy() (pybrops.core.mat.densemutablematrix.densemutablematrix method)": [[623, "pybrops.core.mat.DenseMutableMatrix.DenseMutableMatrix.copy"]], "deepcopy() (pybrops.core.mat.densemutablematrix.densemutablematrix method)": [[623, "pybrops.core.mat.DenseMutableMatrix.DenseMutableMatrix.deepcopy"]], "delete() (pybrops.core.mat.densemutablematrix.densemutablematrix method)": [[623, "pybrops.core.mat.DenseMutableMatrix.DenseMutableMatrix.delete"]], "from_hdf5() (pybrops.core.mat.densemutablematrix.densemutablematrix class method)": [[623, "pybrops.core.mat.DenseMutableMatrix.DenseMutableMatrix.from_hdf5"]], "incorp() (pybrops.core.mat.densemutablematrix.densemutablematrix method)": [[623, "pybrops.core.mat.DenseMutableMatrix.DenseMutableMatrix.incorp"]], "insert() (pybrops.core.mat.densemutablematrix.densemutablematrix method)": [[623, "pybrops.core.mat.DenseMutableMatrix.DenseMutableMatrix.insert"]], "mat (pybrops.core.mat.densemutablematrix.densemutablematrix property)": [[623, "pybrops.core.mat.DenseMutableMatrix.DenseMutableMatrix.mat"]], "mat_ndim (pybrops.core.mat.densemutablematrix.densemutablematrix property)": [[623, "pybrops.core.mat.DenseMutableMatrix.DenseMutableMatrix.mat_ndim"]], "mat_shape (pybrops.core.mat.densemutablematrix.densemutablematrix property)": [[623, "pybrops.core.mat.DenseMutableMatrix.DenseMutableMatrix.mat_shape"]], "remove() (pybrops.core.mat.densemutablematrix.densemutablematrix method)": [[623, "pybrops.core.mat.DenseMutableMatrix.DenseMutableMatrix.remove"]], "select() (pybrops.core.mat.densemutablematrix.densemutablematrix method)": [[623, "pybrops.core.mat.DenseMutableMatrix.DenseMutableMatrix.select"]], "to_hdf5() (pybrops.core.mat.densemutablematrix.densemutablematrix method)": [[623, "pybrops.core.mat.DenseMutableMatrix.DenseMutableMatrix.to_hdf5"]], "check_is_densemutablematrix() (in module pybrops.core.mat.densemutablematrix)": [[624, "pybrops.core.mat.DenseMutableMatrix.check_is_DenseMutableMatrix"]], "pybrops.core.mat.densephasedmatrix": [[625, "module-pybrops.core.mat.DensePhasedMatrix"]], "densephasedmatrix (class in pybrops.core.mat.densephasedmatrix)": [[626, "pybrops.core.mat.DensePhasedMatrix.DensePhasedMatrix"]], "__add__() (pybrops.core.mat.densephasedmatrix.densephasedmatrix method)": [[626, "pybrops.core.mat.DensePhasedMatrix.DensePhasedMatrix.__add__"]], "__mul__() (pybrops.core.mat.densephasedmatrix.densephasedmatrix method)": [[626, "pybrops.core.mat.DensePhasedMatrix.DensePhasedMatrix.__mul__"]], "adjoin() (pybrops.core.mat.densephasedmatrix.densephasedmatrix method)": [[626, "pybrops.core.mat.DensePhasedMatrix.DensePhasedMatrix.adjoin"]], "adjoin_phase() (pybrops.core.mat.densephasedmatrix.densephasedmatrix method)": [[626, "pybrops.core.mat.DensePhasedMatrix.DensePhasedMatrix.adjoin_phase"]], "append() (pybrops.core.mat.densephasedmatrix.densephasedmatrix method)": [[626, "pybrops.core.mat.DensePhasedMatrix.DensePhasedMatrix.append"]], "append_phase() (pybrops.core.mat.densephasedmatrix.densephasedmatrix method)": [[626, "pybrops.core.mat.DensePhasedMatrix.DensePhasedMatrix.append_phase"]], "concat() (pybrops.core.mat.densephasedmatrix.densephasedmatrix class method)": [[626, "pybrops.core.mat.DensePhasedMatrix.DensePhasedMatrix.concat"]], "concat_phase() (pybrops.core.mat.densephasedmatrix.densephasedmatrix class method)": [[626, "pybrops.core.mat.DensePhasedMatrix.DensePhasedMatrix.concat_phase"]], "copy() (pybrops.core.mat.densephasedmatrix.densephasedmatrix method)": [[626, "pybrops.core.mat.DensePhasedMatrix.DensePhasedMatrix.copy"]], "deepcopy() (pybrops.core.mat.densephasedmatrix.densephasedmatrix method)": [[626, "pybrops.core.mat.DensePhasedMatrix.DensePhasedMatrix.deepcopy"]], "delete() (pybrops.core.mat.densephasedmatrix.densephasedmatrix method)": [[626, "pybrops.core.mat.DensePhasedMatrix.DensePhasedMatrix.delete"]], "delete_phase() (pybrops.core.mat.densephasedmatrix.densephasedmatrix method)": [[626, "pybrops.core.mat.DensePhasedMatrix.DensePhasedMatrix.delete_phase"]], "from_hdf5() (pybrops.core.mat.densephasedmatrix.densephasedmatrix class method)": [[626, "pybrops.core.mat.DensePhasedMatrix.DensePhasedMatrix.from_hdf5"]], "incorp() (pybrops.core.mat.densephasedmatrix.densephasedmatrix method)": [[626, "pybrops.core.mat.DensePhasedMatrix.DensePhasedMatrix.incorp"]], "incorp_phase() (pybrops.core.mat.densephasedmatrix.densephasedmatrix method)": [[626, "pybrops.core.mat.DensePhasedMatrix.DensePhasedMatrix.incorp_phase"]], "insert() (pybrops.core.mat.densephasedmatrix.densephasedmatrix method)": [[626, "pybrops.core.mat.DensePhasedMatrix.DensePhasedMatrix.insert"]], "insert_phase() (pybrops.core.mat.densephasedmatrix.densephasedmatrix method)": [[626, "pybrops.core.mat.DensePhasedMatrix.DensePhasedMatrix.insert_phase"]], "mat (pybrops.core.mat.densephasedmatrix.densephasedmatrix property)": [[626, "pybrops.core.mat.DensePhasedMatrix.DensePhasedMatrix.mat"]], "mat_ndim (pybrops.core.mat.densephasedmatrix.densephasedmatrix property)": [[626, "pybrops.core.mat.DensePhasedMatrix.DensePhasedMatrix.mat_ndim"]], "mat_shape (pybrops.core.mat.densephasedmatrix.densephasedmatrix property)": [[626, "pybrops.core.mat.DensePhasedMatrix.DensePhasedMatrix.mat_shape"]], "nphase (pybrops.core.mat.densephasedmatrix.densephasedmatrix property)": [[626, "pybrops.core.mat.DensePhasedMatrix.DensePhasedMatrix.nphase"]], "phase_axis (pybrops.core.mat.densephasedmatrix.densephasedmatrix property)": [[626, "pybrops.core.mat.DensePhasedMatrix.DensePhasedMatrix.phase_axis"]], "remove() (pybrops.core.mat.densephasedmatrix.densephasedmatrix method)": [[626, "pybrops.core.mat.DensePhasedMatrix.DensePhasedMatrix.remove"]], "remove_phase() (pybrops.core.mat.densephasedmatrix.densephasedmatrix method)": [[626, "pybrops.core.mat.DensePhasedMatrix.DensePhasedMatrix.remove_phase"]], "select() (pybrops.core.mat.densephasedmatrix.densephasedmatrix method)": [[626, "pybrops.core.mat.DensePhasedMatrix.DensePhasedMatrix.select"]], "select_phase() (pybrops.core.mat.densephasedmatrix.densephasedmatrix method)": [[626, "pybrops.core.mat.DensePhasedMatrix.DensePhasedMatrix.select_phase"]], "to_hdf5() (pybrops.core.mat.densephasedmatrix.densephasedmatrix method)": [[626, "pybrops.core.mat.DensePhasedMatrix.DensePhasedMatrix.to_hdf5"]], "check_is_densephasedmatrix() (in module pybrops.core.mat.densephasedmatrix)": [[627, "pybrops.core.mat.DensePhasedMatrix.check_is_DensePhasedMatrix"]], "pybrops.core.mat.densephasedtaxavariantmatrix": [[628, "module-pybrops.core.mat.DensePhasedTaxaVariantMatrix"]], "densephasedtaxavariantmatrix (class in pybrops.core.mat.densephasedtaxavariantmatrix)": [[629, "pybrops.core.mat.DensePhasedTaxaVariantMatrix.DensePhasedTaxaVariantMatrix"]], "__add__() (pybrops.core.mat.densephasedtaxavariantmatrix.densephasedtaxavariantmatrix method)": [[629, "pybrops.core.mat.DensePhasedTaxaVariantMatrix.DensePhasedTaxaVariantMatrix.__add__"]], "__mul__() (pybrops.core.mat.densephasedtaxavariantmatrix.densephasedtaxavariantmatrix method)": [[629, "pybrops.core.mat.DensePhasedTaxaVariantMatrix.DensePhasedTaxaVariantMatrix.__mul__"]], "adjoin() (pybrops.core.mat.densephasedtaxavariantmatrix.densephasedtaxavariantmatrix method)": [[629, "pybrops.core.mat.DensePhasedTaxaVariantMatrix.DensePhasedTaxaVariantMatrix.adjoin"]], "adjoin_phase() (pybrops.core.mat.densephasedtaxavariantmatrix.densephasedtaxavariantmatrix method)": [[629, "pybrops.core.mat.DensePhasedTaxaVariantMatrix.DensePhasedTaxaVariantMatrix.adjoin_phase"]], "adjoin_taxa() (pybrops.core.mat.densephasedtaxavariantmatrix.densephasedtaxavariantmatrix method)": [[629, "pybrops.core.mat.DensePhasedTaxaVariantMatrix.DensePhasedTaxaVariantMatrix.adjoin_taxa"]], "adjoin_vrnt() (pybrops.core.mat.densephasedtaxavariantmatrix.densephasedtaxavariantmatrix method)": [[629, "pybrops.core.mat.DensePhasedTaxaVariantMatrix.DensePhasedTaxaVariantMatrix.adjoin_vrnt"]], "append() (pybrops.core.mat.densephasedtaxavariantmatrix.densephasedtaxavariantmatrix method)": [[629, "pybrops.core.mat.DensePhasedTaxaVariantMatrix.DensePhasedTaxaVariantMatrix.append"]], "append_phase() (pybrops.core.mat.densephasedtaxavariantmatrix.densephasedtaxavariantmatrix method)": [[629, "pybrops.core.mat.DensePhasedTaxaVariantMatrix.DensePhasedTaxaVariantMatrix.append_phase"]], "append_taxa() (pybrops.core.mat.densephasedtaxavariantmatrix.densephasedtaxavariantmatrix method)": [[629, "pybrops.core.mat.DensePhasedTaxaVariantMatrix.DensePhasedTaxaVariantMatrix.append_taxa"]], "append_vrnt() (pybrops.core.mat.densephasedtaxavariantmatrix.densephasedtaxavariantmatrix method)": [[629, "pybrops.core.mat.DensePhasedTaxaVariantMatrix.DensePhasedTaxaVariantMatrix.append_vrnt"]], "concat() (pybrops.core.mat.densephasedtaxavariantmatrix.densephasedtaxavariantmatrix class method)": [[629, "pybrops.core.mat.DensePhasedTaxaVariantMatrix.DensePhasedTaxaVariantMatrix.concat"]], "concat_phase() (pybrops.core.mat.densephasedtaxavariantmatrix.densephasedtaxavariantmatrix class method)": [[629, "pybrops.core.mat.DensePhasedTaxaVariantMatrix.DensePhasedTaxaVariantMatrix.concat_phase"]], "concat_taxa() (pybrops.core.mat.densephasedtaxavariantmatrix.densephasedtaxavariantmatrix class method)": [[629, "pybrops.core.mat.DensePhasedTaxaVariantMatrix.DensePhasedTaxaVariantMatrix.concat_taxa"]], "concat_vrnt() (pybrops.core.mat.densephasedtaxavariantmatrix.densephasedtaxavariantmatrix class method)": [[629, "pybrops.core.mat.DensePhasedTaxaVariantMatrix.DensePhasedTaxaVariantMatrix.concat_vrnt"]], "copy() (pybrops.core.mat.densephasedtaxavariantmatrix.densephasedtaxavariantmatrix method)": [[629, "pybrops.core.mat.DensePhasedTaxaVariantMatrix.DensePhasedTaxaVariantMatrix.copy"]], "deepcopy() (pybrops.core.mat.densephasedtaxavariantmatrix.densephasedtaxavariantmatrix method)": [[629, "pybrops.core.mat.DensePhasedTaxaVariantMatrix.DensePhasedTaxaVariantMatrix.deepcopy"]], "delete() (pybrops.core.mat.densephasedtaxavariantmatrix.densephasedtaxavariantmatrix method)": [[629, "pybrops.core.mat.DensePhasedTaxaVariantMatrix.DensePhasedTaxaVariantMatrix.delete"]], "delete_phase() (pybrops.core.mat.densephasedtaxavariantmatrix.densephasedtaxavariantmatrix method)": [[629, "pybrops.core.mat.DensePhasedTaxaVariantMatrix.DensePhasedTaxaVariantMatrix.delete_phase"]], "delete_taxa() (pybrops.core.mat.densephasedtaxavariantmatrix.densephasedtaxavariantmatrix method)": [[629, "pybrops.core.mat.DensePhasedTaxaVariantMatrix.DensePhasedTaxaVariantMatrix.delete_taxa"]], "delete_vrnt() (pybrops.core.mat.densephasedtaxavariantmatrix.densephasedtaxavariantmatrix method)": [[629, "pybrops.core.mat.DensePhasedTaxaVariantMatrix.DensePhasedTaxaVariantMatrix.delete_vrnt"]], "from_hdf5() (pybrops.core.mat.densephasedtaxavariantmatrix.densephasedtaxavariantmatrix class method)": [[629, "pybrops.core.mat.DensePhasedTaxaVariantMatrix.DensePhasedTaxaVariantMatrix.from_hdf5"]], "group() (pybrops.core.mat.densephasedtaxavariantmatrix.densephasedtaxavariantmatrix method)": [[629, "pybrops.core.mat.DensePhasedTaxaVariantMatrix.DensePhasedTaxaVariantMatrix.group"]], "group_taxa() (pybrops.core.mat.densephasedtaxavariantmatrix.densephasedtaxavariantmatrix method)": [[629, "pybrops.core.mat.DensePhasedTaxaVariantMatrix.DensePhasedTaxaVariantMatrix.group_taxa"]], "group_vrnt() (pybrops.core.mat.densephasedtaxavariantmatrix.densephasedtaxavariantmatrix method)": [[629, "pybrops.core.mat.DensePhasedTaxaVariantMatrix.DensePhasedTaxaVariantMatrix.group_vrnt"]], "incorp() (pybrops.core.mat.densephasedtaxavariantmatrix.densephasedtaxavariantmatrix method)": [[629, "pybrops.core.mat.DensePhasedTaxaVariantMatrix.DensePhasedTaxaVariantMatrix.incorp"]], "incorp_phase() (pybrops.core.mat.densephasedtaxavariantmatrix.densephasedtaxavariantmatrix method)": [[629, "pybrops.core.mat.DensePhasedTaxaVariantMatrix.DensePhasedTaxaVariantMatrix.incorp_phase"]], "incorp_taxa() (pybrops.core.mat.densephasedtaxavariantmatrix.densephasedtaxavariantmatrix method)": [[629, "pybrops.core.mat.DensePhasedTaxaVariantMatrix.DensePhasedTaxaVariantMatrix.incorp_taxa"]], "incorp_vrnt() (pybrops.core.mat.densephasedtaxavariantmatrix.densephasedtaxavariantmatrix method)": [[629, "pybrops.core.mat.DensePhasedTaxaVariantMatrix.DensePhasedTaxaVariantMatrix.incorp_vrnt"]], "insert() (pybrops.core.mat.densephasedtaxavariantmatrix.densephasedtaxavariantmatrix method)": [[629, "pybrops.core.mat.DensePhasedTaxaVariantMatrix.DensePhasedTaxaVariantMatrix.insert"]], "insert_phase() (pybrops.core.mat.densephasedtaxavariantmatrix.densephasedtaxavariantmatrix method)": [[629, "pybrops.core.mat.DensePhasedTaxaVariantMatrix.DensePhasedTaxaVariantMatrix.insert_phase"]], "insert_taxa() (pybrops.core.mat.densephasedtaxavariantmatrix.densephasedtaxavariantmatrix method)": [[629, "pybrops.core.mat.DensePhasedTaxaVariantMatrix.DensePhasedTaxaVariantMatrix.insert_taxa"]], "insert_vrnt() (pybrops.core.mat.densephasedtaxavariantmatrix.densephasedtaxavariantmatrix method)": [[629, "pybrops.core.mat.DensePhasedTaxaVariantMatrix.DensePhasedTaxaVariantMatrix.insert_vrnt"]], "is_grouped() (pybrops.core.mat.densephasedtaxavariantmatrix.densephasedtaxavariantmatrix method)": [[629, "pybrops.core.mat.DensePhasedTaxaVariantMatrix.DensePhasedTaxaVariantMatrix.is_grouped"]], "is_grouped_taxa() (pybrops.core.mat.densephasedtaxavariantmatrix.densephasedtaxavariantmatrix method)": [[629, "pybrops.core.mat.DensePhasedTaxaVariantMatrix.DensePhasedTaxaVariantMatrix.is_grouped_taxa"]], "is_grouped_vrnt() (pybrops.core.mat.densephasedtaxavariantmatrix.densephasedtaxavariantmatrix method)": [[629, "pybrops.core.mat.DensePhasedTaxaVariantMatrix.DensePhasedTaxaVariantMatrix.is_grouped_vrnt"]], "lexsort() (pybrops.core.mat.densephasedtaxavariantmatrix.densephasedtaxavariantmatrix method)": [[629, "pybrops.core.mat.DensePhasedTaxaVariantMatrix.DensePhasedTaxaVariantMatrix.lexsort"]], "lexsort_taxa() (pybrops.core.mat.densephasedtaxavariantmatrix.densephasedtaxavariantmatrix method)": [[629, "pybrops.core.mat.DensePhasedTaxaVariantMatrix.DensePhasedTaxaVariantMatrix.lexsort_taxa"]], "lexsort_vrnt() (pybrops.core.mat.densephasedtaxavariantmatrix.densephasedtaxavariantmatrix method)": [[629, "pybrops.core.mat.DensePhasedTaxaVariantMatrix.DensePhasedTaxaVariantMatrix.lexsort_vrnt"]], "mat (pybrops.core.mat.densephasedtaxavariantmatrix.densephasedtaxavariantmatrix property)": [[629, "pybrops.core.mat.DensePhasedTaxaVariantMatrix.DensePhasedTaxaVariantMatrix.mat"]], "mat_ndim (pybrops.core.mat.densephasedtaxavariantmatrix.densephasedtaxavariantmatrix property)": [[629, "pybrops.core.mat.DensePhasedTaxaVariantMatrix.DensePhasedTaxaVariantMatrix.mat_ndim"]], "mat_shape (pybrops.core.mat.densephasedtaxavariantmatrix.densephasedtaxavariantmatrix property)": [[629, "pybrops.core.mat.DensePhasedTaxaVariantMatrix.DensePhasedTaxaVariantMatrix.mat_shape"]], "nphase (pybrops.core.mat.densephasedtaxavariantmatrix.densephasedtaxavariantmatrix property)": [[629, "pybrops.core.mat.DensePhasedTaxaVariantMatrix.DensePhasedTaxaVariantMatrix.nphase"]], "ntaxa (pybrops.core.mat.densephasedtaxavariantmatrix.densephasedtaxavariantmatrix property)": [[629, "pybrops.core.mat.DensePhasedTaxaVariantMatrix.DensePhasedTaxaVariantMatrix.ntaxa"]], "nvrnt (pybrops.core.mat.densephasedtaxavariantmatrix.densephasedtaxavariantmatrix property)": [[629, "pybrops.core.mat.DensePhasedTaxaVariantMatrix.DensePhasedTaxaVariantMatrix.nvrnt"]], "phase_axis (pybrops.core.mat.densephasedtaxavariantmatrix.densephasedtaxavariantmatrix property)": [[629, "pybrops.core.mat.DensePhasedTaxaVariantMatrix.DensePhasedTaxaVariantMatrix.phase_axis"]], "remove() (pybrops.core.mat.densephasedtaxavariantmatrix.densephasedtaxavariantmatrix method)": [[629, "pybrops.core.mat.DensePhasedTaxaVariantMatrix.DensePhasedTaxaVariantMatrix.remove"]], "remove_phase() (pybrops.core.mat.densephasedtaxavariantmatrix.densephasedtaxavariantmatrix method)": [[629, "pybrops.core.mat.DensePhasedTaxaVariantMatrix.DensePhasedTaxaVariantMatrix.remove_phase"]], "remove_taxa() (pybrops.core.mat.densephasedtaxavariantmatrix.densephasedtaxavariantmatrix method)": [[629, "pybrops.core.mat.DensePhasedTaxaVariantMatrix.DensePhasedTaxaVariantMatrix.remove_taxa"]], "remove_vrnt() (pybrops.core.mat.densephasedtaxavariantmatrix.densephasedtaxavariantmatrix method)": [[629, "pybrops.core.mat.DensePhasedTaxaVariantMatrix.DensePhasedTaxaVariantMatrix.remove_vrnt"]], "reorder() (pybrops.core.mat.densephasedtaxavariantmatrix.densephasedtaxavariantmatrix method)": [[629, "pybrops.core.mat.DensePhasedTaxaVariantMatrix.DensePhasedTaxaVariantMatrix.reorder"]], "reorder_taxa() (pybrops.core.mat.densephasedtaxavariantmatrix.densephasedtaxavariantmatrix method)": [[629, "pybrops.core.mat.DensePhasedTaxaVariantMatrix.DensePhasedTaxaVariantMatrix.reorder_taxa"]], "reorder_vrnt() (pybrops.core.mat.densephasedtaxavariantmatrix.densephasedtaxavariantmatrix method)": [[629, "pybrops.core.mat.DensePhasedTaxaVariantMatrix.DensePhasedTaxaVariantMatrix.reorder_vrnt"]], "select() (pybrops.core.mat.densephasedtaxavariantmatrix.densephasedtaxavariantmatrix method)": [[629, "pybrops.core.mat.DensePhasedTaxaVariantMatrix.DensePhasedTaxaVariantMatrix.select"]], "select_phase() (pybrops.core.mat.densephasedtaxavariantmatrix.densephasedtaxavariantmatrix method)": [[629, "pybrops.core.mat.DensePhasedTaxaVariantMatrix.DensePhasedTaxaVariantMatrix.select_phase"]], "select_taxa() (pybrops.core.mat.densephasedtaxavariantmatrix.densephasedtaxavariantmatrix method)": [[629, "pybrops.core.mat.DensePhasedTaxaVariantMatrix.DensePhasedTaxaVariantMatrix.select_taxa"]], "select_vrnt() (pybrops.core.mat.densephasedtaxavariantmatrix.densephasedtaxavariantmatrix method)": [[629, "pybrops.core.mat.DensePhasedTaxaVariantMatrix.DensePhasedTaxaVariantMatrix.select_vrnt"]], "sort() (pybrops.core.mat.densephasedtaxavariantmatrix.densephasedtaxavariantmatrix method)": [[629, "pybrops.core.mat.DensePhasedTaxaVariantMatrix.DensePhasedTaxaVariantMatrix.sort"]], "sort_taxa() (pybrops.core.mat.densephasedtaxavariantmatrix.densephasedtaxavariantmatrix method)": [[629, "pybrops.core.mat.DensePhasedTaxaVariantMatrix.DensePhasedTaxaVariantMatrix.sort_taxa"]], "sort_vrnt() (pybrops.core.mat.densephasedtaxavariantmatrix.densephasedtaxavariantmatrix method)": [[629, "pybrops.core.mat.DensePhasedTaxaVariantMatrix.DensePhasedTaxaVariantMatrix.sort_vrnt"]], "taxa (pybrops.core.mat.densephasedtaxavariantmatrix.densephasedtaxavariantmatrix property)": [[629, "pybrops.core.mat.DensePhasedTaxaVariantMatrix.DensePhasedTaxaVariantMatrix.taxa"]], "taxa_axis (pybrops.core.mat.densephasedtaxavariantmatrix.densephasedtaxavariantmatrix property)": [[629, "pybrops.core.mat.DensePhasedTaxaVariantMatrix.DensePhasedTaxaVariantMatrix.taxa_axis"]], "taxa_grp (pybrops.core.mat.densephasedtaxavariantmatrix.densephasedtaxavariantmatrix property)": [[629, "pybrops.core.mat.DensePhasedTaxaVariantMatrix.DensePhasedTaxaVariantMatrix.taxa_grp"]], "taxa_grp_len (pybrops.core.mat.densephasedtaxavariantmatrix.densephasedtaxavariantmatrix property)": [[629, "pybrops.core.mat.DensePhasedTaxaVariantMatrix.DensePhasedTaxaVariantMatrix.taxa_grp_len"]], "taxa_grp_name (pybrops.core.mat.densephasedtaxavariantmatrix.densephasedtaxavariantmatrix property)": [[629, "pybrops.core.mat.DensePhasedTaxaVariantMatrix.DensePhasedTaxaVariantMatrix.taxa_grp_name"]], "taxa_grp_spix (pybrops.core.mat.densephasedtaxavariantmatrix.densephasedtaxavariantmatrix property)": [[629, "pybrops.core.mat.DensePhasedTaxaVariantMatrix.DensePhasedTaxaVariantMatrix.taxa_grp_spix"]], "taxa_grp_stix (pybrops.core.mat.densephasedtaxavariantmatrix.densephasedtaxavariantmatrix property)": [[629, "pybrops.core.mat.DensePhasedTaxaVariantMatrix.DensePhasedTaxaVariantMatrix.taxa_grp_stix"]], "to_hdf5() (pybrops.core.mat.densephasedtaxavariantmatrix.densephasedtaxavariantmatrix method)": [[629, "pybrops.core.mat.DensePhasedTaxaVariantMatrix.DensePhasedTaxaVariantMatrix.to_hdf5"]], "ungroup() (pybrops.core.mat.densephasedtaxavariantmatrix.densephasedtaxavariantmatrix method)": [[629, "pybrops.core.mat.DensePhasedTaxaVariantMatrix.DensePhasedTaxaVariantMatrix.ungroup"]], "ungroup_taxa() (pybrops.core.mat.densephasedtaxavariantmatrix.densephasedtaxavariantmatrix method)": [[629, "pybrops.core.mat.DensePhasedTaxaVariantMatrix.DensePhasedTaxaVariantMatrix.ungroup_taxa"]], "ungroup_vrnt() (pybrops.core.mat.densephasedtaxavariantmatrix.densephasedtaxavariantmatrix method)": [[629, "pybrops.core.mat.DensePhasedTaxaVariantMatrix.DensePhasedTaxaVariantMatrix.ungroup_vrnt"]], "vrnt_axis (pybrops.core.mat.densephasedtaxavariantmatrix.densephasedtaxavariantmatrix property)": [[629, "pybrops.core.mat.DensePhasedTaxaVariantMatrix.DensePhasedTaxaVariantMatrix.vrnt_axis"]], "vrnt_chrgrp (pybrops.core.mat.densephasedtaxavariantmatrix.densephasedtaxavariantmatrix property)": [[629, "pybrops.core.mat.DensePhasedTaxaVariantMatrix.DensePhasedTaxaVariantMatrix.vrnt_chrgrp"]], "vrnt_chrgrp_len (pybrops.core.mat.densephasedtaxavariantmatrix.densephasedtaxavariantmatrix property)": [[629, "pybrops.core.mat.DensePhasedTaxaVariantMatrix.DensePhasedTaxaVariantMatrix.vrnt_chrgrp_len"]], "vrnt_chrgrp_name (pybrops.core.mat.densephasedtaxavariantmatrix.densephasedtaxavariantmatrix property)": [[629, "pybrops.core.mat.DensePhasedTaxaVariantMatrix.DensePhasedTaxaVariantMatrix.vrnt_chrgrp_name"]], "vrnt_chrgrp_spix (pybrops.core.mat.densephasedtaxavariantmatrix.densephasedtaxavariantmatrix property)": [[629, "pybrops.core.mat.DensePhasedTaxaVariantMatrix.DensePhasedTaxaVariantMatrix.vrnt_chrgrp_spix"]], "vrnt_chrgrp_stix (pybrops.core.mat.densephasedtaxavariantmatrix.densephasedtaxavariantmatrix property)": [[629, "pybrops.core.mat.DensePhasedTaxaVariantMatrix.DensePhasedTaxaVariantMatrix.vrnt_chrgrp_stix"]], "vrnt_genpos (pybrops.core.mat.densephasedtaxavariantmatrix.densephasedtaxavariantmatrix property)": [[629, "pybrops.core.mat.DensePhasedTaxaVariantMatrix.DensePhasedTaxaVariantMatrix.vrnt_genpos"]], "vrnt_hapalt (pybrops.core.mat.densephasedtaxavariantmatrix.densephasedtaxavariantmatrix property)": [[629, "pybrops.core.mat.DensePhasedTaxaVariantMatrix.DensePhasedTaxaVariantMatrix.vrnt_hapalt"]], "vrnt_hapgrp (pybrops.core.mat.densephasedtaxavariantmatrix.densephasedtaxavariantmatrix property)": [[629, "pybrops.core.mat.DensePhasedTaxaVariantMatrix.DensePhasedTaxaVariantMatrix.vrnt_hapgrp"]], "vrnt_hapref (pybrops.core.mat.densephasedtaxavariantmatrix.densephasedtaxavariantmatrix property)": [[629, "pybrops.core.mat.DensePhasedTaxaVariantMatrix.DensePhasedTaxaVariantMatrix.vrnt_hapref"]], "vrnt_mask (pybrops.core.mat.densephasedtaxavariantmatrix.densephasedtaxavariantmatrix property)": [[629, "pybrops.core.mat.DensePhasedTaxaVariantMatrix.DensePhasedTaxaVariantMatrix.vrnt_mask"]], "vrnt_name (pybrops.core.mat.densephasedtaxavariantmatrix.densephasedtaxavariantmatrix property)": [[629, "pybrops.core.mat.DensePhasedTaxaVariantMatrix.DensePhasedTaxaVariantMatrix.vrnt_name"]], "vrnt_phypos (pybrops.core.mat.densephasedtaxavariantmatrix.densephasedtaxavariantmatrix property)": [[629, "pybrops.core.mat.DensePhasedTaxaVariantMatrix.DensePhasedTaxaVariantMatrix.vrnt_phypos"]], "vrnt_xoprob (pybrops.core.mat.densephasedtaxavariantmatrix.densephasedtaxavariantmatrix property)": [[629, "pybrops.core.mat.DensePhasedTaxaVariantMatrix.DensePhasedTaxaVariantMatrix.vrnt_xoprob"]], "check_is_densephasedtaxavariantmatrix() (in module pybrops.core.mat.densephasedtaxavariantmatrix)": [[630, "pybrops.core.mat.DensePhasedTaxaVariantMatrix.check_is_DensePhasedTaxaVariantMatrix"]], "pybrops.core.mat.densesquarematrix": [[631, "module-pybrops.core.mat.DenseSquareMatrix"]], "densesquarematrix (class in pybrops.core.mat.densesquarematrix)": [[632, "pybrops.core.mat.DenseSquareMatrix.DenseSquareMatrix"]], "__add__() (pybrops.core.mat.densesquarematrix.densesquarematrix method)": [[632, "pybrops.core.mat.DenseSquareMatrix.DenseSquareMatrix.__add__"]], "__mul__() (pybrops.core.mat.densesquarematrix.densesquarematrix method)": [[632, "pybrops.core.mat.DenseSquareMatrix.DenseSquareMatrix.__mul__"]], "adjoin() (pybrops.core.mat.densesquarematrix.densesquarematrix method)": [[632, "pybrops.core.mat.DenseSquareMatrix.DenseSquareMatrix.adjoin"]], "concat() (pybrops.core.mat.densesquarematrix.densesquarematrix static method)": [[632, "pybrops.core.mat.DenseSquareMatrix.DenseSquareMatrix.concat"]], "copy() (pybrops.core.mat.densesquarematrix.densesquarematrix method)": [[632, "pybrops.core.mat.DenseSquareMatrix.DenseSquareMatrix.copy"]], "deepcopy() (pybrops.core.mat.densesquarematrix.densesquarematrix method)": [[632, "pybrops.core.mat.DenseSquareMatrix.DenseSquareMatrix.deepcopy"]], "delete() (pybrops.core.mat.densesquarematrix.densesquarematrix method)": [[632, "pybrops.core.mat.DenseSquareMatrix.DenseSquareMatrix.delete"]], "from_hdf5() (pybrops.core.mat.densesquarematrix.densesquarematrix class method)": [[632, "pybrops.core.mat.DenseSquareMatrix.DenseSquareMatrix.from_hdf5"]], "insert() (pybrops.core.mat.densesquarematrix.densesquarematrix method)": [[632, "pybrops.core.mat.DenseSquareMatrix.DenseSquareMatrix.insert"]], "is_square() (pybrops.core.mat.densesquarematrix.densesquarematrix method)": [[632, "pybrops.core.mat.DenseSquareMatrix.DenseSquareMatrix.is_square"]], "mat (pybrops.core.mat.densesquarematrix.densesquarematrix property)": [[632, "pybrops.core.mat.DenseSquareMatrix.DenseSquareMatrix.mat"]], "mat_ndim (pybrops.core.mat.densesquarematrix.densesquarematrix property)": [[632, "pybrops.core.mat.DenseSquareMatrix.DenseSquareMatrix.mat_ndim"]], "mat_shape (pybrops.core.mat.densesquarematrix.densesquarematrix property)": [[632, "pybrops.core.mat.DenseSquareMatrix.DenseSquareMatrix.mat_shape"]], "nsquare (pybrops.core.mat.densesquarematrix.densesquarematrix property)": [[632, "pybrops.core.mat.DenseSquareMatrix.DenseSquareMatrix.nsquare"]], "select() (pybrops.core.mat.densesquarematrix.densesquarematrix method)": [[632, "pybrops.core.mat.DenseSquareMatrix.DenseSquareMatrix.select"]], "square_axes (pybrops.core.mat.densesquarematrix.densesquarematrix property)": [[632, "pybrops.core.mat.DenseSquareMatrix.DenseSquareMatrix.square_axes"]], "square_axes_len (pybrops.core.mat.densesquarematrix.densesquarematrix property)": [[632, "pybrops.core.mat.DenseSquareMatrix.DenseSquareMatrix.square_axes_len"]], "to_hdf5() (pybrops.core.mat.densesquarematrix.densesquarematrix method)": [[632, "pybrops.core.mat.DenseSquareMatrix.DenseSquareMatrix.to_hdf5"]], "check_is_densesquarematrix() (in module pybrops.core.mat.densesquarematrix)": [[633, "pybrops.core.mat.DenseSquareMatrix.check_is_DenseSquareMatrix"]], "pybrops.core.mat.densesquaretaxamatrix": [[634, "module-pybrops.core.mat.DenseSquareTaxaMatrix"]], "densesquaretaxamatrix (class in pybrops.core.mat.densesquaretaxamatrix)": [[635, "pybrops.core.mat.DenseSquareTaxaMatrix.DenseSquareTaxaMatrix"]], "__add__() (pybrops.core.mat.densesquaretaxamatrix.densesquaretaxamatrix method)": [[635, "pybrops.core.mat.DenseSquareTaxaMatrix.DenseSquareTaxaMatrix.__add__"]], "__mul__() (pybrops.core.mat.densesquaretaxamatrix.densesquaretaxamatrix method)": [[635, "pybrops.core.mat.DenseSquareTaxaMatrix.DenseSquareTaxaMatrix.__mul__"]], "adjoin() (pybrops.core.mat.densesquaretaxamatrix.densesquaretaxamatrix method)": [[635, "pybrops.core.mat.DenseSquareTaxaMatrix.DenseSquareTaxaMatrix.adjoin"]], "adjoin_taxa() (pybrops.core.mat.densesquaretaxamatrix.densesquaretaxamatrix method)": [[635, "pybrops.core.mat.DenseSquareTaxaMatrix.DenseSquareTaxaMatrix.adjoin_taxa"]], "append() (pybrops.core.mat.densesquaretaxamatrix.densesquaretaxamatrix method)": [[635, "pybrops.core.mat.DenseSquareTaxaMatrix.DenseSquareTaxaMatrix.append"]], "append_taxa() (pybrops.core.mat.densesquaretaxamatrix.densesquaretaxamatrix method)": [[635, "pybrops.core.mat.DenseSquareTaxaMatrix.DenseSquareTaxaMatrix.append_taxa"]], "concat() (pybrops.core.mat.densesquaretaxamatrix.densesquaretaxamatrix class method)": [[635, "pybrops.core.mat.DenseSquareTaxaMatrix.DenseSquareTaxaMatrix.concat"]], "concat_taxa() (pybrops.core.mat.densesquaretaxamatrix.densesquaretaxamatrix class method)": [[635, "pybrops.core.mat.DenseSquareTaxaMatrix.DenseSquareTaxaMatrix.concat_taxa"]], "copy() (pybrops.core.mat.densesquaretaxamatrix.densesquaretaxamatrix method)": [[635, "pybrops.core.mat.DenseSquareTaxaMatrix.DenseSquareTaxaMatrix.copy"]], "deepcopy() (pybrops.core.mat.densesquaretaxamatrix.densesquaretaxamatrix method)": [[635, "pybrops.core.mat.DenseSquareTaxaMatrix.DenseSquareTaxaMatrix.deepcopy"]], "delete() (pybrops.core.mat.densesquaretaxamatrix.densesquaretaxamatrix method)": [[635, "pybrops.core.mat.DenseSquareTaxaMatrix.DenseSquareTaxaMatrix.delete"]], "delete_taxa() (pybrops.core.mat.densesquaretaxamatrix.densesquaretaxamatrix method)": [[635, "pybrops.core.mat.DenseSquareTaxaMatrix.DenseSquareTaxaMatrix.delete_taxa"]], "from_hdf5() (pybrops.core.mat.densesquaretaxamatrix.densesquaretaxamatrix class method)": [[635, "pybrops.core.mat.DenseSquareTaxaMatrix.DenseSquareTaxaMatrix.from_hdf5"]], "group() (pybrops.core.mat.densesquaretaxamatrix.densesquaretaxamatrix method)": [[635, "pybrops.core.mat.DenseSquareTaxaMatrix.DenseSquareTaxaMatrix.group"]], "group_taxa() (pybrops.core.mat.densesquaretaxamatrix.densesquaretaxamatrix method)": [[635, "pybrops.core.mat.DenseSquareTaxaMatrix.DenseSquareTaxaMatrix.group_taxa"]], "incorp() (pybrops.core.mat.densesquaretaxamatrix.densesquaretaxamatrix method)": [[635, "pybrops.core.mat.DenseSquareTaxaMatrix.DenseSquareTaxaMatrix.incorp"]], "incorp_taxa() (pybrops.core.mat.densesquaretaxamatrix.densesquaretaxamatrix method)": [[635, "pybrops.core.mat.DenseSquareTaxaMatrix.DenseSquareTaxaMatrix.incorp_taxa"]], "insert() (pybrops.core.mat.densesquaretaxamatrix.densesquaretaxamatrix method)": [[635, "pybrops.core.mat.DenseSquareTaxaMatrix.DenseSquareTaxaMatrix.insert"]], "insert_taxa() (pybrops.core.mat.densesquaretaxamatrix.densesquaretaxamatrix method)": [[635, "pybrops.core.mat.DenseSquareTaxaMatrix.DenseSquareTaxaMatrix.insert_taxa"]], "is_grouped() (pybrops.core.mat.densesquaretaxamatrix.densesquaretaxamatrix method)": [[635, "pybrops.core.mat.DenseSquareTaxaMatrix.DenseSquareTaxaMatrix.is_grouped"]], "is_grouped_taxa() (pybrops.core.mat.densesquaretaxamatrix.densesquaretaxamatrix method)": [[635, "pybrops.core.mat.DenseSquareTaxaMatrix.DenseSquareTaxaMatrix.is_grouped_taxa"]], "is_square() (pybrops.core.mat.densesquaretaxamatrix.densesquaretaxamatrix method)": [[635, "pybrops.core.mat.DenseSquareTaxaMatrix.DenseSquareTaxaMatrix.is_square"]], "is_square_taxa() (pybrops.core.mat.densesquaretaxamatrix.densesquaretaxamatrix method)": [[635, "pybrops.core.mat.DenseSquareTaxaMatrix.DenseSquareTaxaMatrix.is_square_taxa"]], "lexsort() (pybrops.core.mat.densesquaretaxamatrix.densesquaretaxamatrix method)": [[635, "pybrops.core.mat.DenseSquareTaxaMatrix.DenseSquareTaxaMatrix.lexsort"]], "lexsort_taxa() (pybrops.core.mat.densesquaretaxamatrix.densesquaretaxamatrix method)": [[635, "pybrops.core.mat.DenseSquareTaxaMatrix.DenseSquareTaxaMatrix.lexsort_taxa"]], "mat (pybrops.core.mat.densesquaretaxamatrix.densesquaretaxamatrix property)": [[635, "pybrops.core.mat.DenseSquareTaxaMatrix.DenseSquareTaxaMatrix.mat"]], "mat_ndim (pybrops.core.mat.densesquaretaxamatrix.densesquaretaxamatrix property)": [[635, "pybrops.core.mat.DenseSquareTaxaMatrix.DenseSquareTaxaMatrix.mat_ndim"]], "mat_shape (pybrops.core.mat.densesquaretaxamatrix.densesquaretaxamatrix property)": [[635, "pybrops.core.mat.DenseSquareTaxaMatrix.DenseSquareTaxaMatrix.mat_shape"]], "nsquare (pybrops.core.mat.densesquaretaxamatrix.densesquaretaxamatrix property)": [[635, "pybrops.core.mat.DenseSquareTaxaMatrix.DenseSquareTaxaMatrix.nsquare"]], "nsquare_taxa (pybrops.core.mat.densesquaretaxamatrix.densesquaretaxamatrix property)": [[635, "pybrops.core.mat.DenseSquareTaxaMatrix.DenseSquareTaxaMatrix.nsquare_taxa"]], "ntaxa (pybrops.core.mat.densesquaretaxamatrix.densesquaretaxamatrix property)": [[635, "pybrops.core.mat.DenseSquareTaxaMatrix.DenseSquareTaxaMatrix.ntaxa"]], "remove() (pybrops.core.mat.densesquaretaxamatrix.densesquaretaxamatrix method)": [[635, "pybrops.core.mat.DenseSquareTaxaMatrix.DenseSquareTaxaMatrix.remove"]], "remove_taxa() (pybrops.core.mat.densesquaretaxamatrix.densesquaretaxamatrix method)": [[635, "pybrops.core.mat.DenseSquareTaxaMatrix.DenseSquareTaxaMatrix.remove_taxa"]], "reorder() (pybrops.core.mat.densesquaretaxamatrix.densesquaretaxamatrix method)": [[635, "pybrops.core.mat.DenseSquareTaxaMatrix.DenseSquareTaxaMatrix.reorder"]], "reorder_taxa() (pybrops.core.mat.densesquaretaxamatrix.densesquaretaxamatrix method)": [[635, "pybrops.core.mat.DenseSquareTaxaMatrix.DenseSquareTaxaMatrix.reorder_taxa"]], "select() (pybrops.core.mat.densesquaretaxamatrix.densesquaretaxamatrix method)": [[635, "pybrops.core.mat.DenseSquareTaxaMatrix.DenseSquareTaxaMatrix.select"]], "select_taxa() (pybrops.core.mat.densesquaretaxamatrix.densesquaretaxamatrix method)": [[635, "pybrops.core.mat.DenseSquareTaxaMatrix.DenseSquareTaxaMatrix.select_taxa"]], "sort() (pybrops.core.mat.densesquaretaxamatrix.densesquaretaxamatrix method)": [[635, "pybrops.core.mat.DenseSquareTaxaMatrix.DenseSquareTaxaMatrix.sort"]], "sort_taxa() (pybrops.core.mat.densesquaretaxamatrix.densesquaretaxamatrix method)": [[635, "pybrops.core.mat.DenseSquareTaxaMatrix.DenseSquareTaxaMatrix.sort_taxa"]], "square_axes (pybrops.core.mat.densesquaretaxamatrix.densesquaretaxamatrix property)": [[635, "pybrops.core.mat.DenseSquareTaxaMatrix.DenseSquareTaxaMatrix.square_axes"]], "square_axes_len (pybrops.core.mat.densesquaretaxamatrix.densesquaretaxamatrix property)": [[635, "pybrops.core.mat.DenseSquareTaxaMatrix.DenseSquareTaxaMatrix.square_axes_len"]], "square_taxa_axes (pybrops.core.mat.densesquaretaxamatrix.densesquaretaxamatrix property)": [[635, "pybrops.core.mat.DenseSquareTaxaMatrix.DenseSquareTaxaMatrix.square_taxa_axes"]], "square_taxa_axes_len (pybrops.core.mat.densesquaretaxamatrix.densesquaretaxamatrix property)": [[635, "pybrops.core.mat.DenseSquareTaxaMatrix.DenseSquareTaxaMatrix.square_taxa_axes_len"]], "taxa (pybrops.core.mat.densesquaretaxamatrix.densesquaretaxamatrix property)": [[635, "pybrops.core.mat.DenseSquareTaxaMatrix.DenseSquareTaxaMatrix.taxa"]], "taxa_axis (pybrops.core.mat.densesquaretaxamatrix.densesquaretaxamatrix property)": [[635, "pybrops.core.mat.DenseSquareTaxaMatrix.DenseSquareTaxaMatrix.taxa_axis"]], "taxa_grp (pybrops.core.mat.densesquaretaxamatrix.densesquaretaxamatrix property)": [[635, "pybrops.core.mat.DenseSquareTaxaMatrix.DenseSquareTaxaMatrix.taxa_grp"]], "taxa_grp_len (pybrops.core.mat.densesquaretaxamatrix.densesquaretaxamatrix property)": [[635, "pybrops.core.mat.DenseSquareTaxaMatrix.DenseSquareTaxaMatrix.taxa_grp_len"]], "taxa_grp_name (pybrops.core.mat.densesquaretaxamatrix.densesquaretaxamatrix property)": [[635, "pybrops.core.mat.DenseSquareTaxaMatrix.DenseSquareTaxaMatrix.taxa_grp_name"]], "taxa_grp_spix (pybrops.core.mat.densesquaretaxamatrix.densesquaretaxamatrix property)": [[635, "pybrops.core.mat.DenseSquareTaxaMatrix.DenseSquareTaxaMatrix.taxa_grp_spix"]], "taxa_grp_stix (pybrops.core.mat.densesquaretaxamatrix.densesquaretaxamatrix property)": [[635, "pybrops.core.mat.DenseSquareTaxaMatrix.DenseSquareTaxaMatrix.taxa_grp_stix"]], "to_hdf5() (pybrops.core.mat.densesquaretaxamatrix.densesquaretaxamatrix method)": [[635, "pybrops.core.mat.DenseSquareTaxaMatrix.DenseSquareTaxaMatrix.to_hdf5"]], "ungroup() (pybrops.core.mat.densesquaretaxamatrix.densesquaretaxamatrix method)": [[635, "pybrops.core.mat.DenseSquareTaxaMatrix.DenseSquareTaxaMatrix.ungroup"]], "ungroup_taxa() (pybrops.core.mat.densesquaretaxamatrix.densesquaretaxamatrix method)": [[635, "pybrops.core.mat.DenseSquareTaxaMatrix.DenseSquareTaxaMatrix.ungroup_taxa"]], "check_is_densesquaretaxamatrix() (in module pybrops.core.mat.densesquaretaxamatrix)": [[636, "pybrops.core.mat.DenseSquareTaxaMatrix.check_is_DenseSquareTaxaMatrix"]], "pybrops.core.mat.densesquaretaxasquaretraitmatrix": [[637, "module-pybrops.core.mat.DenseSquareTaxaSquareTraitMatrix"]], "densesquaretaxasquaretraitmatrix (class in pybrops.core.mat.densesquaretaxasquaretraitmatrix)": [[638, "pybrops.core.mat.DenseSquareTaxaSquareTraitMatrix.DenseSquareTaxaSquareTraitMatrix"]], "__add__() (pybrops.core.mat.densesquaretaxasquaretraitmatrix.densesquaretaxasquaretraitmatrix method)": [[638, "pybrops.core.mat.DenseSquareTaxaSquareTraitMatrix.DenseSquareTaxaSquareTraitMatrix.__add__"]], "__mul__() (pybrops.core.mat.densesquaretaxasquaretraitmatrix.densesquaretaxasquaretraitmatrix method)": [[638, "pybrops.core.mat.DenseSquareTaxaSquareTraitMatrix.DenseSquareTaxaSquareTraitMatrix.__mul__"]], "adjoin() (pybrops.core.mat.densesquaretaxasquaretraitmatrix.densesquaretaxasquaretraitmatrix method)": [[638, "pybrops.core.mat.DenseSquareTaxaSquareTraitMatrix.DenseSquareTaxaSquareTraitMatrix.adjoin"]], "adjoin_taxa() (pybrops.core.mat.densesquaretaxasquaretraitmatrix.densesquaretaxasquaretraitmatrix method)": [[638, "pybrops.core.mat.DenseSquareTaxaSquareTraitMatrix.DenseSquareTaxaSquareTraitMatrix.adjoin_taxa"]], "adjoin_trait() (pybrops.core.mat.densesquaretaxasquaretraitmatrix.densesquaretaxasquaretraitmatrix method)": [[638, "pybrops.core.mat.DenseSquareTaxaSquareTraitMatrix.DenseSquareTaxaSquareTraitMatrix.adjoin_trait"]], "append() (pybrops.core.mat.densesquaretaxasquaretraitmatrix.densesquaretaxasquaretraitmatrix method)": [[638, "pybrops.core.mat.DenseSquareTaxaSquareTraitMatrix.DenseSquareTaxaSquareTraitMatrix.append"]], "append_taxa() (pybrops.core.mat.densesquaretaxasquaretraitmatrix.densesquaretaxasquaretraitmatrix method)": [[638, "pybrops.core.mat.DenseSquareTaxaSquareTraitMatrix.DenseSquareTaxaSquareTraitMatrix.append_taxa"]], "append_trait() (pybrops.core.mat.densesquaretaxasquaretraitmatrix.densesquaretaxasquaretraitmatrix method)": [[638, "pybrops.core.mat.DenseSquareTaxaSquareTraitMatrix.DenseSquareTaxaSquareTraitMatrix.append_trait"]], "concat() (pybrops.core.mat.densesquaretaxasquaretraitmatrix.densesquaretaxasquaretraitmatrix class method)": [[638, "pybrops.core.mat.DenseSquareTaxaSquareTraitMatrix.DenseSquareTaxaSquareTraitMatrix.concat"]], "concat_taxa() (pybrops.core.mat.densesquaretaxasquaretraitmatrix.densesquaretaxasquaretraitmatrix class method)": [[638, "pybrops.core.mat.DenseSquareTaxaSquareTraitMatrix.DenseSquareTaxaSquareTraitMatrix.concat_taxa"]], "concat_trait() (pybrops.core.mat.densesquaretaxasquaretraitmatrix.densesquaretaxasquaretraitmatrix class method)": [[638, "pybrops.core.mat.DenseSquareTaxaSquareTraitMatrix.DenseSquareTaxaSquareTraitMatrix.concat_trait"]], "copy() (pybrops.core.mat.densesquaretaxasquaretraitmatrix.densesquaretaxasquaretraitmatrix method)": [[638, "pybrops.core.mat.DenseSquareTaxaSquareTraitMatrix.DenseSquareTaxaSquareTraitMatrix.copy"]], "deepcopy() (pybrops.core.mat.densesquaretaxasquaretraitmatrix.densesquaretaxasquaretraitmatrix method)": [[638, "pybrops.core.mat.DenseSquareTaxaSquareTraitMatrix.DenseSquareTaxaSquareTraitMatrix.deepcopy"]], "delete() (pybrops.core.mat.densesquaretaxasquaretraitmatrix.densesquaretaxasquaretraitmatrix method)": [[638, "pybrops.core.mat.DenseSquareTaxaSquareTraitMatrix.DenseSquareTaxaSquareTraitMatrix.delete"]], "delete_taxa() (pybrops.core.mat.densesquaretaxasquaretraitmatrix.densesquaretaxasquaretraitmatrix method)": [[638, "pybrops.core.mat.DenseSquareTaxaSquareTraitMatrix.DenseSquareTaxaSquareTraitMatrix.delete_taxa"]], "delete_trait() (pybrops.core.mat.densesquaretaxasquaretraitmatrix.densesquaretaxasquaretraitmatrix method)": [[638, "pybrops.core.mat.DenseSquareTaxaSquareTraitMatrix.DenseSquareTaxaSquareTraitMatrix.delete_trait"]], "from_hdf5() (pybrops.core.mat.densesquaretaxasquaretraitmatrix.densesquaretaxasquaretraitmatrix class method)": [[638, "pybrops.core.mat.DenseSquareTaxaSquareTraitMatrix.DenseSquareTaxaSquareTraitMatrix.from_hdf5"]], "group() (pybrops.core.mat.densesquaretaxasquaretraitmatrix.densesquaretaxasquaretraitmatrix method)": [[638, "pybrops.core.mat.DenseSquareTaxaSquareTraitMatrix.DenseSquareTaxaSquareTraitMatrix.group"]], "group_taxa() (pybrops.core.mat.densesquaretaxasquaretraitmatrix.densesquaretaxasquaretraitmatrix method)": [[638, "pybrops.core.mat.DenseSquareTaxaSquareTraitMatrix.DenseSquareTaxaSquareTraitMatrix.group_taxa"]], "incorp() (pybrops.core.mat.densesquaretaxasquaretraitmatrix.densesquaretaxasquaretraitmatrix method)": [[638, "pybrops.core.mat.DenseSquareTaxaSquareTraitMatrix.DenseSquareTaxaSquareTraitMatrix.incorp"]], "incorp_taxa() (pybrops.core.mat.densesquaretaxasquaretraitmatrix.densesquaretaxasquaretraitmatrix method)": [[638, "pybrops.core.mat.DenseSquareTaxaSquareTraitMatrix.DenseSquareTaxaSquareTraitMatrix.incorp_taxa"]], "incorp_trait() (pybrops.core.mat.densesquaretaxasquaretraitmatrix.densesquaretaxasquaretraitmatrix method)": [[638, "pybrops.core.mat.DenseSquareTaxaSquareTraitMatrix.DenseSquareTaxaSquareTraitMatrix.incorp_trait"]], "insert() (pybrops.core.mat.densesquaretaxasquaretraitmatrix.densesquaretaxasquaretraitmatrix method)": [[638, "pybrops.core.mat.DenseSquareTaxaSquareTraitMatrix.DenseSquareTaxaSquareTraitMatrix.insert"]], "insert_taxa() (pybrops.core.mat.densesquaretaxasquaretraitmatrix.densesquaretaxasquaretraitmatrix method)": [[638, "pybrops.core.mat.DenseSquareTaxaSquareTraitMatrix.DenseSquareTaxaSquareTraitMatrix.insert_taxa"]], "insert_trait() (pybrops.core.mat.densesquaretaxasquaretraitmatrix.densesquaretaxasquaretraitmatrix method)": [[638, "pybrops.core.mat.DenseSquareTaxaSquareTraitMatrix.DenseSquareTaxaSquareTraitMatrix.insert_trait"]], "is_grouped() (pybrops.core.mat.densesquaretaxasquaretraitmatrix.densesquaretaxasquaretraitmatrix method)": [[638, "pybrops.core.mat.DenseSquareTaxaSquareTraitMatrix.DenseSquareTaxaSquareTraitMatrix.is_grouped"]], "is_grouped_taxa() (pybrops.core.mat.densesquaretaxasquaretraitmatrix.densesquaretaxasquaretraitmatrix method)": [[638, "pybrops.core.mat.DenseSquareTaxaSquareTraitMatrix.DenseSquareTaxaSquareTraitMatrix.is_grouped_taxa"]], "is_square() (pybrops.core.mat.densesquaretaxasquaretraitmatrix.densesquaretaxasquaretraitmatrix method)": [[638, "pybrops.core.mat.DenseSquareTaxaSquareTraitMatrix.DenseSquareTaxaSquareTraitMatrix.is_square"]], "is_square_taxa() (pybrops.core.mat.densesquaretaxasquaretraitmatrix.densesquaretaxasquaretraitmatrix method)": [[638, "pybrops.core.mat.DenseSquareTaxaSquareTraitMatrix.DenseSquareTaxaSquareTraitMatrix.is_square_taxa"]], "is_square_trait() (pybrops.core.mat.densesquaretaxasquaretraitmatrix.densesquaretaxasquaretraitmatrix method)": [[638, "pybrops.core.mat.DenseSquareTaxaSquareTraitMatrix.DenseSquareTaxaSquareTraitMatrix.is_square_trait"]], "lexsort() (pybrops.core.mat.densesquaretaxasquaretraitmatrix.densesquaretaxasquaretraitmatrix method)": [[638, "pybrops.core.mat.DenseSquareTaxaSquareTraitMatrix.DenseSquareTaxaSquareTraitMatrix.lexsort"]], "lexsort_taxa() (pybrops.core.mat.densesquaretaxasquaretraitmatrix.densesquaretaxasquaretraitmatrix method)": [[638, "pybrops.core.mat.DenseSquareTaxaSquareTraitMatrix.DenseSquareTaxaSquareTraitMatrix.lexsort_taxa"]], "lexsort_trait() (pybrops.core.mat.densesquaretaxasquaretraitmatrix.densesquaretaxasquaretraitmatrix method)": [[638, "pybrops.core.mat.DenseSquareTaxaSquareTraitMatrix.DenseSquareTaxaSquareTraitMatrix.lexsort_trait"]], "mat (pybrops.core.mat.densesquaretaxasquaretraitmatrix.densesquaretaxasquaretraitmatrix property)": [[638, "pybrops.core.mat.DenseSquareTaxaSquareTraitMatrix.DenseSquareTaxaSquareTraitMatrix.mat"]], "mat_ndim (pybrops.core.mat.densesquaretaxasquaretraitmatrix.densesquaretaxasquaretraitmatrix property)": [[638, "pybrops.core.mat.DenseSquareTaxaSquareTraitMatrix.DenseSquareTaxaSquareTraitMatrix.mat_ndim"]], "mat_shape (pybrops.core.mat.densesquaretaxasquaretraitmatrix.densesquaretaxasquaretraitmatrix property)": [[638, "pybrops.core.mat.DenseSquareTaxaSquareTraitMatrix.DenseSquareTaxaSquareTraitMatrix.mat_shape"]], "nsquare (pybrops.core.mat.densesquaretaxasquaretraitmatrix.densesquaretaxasquaretraitmatrix property)": [[638, "pybrops.core.mat.DenseSquareTaxaSquareTraitMatrix.DenseSquareTaxaSquareTraitMatrix.nsquare"]], "nsquare_taxa (pybrops.core.mat.densesquaretaxasquaretraitmatrix.densesquaretaxasquaretraitmatrix property)": [[638, "pybrops.core.mat.DenseSquareTaxaSquareTraitMatrix.DenseSquareTaxaSquareTraitMatrix.nsquare_taxa"]], "nsquare_trait (pybrops.core.mat.densesquaretaxasquaretraitmatrix.densesquaretaxasquaretraitmatrix property)": [[638, "pybrops.core.mat.DenseSquareTaxaSquareTraitMatrix.DenseSquareTaxaSquareTraitMatrix.nsquare_trait"]], "ntaxa (pybrops.core.mat.densesquaretaxasquaretraitmatrix.densesquaretaxasquaretraitmatrix property)": [[638, "pybrops.core.mat.DenseSquareTaxaSquareTraitMatrix.DenseSquareTaxaSquareTraitMatrix.ntaxa"]], "ntrait (pybrops.core.mat.densesquaretaxasquaretraitmatrix.densesquaretaxasquaretraitmatrix property)": [[638, "pybrops.core.mat.DenseSquareTaxaSquareTraitMatrix.DenseSquareTaxaSquareTraitMatrix.ntrait"]], "remove() (pybrops.core.mat.densesquaretaxasquaretraitmatrix.densesquaretaxasquaretraitmatrix method)": [[638, "pybrops.core.mat.DenseSquareTaxaSquareTraitMatrix.DenseSquareTaxaSquareTraitMatrix.remove"]], "remove_taxa() (pybrops.core.mat.densesquaretaxasquaretraitmatrix.densesquaretaxasquaretraitmatrix method)": [[638, "pybrops.core.mat.DenseSquareTaxaSquareTraitMatrix.DenseSquareTaxaSquareTraitMatrix.remove_taxa"]], "remove_trait() (pybrops.core.mat.densesquaretaxasquaretraitmatrix.densesquaretaxasquaretraitmatrix method)": [[638, "pybrops.core.mat.DenseSquareTaxaSquareTraitMatrix.DenseSquareTaxaSquareTraitMatrix.remove_trait"]], "reorder() (pybrops.core.mat.densesquaretaxasquaretraitmatrix.densesquaretaxasquaretraitmatrix method)": [[638, "pybrops.core.mat.DenseSquareTaxaSquareTraitMatrix.DenseSquareTaxaSquareTraitMatrix.reorder"]], "reorder_taxa() (pybrops.core.mat.densesquaretaxasquaretraitmatrix.densesquaretaxasquaretraitmatrix method)": [[638, "pybrops.core.mat.DenseSquareTaxaSquareTraitMatrix.DenseSquareTaxaSquareTraitMatrix.reorder_taxa"]], "reorder_trait() (pybrops.core.mat.densesquaretaxasquaretraitmatrix.densesquaretaxasquaretraitmatrix method)": [[638, "pybrops.core.mat.DenseSquareTaxaSquareTraitMatrix.DenseSquareTaxaSquareTraitMatrix.reorder_trait"]], "select() (pybrops.core.mat.densesquaretaxasquaretraitmatrix.densesquaretaxasquaretraitmatrix method)": [[638, "pybrops.core.mat.DenseSquareTaxaSquareTraitMatrix.DenseSquareTaxaSquareTraitMatrix.select"]], "select_taxa() (pybrops.core.mat.densesquaretaxasquaretraitmatrix.densesquaretaxasquaretraitmatrix method)": [[638, "pybrops.core.mat.DenseSquareTaxaSquareTraitMatrix.DenseSquareTaxaSquareTraitMatrix.select_taxa"]], "select_trait() (pybrops.core.mat.densesquaretaxasquaretraitmatrix.densesquaretaxasquaretraitmatrix method)": [[638, "pybrops.core.mat.DenseSquareTaxaSquareTraitMatrix.DenseSquareTaxaSquareTraitMatrix.select_trait"]], "sort() (pybrops.core.mat.densesquaretaxasquaretraitmatrix.densesquaretaxasquaretraitmatrix method)": [[638, "pybrops.core.mat.DenseSquareTaxaSquareTraitMatrix.DenseSquareTaxaSquareTraitMatrix.sort"]], "sort_taxa() (pybrops.core.mat.densesquaretaxasquaretraitmatrix.densesquaretaxasquaretraitmatrix method)": [[638, "pybrops.core.mat.DenseSquareTaxaSquareTraitMatrix.DenseSquareTaxaSquareTraitMatrix.sort_taxa"]], "sort_trait() (pybrops.core.mat.densesquaretaxasquaretraitmatrix.densesquaretaxasquaretraitmatrix method)": [[638, "pybrops.core.mat.DenseSquareTaxaSquareTraitMatrix.DenseSquareTaxaSquareTraitMatrix.sort_trait"]], "square_axes (pybrops.core.mat.densesquaretaxasquaretraitmatrix.densesquaretaxasquaretraitmatrix property)": [[638, "pybrops.core.mat.DenseSquareTaxaSquareTraitMatrix.DenseSquareTaxaSquareTraitMatrix.square_axes"]], "square_axes_len (pybrops.core.mat.densesquaretaxasquaretraitmatrix.densesquaretaxasquaretraitmatrix property)": [[638, "pybrops.core.mat.DenseSquareTaxaSquareTraitMatrix.DenseSquareTaxaSquareTraitMatrix.square_axes_len"]], "square_taxa_axes (pybrops.core.mat.densesquaretaxasquaretraitmatrix.densesquaretaxasquaretraitmatrix property)": [[638, "pybrops.core.mat.DenseSquareTaxaSquareTraitMatrix.DenseSquareTaxaSquareTraitMatrix.square_taxa_axes"]], "square_taxa_axes_len (pybrops.core.mat.densesquaretaxasquaretraitmatrix.densesquaretaxasquaretraitmatrix property)": [[638, "pybrops.core.mat.DenseSquareTaxaSquareTraitMatrix.DenseSquareTaxaSquareTraitMatrix.square_taxa_axes_len"]], "square_trait_axes (pybrops.core.mat.densesquaretaxasquaretraitmatrix.densesquaretaxasquaretraitmatrix property)": [[638, "pybrops.core.mat.DenseSquareTaxaSquareTraitMatrix.DenseSquareTaxaSquareTraitMatrix.square_trait_axes"]], "square_trait_axes_len (pybrops.core.mat.densesquaretaxasquaretraitmatrix.densesquaretaxasquaretraitmatrix property)": [[638, "pybrops.core.mat.DenseSquareTaxaSquareTraitMatrix.DenseSquareTaxaSquareTraitMatrix.square_trait_axes_len"]], "taxa (pybrops.core.mat.densesquaretaxasquaretraitmatrix.densesquaretaxasquaretraitmatrix property)": [[638, "pybrops.core.mat.DenseSquareTaxaSquareTraitMatrix.DenseSquareTaxaSquareTraitMatrix.taxa"]], "taxa_axis (pybrops.core.mat.densesquaretaxasquaretraitmatrix.densesquaretaxasquaretraitmatrix property)": [[638, "pybrops.core.mat.DenseSquareTaxaSquareTraitMatrix.DenseSquareTaxaSquareTraitMatrix.taxa_axis"]], "taxa_grp (pybrops.core.mat.densesquaretaxasquaretraitmatrix.densesquaretaxasquaretraitmatrix property)": [[638, "pybrops.core.mat.DenseSquareTaxaSquareTraitMatrix.DenseSquareTaxaSquareTraitMatrix.taxa_grp"]], "taxa_grp_len (pybrops.core.mat.densesquaretaxasquaretraitmatrix.densesquaretaxasquaretraitmatrix property)": [[638, "pybrops.core.mat.DenseSquareTaxaSquareTraitMatrix.DenseSquareTaxaSquareTraitMatrix.taxa_grp_len"]], "taxa_grp_name (pybrops.core.mat.densesquaretaxasquaretraitmatrix.densesquaretaxasquaretraitmatrix property)": [[638, "pybrops.core.mat.DenseSquareTaxaSquareTraitMatrix.DenseSquareTaxaSquareTraitMatrix.taxa_grp_name"]], "taxa_grp_spix (pybrops.core.mat.densesquaretaxasquaretraitmatrix.densesquaretaxasquaretraitmatrix property)": [[638, "pybrops.core.mat.DenseSquareTaxaSquareTraitMatrix.DenseSquareTaxaSquareTraitMatrix.taxa_grp_spix"]], "taxa_grp_stix (pybrops.core.mat.densesquaretaxasquaretraitmatrix.densesquaretaxasquaretraitmatrix property)": [[638, "pybrops.core.mat.DenseSquareTaxaSquareTraitMatrix.DenseSquareTaxaSquareTraitMatrix.taxa_grp_stix"]], "to_hdf5() (pybrops.core.mat.densesquaretaxasquaretraitmatrix.densesquaretaxasquaretraitmatrix method)": [[638, "pybrops.core.mat.DenseSquareTaxaSquareTraitMatrix.DenseSquareTaxaSquareTraitMatrix.to_hdf5"]], "trait (pybrops.core.mat.densesquaretaxasquaretraitmatrix.densesquaretaxasquaretraitmatrix property)": [[638, "pybrops.core.mat.DenseSquareTaxaSquareTraitMatrix.DenseSquareTaxaSquareTraitMatrix.trait"]], "trait_axis (pybrops.core.mat.densesquaretaxasquaretraitmatrix.densesquaretaxasquaretraitmatrix property)": [[638, "pybrops.core.mat.DenseSquareTaxaSquareTraitMatrix.DenseSquareTaxaSquareTraitMatrix.trait_axis"]], "ungroup() (pybrops.core.mat.densesquaretaxasquaretraitmatrix.densesquaretaxasquaretraitmatrix method)": [[638, "pybrops.core.mat.DenseSquareTaxaSquareTraitMatrix.DenseSquareTaxaSquareTraitMatrix.ungroup"]], "ungroup_taxa() (pybrops.core.mat.densesquaretaxasquaretraitmatrix.densesquaretaxasquaretraitmatrix method)": [[638, "pybrops.core.mat.DenseSquareTaxaSquareTraitMatrix.DenseSquareTaxaSquareTraitMatrix.ungroup_taxa"]], "check_is_densesquaretaxasquaretraitmatrix() (in module pybrops.core.mat.densesquaretaxasquaretraitmatrix)": [[639, "pybrops.core.mat.DenseSquareTaxaSquareTraitMatrix.check_is_DenseSquareTaxaSquareTraitMatrix"]], "pybrops.core.mat.densesquaretaxatraitmatrix": [[640, "module-pybrops.core.mat.DenseSquareTaxaTraitMatrix"]], "densesquaretaxatraitmatrix (class in pybrops.core.mat.densesquaretaxatraitmatrix)": [[641, "pybrops.core.mat.DenseSquareTaxaTraitMatrix.DenseSquareTaxaTraitMatrix"]], "__add__() (pybrops.core.mat.densesquaretaxatraitmatrix.densesquaretaxatraitmatrix method)": [[641, "pybrops.core.mat.DenseSquareTaxaTraitMatrix.DenseSquareTaxaTraitMatrix.__add__"]], "__mul__() (pybrops.core.mat.densesquaretaxatraitmatrix.densesquaretaxatraitmatrix method)": [[641, "pybrops.core.mat.DenseSquareTaxaTraitMatrix.DenseSquareTaxaTraitMatrix.__mul__"]], "adjoin() (pybrops.core.mat.densesquaretaxatraitmatrix.densesquaretaxatraitmatrix method)": [[641, "pybrops.core.mat.DenseSquareTaxaTraitMatrix.DenseSquareTaxaTraitMatrix.adjoin"]], "adjoin_taxa() (pybrops.core.mat.densesquaretaxatraitmatrix.densesquaretaxatraitmatrix method)": [[641, "pybrops.core.mat.DenseSquareTaxaTraitMatrix.DenseSquareTaxaTraitMatrix.adjoin_taxa"]], "adjoin_trait() (pybrops.core.mat.densesquaretaxatraitmatrix.densesquaretaxatraitmatrix method)": [[641, "pybrops.core.mat.DenseSquareTaxaTraitMatrix.DenseSquareTaxaTraitMatrix.adjoin_trait"]], "append() (pybrops.core.mat.densesquaretaxatraitmatrix.densesquaretaxatraitmatrix method)": [[641, "pybrops.core.mat.DenseSquareTaxaTraitMatrix.DenseSquareTaxaTraitMatrix.append"]], "append_taxa() (pybrops.core.mat.densesquaretaxatraitmatrix.densesquaretaxatraitmatrix method)": [[641, "pybrops.core.mat.DenseSquareTaxaTraitMatrix.DenseSquareTaxaTraitMatrix.append_taxa"]], "append_trait() (pybrops.core.mat.densesquaretaxatraitmatrix.densesquaretaxatraitmatrix method)": [[641, "pybrops.core.mat.DenseSquareTaxaTraitMatrix.DenseSquareTaxaTraitMatrix.append_trait"]], "concat() (pybrops.core.mat.densesquaretaxatraitmatrix.densesquaretaxatraitmatrix class method)": [[641, "pybrops.core.mat.DenseSquareTaxaTraitMatrix.DenseSquareTaxaTraitMatrix.concat"]], "concat_taxa() (pybrops.core.mat.densesquaretaxatraitmatrix.densesquaretaxatraitmatrix class method)": [[641, "pybrops.core.mat.DenseSquareTaxaTraitMatrix.DenseSquareTaxaTraitMatrix.concat_taxa"]], "concat_trait() (pybrops.core.mat.densesquaretaxatraitmatrix.densesquaretaxatraitmatrix class method)": [[641, "pybrops.core.mat.DenseSquareTaxaTraitMatrix.DenseSquareTaxaTraitMatrix.concat_trait"]], "copy() (pybrops.core.mat.densesquaretaxatraitmatrix.densesquaretaxatraitmatrix method)": [[641, "pybrops.core.mat.DenseSquareTaxaTraitMatrix.DenseSquareTaxaTraitMatrix.copy"]], "deepcopy() (pybrops.core.mat.densesquaretaxatraitmatrix.densesquaretaxatraitmatrix method)": [[641, "pybrops.core.mat.DenseSquareTaxaTraitMatrix.DenseSquareTaxaTraitMatrix.deepcopy"]], "delete() (pybrops.core.mat.densesquaretaxatraitmatrix.densesquaretaxatraitmatrix method)": [[641, "pybrops.core.mat.DenseSquareTaxaTraitMatrix.DenseSquareTaxaTraitMatrix.delete"]], "delete_taxa() (pybrops.core.mat.densesquaretaxatraitmatrix.densesquaretaxatraitmatrix method)": [[641, "pybrops.core.mat.DenseSquareTaxaTraitMatrix.DenseSquareTaxaTraitMatrix.delete_taxa"]], "delete_trait() (pybrops.core.mat.densesquaretaxatraitmatrix.densesquaretaxatraitmatrix method)": [[641, "pybrops.core.mat.DenseSquareTaxaTraitMatrix.DenseSquareTaxaTraitMatrix.delete_trait"]], "from_hdf5() (pybrops.core.mat.densesquaretaxatraitmatrix.densesquaretaxatraitmatrix class method)": [[641, "pybrops.core.mat.DenseSquareTaxaTraitMatrix.DenseSquareTaxaTraitMatrix.from_hdf5"]], "group() (pybrops.core.mat.densesquaretaxatraitmatrix.densesquaretaxatraitmatrix method)": [[641, "pybrops.core.mat.DenseSquareTaxaTraitMatrix.DenseSquareTaxaTraitMatrix.group"]], "group_taxa() (pybrops.core.mat.densesquaretaxatraitmatrix.densesquaretaxatraitmatrix method)": [[641, "pybrops.core.mat.DenseSquareTaxaTraitMatrix.DenseSquareTaxaTraitMatrix.group_taxa"]], "incorp() (pybrops.core.mat.densesquaretaxatraitmatrix.densesquaretaxatraitmatrix method)": [[641, "pybrops.core.mat.DenseSquareTaxaTraitMatrix.DenseSquareTaxaTraitMatrix.incorp"]], "incorp_taxa() (pybrops.core.mat.densesquaretaxatraitmatrix.densesquaretaxatraitmatrix method)": [[641, "pybrops.core.mat.DenseSquareTaxaTraitMatrix.DenseSquareTaxaTraitMatrix.incorp_taxa"]], "incorp_trait() (pybrops.core.mat.densesquaretaxatraitmatrix.densesquaretaxatraitmatrix method)": [[641, "pybrops.core.mat.DenseSquareTaxaTraitMatrix.DenseSquareTaxaTraitMatrix.incorp_trait"]], "insert() (pybrops.core.mat.densesquaretaxatraitmatrix.densesquaretaxatraitmatrix method)": [[641, "pybrops.core.mat.DenseSquareTaxaTraitMatrix.DenseSquareTaxaTraitMatrix.insert"]], "insert_taxa() (pybrops.core.mat.densesquaretaxatraitmatrix.densesquaretaxatraitmatrix method)": [[641, "pybrops.core.mat.DenseSquareTaxaTraitMatrix.DenseSquareTaxaTraitMatrix.insert_taxa"]], "insert_trait() (pybrops.core.mat.densesquaretaxatraitmatrix.densesquaretaxatraitmatrix method)": [[641, "pybrops.core.mat.DenseSquareTaxaTraitMatrix.DenseSquareTaxaTraitMatrix.insert_trait"]], "is_grouped() (pybrops.core.mat.densesquaretaxatraitmatrix.densesquaretaxatraitmatrix method)": [[641, "pybrops.core.mat.DenseSquareTaxaTraitMatrix.DenseSquareTaxaTraitMatrix.is_grouped"]], "is_grouped_taxa() (pybrops.core.mat.densesquaretaxatraitmatrix.densesquaretaxatraitmatrix method)": [[641, "pybrops.core.mat.DenseSquareTaxaTraitMatrix.DenseSquareTaxaTraitMatrix.is_grouped_taxa"]], "is_square() (pybrops.core.mat.densesquaretaxatraitmatrix.densesquaretaxatraitmatrix method)": [[641, "pybrops.core.mat.DenseSquareTaxaTraitMatrix.DenseSquareTaxaTraitMatrix.is_square"]], "is_square_taxa() (pybrops.core.mat.densesquaretaxatraitmatrix.densesquaretaxatraitmatrix method)": [[641, "pybrops.core.mat.DenseSquareTaxaTraitMatrix.DenseSquareTaxaTraitMatrix.is_square_taxa"]], "lexsort() (pybrops.core.mat.densesquaretaxatraitmatrix.densesquaretaxatraitmatrix method)": [[641, "pybrops.core.mat.DenseSquareTaxaTraitMatrix.DenseSquareTaxaTraitMatrix.lexsort"]], "lexsort_taxa() (pybrops.core.mat.densesquaretaxatraitmatrix.densesquaretaxatraitmatrix method)": [[641, "pybrops.core.mat.DenseSquareTaxaTraitMatrix.DenseSquareTaxaTraitMatrix.lexsort_taxa"]], "lexsort_trait() (pybrops.core.mat.densesquaretaxatraitmatrix.densesquaretaxatraitmatrix method)": [[641, "pybrops.core.mat.DenseSquareTaxaTraitMatrix.DenseSquareTaxaTraitMatrix.lexsort_trait"]], "mat (pybrops.core.mat.densesquaretaxatraitmatrix.densesquaretaxatraitmatrix property)": [[641, "pybrops.core.mat.DenseSquareTaxaTraitMatrix.DenseSquareTaxaTraitMatrix.mat"]], "mat_ndim (pybrops.core.mat.densesquaretaxatraitmatrix.densesquaretaxatraitmatrix property)": [[641, "pybrops.core.mat.DenseSquareTaxaTraitMatrix.DenseSquareTaxaTraitMatrix.mat_ndim"]], "mat_shape (pybrops.core.mat.densesquaretaxatraitmatrix.densesquaretaxatraitmatrix property)": [[641, "pybrops.core.mat.DenseSquareTaxaTraitMatrix.DenseSquareTaxaTraitMatrix.mat_shape"]], "nsquare (pybrops.core.mat.densesquaretaxatraitmatrix.densesquaretaxatraitmatrix property)": [[641, "pybrops.core.mat.DenseSquareTaxaTraitMatrix.DenseSquareTaxaTraitMatrix.nsquare"]], "nsquare_taxa (pybrops.core.mat.densesquaretaxatraitmatrix.densesquaretaxatraitmatrix property)": [[641, "pybrops.core.mat.DenseSquareTaxaTraitMatrix.DenseSquareTaxaTraitMatrix.nsquare_taxa"]], "ntaxa (pybrops.core.mat.densesquaretaxatraitmatrix.densesquaretaxatraitmatrix property)": [[641, "pybrops.core.mat.DenseSquareTaxaTraitMatrix.DenseSquareTaxaTraitMatrix.ntaxa"]], "ntrait (pybrops.core.mat.densesquaretaxatraitmatrix.densesquaretaxatraitmatrix property)": [[641, "pybrops.core.mat.DenseSquareTaxaTraitMatrix.DenseSquareTaxaTraitMatrix.ntrait"]], "remove() (pybrops.core.mat.densesquaretaxatraitmatrix.densesquaretaxatraitmatrix method)": [[641, "pybrops.core.mat.DenseSquareTaxaTraitMatrix.DenseSquareTaxaTraitMatrix.remove"]], "remove_taxa() (pybrops.core.mat.densesquaretaxatraitmatrix.densesquaretaxatraitmatrix method)": [[641, "pybrops.core.mat.DenseSquareTaxaTraitMatrix.DenseSquareTaxaTraitMatrix.remove_taxa"]], "remove_trait() (pybrops.core.mat.densesquaretaxatraitmatrix.densesquaretaxatraitmatrix method)": [[641, "pybrops.core.mat.DenseSquareTaxaTraitMatrix.DenseSquareTaxaTraitMatrix.remove_trait"]], "reorder() (pybrops.core.mat.densesquaretaxatraitmatrix.densesquaretaxatraitmatrix method)": [[641, "pybrops.core.mat.DenseSquareTaxaTraitMatrix.DenseSquareTaxaTraitMatrix.reorder"]], "reorder_taxa() (pybrops.core.mat.densesquaretaxatraitmatrix.densesquaretaxatraitmatrix method)": [[641, "pybrops.core.mat.DenseSquareTaxaTraitMatrix.DenseSquareTaxaTraitMatrix.reorder_taxa"]], "reorder_trait() (pybrops.core.mat.densesquaretaxatraitmatrix.densesquaretaxatraitmatrix method)": [[641, "pybrops.core.mat.DenseSquareTaxaTraitMatrix.DenseSquareTaxaTraitMatrix.reorder_trait"]], "select() (pybrops.core.mat.densesquaretaxatraitmatrix.densesquaretaxatraitmatrix method)": [[641, "pybrops.core.mat.DenseSquareTaxaTraitMatrix.DenseSquareTaxaTraitMatrix.select"]], "select_taxa() (pybrops.core.mat.densesquaretaxatraitmatrix.densesquaretaxatraitmatrix method)": [[641, "pybrops.core.mat.DenseSquareTaxaTraitMatrix.DenseSquareTaxaTraitMatrix.select_taxa"]], "select_trait() (pybrops.core.mat.densesquaretaxatraitmatrix.densesquaretaxatraitmatrix method)": [[641, "pybrops.core.mat.DenseSquareTaxaTraitMatrix.DenseSquareTaxaTraitMatrix.select_trait"]], "sort() (pybrops.core.mat.densesquaretaxatraitmatrix.densesquaretaxatraitmatrix method)": [[641, "pybrops.core.mat.DenseSquareTaxaTraitMatrix.DenseSquareTaxaTraitMatrix.sort"]], "sort_taxa() (pybrops.core.mat.densesquaretaxatraitmatrix.densesquaretaxatraitmatrix method)": [[641, "pybrops.core.mat.DenseSquareTaxaTraitMatrix.DenseSquareTaxaTraitMatrix.sort_taxa"]], "sort_trait() (pybrops.core.mat.densesquaretaxatraitmatrix.densesquaretaxatraitmatrix method)": [[641, "pybrops.core.mat.DenseSquareTaxaTraitMatrix.DenseSquareTaxaTraitMatrix.sort_trait"]], "square_axes (pybrops.core.mat.densesquaretaxatraitmatrix.densesquaretaxatraitmatrix property)": [[641, "pybrops.core.mat.DenseSquareTaxaTraitMatrix.DenseSquareTaxaTraitMatrix.square_axes"]], "square_axes_len (pybrops.core.mat.densesquaretaxatraitmatrix.densesquaretaxatraitmatrix property)": [[641, "pybrops.core.mat.DenseSquareTaxaTraitMatrix.DenseSquareTaxaTraitMatrix.square_axes_len"]], "square_taxa_axes (pybrops.core.mat.densesquaretaxatraitmatrix.densesquaretaxatraitmatrix property)": [[641, "pybrops.core.mat.DenseSquareTaxaTraitMatrix.DenseSquareTaxaTraitMatrix.square_taxa_axes"]], "square_taxa_axes_len (pybrops.core.mat.densesquaretaxatraitmatrix.densesquaretaxatraitmatrix property)": [[641, "pybrops.core.mat.DenseSquareTaxaTraitMatrix.DenseSquareTaxaTraitMatrix.square_taxa_axes_len"]], "taxa (pybrops.core.mat.densesquaretaxatraitmatrix.densesquaretaxatraitmatrix property)": [[641, "pybrops.core.mat.DenseSquareTaxaTraitMatrix.DenseSquareTaxaTraitMatrix.taxa"]], "taxa_axis (pybrops.core.mat.densesquaretaxatraitmatrix.densesquaretaxatraitmatrix property)": [[641, "pybrops.core.mat.DenseSquareTaxaTraitMatrix.DenseSquareTaxaTraitMatrix.taxa_axis"]], "taxa_grp (pybrops.core.mat.densesquaretaxatraitmatrix.densesquaretaxatraitmatrix property)": [[641, "pybrops.core.mat.DenseSquareTaxaTraitMatrix.DenseSquareTaxaTraitMatrix.taxa_grp"]], "taxa_grp_len (pybrops.core.mat.densesquaretaxatraitmatrix.densesquaretaxatraitmatrix property)": [[641, "pybrops.core.mat.DenseSquareTaxaTraitMatrix.DenseSquareTaxaTraitMatrix.taxa_grp_len"]], "taxa_grp_name (pybrops.core.mat.densesquaretaxatraitmatrix.densesquaretaxatraitmatrix property)": [[641, "pybrops.core.mat.DenseSquareTaxaTraitMatrix.DenseSquareTaxaTraitMatrix.taxa_grp_name"]], "taxa_grp_spix (pybrops.core.mat.densesquaretaxatraitmatrix.densesquaretaxatraitmatrix property)": [[641, "pybrops.core.mat.DenseSquareTaxaTraitMatrix.DenseSquareTaxaTraitMatrix.taxa_grp_spix"]], "taxa_grp_stix (pybrops.core.mat.densesquaretaxatraitmatrix.densesquaretaxatraitmatrix property)": [[641, "pybrops.core.mat.DenseSquareTaxaTraitMatrix.DenseSquareTaxaTraitMatrix.taxa_grp_stix"]], "to_hdf5() (pybrops.core.mat.densesquaretaxatraitmatrix.densesquaretaxatraitmatrix method)": [[641, "pybrops.core.mat.DenseSquareTaxaTraitMatrix.DenseSquareTaxaTraitMatrix.to_hdf5"]], "trait (pybrops.core.mat.densesquaretaxatraitmatrix.densesquaretaxatraitmatrix property)": [[641, "pybrops.core.mat.DenseSquareTaxaTraitMatrix.DenseSquareTaxaTraitMatrix.trait"]], "trait_axis (pybrops.core.mat.densesquaretaxatraitmatrix.densesquaretaxatraitmatrix property)": [[641, "pybrops.core.mat.DenseSquareTaxaTraitMatrix.DenseSquareTaxaTraitMatrix.trait_axis"]], "ungroup() (pybrops.core.mat.densesquaretaxatraitmatrix.densesquaretaxatraitmatrix method)": [[641, "pybrops.core.mat.DenseSquareTaxaTraitMatrix.DenseSquareTaxaTraitMatrix.ungroup"]], "ungroup_taxa() (pybrops.core.mat.densesquaretaxatraitmatrix.densesquaretaxatraitmatrix method)": [[641, "pybrops.core.mat.DenseSquareTaxaTraitMatrix.DenseSquareTaxaTraitMatrix.ungroup_taxa"]], "check_is_densesquaretaxatraitmatrix() (in module pybrops.core.mat.densesquaretaxatraitmatrix)": [[642, "pybrops.core.mat.DenseSquareTaxaTraitMatrix.check_is_DenseSquareTaxaTraitMatrix"]], "pybrops.core.mat.densesquaretraitmatrix": [[643, "module-pybrops.core.mat.DenseSquareTraitMatrix"]], "densesquaretraitmatrix (class in pybrops.core.mat.densesquaretraitmatrix)": [[644, "pybrops.core.mat.DenseSquareTraitMatrix.DenseSquareTraitMatrix"]], "__add__() (pybrops.core.mat.densesquaretraitmatrix.densesquaretraitmatrix method)": [[644, "pybrops.core.mat.DenseSquareTraitMatrix.DenseSquareTraitMatrix.__add__"]], "__mul__() (pybrops.core.mat.densesquaretraitmatrix.densesquaretraitmatrix method)": [[644, "pybrops.core.mat.DenseSquareTraitMatrix.DenseSquareTraitMatrix.__mul__"]], "adjoin() (pybrops.core.mat.densesquaretraitmatrix.densesquaretraitmatrix method)": [[644, "pybrops.core.mat.DenseSquareTraitMatrix.DenseSquareTraitMatrix.adjoin"]], "adjoin_trait() (pybrops.core.mat.densesquaretraitmatrix.densesquaretraitmatrix method)": [[644, "pybrops.core.mat.DenseSquareTraitMatrix.DenseSquareTraitMatrix.adjoin_trait"]], "append() (pybrops.core.mat.densesquaretraitmatrix.densesquaretraitmatrix method)": [[644, "pybrops.core.mat.DenseSquareTraitMatrix.DenseSquareTraitMatrix.append"]], "append_trait() (pybrops.core.mat.densesquaretraitmatrix.densesquaretraitmatrix method)": [[644, "pybrops.core.mat.DenseSquareTraitMatrix.DenseSquareTraitMatrix.append_trait"]], "concat() (pybrops.core.mat.densesquaretraitmatrix.densesquaretraitmatrix class method)": [[644, "pybrops.core.mat.DenseSquareTraitMatrix.DenseSquareTraitMatrix.concat"]], "concat_trait() (pybrops.core.mat.densesquaretraitmatrix.densesquaretraitmatrix class method)": [[644, "pybrops.core.mat.DenseSquareTraitMatrix.DenseSquareTraitMatrix.concat_trait"]], "copy() (pybrops.core.mat.densesquaretraitmatrix.densesquaretraitmatrix method)": [[644, "pybrops.core.mat.DenseSquareTraitMatrix.DenseSquareTraitMatrix.copy"]], "deepcopy() (pybrops.core.mat.densesquaretraitmatrix.densesquaretraitmatrix method)": [[644, "pybrops.core.mat.DenseSquareTraitMatrix.DenseSquareTraitMatrix.deepcopy"]], "delete() (pybrops.core.mat.densesquaretraitmatrix.densesquaretraitmatrix method)": [[644, "pybrops.core.mat.DenseSquareTraitMatrix.DenseSquareTraitMatrix.delete"]], "delete_trait() (pybrops.core.mat.densesquaretraitmatrix.densesquaretraitmatrix method)": [[644, "pybrops.core.mat.DenseSquareTraitMatrix.DenseSquareTraitMatrix.delete_trait"]], "from_hdf5() (pybrops.core.mat.densesquaretraitmatrix.densesquaretraitmatrix class method)": [[644, "pybrops.core.mat.DenseSquareTraitMatrix.DenseSquareTraitMatrix.from_hdf5"]], "incorp() (pybrops.core.mat.densesquaretraitmatrix.densesquaretraitmatrix method)": [[644, "pybrops.core.mat.DenseSquareTraitMatrix.DenseSquareTraitMatrix.incorp"]], "incorp_trait() (pybrops.core.mat.densesquaretraitmatrix.densesquaretraitmatrix method)": [[644, "pybrops.core.mat.DenseSquareTraitMatrix.DenseSquareTraitMatrix.incorp_trait"]], "insert() (pybrops.core.mat.densesquaretraitmatrix.densesquaretraitmatrix method)": [[644, "pybrops.core.mat.DenseSquareTraitMatrix.DenseSquareTraitMatrix.insert"]], "insert_trait() (pybrops.core.mat.densesquaretraitmatrix.densesquaretraitmatrix method)": [[644, "pybrops.core.mat.DenseSquareTraitMatrix.DenseSquareTraitMatrix.insert_trait"]], "is_square() (pybrops.core.mat.densesquaretraitmatrix.densesquaretraitmatrix method)": [[644, "pybrops.core.mat.DenseSquareTraitMatrix.DenseSquareTraitMatrix.is_square"]], "is_square_trait() (pybrops.core.mat.densesquaretraitmatrix.densesquaretraitmatrix method)": [[644, "pybrops.core.mat.DenseSquareTraitMatrix.DenseSquareTraitMatrix.is_square_trait"]], "lexsort() (pybrops.core.mat.densesquaretraitmatrix.densesquaretraitmatrix method)": [[644, "pybrops.core.mat.DenseSquareTraitMatrix.DenseSquareTraitMatrix.lexsort"]], "lexsort_trait() (pybrops.core.mat.densesquaretraitmatrix.densesquaretraitmatrix method)": [[644, "pybrops.core.mat.DenseSquareTraitMatrix.DenseSquareTraitMatrix.lexsort_trait"]], "mat (pybrops.core.mat.densesquaretraitmatrix.densesquaretraitmatrix property)": [[644, "pybrops.core.mat.DenseSquareTraitMatrix.DenseSquareTraitMatrix.mat"]], "mat_ndim (pybrops.core.mat.densesquaretraitmatrix.densesquaretraitmatrix property)": [[644, "pybrops.core.mat.DenseSquareTraitMatrix.DenseSquareTraitMatrix.mat_ndim"]], "mat_shape (pybrops.core.mat.densesquaretraitmatrix.densesquaretraitmatrix property)": [[644, "pybrops.core.mat.DenseSquareTraitMatrix.DenseSquareTraitMatrix.mat_shape"]], "nsquare (pybrops.core.mat.densesquaretraitmatrix.densesquaretraitmatrix property)": [[644, "pybrops.core.mat.DenseSquareTraitMatrix.DenseSquareTraitMatrix.nsquare"]], "nsquare_trait (pybrops.core.mat.densesquaretraitmatrix.densesquaretraitmatrix property)": [[644, "pybrops.core.mat.DenseSquareTraitMatrix.DenseSquareTraitMatrix.nsquare_trait"]], "ntrait (pybrops.core.mat.densesquaretraitmatrix.densesquaretraitmatrix property)": [[644, "pybrops.core.mat.DenseSquareTraitMatrix.DenseSquareTraitMatrix.ntrait"]], "remove() (pybrops.core.mat.densesquaretraitmatrix.densesquaretraitmatrix method)": [[644, "pybrops.core.mat.DenseSquareTraitMatrix.DenseSquareTraitMatrix.remove"]], "remove_trait() (pybrops.core.mat.densesquaretraitmatrix.densesquaretraitmatrix method)": [[644, "pybrops.core.mat.DenseSquareTraitMatrix.DenseSquareTraitMatrix.remove_trait"]], "reorder() (pybrops.core.mat.densesquaretraitmatrix.densesquaretraitmatrix method)": [[644, "pybrops.core.mat.DenseSquareTraitMatrix.DenseSquareTraitMatrix.reorder"]], "reorder_trait() (pybrops.core.mat.densesquaretraitmatrix.densesquaretraitmatrix method)": [[644, "pybrops.core.mat.DenseSquareTraitMatrix.DenseSquareTraitMatrix.reorder_trait"]], "select() (pybrops.core.mat.densesquaretraitmatrix.densesquaretraitmatrix method)": [[644, "pybrops.core.mat.DenseSquareTraitMatrix.DenseSquareTraitMatrix.select"]], "select_trait() (pybrops.core.mat.densesquaretraitmatrix.densesquaretraitmatrix method)": [[644, "pybrops.core.mat.DenseSquareTraitMatrix.DenseSquareTraitMatrix.select_trait"]], "sort() (pybrops.core.mat.densesquaretraitmatrix.densesquaretraitmatrix method)": [[644, "pybrops.core.mat.DenseSquareTraitMatrix.DenseSquareTraitMatrix.sort"]], "sort_trait() (pybrops.core.mat.densesquaretraitmatrix.densesquaretraitmatrix method)": [[644, "pybrops.core.mat.DenseSquareTraitMatrix.DenseSquareTraitMatrix.sort_trait"]], "square_axes (pybrops.core.mat.densesquaretraitmatrix.densesquaretraitmatrix property)": [[644, "pybrops.core.mat.DenseSquareTraitMatrix.DenseSquareTraitMatrix.square_axes"]], "square_axes_len (pybrops.core.mat.densesquaretraitmatrix.densesquaretraitmatrix property)": [[644, "pybrops.core.mat.DenseSquareTraitMatrix.DenseSquareTraitMatrix.square_axes_len"]], "square_trait_axes (pybrops.core.mat.densesquaretraitmatrix.densesquaretraitmatrix property)": [[644, "pybrops.core.mat.DenseSquareTraitMatrix.DenseSquareTraitMatrix.square_trait_axes"]], "square_trait_axes_len (pybrops.core.mat.densesquaretraitmatrix.densesquaretraitmatrix property)": [[644, "pybrops.core.mat.DenseSquareTraitMatrix.DenseSquareTraitMatrix.square_trait_axes_len"]], "to_hdf5() (pybrops.core.mat.densesquaretraitmatrix.densesquaretraitmatrix method)": [[644, "pybrops.core.mat.DenseSquareTraitMatrix.DenseSquareTraitMatrix.to_hdf5"]], "trait (pybrops.core.mat.densesquaretraitmatrix.densesquaretraitmatrix property)": [[644, "pybrops.core.mat.DenseSquareTraitMatrix.DenseSquareTraitMatrix.trait"]], "trait_axis (pybrops.core.mat.densesquaretraitmatrix.densesquaretraitmatrix property)": [[644, "pybrops.core.mat.DenseSquareTraitMatrix.DenseSquareTraitMatrix.trait_axis"]], "check_is_densesquaretraitmatrix() (in module pybrops.core.mat.densesquaretraitmatrix)": [[645, "pybrops.core.mat.DenseSquareTraitMatrix.check_is_DenseSquareTraitMatrix"]], "pybrops.core.mat.densetaxamatrix": [[646, "module-pybrops.core.mat.DenseTaxaMatrix"]], "densetaxamatrix (class in pybrops.core.mat.densetaxamatrix)": [[647, "pybrops.core.mat.DenseTaxaMatrix.DenseTaxaMatrix"]], "__add__() (pybrops.core.mat.densetaxamatrix.densetaxamatrix method)": [[647, "pybrops.core.mat.DenseTaxaMatrix.DenseTaxaMatrix.__add__"]], "__mul__() (pybrops.core.mat.densetaxamatrix.densetaxamatrix method)": [[647, "pybrops.core.mat.DenseTaxaMatrix.DenseTaxaMatrix.__mul__"]], "adjoin() (pybrops.core.mat.densetaxamatrix.densetaxamatrix method)": [[647, "pybrops.core.mat.DenseTaxaMatrix.DenseTaxaMatrix.adjoin"]], "adjoin_taxa() (pybrops.core.mat.densetaxamatrix.densetaxamatrix method)": [[647, "pybrops.core.mat.DenseTaxaMatrix.DenseTaxaMatrix.adjoin_taxa"]], "append() (pybrops.core.mat.densetaxamatrix.densetaxamatrix method)": [[647, "pybrops.core.mat.DenseTaxaMatrix.DenseTaxaMatrix.append"]], "append_taxa() (pybrops.core.mat.densetaxamatrix.densetaxamatrix method)": [[647, "pybrops.core.mat.DenseTaxaMatrix.DenseTaxaMatrix.append_taxa"]], "concat() (pybrops.core.mat.densetaxamatrix.densetaxamatrix class method)": [[647, "pybrops.core.mat.DenseTaxaMatrix.DenseTaxaMatrix.concat"]], "concat_taxa() (pybrops.core.mat.densetaxamatrix.densetaxamatrix class method)": [[647, "pybrops.core.mat.DenseTaxaMatrix.DenseTaxaMatrix.concat_taxa"]], "copy() (pybrops.core.mat.densetaxamatrix.densetaxamatrix method)": [[647, "pybrops.core.mat.DenseTaxaMatrix.DenseTaxaMatrix.copy"]], "deepcopy() (pybrops.core.mat.densetaxamatrix.densetaxamatrix method)": [[647, "pybrops.core.mat.DenseTaxaMatrix.DenseTaxaMatrix.deepcopy"]], "delete() (pybrops.core.mat.densetaxamatrix.densetaxamatrix method)": [[647, "pybrops.core.mat.DenseTaxaMatrix.DenseTaxaMatrix.delete"]], "delete_taxa() (pybrops.core.mat.densetaxamatrix.densetaxamatrix method)": [[647, "pybrops.core.mat.DenseTaxaMatrix.DenseTaxaMatrix.delete_taxa"]], "from_hdf5() (pybrops.core.mat.densetaxamatrix.densetaxamatrix class method)": [[647, "pybrops.core.mat.DenseTaxaMatrix.DenseTaxaMatrix.from_hdf5"]], "group() (pybrops.core.mat.densetaxamatrix.densetaxamatrix method)": [[647, "pybrops.core.mat.DenseTaxaMatrix.DenseTaxaMatrix.group"]], "group_taxa() (pybrops.core.mat.densetaxamatrix.densetaxamatrix method)": [[647, "pybrops.core.mat.DenseTaxaMatrix.DenseTaxaMatrix.group_taxa"]], "incorp() (pybrops.core.mat.densetaxamatrix.densetaxamatrix method)": [[647, "pybrops.core.mat.DenseTaxaMatrix.DenseTaxaMatrix.incorp"]], "incorp_taxa() (pybrops.core.mat.densetaxamatrix.densetaxamatrix method)": [[647, "pybrops.core.mat.DenseTaxaMatrix.DenseTaxaMatrix.incorp_taxa"]], "insert() (pybrops.core.mat.densetaxamatrix.densetaxamatrix method)": [[647, "pybrops.core.mat.DenseTaxaMatrix.DenseTaxaMatrix.insert"]], "insert_taxa() (pybrops.core.mat.densetaxamatrix.densetaxamatrix method)": [[647, "pybrops.core.mat.DenseTaxaMatrix.DenseTaxaMatrix.insert_taxa"]], "is_grouped() (pybrops.core.mat.densetaxamatrix.densetaxamatrix method)": [[647, "pybrops.core.mat.DenseTaxaMatrix.DenseTaxaMatrix.is_grouped"]], "is_grouped_taxa() (pybrops.core.mat.densetaxamatrix.densetaxamatrix method)": [[647, "pybrops.core.mat.DenseTaxaMatrix.DenseTaxaMatrix.is_grouped_taxa"]], "lexsort() (pybrops.core.mat.densetaxamatrix.densetaxamatrix method)": [[647, "pybrops.core.mat.DenseTaxaMatrix.DenseTaxaMatrix.lexsort"]], "lexsort_taxa() (pybrops.core.mat.densetaxamatrix.densetaxamatrix method)": [[647, "pybrops.core.mat.DenseTaxaMatrix.DenseTaxaMatrix.lexsort_taxa"]], "mat (pybrops.core.mat.densetaxamatrix.densetaxamatrix property)": [[647, "pybrops.core.mat.DenseTaxaMatrix.DenseTaxaMatrix.mat"]], "mat_ndim (pybrops.core.mat.densetaxamatrix.densetaxamatrix property)": [[647, "pybrops.core.mat.DenseTaxaMatrix.DenseTaxaMatrix.mat_ndim"]], "mat_shape (pybrops.core.mat.densetaxamatrix.densetaxamatrix property)": [[647, "pybrops.core.mat.DenseTaxaMatrix.DenseTaxaMatrix.mat_shape"]], "ntaxa (pybrops.core.mat.densetaxamatrix.densetaxamatrix property)": [[647, "pybrops.core.mat.DenseTaxaMatrix.DenseTaxaMatrix.ntaxa"]], "remove() (pybrops.core.mat.densetaxamatrix.densetaxamatrix method)": [[647, "pybrops.core.mat.DenseTaxaMatrix.DenseTaxaMatrix.remove"]], "remove_taxa() (pybrops.core.mat.densetaxamatrix.densetaxamatrix method)": [[647, "pybrops.core.mat.DenseTaxaMatrix.DenseTaxaMatrix.remove_taxa"]], "reorder() (pybrops.core.mat.densetaxamatrix.densetaxamatrix method)": [[647, "pybrops.core.mat.DenseTaxaMatrix.DenseTaxaMatrix.reorder"]], "reorder_taxa() (pybrops.core.mat.densetaxamatrix.densetaxamatrix method)": [[647, "pybrops.core.mat.DenseTaxaMatrix.DenseTaxaMatrix.reorder_taxa"]], "select() (pybrops.core.mat.densetaxamatrix.densetaxamatrix method)": [[647, "pybrops.core.mat.DenseTaxaMatrix.DenseTaxaMatrix.select"]], "select_taxa() (pybrops.core.mat.densetaxamatrix.densetaxamatrix method)": [[647, "pybrops.core.mat.DenseTaxaMatrix.DenseTaxaMatrix.select_taxa"]], "sort() (pybrops.core.mat.densetaxamatrix.densetaxamatrix method)": [[647, "pybrops.core.mat.DenseTaxaMatrix.DenseTaxaMatrix.sort"]], "sort_taxa() (pybrops.core.mat.densetaxamatrix.densetaxamatrix method)": [[647, "pybrops.core.mat.DenseTaxaMatrix.DenseTaxaMatrix.sort_taxa"]], "taxa (pybrops.core.mat.densetaxamatrix.densetaxamatrix property)": [[647, "pybrops.core.mat.DenseTaxaMatrix.DenseTaxaMatrix.taxa"]], "taxa_axis (pybrops.core.mat.densetaxamatrix.densetaxamatrix property)": [[647, "pybrops.core.mat.DenseTaxaMatrix.DenseTaxaMatrix.taxa_axis"]], "taxa_grp (pybrops.core.mat.densetaxamatrix.densetaxamatrix property)": [[647, "pybrops.core.mat.DenseTaxaMatrix.DenseTaxaMatrix.taxa_grp"]], "taxa_grp_len (pybrops.core.mat.densetaxamatrix.densetaxamatrix property)": [[647, "pybrops.core.mat.DenseTaxaMatrix.DenseTaxaMatrix.taxa_grp_len"]], "taxa_grp_name (pybrops.core.mat.densetaxamatrix.densetaxamatrix property)": [[647, "pybrops.core.mat.DenseTaxaMatrix.DenseTaxaMatrix.taxa_grp_name"]], "taxa_grp_spix (pybrops.core.mat.densetaxamatrix.densetaxamatrix property)": [[647, "pybrops.core.mat.DenseTaxaMatrix.DenseTaxaMatrix.taxa_grp_spix"]], "taxa_grp_stix (pybrops.core.mat.densetaxamatrix.densetaxamatrix property)": [[647, "pybrops.core.mat.DenseTaxaMatrix.DenseTaxaMatrix.taxa_grp_stix"]], "to_hdf5() (pybrops.core.mat.densetaxamatrix.densetaxamatrix method)": [[647, "pybrops.core.mat.DenseTaxaMatrix.DenseTaxaMatrix.to_hdf5"]], "ungroup() (pybrops.core.mat.densetaxamatrix.densetaxamatrix method)": [[647, "pybrops.core.mat.DenseTaxaMatrix.DenseTaxaMatrix.ungroup"]], "ungroup_taxa() (pybrops.core.mat.densetaxamatrix.densetaxamatrix method)": [[647, "pybrops.core.mat.DenseTaxaMatrix.DenseTaxaMatrix.ungroup_taxa"]], "check_is_densetaxamatrix() (in module pybrops.core.mat.densetaxamatrix)": [[648, "pybrops.core.mat.DenseTaxaMatrix.check_is_DenseTaxaMatrix"]], "pybrops.core.mat.densetaxatraitmatrix": [[649, "module-pybrops.core.mat.DenseTaxaTraitMatrix"]], "densetaxatraitmatrix (class in pybrops.core.mat.densetaxatraitmatrix)": [[650, "pybrops.core.mat.DenseTaxaTraitMatrix.DenseTaxaTraitMatrix"]], "__add__() (pybrops.core.mat.densetaxatraitmatrix.densetaxatraitmatrix method)": [[650, "pybrops.core.mat.DenseTaxaTraitMatrix.DenseTaxaTraitMatrix.__add__"]], "__mul__() (pybrops.core.mat.densetaxatraitmatrix.densetaxatraitmatrix method)": [[650, "pybrops.core.mat.DenseTaxaTraitMatrix.DenseTaxaTraitMatrix.__mul__"]], "adjoin() (pybrops.core.mat.densetaxatraitmatrix.densetaxatraitmatrix method)": [[650, "pybrops.core.mat.DenseTaxaTraitMatrix.DenseTaxaTraitMatrix.adjoin"]], "adjoin_taxa() (pybrops.core.mat.densetaxatraitmatrix.densetaxatraitmatrix method)": [[650, "pybrops.core.mat.DenseTaxaTraitMatrix.DenseTaxaTraitMatrix.adjoin_taxa"]], "adjoin_trait() (pybrops.core.mat.densetaxatraitmatrix.densetaxatraitmatrix method)": [[650, "pybrops.core.mat.DenseTaxaTraitMatrix.DenseTaxaTraitMatrix.adjoin_trait"]], "append() (pybrops.core.mat.densetaxatraitmatrix.densetaxatraitmatrix method)": [[650, "pybrops.core.mat.DenseTaxaTraitMatrix.DenseTaxaTraitMatrix.append"]], "append_taxa() (pybrops.core.mat.densetaxatraitmatrix.densetaxatraitmatrix method)": [[650, "pybrops.core.mat.DenseTaxaTraitMatrix.DenseTaxaTraitMatrix.append_taxa"]], "append_trait() (pybrops.core.mat.densetaxatraitmatrix.densetaxatraitmatrix method)": [[650, "pybrops.core.mat.DenseTaxaTraitMatrix.DenseTaxaTraitMatrix.append_trait"]], "concat() (pybrops.core.mat.densetaxatraitmatrix.densetaxatraitmatrix class method)": [[650, "pybrops.core.mat.DenseTaxaTraitMatrix.DenseTaxaTraitMatrix.concat"]], "concat_taxa() (pybrops.core.mat.densetaxatraitmatrix.densetaxatraitmatrix class method)": [[650, "pybrops.core.mat.DenseTaxaTraitMatrix.DenseTaxaTraitMatrix.concat_taxa"]], "concat_trait() (pybrops.core.mat.densetaxatraitmatrix.densetaxatraitmatrix class method)": [[650, "pybrops.core.mat.DenseTaxaTraitMatrix.DenseTaxaTraitMatrix.concat_trait"]], "copy() (pybrops.core.mat.densetaxatraitmatrix.densetaxatraitmatrix method)": [[650, "pybrops.core.mat.DenseTaxaTraitMatrix.DenseTaxaTraitMatrix.copy"]], "deepcopy() (pybrops.core.mat.densetaxatraitmatrix.densetaxatraitmatrix method)": [[650, "pybrops.core.mat.DenseTaxaTraitMatrix.DenseTaxaTraitMatrix.deepcopy"]], "delete() (pybrops.core.mat.densetaxatraitmatrix.densetaxatraitmatrix method)": [[650, "pybrops.core.mat.DenseTaxaTraitMatrix.DenseTaxaTraitMatrix.delete"]], "delete_taxa() (pybrops.core.mat.densetaxatraitmatrix.densetaxatraitmatrix method)": [[650, "pybrops.core.mat.DenseTaxaTraitMatrix.DenseTaxaTraitMatrix.delete_taxa"]], "delete_trait() (pybrops.core.mat.densetaxatraitmatrix.densetaxatraitmatrix method)": [[650, "pybrops.core.mat.DenseTaxaTraitMatrix.DenseTaxaTraitMatrix.delete_trait"]], "from_hdf5() (pybrops.core.mat.densetaxatraitmatrix.densetaxatraitmatrix class method)": [[650, "pybrops.core.mat.DenseTaxaTraitMatrix.DenseTaxaTraitMatrix.from_hdf5"]], "group() (pybrops.core.mat.densetaxatraitmatrix.densetaxatraitmatrix method)": [[650, "pybrops.core.mat.DenseTaxaTraitMatrix.DenseTaxaTraitMatrix.group"]], "group_taxa() (pybrops.core.mat.densetaxatraitmatrix.densetaxatraitmatrix method)": [[650, "pybrops.core.mat.DenseTaxaTraitMatrix.DenseTaxaTraitMatrix.group_taxa"]], "incorp() (pybrops.core.mat.densetaxatraitmatrix.densetaxatraitmatrix method)": [[650, "pybrops.core.mat.DenseTaxaTraitMatrix.DenseTaxaTraitMatrix.incorp"]], "incorp_taxa() (pybrops.core.mat.densetaxatraitmatrix.densetaxatraitmatrix method)": [[650, "pybrops.core.mat.DenseTaxaTraitMatrix.DenseTaxaTraitMatrix.incorp_taxa"]], "incorp_trait() (pybrops.core.mat.densetaxatraitmatrix.densetaxatraitmatrix method)": [[650, "pybrops.core.mat.DenseTaxaTraitMatrix.DenseTaxaTraitMatrix.incorp_trait"]], "insert() (pybrops.core.mat.densetaxatraitmatrix.densetaxatraitmatrix method)": [[650, "pybrops.core.mat.DenseTaxaTraitMatrix.DenseTaxaTraitMatrix.insert"]], "insert_taxa() (pybrops.core.mat.densetaxatraitmatrix.densetaxatraitmatrix method)": [[650, "pybrops.core.mat.DenseTaxaTraitMatrix.DenseTaxaTraitMatrix.insert_taxa"]], "insert_trait() (pybrops.core.mat.densetaxatraitmatrix.densetaxatraitmatrix method)": [[650, "pybrops.core.mat.DenseTaxaTraitMatrix.DenseTaxaTraitMatrix.insert_trait"]], "is_grouped() (pybrops.core.mat.densetaxatraitmatrix.densetaxatraitmatrix method)": [[650, "pybrops.core.mat.DenseTaxaTraitMatrix.DenseTaxaTraitMatrix.is_grouped"]], "is_grouped_taxa() (pybrops.core.mat.densetaxatraitmatrix.densetaxatraitmatrix method)": [[650, "pybrops.core.mat.DenseTaxaTraitMatrix.DenseTaxaTraitMatrix.is_grouped_taxa"]], "lexsort() (pybrops.core.mat.densetaxatraitmatrix.densetaxatraitmatrix method)": [[650, "pybrops.core.mat.DenseTaxaTraitMatrix.DenseTaxaTraitMatrix.lexsort"]], "lexsort_taxa() (pybrops.core.mat.densetaxatraitmatrix.densetaxatraitmatrix method)": [[650, "pybrops.core.mat.DenseTaxaTraitMatrix.DenseTaxaTraitMatrix.lexsort_taxa"]], "lexsort_trait() (pybrops.core.mat.densetaxatraitmatrix.densetaxatraitmatrix method)": [[650, "pybrops.core.mat.DenseTaxaTraitMatrix.DenseTaxaTraitMatrix.lexsort_trait"]], "mat (pybrops.core.mat.densetaxatraitmatrix.densetaxatraitmatrix property)": [[650, "pybrops.core.mat.DenseTaxaTraitMatrix.DenseTaxaTraitMatrix.mat"]], "mat_ndim (pybrops.core.mat.densetaxatraitmatrix.densetaxatraitmatrix property)": [[650, "pybrops.core.mat.DenseTaxaTraitMatrix.DenseTaxaTraitMatrix.mat_ndim"]], "mat_shape (pybrops.core.mat.densetaxatraitmatrix.densetaxatraitmatrix property)": [[650, "pybrops.core.mat.DenseTaxaTraitMatrix.DenseTaxaTraitMatrix.mat_shape"]], "ntaxa (pybrops.core.mat.densetaxatraitmatrix.densetaxatraitmatrix property)": [[650, "pybrops.core.mat.DenseTaxaTraitMatrix.DenseTaxaTraitMatrix.ntaxa"]], "ntrait (pybrops.core.mat.densetaxatraitmatrix.densetaxatraitmatrix property)": [[650, "pybrops.core.mat.DenseTaxaTraitMatrix.DenseTaxaTraitMatrix.ntrait"]], "remove() (pybrops.core.mat.densetaxatraitmatrix.densetaxatraitmatrix method)": [[650, "pybrops.core.mat.DenseTaxaTraitMatrix.DenseTaxaTraitMatrix.remove"]], "remove_taxa() (pybrops.core.mat.densetaxatraitmatrix.densetaxatraitmatrix method)": [[650, "pybrops.core.mat.DenseTaxaTraitMatrix.DenseTaxaTraitMatrix.remove_taxa"]], "remove_trait() (pybrops.core.mat.densetaxatraitmatrix.densetaxatraitmatrix method)": [[650, "pybrops.core.mat.DenseTaxaTraitMatrix.DenseTaxaTraitMatrix.remove_trait"]], "reorder() (pybrops.core.mat.densetaxatraitmatrix.densetaxatraitmatrix method)": [[650, "pybrops.core.mat.DenseTaxaTraitMatrix.DenseTaxaTraitMatrix.reorder"]], "reorder_taxa() (pybrops.core.mat.densetaxatraitmatrix.densetaxatraitmatrix method)": [[650, "pybrops.core.mat.DenseTaxaTraitMatrix.DenseTaxaTraitMatrix.reorder_taxa"]], "reorder_trait() (pybrops.core.mat.densetaxatraitmatrix.densetaxatraitmatrix method)": [[650, "pybrops.core.mat.DenseTaxaTraitMatrix.DenseTaxaTraitMatrix.reorder_trait"]], "select() (pybrops.core.mat.densetaxatraitmatrix.densetaxatraitmatrix method)": [[650, "pybrops.core.mat.DenseTaxaTraitMatrix.DenseTaxaTraitMatrix.select"]], "select_taxa() (pybrops.core.mat.densetaxatraitmatrix.densetaxatraitmatrix method)": [[650, "pybrops.core.mat.DenseTaxaTraitMatrix.DenseTaxaTraitMatrix.select_taxa"]], "select_trait() (pybrops.core.mat.densetaxatraitmatrix.densetaxatraitmatrix method)": [[650, "pybrops.core.mat.DenseTaxaTraitMatrix.DenseTaxaTraitMatrix.select_trait"]], "sort() (pybrops.core.mat.densetaxatraitmatrix.densetaxatraitmatrix method)": [[650, "pybrops.core.mat.DenseTaxaTraitMatrix.DenseTaxaTraitMatrix.sort"]], "sort_taxa() (pybrops.core.mat.densetaxatraitmatrix.densetaxatraitmatrix method)": [[650, "pybrops.core.mat.DenseTaxaTraitMatrix.DenseTaxaTraitMatrix.sort_taxa"]], "sort_trait() (pybrops.core.mat.densetaxatraitmatrix.densetaxatraitmatrix method)": [[650, "pybrops.core.mat.DenseTaxaTraitMatrix.DenseTaxaTraitMatrix.sort_trait"]], "taxa (pybrops.core.mat.densetaxatraitmatrix.densetaxatraitmatrix property)": [[650, "pybrops.core.mat.DenseTaxaTraitMatrix.DenseTaxaTraitMatrix.taxa"]], "taxa_axis (pybrops.core.mat.densetaxatraitmatrix.densetaxatraitmatrix property)": [[650, "pybrops.core.mat.DenseTaxaTraitMatrix.DenseTaxaTraitMatrix.taxa_axis"]], "taxa_grp (pybrops.core.mat.densetaxatraitmatrix.densetaxatraitmatrix property)": [[650, "pybrops.core.mat.DenseTaxaTraitMatrix.DenseTaxaTraitMatrix.taxa_grp"]], "taxa_grp_len (pybrops.core.mat.densetaxatraitmatrix.densetaxatraitmatrix property)": [[650, "pybrops.core.mat.DenseTaxaTraitMatrix.DenseTaxaTraitMatrix.taxa_grp_len"]], "taxa_grp_name (pybrops.core.mat.densetaxatraitmatrix.densetaxatraitmatrix property)": [[650, "pybrops.core.mat.DenseTaxaTraitMatrix.DenseTaxaTraitMatrix.taxa_grp_name"]], "taxa_grp_spix (pybrops.core.mat.densetaxatraitmatrix.densetaxatraitmatrix property)": [[650, "pybrops.core.mat.DenseTaxaTraitMatrix.DenseTaxaTraitMatrix.taxa_grp_spix"]], "taxa_grp_stix (pybrops.core.mat.densetaxatraitmatrix.densetaxatraitmatrix property)": [[650, "pybrops.core.mat.DenseTaxaTraitMatrix.DenseTaxaTraitMatrix.taxa_grp_stix"]], "to_hdf5() (pybrops.core.mat.densetaxatraitmatrix.densetaxatraitmatrix method)": [[650, "pybrops.core.mat.DenseTaxaTraitMatrix.DenseTaxaTraitMatrix.to_hdf5"]], "trait (pybrops.core.mat.densetaxatraitmatrix.densetaxatraitmatrix property)": [[650, "pybrops.core.mat.DenseTaxaTraitMatrix.DenseTaxaTraitMatrix.trait"]], "trait_axis (pybrops.core.mat.densetaxatraitmatrix.densetaxatraitmatrix property)": [[650, "pybrops.core.mat.DenseTaxaTraitMatrix.DenseTaxaTraitMatrix.trait_axis"]], "ungroup() (pybrops.core.mat.densetaxatraitmatrix.densetaxatraitmatrix method)": [[650, "pybrops.core.mat.DenseTaxaTraitMatrix.DenseTaxaTraitMatrix.ungroup"]], "ungroup_taxa() (pybrops.core.mat.densetaxatraitmatrix.densetaxatraitmatrix method)": [[650, "pybrops.core.mat.DenseTaxaTraitMatrix.DenseTaxaTraitMatrix.ungroup_taxa"]], "check_is_densetaxatraitmatrix() (in module pybrops.core.mat.densetaxatraitmatrix)": [[651, "pybrops.core.mat.DenseTaxaTraitMatrix.check_is_DenseTaxaTraitMatrix"]], "pybrops.core.mat.densetaxavariantmatrix": [[652, "module-pybrops.core.mat.DenseTaxaVariantMatrix"]], "densetaxavariantmatrix (class in pybrops.core.mat.densetaxavariantmatrix)": [[653, "pybrops.core.mat.DenseTaxaVariantMatrix.DenseTaxaVariantMatrix"]], "__add__() (pybrops.core.mat.densetaxavariantmatrix.densetaxavariantmatrix method)": [[653, "pybrops.core.mat.DenseTaxaVariantMatrix.DenseTaxaVariantMatrix.__add__"]], "__mul__() (pybrops.core.mat.densetaxavariantmatrix.densetaxavariantmatrix method)": [[653, "pybrops.core.mat.DenseTaxaVariantMatrix.DenseTaxaVariantMatrix.__mul__"]], "adjoin() (pybrops.core.mat.densetaxavariantmatrix.densetaxavariantmatrix method)": [[653, "pybrops.core.mat.DenseTaxaVariantMatrix.DenseTaxaVariantMatrix.adjoin"]], "adjoin_taxa() (pybrops.core.mat.densetaxavariantmatrix.densetaxavariantmatrix method)": [[653, "pybrops.core.mat.DenseTaxaVariantMatrix.DenseTaxaVariantMatrix.adjoin_taxa"]], "adjoin_vrnt() (pybrops.core.mat.densetaxavariantmatrix.densetaxavariantmatrix method)": [[653, "pybrops.core.mat.DenseTaxaVariantMatrix.DenseTaxaVariantMatrix.adjoin_vrnt"]], "append() (pybrops.core.mat.densetaxavariantmatrix.densetaxavariantmatrix method)": [[653, "pybrops.core.mat.DenseTaxaVariantMatrix.DenseTaxaVariantMatrix.append"]], "append_taxa() (pybrops.core.mat.densetaxavariantmatrix.densetaxavariantmatrix method)": [[653, "pybrops.core.mat.DenseTaxaVariantMatrix.DenseTaxaVariantMatrix.append_taxa"]], "append_vrnt() (pybrops.core.mat.densetaxavariantmatrix.densetaxavariantmatrix method)": [[653, "pybrops.core.mat.DenseTaxaVariantMatrix.DenseTaxaVariantMatrix.append_vrnt"]], "concat() (pybrops.core.mat.densetaxavariantmatrix.densetaxavariantmatrix class method)": [[653, "pybrops.core.mat.DenseTaxaVariantMatrix.DenseTaxaVariantMatrix.concat"]], "concat_taxa() (pybrops.core.mat.densetaxavariantmatrix.densetaxavariantmatrix class method)": [[653, "pybrops.core.mat.DenseTaxaVariantMatrix.DenseTaxaVariantMatrix.concat_taxa"]], "concat_vrnt() (pybrops.core.mat.densetaxavariantmatrix.densetaxavariantmatrix class method)": [[653, "pybrops.core.mat.DenseTaxaVariantMatrix.DenseTaxaVariantMatrix.concat_vrnt"]], "copy() (pybrops.core.mat.densetaxavariantmatrix.densetaxavariantmatrix method)": [[653, "pybrops.core.mat.DenseTaxaVariantMatrix.DenseTaxaVariantMatrix.copy"]], "deepcopy() (pybrops.core.mat.densetaxavariantmatrix.densetaxavariantmatrix method)": [[653, "pybrops.core.mat.DenseTaxaVariantMatrix.DenseTaxaVariantMatrix.deepcopy"]], "delete() (pybrops.core.mat.densetaxavariantmatrix.densetaxavariantmatrix method)": [[653, "pybrops.core.mat.DenseTaxaVariantMatrix.DenseTaxaVariantMatrix.delete"]], "delete_taxa() (pybrops.core.mat.densetaxavariantmatrix.densetaxavariantmatrix method)": [[653, "pybrops.core.mat.DenseTaxaVariantMatrix.DenseTaxaVariantMatrix.delete_taxa"]], "delete_vrnt() (pybrops.core.mat.densetaxavariantmatrix.densetaxavariantmatrix method)": [[653, "pybrops.core.mat.DenseTaxaVariantMatrix.DenseTaxaVariantMatrix.delete_vrnt"]], "from_hdf5() (pybrops.core.mat.densetaxavariantmatrix.densetaxavariantmatrix class method)": [[653, "pybrops.core.mat.DenseTaxaVariantMatrix.DenseTaxaVariantMatrix.from_hdf5"]], "group() (pybrops.core.mat.densetaxavariantmatrix.densetaxavariantmatrix method)": [[653, "pybrops.core.mat.DenseTaxaVariantMatrix.DenseTaxaVariantMatrix.group"]], "group_taxa() (pybrops.core.mat.densetaxavariantmatrix.densetaxavariantmatrix method)": [[653, "pybrops.core.mat.DenseTaxaVariantMatrix.DenseTaxaVariantMatrix.group_taxa"]], "group_vrnt() (pybrops.core.mat.densetaxavariantmatrix.densetaxavariantmatrix method)": [[653, "pybrops.core.mat.DenseTaxaVariantMatrix.DenseTaxaVariantMatrix.group_vrnt"]], "incorp() (pybrops.core.mat.densetaxavariantmatrix.densetaxavariantmatrix method)": [[653, "pybrops.core.mat.DenseTaxaVariantMatrix.DenseTaxaVariantMatrix.incorp"]], "incorp_taxa() (pybrops.core.mat.densetaxavariantmatrix.densetaxavariantmatrix method)": [[653, "pybrops.core.mat.DenseTaxaVariantMatrix.DenseTaxaVariantMatrix.incorp_taxa"]], "incorp_vrnt() (pybrops.core.mat.densetaxavariantmatrix.densetaxavariantmatrix method)": [[653, "pybrops.core.mat.DenseTaxaVariantMatrix.DenseTaxaVariantMatrix.incorp_vrnt"]], "insert() (pybrops.core.mat.densetaxavariantmatrix.densetaxavariantmatrix method)": [[653, "pybrops.core.mat.DenseTaxaVariantMatrix.DenseTaxaVariantMatrix.insert"]], "insert_taxa() (pybrops.core.mat.densetaxavariantmatrix.densetaxavariantmatrix method)": [[653, "pybrops.core.mat.DenseTaxaVariantMatrix.DenseTaxaVariantMatrix.insert_taxa"]], "insert_vrnt() (pybrops.core.mat.densetaxavariantmatrix.densetaxavariantmatrix method)": [[653, "pybrops.core.mat.DenseTaxaVariantMatrix.DenseTaxaVariantMatrix.insert_vrnt"]], "is_grouped() (pybrops.core.mat.densetaxavariantmatrix.densetaxavariantmatrix method)": [[653, "pybrops.core.mat.DenseTaxaVariantMatrix.DenseTaxaVariantMatrix.is_grouped"]], "is_grouped_taxa() (pybrops.core.mat.densetaxavariantmatrix.densetaxavariantmatrix method)": [[653, "pybrops.core.mat.DenseTaxaVariantMatrix.DenseTaxaVariantMatrix.is_grouped_taxa"]], "is_grouped_vrnt() (pybrops.core.mat.densetaxavariantmatrix.densetaxavariantmatrix method)": [[653, "pybrops.core.mat.DenseTaxaVariantMatrix.DenseTaxaVariantMatrix.is_grouped_vrnt"]], "lexsort() (pybrops.core.mat.densetaxavariantmatrix.densetaxavariantmatrix method)": [[653, "pybrops.core.mat.DenseTaxaVariantMatrix.DenseTaxaVariantMatrix.lexsort"]], "lexsort_taxa() (pybrops.core.mat.densetaxavariantmatrix.densetaxavariantmatrix method)": [[653, "pybrops.core.mat.DenseTaxaVariantMatrix.DenseTaxaVariantMatrix.lexsort_taxa"]], "lexsort_vrnt() (pybrops.core.mat.densetaxavariantmatrix.densetaxavariantmatrix method)": [[653, "pybrops.core.mat.DenseTaxaVariantMatrix.DenseTaxaVariantMatrix.lexsort_vrnt"]], "mat (pybrops.core.mat.densetaxavariantmatrix.densetaxavariantmatrix property)": [[653, "pybrops.core.mat.DenseTaxaVariantMatrix.DenseTaxaVariantMatrix.mat"]], "mat_ndim (pybrops.core.mat.densetaxavariantmatrix.densetaxavariantmatrix property)": [[653, "pybrops.core.mat.DenseTaxaVariantMatrix.DenseTaxaVariantMatrix.mat_ndim"]], "mat_shape (pybrops.core.mat.densetaxavariantmatrix.densetaxavariantmatrix property)": [[653, "pybrops.core.mat.DenseTaxaVariantMatrix.DenseTaxaVariantMatrix.mat_shape"]], "ntaxa (pybrops.core.mat.densetaxavariantmatrix.densetaxavariantmatrix property)": [[653, "pybrops.core.mat.DenseTaxaVariantMatrix.DenseTaxaVariantMatrix.ntaxa"]], "nvrnt (pybrops.core.mat.densetaxavariantmatrix.densetaxavariantmatrix property)": [[653, "pybrops.core.mat.DenseTaxaVariantMatrix.DenseTaxaVariantMatrix.nvrnt"]], "remove() (pybrops.core.mat.densetaxavariantmatrix.densetaxavariantmatrix method)": [[653, "pybrops.core.mat.DenseTaxaVariantMatrix.DenseTaxaVariantMatrix.remove"]], "remove_taxa() (pybrops.core.mat.densetaxavariantmatrix.densetaxavariantmatrix method)": [[653, "pybrops.core.mat.DenseTaxaVariantMatrix.DenseTaxaVariantMatrix.remove_taxa"]], "remove_vrnt() (pybrops.core.mat.densetaxavariantmatrix.densetaxavariantmatrix method)": [[653, "pybrops.core.mat.DenseTaxaVariantMatrix.DenseTaxaVariantMatrix.remove_vrnt"]], "reorder() (pybrops.core.mat.densetaxavariantmatrix.densetaxavariantmatrix method)": [[653, "pybrops.core.mat.DenseTaxaVariantMatrix.DenseTaxaVariantMatrix.reorder"]], "reorder_taxa() (pybrops.core.mat.densetaxavariantmatrix.densetaxavariantmatrix method)": [[653, "pybrops.core.mat.DenseTaxaVariantMatrix.DenseTaxaVariantMatrix.reorder_taxa"]], "reorder_vrnt() (pybrops.core.mat.densetaxavariantmatrix.densetaxavariantmatrix method)": [[653, "pybrops.core.mat.DenseTaxaVariantMatrix.DenseTaxaVariantMatrix.reorder_vrnt"]], "select() (pybrops.core.mat.densetaxavariantmatrix.densetaxavariantmatrix method)": [[653, "pybrops.core.mat.DenseTaxaVariantMatrix.DenseTaxaVariantMatrix.select"]], "select_taxa() (pybrops.core.mat.densetaxavariantmatrix.densetaxavariantmatrix method)": [[653, "pybrops.core.mat.DenseTaxaVariantMatrix.DenseTaxaVariantMatrix.select_taxa"]], "select_vrnt() (pybrops.core.mat.densetaxavariantmatrix.densetaxavariantmatrix method)": [[653, "pybrops.core.mat.DenseTaxaVariantMatrix.DenseTaxaVariantMatrix.select_vrnt"]], "sort() (pybrops.core.mat.densetaxavariantmatrix.densetaxavariantmatrix method)": [[653, "pybrops.core.mat.DenseTaxaVariantMatrix.DenseTaxaVariantMatrix.sort"]], "sort_taxa() (pybrops.core.mat.densetaxavariantmatrix.densetaxavariantmatrix method)": [[653, "pybrops.core.mat.DenseTaxaVariantMatrix.DenseTaxaVariantMatrix.sort_taxa"]], "sort_vrnt() (pybrops.core.mat.densetaxavariantmatrix.densetaxavariantmatrix method)": [[653, "pybrops.core.mat.DenseTaxaVariantMatrix.DenseTaxaVariantMatrix.sort_vrnt"]], "taxa (pybrops.core.mat.densetaxavariantmatrix.densetaxavariantmatrix property)": [[653, "pybrops.core.mat.DenseTaxaVariantMatrix.DenseTaxaVariantMatrix.taxa"]], "taxa_axis (pybrops.core.mat.densetaxavariantmatrix.densetaxavariantmatrix property)": [[653, "pybrops.core.mat.DenseTaxaVariantMatrix.DenseTaxaVariantMatrix.taxa_axis"]], "taxa_grp (pybrops.core.mat.densetaxavariantmatrix.densetaxavariantmatrix property)": [[653, "pybrops.core.mat.DenseTaxaVariantMatrix.DenseTaxaVariantMatrix.taxa_grp"]], "taxa_grp_len (pybrops.core.mat.densetaxavariantmatrix.densetaxavariantmatrix property)": [[653, "pybrops.core.mat.DenseTaxaVariantMatrix.DenseTaxaVariantMatrix.taxa_grp_len"]], "taxa_grp_name (pybrops.core.mat.densetaxavariantmatrix.densetaxavariantmatrix property)": [[653, "pybrops.core.mat.DenseTaxaVariantMatrix.DenseTaxaVariantMatrix.taxa_grp_name"]], "taxa_grp_spix (pybrops.core.mat.densetaxavariantmatrix.densetaxavariantmatrix property)": [[653, "pybrops.core.mat.DenseTaxaVariantMatrix.DenseTaxaVariantMatrix.taxa_grp_spix"]], "taxa_grp_stix (pybrops.core.mat.densetaxavariantmatrix.densetaxavariantmatrix property)": [[653, "pybrops.core.mat.DenseTaxaVariantMatrix.DenseTaxaVariantMatrix.taxa_grp_stix"]], "to_hdf5() (pybrops.core.mat.densetaxavariantmatrix.densetaxavariantmatrix method)": [[653, "pybrops.core.mat.DenseTaxaVariantMatrix.DenseTaxaVariantMatrix.to_hdf5"]], "ungroup() (pybrops.core.mat.densetaxavariantmatrix.densetaxavariantmatrix method)": [[653, "pybrops.core.mat.DenseTaxaVariantMatrix.DenseTaxaVariantMatrix.ungroup"]], "ungroup_taxa() (pybrops.core.mat.densetaxavariantmatrix.densetaxavariantmatrix method)": [[653, "pybrops.core.mat.DenseTaxaVariantMatrix.DenseTaxaVariantMatrix.ungroup_taxa"]], "ungroup_vrnt() (pybrops.core.mat.densetaxavariantmatrix.densetaxavariantmatrix method)": [[653, "pybrops.core.mat.DenseTaxaVariantMatrix.DenseTaxaVariantMatrix.ungroup_vrnt"]], "vrnt_axis (pybrops.core.mat.densetaxavariantmatrix.densetaxavariantmatrix property)": [[653, "pybrops.core.mat.DenseTaxaVariantMatrix.DenseTaxaVariantMatrix.vrnt_axis"]], "vrnt_chrgrp (pybrops.core.mat.densetaxavariantmatrix.densetaxavariantmatrix property)": [[653, "pybrops.core.mat.DenseTaxaVariantMatrix.DenseTaxaVariantMatrix.vrnt_chrgrp"]], "vrnt_chrgrp_len (pybrops.core.mat.densetaxavariantmatrix.densetaxavariantmatrix property)": [[653, "pybrops.core.mat.DenseTaxaVariantMatrix.DenseTaxaVariantMatrix.vrnt_chrgrp_len"]], "vrnt_chrgrp_name (pybrops.core.mat.densetaxavariantmatrix.densetaxavariantmatrix property)": [[653, "pybrops.core.mat.DenseTaxaVariantMatrix.DenseTaxaVariantMatrix.vrnt_chrgrp_name"]], "vrnt_chrgrp_spix (pybrops.core.mat.densetaxavariantmatrix.densetaxavariantmatrix property)": [[653, "pybrops.core.mat.DenseTaxaVariantMatrix.DenseTaxaVariantMatrix.vrnt_chrgrp_spix"]], "vrnt_chrgrp_stix (pybrops.core.mat.densetaxavariantmatrix.densetaxavariantmatrix property)": [[653, "pybrops.core.mat.DenseTaxaVariantMatrix.DenseTaxaVariantMatrix.vrnt_chrgrp_stix"]], "vrnt_genpos (pybrops.core.mat.densetaxavariantmatrix.densetaxavariantmatrix property)": [[653, "pybrops.core.mat.DenseTaxaVariantMatrix.DenseTaxaVariantMatrix.vrnt_genpos"]], "vrnt_hapalt (pybrops.core.mat.densetaxavariantmatrix.densetaxavariantmatrix property)": [[653, "pybrops.core.mat.DenseTaxaVariantMatrix.DenseTaxaVariantMatrix.vrnt_hapalt"]], "vrnt_hapgrp (pybrops.core.mat.densetaxavariantmatrix.densetaxavariantmatrix property)": [[653, "pybrops.core.mat.DenseTaxaVariantMatrix.DenseTaxaVariantMatrix.vrnt_hapgrp"]], "vrnt_hapref (pybrops.core.mat.densetaxavariantmatrix.densetaxavariantmatrix property)": [[653, "pybrops.core.mat.DenseTaxaVariantMatrix.DenseTaxaVariantMatrix.vrnt_hapref"]], "vrnt_mask (pybrops.core.mat.densetaxavariantmatrix.densetaxavariantmatrix property)": [[653, "pybrops.core.mat.DenseTaxaVariantMatrix.DenseTaxaVariantMatrix.vrnt_mask"]], "vrnt_name (pybrops.core.mat.densetaxavariantmatrix.densetaxavariantmatrix property)": [[653, "pybrops.core.mat.DenseTaxaVariantMatrix.DenseTaxaVariantMatrix.vrnt_name"]], "vrnt_phypos (pybrops.core.mat.densetaxavariantmatrix.densetaxavariantmatrix property)": [[653, "pybrops.core.mat.DenseTaxaVariantMatrix.DenseTaxaVariantMatrix.vrnt_phypos"]], "vrnt_xoprob (pybrops.core.mat.densetaxavariantmatrix.densetaxavariantmatrix property)": [[653, "pybrops.core.mat.DenseTaxaVariantMatrix.DenseTaxaVariantMatrix.vrnt_xoprob"]], "check_is_densetaxavariantmatrix() (in module pybrops.core.mat.densetaxavariantmatrix)": [[654, "pybrops.core.mat.DenseTaxaVariantMatrix.check_is_DenseTaxaVariantMatrix"]], "pybrops.core.mat.densetraitmatrix": [[655, "module-pybrops.core.mat.DenseTraitMatrix"]], "densetraitmatrix (class in pybrops.core.mat.densetraitmatrix)": [[656, "pybrops.core.mat.DenseTraitMatrix.DenseTraitMatrix"]], "__add__() (pybrops.core.mat.densetraitmatrix.densetraitmatrix method)": [[656, "pybrops.core.mat.DenseTraitMatrix.DenseTraitMatrix.__add__"]], "__mul__() (pybrops.core.mat.densetraitmatrix.densetraitmatrix method)": [[656, "pybrops.core.mat.DenseTraitMatrix.DenseTraitMatrix.__mul__"]], "adjoin() (pybrops.core.mat.densetraitmatrix.densetraitmatrix method)": [[656, "pybrops.core.mat.DenseTraitMatrix.DenseTraitMatrix.adjoin"]], "adjoin_trait() (pybrops.core.mat.densetraitmatrix.densetraitmatrix method)": [[656, "pybrops.core.mat.DenseTraitMatrix.DenseTraitMatrix.adjoin_trait"]], "append() (pybrops.core.mat.densetraitmatrix.densetraitmatrix method)": [[656, "pybrops.core.mat.DenseTraitMatrix.DenseTraitMatrix.append"]], "append_trait() (pybrops.core.mat.densetraitmatrix.densetraitmatrix method)": [[656, "pybrops.core.mat.DenseTraitMatrix.DenseTraitMatrix.append_trait"]], "concat() (pybrops.core.mat.densetraitmatrix.densetraitmatrix class method)": [[656, "pybrops.core.mat.DenseTraitMatrix.DenseTraitMatrix.concat"]], "concat_trait() (pybrops.core.mat.densetraitmatrix.densetraitmatrix class method)": [[656, "pybrops.core.mat.DenseTraitMatrix.DenseTraitMatrix.concat_trait"]], "copy() (pybrops.core.mat.densetraitmatrix.densetraitmatrix method)": [[656, "pybrops.core.mat.DenseTraitMatrix.DenseTraitMatrix.copy"]], "deepcopy() (pybrops.core.mat.densetraitmatrix.densetraitmatrix method)": [[656, "pybrops.core.mat.DenseTraitMatrix.DenseTraitMatrix.deepcopy"]], "delete() (pybrops.core.mat.densetraitmatrix.densetraitmatrix method)": [[656, "pybrops.core.mat.DenseTraitMatrix.DenseTraitMatrix.delete"]], "delete_trait() (pybrops.core.mat.densetraitmatrix.densetraitmatrix method)": [[656, "pybrops.core.mat.DenseTraitMatrix.DenseTraitMatrix.delete_trait"]], "from_hdf5() (pybrops.core.mat.densetraitmatrix.densetraitmatrix class method)": [[656, "pybrops.core.mat.DenseTraitMatrix.DenseTraitMatrix.from_hdf5"]], "incorp() (pybrops.core.mat.densetraitmatrix.densetraitmatrix method)": [[656, "pybrops.core.mat.DenseTraitMatrix.DenseTraitMatrix.incorp"]], "incorp_trait() (pybrops.core.mat.densetraitmatrix.densetraitmatrix method)": [[656, "pybrops.core.mat.DenseTraitMatrix.DenseTraitMatrix.incorp_trait"]], "insert() (pybrops.core.mat.densetraitmatrix.densetraitmatrix method)": [[656, "pybrops.core.mat.DenseTraitMatrix.DenseTraitMatrix.insert"]], "insert_trait() (pybrops.core.mat.densetraitmatrix.densetraitmatrix method)": [[656, "pybrops.core.mat.DenseTraitMatrix.DenseTraitMatrix.insert_trait"]], "lexsort() (pybrops.core.mat.densetraitmatrix.densetraitmatrix method)": [[656, "pybrops.core.mat.DenseTraitMatrix.DenseTraitMatrix.lexsort"]], "lexsort_trait() (pybrops.core.mat.densetraitmatrix.densetraitmatrix method)": [[656, "pybrops.core.mat.DenseTraitMatrix.DenseTraitMatrix.lexsort_trait"]], "mat (pybrops.core.mat.densetraitmatrix.densetraitmatrix property)": [[656, "pybrops.core.mat.DenseTraitMatrix.DenseTraitMatrix.mat"]], "mat_ndim (pybrops.core.mat.densetraitmatrix.densetraitmatrix property)": [[656, "pybrops.core.mat.DenseTraitMatrix.DenseTraitMatrix.mat_ndim"]], "mat_shape (pybrops.core.mat.densetraitmatrix.densetraitmatrix property)": [[656, "pybrops.core.mat.DenseTraitMatrix.DenseTraitMatrix.mat_shape"]], "ntrait (pybrops.core.mat.densetraitmatrix.densetraitmatrix property)": [[656, "pybrops.core.mat.DenseTraitMatrix.DenseTraitMatrix.ntrait"]], "remove() (pybrops.core.mat.densetraitmatrix.densetraitmatrix method)": [[656, "pybrops.core.mat.DenseTraitMatrix.DenseTraitMatrix.remove"]], "remove_trait() (pybrops.core.mat.densetraitmatrix.densetraitmatrix method)": [[656, "pybrops.core.mat.DenseTraitMatrix.DenseTraitMatrix.remove_trait"]], "reorder() (pybrops.core.mat.densetraitmatrix.densetraitmatrix method)": [[656, "pybrops.core.mat.DenseTraitMatrix.DenseTraitMatrix.reorder"]], "reorder_trait() (pybrops.core.mat.densetraitmatrix.densetraitmatrix method)": [[656, "pybrops.core.mat.DenseTraitMatrix.DenseTraitMatrix.reorder_trait"]], "select() (pybrops.core.mat.densetraitmatrix.densetraitmatrix method)": [[656, "pybrops.core.mat.DenseTraitMatrix.DenseTraitMatrix.select"]], "select_trait() (pybrops.core.mat.densetraitmatrix.densetraitmatrix method)": [[656, "pybrops.core.mat.DenseTraitMatrix.DenseTraitMatrix.select_trait"]], "sort() (pybrops.core.mat.densetraitmatrix.densetraitmatrix method)": [[656, "pybrops.core.mat.DenseTraitMatrix.DenseTraitMatrix.sort"]], "sort_trait() (pybrops.core.mat.densetraitmatrix.densetraitmatrix method)": [[656, "pybrops.core.mat.DenseTraitMatrix.DenseTraitMatrix.sort_trait"]], "to_hdf5() (pybrops.core.mat.densetraitmatrix.densetraitmatrix method)": [[656, "pybrops.core.mat.DenseTraitMatrix.DenseTraitMatrix.to_hdf5"]], "trait (pybrops.core.mat.densetraitmatrix.densetraitmatrix property)": [[656, "pybrops.core.mat.DenseTraitMatrix.DenseTraitMatrix.trait"]], "trait_axis (pybrops.core.mat.densetraitmatrix.densetraitmatrix property)": [[656, "pybrops.core.mat.DenseTraitMatrix.DenseTraitMatrix.trait_axis"]], "check_is_densetraitmatrix() (in module pybrops.core.mat.densetraitmatrix)": [[657, "pybrops.core.mat.DenseTraitMatrix.check_is_DenseTraitMatrix"]], "pybrops.core.mat.densevariantmatrix": [[658, "module-pybrops.core.mat.DenseVariantMatrix"]], "densevariantmatrix (class in pybrops.core.mat.densevariantmatrix)": [[659, "pybrops.core.mat.DenseVariantMatrix.DenseVariantMatrix"]], "__add__() (pybrops.core.mat.densevariantmatrix.densevariantmatrix method)": [[659, "pybrops.core.mat.DenseVariantMatrix.DenseVariantMatrix.__add__"]], "__mul__() (pybrops.core.mat.densevariantmatrix.densevariantmatrix method)": [[659, "pybrops.core.mat.DenseVariantMatrix.DenseVariantMatrix.__mul__"]], "adjoin() (pybrops.core.mat.densevariantmatrix.densevariantmatrix method)": [[659, "pybrops.core.mat.DenseVariantMatrix.DenseVariantMatrix.adjoin"]], "adjoin_vrnt() (pybrops.core.mat.densevariantmatrix.densevariantmatrix method)": [[659, "pybrops.core.mat.DenseVariantMatrix.DenseVariantMatrix.adjoin_vrnt"]], "append() (pybrops.core.mat.densevariantmatrix.densevariantmatrix method)": [[659, "pybrops.core.mat.DenseVariantMatrix.DenseVariantMatrix.append"]], "append_vrnt() (pybrops.core.mat.densevariantmatrix.densevariantmatrix method)": [[659, "pybrops.core.mat.DenseVariantMatrix.DenseVariantMatrix.append_vrnt"]], "concat() (pybrops.core.mat.densevariantmatrix.densevariantmatrix class method)": [[659, "pybrops.core.mat.DenseVariantMatrix.DenseVariantMatrix.concat"]], "concat_vrnt() (pybrops.core.mat.densevariantmatrix.densevariantmatrix class method)": [[659, "pybrops.core.mat.DenseVariantMatrix.DenseVariantMatrix.concat_vrnt"]], "copy() (pybrops.core.mat.densevariantmatrix.densevariantmatrix method)": [[659, "pybrops.core.mat.DenseVariantMatrix.DenseVariantMatrix.copy"]], "deepcopy() (pybrops.core.mat.densevariantmatrix.densevariantmatrix method)": [[659, "pybrops.core.mat.DenseVariantMatrix.DenseVariantMatrix.deepcopy"]], "delete() (pybrops.core.mat.densevariantmatrix.densevariantmatrix method)": [[659, "pybrops.core.mat.DenseVariantMatrix.DenseVariantMatrix.delete"]], "delete_vrnt() (pybrops.core.mat.densevariantmatrix.densevariantmatrix method)": [[659, "pybrops.core.mat.DenseVariantMatrix.DenseVariantMatrix.delete_vrnt"]], "from_hdf5() (pybrops.core.mat.densevariantmatrix.densevariantmatrix class method)": [[659, "pybrops.core.mat.DenseVariantMatrix.DenseVariantMatrix.from_hdf5"]], "group() (pybrops.core.mat.densevariantmatrix.densevariantmatrix method)": [[659, "pybrops.core.mat.DenseVariantMatrix.DenseVariantMatrix.group"]], "group_vrnt() (pybrops.core.mat.densevariantmatrix.densevariantmatrix method)": [[659, "pybrops.core.mat.DenseVariantMatrix.DenseVariantMatrix.group_vrnt"]], "incorp() (pybrops.core.mat.densevariantmatrix.densevariantmatrix method)": [[659, "pybrops.core.mat.DenseVariantMatrix.DenseVariantMatrix.incorp"]], "incorp_vrnt() (pybrops.core.mat.densevariantmatrix.densevariantmatrix method)": [[659, "pybrops.core.mat.DenseVariantMatrix.DenseVariantMatrix.incorp_vrnt"]], "insert() (pybrops.core.mat.densevariantmatrix.densevariantmatrix method)": [[659, "pybrops.core.mat.DenseVariantMatrix.DenseVariantMatrix.insert"]], "insert_vrnt() (pybrops.core.mat.densevariantmatrix.densevariantmatrix method)": [[659, "pybrops.core.mat.DenseVariantMatrix.DenseVariantMatrix.insert_vrnt"]], "is_grouped() (pybrops.core.mat.densevariantmatrix.densevariantmatrix method)": [[659, "pybrops.core.mat.DenseVariantMatrix.DenseVariantMatrix.is_grouped"]], "is_grouped_vrnt() (pybrops.core.mat.densevariantmatrix.densevariantmatrix method)": [[659, "pybrops.core.mat.DenseVariantMatrix.DenseVariantMatrix.is_grouped_vrnt"]], "lexsort() (pybrops.core.mat.densevariantmatrix.densevariantmatrix method)": [[659, "pybrops.core.mat.DenseVariantMatrix.DenseVariantMatrix.lexsort"]], "lexsort_vrnt() (pybrops.core.mat.densevariantmatrix.densevariantmatrix method)": [[659, "pybrops.core.mat.DenseVariantMatrix.DenseVariantMatrix.lexsort_vrnt"]], "mat (pybrops.core.mat.densevariantmatrix.densevariantmatrix property)": [[659, "pybrops.core.mat.DenseVariantMatrix.DenseVariantMatrix.mat"]], "mat_ndim (pybrops.core.mat.densevariantmatrix.densevariantmatrix property)": [[659, "pybrops.core.mat.DenseVariantMatrix.DenseVariantMatrix.mat_ndim"]], "mat_shape (pybrops.core.mat.densevariantmatrix.densevariantmatrix property)": [[659, "pybrops.core.mat.DenseVariantMatrix.DenseVariantMatrix.mat_shape"]], "nvrnt (pybrops.core.mat.densevariantmatrix.densevariantmatrix property)": [[659, "pybrops.core.mat.DenseVariantMatrix.DenseVariantMatrix.nvrnt"]], "remove() (pybrops.core.mat.densevariantmatrix.densevariantmatrix method)": [[659, "pybrops.core.mat.DenseVariantMatrix.DenseVariantMatrix.remove"]], "remove_vrnt() (pybrops.core.mat.densevariantmatrix.densevariantmatrix method)": [[659, "pybrops.core.mat.DenseVariantMatrix.DenseVariantMatrix.remove_vrnt"]], "reorder() (pybrops.core.mat.densevariantmatrix.densevariantmatrix method)": [[659, "pybrops.core.mat.DenseVariantMatrix.DenseVariantMatrix.reorder"]], "reorder_vrnt() (pybrops.core.mat.densevariantmatrix.densevariantmatrix method)": [[659, "pybrops.core.mat.DenseVariantMatrix.DenseVariantMatrix.reorder_vrnt"]], "select() (pybrops.core.mat.densevariantmatrix.densevariantmatrix method)": [[659, "pybrops.core.mat.DenseVariantMatrix.DenseVariantMatrix.select"]], "select_vrnt() (pybrops.core.mat.densevariantmatrix.densevariantmatrix method)": [[659, "pybrops.core.mat.DenseVariantMatrix.DenseVariantMatrix.select_vrnt"]], "sort() (pybrops.core.mat.densevariantmatrix.densevariantmatrix method)": [[659, "pybrops.core.mat.DenseVariantMatrix.DenseVariantMatrix.sort"]], "sort_vrnt() (pybrops.core.mat.densevariantmatrix.densevariantmatrix method)": [[659, "pybrops.core.mat.DenseVariantMatrix.DenseVariantMatrix.sort_vrnt"]], "to_hdf5() (pybrops.core.mat.densevariantmatrix.densevariantmatrix method)": [[659, "pybrops.core.mat.DenseVariantMatrix.DenseVariantMatrix.to_hdf5"]], "ungroup() (pybrops.core.mat.densevariantmatrix.densevariantmatrix method)": [[659, "pybrops.core.mat.DenseVariantMatrix.DenseVariantMatrix.ungroup"]], "ungroup_vrnt() (pybrops.core.mat.densevariantmatrix.densevariantmatrix method)": [[659, "pybrops.core.mat.DenseVariantMatrix.DenseVariantMatrix.ungroup_vrnt"]], "vrnt_axis (pybrops.core.mat.densevariantmatrix.densevariantmatrix property)": [[659, "pybrops.core.mat.DenseVariantMatrix.DenseVariantMatrix.vrnt_axis"]], "vrnt_chrgrp (pybrops.core.mat.densevariantmatrix.densevariantmatrix property)": [[659, "pybrops.core.mat.DenseVariantMatrix.DenseVariantMatrix.vrnt_chrgrp"]], "vrnt_chrgrp_len (pybrops.core.mat.densevariantmatrix.densevariantmatrix property)": [[659, "pybrops.core.mat.DenseVariantMatrix.DenseVariantMatrix.vrnt_chrgrp_len"]], "vrnt_chrgrp_name (pybrops.core.mat.densevariantmatrix.densevariantmatrix property)": [[659, "pybrops.core.mat.DenseVariantMatrix.DenseVariantMatrix.vrnt_chrgrp_name"]], "vrnt_chrgrp_spix (pybrops.core.mat.densevariantmatrix.densevariantmatrix property)": [[659, "pybrops.core.mat.DenseVariantMatrix.DenseVariantMatrix.vrnt_chrgrp_spix"]], "vrnt_chrgrp_stix (pybrops.core.mat.densevariantmatrix.densevariantmatrix property)": [[659, "pybrops.core.mat.DenseVariantMatrix.DenseVariantMatrix.vrnt_chrgrp_stix"]], "vrnt_genpos (pybrops.core.mat.densevariantmatrix.densevariantmatrix property)": [[659, "pybrops.core.mat.DenseVariantMatrix.DenseVariantMatrix.vrnt_genpos"]], "vrnt_hapalt (pybrops.core.mat.densevariantmatrix.densevariantmatrix property)": [[659, "pybrops.core.mat.DenseVariantMatrix.DenseVariantMatrix.vrnt_hapalt"]], "vrnt_hapgrp (pybrops.core.mat.densevariantmatrix.densevariantmatrix property)": [[659, "pybrops.core.mat.DenseVariantMatrix.DenseVariantMatrix.vrnt_hapgrp"]], "vrnt_hapref (pybrops.core.mat.densevariantmatrix.densevariantmatrix property)": [[659, "pybrops.core.mat.DenseVariantMatrix.DenseVariantMatrix.vrnt_hapref"]], "vrnt_mask (pybrops.core.mat.densevariantmatrix.densevariantmatrix property)": [[659, "pybrops.core.mat.DenseVariantMatrix.DenseVariantMatrix.vrnt_mask"]], "vrnt_name (pybrops.core.mat.densevariantmatrix.densevariantmatrix property)": [[659, "pybrops.core.mat.DenseVariantMatrix.DenseVariantMatrix.vrnt_name"]], "vrnt_phypos (pybrops.core.mat.densevariantmatrix.densevariantmatrix property)": [[659, "pybrops.core.mat.DenseVariantMatrix.DenseVariantMatrix.vrnt_phypos"]], "vrnt_xoprob (pybrops.core.mat.densevariantmatrix.densevariantmatrix property)": [[659, "pybrops.core.mat.DenseVariantMatrix.DenseVariantMatrix.vrnt_xoprob"]], "check_is_densevariantmatrix() (in module pybrops.core.mat.densevariantmatrix)": [[660, "pybrops.core.mat.DenseVariantMatrix.check_is_DenseVariantMatrix"]], "pybrops.core.mat.groupablematrix": [[661, "module-pybrops.core.mat.GroupableMatrix"]], "groupablematrix (class in pybrops.core.mat.groupablematrix)": [[662, "pybrops.core.mat.GroupableMatrix.GroupableMatrix"]], "__add__() (pybrops.core.mat.groupablematrix.groupablematrix method)": [[662, "pybrops.core.mat.GroupableMatrix.GroupableMatrix.__add__"]], "__mul__() (pybrops.core.mat.groupablematrix.groupablematrix method)": [[662, "pybrops.core.mat.GroupableMatrix.GroupableMatrix.__mul__"]], "adjoin() (pybrops.core.mat.groupablematrix.groupablematrix method)": [[662, "pybrops.core.mat.GroupableMatrix.GroupableMatrix.adjoin"]], "append() (pybrops.core.mat.groupablematrix.groupablematrix method)": [[662, "pybrops.core.mat.GroupableMatrix.GroupableMatrix.append"]], "concat() (pybrops.core.mat.groupablematrix.groupablematrix class method)": [[662, "pybrops.core.mat.GroupableMatrix.GroupableMatrix.concat"]], "copy() (pybrops.core.mat.groupablematrix.groupablematrix method)": [[662, "pybrops.core.mat.GroupableMatrix.GroupableMatrix.copy"]], "deepcopy() (pybrops.core.mat.groupablematrix.groupablematrix method)": [[662, "pybrops.core.mat.GroupableMatrix.GroupableMatrix.deepcopy"]], "delete() (pybrops.core.mat.groupablematrix.groupablematrix method)": [[662, "pybrops.core.mat.GroupableMatrix.GroupableMatrix.delete"]], "from_hdf5() (pybrops.core.mat.groupablematrix.groupablematrix class method)": [[662, "pybrops.core.mat.GroupableMatrix.GroupableMatrix.from_hdf5"]], "group() (pybrops.core.mat.groupablematrix.groupablematrix method)": [[662, "pybrops.core.mat.GroupableMatrix.GroupableMatrix.group"]], "incorp() (pybrops.core.mat.groupablematrix.groupablematrix method)": [[662, "pybrops.core.mat.GroupableMatrix.GroupableMatrix.incorp"]], "insert() (pybrops.core.mat.groupablematrix.groupablematrix method)": [[662, "pybrops.core.mat.GroupableMatrix.GroupableMatrix.insert"]], "is_grouped() (pybrops.core.mat.groupablematrix.groupablematrix method)": [[662, "pybrops.core.mat.GroupableMatrix.GroupableMatrix.is_grouped"]], "lexsort() (pybrops.core.mat.groupablematrix.groupablematrix method)": [[662, "pybrops.core.mat.GroupableMatrix.GroupableMatrix.lexsort"]], "mat (pybrops.core.mat.groupablematrix.groupablematrix property)": [[662, "pybrops.core.mat.GroupableMatrix.GroupableMatrix.mat"]], "mat_ndim (pybrops.core.mat.groupablematrix.groupablematrix property)": [[662, "pybrops.core.mat.GroupableMatrix.GroupableMatrix.mat_ndim"]], "mat_shape (pybrops.core.mat.groupablematrix.groupablematrix property)": [[662, "pybrops.core.mat.GroupableMatrix.GroupableMatrix.mat_shape"]], "remove() (pybrops.core.mat.groupablematrix.groupablematrix method)": [[662, "pybrops.core.mat.GroupableMatrix.GroupableMatrix.remove"]], "reorder() (pybrops.core.mat.groupablematrix.groupablematrix method)": [[662, "pybrops.core.mat.GroupableMatrix.GroupableMatrix.reorder"]], "select() (pybrops.core.mat.groupablematrix.groupablematrix method)": [[662, "pybrops.core.mat.GroupableMatrix.GroupableMatrix.select"]], "sort() (pybrops.core.mat.groupablematrix.groupablematrix method)": [[662, "pybrops.core.mat.GroupableMatrix.GroupableMatrix.sort"]], "to_hdf5() (pybrops.core.mat.groupablematrix.groupablematrix method)": [[662, "pybrops.core.mat.GroupableMatrix.GroupableMatrix.to_hdf5"]], "ungroup() (pybrops.core.mat.groupablematrix.groupablematrix method)": [[662, "pybrops.core.mat.GroupableMatrix.GroupableMatrix.ungroup"]], "check_is_groupablematrix() (in module pybrops.core.mat.groupablematrix)": [[663, "pybrops.core.mat.GroupableMatrix.check_is_GroupableMatrix"]], "pybrops.core.mat.matrix": [[664, "module-pybrops.core.mat.Matrix"]], "matrix (class in pybrops.core.mat.matrix)": [[665, "pybrops.core.mat.Matrix.Matrix"]], "__add__() (pybrops.core.mat.matrix.matrix method)": [[665, "pybrops.core.mat.Matrix.Matrix.__add__"]], "__mul__() (pybrops.core.mat.matrix.matrix method)": [[665, "pybrops.core.mat.Matrix.Matrix.__mul__"]], "adjoin() (pybrops.core.mat.matrix.matrix method)": [[665, "pybrops.core.mat.Matrix.Matrix.adjoin"]], "concat() (pybrops.core.mat.matrix.matrix class method)": [[665, "pybrops.core.mat.Matrix.Matrix.concat"]], "copy() (pybrops.core.mat.matrix.matrix method)": [[665, "pybrops.core.mat.Matrix.Matrix.copy"]], "deepcopy() (pybrops.core.mat.matrix.matrix method)": [[665, "pybrops.core.mat.Matrix.Matrix.deepcopy"]], "delete() (pybrops.core.mat.matrix.matrix method)": [[665, "pybrops.core.mat.Matrix.Matrix.delete"]], "from_hdf5() (pybrops.core.mat.matrix.matrix class method)": [[665, "pybrops.core.mat.Matrix.Matrix.from_hdf5"]], "insert() (pybrops.core.mat.matrix.matrix method)": [[665, "pybrops.core.mat.Matrix.Matrix.insert"]], "mat (pybrops.core.mat.matrix.matrix property)": [[665, "pybrops.core.mat.Matrix.Matrix.mat"]], "mat_ndim (pybrops.core.mat.matrix.matrix property)": [[665, "pybrops.core.mat.Matrix.Matrix.mat_ndim"]], "mat_shape (pybrops.core.mat.matrix.matrix property)": [[665, "pybrops.core.mat.Matrix.Matrix.mat_shape"]], "select() (pybrops.core.mat.matrix.matrix method)": [[665, "pybrops.core.mat.Matrix.Matrix.select"]], "to_hdf5() (pybrops.core.mat.matrix.matrix method)": [[665, "pybrops.core.mat.Matrix.Matrix.to_hdf5"]], "check_is_matrix() (in module pybrops.core.mat.matrix)": [[666, "pybrops.core.mat.Matrix.check_is_Matrix"]], "pybrops.core.mat.mutablematrix": [[667, "module-pybrops.core.mat.MutableMatrix"]], "mutablematrix (class in pybrops.core.mat.mutablematrix)": [[668, "pybrops.core.mat.MutableMatrix.MutableMatrix"]], "__add__() (pybrops.core.mat.mutablematrix.mutablematrix method)": [[668, "pybrops.core.mat.MutableMatrix.MutableMatrix.__add__"]], "__mul__() (pybrops.core.mat.mutablematrix.mutablematrix method)": [[668, "pybrops.core.mat.MutableMatrix.MutableMatrix.__mul__"]], "adjoin() (pybrops.core.mat.mutablematrix.mutablematrix method)": [[668, "pybrops.core.mat.MutableMatrix.MutableMatrix.adjoin"]], "append() (pybrops.core.mat.mutablematrix.mutablematrix method)": [[668, "pybrops.core.mat.MutableMatrix.MutableMatrix.append"]], "concat() (pybrops.core.mat.mutablematrix.mutablematrix class method)": [[668, "pybrops.core.mat.MutableMatrix.MutableMatrix.concat"]], "copy() (pybrops.core.mat.mutablematrix.mutablematrix method)": [[668, "pybrops.core.mat.MutableMatrix.MutableMatrix.copy"]], "deepcopy() (pybrops.core.mat.mutablematrix.mutablematrix method)": [[668, "pybrops.core.mat.MutableMatrix.MutableMatrix.deepcopy"]], "delete() (pybrops.core.mat.mutablematrix.mutablematrix method)": [[668, "pybrops.core.mat.MutableMatrix.MutableMatrix.delete"]], "from_hdf5() (pybrops.core.mat.mutablematrix.mutablematrix class method)": [[668, "pybrops.core.mat.MutableMatrix.MutableMatrix.from_hdf5"]], "incorp() (pybrops.core.mat.mutablematrix.mutablematrix method)": [[668, "pybrops.core.mat.MutableMatrix.MutableMatrix.incorp"]], "insert() (pybrops.core.mat.mutablematrix.mutablematrix method)": [[668, "pybrops.core.mat.MutableMatrix.MutableMatrix.insert"]], "mat (pybrops.core.mat.mutablematrix.mutablematrix property)": [[668, "pybrops.core.mat.MutableMatrix.MutableMatrix.mat"]], "mat_ndim (pybrops.core.mat.mutablematrix.mutablematrix property)": [[668, "pybrops.core.mat.MutableMatrix.MutableMatrix.mat_ndim"]], "mat_shape (pybrops.core.mat.mutablematrix.mutablematrix property)": [[668, "pybrops.core.mat.MutableMatrix.MutableMatrix.mat_shape"]], "remove() (pybrops.core.mat.mutablematrix.mutablematrix method)": [[668, "pybrops.core.mat.MutableMatrix.MutableMatrix.remove"]], "select() (pybrops.core.mat.mutablematrix.mutablematrix method)": [[668, "pybrops.core.mat.MutableMatrix.MutableMatrix.select"]], "to_hdf5() (pybrops.core.mat.mutablematrix.mutablematrix method)": [[668, "pybrops.core.mat.MutableMatrix.MutableMatrix.to_hdf5"]], "check_is_mutablematrix() (in module pybrops.core.mat.mutablematrix)": [[669, "pybrops.core.mat.MutableMatrix.check_is_MutableMatrix"]], "pybrops.core.mat.phasedmatrix": [[670, "module-pybrops.core.mat.PhasedMatrix"]], "phasedmatrix (class in pybrops.core.mat.phasedmatrix)": [[671, "pybrops.core.mat.PhasedMatrix.PhasedMatrix"]], "__add__() (pybrops.core.mat.phasedmatrix.phasedmatrix method)": [[671, "pybrops.core.mat.PhasedMatrix.PhasedMatrix.__add__"]], "__mul__() (pybrops.core.mat.phasedmatrix.phasedmatrix method)": [[671, "pybrops.core.mat.PhasedMatrix.PhasedMatrix.__mul__"]], "adjoin() (pybrops.core.mat.phasedmatrix.phasedmatrix method)": [[671, "pybrops.core.mat.PhasedMatrix.PhasedMatrix.adjoin"]], "adjoin_phase() (pybrops.core.mat.phasedmatrix.phasedmatrix method)": [[671, "pybrops.core.mat.PhasedMatrix.PhasedMatrix.adjoin_phase"]], "append() (pybrops.core.mat.phasedmatrix.phasedmatrix method)": [[671, "pybrops.core.mat.PhasedMatrix.PhasedMatrix.append"]], "append_phase() (pybrops.core.mat.phasedmatrix.phasedmatrix method)": [[671, "pybrops.core.mat.PhasedMatrix.PhasedMatrix.append_phase"]], "concat() (pybrops.core.mat.phasedmatrix.phasedmatrix class method)": [[671, "pybrops.core.mat.PhasedMatrix.PhasedMatrix.concat"]], "concat_phase() (pybrops.core.mat.phasedmatrix.phasedmatrix class method)": [[671, "pybrops.core.mat.PhasedMatrix.PhasedMatrix.concat_phase"]], "copy() (pybrops.core.mat.phasedmatrix.phasedmatrix method)": [[671, "pybrops.core.mat.PhasedMatrix.PhasedMatrix.copy"]], "deepcopy() (pybrops.core.mat.phasedmatrix.phasedmatrix method)": [[671, "pybrops.core.mat.PhasedMatrix.PhasedMatrix.deepcopy"]], "delete() (pybrops.core.mat.phasedmatrix.phasedmatrix method)": [[671, "pybrops.core.mat.PhasedMatrix.PhasedMatrix.delete"]], "delete_phase() (pybrops.core.mat.phasedmatrix.phasedmatrix method)": [[671, "pybrops.core.mat.PhasedMatrix.PhasedMatrix.delete_phase"]], "from_hdf5() (pybrops.core.mat.phasedmatrix.phasedmatrix class method)": [[671, "pybrops.core.mat.PhasedMatrix.PhasedMatrix.from_hdf5"]], "incorp() (pybrops.core.mat.phasedmatrix.phasedmatrix method)": [[671, "pybrops.core.mat.PhasedMatrix.PhasedMatrix.incorp"]], "incorp_phase() (pybrops.core.mat.phasedmatrix.phasedmatrix method)": [[671, "pybrops.core.mat.PhasedMatrix.PhasedMatrix.incorp_phase"]], "insert() (pybrops.core.mat.phasedmatrix.phasedmatrix method)": [[671, "pybrops.core.mat.PhasedMatrix.PhasedMatrix.insert"]], "insert_phase() (pybrops.core.mat.phasedmatrix.phasedmatrix method)": [[671, "pybrops.core.mat.PhasedMatrix.PhasedMatrix.insert_phase"]], "mat (pybrops.core.mat.phasedmatrix.phasedmatrix property)": [[671, "pybrops.core.mat.PhasedMatrix.PhasedMatrix.mat"]], "mat_ndim (pybrops.core.mat.phasedmatrix.phasedmatrix property)": [[671, "pybrops.core.mat.PhasedMatrix.PhasedMatrix.mat_ndim"]], "mat_shape (pybrops.core.mat.phasedmatrix.phasedmatrix property)": [[671, "pybrops.core.mat.PhasedMatrix.PhasedMatrix.mat_shape"]], "nphase (pybrops.core.mat.phasedmatrix.phasedmatrix property)": [[671, "pybrops.core.mat.PhasedMatrix.PhasedMatrix.nphase"]], "phase_axis (pybrops.core.mat.phasedmatrix.phasedmatrix property)": [[671, "pybrops.core.mat.PhasedMatrix.PhasedMatrix.phase_axis"]], "remove() (pybrops.core.mat.phasedmatrix.phasedmatrix method)": [[671, "pybrops.core.mat.PhasedMatrix.PhasedMatrix.remove"]], "remove_phase() (pybrops.core.mat.phasedmatrix.phasedmatrix method)": [[671, "pybrops.core.mat.PhasedMatrix.PhasedMatrix.remove_phase"]], "select() (pybrops.core.mat.phasedmatrix.phasedmatrix method)": [[671, "pybrops.core.mat.PhasedMatrix.PhasedMatrix.select"]], "select_phase() (pybrops.core.mat.phasedmatrix.phasedmatrix method)": [[671, "pybrops.core.mat.PhasedMatrix.PhasedMatrix.select_phase"]], "to_hdf5() (pybrops.core.mat.phasedmatrix.phasedmatrix method)": [[671, "pybrops.core.mat.PhasedMatrix.PhasedMatrix.to_hdf5"]], "check_is_phasedmatrix() (in module pybrops.core.mat.phasedmatrix)": [[672, "pybrops.core.mat.PhasedMatrix.check_is_PhasedMatrix"]], "pybrops.core.mat.phasedtaxavariantmatrix": [[673, "module-pybrops.core.mat.PhasedTaxaVariantMatrix"]], "phasedtaxavariantmatrix (class in pybrops.core.mat.phasedtaxavariantmatrix)": [[674, "pybrops.core.mat.PhasedTaxaVariantMatrix.PhasedTaxaVariantMatrix"]], "__add__() (pybrops.core.mat.phasedtaxavariantmatrix.phasedtaxavariantmatrix method)": [[674, "pybrops.core.mat.PhasedTaxaVariantMatrix.PhasedTaxaVariantMatrix.__add__"]], "__mul__() (pybrops.core.mat.phasedtaxavariantmatrix.phasedtaxavariantmatrix method)": [[674, "pybrops.core.mat.PhasedTaxaVariantMatrix.PhasedTaxaVariantMatrix.__mul__"]], "adjoin() (pybrops.core.mat.phasedtaxavariantmatrix.phasedtaxavariantmatrix method)": [[674, "pybrops.core.mat.PhasedTaxaVariantMatrix.PhasedTaxaVariantMatrix.adjoin"]], "adjoin_phase() (pybrops.core.mat.phasedtaxavariantmatrix.phasedtaxavariantmatrix method)": [[674, "pybrops.core.mat.PhasedTaxaVariantMatrix.PhasedTaxaVariantMatrix.adjoin_phase"]], "adjoin_taxa() (pybrops.core.mat.phasedtaxavariantmatrix.phasedtaxavariantmatrix method)": [[674, "pybrops.core.mat.PhasedTaxaVariantMatrix.PhasedTaxaVariantMatrix.adjoin_taxa"]], "adjoin_vrnt() (pybrops.core.mat.phasedtaxavariantmatrix.phasedtaxavariantmatrix method)": [[674, "pybrops.core.mat.PhasedTaxaVariantMatrix.PhasedTaxaVariantMatrix.adjoin_vrnt"]], "append() (pybrops.core.mat.phasedtaxavariantmatrix.phasedtaxavariantmatrix method)": [[674, "pybrops.core.mat.PhasedTaxaVariantMatrix.PhasedTaxaVariantMatrix.append"]], "append_phase() (pybrops.core.mat.phasedtaxavariantmatrix.phasedtaxavariantmatrix method)": [[674, "pybrops.core.mat.PhasedTaxaVariantMatrix.PhasedTaxaVariantMatrix.append_phase"]], "append_taxa() (pybrops.core.mat.phasedtaxavariantmatrix.phasedtaxavariantmatrix method)": [[674, "pybrops.core.mat.PhasedTaxaVariantMatrix.PhasedTaxaVariantMatrix.append_taxa"]], "append_vrnt() (pybrops.core.mat.phasedtaxavariantmatrix.phasedtaxavariantmatrix method)": [[674, "pybrops.core.mat.PhasedTaxaVariantMatrix.PhasedTaxaVariantMatrix.append_vrnt"]], "concat() (pybrops.core.mat.phasedtaxavariantmatrix.phasedtaxavariantmatrix class method)": [[674, "pybrops.core.mat.PhasedTaxaVariantMatrix.PhasedTaxaVariantMatrix.concat"]], "concat_phase() (pybrops.core.mat.phasedtaxavariantmatrix.phasedtaxavariantmatrix class method)": [[674, "pybrops.core.mat.PhasedTaxaVariantMatrix.PhasedTaxaVariantMatrix.concat_phase"]], "concat_taxa() (pybrops.core.mat.phasedtaxavariantmatrix.phasedtaxavariantmatrix class method)": [[674, "pybrops.core.mat.PhasedTaxaVariantMatrix.PhasedTaxaVariantMatrix.concat_taxa"]], "concat_vrnt() (pybrops.core.mat.phasedtaxavariantmatrix.phasedtaxavariantmatrix class method)": [[674, "pybrops.core.mat.PhasedTaxaVariantMatrix.PhasedTaxaVariantMatrix.concat_vrnt"]], "copy() (pybrops.core.mat.phasedtaxavariantmatrix.phasedtaxavariantmatrix method)": [[674, "pybrops.core.mat.PhasedTaxaVariantMatrix.PhasedTaxaVariantMatrix.copy"]], "deepcopy() (pybrops.core.mat.phasedtaxavariantmatrix.phasedtaxavariantmatrix method)": [[674, "pybrops.core.mat.PhasedTaxaVariantMatrix.PhasedTaxaVariantMatrix.deepcopy"]], "delete() (pybrops.core.mat.phasedtaxavariantmatrix.phasedtaxavariantmatrix method)": [[674, "pybrops.core.mat.PhasedTaxaVariantMatrix.PhasedTaxaVariantMatrix.delete"]], "delete_phase() (pybrops.core.mat.phasedtaxavariantmatrix.phasedtaxavariantmatrix method)": [[674, "pybrops.core.mat.PhasedTaxaVariantMatrix.PhasedTaxaVariantMatrix.delete_phase"]], "delete_taxa() (pybrops.core.mat.phasedtaxavariantmatrix.phasedtaxavariantmatrix method)": [[674, "pybrops.core.mat.PhasedTaxaVariantMatrix.PhasedTaxaVariantMatrix.delete_taxa"]], "delete_vrnt() (pybrops.core.mat.phasedtaxavariantmatrix.phasedtaxavariantmatrix method)": [[674, "pybrops.core.mat.PhasedTaxaVariantMatrix.PhasedTaxaVariantMatrix.delete_vrnt"]], "from_hdf5() (pybrops.core.mat.phasedtaxavariantmatrix.phasedtaxavariantmatrix class method)": [[674, "pybrops.core.mat.PhasedTaxaVariantMatrix.PhasedTaxaVariantMatrix.from_hdf5"]], "group() (pybrops.core.mat.phasedtaxavariantmatrix.phasedtaxavariantmatrix method)": [[674, "pybrops.core.mat.PhasedTaxaVariantMatrix.PhasedTaxaVariantMatrix.group"]], "group_taxa() (pybrops.core.mat.phasedtaxavariantmatrix.phasedtaxavariantmatrix method)": [[674, "pybrops.core.mat.PhasedTaxaVariantMatrix.PhasedTaxaVariantMatrix.group_taxa"]], "group_vrnt() (pybrops.core.mat.phasedtaxavariantmatrix.phasedtaxavariantmatrix method)": [[674, "pybrops.core.mat.PhasedTaxaVariantMatrix.PhasedTaxaVariantMatrix.group_vrnt"]], "incorp() (pybrops.core.mat.phasedtaxavariantmatrix.phasedtaxavariantmatrix method)": [[674, "pybrops.core.mat.PhasedTaxaVariantMatrix.PhasedTaxaVariantMatrix.incorp"]], "incorp_phase() (pybrops.core.mat.phasedtaxavariantmatrix.phasedtaxavariantmatrix method)": [[674, "pybrops.core.mat.PhasedTaxaVariantMatrix.PhasedTaxaVariantMatrix.incorp_phase"]], "incorp_taxa() (pybrops.core.mat.phasedtaxavariantmatrix.phasedtaxavariantmatrix method)": [[674, "pybrops.core.mat.PhasedTaxaVariantMatrix.PhasedTaxaVariantMatrix.incorp_taxa"]], "incorp_vrnt() (pybrops.core.mat.phasedtaxavariantmatrix.phasedtaxavariantmatrix method)": [[674, "pybrops.core.mat.PhasedTaxaVariantMatrix.PhasedTaxaVariantMatrix.incorp_vrnt"]], "insert() (pybrops.core.mat.phasedtaxavariantmatrix.phasedtaxavariantmatrix method)": [[674, "pybrops.core.mat.PhasedTaxaVariantMatrix.PhasedTaxaVariantMatrix.insert"]], "insert_phase() (pybrops.core.mat.phasedtaxavariantmatrix.phasedtaxavariantmatrix method)": [[674, "pybrops.core.mat.PhasedTaxaVariantMatrix.PhasedTaxaVariantMatrix.insert_phase"]], "insert_taxa() (pybrops.core.mat.phasedtaxavariantmatrix.phasedtaxavariantmatrix method)": [[674, "pybrops.core.mat.PhasedTaxaVariantMatrix.PhasedTaxaVariantMatrix.insert_taxa"]], "insert_vrnt() (pybrops.core.mat.phasedtaxavariantmatrix.phasedtaxavariantmatrix method)": [[674, "pybrops.core.mat.PhasedTaxaVariantMatrix.PhasedTaxaVariantMatrix.insert_vrnt"]], "is_grouped() (pybrops.core.mat.phasedtaxavariantmatrix.phasedtaxavariantmatrix method)": [[674, "pybrops.core.mat.PhasedTaxaVariantMatrix.PhasedTaxaVariantMatrix.is_grouped"]], "is_grouped_taxa() (pybrops.core.mat.phasedtaxavariantmatrix.phasedtaxavariantmatrix method)": [[674, "pybrops.core.mat.PhasedTaxaVariantMatrix.PhasedTaxaVariantMatrix.is_grouped_taxa"]], "is_grouped_vrnt() (pybrops.core.mat.phasedtaxavariantmatrix.phasedtaxavariantmatrix method)": [[674, "pybrops.core.mat.PhasedTaxaVariantMatrix.PhasedTaxaVariantMatrix.is_grouped_vrnt"]], "lexsort() (pybrops.core.mat.phasedtaxavariantmatrix.phasedtaxavariantmatrix method)": [[674, "pybrops.core.mat.PhasedTaxaVariantMatrix.PhasedTaxaVariantMatrix.lexsort"]], "lexsort_taxa() (pybrops.core.mat.phasedtaxavariantmatrix.phasedtaxavariantmatrix method)": [[674, "pybrops.core.mat.PhasedTaxaVariantMatrix.PhasedTaxaVariantMatrix.lexsort_taxa"]], "lexsort_vrnt() (pybrops.core.mat.phasedtaxavariantmatrix.phasedtaxavariantmatrix method)": [[674, "pybrops.core.mat.PhasedTaxaVariantMatrix.PhasedTaxaVariantMatrix.lexsort_vrnt"]], "mat (pybrops.core.mat.phasedtaxavariantmatrix.phasedtaxavariantmatrix property)": [[674, "pybrops.core.mat.PhasedTaxaVariantMatrix.PhasedTaxaVariantMatrix.mat"]], "mat_ndim (pybrops.core.mat.phasedtaxavariantmatrix.phasedtaxavariantmatrix property)": [[674, "pybrops.core.mat.PhasedTaxaVariantMatrix.PhasedTaxaVariantMatrix.mat_ndim"]], "mat_shape (pybrops.core.mat.phasedtaxavariantmatrix.phasedtaxavariantmatrix property)": [[674, "pybrops.core.mat.PhasedTaxaVariantMatrix.PhasedTaxaVariantMatrix.mat_shape"]], "nphase (pybrops.core.mat.phasedtaxavariantmatrix.phasedtaxavariantmatrix property)": [[674, "pybrops.core.mat.PhasedTaxaVariantMatrix.PhasedTaxaVariantMatrix.nphase"]], "ntaxa (pybrops.core.mat.phasedtaxavariantmatrix.phasedtaxavariantmatrix property)": [[674, "pybrops.core.mat.PhasedTaxaVariantMatrix.PhasedTaxaVariantMatrix.ntaxa"]], "nvrnt (pybrops.core.mat.phasedtaxavariantmatrix.phasedtaxavariantmatrix property)": [[674, "pybrops.core.mat.PhasedTaxaVariantMatrix.PhasedTaxaVariantMatrix.nvrnt"]], "phase_axis (pybrops.core.mat.phasedtaxavariantmatrix.phasedtaxavariantmatrix property)": [[674, "pybrops.core.mat.PhasedTaxaVariantMatrix.PhasedTaxaVariantMatrix.phase_axis"]], "remove() (pybrops.core.mat.phasedtaxavariantmatrix.phasedtaxavariantmatrix method)": [[674, "pybrops.core.mat.PhasedTaxaVariantMatrix.PhasedTaxaVariantMatrix.remove"]], "remove_phase() (pybrops.core.mat.phasedtaxavariantmatrix.phasedtaxavariantmatrix method)": [[674, "pybrops.core.mat.PhasedTaxaVariantMatrix.PhasedTaxaVariantMatrix.remove_phase"]], "remove_taxa() (pybrops.core.mat.phasedtaxavariantmatrix.phasedtaxavariantmatrix method)": [[674, "pybrops.core.mat.PhasedTaxaVariantMatrix.PhasedTaxaVariantMatrix.remove_taxa"]], "remove_vrnt() (pybrops.core.mat.phasedtaxavariantmatrix.phasedtaxavariantmatrix method)": [[674, "pybrops.core.mat.PhasedTaxaVariantMatrix.PhasedTaxaVariantMatrix.remove_vrnt"]], "reorder() (pybrops.core.mat.phasedtaxavariantmatrix.phasedtaxavariantmatrix method)": [[674, "pybrops.core.mat.PhasedTaxaVariantMatrix.PhasedTaxaVariantMatrix.reorder"]], "reorder_taxa() (pybrops.core.mat.phasedtaxavariantmatrix.phasedtaxavariantmatrix method)": [[674, "pybrops.core.mat.PhasedTaxaVariantMatrix.PhasedTaxaVariantMatrix.reorder_taxa"]], "reorder_vrnt() (pybrops.core.mat.phasedtaxavariantmatrix.phasedtaxavariantmatrix method)": [[674, "pybrops.core.mat.PhasedTaxaVariantMatrix.PhasedTaxaVariantMatrix.reorder_vrnt"]], "select() (pybrops.core.mat.phasedtaxavariantmatrix.phasedtaxavariantmatrix method)": [[674, "pybrops.core.mat.PhasedTaxaVariantMatrix.PhasedTaxaVariantMatrix.select"]], "select_phase() (pybrops.core.mat.phasedtaxavariantmatrix.phasedtaxavariantmatrix method)": [[674, "pybrops.core.mat.PhasedTaxaVariantMatrix.PhasedTaxaVariantMatrix.select_phase"]], "select_taxa() (pybrops.core.mat.phasedtaxavariantmatrix.phasedtaxavariantmatrix method)": [[674, "pybrops.core.mat.PhasedTaxaVariantMatrix.PhasedTaxaVariantMatrix.select_taxa"]], "select_vrnt() (pybrops.core.mat.phasedtaxavariantmatrix.phasedtaxavariantmatrix method)": [[674, "pybrops.core.mat.PhasedTaxaVariantMatrix.PhasedTaxaVariantMatrix.select_vrnt"]], "sort() (pybrops.core.mat.phasedtaxavariantmatrix.phasedtaxavariantmatrix method)": [[674, "pybrops.core.mat.PhasedTaxaVariantMatrix.PhasedTaxaVariantMatrix.sort"]], "sort_taxa() (pybrops.core.mat.phasedtaxavariantmatrix.phasedtaxavariantmatrix method)": [[674, "pybrops.core.mat.PhasedTaxaVariantMatrix.PhasedTaxaVariantMatrix.sort_taxa"]], "sort_vrnt() (pybrops.core.mat.phasedtaxavariantmatrix.phasedtaxavariantmatrix method)": [[674, "pybrops.core.mat.PhasedTaxaVariantMatrix.PhasedTaxaVariantMatrix.sort_vrnt"]], "taxa (pybrops.core.mat.phasedtaxavariantmatrix.phasedtaxavariantmatrix property)": [[674, "pybrops.core.mat.PhasedTaxaVariantMatrix.PhasedTaxaVariantMatrix.taxa"]], "taxa_axis (pybrops.core.mat.phasedtaxavariantmatrix.phasedtaxavariantmatrix property)": [[674, "pybrops.core.mat.PhasedTaxaVariantMatrix.PhasedTaxaVariantMatrix.taxa_axis"]], "taxa_grp (pybrops.core.mat.phasedtaxavariantmatrix.phasedtaxavariantmatrix property)": [[674, "pybrops.core.mat.PhasedTaxaVariantMatrix.PhasedTaxaVariantMatrix.taxa_grp"]], "taxa_grp_len (pybrops.core.mat.phasedtaxavariantmatrix.phasedtaxavariantmatrix property)": [[674, "pybrops.core.mat.PhasedTaxaVariantMatrix.PhasedTaxaVariantMatrix.taxa_grp_len"]], "taxa_grp_name (pybrops.core.mat.phasedtaxavariantmatrix.phasedtaxavariantmatrix property)": [[674, "pybrops.core.mat.PhasedTaxaVariantMatrix.PhasedTaxaVariantMatrix.taxa_grp_name"]], "taxa_grp_spix (pybrops.core.mat.phasedtaxavariantmatrix.phasedtaxavariantmatrix property)": [[674, "pybrops.core.mat.PhasedTaxaVariantMatrix.PhasedTaxaVariantMatrix.taxa_grp_spix"]], "taxa_grp_stix (pybrops.core.mat.phasedtaxavariantmatrix.phasedtaxavariantmatrix property)": [[674, "pybrops.core.mat.PhasedTaxaVariantMatrix.PhasedTaxaVariantMatrix.taxa_grp_stix"]], "to_hdf5() (pybrops.core.mat.phasedtaxavariantmatrix.phasedtaxavariantmatrix method)": [[674, "pybrops.core.mat.PhasedTaxaVariantMatrix.PhasedTaxaVariantMatrix.to_hdf5"]], "ungroup() (pybrops.core.mat.phasedtaxavariantmatrix.phasedtaxavariantmatrix method)": [[674, "pybrops.core.mat.PhasedTaxaVariantMatrix.PhasedTaxaVariantMatrix.ungroup"]], "ungroup_taxa() (pybrops.core.mat.phasedtaxavariantmatrix.phasedtaxavariantmatrix method)": [[674, "pybrops.core.mat.PhasedTaxaVariantMatrix.PhasedTaxaVariantMatrix.ungroup_taxa"]], "ungroup_vrnt() (pybrops.core.mat.phasedtaxavariantmatrix.phasedtaxavariantmatrix method)": [[674, "pybrops.core.mat.PhasedTaxaVariantMatrix.PhasedTaxaVariantMatrix.ungroup_vrnt"]], "vrnt_axis (pybrops.core.mat.phasedtaxavariantmatrix.phasedtaxavariantmatrix property)": [[674, "pybrops.core.mat.PhasedTaxaVariantMatrix.PhasedTaxaVariantMatrix.vrnt_axis"]], "vrnt_chrgrp (pybrops.core.mat.phasedtaxavariantmatrix.phasedtaxavariantmatrix property)": [[674, "pybrops.core.mat.PhasedTaxaVariantMatrix.PhasedTaxaVariantMatrix.vrnt_chrgrp"]], "vrnt_chrgrp_len (pybrops.core.mat.phasedtaxavariantmatrix.phasedtaxavariantmatrix property)": [[674, "pybrops.core.mat.PhasedTaxaVariantMatrix.PhasedTaxaVariantMatrix.vrnt_chrgrp_len"]], "vrnt_chrgrp_name (pybrops.core.mat.phasedtaxavariantmatrix.phasedtaxavariantmatrix property)": [[674, "pybrops.core.mat.PhasedTaxaVariantMatrix.PhasedTaxaVariantMatrix.vrnt_chrgrp_name"]], "vrnt_chrgrp_spix (pybrops.core.mat.phasedtaxavariantmatrix.phasedtaxavariantmatrix property)": [[674, "pybrops.core.mat.PhasedTaxaVariantMatrix.PhasedTaxaVariantMatrix.vrnt_chrgrp_spix"]], "vrnt_chrgrp_stix (pybrops.core.mat.phasedtaxavariantmatrix.phasedtaxavariantmatrix property)": [[674, "pybrops.core.mat.PhasedTaxaVariantMatrix.PhasedTaxaVariantMatrix.vrnt_chrgrp_stix"]], "vrnt_genpos (pybrops.core.mat.phasedtaxavariantmatrix.phasedtaxavariantmatrix property)": [[674, "pybrops.core.mat.PhasedTaxaVariantMatrix.PhasedTaxaVariantMatrix.vrnt_genpos"]], "vrnt_hapalt (pybrops.core.mat.phasedtaxavariantmatrix.phasedtaxavariantmatrix property)": [[674, "pybrops.core.mat.PhasedTaxaVariantMatrix.PhasedTaxaVariantMatrix.vrnt_hapalt"]], "vrnt_hapgrp (pybrops.core.mat.phasedtaxavariantmatrix.phasedtaxavariantmatrix property)": [[674, "pybrops.core.mat.PhasedTaxaVariantMatrix.PhasedTaxaVariantMatrix.vrnt_hapgrp"]], "vrnt_hapref (pybrops.core.mat.phasedtaxavariantmatrix.phasedtaxavariantmatrix property)": [[674, "pybrops.core.mat.PhasedTaxaVariantMatrix.PhasedTaxaVariantMatrix.vrnt_hapref"]], "vrnt_mask (pybrops.core.mat.phasedtaxavariantmatrix.phasedtaxavariantmatrix property)": [[674, "pybrops.core.mat.PhasedTaxaVariantMatrix.PhasedTaxaVariantMatrix.vrnt_mask"]], "vrnt_name (pybrops.core.mat.phasedtaxavariantmatrix.phasedtaxavariantmatrix property)": [[674, "pybrops.core.mat.PhasedTaxaVariantMatrix.PhasedTaxaVariantMatrix.vrnt_name"]], "vrnt_phypos (pybrops.core.mat.phasedtaxavariantmatrix.phasedtaxavariantmatrix property)": [[674, "pybrops.core.mat.PhasedTaxaVariantMatrix.PhasedTaxaVariantMatrix.vrnt_phypos"]], "vrnt_xoprob (pybrops.core.mat.phasedtaxavariantmatrix.phasedtaxavariantmatrix property)": [[674, "pybrops.core.mat.PhasedTaxaVariantMatrix.PhasedTaxaVariantMatrix.vrnt_xoprob"]], "check_is_phasedtaxavariantmatrix() (in module pybrops.core.mat.phasedtaxavariantmatrix)": [[675, "pybrops.core.mat.PhasedTaxaVariantMatrix.check_is_PhasedTaxaVariantMatrix"]], "pybrops.core.mat.prunablematrix": [[676, "module-pybrops.core.mat.PrunableMatrix"]], "prunablematrix (class in pybrops.core.mat.prunablematrix)": [[677, "pybrops.core.mat.PrunableMatrix.PrunableMatrix"]], "__add__() (pybrops.core.mat.prunablematrix.prunablematrix method)": [[677, "pybrops.core.mat.PrunableMatrix.PrunableMatrix.__add__"]], "__mul__() (pybrops.core.mat.prunablematrix.prunablematrix method)": [[677, "pybrops.core.mat.PrunableMatrix.PrunableMatrix.__mul__"]], "adjoin() (pybrops.core.mat.prunablematrix.prunablematrix method)": [[677, "pybrops.core.mat.PrunableMatrix.PrunableMatrix.adjoin"]], "concat() (pybrops.core.mat.prunablematrix.prunablematrix class method)": [[677, "pybrops.core.mat.PrunableMatrix.PrunableMatrix.concat"]], "copy() (pybrops.core.mat.prunablematrix.prunablematrix method)": [[677, "pybrops.core.mat.PrunableMatrix.PrunableMatrix.copy"]], "deepcopy() (pybrops.core.mat.prunablematrix.prunablematrix method)": [[677, "pybrops.core.mat.PrunableMatrix.PrunableMatrix.deepcopy"]], "delete() (pybrops.core.mat.prunablematrix.prunablematrix method)": [[677, "pybrops.core.mat.PrunableMatrix.PrunableMatrix.delete"]], "from_hdf5() (pybrops.core.mat.prunablematrix.prunablematrix class method)": [[677, "pybrops.core.mat.PrunableMatrix.PrunableMatrix.from_hdf5"]], "insert() (pybrops.core.mat.prunablematrix.prunablematrix method)": [[677, "pybrops.core.mat.PrunableMatrix.PrunableMatrix.insert"]], "mat (pybrops.core.mat.prunablematrix.prunablematrix property)": [[677, "pybrops.core.mat.PrunableMatrix.PrunableMatrix.mat"]], "mat_ndim (pybrops.core.mat.prunablematrix.prunablematrix property)": [[677, "pybrops.core.mat.PrunableMatrix.PrunableMatrix.mat_ndim"]], "mat_shape (pybrops.core.mat.prunablematrix.prunablematrix property)": [[677, "pybrops.core.mat.PrunableMatrix.PrunableMatrix.mat_shape"]], "prune() (pybrops.core.mat.prunablematrix.prunablematrix method)": [[677, "pybrops.core.mat.PrunableMatrix.PrunableMatrix.prune"]], "select() (pybrops.core.mat.prunablematrix.prunablematrix method)": [[677, "pybrops.core.mat.PrunableMatrix.PrunableMatrix.select"]], "to_hdf5() (pybrops.core.mat.prunablematrix.prunablematrix method)": [[677, "pybrops.core.mat.PrunableMatrix.PrunableMatrix.to_hdf5"]], "check_is_prunablematrix() (in module pybrops.core.mat.prunablematrix)": [[678, "pybrops.core.mat.PrunableMatrix.check_is_PrunableMatrix"]], "pybrops.core.mat.sortablematrix": [[679, "module-pybrops.core.mat.SortableMatrix"]], "sortablematrix (class in pybrops.core.mat.sortablematrix)": [[680, "pybrops.core.mat.SortableMatrix.SortableMatrix"]], "__add__() (pybrops.core.mat.sortablematrix.sortablematrix method)": [[680, "pybrops.core.mat.SortableMatrix.SortableMatrix.__add__"]], "__mul__() (pybrops.core.mat.sortablematrix.sortablematrix method)": [[680, "pybrops.core.mat.SortableMatrix.SortableMatrix.__mul__"]], "adjoin() (pybrops.core.mat.sortablematrix.sortablematrix method)": [[680, "pybrops.core.mat.SortableMatrix.SortableMatrix.adjoin"]], "append() (pybrops.core.mat.sortablematrix.sortablematrix method)": [[680, "pybrops.core.mat.SortableMatrix.SortableMatrix.append"]], "concat() (pybrops.core.mat.sortablematrix.sortablematrix class method)": [[680, "pybrops.core.mat.SortableMatrix.SortableMatrix.concat"]], "copy() (pybrops.core.mat.sortablematrix.sortablematrix method)": [[680, "pybrops.core.mat.SortableMatrix.SortableMatrix.copy"]], "deepcopy() (pybrops.core.mat.sortablematrix.sortablematrix method)": [[680, "pybrops.core.mat.SortableMatrix.SortableMatrix.deepcopy"]], "delete() (pybrops.core.mat.sortablematrix.sortablematrix method)": [[680, "pybrops.core.mat.SortableMatrix.SortableMatrix.delete"]], "from_hdf5() (pybrops.core.mat.sortablematrix.sortablematrix class method)": [[680, "pybrops.core.mat.SortableMatrix.SortableMatrix.from_hdf5"]], "incorp() (pybrops.core.mat.sortablematrix.sortablematrix method)": [[680, "pybrops.core.mat.SortableMatrix.SortableMatrix.incorp"]], "insert() (pybrops.core.mat.sortablematrix.sortablematrix method)": [[680, "pybrops.core.mat.SortableMatrix.SortableMatrix.insert"]], "lexsort() (pybrops.core.mat.sortablematrix.sortablematrix method)": [[680, "pybrops.core.mat.SortableMatrix.SortableMatrix.lexsort"]], "mat (pybrops.core.mat.sortablematrix.sortablematrix property)": [[680, "pybrops.core.mat.SortableMatrix.SortableMatrix.mat"]], "mat_ndim (pybrops.core.mat.sortablematrix.sortablematrix property)": [[680, "pybrops.core.mat.SortableMatrix.SortableMatrix.mat_ndim"]], "mat_shape (pybrops.core.mat.sortablematrix.sortablematrix property)": [[680, "pybrops.core.mat.SortableMatrix.SortableMatrix.mat_shape"]], "remove() (pybrops.core.mat.sortablematrix.sortablematrix method)": [[680, "pybrops.core.mat.SortableMatrix.SortableMatrix.remove"]], "reorder() (pybrops.core.mat.sortablematrix.sortablematrix method)": [[680, "pybrops.core.mat.SortableMatrix.SortableMatrix.reorder"]], "select() (pybrops.core.mat.sortablematrix.sortablematrix method)": [[680, "pybrops.core.mat.SortableMatrix.SortableMatrix.select"]], "sort() (pybrops.core.mat.sortablematrix.sortablematrix method)": [[680, "pybrops.core.mat.SortableMatrix.SortableMatrix.sort"]], "to_hdf5() (pybrops.core.mat.sortablematrix.sortablematrix method)": [[680, "pybrops.core.mat.SortableMatrix.SortableMatrix.to_hdf5"]], "check_is_sortablematrix() (in module pybrops.core.mat.sortablematrix)": [[681, "pybrops.core.mat.SortableMatrix.check_is_SortableMatrix"]], "pybrops.core.mat.squarematrix": [[682, "module-pybrops.core.mat.SquareMatrix"]], "squarematrix (class in pybrops.core.mat.squarematrix)": [[683, "pybrops.core.mat.SquareMatrix.SquareMatrix"]], "__add__() (pybrops.core.mat.squarematrix.squarematrix method)": [[683, "pybrops.core.mat.SquareMatrix.SquareMatrix.__add__"]], "__mul__() (pybrops.core.mat.squarematrix.squarematrix method)": [[683, "pybrops.core.mat.SquareMatrix.SquareMatrix.__mul__"]], "adjoin() (pybrops.core.mat.squarematrix.squarematrix method)": [[683, "pybrops.core.mat.SquareMatrix.SquareMatrix.adjoin"]], "concat() (pybrops.core.mat.squarematrix.squarematrix class method)": [[683, "pybrops.core.mat.SquareMatrix.SquareMatrix.concat"]], "copy() (pybrops.core.mat.squarematrix.squarematrix method)": [[683, "pybrops.core.mat.SquareMatrix.SquareMatrix.copy"]], "deepcopy() (pybrops.core.mat.squarematrix.squarematrix method)": [[683, "pybrops.core.mat.SquareMatrix.SquareMatrix.deepcopy"]], "delete() (pybrops.core.mat.squarematrix.squarematrix method)": [[683, "pybrops.core.mat.SquareMatrix.SquareMatrix.delete"]], "from_hdf5() (pybrops.core.mat.squarematrix.squarematrix class method)": [[683, "pybrops.core.mat.SquareMatrix.SquareMatrix.from_hdf5"]], "insert() (pybrops.core.mat.squarematrix.squarematrix method)": [[683, "pybrops.core.mat.SquareMatrix.SquareMatrix.insert"]], "is_square() (pybrops.core.mat.squarematrix.squarematrix method)": [[683, "pybrops.core.mat.SquareMatrix.SquareMatrix.is_square"]], "mat (pybrops.core.mat.squarematrix.squarematrix property)": [[683, "pybrops.core.mat.SquareMatrix.SquareMatrix.mat"]], "mat_ndim (pybrops.core.mat.squarematrix.squarematrix property)": [[683, "pybrops.core.mat.SquareMatrix.SquareMatrix.mat_ndim"]], "mat_shape (pybrops.core.mat.squarematrix.squarematrix property)": [[683, "pybrops.core.mat.SquareMatrix.SquareMatrix.mat_shape"]], "nsquare (pybrops.core.mat.squarematrix.squarematrix property)": [[683, "pybrops.core.mat.SquareMatrix.SquareMatrix.nsquare"]], "select() (pybrops.core.mat.squarematrix.squarematrix method)": [[683, "pybrops.core.mat.SquareMatrix.SquareMatrix.select"]], "square_axes (pybrops.core.mat.squarematrix.squarematrix property)": [[683, "pybrops.core.mat.SquareMatrix.SquareMatrix.square_axes"]], "square_axes_len (pybrops.core.mat.squarematrix.squarematrix property)": [[683, "pybrops.core.mat.SquareMatrix.SquareMatrix.square_axes_len"]], "to_hdf5() (pybrops.core.mat.squarematrix.squarematrix method)": [[683, "pybrops.core.mat.SquareMatrix.SquareMatrix.to_hdf5"]], "check_is_squarematrix() (in module pybrops.core.mat.squarematrix)": [[684, "pybrops.core.mat.SquareMatrix.check_is_SquareMatrix"]], "pybrops.core.mat.squaretaxamatrix": [[685, "module-pybrops.core.mat.SquareTaxaMatrix"]], "squaretaxamatrix (class in pybrops.core.mat.squaretaxamatrix)": [[686, "pybrops.core.mat.SquareTaxaMatrix.SquareTaxaMatrix"]], "__add__() (pybrops.core.mat.squaretaxamatrix.squaretaxamatrix method)": [[686, "pybrops.core.mat.SquareTaxaMatrix.SquareTaxaMatrix.__add__"]], "__mul__() (pybrops.core.mat.squaretaxamatrix.squaretaxamatrix method)": [[686, "pybrops.core.mat.SquareTaxaMatrix.SquareTaxaMatrix.__mul__"]], "adjoin() (pybrops.core.mat.squaretaxamatrix.squaretaxamatrix method)": [[686, "pybrops.core.mat.SquareTaxaMatrix.SquareTaxaMatrix.adjoin"]], "adjoin_taxa() (pybrops.core.mat.squaretaxamatrix.squaretaxamatrix method)": [[686, "pybrops.core.mat.SquareTaxaMatrix.SquareTaxaMatrix.adjoin_taxa"]], "append() (pybrops.core.mat.squaretaxamatrix.squaretaxamatrix method)": [[686, "pybrops.core.mat.SquareTaxaMatrix.SquareTaxaMatrix.append"]], "append_taxa() (pybrops.core.mat.squaretaxamatrix.squaretaxamatrix method)": [[686, "pybrops.core.mat.SquareTaxaMatrix.SquareTaxaMatrix.append_taxa"]], "concat() (pybrops.core.mat.squaretaxamatrix.squaretaxamatrix class method)": [[686, "pybrops.core.mat.SquareTaxaMatrix.SquareTaxaMatrix.concat"]], "concat_taxa() (pybrops.core.mat.squaretaxamatrix.squaretaxamatrix class method)": [[686, "pybrops.core.mat.SquareTaxaMatrix.SquareTaxaMatrix.concat_taxa"]], "copy() (pybrops.core.mat.squaretaxamatrix.squaretaxamatrix method)": [[686, "pybrops.core.mat.SquareTaxaMatrix.SquareTaxaMatrix.copy"]], "deepcopy() (pybrops.core.mat.squaretaxamatrix.squaretaxamatrix method)": [[686, "pybrops.core.mat.SquareTaxaMatrix.SquareTaxaMatrix.deepcopy"]], "delete() (pybrops.core.mat.squaretaxamatrix.squaretaxamatrix method)": [[686, "pybrops.core.mat.SquareTaxaMatrix.SquareTaxaMatrix.delete"]], "delete_taxa() (pybrops.core.mat.squaretaxamatrix.squaretaxamatrix method)": [[686, "pybrops.core.mat.SquareTaxaMatrix.SquareTaxaMatrix.delete_taxa"]], "from_hdf5() (pybrops.core.mat.squaretaxamatrix.squaretaxamatrix class method)": [[686, "pybrops.core.mat.SquareTaxaMatrix.SquareTaxaMatrix.from_hdf5"]], "group() (pybrops.core.mat.squaretaxamatrix.squaretaxamatrix method)": [[686, "pybrops.core.mat.SquareTaxaMatrix.SquareTaxaMatrix.group"]], "group_taxa() (pybrops.core.mat.squaretaxamatrix.squaretaxamatrix method)": [[686, "pybrops.core.mat.SquareTaxaMatrix.SquareTaxaMatrix.group_taxa"]], "incorp() (pybrops.core.mat.squaretaxamatrix.squaretaxamatrix method)": [[686, "pybrops.core.mat.SquareTaxaMatrix.SquareTaxaMatrix.incorp"]], "incorp_taxa() (pybrops.core.mat.squaretaxamatrix.squaretaxamatrix method)": [[686, "pybrops.core.mat.SquareTaxaMatrix.SquareTaxaMatrix.incorp_taxa"]], "insert() (pybrops.core.mat.squaretaxamatrix.squaretaxamatrix method)": [[686, "pybrops.core.mat.SquareTaxaMatrix.SquareTaxaMatrix.insert"]], "insert_taxa() (pybrops.core.mat.squaretaxamatrix.squaretaxamatrix method)": [[686, "pybrops.core.mat.SquareTaxaMatrix.SquareTaxaMatrix.insert_taxa"]], "is_grouped() (pybrops.core.mat.squaretaxamatrix.squaretaxamatrix method)": [[686, "pybrops.core.mat.SquareTaxaMatrix.SquareTaxaMatrix.is_grouped"]], "is_grouped_taxa() (pybrops.core.mat.squaretaxamatrix.squaretaxamatrix method)": [[686, "pybrops.core.mat.SquareTaxaMatrix.SquareTaxaMatrix.is_grouped_taxa"]], "is_square() (pybrops.core.mat.squaretaxamatrix.squaretaxamatrix method)": [[686, "pybrops.core.mat.SquareTaxaMatrix.SquareTaxaMatrix.is_square"]], "is_square_taxa() (pybrops.core.mat.squaretaxamatrix.squaretaxamatrix method)": [[686, "pybrops.core.mat.SquareTaxaMatrix.SquareTaxaMatrix.is_square_taxa"]], "lexsort() (pybrops.core.mat.squaretaxamatrix.squaretaxamatrix method)": [[686, "pybrops.core.mat.SquareTaxaMatrix.SquareTaxaMatrix.lexsort"]], "lexsort_taxa() (pybrops.core.mat.squaretaxamatrix.squaretaxamatrix method)": [[686, "pybrops.core.mat.SquareTaxaMatrix.SquareTaxaMatrix.lexsort_taxa"]], "mat (pybrops.core.mat.squaretaxamatrix.squaretaxamatrix property)": [[686, "pybrops.core.mat.SquareTaxaMatrix.SquareTaxaMatrix.mat"]], "mat_ndim (pybrops.core.mat.squaretaxamatrix.squaretaxamatrix property)": [[686, "pybrops.core.mat.SquareTaxaMatrix.SquareTaxaMatrix.mat_ndim"]], "mat_shape (pybrops.core.mat.squaretaxamatrix.squaretaxamatrix property)": [[686, "pybrops.core.mat.SquareTaxaMatrix.SquareTaxaMatrix.mat_shape"]], "nsquare (pybrops.core.mat.squaretaxamatrix.squaretaxamatrix property)": [[686, "pybrops.core.mat.SquareTaxaMatrix.SquareTaxaMatrix.nsquare"]], "nsquare_taxa (pybrops.core.mat.squaretaxamatrix.squaretaxamatrix property)": [[686, "pybrops.core.mat.SquareTaxaMatrix.SquareTaxaMatrix.nsquare_taxa"]], "ntaxa (pybrops.core.mat.squaretaxamatrix.squaretaxamatrix property)": [[686, "pybrops.core.mat.SquareTaxaMatrix.SquareTaxaMatrix.ntaxa"]], "remove() (pybrops.core.mat.squaretaxamatrix.squaretaxamatrix method)": [[686, "pybrops.core.mat.SquareTaxaMatrix.SquareTaxaMatrix.remove"]], "remove_taxa() (pybrops.core.mat.squaretaxamatrix.squaretaxamatrix method)": [[686, "pybrops.core.mat.SquareTaxaMatrix.SquareTaxaMatrix.remove_taxa"]], "reorder() (pybrops.core.mat.squaretaxamatrix.squaretaxamatrix method)": [[686, "pybrops.core.mat.SquareTaxaMatrix.SquareTaxaMatrix.reorder"]], "reorder_taxa() (pybrops.core.mat.squaretaxamatrix.squaretaxamatrix method)": [[686, "pybrops.core.mat.SquareTaxaMatrix.SquareTaxaMatrix.reorder_taxa"]], "select() (pybrops.core.mat.squaretaxamatrix.squaretaxamatrix method)": [[686, "pybrops.core.mat.SquareTaxaMatrix.SquareTaxaMatrix.select"]], "select_taxa() (pybrops.core.mat.squaretaxamatrix.squaretaxamatrix method)": [[686, "pybrops.core.mat.SquareTaxaMatrix.SquareTaxaMatrix.select_taxa"]], "sort() (pybrops.core.mat.squaretaxamatrix.squaretaxamatrix method)": [[686, "pybrops.core.mat.SquareTaxaMatrix.SquareTaxaMatrix.sort"]], "sort_taxa() (pybrops.core.mat.squaretaxamatrix.squaretaxamatrix method)": [[686, "pybrops.core.mat.SquareTaxaMatrix.SquareTaxaMatrix.sort_taxa"]], "square_axes (pybrops.core.mat.squaretaxamatrix.squaretaxamatrix property)": [[686, "pybrops.core.mat.SquareTaxaMatrix.SquareTaxaMatrix.square_axes"]], "square_axes_len (pybrops.core.mat.squaretaxamatrix.squaretaxamatrix property)": [[686, "pybrops.core.mat.SquareTaxaMatrix.SquareTaxaMatrix.square_axes_len"]], "square_taxa_axes (pybrops.core.mat.squaretaxamatrix.squaretaxamatrix property)": [[686, "pybrops.core.mat.SquareTaxaMatrix.SquareTaxaMatrix.square_taxa_axes"]], "square_taxa_axes_len (pybrops.core.mat.squaretaxamatrix.squaretaxamatrix property)": [[686, "pybrops.core.mat.SquareTaxaMatrix.SquareTaxaMatrix.square_taxa_axes_len"]], "taxa (pybrops.core.mat.squaretaxamatrix.squaretaxamatrix property)": [[686, "pybrops.core.mat.SquareTaxaMatrix.SquareTaxaMatrix.taxa"]], "taxa_axis (pybrops.core.mat.squaretaxamatrix.squaretaxamatrix property)": [[686, "pybrops.core.mat.SquareTaxaMatrix.SquareTaxaMatrix.taxa_axis"]], "taxa_grp (pybrops.core.mat.squaretaxamatrix.squaretaxamatrix property)": [[686, "pybrops.core.mat.SquareTaxaMatrix.SquareTaxaMatrix.taxa_grp"]], "taxa_grp_len (pybrops.core.mat.squaretaxamatrix.squaretaxamatrix property)": [[686, "pybrops.core.mat.SquareTaxaMatrix.SquareTaxaMatrix.taxa_grp_len"]], "taxa_grp_name (pybrops.core.mat.squaretaxamatrix.squaretaxamatrix property)": [[686, "pybrops.core.mat.SquareTaxaMatrix.SquareTaxaMatrix.taxa_grp_name"]], "taxa_grp_spix (pybrops.core.mat.squaretaxamatrix.squaretaxamatrix property)": [[686, "pybrops.core.mat.SquareTaxaMatrix.SquareTaxaMatrix.taxa_grp_spix"]], "taxa_grp_stix (pybrops.core.mat.squaretaxamatrix.squaretaxamatrix property)": [[686, "pybrops.core.mat.SquareTaxaMatrix.SquareTaxaMatrix.taxa_grp_stix"]], "to_hdf5() (pybrops.core.mat.squaretaxamatrix.squaretaxamatrix method)": [[686, "pybrops.core.mat.SquareTaxaMatrix.SquareTaxaMatrix.to_hdf5"]], "ungroup() (pybrops.core.mat.squaretaxamatrix.squaretaxamatrix method)": [[686, "pybrops.core.mat.SquareTaxaMatrix.SquareTaxaMatrix.ungroup"]], "ungroup_taxa() (pybrops.core.mat.squaretaxamatrix.squaretaxamatrix method)": [[686, "pybrops.core.mat.SquareTaxaMatrix.SquareTaxaMatrix.ungroup_taxa"]], "check_is_squaretaxamatrix() (in module pybrops.core.mat.squaretaxamatrix)": [[687, "pybrops.core.mat.SquareTaxaMatrix.check_is_SquareTaxaMatrix"]], "pybrops.core.mat.squaretaxasquaretraitmatrix": [[688, "module-pybrops.core.mat.SquareTaxaSquareTraitMatrix"]], "squaretaxasquaretraitmatrix (class in pybrops.core.mat.squaretaxasquaretraitmatrix)": [[689, "pybrops.core.mat.SquareTaxaSquareTraitMatrix.SquareTaxaSquareTraitMatrix"]], "__add__() (pybrops.core.mat.squaretaxasquaretraitmatrix.squaretaxasquaretraitmatrix method)": [[689, "pybrops.core.mat.SquareTaxaSquareTraitMatrix.SquareTaxaSquareTraitMatrix.__add__"]], "__mul__() (pybrops.core.mat.squaretaxasquaretraitmatrix.squaretaxasquaretraitmatrix method)": [[689, "pybrops.core.mat.SquareTaxaSquareTraitMatrix.SquareTaxaSquareTraitMatrix.__mul__"]], "adjoin() (pybrops.core.mat.squaretaxasquaretraitmatrix.squaretaxasquaretraitmatrix method)": [[689, "pybrops.core.mat.SquareTaxaSquareTraitMatrix.SquareTaxaSquareTraitMatrix.adjoin"]], "adjoin_taxa() (pybrops.core.mat.squaretaxasquaretraitmatrix.squaretaxasquaretraitmatrix method)": [[689, "pybrops.core.mat.SquareTaxaSquareTraitMatrix.SquareTaxaSquareTraitMatrix.adjoin_taxa"]], "adjoin_trait() (pybrops.core.mat.squaretaxasquaretraitmatrix.squaretaxasquaretraitmatrix method)": [[689, "pybrops.core.mat.SquareTaxaSquareTraitMatrix.SquareTaxaSquareTraitMatrix.adjoin_trait"]], "append() (pybrops.core.mat.squaretaxasquaretraitmatrix.squaretaxasquaretraitmatrix method)": [[689, "pybrops.core.mat.SquareTaxaSquareTraitMatrix.SquareTaxaSquareTraitMatrix.append"]], "append_taxa() (pybrops.core.mat.squaretaxasquaretraitmatrix.squaretaxasquaretraitmatrix method)": [[689, "pybrops.core.mat.SquareTaxaSquareTraitMatrix.SquareTaxaSquareTraitMatrix.append_taxa"]], "append_trait() (pybrops.core.mat.squaretaxasquaretraitmatrix.squaretaxasquaretraitmatrix method)": [[689, "pybrops.core.mat.SquareTaxaSquareTraitMatrix.SquareTaxaSquareTraitMatrix.append_trait"]], "concat() (pybrops.core.mat.squaretaxasquaretraitmatrix.squaretaxasquaretraitmatrix class method)": [[689, "pybrops.core.mat.SquareTaxaSquareTraitMatrix.SquareTaxaSquareTraitMatrix.concat"]], "concat_taxa() (pybrops.core.mat.squaretaxasquaretraitmatrix.squaretaxasquaretraitmatrix class method)": [[689, "pybrops.core.mat.SquareTaxaSquareTraitMatrix.SquareTaxaSquareTraitMatrix.concat_taxa"]], "concat_trait() (pybrops.core.mat.squaretaxasquaretraitmatrix.squaretaxasquaretraitmatrix class method)": [[689, "pybrops.core.mat.SquareTaxaSquareTraitMatrix.SquareTaxaSquareTraitMatrix.concat_trait"]], "copy() (pybrops.core.mat.squaretaxasquaretraitmatrix.squaretaxasquaretraitmatrix method)": [[689, "pybrops.core.mat.SquareTaxaSquareTraitMatrix.SquareTaxaSquareTraitMatrix.copy"]], "deepcopy() (pybrops.core.mat.squaretaxasquaretraitmatrix.squaretaxasquaretraitmatrix method)": [[689, "pybrops.core.mat.SquareTaxaSquareTraitMatrix.SquareTaxaSquareTraitMatrix.deepcopy"]], "delete() (pybrops.core.mat.squaretaxasquaretraitmatrix.squaretaxasquaretraitmatrix method)": [[689, "pybrops.core.mat.SquareTaxaSquareTraitMatrix.SquareTaxaSquareTraitMatrix.delete"]], "delete_taxa() (pybrops.core.mat.squaretaxasquaretraitmatrix.squaretaxasquaretraitmatrix method)": [[689, "pybrops.core.mat.SquareTaxaSquareTraitMatrix.SquareTaxaSquareTraitMatrix.delete_taxa"]], "delete_trait() (pybrops.core.mat.squaretaxasquaretraitmatrix.squaretaxasquaretraitmatrix method)": [[689, "pybrops.core.mat.SquareTaxaSquareTraitMatrix.SquareTaxaSquareTraitMatrix.delete_trait"]], "from_hdf5() (pybrops.core.mat.squaretaxasquaretraitmatrix.squaretaxasquaretraitmatrix class method)": [[689, "pybrops.core.mat.SquareTaxaSquareTraitMatrix.SquareTaxaSquareTraitMatrix.from_hdf5"]], "group() (pybrops.core.mat.squaretaxasquaretraitmatrix.squaretaxasquaretraitmatrix method)": [[689, "pybrops.core.mat.SquareTaxaSquareTraitMatrix.SquareTaxaSquareTraitMatrix.group"]], "group_taxa() (pybrops.core.mat.squaretaxasquaretraitmatrix.squaretaxasquaretraitmatrix method)": [[689, "pybrops.core.mat.SquareTaxaSquareTraitMatrix.SquareTaxaSquareTraitMatrix.group_taxa"]], "incorp() (pybrops.core.mat.squaretaxasquaretraitmatrix.squaretaxasquaretraitmatrix method)": [[689, "pybrops.core.mat.SquareTaxaSquareTraitMatrix.SquareTaxaSquareTraitMatrix.incorp"]], "incorp_taxa() (pybrops.core.mat.squaretaxasquaretraitmatrix.squaretaxasquaretraitmatrix method)": [[689, "pybrops.core.mat.SquareTaxaSquareTraitMatrix.SquareTaxaSquareTraitMatrix.incorp_taxa"]], "incorp_trait() (pybrops.core.mat.squaretaxasquaretraitmatrix.squaretaxasquaretraitmatrix method)": [[689, "pybrops.core.mat.SquareTaxaSquareTraitMatrix.SquareTaxaSquareTraitMatrix.incorp_trait"]], "insert() (pybrops.core.mat.squaretaxasquaretraitmatrix.squaretaxasquaretraitmatrix method)": [[689, "pybrops.core.mat.SquareTaxaSquareTraitMatrix.SquareTaxaSquareTraitMatrix.insert"]], "insert_taxa() (pybrops.core.mat.squaretaxasquaretraitmatrix.squaretaxasquaretraitmatrix method)": [[689, "pybrops.core.mat.SquareTaxaSquareTraitMatrix.SquareTaxaSquareTraitMatrix.insert_taxa"]], "insert_trait() (pybrops.core.mat.squaretaxasquaretraitmatrix.squaretaxasquaretraitmatrix method)": [[689, "pybrops.core.mat.SquareTaxaSquareTraitMatrix.SquareTaxaSquareTraitMatrix.insert_trait"]], "is_grouped() (pybrops.core.mat.squaretaxasquaretraitmatrix.squaretaxasquaretraitmatrix method)": [[689, "pybrops.core.mat.SquareTaxaSquareTraitMatrix.SquareTaxaSquareTraitMatrix.is_grouped"]], "is_grouped_taxa() (pybrops.core.mat.squaretaxasquaretraitmatrix.squaretaxasquaretraitmatrix method)": [[689, "pybrops.core.mat.SquareTaxaSquareTraitMatrix.SquareTaxaSquareTraitMatrix.is_grouped_taxa"]], "is_square() (pybrops.core.mat.squaretaxasquaretraitmatrix.squaretaxasquaretraitmatrix method)": [[689, "pybrops.core.mat.SquareTaxaSquareTraitMatrix.SquareTaxaSquareTraitMatrix.is_square"]], "is_square_taxa() (pybrops.core.mat.squaretaxasquaretraitmatrix.squaretaxasquaretraitmatrix method)": [[689, "pybrops.core.mat.SquareTaxaSquareTraitMatrix.SquareTaxaSquareTraitMatrix.is_square_taxa"]], "is_square_trait() (pybrops.core.mat.squaretaxasquaretraitmatrix.squaretaxasquaretraitmatrix method)": [[689, "pybrops.core.mat.SquareTaxaSquareTraitMatrix.SquareTaxaSquareTraitMatrix.is_square_trait"]], "lexsort() (pybrops.core.mat.squaretaxasquaretraitmatrix.squaretaxasquaretraitmatrix method)": [[689, "pybrops.core.mat.SquareTaxaSquareTraitMatrix.SquareTaxaSquareTraitMatrix.lexsort"]], "lexsort_taxa() (pybrops.core.mat.squaretaxasquaretraitmatrix.squaretaxasquaretraitmatrix method)": [[689, "pybrops.core.mat.SquareTaxaSquareTraitMatrix.SquareTaxaSquareTraitMatrix.lexsort_taxa"]], "lexsort_trait() (pybrops.core.mat.squaretaxasquaretraitmatrix.squaretaxasquaretraitmatrix method)": [[689, "pybrops.core.mat.SquareTaxaSquareTraitMatrix.SquareTaxaSquareTraitMatrix.lexsort_trait"]], "mat (pybrops.core.mat.squaretaxasquaretraitmatrix.squaretaxasquaretraitmatrix property)": [[689, "pybrops.core.mat.SquareTaxaSquareTraitMatrix.SquareTaxaSquareTraitMatrix.mat"]], "mat_ndim (pybrops.core.mat.squaretaxasquaretraitmatrix.squaretaxasquaretraitmatrix property)": [[689, "pybrops.core.mat.SquareTaxaSquareTraitMatrix.SquareTaxaSquareTraitMatrix.mat_ndim"]], "mat_shape (pybrops.core.mat.squaretaxasquaretraitmatrix.squaretaxasquaretraitmatrix property)": [[689, "pybrops.core.mat.SquareTaxaSquareTraitMatrix.SquareTaxaSquareTraitMatrix.mat_shape"]], "nsquare (pybrops.core.mat.squaretaxasquaretraitmatrix.squaretaxasquaretraitmatrix property)": [[689, "pybrops.core.mat.SquareTaxaSquareTraitMatrix.SquareTaxaSquareTraitMatrix.nsquare"]], "nsquare_taxa (pybrops.core.mat.squaretaxasquaretraitmatrix.squaretaxasquaretraitmatrix property)": [[689, "pybrops.core.mat.SquareTaxaSquareTraitMatrix.SquareTaxaSquareTraitMatrix.nsquare_taxa"]], "nsquare_trait (pybrops.core.mat.squaretaxasquaretraitmatrix.squaretaxasquaretraitmatrix property)": [[689, "pybrops.core.mat.SquareTaxaSquareTraitMatrix.SquareTaxaSquareTraitMatrix.nsquare_trait"]], "ntaxa (pybrops.core.mat.squaretaxasquaretraitmatrix.squaretaxasquaretraitmatrix property)": [[689, "pybrops.core.mat.SquareTaxaSquareTraitMatrix.SquareTaxaSquareTraitMatrix.ntaxa"]], "ntrait (pybrops.core.mat.squaretaxasquaretraitmatrix.squaretaxasquaretraitmatrix property)": [[689, "pybrops.core.mat.SquareTaxaSquareTraitMatrix.SquareTaxaSquareTraitMatrix.ntrait"]], "remove() (pybrops.core.mat.squaretaxasquaretraitmatrix.squaretaxasquaretraitmatrix method)": [[689, "pybrops.core.mat.SquareTaxaSquareTraitMatrix.SquareTaxaSquareTraitMatrix.remove"]], "remove_taxa() (pybrops.core.mat.squaretaxasquaretraitmatrix.squaretaxasquaretraitmatrix method)": [[689, "pybrops.core.mat.SquareTaxaSquareTraitMatrix.SquareTaxaSquareTraitMatrix.remove_taxa"]], "remove_trait() (pybrops.core.mat.squaretaxasquaretraitmatrix.squaretaxasquaretraitmatrix method)": [[689, "pybrops.core.mat.SquareTaxaSquareTraitMatrix.SquareTaxaSquareTraitMatrix.remove_trait"]], "reorder() (pybrops.core.mat.squaretaxasquaretraitmatrix.squaretaxasquaretraitmatrix method)": [[689, "pybrops.core.mat.SquareTaxaSquareTraitMatrix.SquareTaxaSquareTraitMatrix.reorder"]], "reorder_taxa() (pybrops.core.mat.squaretaxasquaretraitmatrix.squaretaxasquaretraitmatrix method)": [[689, "pybrops.core.mat.SquareTaxaSquareTraitMatrix.SquareTaxaSquareTraitMatrix.reorder_taxa"]], "reorder_trait() (pybrops.core.mat.squaretaxasquaretraitmatrix.squaretaxasquaretraitmatrix method)": [[689, "pybrops.core.mat.SquareTaxaSquareTraitMatrix.SquareTaxaSquareTraitMatrix.reorder_trait"]], "select() (pybrops.core.mat.squaretaxasquaretraitmatrix.squaretaxasquaretraitmatrix method)": [[689, "pybrops.core.mat.SquareTaxaSquareTraitMatrix.SquareTaxaSquareTraitMatrix.select"]], "select_taxa() (pybrops.core.mat.squaretaxasquaretraitmatrix.squaretaxasquaretraitmatrix method)": [[689, "pybrops.core.mat.SquareTaxaSquareTraitMatrix.SquareTaxaSquareTraitMatrix.select_taxa"]], "select_trait() (pybrops.core.mat.squaretaxasquaretraitmatrix.squaretaxasquaretraitmatrix method)": [[689, "pybrops.core.mat.SquareTaxaSquareTraitMatrix.SquareTaxaSquareTraitMatrix.select_trait"]], "sort() (pybrops.core.mat.squaretaxasquaretraitmatrix.squaretaxasquaretraitmatrix method)": [[689, "pybrops.core.mat.SquareTaxaSquareTraitMatrix.SquareTaxaSquareTraitMatrix.sort"]], "sort_taxa() (pybrops.core.mat.squaretaxasquaretraitmatrix.squaretaxasquaretraitmatrix method)": [[689, "pybrops.core.mat.SquareTaxaSquareTraitMatrix.SquareTaxaSquareTraitMatrix.sort_taxa"]], "sort_trait() (pybrops.core.mat.squaretaxasquaretraitmatrix.squaretaxasquaretraitmatrix method)": [[689, "pybrops.core.mat.SquareTaxaSquareTraitMatrix.SquareTaxaSquareTraitMatrix.sort_trait"]], "square_axes (pybrops.core.mat.squaretaxasquaretraitmatrix.squaretaxasquaretraitmatrix property)": [[689, "pybrops.core.mat.SquareTaxaSquareTraitMatrix.SquareTaxaSquareTraitMatrix.square_axes"]], "square_axes_len (pybrops.core.mat.squaretaxasquaretraitmatrix.squaretaxasquaretraitmatrix property)": [[689, "pybrops.core.mat.SquareTaxaSquareTraitMatrix.SquareTaxaSquareTraitMatrix.square_axes_len"]], "square_taxa_axes (pybrops.core.mat.squaretaxasquaretraitmatrix.squaretaxasquaretraitmatrix property)": [[689, "pybrops.core.mat.SquareTaxaSquareTraitMatrix.SquareTaxaSquareTraitMatrix.square_taxa_axes"]], "square_taxa_axes_len (pybrops.core.mat.squaretaxasquaretraitmatrix.squaretaxasquaretraitmatrix property)": [[689, "pybrops.core.mat.SquareTaxaSquareTraitMatrix.SquareTaxaSquareTraitMatrix.square_taxa_axes_len"]], "square_trait_axes (pybrops.core.mat.squaretaxasquaretraitmatrix.squaretaxasquaretraitmatrix property)": [[689, "pybrops.core.mat.SquareTaxaSquareTraitMatrix.SquareTaxaSquareTraitMatrix.square_trait_axes"]], "square_trait_axes_len (pybrops.core.mat.squaretaxasquaretraitmatrix.squaretaxasquaretraitmatrix property)": [[689, "pybrops.core.mat.SquareTaxaSquareTraitMatrix.SquareTaxaSquareTraitMatrix.square_trait_axes_len"]], "taxa (pybrops.core.mat.squaretaxasquaretraitmatrix.squaretaxasquaretraitmatrix property)": [[689, "pybrops.core.mat.SquareTaxaSquareTraitMatrix.SquareTaxaSquareTraitMatrix.taxa"]], "taxa_axis (pybrops.core.mat.squaretaxasquaretraitmatrix.squaretaxasquaretraitmatrix property)": [[689, "pybrops.core.mat.SquareTaxaSquareTraitMatrix.SquareTaxaSquareTraitMatrix.taxa_axis"]], "taxa_grp (pybrops.core.mat.squaretaxasquaretraitmatrix.squaretaxasquaretraitmatrix property)": [[689, "pybrops.core.mat.SquareTaxaSquareTraitMatrix.SquareTaxaSquareTraitMatrix.taxa_grp"]], "taxa_grp_len (pybrops.core.mat.squaretaxasquaretraitmatrix.squaretaxasquaretraitmatrix property)": [[689, "pybrops.core.mat.SquareTaxaSquareTraitMatrix.SquareTaxaSquareTraitMatrix.taxa_grp_len"]], "taxa_grp_name (pybrops.core.mat.squaretaxasquaretraitmatrix.squaretaxasquaretraitmatrix property)": [[689, "pybrops.core.mat.SquareTaxaSquareTraitMatrix.SquareTaxaSquareTraitMatrix.taxa_grp_name"]], "taxa_grp_spix (pybrops.core.mat.squaretaxasquaretraitmatrix.squaretaxasquaretraitmatrix property)": [[689, "pybrops.core.mat.SquareTaxaSquareTraitMatrix.SquareTaxaSquareTraitMatrix.taxa_grp_spix"]], "taxa_grp_stix (pybrops.core.mat.squaretaxasquaretraitmatrix.squaretaxasquaretraitmatrix property)": [[689, "pybrops.core.mat.SquareTaxaSquareTraitMatrix.SquareTaxaSquareTraitMatrix.taxa_grp_stix"]], "to_hdf5() (pybrops.core.mat.squaretaxasquaretraitmatrix.squaretaxasquaretraitmatrix method)": [[689, "pybrops.core.mat.SquareTaxaSquareTraitMatrix.SquareTaxaSquareTraitMatrix.to_hdf5"]], "trait (pybrops.core.mat.squaretaxasquaretraitmatrix.squaretaxasquaretraitmatrix property)": [[689, "pybrops.core.mat.SquareTaxaSquareTraitMatrix.SquareTaxaSquareTraitMatrix.trait"]], "trait_axis (pybrops.core.mat.squaretaxasquaretraitmatrix.squaretaxasquaretraitmatrix property)": [[689, "pybrops.core.mat.SquareTaxaSquareTraitMatrix.SquareTaxaSquareTraitMatrix.trait_axis"]], "ungroup() (pybrops.core.mat.squaretaxasquaretraitmatrix.squaretaxasquaretraitmatrix method)": [[689, "pybrops.core.mat.SquareTaxaSquareTraitMatrix.SquareTaxaSquareTraitMatrix.ungroup"]], "ungroup_taxa() (pybrops.core.mat.squaretaxasquaretraitmatrix.squaretaxasquaretraitmatrix method)": [[689, "pybrops.core.mat.SquareTaxaSquareTraitMatrix.SquareTaxaSquareTraitMatrix.ungroup_taxa"]], "check_is_squaretaxasquaretraitmatrix() (in module pybrops.core.mat.squaretaxasquaretraitmatrix)": [[690, "pybrops.core.mat.SquareTaxaSquareTraitMatrix.check_is_SquareTaxaSquareTraitMatrix"]], "pybrops.core.mat.squaretaxatraitmatrix": [[691, "module-pybrops.core.mat.SquareTaxaTraitMatrix"]], "squaretaxatraitmatrix (class in pybrops.core.mat.squaretaxatraitmatrix)": [[692, "pybrops.core.mat.SquareTaxaTraitMatrix.SquareTaxaTraitMatrix"]], "__add__() (pybrops.core.mat.squaretaxatraitmatrix.squaretaxatraitmatrix method)": [[692, "pybrops.core.mat.SquareTaxaTraitMatrix.SquareTaxaTraitMatrix.__add__"]], "__mul__() (pybrops.core.mat.squaretaxatraitmatrix.squaretaxatraitmatrix method)": [[692, "pybrops.core.mat.SquareTaxaTraitMatrix.SquareTaxaTraitMatrix.__mul__"]], "adjoin() (pybrops.core.mat.squaretaxatraitmatrix.squaretaxatraitmatrix method)": [[692, "pybrops.core.mat.SquareTaxaTraitMatrix.SquareTaxaTraitMatrix.adjoin"]], "adjoin_taxa() (pybrops.core.mat.squaretaxatraitmatrix.squaretaxatraitmatrix method)": [[692, "pybrops.core.mat.SquareTaxaTraitMatrix.SquareTaxaTraitMatrix.adjoin_taxa"]], "adjoin_trait() (pybrops.core.mat.squaretaxatraitmatrix.squaretaxatraitmatrix method)": [[692, "pybrops.core.mat.SquareTaxaTraitMatrix.SquareTaxaTraitMatrix.adjoin_trait"]], "append() (pybrops.core.mat.squaretaxatraitmatrix.squaretaxatraitmatrix method)": [[692, "pybrops.core.mat.SquareTaxaTraitMatrix.SquareTaxaTraitMatrix.append"]], "append_taxa() (pybrops.core.mat.squaretaxatraitmatrix.squaretaxatraitmatrix method)": [[692, "pybrops.core.mat.SquareTaxaTraitMatrix.SquareTaxaTraitMatrix.append_taxa"]], "append_trait() (pybrops.core.mat.squaretaxatraitmatrix.squaretaxatraitmatrix method)": [[692, "pybrops.core.mat.SquareTaxaTraitMatrix.SquareTaxaTraitMatrix.append_trait"]], "concat() (pybrops.core.mat.squaretaxatraitmatrix.squaretaxatraitmatrix class method)": [[692, "pybrops.core.mat.SquareTaxaTraitMatrix.SquareTaxaTraitMatrix.concat"]], "concat_taxa() (pybrops.core.mat.squaretaxatraitmatrix.squaretaxatraitmatrix class method)": [[692, "pybrops.core.mat.SquareTaxaTraitMatrix.SquareTaxaTraitMatrix.concat_taxa"]], "concat_trait() (pybrops.core.mat.squaretaxatraitmatrix.squaretaxatraitmatrix class method)": [[692, "pybrops.core.mat.SquareTaxaTraitMatrix.SquareTaxaTraitMatrix.concat_trait"]], "copy() (pybrops.core.mat.squaretaxatraitmatrix.squaretaxatraitmatrix method)": [[692, "pybrops.core.mat.SquareTaxaTraitMatrix.SquareTaxaTraitMatrix.copy"]], "deepcopy() (pybrops.core.mat.squaretaxatraitmatrix.squaretaxatraitmatrix method)": [[692, "pybrops.core.mat.SquareTaxaTraitMatrix.SquareTaxaTraitMatrix.deepcopy"]], "delete() (pybrops.core.mat.squaretaxatraitmatrix.squaretaxatraitmatrix method)": [[692, "pybrops.core.mat.SquareTaxaTraitMatrix.SquareTaxaTraitMatrix.delete"]], "delete_taxa() (pybrops.core.mat.squaretaxatraitmatrix.squaretaxatraitmatrix method)": [[692, "pybrops.core.mat.SquareTaxaTraitMatrix.SquareTaxaTraitMatrix.delete_taxa"]], "delete_trait() (pybrops.core.mat.squaretaxatraitmatrix.squaretaxatraitmatrix method)": [[692, "pybrops.core.mat.SquareTaxaTraitMatrix.SquareTaxaTraitMatrix.delete_trait"]], "from_hdf5() (pybrops.core.mat.squaretaxatraitmatrix.squaretaxatraitmatrix class method)": [[692, "pybrops.core.mat.SquareTaxaTraitMatrix.SquareTaxaTraitMatrix.from_hdf5"]], "group() (pybrops.core.mat.squaretaxatraitmatrix.squaretaxatraitmatrix method)": [[692, "pybrops.core.mat.SquareTaxaTraitMatrix.SquareTaxaTraitMatrix.group"]], "group_taxa() (pybrops.core.mat.squaretaxatraitmatrix.squaretaxatraitmatrix method)": [[692, "pybrops.core.mat.SquareTaxaTraitMatrix.SquareTaxaTraitMatrix.group_taxa"]], "incorp() (pybrops.core.mat.squaretaxatraitmatrix.squaretaxatraitmatrix method)": [[692, "pybrops.core.mat.SquareTaxaTraitMatrix.SquareTaxaTraitMatrix.incorp"]], "incorp_taxa() (pybrops.core.mat.squaretaxatraitmatrix.squaretaxatraitmatrix method)": [[692, "pybrops.core.mat.SquareTaxaTraitMatrix.SquareTaxaTraitMatrix.incorp_taxa"]], "incorp_trait() (pybrops.core.mat.squaretaxatraitmatrix.squaretaxatraitmatrix method)": [[692, "pybrops.core.mat.SquareTaxaTraitMatrix.SquareTaxaTraitMatrix.incorp_trait"]], "insert() (pybrops.core.mat.squaretaxatraitmatrix.squaretaxatraitmatrix method)": [[692, "pybrops.core.mat.SquareTaxaTraitMatrix.SquareTaxaTraitMatrix.insert"]], "insert_taxa() (pybrops.core.mat.squaretaxatraitmatrix.squaretaxatraitmatrix method)": [[692, "pybrops.core.mat.SquareTaxaTraitMatrix.SquareTaxaTraitMatrix.insert_taxa"]], "insert_trait() (pybrops.core.mat.squaretaxatraitmatrix.squaretaxatraitmatrix method)": [[692, "pybrops.core.mat.SquareTaxaTraitMatrix.SquareTaxaTraitMatrix.insert_trait"]], "is_grouped() (pybrops.core.mat.squaretaxatraitmatrix.squaretaxatraitmatrix method)": [[692, "pybrops.core.mat.SquareTaxaTraitMatrix.SquareTaxaTraitMatrix.is_grouped"]], "is_grouped_taxa() (pybrops.core.mat.squaretaxatraitmatrix.squaretaxatraitmatrix method)": [[692, "pybrops.core.mat.SquareTaxaTraitMatrix.SquareTaxaTraitMatrix.is_grouped_taxa"]], "is_square() (pybrops.core.mat.squaretaxatraitmatrix.squaretaxatraitmatrix method)": [[692, "pybrops.core.mat.SquareTaxaTraitMatrix.SquareTaxaTraitMatrix.is_square"]], "is_square_taxa() (pybrops.core.mat.squaretaxatraitmatrix.squaretaxatraitmatrix method)": [[692, "pybrops.core.mat.SquareTaxaTraitMatrix.SquareTaxaTraitMatrix.is_square_taxa"]], "lexsort() (pybrops.core.mat.squaretaxatraitmatrix.squaretaxatraitmatrix method)": [[692, "pybrops.core.mat.SquareTaxaTraitMatrix.SquareTaxaTraitMatrix.lexsort"]], "lexsort_taxa() (pybrops.core.mat.squaretaxatraitmatrix.squaretaxatraitmatrix method)": [[692, "pybrops.core.mat.SquareTaxaTraitMatrix.SquareTaxaTraitMatrix.lexsort_taxa"]], "lexsort_trait() (pybrops.core.mat.squaretaxatraitmatrix.squaretaxatraitmatrix method)": [[692, "pybrops.core.mat.SquareTaxaTraitMatrix.SquareTaxaTraitMatrix.lexsort_trait"]], "mat (pybrops.core.mat.squaretaxatraitmatrix.squaretaxatraitmatrix property)": [[692, "pybrops.core.mat.SquareTaxaTraitMatrix.SquareTaxaTraitMatrix.mat"]], "mat_ndim (pybrops.core.mat.squaretaxatraitmatrix.squaretaxatraitmatrix property)": [[692, "pybrops.core.mat.SquareTaxaTraitMatrix.SquareTaxaTraitMatrix.mat_ndim"]], "mat_shape (pybrops.core.mat.squaretaxatraitmatrix.squaretaxatraitmatrix property)": [[692, "pybrops.core.mat.SquareTaxaTraitMatrix.SquareTaxaTraitMatrix.mat_shape"]], "nsquare (pybrops.core.mat.squaretaxatraitmatrix.squaretaxatraitmatrix property)": [[692, "pybrops.core.mat.SquareTaxaTraitMatrix.SquareTaxaTraitMatrix.nsquare"]], "nsquare_taxa (pybrops.core.mat.squaretaxatraitmatrix.squaretaxatraitmatrix property)": [[692, "pybrops.core.mat.SquareTaxaTraitMatrix.SquareTaxaTraitMatrix.nsquare_taxa"]], "ntaxa (pybrops.core.mat.squaretaxatraitmatrix.squaretaxatraitmatrix property)": [[692, "pybrops.core.mat.SquareTaxaTraitMatrix.SquareTaxaTraitMatrix.ntaxa"]], "ntrait (pybrops.core.mat.squaretaxatraitmatrix.squaretaxatraitmatrix property)": [[692, "pybrops.core.mat.SquareTaxaTraitMatrix.SquareTaxaTraitMatrix.ntrait"]], "remove() (pybrops.core.mat.squaretaxatraitmatrix.squaretaxatraitmatrix method)": [[692, "pybrops.core.mat.SquareTaxaTraitMatrix.SquareTaxaTraitMatrix.remove"]], "remove_taxa() (pybrops.core.mat.squaretaxatraitmatrix.squaretaxatraitmatrix method)": [[692, "pybrops.core.mat.SquareTaxaTraitMatrix.SquareTaxaTraitMatrix.remove_taxa"]], "remove_trait() (pybrops.core.mat.squaretaxatraitmatrix.squaretaxatraitmatrix method)": [[692, "pybrops.core.mat.SquareTaxaTraitMatrix.SquareTaxaTraitMatrix.remove_trait"]], "reorder() (pybrops.core.mat.squaretaxatraitmatrix.squaretaxatraitmatrix method)": [[692, "pybrops.core.mat.SquareTaxaTraitMatrix.SquareTaxaTraitMatrix.reorder"]], "reorder_taxa() (pybrops.core.mat.squaretaxatraitmatrix.squaretaxatraitmatrix method)": [[692, "pybrops.core.mat.SquareTaxaTraitMatrix.SquareTaxaTraitMatrix.reorder_taxa"]], "reorder_trait() (pybrops.core.mat.squaretaxatraitmatrix.squaretaxatraitmatrix method)": [[692, "pybrops.core.mat.SquareTaxaTraitMatrix.SquareTaxaTraitMatrix.reorder_trait"]], "select() (pybrops.core.mat.squaretaxatraitmatrix.squaretaxatraitmatrix method)": [[692, "pybrops.core.mat.SquareTaxaTraitMatrix.SquareTaxaTraitMatrix.select"]], "select_taxa() (pybrops.core.mat.squaretaxatraitmatrix.squaretaxatraitmatrix method)": [[692, "pybrops.core.mat.SquareTaxaTraitMatrix.SquareTaxaTraitMatrix.select_taxa"]], "select_trait() (pybrops.core.mat.squaretaxatraitmatrix.squaretaxatraitmatrix method)": [[692, "pybrops.core.mat.SquareTaxaTraitMatrix.SquareTaxaTraitMatrix.select_trait"]], "sort() (pybrops.core.mat.squaretaxatraitmatrix.squaretaxatraitmatrix method)": [[692, "pybrops.core.mat.SquareTaxaTraitMatrix.SquareTaxaTraitMatrix.sort"]], "sort_taxa() (pybrops.core.mat.squaretaxatraitmatrix.squaretaxatraitmatrix method)": [[692, "pybrops.core.mat.SquareTaxaTraitMatrix.SquareTaxaTraitMatrix.sort_taxa"]], "sort_trait() (pybrops.core.mat.squaretaxatraitmatrix.squaretaxatraitmatrix method)": [[692, "pybrops.core.mat.SquareTaxaTraitMatrix.SquareTaxaTraitMatrix.sort_trait"]], "square_axes (pybrops.core.mat.squaretaxatraitmatrix.squaretaxatraitmatrix property)": [[692, "pybrops.core.mat.SquareTaxaTraitMatrix.SquareTaxaTraitMatrix.square_axes"]], "square_axes_len (pybrops.core.mat.squaretaxatraitmatrix.squaretaxatraitmatrix property)": [[692, "pybrops.core.mat.SquareTaxaTraitMatrix.SquareTaxaTraitMatrix.square_axes_len"]], "square_taxa_axes (pybrops.core.mat.squaretaxatraitmatrix.squaretaxatraitmatrix property)": [[692, "pybrops.core.mat.SquareTaxaTraitMatrix.SquareTaxaTraitMatrix.square_taxa_axes"]], "square_taxa_axes_len (pybrops.core.mat.squaretaxatraitmatrix.squaretaxatraitmatrix property)": [[692, "pybrops.core.mat.SquareTaxaTraitMatrix.SquareTaxaTraitMatrix.square_taxa_axes_len"]], "taxa (pybrops.core.mat.squaretaxatraitmatrix.squaretaxatraitmatrix property)": [[692, "pybrops.core.mat.SquareTaxaTraitMatrix.SquareTaxaTraitMatrix.taxa"]], "taxa_axis (pybrops.core.mat.squaretaxatraitmatrix.squaretaxatraitmatrix property)": [[692, "pybrops.core.mat.SquareTaxaTraitMatrix.SquareTaxaTraitMatrix.taxa_axis"]], "taxa_grp (pybrops.core.mat.squaretaxatraitmatrix.squaretaxatraitmatrix property)": [[692, "pybrops.core.mat.SquareTaxaTraitMatrix.SquareTaxaTraitMatrix.taxa_grp"]], "taxa_grp_len (pybrops.core.mat.squaretaxatraitmatrix.squaretaxatraitmatrix property)": [[692, "pybrops.core.mat.SquareTaxaTraitMatrix.SquareTaxaTraitMatrix.taxa_grp_len"]], "taxa_grp_name (pybrops.core.mat.squaretaxatraitmatrix.squaretaxatraitmatrix property)": [[692, "pybrops.core.mat.SquareTaxaTraitMatrix.SquareTaxaTraitMatrix.taxa_grp_name"]], "taxa_grp_spix (pybrops.core.mat.squaretaxatraitmatrix.squaretaxatraitmatrix property)": [[692, "pybrops.core.mat.SquareTaxaTraitMatrix.SquareTaxaTraitMatrix.taxa_grp_spix"]], "taxa_grp_stix (pybrops.core.mat.squaretaxatraitmatrix.squaretaxatraitmatrix property)": [[692, "pybrops.core.mat.SquareTaxaTraitMatrix.SquareTaxaTraitMatrix.taxa_grp_stix"]], "to_hdf5() (pybrops.core.mat.squaretaxatraitmatrix.squaretaxatraitmatrix method)": [[692, "pybrops.core.mat.SquareTaxaTraitMatrix.SquareTaxaTraitMatrix.to_hdf5"]], "trait (pybrops.core.mat.squaretaxatraitmatrix.squaretaxatraitmatrix property)": [[692, "pybrops.core.mat.SquareTaxaTraitMatrix.SquareTaxaTraitMatrix.trait"]], "trait_axis (pybrops.core.mat.squaretaxatraitmatrix.squaretaxatraitmatrix property)": [[692, "pybrops.core.mat.SquareTaxaTraitMatrix.SquareTaxaTraitMatrix.trait_axis"]], "ungroup() (pybrops.core.mat.squaretaxatraitmatrix.squaretaxatraitmatrix method)": [[692, "pybrops.core.mat.SquareTaxaTraitMatrix.SquareTaxaTraitMatrix.ungroup"]], "ungroup_taxa() (pybrops.core.mat.squaretaxatraitmatrix.squaretaxatraitmatrix method)": [[692, "pybrops.core.mat.SquareTaxaTraitMatrix.SquareTaxaTraitMatrix.ungroup_taxa"]], "check_is_squaretaxatraitmatrix() (in module pybrops.core.mat.squaretaxatraitmatrix)": [[693, "pybrops.core.mat.SquareTaxaTraitMatrix.check_is_SquareTaxaTraitMatrix"]], "pybrops.core.mat.squaretraitmatrix": [[694, "module-pybrops.core.mat.SquareTraitMatrix"]], "squaretraitmatrix (class in pybrops.core.mat.squaretraitmatrix)": [[695, "pybrops.core.mat.SquareTraitMatrix.SquareTraitMatrix"]], "__add__() (pybrops.core.mat.squaretraitmatrix.squaretraitmatrix method)": [[695, "pybrops.core.mat.SquareTraitMatrix.SquareTraitMatrix.__add__"]], "__mul__() (pybrops.core.mat.squaretraitmatrix.squaretraitmatrix method)": [[695, "pybrops.core.mat.SquareTraitMatrix.SquareTraitMatrix.__mul__"]], "adjoin() (pybrops.core.mat.squaretraitmatrix.squaretraitmatrix method)": [[695, "pybrops.core.mat.SquareTraitMatrix.SquareTraitMatrix.adjoin"]], "adjoin_trait() (pybrops.core.mat.squaretraitmatrix.squaretraitmatrix method)": [[695, "pybrops.core.mat.SquareTraitMatrix.SquareTraitMatrix.adjoin_trait"]], "append() (pybrops.core.mat.squaretraitmatrix.squaretraitmatrix method)": [[695, "pybrops.core.mat.SquareTraitMatrix.SquareTraitMatrix.append"]], "append_trait() (pybrops.core.mat.squaretraitmatrix.squaretraitmatrix method)": [[695, "pybrops.core.mat.SquareTraitMatrix.SquareTraitMatrix.append_trait"]], "concat() (pybrops.core.mat.squaretraitmatrix.squaretraitmatrix class method)": [[695, "pybrops.core.mat.SquareTraitMatrix.SquareTraitMatrix.concat"]], "concat_trait() (pybrops.core.mat.squaretraitmatrix.squaretraitmatrix class method)": [[695, "pybrops.core.mat.SquareTraitMatrix.SquareTraitMatrix.concat_trait"]], "copy() (pybrops.core.mat.squaretraitmatrix.squaretraitmatrix method)": [[695, "pybrops.core.mat.SquareTraitMatrix.SquareTraitMatrix.copy"]], "deepcopy() (pybrops.core.mat.squaretraitmatrix.squaretraitmatrix method)": [[695, "pybrops.core.mat.SquareTraitMatrix.SquareTraitMatrix.deepcopy"]], "delete() (pybrops.core.mat.squaretraitmatrix.squaretraitmatrix method)": [[695, "pybrops.core.mat.SquareTraitMatrix.SquareTraitMatrix.delete"]], "delete_trait() (pybrops.core.mat.squaretraitmatrix.squaretraitmatrix method)": [[695, "pybrops.core.mat.SquareTraitMatrix.SquareTraitMatrix.delete_trait"]], "from_hdf5() (pybrops.core.mat.squaretraitmatrix.squaretraitmatrix class method)": [[695, "pybrops.core.mat.SquareTraitMatrix.SquareTraitMatrix.from_hdf5"]], "incorp() (pybrops.core.mat.squaretraitmatrix.squaretraitmatrix method)": [[695, "pybrops.core.mat.SquareTraitMatrix.SquareTraitMatrix.incorp"]], "incorp_trait() (pybrops.core.mat.squaretraitmatrix.squaretraitmatrix method)": [[695, "pybrops.core.mat.SquareTraitMatrix.SquareTraitMatrix.incorp_trait"]], "insert() (pybrops.core.mat.squaretraitmatrix.squaretraitmatrix method)": [[695, "pybrops.core.mat.SquareTraitMatrix.SquareTraitMatrix.insert"]], "insert_trait() (pybrops.core.mat.squaretraitmatrix.squaretraitmatrix method)": [[695, "pybrops.core.mat.SquareTraitMatrix.SquareTraitMatrix.insert_trait"]], "is_square() (pybrops.core.mat.squaretraitmatrix.squaretraitmatrix method)": [[695, "pybrops.core.mat.SquareTraitMatrix.SquareTraitMatrix.is_square"]], "is_square_trait() (pybrops.core.mat.squaretraitmatrix.squaretraitmatrix method)": [[695, "pybrops.core.mat.SquareTraitMatrix.SquareTraitMatrix.is_square_trait"]], "lexsort() (pybrops.core.mat.squaretraitmatrix.squaretraitmatrix method)": [[695, "pybrops.core.mat.SquareTraitMatrix.SquareTraitMatrix.lexsort"]], "lexsort_trait() (pybrops.core.mat.squaretraitmatrix.squaretraitmatrix method)": [[695, "pybrops.core.mat.SquareTraitMatrix.SquareTraitMatrix.lexsort_trait"]], "mat (pybrops.core.mat.squaretraitmatrix.squaretraitmatrix property)": [[695, "pybrops.core.mat.SquareTraitMatrix.SquareTraitMatrix.mat"]], "mat_ndim (pybrops.core.mat.squaretraitmatrix.squaretraitmatrix property)": [[695, "pybrops.core.mat.SquareTraitMatrix.SquareTraitMatrix.mat_ndim"]], "mat_shape (pybrops.core.mat.squaretraitmatrix.squaretraitmatrix property)": [[695, "pybrops.core.mat.SquareTraitMatrix.SquareTraitMatrix.mat_shape"]], "nsquare (pybrops.core.mat.squaretraitmatrix.squaretraitmatrix property)": [[695, "pybrops.core.mat.SquareTraitMatrix.SquareTraitMatrix.nsquare"]], "nsquare_trait (pybrops.core.mat.squaretraitmatrix.squaretraitmatrix property)": [[695, "pybrops.core.mat.SquareTraitMatrix.SquareTraitMatrix.nsquare_trait"]], "ntrait (pybrops.core.mat.squaretraitmatrix.squaretraitmatrix property)": [[695, "pybrops.core.mat.SquareTraitMatrix.SquareTraitMatrix.ntrait"]], "remove() (pybrops.core.mat.squaretraitmatrix.squaretraitmatrix method)": [[695, "pybrops.core.mat.SquareTraitMatrix.SquareTraitMatrix.remove"]], "remove_trait() (pybrops.core.mat.squaretraitmatrix.squaretraitmatrix method)": [[695, "pybrops.core.mat.SquareTraitMatrix.SquareTraitMatrix.remove_trait"]], "reorder() (pybrops.core.mat.squaretraitmatrix.squaretraitmatrix method)": [[695, "pybrops.core.mat.SquareTraitMatrix.SquareTraitMatrix.reorder"]], "reorder_trait() (pybrops.core.mat.squaretraitmatrix.squaretraitmatrix method)": [[695, "pybrops.core.mat.SquareTraitMatrix.SquareTraitMatrix.reorder_trait"]], "select() (pybrops.core.mat.squaretraitmatrix.squaretraitmatrix method)": [[695, "pybrops.core.mat.SquareTraitMatrix.SquareTraitMatrix.select"]], "select_trait() (pybrops.core.mat.squaretraitmatrix.squaretraitmatrix method)": [[695, "pybrops.core.mat.SquareTraitMatrix.SquareTraitMatrix.select_trait"]], "sort() (pybrops.core.mat.squaretraitmatrix.squaretraitmatrix method)": [[695, "pybrops.core.mat.SquareTraitMatrix.SquareTraitMatrix.sort"]], "sort_trait() (pybrops.core.mat.squaretraitmatrix.squaretraitmatrix method)": [[695, "pybrops.core.mat.SquareTraitMatrix.SquareTraitMatrix.sort_trait"]], "square_axes (pybrops.core.mat.squaretraitmatrix.squaretraitmatrix property)": [[695, "pybrops.core.mat.SquareTraitMatrix.SquareTraitMatrix.square_axes"]], "square_axes_len (pybrops.core.mat.squaretraitmatrix.squaretraitmatrix property)": [[695, "pybrops.core.mat.SquareTraitMatrix.SquareTraitMatrix.square_axes_len"]], "square_trait_axes (pybrops.core.mat.squaretraitmatrix.squaretraitmatrix property)": [[695, "pybrops.core.mat.SquareTraitMatrix.SquareTraitMatrix.square_trait_axes"]], "square_trait_axes_len (pybrops.core.mat.squaretraitmatrix.squaretraitmatrix property)": [[695, "pybrops.core.mat.SquareTraitMatrix.SquareTraitMatrix.square_trait_axes_len"]], "to_hdf5() (pybrops.core.mat.squaretraitmatrix.squaretraitmatrix method)": [[695, "pybrops.core.mat.SquareTraitMatrix.SquareTraitMatrix.to_hdf5"]], "trait (pybrops.core.mat.squaretraitmatrix.squaretraitmatrix property)": [[695, "pybrops.core.mat.SquareTraitMatrix.SquareTraitMatrix.trait"]], "trait_axis (pybrops.core.mat.squaretraitmatrix.squaretraitmatrix property)": [[695, "pybrops.core.mat.SquareTraitMatrix.SquareTraitMatrix.trait_axis"]], "check_is_squaretraitmatrix() (in module pybrops.core.mat.squaretraitmatrix)": [[696, "pybrops.core.mat.SquareTraitMatrix.check_is_SquareTraitMatrix"]], "pybrops.core.mat.taxamatrix": [[697, "module-pybrops.core.mat.TaxaMatrix"]], "taxamatrix (class in pybrops.core.mat.taxamatrix)": [[698, "pybrops.core.mat.TaxaMatrix.TaxaMatrix"]], "__add__() (pybrops.core.mat.taxamatrix.taxamatrix method)": [[698, "pybrops.core.mat.TaxaMatrix.TaxaMatrix.__add__"]], "__mul__() (pybrops.core.mat.taxamatrix.taxamatrix method)": [[698, "pybrops.core.mat.TaxaMatrix.TaxaMatrix.__mul__"]], "adjoin() (pybrops.core.mat.taxamatrix.taxamatrix method)": [[698, "pybrops.core.mat.TaxaMatrix.TaxaMatrix.adjoin"]], "adjoin_taxa() (pybrops.core.mat.taxamatrix.taxamatrix method)": [[698, "pybrops.core.mat.TaxaMatrix.TaxaMatrix.adjoin_taxa"]], "append() (pybrops.core.mat.taxamatrix.taxamatrix method)": [[698, "pybrops.core.mat.TaxaMatrix.TaxaMatrix.append"]], "append_taxa() (pybrops.core.mat.taxamatrix.taxamatrix method)": [[698, "pybrops.core.mat.TaxaMatrix.TaxaMatrix.append_taxa"]], "concat() (pybrops.core.mat.taxamatrix.taxamatrix class method)": [[698, "pybrops.core.mat.TaxaMatrix.TaxaMatrix.concat"]], "concat_taxa() (pybrops.core.mat.taxamatrix.taxamatrix class method)": [[698, "pybrops.core.mat.TaxaMatrix.TaxaMatrix.concat_taxa"]], "copy() (pybrops.core.mat.taxamatrix.taxamatrix method)": [[698, "pybrops.core.mat.TaxaMatrix.TaxaMatrix.copy"]], "deepcopy() (pybrops.core.mat.taxamatrix.taxamatrix method)": [[698, "pybrops.core.mat.TaxaMatrix.TaxaMatrix.deepcopy"]], "delete() (pybrops.core.mat.taxamatrix.taxamatrix method)": [[698, "pybrops.core.mat.TaxaMatrix.TaxaMatrix.delete"]], "delete_taxa() (pybrops.core.mat.taxamatrix.taxamatrix method)": [[698, "pybrops.core.mat.TaxaMatrix.TaxaMatrix.delete_taxa"]], "from_hdf5() (pybrops.core.mat.taxamatrix.taxamatrix class method)": [[698, "pybrops.core.mat.TaxaMatrix.TaxaMatrix.from_hdf5"]], "group() (pybrops.core.mat.taxamatrix.taxamatrix method)": [[698, "pybrops.core.mat.TaxaMatrix.TaxaMatrix.group"]], "group_taxa() (pybrops.core.mat.taxamatrix.taxamatrix method)": [[698, "pybrops.core.mat.TaxaMatrix.TaxaMatrix.group_taxa"]], "incorp() (pybrops.core.mat.taxamatrix.taxamatrix method)": [[698, "pybrops.core.mat.TaxaMatrix.TaxaMatrix.incorp"]], "incorp_taxa() (pybrops.core.mat.taxamatrix.taxamatrix method)": [[698, "pybrops.core.mat.TaxaMatrix.TaxaMatrix.incorp_taxa"]], "insert() (pybrops.core.mat.taxamatrix.taxamatrix method)": [[698, "pybrops.core.mat.TaxaMatrix.TaxaMatrix.insert"]], "insert_taxa() (pybrops.core.mat.taxamatrix.taxamatrix method)": [[698, "pybrops.core.mat.TaxaMatrix.TaxaMatrix.insert_taxa"]], "is_grouped() (pybrops.core.mat.taxamatrix.taxamatrix method)": [[698, "pybrops.core.mat.TaxaMatrix.TaxaMatrix.is_grouped"]], "is_grouped_taxa() (pybrops.core.mat.taxamatrix.taxamatrix method)": [[698, "pybrops.core.mat.TaxaMatrix.TaxaMatrix.is_grouped_taxa"]], "lexsort() (pybrops.core.mat.taxamatrix.taxamatrix method)": [[698, "pybrops.core.mat.TaxaMatrix.TaxaMatrix.lexsort"]], "lexsort_taxa() (pybrops.core.mat.taxamatrix.taxamatrix method)": [[698, "pybrops.core.mat.TaxaMatrix.TaxaMatrix.lexsort_taxa"]], "mat (pybrops.core.mat.taxamatrix.taxamatrix property)": [[698, "pybrops.core.mat.TaxaMatrix.TaxaMatrix.mat"]], "mat_ndim (pybrops.core.mat.taxamatrix.taxamatrix property)": [[698, "pybrops.core.mat.TaxaMatrix.TaxaMatrix.mat_ndim"]], "mat_shape (pybrops.core.mat.taxamatrix.taxamatrix property)": [[698, "pybrops.core.mat.TaxaMatrix.TaxaMatrix.mat_shape"]], "ntaxa (pybrops.core.mat.taxamatrix.taxamatrix property)": [[698, "pybrops.core.mat.TaxaMatrix.TaxaMatrix.ntaxa"]], "remove() (pybrops.core.mat.taxamatrix.taxamatrix method)": [[698, "pybrops.core.mat.TaxaMatrix.TaxaMatrix.remove"]], "remove_taxa() (pybrops.core.mat.taxamatrix.taxamatrix method)": [[698, "pybrops.core.mat.TaxaMatrix.TaxaMatrix.remove_taxa"]], "reorder() (pybrops.core.mat.taxamatrix.taxamatrix method)": [[698, "pybrops.core.mat.TaxaMatrix.TaxaMatrix.reorder"]], "reorder_taxa() (pybrops.core.mat.taxamatrix.taxamatrix method)": [[698, "pybrops.core.mat.TaxaMatrix.TaxaMatrix.reorder_taxa"]], "select() (pybrops.core.mat.taxamatrix.taxamatrix method)": [[698, "pybrops.core.mat.TaxaMatrix.TaxaMatrix.select"]], "select_taxa() (pybrops.core.mat.taxamatrix.taxamatrix method)": [[698, "pybrops.core.mat.TaxaMatrix.TaxaMatrix.select_taxa"]], "sort() (pybrops.core.mat.taxamatrix.taxamatrix method)": [[698, "pybrops.core.mat.TaxaMatrix.TaxaMatrix.sort"]], "sort_taxa() (pybrops.core.mat.taxamatrix.taxamatrix method)": [[698, "pybrops.core.mat.TaxaMatrix.TaxaMatrix.sort_taxa"]], "taxa (pybrops.core.mat.taxamatrix.taxamatrix property)": [[698, "pybrops.core.mat.TaxaMatrix.TaxaMatrix.taxa"]], "taxa_axis (pybrops.core.mat.taxamatrix.taxamatrix property)": [[698, "pybrops.core.mat.TaxaMatrix.TaxaMatrix.taxa_axis"]], "taxa_grp (pybrops.core.mat.taxamatrix.taxamatrix property)": [[698, "pybrops.core.mat.TaxaMatrix.TaxaMatrix.taxa_grp"]], "taxa_grp_len (pybrops.core.mat.taxamatrix.taxamatrix property)": [[698, "pybrops.core.mat.TaxaMatrix.TaxaMatrix.taxa_grp_len"]], "taxa_grp_name (pybrops.core.mat.taxamatrix.taxamatrix property)": [[698, "pybrops.core.mat.TaxaMatrix.TaxaMatrix.taxa_grp_name"]], "taxa_grp_spix (pybrops.core.mat.taxamatrix.taxamatrix property)": [[698, "pybrops.core.mat.TaxaMatrix.TaxaMatrix.taxa_grp_spix"]], "taxa_grp_stix (pybrops.core.mat.taxamatrix.taxamatrix property)": [[698, "pybrops.core.mat.TaxaMatrix.TaxaMatrix.taxa_grp_stix"]], "to_hdf5() (pybrops.core.mat.taxamatrix.taxamatrix method)": [[698, "pybrops.core.mat.TaxaMatrix.TaxaMatrix.to_hdf5"]], "ungroup() (pybrops.core.mat.taxamatrix.taxamatrix method)": [[698, "pybrops.core.mat.TaxaMatrix.TaxaMatrix.ungroup"]], "ungroup_taxa() (pybrops.core.mat.taxamatrix.taxamatrix method)": [[698, "pybrops.core.mat.TaxaMatrix.TaxaMatrix.ungroup_taxa"]], "check_is_taxamatrix() (in module pybrops.core.mat.taxamatrix)": [[699, "pybrops.core.mat.TaxaMatrix.check_is_TaxaMatrix"]], "pybrops.core.mat.taxatraitmatrix": [[700, "module-pybrops.core.mat.TaxaTraitMatrix"]], "taxatraitmatrix (class in pybrops.core.mat.taxatraitmatrix)": [[701, "pybrops.core.mat.TaxaTraitMatrix.TaxaTraitMatrix"]], "__add__() (pybrops.core.mat.taxatraitmatrix.taxatraitmatrix method)": [[701, "pybrops.core.mat.TaxaTraitMatrix.TaxaTraitMatrix.__add__"]], "__mul__() (pybrops.core.mat.taxatraitmatrix.taxatraitmatrix method)": [[701, "pybrops.core.mat.TaxaTraitMatrix.TaxaTraitMatrix.__mul__"]], "adjoin() (pybrops.core.mat.taxatraitmatrix.taxatraitmatrix method)": [[701, "pybrops.core.mat.TaxaTraitMatrix.TaxaTraitMatrix.adjoin"]], "adjoin_taxa() (pybrops.core.mat.taxatraitmatrix.taxatraitmatrix method)": [[701, "pybrops.core.mat.TaxaTraitMatrix.TaxaTraitMatrix.adjoin_taxa"]], "adjoin_trait() (pybrops.core.mat.taxatraitmatrix.taxatraitmatrix method)": [[701, "pybrops.core.mat.TaxaTraitMatrix.TaxaTraitMatrix.adjoin_trait"]], "append() (pybrops.core.mat.taxatraitmatrix.taxatraitmatrix method)": [[701, "pybrops.core.mat.TaxaTraitMatrix.TaxaTraitMatrix.append"]], "append_taxa() (pybrops.core.mat.taxatraitmatrix.taxatraitmatrix method)": [[701, "pybrops.core.mat.TaxaTraitMatrix.TaxaTraitMatrix.append_taxa"]], "append_trait() (pybrops.core.mat.taxatraitmatrix.taxatraitmatrix method)": [[701, "pybrops.core.mat.TaxaTraitMatrix.TaxaTraitMatrix.append_trait"]], "concat() (pybrops.core.mat.taxatraitmatrix.taxatraitmatrix class method)": [[701, "pybrops.core.mat.TaxaTraitMatrix.TaxaTraitMatrix.concat"]], "concat_taxa() (pybrops.core.mat.taxatraitmatrix.taxatraitmatrix class method)": [[701, "pybrops.core.mat.TaxaTraitMatrix.TaxaTraitMatrix.concat_taxa"]], "concat_trait() (pybrops.core.mat.taxatraitmatrix.taxatraitmatrix class method)": [[701, "pybrops.core.mat.TaxaTraitMatrix.TaxaTraitMatrix.concat_trait"]], "copy() (pybrops.core.mat.taxatraitmatrix.taxatraitmatrix method)": [[701, "pybrops.core.mat.TaxaTraitMatrix.TaxaTraitMatrix.copy"]], "deepcopy() (pybrops.core.mat.taxatraitmatrix.taxatraitmatrix method)": [[701, "pybrops.core.mat.TaxaTraitMatrix.TaxaTraitMatrix.deepcopy"]], "delete() (pybrops.core.mat.taxatraitmatrix.taxatraitmatrix method)": [[701, "pybrops.core.mat.TaxaTraitMatrix.TaxaTraitMatrix.delete"]], "delete_taxa() (pybrops.core.mat.taxatraitmatrix.taxatraitmatrix method)": [[701, "pybrops.core.mat.TaxaTraitMatrix.TaxaTraitMatrix.delete_taxa"]], "delete_trait() (pybrops.core.mat.taxatraitmatrix.taxatraitmatrix method)": [[701, "pybrops.core.mat.TaxaTraitMatrix.TaxaTraitMatrix.delete_trait"]], "from_hdf5() (pybrops.core.mat.taxatraitmatrix.taxatraitmatrix class method)": [[701, "pybrops.core.mat.TaxaTraitMatrix.TaxaTraitMatrix.from_hdf5"]], "group() (pybrops.core.mat.taxatraitmatrix.taxatraitmatrix method)": [[701, "pybrops.core.mat.TaxaTraitMatrix.TaxaTraitMatrix.group"]], "group_taxa() (pybrops.core.mat.taxatraitmatrix.taxatraitmatrix method)": [[701, "pybrops.core.mat.TaxaTraitMatrix.TaxaTraitMatrix.group_taxa"]], "incorp() (pybrops.core.mat.taxatraitmatrix.taxatraitmatrix method)": [[701, "pybrops.core.mat.TaxaTraitMatrix.TaxaTraitMatrix.incorp"]], "incorp_taxa() (pybrops.core.mat.taxatraitmatrix.taxatraitmatrix method)": [[701, "pybrops.core.mat.TaxaTraitMatrix.TaxaTraitMatrix.incorp_taxa"]], "incorp_trait() (pybrops.core.mat.taxatraitmatrix.taxatraitmatrix method)": [[701, "pybrops.core.mat.TaxaTraitMatrix.TaxaTraitMatrix.incorp_trait"]], "insert() (pybrops.core.mat.taxatraitmatrix.taxatraitmatrix method)": [[701, "pybrops.core.mat.TaxaTraitMatrix.TaxaTraitMatrix.insert"]], "insert_taxa() (pybrops.core.mat.taxatraitmatrix.taxatraitmatrix method)": [[701, "pybrops.core.mat.TaxaTraitMatrix.TaxaTraitMatrix.insert_taxa"]], "insert_trait() (pybrops.core.mat.taxatraitmatrix.taxatraitmatrix method)": [[701, "pybrops.core.mat.TaxaTraitMatrix.TaxaTraitMatrix.insert_trait"]], "is_grouped() (pybrops.core.mat.taxatraitmatrix.taxatraitmatrix method)": [[701, "pybrops.core.mat.TaxaTraitMatrix.TaxaTraitMatrix.is_grouped"]], "is_grouped_taxa() (pybrops.core.mat.taxatraitmatrix.taxatraitmatrix method)": [[701, "pybrops.core.mat.TaxaTraitMatrix.TaxaTraitMatrix.is_grouped_taxa"]], "lexsort() (pybrops.core.mat.taxatraitmatrix.taxatraitmatrix method)": [[701, "pybrops.core.mat.TaxaTraitMatrix.TaxaTraitMatrix.lexsort"]], "lexsort_taxa() (pybrops.core.mat.taxatraitmatrix.taxatraitmatrix method)": [[701, "pybrops.core.mat.TaxaTraitMatrix.TaxaTraitMatrix.lexsort_taxa"]], "lexsort_trait() (pybrops.core.mat.taxatraitmatrix.taxatraitmatrix method)": [[701, "pybrops.core.mat.TaxaTraitMatrix.TaxaTraitMatrix.lexsort_trait"]], "mat (pybrops.core.mat.taxatraitmatrix.taxatraitmatrix property)": [[701, "pybrops.core.mat.TaxaTraitMatrix.TaxaTraitMatrix.mat"]], "mat_ndim (pybrops.core.mat.taxatraitmatrix.taxatraitmatrix property)": [[701, "pybrops.core.mat.TaxaTraitMatrix.TaxaTraitMatrix.mat_ndim"]], "mat_shape (pybrops.core.mat.taxatraitmatrix.taxatraitmatrix property)": [[701, "pybrops.core.mat.TaxaTraitMatrix.TaxaTraitMatrix.mat_shape"]], "ntaxa (pybrops.core.mat.taxatraitmatrix.taxatraitmatrix property)": [[701, "pybrops.core.mat.TaxaTraitMatrix.TaxaTraitMatrix.ntaxa"]], "ntrait (pybrops.core.mat.taxatraitmatrix.taxatraitmatrix property)": [[701, "pybrops.core.mat.TaxaTraitMatrix.TaxaTraitMatrix.ntrait"]], "remove() (pybrops.core.mat.taxatraitmatrix.taxatraitmatrix method)": [[701, "pybrops.core.mat.TaxaTraitMatrix.TaxaTraitMatrix.remove"]], "remove_taxa() (pybrops.core.mat.taxatraitmatrix.taxatraitmatrix method)": [[701, "pybrops.core.mat.TaxaTraitMatrix.TaxaTraitMatrix.remove_taxa"]], "remove_trait() (pybrops.core.mat.taxatraitmatrix.taxatraitmatrix method)": [[701, "pybrops.core.mat.TaxaTraitMatrix.TaxaTraitMatrix.remove_trait"]], "reorder() (pybrops.core.mat.taxatraitmatrix.taxatraitmatrix method)": [[701, "pybrops.core.mat.TaxaTraitMatrix.TaxaTraitMatrix.reorder"]], "reorder_taxa() (pybrops.core.mat.taxatraitmatrix.taxatraitmatrix method)": [[701, "pybrops.core.mat.TaxaTraitMatrix.TaxaTraitMatrix.reorder_taxa"]], "reorder_trait() (pybrops.core.mat.taxatraitmatrix.taxatraitmatrix method)": [[701, "pybrops.core.mat.TaxaTraitMatrix.TaxaTraitMatrix.reorder_trait"]], "select() (pybrops.core.mat.taxatraitmatrix.taxatraitmatrix method)": [[701, "pybrops.core.mat.TaxaTraitMatrix.TaxaTraitMatrix.select"]], "select_taxa() (pybrops.core.mat.taxatraitmatrix.taxatraitmatrix method)": [[701, "pybrops.core.mat.TaxaTraitMatrix.TaxaTraitMatrix.select_taxa"]], "select_trait() (pybrops.core.mat.taxatraitmatrix.taxatraitmatrix method)": [[701, "pybrops.core.mat.TaxaTraitMatrix.TaxaTraitMatrix.select_trait"]], "sort() (pybrops.core.mat.taxatraitmatrix.taxatraitmatrix method)": [[701, "pybrops.core.mat.TaxaTraitMatrix.TaxaTraitMatrix.sort"]], "sort_taxa() (pybrops.core.mat.taxatraitmatrix.taxatraitmatrix method)": [[701, "pybrops.core.mat.TaxaTraitMatrix.TaxaTraitMatrix.sort_taxa"]], "sort_trait() (pybrops.core.mat.taxatraitmatrix.taxatraitmatrix method)": [[701, "pybrops.core.mat.TaxaTraitMatrix.TaxaTraitMatrix.sort_trait"]], "taxa (pybrops.core.mat.taxatraitmatrix.taxatraitmatrix property)": [[701, "pybrops.core.mat.TaxaTraitMatrix.TaxaTraitMatrix.taxa"]], "taxa_axis (pybrops.core.mat.taxatraitmatrix.taxatraitmatrix property)": [[701, "pybrops.core.mat.TaxaTraitMatrix.TaxaTraitMatrix.taxa_axis"]], "taxa_grp (pybrops.core.mat.taxatraitmatrix.taxatraitmatrix property)": [[701, "pybrops.core.mat.TaxaTraitMatrix.TaxaTraitMatrix.taxa_grp"]], "taxa_grp_len (pybrops.core.mat.taxatraitmatrix.taxatraitmatrix property)": [[701, "pybrops.core.mat.TaxaTraitMatrix.TaxaTraitMatrix.taxa_grp_len"]], "taxa_grp_name (pybrops.core.mat.taxatraitmatrix.taxatraitmatrix property)": [[701, "pybrops.core.mat.TaxaTraitMatrix.TaxaTraitMatrix.taxa_grp_name"]], "taxa_grp_spix (pybrops.core.mat.taxatraitmatrix.taxatraitmatrix property)": [[701, "pybrops.core.mat.TaxaTraitMatrix.TaxaTraitMatrix.taxa_grp_spix"]], "taxa_grp_stix (pybrops.core.mat.taxatraitmatrix.taxatraitmatrix property)": [[701, "pybrops.core.mat.TaxaTraitMatrix.TaxaTraitMatrix.taxa_grp_stix"]], "to_hdf5() (pybrops.core.mat.taxatraitmatrix.taxatraitmatrix method)": [[701, "pybrops.core.mat.TaxaTraitMatrix.TaxaTraitMatrix.to_hdf5"]], "trait (pybrops.core.mat.taxatraitmatrix.taxatraitmatrix property)": [[701, "pybrops.core.mat.TaxaTraitMatrix.TaxaTraitMatrix.trait"]], "trait_axis (pybrops.core.mat.taxatraitmatrix.taxatraitmatrix property)": [[701, "pybrops.core.mat.TaxaTraitMatrix.TaxaTraitMatrix.trait_axis"]], "ungroup() (pybrops.core.mat.taxatraitmatrix.taxatraitmatrix method)": [[701, "pybrops.core.mat.TaxaTraitMatrix.TaxaTraitMatrix.ungroup"]], "ungroup_taxa() (pybrops.core.mat.taxatraitmatrix.taxatraitmatrix method)": [[701, "pybrops.core.mat.TaxaTraitMatrix.TaxaTraitMatrix.ungroup_taxa"]], "check_is_taxatraitmatrix() (in module pybrops.core.mat.taxatraitmatrix)": [[702, "pybrops.core.mat.TaxaTraitMatrix.check_is_TaxaTraitMatrix"]], "pybrops.core.mat.taxavariantmatrix": [[703, "module-pybrops.core.mat.TaxaVariantMatrix"]], "taxavariantmatrix (class in pybrops.core.mat.taxavariantmatrix)": [[704, "pybrops.core.mat.TaxaVariantMatrix.TaxaVariantMatrix"]], "__add__() (pybrops.core.mat.taxavariantmatrix.taxavariantmatrix method)": [[704, "pybrops.core.mat.TaxaVariantMatrix.TaxaVariantMatrix.__add__"]], "__mul__() (pybrops.core.mat.taxavariantmatrix.taxavariantmatrix method)": [[704, "pybrops.core.mat.TaxaVariantMatrix.TaxaVariantMatrix.__mul__"]], "adjoin() (pybrops.core.mat.taxavariantmatrix.taxavariantmatrix method)": [[704, "pybrops.core.mat.TaxaVariantMatrix.TaxaVariantMatrix.adjoin"]], "adjoin_taxa() (pybrops.core.mat.taxavariantmatrix.taxavariantmatrix method)": [[704, "pybrops.core.mat.TaxaVariantMatrix.TaxaVariantMatrix.adjoin_taxa"]], "adjoin_vrnt() (pybrops.core.mat.taxavariantmatrix.taxavariantmatrix method)": [[704, "pybrops.core.mat.TaxaVariantMatrix.TaxaVariantMatrix.adjoin_vrnt"]], "append() (pybrops.core.mat.taxavariantmatrix.taxavariantmatrix method)": [[704, "pybrops.core.mat.TaxaVariantMatrix.TaxaVariantMatrix.append"]], "append_taxa() (pybrops.core.mat.taxavariantmatrix.taxavariantmatrix method)": [[704, "pybrops.core.mat.TaxaVariantMatrix.TaxaVariantMatrix.append_taxa"]], "append_vrnt() (pybrops.core.mat.taxavariantmatrix.taxavariantmatrix method)": [[704, "pybrops.core.mat.TaxaVariantMatrix.TaxaVariantMatrix.append_vrnt"]], "concat() (pybrops.core.mat.taxavariantmatrix.taxavariantmatrix class method)": [[704, "pybrops.core.mat.TaxaVariantMatrix.TaxaVariantMatrix.concat"]], "concat_taxa() (pybrops.core.mat.taxavariantmatrix.taxavariantmatrix class method)": [[704, "pybrops.core.mat.TaxaVariantMatrix.TaxaVariantMatrix.concat_taxa"]], "concat_vrnt() (pybrops.core.mat.taxavariantmatrix.taxavariantmatrix class method)": [[704, "pybrops.core.mat.TaxaVariantMatrix.TaxaVariantMatrix.concat_vrnt"]], "copy() (pybrops.core.mat.taxavariantmatrix.taxavariantmatrix method)": [[704, "pybrops.core.mat.TaxaVariantMatrix.TaxaVariantMatrix.copy"]], "deepcopy() (pybrops.core.mat.taxavariantmatrix.taxavariantmatrix method)": [[704, "pybrops.core.mat.TaxaVariantMatrix.TaxaVariantMatrix.deepcopy"]], "delete() (pybrops.core.mat.taxavariantmatrix.taxavariantmatrix method)": [[704, "pybrops.core.mat.TaxaVariantMatrix.TaxaVariantMatrix.delete"]], "delete_taxa() (pybrops.core.mat.taxavariantmatrix.taxavariantmatrix method)": [[704, "pybrops.core.mat.TaxaVariantMatrix.TaxaVariantMatrix.delete_taxa"]], "delete_vrnt() (pybrops.core.mat.taxavariantmatrix.taxavariantmatrix method)": [[704, "pybrops.core.mat.TaxaVariantMatrix.TaxaVariantMatrix.delete_vrnt"]], "from_hdf5() (pybrops.core.mat.taxavariantmatrix.taxavariantmatrix class method)": [[704, "pybrops.core.mat.TaxaVariantMatrix.TaxaVariantMatrix.from_hdf5"]], "group() (pybrops.core.mat.taxavariantmatrix.taxavariantmatrix method)": [[704, "pybrops.core.mat.TaxaVariantMatrix.TaxaVariantMatrix.group"]], "group_taxa() (pybrops.core.mat.taxavariantmatrix.taxavariantmatrix method)": [[704, "pybrops.core.mat.TaxaVariantMatrix.TaxaVariantMatrix.group_taxa"]], "group_vrnt() (pybrops.core.mat.taxavariantmatrix.taxavariantmatrix method)": [[704, "pybrops.core.mat.TaxaVariantMatrix.TaxaVariantMatrix.group_vrnt"]], "incorp() (pybrops.core.mat.taxavariantmatrix.taxavariantmatrix method)": [[704, "pybrops.core.mat.TaxaVariantMatrix.TaxaVariantMatrix.incorp"]], "incorp_taxa() (pybrops.core.mat.taxavariantmatrix.taxavariantmatrix method)": [[704, "pybrops.core.mat.TaxaVariantMatrix.TaxaVariantMatrix.incorp_taxa"]], "incorp_vrnt() (pybrops.core.mat.taxavariantmatrix.taxavariantmatrix method)": [[704, "pybrops.core.mat.TaxaVariantMatrix.TaxaVariantMatrix.incorp_vrnt"]], "insert() (pybrops.core.mat.taxavariantmatrix.taxavariantmatrix method)": [[704, "pybrops.core.mat.TaxaVariantMatrix.TaxaVariantMatrix.insert"]], "insert_taxa() (pybrops.core.mat.taxavariantmatrix.taxavariantmatrix method)": [[704, "pybrops.core.mat.TaxaVariantMatrix.TaxaVariantMatrix.insert_taxa"]], "insert_vrnt() (pybrops.core.mat.taxavariantmatrix.taxavariantmatrix method)": [[704, "pybrops.core.mat.TaxaVariantMatrix.TaxaVariantMatrix.insert_vrnt"]], "is_grouped() (pybrops.core.mat.taxavariantmatrix.taxavariantmatrix method)": [[704, "pybrops.core.mat.TaxaVariantMatrix.TaxaVariantMatrix.is_grouped"]], "is_grouped_taxa() (pybrops.core.mat.taxavariantmatrix.taxavariantmatrix method)": [[704, "pybrops.core.mat.TaxaVariantMatrix.TaxaVariantMatrix.is_grouped_taxa"]], "is_grouped_vrnt() (pybrops.core.mat.taxavariantmatrix.taxavariantmatrix method)": [[704, "pybrops.core.mat.TaxaVariantMatrix.TaxaVariantMatrix.is_grouped_vrnt"]], "lexsort() (pybrops.core.mat.taxavariantmatrix.taxavariantmatrix method)": [[704, "pybrops.core.mat.TaxaVariantMatrix.TaxaVariantMatrix.lexsort"]], "lexsort_taxa() (pybrops.core.mat.taxavariantmatrix.taxavariantmatrix method)": [[704, "pybrops.core.mat.TaxaVariantMatrix.TaxaVariantMatrix.lexsort_taxa"]], "lexsort_vrnt() (pybrops.core.mat.taxavariantmatrix.taxavariantmatrix method)": [[704, "pybrops.core.mat.TaxaVariantMatrix.TaxaVariantMatrix.lexsort_vrnt"]], "mat (pybrops.core.mat.taxavariantmatrix.taxavariantmatrix property)": [[704, "pybrops.core.mat.TaxaVariantMatrix.TaxaVariantMatrix.mat"]], "mat_ndim (pybrops.core.mat.taxavariantmatrix.taxavariantmatrix property)": [[704, "pybrops.core.mat.TaxaVariantMatrix.TaxaVariantMatrix.mat_ndim"]], "mat_shape (pybrops.core.mat.taxavariantmatrix.taxavariantmatrix property)": [[704, "pybrops.core.mat.TaxaVariantMatrix.TaxaVariantMatrix.mat_shape"]], "ntaxa (pybrops.core.mat.taxavariantmatrix.taxavariantmatrix property)": [[704, "pybrops.core.mat.TaxaVariantMatrix.TaxaVariantMatrix.ntaxa"]], "nvrnt (pybrops.core.mat.taxavariantmatrix.taxavariantmatrix property)": [[704, "pybrops.core.mat.TaxaVariantMatrix.TaxaVariantMatrix.nvrnt"]], "remove() (pybrops.core.mat.taxavariantmatrix.taxavariantmatrix method)": [[704, "pybrops.core.mat.TaxaVariantMatrix.TaxaVariantMatrix.remove"]], "remove_taxa() (pybrops.core.mat.taxavariantmatrix.taxavariantmatrix method)": [[704, "pybrops.core.mat.TaxaVariantMatrix.TaxaVariantMatrix.remove_taxa"]], "remove_vrnt() (pybrops.core.mat.taxavariantmatrix.taxavariantmatrix method)": [[704, "pybrops.core.mat.TaxaVariantMatrix.TaxaVariantMatrix.remove_vrnt"]], "reorder() (pybrops.core.mat.taxavariantmatrix.taxavariantmatrix method)": [[704, "pybrops.core.mat.TaxaVariantMatrix.TaxaVariantMatrix.reorder"]], "reorder_taxa() (pybrops.core.mat.taxavariantmatrix.taxavariantmatrix method)": [[704, "pybrops.core.mat.TaxaVariantMatrix.TaxaVariantMatrix.reorder_taxa"]], "reorder_vrnt() (pybrops.core.mat.taxavariantmatrix.taxavariantmatrix method)": [[704, "pybrops.core.mat.TaxaVariantMatrix.TaxaVariantMatrix.reorder_vrnt"]], "select() (pybrops.core.mat.taxavariantmatrix.taxavariantmatrix method)": [[704, "pybrops.core.mat.TaxaVariantMatrix.TaxaVariantMatrix.select"]], "select_taxa() (pybrops.core.mat.taxavariantmatrix.taxavariantmatrix method)": [[704, "pybrops.core.mat.TaxaVariantMatrix.TaxaVariantMatrix.select_taxa"]], "select_vrnt() (pybrops.core.mat.taxavariantmatrix.taxavariantmatrix method)": [[704, "pybrops.core.mat.TaxaVariantMatrix.TaxaVariantMatrix.select_vrnt"]], "sort() (pybrops.core.mat.taxavariantmatrix.taxavariantmatrix method)": [[704, "pybrops.core.mat.TaxaVariantMatrix.TaxaVariantMatrix.sort"]], "sort_taxa() (pybrops.core.mat.taxavariantmatrix.taxavariantmatrix method)": [[704, "pybrops.core.mat.TaxaVariantMatrix.TaxaVariantMatrix.sort_taxa"]], "sort_vrnt() (pybrops.core.mat.taxavariantmatrix.taxavariantmatrix method)": [[704, "pybrops.core.mat.TaxaVariantMatrix.TaxaVariantMatrix.sort_vrnt"]], "taxa (pybrops.core.mat.taxavariantmatrix.taxavariantmatrix property)": [[704, "pybrops.core.mat.TaxaVariantMatrix.TaxaVariantMatrix.taxa"]], "taxa_axis (pybrops.core.mat.taxavariantmatrix.taxavariantmatrix property)": [[704, "pybrops.core.mat.TaxaVariantMatrix.TaxaVariantMatrix.taxa_axis"]], "taxa_grp (pybrops.core.mat.taxavariantmatrix.taxavariantmatrix property)": [[704, "pybrops.core.mat.TaxaVariantMatrix.TaxaVariantMatrix.taxa_grp"]], "taxa_grp_len (pybrops.core.mat.taxavariantmatrix.taxavariantmatrix property)": [[704, "pybrops.core.mat.TaxaVariantMatrix.TaxaVariantMatrix.taxa_grp_len"]], "taxa_grp_name (pybrops.core.mat.taxavariantmatrix.taxavariantmatrix property)": [[704, "pybrops.core.mat.TaxaVariantMatrix.TaxaVariantMatrix.taxa_grp_name"]], "taxa_grp_spix (pybrops.core.mat.taxavariantmatrix.taxavariantmatrix property)": [[704, "pybrops.core.mat.TaxaVariantMatrix.TaxaVariantMatrix.taxa_grp_spix"]], "taxa_grp_stix (pybrops.core.mat.taxavariantmatrix.taxavariantmatrix property)": [[704, "pybrops.core.mat.TaxaVariantMatrix.TaxaVariantMatrix.taxa_grp_stix"]], "to_hdf5() (pybrops.core.mat.taxavariantmatrix.taxavariantmatrix method)": [[704, "pybrops.core.mat.TaxaVariantMatrix.TaxaVariantMatrix.to_hdf5"]], "ungroup() (pybrops.core.mat.taxavariantmatrix.taxavariantmatrix method)": [[704, "pybrops.core.mat.TaxaVariantMatrix.TaxaVariantMatrix.ungroup"]], "ungroup_taxa() (pybrops.core.mat.taxavariantmatrix.taxavariantmatrix method)": [[704, "pybrops.core.mat.TaxaVariantMatrix.TaxaVariantMatrix.ungroup_taxa"]], "ungroup_vrnt() (pybrops.core.mat.taxavariantmatrix.taxavariantmatrix method)": [[704, "pybrops.core.mat.TaxaVariantMatrix.TaxaVariantMatrix.ungroup_vrnt"]], "vrnt_axis (pybrops.core.mat.taxavariantmatrix.taxavariantmatrix property)": [[704, "pybrops.core.mat.TaxaVariantMatrix.TaxaVariantMatrix.vrnt_axis"]], "vrnt_chrgrp (pybrops.core.mat.taxavariantmatrix.taxavariantmatrix property)": [[704, "pybrops.core.mat.TaxaVariantMatrix.TaxaVariantMatrix.vrnt_chrgrp"]], "vrnt_chrgrp_len (pybrops.core.mat.taxavariantmatrix.taxavariantmatrix property)": [[704, "pybrops.core.mat.TaxaVariantMatrix.TaxaVariantMatrix.vrnt_chrgrp_len"]], "vrnt_chrgrp_name (pybrops.core.mat.taxavariantmatrix.taxavariantmatrix property)": [[704, "pybrops.core.mat.TaxaVariantMatrix.TaxaVariantMatrix.vrnt_chrgrp_name"]], "vrnt_chrgrp_spix (pybrops.core.mat.taxavariantmatrix.taxavariantmatrix property)": [[704, "pybrops.core.mat.TaxaVariantMatrix.TaxaVariantMatrix.vrnt_chrgrp_spix"]], "vrnt_chrgrp_stix (pybrops.core.mat.taxavariantmatrix.taxavariantmatrix property)": [[704, "pybrops.core.mat.TaxaVariantMatrix.TaxaVariantMatrix.vrnt_chrgrp_stix"]], "vrnt_genpos (pybrops.core.mat.taxavariantmatrix.taxavariantmatrix property)": [[704, "pybrops.core.mat.TaxaVariantMatrix.TaxaVariantMatrix.vrnt_genpos"]], "vrnt_hapalt (pybrops.core.mat.taxavariantmatrix.taxavariantmatrix property)": [[704, "pybrops.core.mat.TaxaVariantMatrix.TaxaVariantMatrix.vrnt_hapalt"]], "vrnt_hapgrp (pybrops.core.mat.taxavariantmatrix.taxavariantmatrix property)": [[704, "pybrops.core.mat.TaxaVariantMatrix.TaxaVariantMatrix.vrnt_hapgrp"]], "vrnt_hapref (pybrops.core.mat.taxavariantmatrix.taxavariantmatrix property)": [[704, "pybrops.core.mat.TaxaVariantMatrix.TaxaVariantMatrix.vrnt_hapref"]], "vrnt_mask (pybrops.core.mat.taxavariantmatrix.taxavariantmatrix property)": [[704, "pybrops.core.mat.TaxaVariantMatrix.TaxaVariantMatrix.vrnt_mask"]], "vrnt_name (pybrops.core.mat.taxavariantmatrix.taxavariantmatrix property)": [[704, "pybrops.core.mat.TaxaVariantMatrix.TaxaVariantMatrix.vrnt_name"]], "vrnt_phypos (pybrops.core.mat.taxavariantmatrix.taxavariantmatrix property)": [[704, "pybrops.core.mat.TaxaVariantMatrix.TaxaVariantMatrix.vrnt_phypos"]], "vrnt_xoprob (pybrops.core.mat.taxavariantmatrix.taxavariantmatrix property)": [[704, "pybrops.core.mat.TaxaVariantMatrix.TaxaVariantMatrix.vrnt_xoprob"]], "check_is_taxavariantmatrix() (in module pybrops.core.mat.taxavariantmatrix)": [[705, "pybrops.core.mat.TaxaVariantMatrix.check_is_TaxaVariantMatrix"]], "pybrops.core.mat.traitmatrix": [[706, "module-pybrops.core.mat.TraitMatrix"]], "traitmatrix (class in pybrops.core.mat.traitmatrix)": [[707, "pybrops.core.mat.TraitMatrix.TraitMatrix"]], "__add__() (pybrops.core.mat.traitmatrix.traitmatrix method)": [[707, "pybrops.core.mat.TraitMatrix.TraitMatrix.__add__"]], "__mul__() (pybrops.core.mat.traitmatrix.traitmatrix method)": [[707, "pybrops.core.mat.TraitMatrix.TraitMatrix.__mul__"]], "adjoin() (pybrops.core.mat.traitmatrix.traitmatrix method)": [[707, "pybrops.core.mat.TraitMatrix.TraitMatrix.adjoin"]], "adjoin_trait() (pybrops.core.mat.traitmatrix.traitmatrix method)": [[707, "pybrops.core.mat.TraitMatrix.TraitMatrix.adjoin_trait"]], "append() (pybrops.core.mat.traitmatrix.traitmatrix method)": [[707, "pybrops.core.mat.TraitMatrix.TraitMatrix.append"]], "append_trait() (pybrops.core.mat.traitmatrix.traitmatrix method)": [[707, "pybrops.core.mat.TraitMatrix.TraitMatrix.append_trait"]], "concat() (pybrops.core.mat.traitmatrix.traitmatrix class method)": [[707, "pybrops.core.mat.TraitMatrix.TraitMatrix.concat"]], "concat_trait() (pybrops.core.mat.traitmatrix.traitmatrix class method)": [[707, "pybrops.core.mat.TraitMatrix.TraitMatrix.concat_trait"]], "copy() (pybrops.core.mat.traitmatrix.traitmatrix method)": [[707, "pybrops.core.mat.TraitMatrix.TraitMatrix.copy"]], "deepcopy() (pybrops.core.mat.traitmatrix.traitmatrix method)": [[707, "pybrops.core.mat.TraitMatrix.TraitMatrix.deepcopy"]], "delete() (pybrops.core.mat.traitmatrix.traitmatrix method)": [[707, "pybrops.core.mat.TraitMatrix.TraitMatrix.delete"]], "delete_trait() (pybrops.core.mat.traitmatrix.traitmatrix method)": [[707, "pybrops.core.mat.TraitMatrix.TraitMatrix.delete_trait"]], "from_hdf5() (pybrops.core.mat.traitmatrix.traitmatrix class method)": [[707, "pybrops.core.mat.TraitMatrix.TraitMatrix.from_hdf5"]], "incorp() (pybrops.core.mat.traitmatrix.traitmatrix method)": [[707, "pybrops.core.mat.TraitMatrix.TraitMatrix.incorp"]], "incorp_trait() (pybrops.core.mat.traitmatrix.traitmatrix method)": [[707, "pybrops.core.mat.TraitMatrix.TraitMatrix.incorp_trait"]], "insert() (pybrops.core.mat.traitmatrix.traitmatrix method)": [[707, "pybrops.core.mat.TraitMatrix.TraitMatrix.insert"]], "insert_trait() (pybrops.core.mat.traitmatrix.traitmatrix method)": [[707, "pybrops.core.mat.TraitMatrix.TraitMatrix.insert_trait"]], "lexsort() (pybrops.core.mat.traitmatrix.traitmatrix method)": [[707, "pybrops.core.mat.TraitMatrix.TraitMatrix.lexsort"]], "lexsort_trait() (pybrops.core.mat.traitmatrix.traitmatrix method)": [[707, "pybrops.core.mat.TraitMatrix.TraitMatrix.lexsort_trait"]], "mat (pybrops.core.mat.traitmatrix.traitmatrix property)": [[707, "pybrops.core.mat.TraitMatrix.TraitMatrix.mat"]], "mat_ndim (pybrops.core.mat.traitmatrix.traitmatrix property)": [[707, "pybrops.core.mat.TraitMatrix.TraitMatrix.mat_ndim"]], "mat_shape (pybrops.core.mat.traitmatrix.traitmatrix property)": [[707, "pybrops.core.mat.TraitMatrix.TraitMatrix.mat_shape"]], "ntrait (pybrops.core.mat.traitmatrix.traitmatrix property)": [[707, "pybrops.core.mat.TraitMatrix.TraitMatrix.ntrait"]], "remove() (pybrops.core.mat.traitmatrix.traitmatrix method)": [[707, "pybrops.core.mat.TraitMatrix.TraitMatrix.remove"]], "remove_trait() (pybrops.core.mat.traitmatrix.traitmatrix method)": [[707, "pybrops.core.mat.TraitMatrix.TraitMatrix.remove_trait"]], "reorder() (pybrops.core.mat.traitmatrix.traitmatrix method)": [[707, "pybrops.core.mat.TraitMatrix.TraitMatrix.reorder"]], "reorder_trait() (pybrops.core.mat.traitmatrix.traitmatrix method)": [[707, "pybrops.core.mat.TraitMatrix.TraitMatrix.reorder_trait"]], "select() (pybrops.core.mat.traitmatrix.traitmatrix method)": [[707, "pybrops.core.mat.TraitMatrix.TraitMatrix.select"]], "select_trait() (pybrops.core.mat.traitmatrix.traitmatrix method)": [[707, "pybrops.core.mat.TraitMatrix.TraitMatrix.select_trait"]], "sort() (pybrops.core.mat.traitmatrix.traitmatrix method)": [[707, "pybrops.core.mat.TraitMatrix.TraitMatrix.sort"]], "sort_trait() (pybrops.core.mat.traitmatrix.traitmatrix method)": [[707, "pybrops.core.mat.TraitMatrix.TraitMatrix.sort_trait"]], "to_hdf5() (pybrops.core.mat.traitmatrix.traitmatrix method)": [[707, "pybrops.core.mat.TraitMatrix.TraitMatrix.to_hdf5"]], "trait (pybrops.core.mat.traitmatrix.traitmatrix property)": [[707, "pybrops.core.mat.TraitMatrix.TraitMatrix.trait"]], "trait_axis (pybrops.core.mat.traitmatrix.traitmatrix property)": [[707, "pybrops.core.mat.TraitMatrix.TraitMatrix.trait_axis"]], "check_is_traitmatrix() (in module pybrops.core.mat.traitmatrix)": [[708, "pybrops.core.mat.TraitMatrix.check_is_TraitMatrix"]], "pybrops.core.mat.variantmatrix": [[709, "module-pybrops.core.mat.VariantMatrix"]], "variantmatrix (class in pybrops.core.mat.variantmatrix)": [[710, "pybrops.core.mat.VariantMatrix.VariantMatrix"]], "__add__() (pybrops.core.mat.variantmatrix.variantmatrix method)": [[710, "pybrops.core.mat.VariantMatrix.VariantMatrix.__add__"]], "__mul__() (pybrops.core.mat.variantmatrix.variantmatrix method)": [[710, "pybrops.core.mat.VariantMatrix.VariantMatrix.__mul__"]], "adjoin() (pybrops.core.mat.variantmatrix.variantmatrix method)": [[710, "pybrops.core.mat.VariantMatrix.VariantMatrix.adjoin"]], "adjoin_vrnt() (pybrops.core.mat.variantmatrix.variantmatrix method)": [[710, "pybrops.core.mat.VariantMatrix.VariantMatrix.adjoin_vrnt"]], "append() (pybrops.core.mat.variantmatrix.variantmatrix method)": [[710, "pybrops.core.mat.VariantMatrix.VariantMatrix.append"]], "append_vrnt() (pybrops.core.mat.variantmatrix.variantmatrix method)": [[710, "pybrops.core.mat.VariantMatrix.VariantMatrix.append_vrnt"]], "concat() (pybrops.core.mat.variantmatrix.variantmatrix class method)": [[710, "pybrops.core.mat.VariantMatrix.VariantMatrix.concat"]], "concat_vrnt() (pybrops.core.mat.variantmatrix.variantmatrix class method)": [[710, "pybrops.core.mat.VariantMatrix.VariantMatrix.concat_vrnt"]], "copy() (pybrops.core.mat.variantmatrix.variantmatrix method)": [[710, "pybrops.core.mat.VariantMatrix.VariantMatrix.copy"]], "deepcopy() (pybrops.core.mat.variantmatrix.variantmatrix method)": [[710, "pybrops.core.mat.VariantMatrix.VariantMatrix.deepcopy"]], "delete() (pybrops.core.mat.variantmatrix.variantmatrix method)": [[710, "pybrops.core.mat.VariantMatrix.VariantMatrix.delete"]], "delete_vrnt() (pybrops.core.mat.variantmatrix.variantmatrix method)": [[710, "pybrops.core.mat.VariantMatrix.VariantMatrix.delete_vrnt"]], "from_hdf5() (pybrops.core.mat.variantmatrix.variantmatrix class method)": [[710, "pybrops.core.mat.VariantMatrix.VariantMatrix.from_hdf5"]], "group() (pybrops.core.mat.variantmatrix.variantmatrix method)": [[710, "pybrops.core.mat.VariantMatrix.VariantMatrix.group"]], "group_vrnt() (pybrops.core.mat.variantmatrix.variantmatrix method)": [[710, "pybrops.core.mat.VariantMatrix.VariantMatrix.group_vrnt"]], "incorp() (pybrops.core.mat.variantmatrix.variantmatrix method)": [[710, "pybrops.core.mat.VariantMatrix.VariantMatrix.incorp"]], "incorp_vrnt() (pybrops.core.mat.variantmatrix.variantmatrix method)": [[710, "pybrops.core.mat.VariantMatrix.VariantMatrix.incorp_vrnt"]], "insert() (pybrops.core.mat.variantmatrix.variantmatrix method)": [[710, "pybrops.core.mat.VariantMatrix.VariantMatrix.insert"]], "insert_vrnt() (pybrops.core.mat.variantmatrix.variantmatrix method)": [[710, "pybrops.core.mat.VariantMatrix.VariantMatrix.insert_vrnt"]], "is_grouped() (pybrops.core.mat.variantmatrix.variantmatrix method)": [[710, "pybrops.core.mat.VariantMatrix.VariantMatrix.is_grouped"]], "is_grouped_vrnt() (pybrops.core.mat.variantmatrix.variantmatrix method)": [[710, "pybrops.core.mat.VariantMatrix.VariantMatrix.is_grouped_vrnt"]], "lexsort() (pybrops.core.mat.variantmatrix.variantmatrix method)": [[710, "pybrops.core.mat.VariantMatrix.VariantMatrix.lexsort"]], "lexsort_vrnt() (pybrops.core.mat.variantmatrix.variantmatrix method)": [[710, "pybrops.core.mat.VariantMatrix.VariantMatrix.lexsort_vrnt"]], "mat (pybrops.core.mat.variantmatrix.variantmatrix property)": [[710, "pybrops.core.mat.VariantMatrix.VariantMatrix.mat"]], "mat_ndim (pybrops.core.mat.variantmatrix.variantmatrix property)": [[710, "pybrops.core.mat.VariantMatrix.VariantMatrix.mat_ndim"]], "mat_shape (pybrops.core.mat.variantmatrix.variantmatrix property)": [[710, "pybrops.core.mat.VariantMatrix.VariantMatrix.mat_shape"]], "nvrnt (pybrops.core.mat.variantmatrix.variantmatrix property)": [[710, "pybrops.core.mat.VariantMatrix.VariantMatrix.nvrnt"]], "remove() (pybrops.core.mat.variantmatrix.variantmatrix method)": [[710, "pybrops.core.mat.VariantMatrix.VariantMatrix.remove"]], "remove_vrnt() (pybrops.core.mat.variantmatrix.variantmatrix method)": [[710, "pybrops.core.mat.VariantMatrix.VariantMatrix.remove_vrnt"]], "reorder() (pybrops.core.mat.variantmatrix.variantmatrix method)": [[710, "pybrops.core.mat.VariantMatrix.VariantMatrix.reorder"]], "reorder_vrnt() (pybrops.core.mat.variantmatrix.variantmatrix method)": [[710, "pybrops.core.mat.VariantMatrix.VariantMatrix.reorder_vrnt"]], "select() (pybrops.core.mat.variantmatrix.variantmatrix method)": [[710, "pybrops.core.mat.VariantMatrix.VariantMatrix.select"]], "select_vrnt() (pybrops.core.mat.variantmatrix.variantmatrix method)": [[710, "pybrops.core.mat.VariantMatrix.VariantMatrix.select_vrnt"]], "sort() (pybrops.core.mat.variantmatrix.variantmatrix method)": [[710, "pybrops.core.mat.VariantMatrix.VariantMatrix.sort"]], "sort_vrnt() (pybrops.core.mat.variantmatrix.variantmatrix method)": [[710, "pybrops.core.mat.VariantMatrix.VariantMatrix.sort_vrnt"]], "to_hdf5() (pybrops.core.mat.variantmatrix.variantmatrix method)": [[710, "pybrops.core.mat.VariantMatrix.VariantMatrix.to_hdf5"]], "ungroup() (pybrops.core.mat.variantmatrix.variantmatrix method)": [[710, "pybrops.core.mat.VariantMatrix.VariantMatrix.ungroup"]], "ungroup_vrnt() (pybrops.core.mat.variantmatrix.variantmatrix method)": [[710, "pybrops.core.mat.VariantMatrix.VariantMatrix.ungroup_vrnt"]], "vrnt_axis (pybrops.core.mat.variantmatrix.variantmatrix property)": [[710, "pybrops.core.mat.VariantMatrix.VariantMatrix.vrnt_axis"]], "vrnt_chrgrp (pybrops.core.mat.variantmatrix.variantmatrix property)": [[710, "pybrops.core.mat.VariantMatrix.VariantMatrix.vrnt_chrgrp"]], "vrnt_chrgrp_len (pybrops.core.mat.variantmatrix.variantmatrix property)": [[710, "pybrops.core.mat.VariantMatrix.VariantMatrix.vrnt_chrgrp_len"]], "vrnt_chrgrp_name (pybrops.core.mat.variantmatrix.variantmatrix property)": [[710, "pybrops.core.mat.VariantMatrix.VariantMatrix.vrnt_chrgrp_name"]], "vrnt_chrgrp_spix (pybrops.core.mat.variantmatrix.variantmatrix property)": [[710, "pybrops.core.mat.VariantMatrix.VariantMatrix.vrnt_chrgrp_spix"]], "vrnt_chrgrp_stix (pybrops.core.mat.variantmatrix.variantmatrix property)": [[710, "pybrops.core.mat.VariantMatrix.VariantMatrix.vrnt_chrgrp_stix"]], "vrnt_genpos (pybrops.core.mat.variantmatrix.variantmatrix property)": [[710, "pybrops.core.mat.VariantMatrix.VariantMatrix.vrnt_genpos"]], "vrnt_hapalt (pybrops.core.mat.variantmatrix.variantmatrix property)": [[710, "pybrops.core.mat.VariantMatrix.VariantMatrix.vrnt_hapalt"]], "vrnt_hapgrp (pybrops.core.mat.variantmatrix.variantmatrix property)": [[710, "pybrops.core.mat.VariantMatrix.VariantMatrix.vrnt_hapgrp"]], "vrnt_hapref (pybrops.core.mat.variantmatrix.variantmatrix property)": [[710, "pybrops.core.mat.VariantMatrix.VariantMatrix.vrnt_hapref"]], "vrnt_mask (pybrops.core.mat.variantmatrix.variantmatrix property)": [[710, "pybrops.core.mat.VariantMatrix.VariantMatrix.vrnt_mask"]], "vrnt_name (pybrops.core.mat.variantmatrix.variantmatrix property)": [[710, "pybrops.core.mat.VariantMatrix.VariantMatrix.vrnt_name"]], "vrnt_phypos (pybrops.core.mat.variantmatrix.variantmatrix property)": [[710, "pybrops.core.mat.VariantMatrix.VariantMatrix.vrnt_phypos"]], "vrnt_xoprob (pybrops.core.mat.variantmatrix.variantmatrix property)": [[710, "pybrops.core.mat.VariantMatrix.VariantMatrix.vrnt_xoprob"]], "check_is_variantmatrix() (in module pybrops.core.mat.variantmatrix)": [[711, "pybrops.core.mat.VariantMatrix.check_is_VariantMatrix"]], "pybrops.core.mat.util": [[712, "module-pybrops.core.mat.util"]], "get_axis() (in module pybrops.core.mat.util)": [[713, "pybrops.core.mat.util.get_axis"]], "pybrops.core.random": [[714, "module-pybrops.core.random"]], "pybrops.core.random.prng": [[715, "module-pybrops.core.random.prng"]], "seed() (in module pybrops.core.random.prng)": [[716, "pybrops.core.random.prng.seed"]], "spawn() (in module pybrops.core.random.prng)": [[717, "pybrops.core.random.prng.spawn"]], "pybrops.core.random.sampling": [[718, "module-pybrops.core.random.sampling"]], "axis_shuffle() (in module pybrops.core.random.sampling)": [[719, "pybrops.core.random.sampling.axis_shuffle"]], "outcross_shuffle() (in module pybrops.core.random.sampling)": [[720, "pybrops.core.random.sampling.outcross_shuffle"]], "stochastic_universal_sampling() (in module pybrops.core.random.sampling)": [[721, "pybrops.core.random.sampling.stochastic_universal_sampling"]], "tiled_choice() (in module pybrops.core.random.sampling)": [[722, "pybrops.core.random.sampling.tiled_choice"]], "pybrops.core.util": [[723, "module-pybrops.core.util"]], "pybrops.core.util.arrayix": [[724, "module-pybrops.core.util.arrayix"]], "flattenix() (in module pybrops.core.util.arrayix)": [[725, "pybrops.core.util.arrayix.flattenix"]], "sliceaxisix() (in module pybrops.core.util.arrayix)": [[726, "pybrops.core.util.arrayix.sliceaxisix"]], "sqarrayix() (in module pybrops.core.util.arrayix)": [[727, "pybrops.core.util.arrayix.sqarrayix"]], "triudix() (in module pybrops.core.util.arrayix)": [[728, "pybrops.core.util.arrayix.triudix"]], "triuix() (in module pybrops.core.util.arrayix)": [[729, "pybrops.core.util.arrayix.triuix"]], "xmapix() (in module pybrops.core.util.arrayix)": [[730, "pybrops.core.util.arrayix.xmapix"]], "pybrops.core.util.h5py": [[731, "module-pybrops.core.util.h5py"]], "h5py_file_is_writable() (in module pybrops.core.util.h5py)": [[732, "pybrops.core.util.h5py.h5py_File_is_writable"]], "save_dict_to_hdf5() (in module pybrops.core.util.h5py)": [[733, "pybrops.core.util.h5py.save_dict_to_hdf5"]], "pybrops.core.util.haplo": [[734, "module-pybrops.core.util.haplo"]], "haplobin() (in module pybrops.core.util.haplo)": [[735, "pybrops.core.util.haplo.haplobin"]], "haplobin_bounds() (in module pybrops.core.util.haplo)": [[736, "pybrops.core.util.haplo.haplobin_bounds"]], "haplomat() (in module pybrops.core.util.haplo)": [[737, "pybrops.core.util.haplo.haplomat"]], "nhaploblk_chrom() (in module pybrops.core.util.haplo)": [[738, "pybrops.core.util.haplo.nhaploblk_chrom"]], "pybrops.core.util.iterator": [[739, "module-pybrops.core.util.iterator"]], "iterlen() (in module pybrops.core.util.iterator)": [[740, "pybrops.core.util.iterator.iterlen"]], "pybrops.core.util.pareto": [[741, "module-pybrops.core.util.pareto"]], "is_pareto_efficient() (in module pybrops.core.util.pareto)": [[742, "pybrops.core.util.pareto.is_pareto_efficient"]], "pybrops.core.util.subroutines": [[743, "module-pybrops.core.util.subroutines"]], "human2bytes() (in module pybrops.core.util.subroutines)": [[744, "pybrops.core.util.subroutines.human2bytes"]], "matrix_is_sorted() (in module pybrops.core.util.subroutines)": [[745, "pybrops.core.util.subroutines.matrix_is_sorted"]], "slice_to_list() (in module pybrops.core.util.subroutines)": [[746, "pybrops.core.util.subroutines.slice_to_list"]], "slice_to_range() (in module pybrops.core.util.subroutines)": [[747, "pybrops.core.util.subroutines.slice_to_range"]], "srange() (in module pybrops.core.util.subroutines)": [[748, "pybrops.core.util.subroutines.srange"]], "pybrops.model": [[749, "module-pybrops.model"]], "pybrops.model.gmod": [[750, "module-pybrops.model.gmod"]], "pybrops.model.gmod.additivedominanceepistaticlineargenomicmodel": [[751, "module-pybrops.model.gmod.AdditiveDominanceEpistaticLinearGenomicModel"]], "additivedominanceepistaticlineargenomicmodel (class in pybrops.model.gmod.additivedominanceepistaticlineargenomicmodel)": [[752, "pybrops.model.gmod.AdditiveDominanceEpistaticLinearGenomicModel.AdditiveDominanceEpistaticLinearGenomicModel"]], "beta (pybrops.model.gmod.additivedominanceepistaticlineargenomicmodel.additivedominanceepistaticlineargenomicmodel property)": [[752, "pybrops.model.gmod.AdditiveDominanceEpistaticLinearGenomicModel.AdditiveDominanceEpistaticLinearGenomicModel.beta"]], "bulmer() (pybrops.model.gmod.additivedominanceepistaticlineargenomicmodel.additivedominanceepistaticlineargenomicmodel method)": [[752, "pybrops.model.gmod.AdditiveDominanceEpistaticLinearGenomicModel.AdditiveDominanceEpistaticLinearGenomicModel.bulmer"]], "bulmer_numpy() (pybrops.model.gmod.additivedominanceepistaticlineargenomicmodel.additivedominanceepistaticlineargenomicmodel method)": [[752, "pybrops.model.gmod.AdditiveDominanceEpistaticLinearGenomicModel.AdditiveDominanceEpistaticLinearGenomicModel.bulmer_numpy"]], "copy() (pybrops.model.gmod.additivedominanceepistaticlineargenomicmodel.additivedominanceepistaticlineargenomicmodel method)": [[752, "pybrops.model.gmod.AdditiveDominanceEpistaticLinearGenomicModel.AdditiveDominanceEpistaticLinearGenomicModel.copy"]], "daavail() (pybrops.model.gmod.additivedominanceepistaticlineargenomicmodel.additivedominanceepistaticlineargenomicmodel method)": [[752, "pybrops.model.gmod.AdditiveDominanceEpistaticLinearGenomicModel.AdditiveDominanceEpistaticLinearGenomicModel.daavail"]], "dacount() (pybrops.model.gmod.additivedominanceepistaticlineargenomicmodel.additivedominanceepistaticlineargenomicmodel method)": [[752, "pybrops.model.gmod.AdditiveDominanceEpistaticLinearGenomicModel.AdditiveDominanceEpistaticLinearGenomicModel.dacount"]], "dafixed() (pybrops.model.gmod.additivedominanceepistaticlineargenomicmodel.additivedominanceepistaticlineargenomicmodel method)": [[752, "pybrops.model.gmod.AdditiveDominanceEpistaticLinearGenomicModel.AdditiveDominanceEpistaticLinearGenomicModel.dafixed"]], "dafreq() (pybrops.model.gmod.additivedominanceepistaticlineargenomicmodel.additivedominanceepistaticlineargenomicmodel method)": [[752, "pybrops.model.gmod.AdditiveDominanceEpistaticLinearGenomicModel.AdditiveDominanceEpistaticLinearGenomicModel.dafreq"]], "deepcopy() (pybrops.model.gmod.additivedominanceepistaticlineargenomicmodel.additivedominanceepistaticlineargenomicmodel method)": [[752, "pybrops.model.gmod.AdditiveDominanceEpistaticLinearGenomicModel.AdditiveDominanceEpistaticLinearGenomicModel.deepcopy"]], "faavail() (pybrops.model.gmod.additivedominanceepistaticlineargenomicmodel.additivedominanceepistaticlineargenomicmodel method)": [[752, "pybrops.model.gmod.AdditiveDominanceEpistaticLinearGenomicModel.AdditiveDominanceEpistaticLinearGenomicModel.faavail"]], "facount() (pybrops.model.gmod.additivedominanceepistaticlineargenomicmodel.additivedominanceepistaticlineargenomicmodel method)": [[752, "pybrops.model.gmod.AdditiveDominanceEpistaticLinearGenomicModel.AdditiveDominanceEpistaticLinearGenomicModel.facount"]], "fafixed() (pybrops.model.gmod.additivedominanceepistaticlineargenomicmodel.additivedominanceepistaticlineargenomicmodel method)": [[752, "pybrops.model.gmod.AdditiveDominanceEpistaticLinearGenomicModel.AdditiveDominanceEpistaticLinearGenomicModel.fafixed"]], "fafreq() (pybrops.model.gmod.additivedominanceepistaticlineargenomicmodel.additivedominanceepistaticlineargenomicmodel method)": [[752, "pybrops.model.gmod.AdditiveDominanceEpistaticLinearGenomicModel.AdditiveDominanceEpistaticLinearGenomicModel.fafreq"]], "fit() (pybrops.model.gmod.additivedominanceepistaticlineargenomicmodel.additivedominanceepistaticlineargenomicmodel class method)": [[752, "pybrops.model.gmod.AdditiveDominanceEpistaticLinearGenomicModel.AdditiveDominanceEpistaticLinearGenomicModel.fit"]], "fit_numpy() (pybrops.model.gmod.additivedominanceepistaticlineargenomicmodel.additivedominanceepistaticlineargenomicmodel class method)": [[752, "pybrops.model.gmod.AdditiveDominanceEpistaticLinearGenomicModel.AdditiveDominanceEpistaticLinearGenomicModel.fit_numpy"]], "from_csv_dict() (pybrops.model.gmod.additivedominanceepistaticlineargenomicmodel.additivedominanceepistaticlineargenomicmodel class method)": [[752, "pybrops.model.gmod.AdditiveDominanceEpistaticLinearGenomicModel.AdditiveDominanceEpistaticLinearGenomicModel.from_csv_dict"]], "from_hdf5() (pybrops.model.gmod.additivedominanceepistaticlineargenomicmodel.additivedominanceepistaticlineargenomicmodel class method)": [[752, "pybrops.model.gmod.AdditiveDominanceEpistaticLinearGenomicModel.AdditiveDominanceEpistaticLinearGenomicModel.from_hdf5"]], "from_pandas_dict() (pybrops.model.gmod.additivedominanceepistaticlineargenomicmodel.additivedominanceepistaticlineargenomicmodel class method)": [[752, "pybrops.model.gmod.AdditiveDominanceEpistaticLinearGenomicModel.AdditiveDominanceEpistaticLinearGenomicModel.from_pandas_dict"]], "gebv() (pybrops.model.gmod.additivedominanceepistaticlineargenomicmodel.additivedominanceepistaticlineargenomicmodel method)": [[752, "pybrops.model.gmod.AdditiveDominanceEpistaticLinearGenomicModel.AdditiveDominanceEpistaticLinearGenomicModel.gebv"]], "gebv_numpy() (pybrops.model.gmod.additivedominanceepistaticlineargenomicmodel.additivedominanceepistaticlineargenomicmodel method)": [[752, "pybrops.model.gmod.AdditiveDominanceEpistaticLinearGenomicModel.AdditiveDominanceEpistaticLinearGenomicModel.gebv_numpy"]], "gegv() (pybrops.model.gmod.additivedominanceepistaticlineargenomicmodel.additivedominanceepistaticlineargenomicmodel method)": [[752, "pybrops.model.gmod.AdditiveDominanceEpistaticLinearGenomicModel.AdditiveDominanceEpistaticLinearGenomicModel.gegv"]], "gegv_numpy() (pybrops.model.gmod.additivedominanceepistaticlineargenomicmodel.additivedominanceepistaticlineargenomicmodel method)": [[752, "pybrops.model.gmod.AdditiveDominanceEpistaticLinearGenomicModel.AdditiveDominanceEpistaticLinearGenomicModel.gegv_numpy"]], "hyperparams (pybrops.model.gmod.additivedominanceepistaticlineargenomicmodel.additivedominanceepistaticlineargenomicmodel property)": [[752, "pybrops.model.gmod.AdditiveDominanceEpistaticLinearGenomicModel.AdditiveDominanceEpistaticLinearGenomicModel.hyperparams"]], "lsl() (pybrops.model.gmod.additivedominanceepistaticlineargenomicmodel.additivedominanceepistaticlineargenomicmodel method)": [[752, "pybrops.model.gmod.AdditiveDominanceEpistaticLinearGenomicModel.AdditiveDominanceEpistaticLinearGenomicModel.lsl"]], "lsl_numpy() (pybrops.model.gmod.additivedominanceepistaticlineargenomicmodel.additivedominanceepistaticlineargenomicmodel method)": [[752, "pybrops.model.gmod.AdditiveDominanceEpistaticLinearGenomicModel.AdditiveDominanceEpistaticLinearGenomicModel.lsl_numpy"]], "model_name (pybrops.model.gmod.additivedominanceepistaticlineargenomicmodel.additivedominanceepistaticlineargenomicmodel property)": [[752, "pybrops.model.gmod.AdditiveDominanceEpistaticLinearGenomicModel.AdditiveDominanceEpistaticLinearGenomicModel.model_name"]], "nexplan (pybrops.model.gmod.additivedominanceepistaticlineargenomicmodel.additivedominanceepistaticlineargenomicmodel property)": [[752, "pybrops.model.gmod.AdditiveDominanceEpistaticLinearGenomicModel.AdditiveDominanceEpistaticLinearGenomicModel.nexplan"]], "nexplan_beta (pybrops.model.gmod.additivedominanceepistaticlineargenomicmodel.additivedominanceepistaticlineargenomicmodel property)": [[752, "pybrops.model.gmod.AdditiveDominanceEpistaticLinearGenomicModel.AdditiveDominanceEpistaticLinearGenomicModel.nexplan_beta"]], "nexplan_u (pybrops.model.gmod.additivedominanceepistaticlineargenomicmodel.additivedominanceepistaticlineargenomicmodel property)": [[752, "pybrops.model.gmod.AdditiveDominanceEpistaticLinearGenomicModel.AdditiveDominanceEpistaticLinearGenomicModel.nexplan_u"]], "nexplan_u_a (pybrops.model.gmod.additivedominanceepistaticlineargenomicmodel.additivedominanceepistaticlineargenomicmodel property)": [[752, "pybrops.model.gmod.AdditiveDominanceEpistaticLinearGenomicModel.AdditiveDominanceEpistaticLinearGenomicModel.nexplan_u_a"]], "nexplan_u_d (pybrops.model.gmod.additivedominanceepistaticlineargenomicmodel.additivedominanceepistaticlineargenomicmodel property)": [[752, "pybrops.model.gmod.AdditiveDominanceEpistaticLinearGenomicModel.AdditiveDominanceEpistaticLinearGenomicModel.nexplan_u_d"]], "nexplan_u_i (pybrops.model.gmod.additivedominanceepistaticlineargenomicmodel.additivedominanceepistaticlineargenomicmodel property)": [[752, "pybrops.model.gmod.AdditiveDominanceEpistaticLinearGenomicModel.AdditiveDominanceEpistaticLinearGenomicModel.nexplan_u_i"]], "nexplan_u_misc (pybrops.model.gmod.additivedominanceepistaticlineargenomicmodel.additivedominanceepistaticlineargenomicmodel property)": [[752, "pybrops.model.gmod.AdditiveDominanceEpistaticLinearGenomicModel.AdditiveDominanceEpistaticLinearGenomicModel.nexplan_u_misc"]], "nparam (pybrops.model.gmod.additivedominanceepistaticlineargenomicmodel.additivedominanceepistaticlineargenomicmodel property)": [[752, "pybrops.model.gmod.AdditiveDominanceEpistaticLinearGenomicModel.AdditiveDominanceEpistaticLinearGenomicModel.nparam"]], "nparam_beta (pybrops.model.gmod.additivedominanceepistaticlineargenomicmodel.additivedominanceepistaticlineargenomicmodel property)": [[752, "pybrops.model.gmod.AdditiveDominanceEpistaticLinearGenomicModel.AdditiveDominanceEpistaticLinearGenomicModel.nparam_beta"]], "nparam_u (pybrops.model.gmod.additivedominanceepistaticlineargenomicmodel.additivedominanceepistaticlineargenomicmodel property)": [[752, "pybrops.model.gmod.AdditiveDominanceEpistaticLinearGenomicModel.AdditiveDominanceEpistaticLinearGenomicModel.nparam_u"]], "nparam_u_a (pybrops.model.gmod.additivedominanceepistaticlineargenomicmodel.additivedominanceepistaticlineargenomicmodel property)": [[752, "pybrops.model.gmod.AdditiveDominanceEpistaticLinearGenomicModel.AdditiveDominanceEpistaticLinearGenomicModel.nparam_u_a"]], "nparam_u_d (pybrops.model.gmod.additivedominanceepistaticlineargenomicmodel.additivedominanceepistaticlineargenomicmodel property)": [[752, "pybrops.model.gmod.AdditiveDominanceEpistaticLinearGenomicModel.AdditiveDominanceEpistaticLinearGenomicModel.nparam_u_d"]], "nparam_u_i (pybrops.model.gmod.additivedominanceepistaticlineargenomicmodel.additivedominanceepistaticlineargenomicmodel property)": [[752, "pybrops.model.gmod.AdditiveDominanceEpistaticLinearGenomicModel.AdditiveDominanceEpistaticLinearGenomicModel.nparam_u_i"]], "nparam_u_misc (pybrops.model.gmod.additivedominanceepistaticlineargenomicmodel.additivedominanceepistaticlineargenomicmodel property)": [[752, "pybrops.model.gmod.AdditiveDominanceEpistaticLinearGenomicModel.AdditiveDominanceEpistaticLinearGenomicModel.nparam_u_misc"]], "ntrait (pybrops.model.gmod.additivedominanceepistaticlineargenomicmodel.additivedominanceepistaticlineargenomicmodel property)": [[752, "pybrops.model.gmod.AdditiveDominanceEpistaticLinearGenomicModel.AdditiveDominanceEpistaticLinearGenomicModel.ntrait"]], "predict() (pybrops.model.gmod.additivedominanceepistaticlineargenomicmodel.additivedominanceepistaticlineargenomicmodel method)": [[752, "pybrops.model.gmod.AdditiveDominanceEpistaticLinearGenomicModel.AdditiveDominanceEpistaticLinearGenomicModel.predict"]], "predict_numpy() (pybrops.model.gmod.additivedominanceepistaticlineargenomicmodel.additivedominanceepistaticlineargenomicmodel method)": [[752, "pybrops.model.gmod.AdditiveDominanceEpistaticLinearGenomicModel.AdditiveDominanceEpistaticLinearGenomicModel.predict_numpy"]], "score() (pybrops.model.gmod.additivedominanceepistaticlineargenomicmodel.additivedominanceepistaticlineargenomicmodel method)": [[752, "pybrops.model.gmod.AdditiveDominanceEpistaticLinearGenomicModel.AdditiveDominanceEpistaticLinearGenomicModel.score"]], "score_numpy() (pybrops.model.gmod.additivedominanceepistaticlineargenomicmodel.additivedominanceepistaticlineargenomicmodel method)": [[752, "pybrops.model.gmod.AdditiveDominanceEpistaticLinearGenomicModel.AdditiveDominanceEpistaticLinearGenomicModel.score_numpy"]], "to_csv_dict() (pybrops.model.gmod.additivedominanceepistaticlineargenomicmodel.additivedominanceepistaticlineargenomicmodel method)": [[752, "pybrops.model.gmod.AdditiveDominanceEpistaticLinearGenomicModel.AdditiveDominanceEpistaticLinearGenomicModel.to_csv_dict"]], "to_hdf5() (pybrops.model.gmod.additivedominanceepistaticlineargenomicmodel.additivedominanceepistaticlineargenomicmodel method)": [[752, "pybrops.model.gmod.AdditiveDominanceEpistaticLinearGenomicModel.AdditiveDominanceEpistaticLinearGenomicModel.to_hdf5"]], "to_pandas_dict() (pybrops.model.gmod.additivedominanceepistaticlineargenomicmodel.additivedominanceepistaticlineargenomicmodel method)": [[752, "pybrops.model.gmod.AdditiveDominanceEpistaticLinearGenomicModel.AdditiveDominanceEpistaticLinearGenomicModel.to_pandas_dict"]], "trait (pybrops.model.gmod.additivedominanceepistaticlineargenomicmodel.additivedominanceepistaticlineargenomicmodel property)": [[752, "pybrops.model.gmod.AdditiveDominanceEpistaticLinearGenomicModel.AdditiveDominanceEpistaticLinearGenomicModel.trait"]], "u (pybrops.model.gmod.additivedominanceepistaticlineargenomicmodel.additivedominanceepistaticlineargenomicmodel property)": [[752, "pybrops.model.gmod.AdditiveDominanceEpistaticLinearGenomicModel.AdditiveDominanceEpistaticLinearGenomicModel.u"]], "u_a (pybrops.model.gmod.additivedominanceepistaticlineargenomicmodel.additivedominanceepistaticlineargenomicmodel property)": [[752, "pybrops.model.gmod.AdditiveDominanceEpistaticLinearGenomicModel.AdditiveDominanceEpistaticLinearGenomicModel.u_a"]], "u_d (pybrops.model.gmod.additivedominanceepistaticlineargenomicmodel.additivedominanceepistaticlineargenomicmodel property)": [[752, "pybrops.model.gmod.AdditiveDominanceEpistaticLinearGenomicModel.AdditiveDominanceEpistaticLinearGenomicModel.u_d"]], "u_i (pybrops.model.gmod.additivedominanceepistaticlineargenomicmodel.additivedominanceepistaticlineargenomicmodel property)": [[752, "pybrops.model.gmod.AdditiveDominanceEpistaticLinearGenomicModel.AdditiveDominanceEpistaticLinearGenomicModel.u_i"]], "u_misc (pybrops.model.gmod.additivedominanceepistaticlineargenomicmodel.additivedominanceepistaticlineargenomicmodel property)": [[752, "pybrops.model.gmod.AdditiveDominanceEpistaticLinearGenomicModel.AdditiveDominanceEpistaticLinearGenomicModel.u_misc"]], "usl() (pybrops.model.gmod.additivedominanceepistaticlineargenomicmodel.additivedominanceepistaticlineargenomicmodel method)": [[752, "pybrops.model.gmod.AdditiveDominanceEpistaticLinearGenomicModel.AdditiveDominanceEpistaticLinearGenomicModel.usl"]], "usl_numpy() (pybrops.model.gmod.additivedominanceepistaticlineargenomicmodel.additivedominanceepistaticlineargenomicmodel method)": [[752, "pybrops.model.gmod.AdditiveDominanceEpistaticLinearGenomicModel.AdditiveDominanceEpistaticLinearGenomicModel.usl_numpy"]], "var_a() (pybrops.model.gmod.additivedominanceepistaticlineargenomicmodel.additivedominanceepistaticlineargenomicmodel method)": [[752, "pybrops.model.gmod.AdditiveDominanceEpistaticLinearGenomicModel.AdditiveDominanceEpistaticLinearGenomicModel.var_A"], [752, "pybrops.model.gmod.AdditiveDominanceEpistaticLinearGenomicModel.AdditiveDominanceEpistaticLinearGenomicModel.var_a"]], "var_a_numpy() (pybrops.model.gmod.additivedominanceepistaticlineargenomicmodel.additivedominanceepistaticlineargenomicmodel method)": [[752, "pybrops.model.gmod.AdditiveDominanceEpistaticLinearGenomicModel.AdditiveDominanceEpistaticLinearGenomicModel.var_A_numpy"], [752, "pybrops.model.gmod.AdditiveDominanceEpistaticLinearGenomicModel.AdditiveDominanceEpistaticLinearGenomicModel.var_a_numpy"]], "var_g() (pybrops.model.gmod.additivedominanceepistaticlineargenomicmodel.additivedominanceepistaticlineargenomicmodel method)": [[752, "pybrops.model.gmod.AdditiveDominanceEpistaticLinearGenomicModel.AdditiveDominanceEpistaticLinearGenomicModel.var_G"]], "var_g_numpy() (pybrops.model.gmod.additivedominanceepistaticlineargenomicmodel.additivedominanceepistaticlineargenomicmodel method)": [[752, "pybrops.model.gmod.AdditiveDominanceEpistaticLinearGenomicModel.AdditiveDominanceEpistaticLinearGenomicModel.var_G_numpy"]], "check_is_additivedominanceepistaticlineargenomicmodel() (in module pybrops.model.gmod.additivedominanceepistaticlineargenomicmodel)": [[753, "pybrops.model.gmod.AdditiveDominanceEpistaticLinearGenomicModel.check_is_AdditiveDominanceEpistaticLinearGenomicModel"]], "pybrops.model.gmod.additivedominancelineargenomicmodel": [[754, "module-pybrops.model.gmod.AdditiveDominanceLinearGenomicModel"]], "additivedominancelineargenomicmodel (class in pybrops.model.gmod.additivedominancelineargenomicmodel)": [[755, "pybrops.model.gmod.AdditiveDominanceLinearGenomicModel.AdditiveDominanceLinearGenomicModel"]], "beta (pybrops.model.gmod.additivedominancelineargenomicmodel.additivedominancelineargenomicmodel property)": [[755, "pybrops.model.gmod.AdditiveDominanceLinearGenomicModel.AdditiveDominanceLinearGenomicModel.beta"]], "bulmer() (pybrops.model.gmod.additivedominancelineargenomicmodel.additivedominancelineargenomicmodel method)": [[755, "pybrops.model.gmod.AdditiveDominanceLinearGenomicModel.AdditiveDominanceLinearGenomicModel.bulmer"]], "bulmer_numpy() (pybrops.model.gmod.additivedominancelineargenomicmodel.additivedominancelineargenomicmodel method)": [[755, "pybrops.model.gmod.AdditiveDominanceLinearGenomicModel.AdditiveDominanceLinearGenomicModel.bulmer_numpy"]], "copy() (pybrops.model.gmod.additivedominancelineargenomicmodel.additivedominancelineargenomicmodel method)": [[755, "pybrops.model.gmod.AdditiveDominanceLinearGenomicModel.AdditiveDominanceLinearGenomicModel.copy"]], "daavail() (pybrops.model.gmod.additivedominancelineargenomicmodel.additivedominancelineargenomicmodel method)": [[755, "pybrops.model.gmod.AdditiveDominanceLinearGenomicModel.AdditiveDominanceLinearGenomicModel.daavail"]], "dacount() (pybrops.model.gmod.additivedominancelineargenomicmodel.additivedominancelineargenomicmodel method)": [[755, "pybrops.model.gmod.AdditiveDominanceLinearGenomicModel.AdditiveDominanceLinearGenomicModel.dacount"]], "dafixed() (pybrops.model.gmod.additivedominancelineargenomicmodel.additivedominancelineargenomicmodel method)": [[755, "pybrops.model.gmod.AdditiveDominanceLinearGenomicModel.AdditiveDominanceLinearGenomicModel.dafixed"]], "dafreq() (pybrops.model.gmod.additivedominancelineargenomicmodel.additivedominancelineargenomicmodel method)": [[755, "pybrops.model.gmod.AdditiveDominanceLinearGenomicModel.AdditiveDominanceLinearGenomicModel.dafreq"]], "deepcopy() (pybrops.model.gmod.additivedominancelineargenomicmodel.additivedominancelineargenomicmodel method)": [[755, "pybrops.model.gmod.AdditiveDominanceLinearGenomicModel.AdditiveDominanceLinearGenomicModel.deepcopy"]], "faavail() (pybrops.model.gmod.additivedominancelineargenomicmodel.additivedominancelineargenomicmodel method)": [[755, "pybrops.model.gmod.AdditiveDominanceLinearGenomicModel.AdditiveDominanceLinearGenomicModel.faavail"]], "facount() (pybrops.model.gmod.additivedominancelineargenomicmodel.additivedominancelineargenomicmodel method)": [[755, "pybrops.model.gmod.AdditiveDominanceLinearGenomicModel.AdditiveDominanceLinearGenomicModel.facount"]], "fafixed() (pybrops.model.gmod.additivedominancelineargenomicmodel.additivedominancelineargenomicmodel method)": [[755, "pybrops.model.gmod.AdditiveDominanceLinearGenomicModel.AdditiveDominanceLinearGenomicModel.fafixed"]], "fafreq() (pybrops.model.gmod.additivedominancelineargenomicmodel.additivedominancelineargenomicmodel method)": [[755, "pybrops.model.gmod.AdditiveDominanceLinearGenomicModel.AdditiveDominanceLinearGenomicModel.fafreq"]], "fit() (pybrops.model.gmod.additivedominancelineargenomicmodel.additivedominancelineargenomicmodel class method)": [[755, "pybrops.model.gmod.AdditiveDominanceLinearGenomicModel.AdditiveDominanceLinearGenomicModel.fit"]], "fit_numpy() (pybrops.model.gmod.additivedominancelineargenomicmodel.additivedominancelineargenomicmodel class method)": [[755, "pybrops.model.gmod.AdditiveDominanceLinearGenomicModel.AdditiveDominanceLinearGenomicModel.fit_numpy"]], "from_csv_dict() (pybrops.model.gmod.additivedominancelineargenomicmodel.additivedominancelineargenomicmodel class method)": [[755, "pybrops.model.gmod.AdditiveDominanceLinearGenomicModel.AdditiveDominanceLinearGenomicModel.from_csv_dict"]], "from_hdf5() (pybrops.model.gmod.additivedominancelineargenomicmodel.additivedominancelineargenomicmodel class method)": [[755, "pybrops.model.gmod.AdditiveDominanceLinearGenomicModel.AdditiveDominanceLinearGenomicModel.from_hdf5"]], "from_pandas_dict() (pybrops.model.gmod.additivedominancelineargenomicmodel.additivedominancelineargenomicmodel class method)": [[755, "pybrops.model.gmod.AdditiveDominanceLinearGenomicModel.AdditiveDominanceLinearGenomicModel.from_pandas_dict"]], "gebv() (pybrops.model.gmod.additivedominancelineargenomicmodel.additivedominancelineargenomicmodel method)": [[755, "pybrops.model.gmod.AdditiveDominanceLinearGenomicModel.AdditiveDominanceLinearGenomicModel.gebv"]], "gebv_numpy() (pybrops.model.gmod.additivedominancelineargenomicmodel.additivedominancelineargenomicmodel method)": [[755, "pybrops.model.gmod.AdditiveDominanceLinearGenomicModel.AdditiveDominanceLinearGenomicModel.gebv_numpy"]], "gegv() (pybrops.model.gmod.additivedominancelineargenomicmodel.additivedominancelineargenomicmodel method)": [[755, "pybrops.model.gmod.AdditiveDominanceLinearGenomicModel.AdditiveDominanceLinearGenomicModel.gegv"]], "gegv_numpy() (pybrops.model.gmod.additivedominancelineargenomicmodel.additivedominancelineargenomicmodel method)": [[755, "pybrops.model.gmod.AdditiveDominanceLinearGenomicModel.AdditiveDominanceLinearGenomicModel.gegv_numpy"]], "hyperparams (pybrops.model.gmod.additivedominancelineargenomicmodel.additivedominancelineargenomicmodel property)": [[755, "pybrops.model.gmod.AdditiveDominanceLinearGenomicModel.AdditiveDominanceLinearGenomicModel.hyperparams"]], "lsl() (pybrops.model.gmod.additivedominancelineargenomicmodel.additivedominancelineargenomicmodel method)": [[755, "pybrops.model.gmod.AdditiveDominanceLinearGenomicModel.AdditiveDominanceLinearGenomicModel.lsl"]], "lsl_numpy() (pybrops.model.gmod.additivedominancelineargenomicmodel.additivedominancelineargenomicmodel method)": [[755, "pybrops.model.gmod.AdditiveDominanceLinearGenomicModel.AdditiveDominanceLinearGenomicModel.lsl_numpy"]], "model_name (pybrops.model.gmod.additivedominancelineargenomicmodel.additivedominancelineargenomicmodel property)": [[755, "pybrops.model.gmod.AdditiveDominanceLinearGenomicModel.AdditiveDominanceLinearGenomicModel.model_name"]], "nexplan (pybrops.model.gmod.additivedominancelineargenomicmodel.additivedominancelineargenomicmodel property)": [[755, "pybrops.model.gmod.AdditiveDominanceLinearGenomicModel.AdditiveDominanceLinearGenomicModel.nexplan"]], "nexplan_beta (pybrops.model.gmod.additivedominancelineargenomicmodel.additivedominancelineargenomicmodel property)": [[755, "pybrops.model.gmod.AdditiveDominanceLinearGenomicModel.AdditiveDominanceLinearGenomicModel.nexplan_beta"]], "nexplan_u (pybrops.model.gmod.additivedominancelineargenomicmodel.additivedominancelineargenomicmodel property)": [[755, "pybrops.model.gmod.AdditiveDominanceLinearGenomicModel.AdditiveDominanceLinearGenomicModel.nexplan_u"]], "nexplan_u_a (pybrops.model.gmod.additivedominancelineargenomicmodel.additivedominancelineargenomicmodel property)": [[755, "pybrops.model.gmod.AdditiveDominanceLinearGenomicModel.AdditiveDominanceLinearGenomicModel.nexplan_u_a"]], "nexplan_u_d (pybrops.model.gmod.additivedominancelineargenomicmodel.additivedominancelineargenomicmodel property)": [[755, "pybrops.model.gmod.AdditiveDominanceLinearGenomicModel.AdditiveDominanceLinearGenomicModel.nexplan_u_d"]], "nexplan_u_misc (pybrops.model.gmod.additivedominancelineargenomicmodel.additivedominancelineargenomicmodel property)": [[755, "pybrops.model.gmod.AdditiveDominanceLinearGenomicModel.AdditiveDominanceLinearGenomicModel.nexplan_u_misc"]], "nparam (pybrops.model.gmod.additivedominancelineargenomicmodel.additivedominancelineargenomicmodel property)": [[755, "pybrops.model.gmod.AdditiveDominanceLinearGenomicModel.AdditiveDominanceLinearGenomicModel.nparam"]], "nparam_beta (pybrops.model.gmod.additivedominancelineargenomicmodel.additivedominancelineargenomicmodel property)": [[755, "pybrops.model.gmod.AdditiveDominanceLinearGenomicModel.AdditiveDominanceLinearGenomicModel.nparam_beta"]], "nparam_u (pybrops.model.gmod.additivedominancelineargenomicmodel.additivedominancelineargenomicmodel property)": [[755, "pybrops.model.gmod.AdditiveDominanceLinearGenomicModel.AdditiveDominanceLinearGenomicModel.nparam_u"]], "nparam_u_a (pybrops.model.gmod.additivedominancelineargenomicmodel.additivedominancelineargenomicmodel property)": [[755, "pybrops.model.gmod.AdditiveDominanceLinearGenomicModel.AdditiveDominanceLinearGenomicModel.nparam_u_a"]], "nparam_u_d (pybrops.model.gmod.additivedominancelineargenomicmodel.additivedominancelineargenomicmodel property)": [[755, "pybrops.model.gmod.AdditiveDominanceLinearGenomicModel.AdditiveDominanceLinearGenomicModel.nparam_u_d"]], "nparam_u_misc (pybrops.model.gmod.additivedominancelineargenomicmodel.additivedominancelineargenomicmodel property)": [[755, "pybrops.model.gmod.AdditiveDominanceLinearGenomicModel.AdditiveDominanceLinearGenomicModel.nparam_u_misc"]], "ntrait (pybrops.model.gmod.additivedominancelineargenomicmodel.additivedominancelineargenomicmodel property)": [[755, "pybrops.model.gmod.AdditiveDominanceLinearGenomicModel.AdditiveDominanceLinearGenomicModel.ntrait"]], "predict() (pybrops.model.gmod.additivedominancelineargenomicmodel.additivedominancelineargenomicmodel method)": [[755, "pybrops.model.gmod.AdditiveDominanceLinearGenomicModel.AdditiveDominanceLinearGenomicModel.predict"]], "predict_numpy() (pybrops.model.gmod.additivedominancelineargenomicmodel.additivedominancelineargenomicmodel method)": [[755, "pybrops.model.gmod.AdditiveDominanceLinearGenomicModel.AdditiveDominanceLinearGenomicModel.predict_numpy"]], "score() (pybrops.model.gmod.additivedominancelineargenomicmodel.additivedominancelineargenomicmodel method)": [[755, "pybrops.model.gmod.AdditiveDominanceLinearGenomicModel.AdditiveDominanceLinearGenomicModel.score"]], "score_numpy() (pybrops.model.gmod.additivedominancelineargenomicmodel.additivedominancelineargenomicmodel method)": [[755, "pybrops.model.gmod.AdditiveDominanceLinearGenomicModel.AdditiveDominanceLinearGenomicModel.score_numpy"]], "to_csv_dict() (pybrops.model.gmod.additivedominancelineargenomicmodel.additivedominancelineargenomicmodel method)": [[755, "pybrops.model.gmod.AdditiveDominanceLinearGenomicModel.AdditiveDominanceLinearGenomicModel.to_csv_dict"]], "to_hdf5() (pybrops.model.gmod.additivedominancelineargenomicmodel.additivedominancelineargenomicmodel method)": [[755, "pybrops.model.gmod.AdditiveDominanceLinearGenomicModel.AdditiveDominanceLinearGenomicModel.to_hdf5"]], "to_pandas_dict() (pybrops.model.gmod.additivedominancelineargenomicmodel.additivedominancelineargenomicmodel method)": [[755, "pybrops.model.gmod.AdditiveDominanceLinearGenomicModel.AdditiveDominanceLinearGenomicModel.to_pandas_dict"]], "trait (pybrops.model.gmod.additivedominancelineargenomicmodel.additivedominancelineargenomicmodel property)": [[755, "pybrops.model.gmod.AdditiveDominanceLinearGenomicModel.AdditiveDominanceLinearGenomicModel.trait"]], "u (pybrops.model.gmod.additivedominancelineargenomicmodel.additivedominancelineargenomicmodel property)": [[755, "pybrops.model.gmod.AdditiveDominanceLinearGenomicModel.AdditiveDominanceLinearGenomicModel.u"]], "u_a (pybrops.model.gmod.additivedominancelineargenomicmodel.additivedominancelineargenomicmodel property)": [[755, "pybrops.model.gmod.AdditiveDominanceLinearGenomicModel.AdditiveDominanceLinearGenomicModel.u_a"]], "u_d (pybrops.model.gmod.additivedominancelineargenomicmodel.additivedominancelineargenomicmodel property)": [[755, "pybrops.model.gmod.AdditiveDominanceLinearGenomicModel.AdditiveDominanceLinearGenomicModel.u_d"]], "u_misc (pybrops.model.gmod.additivedominancelineargenomicmodel.additivedominancelineargenomicmodel property)": [[755, "pybrops.model.gmod.AdditiveDominanceLinearGenomicModel.AdditiveDominanceLinearGenomicModel.u_misc"]], "usl() (pybrops.model.gmod.additivedominancelineargenomicmodel.additivedominancelineargenomicmodel method)": [[755, "pybrops.model.gmod.AdditiveDominanceLinearGenomicModel.AdditiveDominanceLinearGenomicModel.usl"]], "usl_numpy() (pybrops.model.gmod.additivedominancelineargenomicmodel.additivedominancelineargenomicmodel method)": [[755, "pybrops.model.gmod.AdditiveDominanceLinearGenomicModel.AdditiveDominanceLinearGenomicModel.usl_numpy"]], "var_a() (pybrops.model.gmod.additivedominancelineargenomicmodel.additivedominancelineargenomicmodel method)": [[755, "pybrops.model.gmod.AdditiveDominanceLinearGenomicModel.AdditiveDominanceLinearGenomicModel.var_A"], [755, "pybrops.model.gmod.AdditiveDominanceLinearGenomicModel.AdditiveDominanceLinearGenomicModel.var_a"]], "var_a_numpy() (pybrops.model.gmod.additivedominancelineargenomicmodel.additivedominancelineargenomicmodel method)": [[755, "pybrops.model.gmod.AdditiveDominanceLinearGenomicModel.AdditiveDominanceLinearGenomicModel.var_A_numpy"], [755, "pybrops.model.gmod.AdditiveDominanceLinearGenomicModel.AdditiveDominanceLinearGenomicModel.var_a_numpy"]], "var_g() (pybrops.model.gmod.additivedominancelineargenomicmodel.additivedominancelineargenomicmodel method)": [[755, "pybrops.model.gmod.AdditiveDominanceLinearGenomicModel.AdditiveDominanceLinearGenomicModel.var_G"]], "var_g_numpy() (pybrops.model.gmod.additivedominancelineargenomicmodel.additivedominancelineargenomicmodel method)": [[755, "pybrops.model.gmod.AdditiveDominanceLinearGenomicModel.AdditiveDominanceLinearGenomicModel.var_G_numpy"]], "check_is_additivedominancelineargenomicmodel() (in module pybrops.model.gmod.additivedominancelineargenomicmodel)": [[756, "pybrops.model.gmod.AdditiveDominanceLinearGenomicModel.check_is_AdditiveDominanceLinearGenomicModel"]], "pybrops.model.gmod.additivelineargenomicmodel": [[757, "module-pybrops.model.gmod.AdditiveLinearGenomicModel"]], "additivelineargenomicmodel (class in pybrops.model.gmod.additivelineargenomicmodel)": [[758, "pybrops.model.gmod.AdditiveLinearGenomicModel.AdditiveLinearGenomicModel"]], "beta (pybrops.model.gmod.additivelineargenomicmodel.additivelineargenomicmodel property)": [[758, "pybrops.model.gmod.AdditiveLinearGenomicModel.AdditiveLinearGenomicModel.beta"]], "bulmer() (pybrops.model.gmod.additivelineargenomicmodel.additivelineargenomicmodel method)": [[758, "pybrops.model.gmod.AdditiveLinearGenomicModel.AdditiveLinearGenomicModel.bulmer"]], "bulmer_numpy() (pybrops.model.gmod.additivelineargenomicmodel.additivelineargenomicmodel method)": [[758, "pybrops.model.gmod.AdditiveLinearGenomicModel.AdditiveLinearGenomicModel.bulmer_numpy"]], "copy() (pybrops.model.gmod.additivelineargenomicmodel.additivelineargenomicmodel method)": [[758, "pybrops.model.gmod.AdditiveLinearGenomicModel.AdditiveLinearGenomicModel.copy"]], "daavail() (pybrops.model.gmod.additivelineargenomicmodel.additivelineargenomicmodel method)": [[758, "pybrops.model.gmod.AdditiveLinearGenomicModel.AdditiveLinearGenomicModel.daavail"]], "dacount() (pybrops.model.gmod.additivelineargenomicmodel.additivelineargenomicmodel method)": [[758, "pybrops.model.gmod.AdditiveLinearGenomicModel.AdditiveLinearGenomicModel.dacount"]], "dafixed() (pybrops.model.gmod.additivelineargenomicmodel.additivelineargenomicmodel method)": [[758, "pybrops.model.gmod.AdditiveLinearGenomicModel.AdditiveLinearGenomicModel.dafixed"]], "dafreq() (pybrops.model.gmod.additivelineargenomicmodel.additivelineargenomicmodel method)": [[758, "pybrops.model.gmod.AdditiveLinearGenomicModel.AdditiveLinearGenomicModel.dafreq"]], "deepcopy() (pybrops.model.gmod.additivelineargenomicmodel.additivelineargenomicmodel method)": [[758, "pybrops.model.gmod.AdditiveLinearGenomicModel.AdditiveLinearGenomicModel.deepcopy"]], "faavail() (pybrops.model.gmod.additivelineargenomicmodel.additivelineargenomicmodel method)": [[758, "pybrops.model.gmod.AdditiveLinearGenomicModel.AdditiveLinearGenomicModel.faavail"]], "facount() (pybrops.model.gmod.additivelineargenomicmodel.additivelineargenomicmodel method)": [[758, "pybrops.model.gmod.AdditiveLinearGenomicModel.AdditiveLinearGenomicModel.facount"]], "fafixed() (pybrops.model.gmod.additivelineargenomicmodel.additivelineargenomicmodel method)": [[758, "pybrops.model.gmod.AdditiveLinearGenomicModel.AdditiveLinearGenomicModel.fafixed"]], "fafreq() (pybrops.model.gmod.additivelineargenomicmodel.additivelineargenomicmodel method)": [[758, "pybrops.model.gmod.AdditiveLinearGenomicModel.AdditiveLinearGenomicModel.fafreq"]], "fit() (pybrops.model.gmod.additivelineargenomicmodel.additivelineargenomicmodel class method)": [[758, "pybrops.model.gmod.AdditiveLinearGenomicModel.AdditiveLinearGenomicModel.fit"]], "fit_numpy() (pybrops.model.gmod.additivelineargenomicmodel.additivelineargenomicmodel class method)": [[758, "pybrops.model.gmod.AdditiveLinearGenomicModel.AdditiveLinearGenomicModel.fit_numpy"]], "from_csv_dict() (pybrops.model.gmod.additivelineargenomicmodel.additivelineargenomicmodel class method)": [[758, "pybrops.model.gmod.AdditiveLinearGenomicModel.AdditiveLinearGenomicModel.from_csv_dict"]], "from_hdf5() (pybrops.model.gmod.additivelineargenomicmodel.additivelineargenomicmodel class method)": [[758, "pybrops.model.gmod.AdditiveLinearGenomicModel.AdditiveLinearGenomicModel.from_hdf5"]], "from_pandas_dict() (pybrops.model.gmod.additivelineargenomicmodel.additivelineargenomicmodel class method)": [[758, "pybrops.model.gmod.AdditiveLinearGenomicModel.AdditiveLinearGenomicModel.from_pandas_dict"]], "gebv() (pybrops.model.gmod.additivelineargenomicmodel.additivelineargenomicmodel method)": [[758, "pybrops.model.gmod.AdditiveLinearGenomicModel.AdditiveLinearGenomicModel.gebv"]], "gebv_numpy() (pybrops.model.gmod.additivelineargenomicmodel.additivelineargenomicmodel method)": [[758, "pybrops.model.gmod.AdditiveLinearGenomicModel.AdditiveLinearGenomicModel.gebv_numpy"]], "gegv() (pybrops.model.gmod.additivelineargenomicmodel.additivelineargenomicmodel method)": [[758, "pybrops.model.gmod.AdditiveLinearGenomicModel.AdditiveLinearGenomicModel.gegv"]], "gegv_numpy() (pybrops.model.gmod.additivelineargenomicmodel.additivelineargenomicmodel method)": [[758, "pybrops.model.gmod.AdditiveLinearGenomicModel.AdditiveLinearGenomicModel.gegv_numpy"]], "hyperparams (pybrops.model.gmod.additivelineargenomicmodel.additivelineargenomicmodel property)": [[758, "pybrops.model.gmod.AdditiveLinearGenomicModel.AdditiveLinearGenomicModel.hyperparams"]], "lsl() (pybrops.model.gmod.additivelineargenomicmodel.additivelineargenomicmodel method)": [[758, "pybrops.model.gmod.AdditiveLinearGenomicModel.AdditiveLinearGenomicModel.lsl"]], "lsl_numpy() (pybrops.model.gmod.additivelineargenomicmodel.additivelineargenomicmodel method)": [[758, "pybrops.model.gmod.AdditiveLinearGenomicModel.AdditiveLinearGenomicModel.lsl_numpy"]], "model_name (pybrops.model.gmod.additivelineargenomicmodel.additivelineargenomicmodel property)": [[758, "pybrops.model.gmod.AdditiveLinearGenomicModel.AdditiveLinearGenomicModel.model_name"]], "nexplan (pybrops.model.gmod.additivelineargenomicmodel.additivelineargenomicmodel property)": [[758, "pybrops.model.gmod.AdditiveLinearGenomicModel.AdditiveLinearGenomicModel.nexplan"]], "nexplan_beta (pybrops.model.gmod.additivelineargenomicmodel.additivelineargenomicmodel property)": [[758, "pybrops.model.gmod.AdditiveLinearGenomicModel.AdditiveLinearGenomicModel.nexplan_beta"]], "nexplan_u (pybrops.model.gmod.additivelineargenomicmodel.additivelineargenomicmodel property)": [[758, "pybrops.model.gmod.AdditiveLinearGenomicModel.AdditiveLinearGenomicModel.nexplan_u"]], "nexplan_u_a (pybrops.model.gmod.additivelineargenomicmodel.additivelineargenomicmodel property)": [[758, "pybrops.model.gmod.AdditiveLinearGenomicModel.AdditiveLinearGenomicModel.nexplan_u_a"]], "nexplan_u_misc (pybrops.model.gmod.additivelineargenomicmodel.additivelineargenomicmodel property)": [[758, "pybrops.model.gmod.AdditiveLinearGenomicModel.AdditiveLinearGenomicModel.nexplan_u_misc"]], "nparam (pybrops.model.gmod.additivelineargenomicmodel.additivelineargenomicmodel property)": [[758, "pybrops.model.gmod.AdditiveLinearGenomicModel.AdditiveLinearGenomicModel.nparam"]], "nparam_beta (pybrops.model.gmod.additivelineargenomicmodel.additivelineargenomicmodel property)": [[758, "pybrops.model.gmod.AdditiveLinearGenomicModel.AdditiveLinearGenomicModel.nparam_beta"]], "nparam_u (pybrops.model.gmod.additivelineargenomicmodel.additivelineargenomicmodel property)": [[758, "pybrops.model.gmod.AdditiveLinearGenomicModel.AdditiveLinearGenomicModel.nparam_u"]], "nparam_u_a (pybrops.model.gmod.additivelineargenomicmodel.additivelineargenomicmodel property)": [[758, "pybrops.model.gmod.AdditiveLinearGenomicModel.AdditiveLinearGenomicModel.nparam_u_a"]], "nparam_u_misc (pybrops.model.gmod.additivelineargenomicmodel.additivelineargenomicmodel property)": [[758, "pybrops.model.gmod.AdditiveLinearGenomicModel.AdditiveLinearGenomicModel.nparam_u_misc"]], "ntrait (pybrops.model.gmod.additivelineargenomicmodel.additivelineargenomicmodel property)": [[758, "pybrops.model.gmod.AdditiveLinearGenomicModel.AdditiveLinearGenomicModel.ntrait"]], "predict() (pybrops.model.gmod.additivelineargenomicmodel.additivelineargenomicmodel method)": [[758, "pybrops.model.gmod.AdditiveLinearGenomicModel.AdditiveLinearGenomicModel.predict"]], "predict_numpy() (pybrops.model.gmod.additivelineargenomicmodel.additivelineargenomicmodel method)": [[758, "pybrops.model.gmod.AdditiveLinearGenomicModel.AdditiveLinearGenomicModel.predict_numpy"]], "score() (pybrops.model.gmod.additivelineargenomicmodel.additivelineargenomicmodel method)": [[758, "pybrops.model.gmod.AdditiveLinearGenomicModel.AdditiveLinearGenomicModel.score"]], "score_numpy() (pybrops.model.gmod.additivelineargenomicmodel.additivelineargenomicmodel method)": [[758, "pybrops.model.gmod.AdditiveLinearGenomicModel.AdditiveLinearGenomicModel.score_numpy"]], "to_csv_dict() (pybrops.model.gmod.additivelineargenomicmodel.additivelineargenomicmodel method)": [[758, "pybrops.model.gmod.AdditiveLinearGenomicModel.AdditiveLinearGenomicModel.to_csv_dict"]], "to_hdf5() (pybrops.model.gmod.additivelineargenomicmodel.additivelineargenomicmodel method)": [[758, "pybrops.model.gmod.AdditiveLinearGenomicModel.AdditiveLinearGenomicModel.to_hdf5"]], "to_pandas_dict() (pybrops.model.gmod.additivelineargenomicmodel.additivelineargenomicmodel method)": [[758, "pybrops.model.gmod.AdditiveLinearGenomicModel.AdditiveLinearGenomicModel.to_pandas_dict"]], "trait (pybrops.model.gmod.additivelineargenomicmodel.additivelineargenomicmodel property)": [[758, "pybrops.model.gmod.AdditiveLinearGenomicModel.AdditiveLinearGenomicModel.trait"]], "u (pybrops.model.gmod.additivelineargenomicmodel.additivelineargenomicmodel property)": [[758, "pybrops.model.gmod.AdditiveLinearGenomicModel.AdditiveLinearGenomicModel.u"]], "u_a (pybrops.model.gmod.additivelineargenomicmodel.additivelineargenomicmodel property)": [[758, "pybrops.model.gmod.AdditiveLinearGenomicModel.AdditiveLinearGenomicModel.u_a"]], "u_misc (pybrops.model.gmod.additivelineargenomicmodel.additivelineargenomicmodel property)": [[758, "pybrops.model.gmod.AdditiveLinearGenomicModel.AdditiveLinearGenomicModel.u_misc"]], "usl() (pybrops.model.gmod.additivelineargenomicmodel.additivelineargenomicmodel method)": [[758, "pybrops.model.gmod.AdditiveLinearGenomicModel.AdditiveLinearGenomicModel.usl"]], "usl_numpy() (pybrops.model.gmod.additivelineargenomicmodel.additivelineargenomicmodel method)": [[758, "pybrops.model.gmod.AdditiveLinearGenomicModel.AdditiveLinearGenomicModel.usl_numpy"]], "var_a() (pybrops.model.gmod.additivelineargenomicmodel.additivelineargenomicmodel method)": [[758, "pybrops.model.gmod.AdditiveLinearGenomicModel.AdditiveLinearGenomicModel.var_A"], [758, "pybrops.model.gmod.AdditiveLinearGenomicModel.AdditiveLinearGenomicModel.var_a"]], "var_a_numpy() (pybrops.model.gmod.additivelineargenomicmodel.additivelineargenomicmodel method)": [[758, "pybrops.model.gmod.AdditiveLinearGenomicModel.AdditiveLinearGenomicModel.var_A_numpy"], [758, "pybrops.model.gmod.AdditiveLinearGenomicModel.AdditiveLinearGenomicModel.var_a_numpy"]], "var_g() (pybrops.model.gmod.additivelineargenomicmodel.additivelineargenomicmodel method)": [[758, "pybrops.model.gmod.AdditiveLinearGenomicModel.AdditiveLinearGenomicModel.var_G"]], "var_g_numpy() (pybrops.model.gmod.additivelineargenomicmodel.additivelineargenomicmodel method)": [[758, "pybrops.model.gmod.AdditiveLinearGenomicModel.AdditiveLinearGenomicModel.var_G_numpy"]], "check_is_additivelineargenomicmodel() (in module pybrops.model.gmod.additivelineargenomicmodel)": [[759, "pybrops.model.gmod.AdditiveLinearGenomicModel.check_is_AdditiveLinearGenomicModel"]], "pybrops.model.gmod.coancestrylineargenomicmodel": [[760, "module-pybrops.model.gmod.CoancestryLinearGenomicModel"]], "coancestrylineargenomicmodel (class in pybrops.model.gmod.coancestrylineargenomicmodel)": [[761, "pybrops.model.gmod.CoancestryLinearGenomicModel.CoancestryLinearGenomicModel"]], "beta (pybrops.model.gmod.coancestrylineargenomicmodel.coancestrylineargenomicmodel property)": [[761, "pybrops.model.gmod.CoancestryLinearGenomicModel.CoancestryLinearGenomicModel.beta"]], "bulmer() (pybrops.model.gmod.coancestrylineargenomicmodel.coancestrylineargenomicmodel method)": [[761, "pybrops.model.gmod.CoancestryLinearGenomicModel.CoancestryLinearGenomicModel.bulmer"]], "bulmer_numpy() (pybrops.model.gmod.coancestrylineargenomicmodel.coancestrylineargenomicmodel method)": [[761, "pybrops.model.gmod.CoancestryLinearGenomicModel.CoancestryLinearGenomicModel.bulmer_numpy"]], "copy() (pybrops.model.gmod.coancestrylineargenomicmodel.coancestrylineargenomicmodel method)": [[761, "pybrops.model.gmod.CoancestryLinearGenomicModel.CoancestryLinearGenomicModel.copy"]], "daavail() (pybrops.model.gmod.coancestrylineargenomicmodel.coancestrylineargenomicmodel method)": [[761, "pybrops.model.gmod.CoancestryLinearGenomicModel.CoancestryLinearGenomicModel.daavail"]], "dacount() (pybrops.model.gmod.coancestrylineargenomicmodel.coancestrylineargenomicmodel method)": [[761, "pybrops.model.gmod.CoancestryLinearGenomicModel.CoancestryLinearGenomicModel.dacount"]], "dafixed() (pybrops.model.gmod.coancestrylineargenomicmodel.coancestrylineargenomicmodel method)": [[761, "pybrops.model.gmod.CoancestryLinearGenomicModel.CoancestryLinearGenomicModel.dafixed"]], "dafreq() (pybrops.model.gmod.coancestrylineargenomicmodel.coancestrylineargenomicmodel method)": [[761, "pybrops.model.gmod.CoancestryLinearGenomicModel.CoancestryLinearGenomicModel.dafreq"]], "deepcopy() (pybrops.model.gmod.coancestrylineargenomicmodel.coancestrylineargenomicmodel method)": [[761, "pybrops.model.gmod.CoancestryLinearGenomicModel.CoancestryLinearGenomicModel.deepcopy"]], "faavail() (pybrops.model.gmod.coancestrylineargenomicmodel.coancestrylineargenomicmodel method)": [[761, "pybrops.model.gmod.CoancestryLinearGenomicModel.CoancestryLinearGenomicModel.faavail"]], "facount() (pybrops.model.gmod.coancestrylineargenomicmodel.coancestrylineargenomicmodel method)": [[761, "pybrops.model.gmod.CoancestryLinearGenomicModel.CoancestryLinearGenomicModel.facount"]], "fafixed() (pybrops.model.gmod.coancestrylineargenomicmodel.coancestrylineargenomicmodel method)": [[761, "pybrops.model.gmod.CoancestryLinearGenomicModel.CoancestryLinearGenomicModel.fafixed"]], "fafreq() (pybrops.model.gmod.coancestrylineargenomicmodel.coancestrylineargenomicmodel method)": [[761, "pybrops.model.gmod.CoancestryLinearGenomicModel.CoancestryLinearGenomicModel.fafreq"]], "fit() (pybrops.model.gmod.coancestrylineargenomicmodel.coancestrylineargenomicmodel class method)": [[761, "pybrops.model.gmod.CoancestryLinearGenomicModel.CoancestryLinearGenomicModel.fit"]], "fit_numpy() (pybrops.model.gmod.coancestrylineargenomicmodel.coancestrylineargenomicmodel class method)": [[761, "pybrops.model.gmod.CoancestryLinearGenomicModel.CoancestryLinearGenomicModel.fit_numpy"]], "from_csv_dict() (pybrops.model.gmod.coancestrylineargenomicmodel.coancestrylineargenomicmodel class method)": [[761, "pybrops.model.gmod.CoancestryLinearGenomicModel.CoancestryLinearGenomicModel.from_csv_dict"]], "from_hdf5() (pybrops.model.gmod.coancestrylineargenomicmodel.coancestrylineargenomicmodel class method)": [[761, "pybrops.model.gmod.CoancestryLinearGenomicModel.CoancestryLinearGenomicModel.from_hdf5"]], "from_pandas_dict() (pybrops.model.gmod.coancestrylineargenomicmodel.coancestrylineargenomicmodel class method)": [[761, "pybrops.model.gmod.CoancestryLinearGenomicModel.CoancestryLinearGenomicModel.from_pandas_dict"]], "gebv() (pybrops.model.gmod.coancestrylineargenomicmodel.coancestrylineargenomicmodel method)": [[761, "pybrops.model.gmod.CoancestryLinearGenomicModel.CoancestryLinearGenomicModel.gebv"]], "gebv_numpy() (pybrops.model.gmod.coancestrylineargenomicmodel.coancestrylineargenomicmodel method)": [[761, "pybrops.model.gmod.CoancestryLinearGenomicModel.CoancestryLinearGenomicModel.gebv_numpy"]], "gegv() (pybrops.model.gmod.coancestrylineargenomicmodel.coancestrylineargenomicmodel method)": [[761, "pybrops.model.gmod.CoancestryLinearGenomicModel.CoancestryLinearGenomicModel.gegv"]], "gegv_numpy() (pybrops.model.gmod.coancestrylineargenomicmodel.coancestrylineargenomicmodel method)": [[761, "pybrops.model.gmod.CoancestryLinearGenomicModel.CoancestryLinearGenomicModel.gegv_numpy"]], "hyperparams (pybrops.model.gmod.coancestrylineargenomicmodel.coancestrylineargenomicmodel property)": [[761, "pybrops.model.gmod.CoancestryLinearGenomicModel.CoancestryLinearGenomicModel.hyperparams"]], "lsl() (pybrops.model.gmod.coancestrylineargenomicmodel.coancestrylineargenomicmodel method)": [[761, "pybrops.model.gmod.CoancestryLinearGenomicModel.CoancestryLinearGenomicModel.lsl"]], "lsl_numpy() (pybrops.model.gmod.coancestrylineargenomicmodel.coancestrylineargenomicmodel method)": [[761, "pybrops.model.gmod.CoancestryLinearGenomicModel.CoancestryLinearGenomicModel.lsl_numpy"]], "model_name (pybrops.model.gmod.coancestrylineargenomicmodel.coancestrylineargenomicmodel property)": [[761, "pybrops.model.gmod.CoancestryLinearGenomicModel.CoancestryLinearGenomicModel.model_name"]], "nexplan (pybrops.model.gmod.coancestrylineargenomicmodel.coancestrylineargenomicmodel property)": [[761, "pybrops.model.gmod.CoancestryLinearGenomicModel.CoancestryLinearGenomicModel.nexplan"]], "nexplan_beta (pybrops.model.gmod.coancestrylineargenomicmodel.coancestrylineargenomicmodel property)": [[761, "pybrops.model.gmod.CoancestryLinearGenomicModel.CoancestryLinearGenomicModel.nexplan_beta"]], "nexplan_u (pybrops.model.gmod.coancestrylineargenomicmodel.coancestrylineargenomicmodel property)": [[761, "pybrops.model.gmod.CoancestryLinearGenomicModel.CoancestryLinearGenomicModel.nexplan_u"]], "nparam (pybrops.model.gmod.coancestrylineargenomicmodel.coancestrylineargenomicmodel property)": [[761, "pybrops.model.gmod.CoancestryLinearGenomicModel.CoancestryLinearGenomicModel.nparam"]], "nparam_beta (pybrops.model.gmod.coancestrylineargenomicmodel.coancestrylineargenomicmodel property)": [[761, "pybrops.model.gmod.CoancestryLinearGenomicModel.CoancestryLinearGenomicModel.nparam_beta"]], "nparam_u (pybrops.model.gmod.coancestrylineargenomicmodel.coancestrylineargenomicmodel property)": [[761, "pybrops.model.gmod.CoancestryLinearGenomicModel.CoancestryLinearGenomicModel.nparam_u"]], "ntrait (pybrops.model.gmod.coancestrylineargenomicmodel.coancestrylineargenomicmodel property)": [[761, "pybrops.model.gmod.CoancestryLinearGenomicModel.CoancestryLinearGenomicModel.ntrait"]], "predict() (pybrops.model.gmod.coancestrylineargenomicmodel.coancestrylineargenomicmodel method)": [[761, "pybrops.model.gmod.CoancestryLinearGenomicModel.CoancestryLinearGenomicModel.predict"]], "predict_numpy() (pybrops.model.gmod.coancestrylineargenomicmodel.coancestrylineargenomicmodel method)": [[761, "pybrops.model.gmod.CoancestryLinearGenomicModel.CoancestryLinearGenomicModel.predict_numpy"]], "score() (pybrops.model.gmod.coancestrylineargenomicmodel.coancestrylineargenomicmodel method)": [[761, "pybrops.model.gmod.CoancestryLinearGenomicModel.CoancestryLinearGenomicModel.score"]], "score_numpy() (pybrops.model.gmod.coancestrylineargenomicmodel.coancestrylineargenomicmodel method)": [[761, "pybrops.model.gmod.CoancestryLinearGenomicModel.CoancestryLinearGenomicModel.score_numpy"]], "to_csv_dict() (pybrops.model.gmod.coancestrylineargenomicmodel.coancestrylineargenomicmodel method)": [[761, "pybrops.model.gmod.CoancestryLinearGenomicModel.CoancestryLinearGenomicModel.to_csv_dict"]], "to_hdf5() (pybrops.model.gmod.coancestrylineargenomicmodel.coancestrylineargenomicmodel method)": [[761, "pybrops.model.gmod.CoancestryLinearGenomicModel.CoancestryLinearGenomicModel.to_hdf5"]], "to_pandas_dict() (pybrops.model.gmod.coancestrylineargenomicmodel.coancestrylineargenomicmodel method)": [[761, "pybrops.model.gmod.CoancestryLinearGenomicModel.CoancestryLinearGenomicModel.to_pandas_dict"]], "trait (pybrops.model.gmod.coancestrylineargenomicmodel.coancestrylineargenomicmodel property)": [[761, "pybrops.model.gmod.CoancestryLinearGenomicModel.CoancestryLinearGenomicModel.trait"]], "u (pybrops.model.gmod.coancestrylineargenomicmodel.coancestrylineargenomicmodel property)": [[761, "pybrops.model.gmod.CoancestryLinearGenomicModel.CoancestryLinearGenomicModel.u"]], "u_c (pybrops.model.gmod.coancestrylineargenomicmodel.coancestrylineargenomicmodel property)": [[761, "pybrops.model.gmod.CoancestryLinearGenomicModel.CoancestryLinearGenomicModel.u_c"]], "u_misc (pybrops.model.gmod.coancestrylineargenomicmodel.coancestrylineargenomicmodel property)": [[761, "pybrops.model.gmod.CoancestryLinearGenomicModel.CoancestryLinearGenomicModel.u_misc"]], "usl() (pybrops.model.gmod.coancestrylineargenomicmodel.coancestrylineargenomicmodel method)": [[761, "pybrops.model.gmod.CoancestryLinearGenomicModel.CoancestryLinearGenomicModel.usl"]], "usl_numpy() (pybrops.model.gmod.coancestrylineargenomicmodel.coancestrylineargenomicmodel method)": [[761, "pybrops.model.gmod.CoancestryLinearGenomicModel.CoancestryLinearGenomicModel.usl_numpy"]], "var_a() (pybrops.model.gmod.coancestrylineargenomicmodel.coancestrylineargenomicmodel method)": [[761, "pybrops.model.gmod.CoancestryLinearGenomicModel.CoancestryLinearGenomicModel.var_A"], [761, "pybrops.model.gmod.CoancestryLinearGenomicModel.CoancestryLinearGenomicModel.var_a"]], "var_a_numpy() (pybrops.model.gmod.coancestrylineargenomicmodel.coancestrylineargenomicmodel method)": [[761, "pybrops.model.gmod.CoancestryLinearGenomicModel.CoancestryLinearGenomicModel.var_A_numpy"], [761, "pybrops.model.gmod.CoancestryLinearGenomicModel.CoancestryLinearGenomicModel.var_a_numpy"]], "var_g() (pybrops.model.gmod.coancestrylineargenomicmodel.coancestrylineargenomicmodel method)": [[761, "pybrops.model.gmod.CoancestryLinearGenomicModel.CoancestryLinearGenomicModel.var_G"]], "var_g_numpy() (pybrops.model.gmod.coancestrylineargenomicmodel.coancestrylineargenomicmodel method)": [[761, "pybrops.model.gmod.CoancestryLinearGenomicModel.CoancestryLinearGenomicModel.var_G_numpy"]], "check_is_coancestrylineargenomicmodel() (in module pybrops.model.gmod.coancestrylineargenomicmodel)": [[762, "pybrops.model.gmod.CoancestryLinearGenomicModel.check_is_CoancestryLinearGenomicModel"]], "pybrops.model.gmod.denseadditivedominancelineargenomicmodel": [[763, "module-pybrops.model.gmod.DenseAdditiveDominanceLinearGenomicModel"]], "denseadditivedominancelineargenomicmodel (class in pybrops.model.gmod.denseadditivedominancelineargenomicmodel)": [[764, "pybrops.model.gmod.DenseAdditiveDominanceLinearGenomicModel.DenseAdditiveDominanceLinearGenomicModel"]], "beta (pybrops.model.gmod.denseadditivedominancelineargenomicmodel.denseadditivedominancelineargenomicmodel property)": [[764, "pybrops.model.gmod.DenseAdditiveDominanceLinearGenomicModel.DenseAdditiveDominanceLinearGenomicModel.beta"]], "bulmer() (pybrops.model.gmod.denseadditivedominancelineargenomicmodel.denseadditivedominancelineargenomicmodel method)": [[764, "pybrops.model.gmod.DenseAdditiveDominanceLinearGenomicModel.DenseAdditiveDominanceLinearGenomicModel.bulmer"]], "bulmer_numpy() (pybrops.model.gmod.denseadditivedominancelineargenomicmodel.denseadditivedominancelineargenomicmodel method)": [[764, "pybrops.model.gmod.DenseAdditiveDominanceLinearGenomicModel.DenseAdditiveDominanceLinearGenomicModel.bulmer_numpy"]], "copy() (pybrops.model.gmod.denseadditivedominancelineargenomicmodel.denseadditivedominancelineargenomicmodel method)": [[764, "pybrops.model.gmod.DenseAdditiveDominanceLinearGenomicModel.DenseAdditiveDominanceLinearGenomicModel.copy"]], "daavail() (pybrops.model.gmod.denseadditivedominancelineargenomicmodel.denseadditivedominancelineargenomicmodel method)": [[764, "pybrops.model.gmod.DenseAdditiveDominanceLinearGenomicModel.DenseAdditiveDominanceLinearGenomicModel.daavail"]], "dacount() (pybrops.model.gmod.denseadditivedominancelineargenomicmodel.denseadditivedominancelineargenomicmodel method)": [[764, "pybrops.model.gmod.DenseAdditiveDominanceLinearGenomicModel.DenseAdditiveDominanceLinearGenomicModel.dacount"]], "dafixed() (pybrops.model.gmod.denseadditivedominancelineargenomicmodel.denseadditivedominancelineargenomicmodel method)": [[764, "pybrops.model.gmod.DenseAdditiveDominanceLinearGenomicModel.DenseAdditiveDominanceLinearGenomicModel.dafixed"]], "dafreq() (pybrops.model.gmod.denseadditivedominancelineargenomicmodel.denseadditivedominancelineargenomicmodel method)": [[764, "pybrops.model.gmod.DenseAdditiveDominanceLinearGenomicModel.DenseAdditiveDominanceLinearGenomicModel.dafreq"]], "deepcopy() (pybrops.model.gmod.denseadditivedominancelineargenomicmodel.denseadditivedominancelineargenomicmodel method)": [[764, "pybrops.model.gmod.DenseAdditiveDominanceLinearGenomicModel.DenseAdditiveDominanceLinearGenomicModel.deepcopy"]], "faavail() (pybrops.model.gmod.denseadditivedominancelineargenomicmodel.denseadditivedominancelineargenomicmodel method)": [[764, "pybrops.model.gmod.DenseAdditiveDominanceLinearGenomicModel.DenseAdditiveDominanceLinearGenomicModel.faavail"]], "facount() (pybrops.model.gmod.denseadditivedominancelineargenomicmodel.denseadditivedominancelineargenomicmodel method)": [[764, "pybrops.model.gmod.DenseAdditiveDominanceLinearGenomicModel.DenseAdditiveDominanceLinearGenomicModel.facount"]], "fafixed() (pybrops.model.gmod.denseadditivedominancelineargenomicmodel.denseadditivedominancelineargenomicmodel method)": [[764, "pybrops.model.gmod.DenseAdditiveDominanceLinearGenomicModel.DenseAdditiveDominanceLinearGenomicModel.fafixed"]], "fafreq() (pybrops.model.gmod.denseadditivedominancelineargenomicmodel.denseadditivedominancelineargenomicmodel method)": [[764, "pybrops.model.gmod.DenseAdditiveDominanceLinearGenomicModel.DenseAdditiveDominanceLinearGenomicModel.fafreq"]], "fit() (pybrops.model.gmod.denseadditivedominancelineargenomicmodel.denseadditivedominancelineargenomicmodel class method)": [[764, "pybrops.model.gmod.DenseAdditiveDominanceLinearGenomicModel.DenseAdditiveDominanceLinearGenomicModel.fit"]], "fit_numpy() (pybrops.model.gmod.denseadditivedominancelineargenomicmodel.denseadditivedominancelineargenomicmodel class method)": [[764, "pybrops.model.gmod.DenseAdditiveDominanceLinearGenomicModel.DenseAdditiveDominanceLinearGenomicModel.fit_numpy"]], "from_csv_dict() (pybrops.model.gmod.denseadditivedominancelineargenomicmodel.denseadditivedominancelineargenomicmodel class method)": [[764, "pybrops.model.gmod.DenseAdditiveDominanceLinearGenomicModel.DenseAdditiveDominanceLinearGenomicModel.from_csv_dict"]], "from_hdf5() (pybrops.model.gmod.denseadditivedominancelineargenomicmodel.denseadditivedominancelineargenomicmodel class method)": [[764, "pybrops.model.gmod.DenseAdditiveDominanceLinearGenomicModel.DenseAdditiveDominanceLinearGenomicModel.from_hdf5"]], "from_pandas_dict() (pybrops.model.gmod.denseadditivedominancelineargenomicmodel.denseadditivedominancelineargenomicmodel class method)": [[764, "pybrops.model.gmod.DenseAdditiveDominanceLinearGenomicModel.DenseAdditiveDominanceLinearGenomicModel.from_pandas_dict"]], "gebv() (pybrops.model.gmod.denseadditivedominancelineargenomicmodel.denseadditivedominancelineargenomicmodel method)": [[764, "pybrops.model.gmod.DenseAdditiveDominanceLinearGenomicModel.DenseAdditiveDominanceLinearGenomicModel.gebv"]], "gebv_numpy() (pybrops.model.gmod.denseadditivedominancelineargenomicmodel.denseadditivedominancelineargenomicmodel method)": [[764, "pybrops.model.gmod.DenseAdditiveDominanceLinearGenomicModel.DenseAdditiveDominanceLinearGenomicModel.gebv_numpy"]], "gegv() (pybrops.model.gmod.denseadditivedominancelineargenomicmodel.denseadditivedominancelineargenomicmodel method)": [[764, "pybrops.model.gmod.DenseAdditiveDominanceLinearGenomicModel.DenseAdditiveDominanceLinearGenomicModel.gegv"]], "gegv_numpy() (pybrops.model.gmod.denseadditivedominancelineargenomicmodel.denseadditivedominancelineargenomicmodel method)": [[764, "pybrops.model.gmod.DenseAdditiveDominanceLinearGenomicModel.DenseAdditiveDominanceLinearGenomicModel.gegv_numpy"]], "hyperparams (pybrops.model.gmod.denseadditivedominancelineargenomicmodel.denseadditivedominancelineargenomicmodel property)": [[764, "pybrops.model.gmod.DenseAdditiveDominanceLinearGenomicModel.DenseAdditiveDominanceLinearGenomicModel.hyperparams"]], "lsl() (pybrops.model.gmod.denseadditivedominancelineargenomicmodel.denseadditivedominancelineargenomicmodel method)": [[764, "pybrops.model.gmod.DenseAdditiveDominanceLinearGenomicModel.DenseAdditiveDominanceLinearGenomicModel.lsl"]], "lsl_numpy() (pybrops.model.gmod.denseadditivedominancelineargenomicmodel.denseadditivedominancelineargenomicmodel method)": [[764, "pybrops.model.gmod.DenseAdditiveDominanceLinearGenomicModel.DenseAdditiveDominanceLinearGenomicModel.lsl_numpy"]], "model_name (pybrops.model.gmod.denseadditivedominancelineargenomicmodel.denseadditivedominancelineargenomicmodel property)": [[764, "pybrops.model.gmod.DenseAdditiveDominanceLinearGenomicModel.DenseAdditiveDominanceLinearGenomicModel.model_name"]], "nexplan (pybrops.model.gmod.denseadditivedominancelineargenomicmodel.denseadditivedominancelineargenomicmodel property)": [[764, "pybrops.model.gmod.DenseAdditiveDominanceLinearGenomicModel.DenseAdditiveDominanceLinearGenomicModel.nexplan"]], "nexplan_beta (pybrops.model.gmod.denseadditivedominancelineargenomicmodel.denseadditivedominancelineargenomicmodel property)": [[764, "pybrops.model.gmod.DenseAdditiveDominanceLinearGenomicModel.DenseAdditiveDominanceLinearGenomicModel.nexplan_beta"]], "nexplan_u (pybrops.model.gmod.denseadditivedominancelineargenomicmodel.denseadditivedominancelineargenomicmodel property)": [[764, "pybrops.model.gmod.DenseAdditiveDominanceLinearGenomicModel.DenseAdditiveDominanceLinearGenomicModel.nexplan_u"]], "nexplan_u_a (pybrops.model.gmod.denseadditivedominancelineargenomicmodel.denseadditivedominancelineargenomicmodel property)": [[764, "pybrops.model.gmod.DenseAdditiveDominanceLinearGenomicModel.DenseAdditiveDominanceLinearGenomicModel.nexplan_u_a"]], "nexplan_u_d (pybrops.model.gmod.denseadditivedominancelineargenomicmodel.denseadditivedominancelineargenomicmodel property)": [[764, "pybrops.model.gmod.DenseAdditiveDominanceLinearGenomicModel.DenseAdditiveDominanceLinearGenomicModel.nexplan_u_d"]], "nexplan_u_misc (pybrops.model.gmod.denseadditivedominancelineargenomicmodel.denseadditivedominancelineargenomicmodel property)": [[764, "pybrops.model.gmod.DenseAdditiveDominanceLinearGenomicModel.DenseAdditiveDominanceLinearGenomicModel.nexplan_u_misc"]], "nparam (pybrops.model.gmod.denseadditivedominancelineargenomicmodel.denseadditivedominancelineargenomicmodel property)": [[764, "pybrops.model.gmod.DenseAdditiveDominanceLinearGenomicModel.DenseAdditiveDominanceLinearGenomicModel.nparam"]], "nparam_beta (pybrops.model.gmod.denseadditivedominancelineargenomicmodel.denseadditivedominancelineargenomicmodel property)": [[764, "pybrops.model.gmod.DenseAdditiveDominanceLinearGenomicModel.DenseAdditiveDominanceLinearGenomicModel.nparam_beta"]], "nparam_u (pybrops.model.gmod.denseadditivedominancelineargenomicmodel.denseadditivedominancelineargenomicmodel property)": [[764, "pybrops.model.gmod.DenseAdditiveDominanceLinearGenomicModel.DenseAdditiveDominanceLinearGenomicModel.nparam_u"]], "nparam_u_a (pybrops.model.gmod.denseadditivedominancelineargenomicmodel.denseadditivedominancelineargenomicmodel property)": [[764, "pybrops.model.gmod.DenseAdditiveDominanceLinearGenomicModel.DenseAdditiveDominanceLinearGenomicModel.nparam_u_a"]], "nparam_u_d (pybrops.model.gmod.denseadditivedominancelineargenomicmodel.denseadditivedominancelineargenomicmodel property)": [[764, "pybrops.model.gmod.DenseAdditiveDominanceLinearGenomicModel.DenseAdditiveDominanceLinearGenomicModel.nparam_u_d"]], "nparam_u_misc (pybrops.model.gmod.denseadditivedominancelineargenomicmodel.denseadditivedominancelineargenomicmodel property)": [[764, "pybrops.model.gmod.DenseAdditiveDominanceLinearGenomicModel.DenseAdditiveDominanceLinearGenomicModel.nparam_u_misc"]], "ntrait (pybrops.model.gmod.denseadditivedominancelineargenomicmodel.denseadditivedominancelineargenomicmodel property)": [[764, "pybrops.model.gmod.DenseAdditiveDominanceLinearGenomicModel.DenseAdditiveDominanceLinearGenomicModel.ntrait"]], "predict() (pybrops.model.gmod.denseadditivedominancelineargenomicmodel.denseadditivedominancelineargenomicmodel method)": [[764, "pybrops.model.gmod.DenseAdditiveDominanceLinearGenomicModel.DenseAdditiveDominanceLinearGenomicModel.predict"]], "predict_numpy() (pybrops.model.gmod.denseadditivedominancelineargenomicmodel.denseadditivedominancelineargenomicmodel method)": [[764, "pybrops.model.gmod.DenseAdditiveDominanceLinearGenomicModel.DenseAdditiveDominanceLinearGenomicModel.predict_numpy"]], "score() (pybrops.model.gmod.denseadditivedominancelineargenomicmodel.denseadditivedominancelineargenomicmodel method)": [[764, "pybrops.model.gmod.DenseAdditiveDominanceLinearGenomicModel.DenseAdditiveDominanceLinearGenomicModel.score"]], "score_numpy() (pybrops.model.gmod.denseadditivedominancelineargenomicmodel.denseadditivedominancelineargenomicmodel method)": [[764, "pybrops.model.gmod.DenseAdditiveDominanceLinearGenomicModel.DenseAdditiveDominanceLinearGenomicModel.score_numpy"]], "to_csv_dict() (pybrops.model.gmod.denseadditivedominancelineargenomicmodel.denseadditivedominancelineargenomicmodel method)": [[764, "pybrops.model.gmod.DenseAdditiveDominanceLinearGenomicModel.DenseAdditiveDominanceLinearGenomicModel.to_csv_dict"]], "to_hdf5() (pybrops.model.gmod.denseadditivedominancelineargenomicmodel.denseadditivedominancelineargenomicmodel method)": [[764, "pybrops.model.gmod.DenseAdditiveDominanceLinearGenomicModel.DenseAdditiveDominanceLinearGenomicModel.to_hdf5"]], "to_pandas_dict() (pybrops.model.gmod.denseadditivedominancelineargenomicmodel.denseadditivedominancelineargenomicmodel method)": [[764, "pybrops.model.gmod.DenseAdditiveDominanceLinearGenomicModel.DenseAdditiveDominanceLinearGenomicModel.to_pandas_dict"]], "trait (pybrops.model.gmod.denseadditivedominancelineargenomicmodel.denseadditivedominancelineargenomicmodel property)": [[764, "pybrops.model.gmod.DenseAdditiveDominanceLinearGenomicModel.DenseAdditiveDominanceLinearGenomicModel.trait"]], "u (pybrops.model.gmod.denseadditivedominancelineargenomicmodel.denseadditivedominancelineargenomicmodel property)": [[764, "pybrops.model.gmod.DenseAdditiveDominanceLinearGenomicModel.DenseAdditiveDominanceLinearGenomicModel.u"]], "u_a (pybrops.model.gmod.denseadditivedominancelineargenomicmodel.denseadditivedominancelineargenomicmodel property)": [[764, "pybrops.model.gmod.DenseAdditiveDominanceLinearGenomicModel.DenseAdditiveDominanceLinearGenomicModel.u_a"]], "u_d (pybrops.model.gmod.denseadditivedominancelineargenomicmodel.denseadditivedominancelineargenomicmodel property)": [[764, "pybrops.model.gmod.DenseAdditiveDominanceLinearGenomicModel.DenseAdditiveDominanceLinearGenomicModel.u_d"]], "u_misc (pybrops.model.gmod.denseadditivedominancelineargenomicmodel.denseadditivedominancelineargenomicmodel property)": [[764, "pybrops.model.gmod.DenseAdditiveDominanceLinearGenomicModel.DenseAdditiveDominanceLinearGenomicModel.u_misc"]], "usl() (pybrops.model.gmod.denseadditivedominancelineargenomicmodel.denseadditivedominancelineargenomicmodel method)": [[764, "pybrops.model.gmod.DenseAdditiveDominanceLinearGenomicModel.DenseAdditiveDominanceLinearGenomicModel.usl"]], "usl_numpy() (pybrops.model.gmod.denseadditivedominancelineargenomicmodel.denseadditivedominancelineargenomicmodel method)": [[764, "pybrops.model.gmod.DenseAdditiveDominanceLinearGenomicModel.DenseAdditiveDominanceLinearGenomicModel.usl_numpy"]], "var_a() (pybrops.model.gmod.denseadditivedominancelineargenomicmodel.denseadditivedominancelineargenomicmodel method)": [[764, "pybrops.model.gmod.DenseAdditiveDominanceLinearGenomicModel.DenseAdditiveDominanceLinearGenomicModel.var_A"], [764, "pybrops.model.gmod.DenseAdditiveDominanceLinearGenomicModel.DenseAdditiveDominanceLinearGenomicModel.var_a"]], "var_a_numpy() (pybrops.model.gmod.denseadditivedominancelineargenomicmodel.denseadditivedominancelineargenomicmodel method)": [[764, "pybrops.model.gmod.DenseAdditiveDominanceLinearGenomicModel.DenseAdditiveDominanceLinearGenomicModel.var_A_numpy"], [764, "pybrops.model.gmod.DenseAdditiveDominanceLinearGenomicModel.DenseAdditiveDominanceLinearGenomicModel.var_a_numpy"]], "var_g() (pybrops.model.gmod.denseadditivedominancelineargenomicmodel.denseadditivedominancelineargenomicmodel method)": [[764, "pybrops.model.gmod.DenseAdditiveDominanceLinearGenomicModel.DenseAdditiveDominanceLinearGenomicModel.var_G"]], "var_g_numpy() (pybrops.model.gmod.denseadditivedominancelineargenomicmodel.denseadditivedominancelineargenomicmodel method)": [[764, "pybrops.model.gmod.DenseAdditiveDominanceLinearGenomicModel.DenseAdditiveDominanceLinearGenomicModel.var_G_numpy"]], "check_is_denseadditivedominancelineargenomicmodel() (in module pybrops.model.gmod.denseadditivedominancelineargenomicmodel)": [[765, "pybrops.model.gmod.DenseAdditiveDominanceLinearGenomicModel.check_is_DenseAdditiveDominanceLinearGenomicModel"]], "pybrops.model.gmod.denseadditivelineargenomicmodel": [[766, "module-pybrops.model.gmod.DenseAdditiveLinearGenomicModel"]], "denseadditivelineargenomicmodel (class in pybrops.model.gmod.denseadditivelineargenomicmodel)": [[767, "pybrops.model.gmod.DenseAdditiveLinearGenomicModel.DenseAdditiveLinearGenomicModel"]], "beta (pybrops.model.gmod.denseadditivelineargenomicmodel.denseadditivelineargenomicmodel property)": [[767, "pybrops.model.gmod.DenseAdditiveLinearGenomicModel.DenseAdditiveLinearGenomicModel.beta"]], "bulmer() (pybrops.model.gmod.denseadditivelineargenomicmodel.denseadditivelineargenomicmodel method)": [[767, "pybrops.model.gmod.DenseAdditiveLinearGenomicModel.DenseAdditiveLinearGenomicModel.bulmer"]], "bulmer_numpy() (pybrops.model.gmod.denseadditivelineargenomicmodel.denseadditivelineargenomicmodel method)": [[767, "pybrops.model.gmod.DenseAdditiveLinearGenomicModel.DenseAdditiveLinearGenomicModel.bulmer_numpy"]], "copy() (pybrops.model.gmod.denseadditivelineargenomicmodel.denseadditivelineargenomicmodel method)": [[767, "pybrops.model.gmod.DenseAdditiveLinearGenomicModel.DenseAdditiveLinearGenomicModel.copy"]], "daavail() (pybrops.model.gmod.denseadditivelineargenomicmodel.denseadditivelineargenomicmodel method)": [[767, "pybrops.model.gmod.DenseAdditiveLinearGenomicModel.DenseAdditiveLinearGenomicModel.daavail"]], "dacount() (pybrops.model.gmod.denseadditivelineargenomicmodel.denseadditivelineargenomicmodel method)": [[767, "pybrops.model.gmod.DenseAdditiveLinearGenomicModel.DenseAdditiveLinearGenomicModel.dacount"]], "dafixed() (pybrops.model.gmod.denseadditivelineargenomicmodel.denseadditivelineargenomicmodel method)": [[767, "pybrops.model.gmod.DenseAdditiveLinearGenomicModel.DenseAdditiveLinearGenomicModel.dafixed"]], "dafreq() (pybrops.model.gmod.denseadditivelineargenomicmodel.denseadditivelineargenomicmodel method)": [[767, "pybrops.model.gmod.DenseAdditiveLinearGenomicModel.DenseAdditiveLinearGenomicModel.dafreq"]], "deepcopy() (pybrops.model.gmod.denseadditivelineargenomicmodel.denseadditivelineargenomicmodel method)": [[767, "pybrops.model.gmod.DenseAdditiveLinearGenomicModel.DenseAdditiveLinearGenomicModel.deepcopy"]], "faavail() (pybrops.model.gmod.denseadditivelineargenomicmodel.denseadditivelineargenomicmodel method)": [[767, "pybrops.model.gmod.DenseAdditiveLinearGenomicModel.DenseAdditiveLinearGenomicModel.faavail"]], "facount() (pybrops.model.gmod.denseadditivelineargenomicmodel.denseadditivelineargenomicmodel method)": [[767, "pybrops.model.gmod.DenseAdditiveLinearGenomicModel.DenseAdditiveLinearGenomicModel.facount"]], "fafixed() (pybrops.model.gmod.denseadditivelineargenomicmodel.denseadditivelineargenomicmodel method)": [[767, "pybrops.model.gmod.DenseAdditiveLinearGenomicModel.DenseAdditiveLinearGenomicModel.fafixed"]], "fafreq() (pybrops.model.gmod.denseadditivelineargenomicmodel.denseadditivelineargenomicmodel method)": [[767, "pybrops.model.gmod.DenseAdditiveLinearGenomicModel.DenseAdditiveLinearGenomicModel.fafreq"]], "fit() (pybrops.model.gmod.denseadditivelineargenomicmodel.denseadditivelineargenomicmodel class method)": [[767, "pybrops.model.gmod.DenseAdditiveLinearGenomicModel.DenseAdditiveLinearGenomicModel.fit"]], "fit_numpy() (pybrops.model.gmod.denseadditivelineargenomicmodel.denseadditivelineargenomicmodel class method)": [[767, "pybrops.model.gmod.DenseAdditiveLinearGenomicModel.DenseAdditiveLinearGenomicModel.fit_numpy"]], "from_csv_dict() (pybrops.model.gmod.denseadditivelineargenomicmodel.denseadditivelineargenomicmodel class method)": [[767, "pybrops.model.gmod.DenseAdditiveLinearGenomicModel.DenseAdditiveLinearGenomicModel.from_csv_dict"]], "from_hdf5() (pybrops.model.gmod.denseadditivelineargenomicmodel.denseadditivelineargenomicmodel class method)": [[767, "pybrops.model.gmod.DenseAdditiveLinearGenomicModel.DenseAdditiveLinearGenomicModel.from_hdf5"]], "from_pandas_dict() (pybrops.model.gmod.denseadditivelineargenomicmodel.denseadditivelineargenomicmodel class method)": [[767, "pybrops.model.gmod.DenseAdditiveLinearGenomicModel.DenseAdditiveLinearGenomicModel.from_pandas_dict"]], "gebv() (pybrops.model.gmod.denseadditivelineargenomicmodel.denseadditivelineargenomicmodel method)": [[767, "pybrops.model.gmod.DenseAdditiveLinearGenomicModel.DenseAdditiveLinearGenomicModel.gebv"]], "gebv_numpy() (pybrops.model.gmod.denseadditivelineargenomicmodel.denseadditivelineargenomicmodel method)": [[767, "pybrops.model.gmod.DenseAdditiveLinearGenomicModel.DenseAdditiveLinearGenomicModel.gebv_numpy"]], "gegv() (pybrops.model.gmod.denseadditivelineargenomicmodel.denseadditivelineargenomicmodel method)": [[767, "pybrops.model.gmod.DenseAdditiveLinearGenomicModel.DenseAdditiveLinearGenomicModel.gegv"]], "gegv_numpy() (pybrops.model.gmod.denseadditivelineargenomicmodel.denseadditivelineargenomicmodel method)": [[767, "pybrops.model.gmod.DenseAdditiveLinearGenomicModel.DenseAdditiveLinearGenomicModel.gegv_numpy"]], "hyperparams (pybrops.model.gmod.denseadditivelineargenomicmodel.denseadditivelineargenomicmodel property)": [[767, "pybrops.model.gmod.DenseAdditiveLinearGenomicModel.DenseAdditiveLinearGenomicModel.hyperparams"]], "lsl() (pybrops.model.gmod.denseadditivelineargenomicmodel.denseadditivelineargenomicmodel method)": [[767, "pybrops.model.gmod.DenseAdditiveLinearGenomicModel.DenseAdditiveLinearGenomicModel.lsl"]], "lsl_numpy() (pybrops.model.gmod.denseadditivelineargenomicmodel.denseadditivelineargenomicmodel method)": [[767, "pybrops.model.gmod.DenseAdditiveLinearGenomicModel.DenseAdditiveLinearGenomicModel.lsl_numpy"]], "model_name (pybrops.model.gmod.denseadditivelineargenomicmodel.denseadditivelineargenomicmodel property)": [[767, "pybrops.model.gmod.DenseAdditiveLinearGenomicModel.DenseAdditiveLinearGenomicModel.model_name"]], "nexplan (pybrops.model.gmod.denseadditivelineargenomicmodel.denseadditivelineargenomicmodel property)": [[767, "pybrops.model.gmod.DenseAdditiveLinearGenomicModel.DenseAdditiveLinearGenomicModel.nexplan"]], "nexplan_beta (pybrops.model.gmod.denseadditivelineargenomicmodel.denseadditivelineargenomicmodel property)": [[767, "pybrops.model.gmod.DenseAdditiveLinearGenomicModel.DenseAdditiveLinearGenomicModel.nexplan_beta"]], "nexplan_u (pybrops.model.gmod.denseadditivelineargenomicmodel.denseadditivelineargenomicmodel property)": [[767, "pybrops.model.gmod.DenseAdditiveLinearGenomicModel.DenseAdditiveLinearGenomicModel.nexplan_u"]], "nexplan_u_a (pybrops.model.gmod.denseadditivelineargenomicmodel.denseadditivelineargenomicmodel property)": [[767, "pybrops.model.gmod.DenseAdditiveLinearGenomicModel.DenseAdditiveLinearGenomicModel.nexplan_u_a"]], "nexplan_u_misc (pybrops.model.gmod.denseadditivelineargenomicmodel.denseadditivelineargenomicmodel property)": [[767, "pybrops.model.gmod.DenseAdditiveLinearGenomicModel.DenseAdditiveLinearGenomicModel.nexplan_u_misc"]], "nparam (pybrops.model.gmod.denseadditivelineargenomicmodel.denseadditivelineargenomicmodel property)": [[767, "pybrops.model.gmod.DenseAdditiveLinearGenomicModel.DenseAdditiveLinearGenomicModel.nparam"]], "nparam_beta (pybrops.model.gmod.denseadditivelineargenomicmodel.denseadditivelineargenomicmodel property)": [[767, "pybrops.model.gmod.DenseAdditiveLinearGenomicModel.DenseAdditiveLinearGenomicModel.nparam_beta"]], "nparam_u (pybrops.model.gmod.denseadditivelineargenomicmodel.denseadditivelineargenomicmodel property)": [[767, "pybrops.model.gmod.DenseAdditiveLinearGenomicModel.DenseAdditiveLinearGenomicModel.nparam_u"]], "nparam_u_a (pybrops.model.gmod.denseadditivelineargenomicmodel.denseadditivelineargenomicmodel property)": [[767, "pybrops.model.gmod.DenseAdditiveLinearGenomicModel.DenseAdditiveLinearGenomicModel.nparam_u_a"]], "nparam_u_misc (pybrops.model.gmod.denseadditivelineargenomicmodel.denseadditivelineargenomicmodel property)": [[767, "pybrops.model.gmod.DenseAdditiveLinearGenomicModel.DenseAdditiveLinearGenomicModel.nparam_u_misc"]], "ntrait (pybrops.model.gmod.denseadditivelineargenomicmodel.denseadditivelineargenomicmodel property)": [[767, "pybrops.model.gmod.DenseAdditiveLinearGenomicModel.DenseAdditiveLinearGenomicModel.ntrait"]], "predict() (pybrops.model.gmod.denseadditivelineargenomicmodel.denseadditivelineargenomicmodel method)": [[767, "pybrops.model.gmod.DenseAdditiveLinearGenomicModel.DenseAdditiveLinearGenomicModel.predict"]], "predict_numpy() (pybrops.model.gmod.denseadditivelineargenomicmodel.denseadditivelineargenomicmodel method)": [[767, "pybrops.model.gmod.DenseAdditiveLinearGenomicModel.DenseAdditiveLinearGenomicModel.predict_numpy"]], "score() (pybrops.model.gmod.denseadditivelineargenomicmodel.denseadditivelineargenomicmodel method)": [[767, "pybrops.model.gmod.DenseAdditiveLinearGenomicModel.DenseAdditiveLinearGenomicModel.score"]], "score_numpy() (pybrops.model.gmod.denseadditivelineargenomicmodel.denseadditivelineargenomicmodel method)": [[767, "pybrops.model.gmod.DenseAdditiveLinearGenomicModel.DenseAdditiveLinearGenomicModel.score_numpy"]], "to_csv_dict() (pybrops.model.gmod.denseadditivelineargenomicmodel.denseadditivelineargenomicmodel method)": [[767, "pybrops.model.gmod.DenseAdditiveLinearGenomicModel.DenseAdditiveLinearGenomicModel.to_csv_dict"]], "to_hdf5() (pybrops.model.gmod.denseadditivelineargenomicmodel.denseadditivelineargenomicmodel method)": [[767, "pybrops.model.gmod.DenseAdditiveLinearGenomicModel.DenseAdditiveLinearGenomicModel.to_hdf5"]], "to_pandas_dict() (pybrops.model.gmod.denseadditivelineargenomicmodel.denseadditivelineargenomicmodel method)": [[767, "pybrops.model.gmod.DenseAdditiveLinearGenomicModel.DenseAdditiveLinearGenomicModel.to_pandas_dict"]], "trait (pybrops.model.gmod.denseadditivelineargenomicmodel.denseadditivelineargenomicmodel property)": [[767, "pybrops.model.gmod.DenseAdditiveLinearGenomicModel.DenseAdditiveLinearGenomicModel.trait"]], "u (pybrops.model.gmod.denseadditivelineargenomicmodel.denseadditivelineargenomicmodel property)": [[767, "pybrops.model.gmod.DenseAdditiveLinearGenomicModel.DenseAdditiveLinearGenomicModel.u"]], "u_a (pybrops.model.gmod.denseadditivelineargenomicmodel.denseadditivelineargenomicmodel property)": [[767, "pybrops.model.gmod.DenseAdditiveLinearGenomicModel.DenseAdditiveLinearGenomicModel.u_a"]], "u_misc (pybrops.model.gmod.denseadditivelineargenomicmodel.denseadditivelineargenomicmodel property)": [[767, "pybrops.model.gmod.DenseAdditiveLinearGenomicModel.DenseAdditiveLinearGenomicModel.u_misc"]], "usl() (pybrops.model.gmod.denseadditivelineargenomicmodel.denseadditivelineargenomicmodel method)": [[767, "pybrops.model.gmod.DenseAdditiveLinearGenomicModel.DenseAdditiveLinearGenomicModel.usl"]], "usl_numpy() (pybrops.model.gmod.denseadditivelineargenomicmodel.denseadditivelineargenomicmodel method)": [[767, "pybrops.model.gmod.DenseAdditiveLinearGenomicModel.DenseAdditiveLinearGenomicModel.usl_numpy"]], "var_a() (pybrops.model.gmod.denseadditivelineargenomicmodel.denseadditivelineargenomicmodel method)": [[767, "pybrops.model.gmod.DenseAdditiveLinearGenomicModel.DenseAdditiveLinearGenomicModel.var_A"], [767, "pybrops.model.gmod.DenseAdditiveLinearGenomicModel.DenseAdditiveLinearGenomicModel.var_a"]], "var_a_numpy() (pybrops.model.gmod.denseadditivelineargenomicmodel.denseadditivelineargenomicmodel method)": [[767, "pybrops.model.gmod.DenseAdditiveLinearGenomicModel.DenseAdditiveLinearGenomicModel.var_A_numpy"], [767, "pybrops.model.gmod.DenseAdditiveLinearGenomicModel.DenseAdditiveLinearGenomicModel.var_a_numpy"]], "var_g() (pybrops.model.gmod.denseadditivelineargenomicmodel.denseadditivelineargenomicmodel method)": [[767, "pybrops.model.gmod.DenseAdditiveLinearGenomicModel.DenseAdditiveLinearGenomicModel.var_G"]], "var_g_numpy() (pybrops.model.gmod.denseadditivelineargenomicmodel.denseadditivelineargenomicmodel method)": [[767, "pybrops.model.gmod.DenseAdditiveLinearGenomicModel.DenseAdditiveLinearGenomicModel.var_G_numpy"]], "check_is_denseadditivelineargenomicmodel() (in module pybrops.model.gmod.denseadditivelineargenomicmodel)": [[768, "pybrops.model.gmod.DenseAdditiveLinearGenomicModel.check_is_DenseAdditiveLinearGenomicModel"]], "pybrops.model.gmod.denselineargenomicmodel": [[769, "module-pybrops.model.gmod.DenseLinearGenomicModel"]], "denselineargenomicmodel (class in pybrops.model.gmod.denselineargenomicmodel)": [[770, "pybrops.model.gmod.DenseLinearGenomicModel.DenseLinearGenomicModel"]], "beta (pybrops.model.gmod.denselineargenomicmodel.denselineargenomicmodel property)": [[770, "pybrops.model.gmod.DenseLinearGenomicModel.DenseLinearGenomicModel.beta"]], "bulmer() (pybrops.model.gmod.denselineargenomicmodel.denselineargenomicmodel method)": [[770, "pybrops.model.gmod.DenseLinearGenomicModel.DenseLinearGenomicModel.bulmer"]], "bulmer_numpy() (pybrops.model.gmod.denselineargenomicmodel.denselineargenomicmodel method)": [[770, "pybrops.model.gmod.DenseLinearGenomicModel.DenseLinearGenomicModel.bulmer_numpy"]], "copy() (pybrops.model.gmod.denselineargenomicmodel.denselineargenomicmodel method)": [[770, "pybrops.model.gmod.DenseLinearGenomicModel.DenseLinearGenomicModel.copy"]], "daavail() (pybrops.model.gmod.denselineargenomicmodel.denselineargenomicmodel method)": [[770, "pybrops.model.gmod.DenseLinearGenomicModel.DenseLinearGenomicModel.daavail"]], "dacount() (pybrops.model.gmod.denselineargenomicmodel.denselineargenomicmodel method)": [[770, "pybrops.model.gmod.DenseLinearGenomicModel.DenseLinearGenomicModel.dacount"]], "dafixed() (pybrops.model.gmod.denselineargenomicmodel.denselineargenomicmodel method)": [[770, "pybrops.model.gmod.DenseLinearGenomicModel.DenseLinearGenomicModel.dafixed"]], "dafreq() (pybrops.model.gmod.denselineargenomicmodel.denselineargenomicmodel method)": [[770, "pybrops.model.gmod.DenseLinearGenomicModel.DenseLinearGenomicModel.dafreq"]], "deepcopy() (pybrops.model.gmod.denselineargenomicmodel.denselineargenomicmodel method)": [[770, "pybrops.model.gmod.DenseLinearGenomicModel.DenseLinearGenomicModel.deepcopy"]], "faavail() (pybrops.model.gmod.denselineargenomicmodel.denselineargenomicmodel method)": [[770, "pybrops.model.gmod.DenseLinearGenomicModel.DenseLinearGenomicModel.faavail"]], "facount() (pybrops.model.gmod.denselineargenomicmodel.denselineargenomicmodel method)": [[770, "pybrops.model.gmod.DenseLinearGenomicModel.DenseLinearGenomicModel.facount"]], "fafixed() (pybrops.model.gmod.denselineargenomicmodel.denselineargenomicmodel method)": [[770, "pybrops.model.gmod.DenseLinearGenomicModel.DenseLinearGenomicModel.fafixed"]], "fafreq() (pybrops.model.gmod.denselineargenomicmodel.denselineargenomicmodel method)": [[770, "pybrops.model.gmod.DenseLinearGenomicModel.DenseLinearGenomicModel.fafreq"]], "fit() (pybrops.model.gmod.denselineargenomicmodel.denselineargenomicmodel method)": [[770, "pybrops.model.gmod.DenseLinearGenomicModel.DenseLinearGenomicModel.fit"]], "fit_numpy() (pybrops.model.gmod.denselineargenomicmodel.denselineargenomicmodel method)": [[770, "pybrops.model.gmod.DenseLinearGenomicModel.DenseLinearGenomicModel.fit_numpy"]], "from_csv_dict() (pybrops.model.gmod.denselineargenomicmodel.denselineargenomicmodel class method)": [[770, "pybrops.model.gmod.DenseLinearGenomicModel.DenseLinearGenomicModel.from_csv_dict"]], "from_hdf5() (pybrops.model.gmod.denselineargenomicmodel.denselineargenomicmodel class method)": [[770, "pybrops.model.gmod.DenseLinearGenomicModel.DenseLinearGenomicModel.from_hdf5"]], "from_pandas_dict() (pybrops.model.gmod.denselineargenomicmodel.denselineargenomicmodel class method)": [[770, "pybrops.model.gmod.DenseLinearGenomicModel.DenseLinearGenomicModel.from_pandas_dict"]], "gebv() (pybrops.model.gmod.denselineargenomicmodel.denselineargenomicmodel method)": [[770, "pybrops.model.gmod.DenseLinearGenomicModel.DenseLinearGenomicModel.gebv"]], "gebv_numpy() (pybrops.model.gmod.denselineargenomicmodel.denselineargenomicmodel method)": [[770, "pybrops.model.gmod.DenseLinearGenomicModel.DenseLinearGenomicModel.gebv_numpy"]], "gegv() (pybrops.model.gmod.denselineargenomicmodel.denselineargenomicmodel method)": [[770, "pybrops.model.gmod.DenseLinearGenomicModel.DenseLinearGenomicModel.gegv"]], "gegv_numpy() (pybrops.model.gmod.denselineargenomicmodel.denselineargenomicmodel method)": [[770, "pybrops.model.gmod.DenseLinearGenomicModel.DenseLinearGenomicModel.gegv_numpy"]], "hyperparams (pybrops.model.gmod.denselineargenomicmodel.denselineargenomicmodel property)": [[770, "pybrops.model.gmod.DenseLinearGenomicModel.DenseLinearGenomicModel.hyperparams"]], "lsl() (pybrops.model.gmod.denselineargenomicmodel.denselineargenomicmodel method)": [[770, "pybrops.model.gmod.DenseLinearGenomicModel.DenseLinearGenomicModel.lsl"]], "lsl_numpy() (pybrops.model.gmod.denselineargenomicmodel.denselineargenomicmodel method)": [[770, "pybrops.model.gmod.DenseLinearGenomicModel.DenseLinearGenomicModel.lsl_numpy"]], "model_name (pybrops.model.gmod.denselineargenomicmodel.denselineargenomicmodel property)": [[770, "pybrops.model.gmod.DenseLinearGenomicModel.DenseLinearGenomicModel.model_name"]], "nexplan (pybrops.model.gmod.denselineargenomicmodel.denselineargenomicmodel property)": [[770, "pybrops.model.gmod.DenseLinearGenomicModel.DenseLinearGenomicModel.nexplan"]], "nexplan_beta (pybrops.model.gmod.denselineargenomicmodel.denselineargenomicmodel property)": [[770, "pybrops.model.gmod.DenseLinearGenomicModel.DenseLinearGenomicModel.nexplan_beta"]], "nexplan_u (pybrops.model.gmod.denselineargenomicmodel.denselineargenomicmodel property)": [[770, "pybrops.model.gmod.DenseLinearGenomicModel.DenseLinearGenomicModel.nexplan_u"]], "nparam (pybrops.model.gmod.denselineargenomicmodel.denselineargenomicmodel property)": [[770, "pybrops.model.gmod.DenseLinearGenomicModel.DenseLinearGenomicModel.nparam"]], "nparam_beta (pybrops.model.gmod.denselineargenomicmodel.denselineargenomicmodel property)": [[770, "pybrops.model.gmod.DenseLinearGenomicModel.DenseLinearGenomicModel.nparam_beta"]], "nparam_u (pybrops.model.gmod.denselineargenomicmodel.denselineargenomicmodel property)": [[770, "pybrops.model.gmod.DenseLinearGenomicModel.DenseLinearGenomicModel.nparam_u"]], "ntrait (pybrops.model.gmod.denselineargenomicmodel.denselineargenomicmodel property)": [[770, "pybrops.model.gmod.DenseLinearGenomicModel.DenseLinearGenomicModel.ntrait"]], "predict() (pybrops.model.gmod.denselineargenomicmodel.denselineargenomicmodel method)": [[770, "pybrops.model.gmod.DenseLinearGenomicModel.DenseLinearGenomicModel.predict"]], "predict_numpy() (pybrops.model.gmod.denselineargenomicmodel.denselineargenomicmodel method)": [[770, "pybrops.model.gmod.DenseLinearGenomicModel.DenseLinearGenomicModel.predict_numpy"]], "score() (pybrops.model.gmod.denselineargenomicmodel.denselineargenomicmodel method)": [[770, "pybrops.model.gmod.DenseLinearGenomicModel.DenseLinearGenomicModel.score"]], "score_numpy() (pybrops.model.gmod.denselineargenomicmodel.denselineargenomicmodel method)": [[770, "pybrops.model.gmod.DenseLinearGenomicModel.DenseLinearGenomicModel.score_numpy"]], "to_csv_dict() (pybrops.model.gmod.denselineargenomicmodel.denselineargenomicmodel method)": [[770, "pybrops.model.gmod.DenseLinearGenomicModel.DenseLinearGenomicModel.to_csv_dict"]], "to_hdf5() (pybrops.model.gmod.denselineargenomicmodel.denselineargenomicmodel method)": [[770, "pybrops.model.gmod.DenseLinearGenomicModel.DenseLinearGenomicModel.to_hdf5"]], "to_pandas_dict() (pybrops.model.gmod.denselineargenomicmodel.denselineargenomicmodel method)": [[770, "pybrops.model.gmod.DenseLinearGenomicModel.DenseLinearGenomicModel.to_pandas_dict"]], "trait (pybrops.model.gmod.denselineargenomicmodel.denselineargenomicmodel property)": [[770, "pybrops.model.gmod.DenseLinearGenomicModel.DenseLinearGenomicModel.trait"]], "u (pybrops.model.gmod.denselineargenomicmodel.denselineargenomicmodel property)": [[770, "pybrops.model.gmod.DenseLinearGenomicModel.DenseLinearGenomicModel.u"]], "usl() (pybrops.model.gmod.denselineargenomicmodel.denselineargenomicmodel method)": [[770, "pybrops.model.gmod.DenseLinearGenomicModel.DenseLinearGenomicModel.usl"]], "usl_numpy() (pybrops.model.gmod.denselineargenomicmodel.denselineargenomicmodel method)": [[770, "pybrops.model.gmod.DenseLinearGenomicModel.DenseLinearGenomicModel.usl_numpy"]], "var_a() (pybrops.model.gmod.denselineargenomicmodel.denselineargenomicmodel method)": [[770, "pybrops.model.gmod.DenseLinearGenomicModel.DenseLinearGenomicModel.var_A"], [770, "pybrops.model.gmod.DenseLinearGenomicModel.DenseLinearGenomicModel.var_a"]], "var_a_numpy() (pybrops.model.gmod.denselineargenomicmodel.denselineargenomicmodel method)": [[770, "pybrops.model.gmod.DenseLinearGenomicModel.DenseLinearGenomicModel.var_A_numpy"], [770, "pybrops.model.gmod.DenseLinearGenomicModel.DenseLinearGenomicModel.var_a_numpy"]], "var_g() (pybrops.model.gmod.denselineargenomicmodel.denselineargenomicmodel method)": [[770, "pybrops.model.gmod.DenseLinearGenomicModel.DenseLinearGenomicModel.var_G"]], "var_g_numpy() (pybrops.model.gmod.denselineargenomicmodel.denselineargenomicmodel method)": [[770, "pybrops.model.gmod.DenseLinearGenomicModel.DenseLinearGenomicModel.var_G_numpy"]], "check_is_denselineargenomicmodel() (in module pybrops.model.gmod.denselineargenomicmodel)": [[771, "pybrops.model.gmod.DenseLinearGenomicModel.check_is_DenseLinearGenomicModel"]], "pybrops.model.gmod.genomicmodel": [[772, "module-pybrops.model.gmod.GenomicModel"]], "genomicmodel (class in pybrops.model.gmod.genomicmodel)": [[773, "pybrops.model.gmod.GenomicModel.GenomicModel"]], "bulmer() (pybrops.model.gmod.genomicmodel.genomicmodel method)": [[773, "pybrops.model.gmod.GenomicModel.GenomicModel.bulmer"]], "bulmer_numpy() (pybrops.model.gmod.genomicmodel.genomicmodel method)": [[773, "pybrops.model.gmod.GenomicModel.GenomicModel.bulmer_numpy"]], "copy() (pybrops.model.gmod.genomicmodel.genomicmodel method)": [[773, "pybrops.model.gmod.GenomicModel.GenomicModel.copy"]], "daavail() (pybrops.model.gmod.genomicmodel.genomicmodel method)": [[773, "pybrops.model.gmod.GenomicModel.GenomicModel.daavail"]], "dacount() (pybrops.model.gmod.genomicmodel.genomicmodel method)": [[773, "pybrops.model.gmod.GenomicModel.GenomicModel.dacount"]], "dafixed() (pybrops.model.gmod.genomicmodel.genomicmodel method)": [[773, "pybrops.model.gmod.GenomicModel.GenomicModel.dafixed"]], "dafreq() (pybrops.model.gmod.genomicmodel.genomicmodel method)": [[773, "pybrops.model.gmod.GenomicModel.GenomicModel.dafreq"]], "deepcopy() (pybrops.model.gmod.genomicmodel.genomicmodel method)": [[773, "pybrops.model.gmod.GenomicModel.GenomicModel.deepcopy"]], "faavail() (pybrops.model.gmod.genomicmodel.genomicmodel method)": [[773, "pybrops.model.gmod.GenomicModel.GenomicModel.faavail"]], "facount() (pybrops.model.gmod.genomicmodel.genomicmodel method)": [[773, "pybrops.model.gmod.GenomicModel.GenomicModel.facount"]], "fafixed() (pybrops.model.gmod.genomicmodel.genomicmodel method)": [[773, "pybrops.model.gmod.GenomicModel.GenomicModel.fafixed"]], "fafreq() (pybrops.model.gmod.genomicmodel.genomicmodel method)": [[773, "pybrops.model.gmod.GenomicModel.GenomicModel.fafreq"]], "fit() (pybrops.model.gmod.genomicmodel.genomicmodel class method)": [[773, "pybrops.model.gmod.GenomicModel.GenomicModel.fit"]], "fit_numpy() (pybrops.model.gmod.genomicmodel.genomicmodel class method)": [[773, "pybrops.model.gmod.GenomicModel.GenomicModel.fit_numpy"]], "from_hdf5() (pybrops.model.gmod.genomicmodel.genomicmodel class method)": [[773, "pybrops.model.gmod.GenomicModel.GenomicModel.from_hdf5"]], "gebv() (pybrops.model.gmod.genomicmodel.genomicmodel method)": [[773, "pybrops.model.gmod.GenomicModel.GenomicModel.gebv"]], "gebv_numpy() (pybrops.model.gmod.genomicmodel.genomicmodel method)": [[773, "pybrops.model.gmod.GenomicModel.GenomicModel.gebv_numpy"]], "gegv() (pybrops.model.gmod.genomicmodel.genomicmodel method)": [[773, "pybrops.model.gmod.GenomicModel.GenomicModel.gegv"]], "gegv_numpy() (pybrops.model.gmod.genomicmodel.genomicmodel method)": [[773, "pybrops.model.gmod.GenomicModel.GenomicModel.gegv_numpy"]], "hyperparams (pybrops.model.gmod.genomicmodel.genomicmodel property)": [[773, "pybrops.model.gmod.GenomicModel.GenomicModel.hyperparams"]], "lsl() (pybrops.model.gmod.genomicmodel.genomicmodel method)": [[773, "pybrops.model.gmod.GenomicModel.GenomicModel.lsl"]], "lsl_numpy() (pybrops.model.gmod.genomicmodel.genomicmodel method)": [[773, "pybrops.model.gmod.GenomicModel.GenomicModel.lsl_numpy"]], "model_name (pybrops.model.gmod.genomicmodel.genomicmodel property)": [[773, "pybrops.model.gmod.GenomicModel.GenomicModel.model_name"]], "nexplan (pybrops.model.gmod.genomicmodel.genomicmodel property)": [[773, "pybrops.model.gmod.GenomicModel.GenomicModel.nexplan"]], "nparam (pybrops.model.gmod.genomicmodel.genomicmodel property)": [[773, "pybrops.model.gmod.GenomicModel.GenomicModel.nparam"]], "ntrait (pybrops.model.gmod.genomicmodel.genomicmodel property)": [[773, "pybrops.model.gmod.GenomicModel.GenomicModel.ntrait"]], "predict() (pybrops.model.gmod.genomicmodel.genomicmodel method)": [[773, "pybrops.model.gmod.GenomicModel.GenomicModel.predict"]], "predict_numpy() (pybrops.model.gmod.genomicmodel.genomicmodel method)": [[773, "pybrops.model.gmod.GenomicModel.GenomicModel.predict_numpy"]], "score() (pybrops.model.gmod.genomicmodel.genomicmodel method)": [[773, "pybrops.model.gmod.GenomicModel.GenomicModel.score"]], "score_numpy() (pybrops.model.gmod.genomicmodel.genomicmodel method)": [[773, "pybrops.model.gmod.GenomicModel.GenomicModel.score_numpy"]], "to_hdf5() (pybrops.model.gmod.genomicmodel.genomicmodel method)": [[773, "pybrops.model.gmod.GenomicModel.GenomicModel.to_hdf5"]], "trait (pybrops.model.gmod.genomicmodel.genomicmodel property)": [[773, "pybrops.model.gmod.GenomicModel.GenomicModel.trait"]], "usl() (pybrops.model.gmod.genomicmodel.genomicmodel method)": [[773, "pybrops.model.gmod.GenomicModel.GenomicModel.usl"]], "usl_numpy() (pybrops.model.gmod.genomicmodel.genomicmodel method)": [[773, "pybrops.model.gmod.GenomicModel.GenomicModel.usl_numpy"]], "var_a() (pybrops.model.gmod.genomicmodel.genomicmodel method)": [[773, "pybrops.model.gmod.GenomicModel.GenomicModel.var_A"], [773, "pybrops.model.gmod.GenomicModel.GenomicModel.var_a"]], "var_a_numpy() (pybrops.model.gmod.genomicmodel.genomicmodel method)": [[773, "pybrops.model.gmod.GenomicModel.GenomicModel.var_A_numpy"], [773, "pybrops.model.gmod.GenomicModel.GenomicModel.var_a_numpy"]], "var_g() (pybrops.model.gmod.genomicmodel.genomicmodel method)": [[773, "pybrops.model.gmod.GenomicModel.GenomicModel.var_G"]], "var_g_numpy() (pybrops.model.gmod.genomicmodel.genomicmodel method)": [[773, "pybrops.model.gmod.GenomicModel.GenomicModel.var_G_numpy"]], "check_is_genomicmodel() (in module pybrops.model.gmod.genomicmodel)": [[774, "pybrops.model.gmod.GenomicModel.check_is_GenomicModel"]], "pybrops.model.gmod.lineargenomicmodel": [[775, "module-pybrops.model.gmod.LinearGenomicModel"]], "lineargenomicmodel (class in pybrops.model.gmod.lineargenomicmodel)": [[776, "pybrops.model.gmod.LinearGenomicModel.LinearGenomicModel"]], "beta (pybrops.model.gmod.lineargenomicmodel.lineargenomicmodel property)": [[776, "pybrops.model.gmod.LinearGenomicModel.LinearGenomicModel.beta"]], "bulmer() (pybrops.model.gmod.lineargenomicmodel.lineargenomicmodel method)": [[776, "pybrops.model.gmod.LinearGenomicModel.LinearGenomicModel.bulmer"]], "bulmer_numpy() (pybrops.model.gmod.lineargenomicmodel.lineargenomicmodel method)": [[776, "pybrops.model.gmod.LinearGenomicModel.LinearGenomicModel.bulmer_numpy"]], "copy() (pybrops.model.gmod.lineargenomicmodel.lineargenomicmodel method)": [[776, "pybrops.model.gmod.LinearGenomicModel.LinearGenomicModel.copy"]], "daavail() (pybrops.model.gmod.lineargenomicmodel.lineargenomicmodel method)": [[776, "pybrops.model.gmod.LinearGenomicModel.LinearGenomicModel.daavail"]], "dacount() (pybrops.model.gmod.lineargenomicmodel.lineargenomicmodel method)": [[776, "pybrops.model.gmod.LinearGenomicModel.LinearGenomicModel.dacount"]], "dafixed() (pybrops.model.gmod.lineargenomicmodel.lineargenomicmodel method)": [[776, "pybrops.model.gmod.LinearGenomicModel.LinearGenomicModel.dafixed"]], "dafreq() (pybrops.model.gmod.lineargenomicmodel.lineargenomicmodel method)": [[776, "pybrops.model.gmod.LinearGenomicModel.LinearGenomicModel.dafreq"]], "deepcopy() (pybrops.model.gmod.lineargenomicmodel.lineargenomicmodel method)": [[776, "pybrops.model.gmod.LinearGenomicModel.LinearGenomicModel.deepcopy"]], "faavail() (pybrops.model.gmod.lineargenomicmodel.lineargenomicmodel method)": [[776, "pybrops.model.gmod.LinearGenomicModel.LinearGenomicModel.faavail"]], "facount() (pybrops.model.gmod.lineargenomicmodel.lineargenomicmodel method)": [[776, "pybrops.model.gmod.LinearGenomicModel.LinearGenomicModel.facount"]], "fafixed() (pybrops.model.gmod.lineargenomicmodel.lineargenomicmodel method)": [[776, "pybrops.model.gmod.LinearGenomicModel.LinearGenomicModel.fafixed"]], "fafreq() (pybrops.model.gmod.lineargenomicmodel.lineargenomicmodel method)": [[776, "pybrops.model.gmod.LinearGenomicModel.LinearGenomicModel.fafreq"]], "fit() (pybrops.model.gmod.lineargenomicmodel.lineargenomicmodel class method)": [[776, "pybrops.model.gmod.LinearGenomicModel.LinearGenomicModel.fit"]], "fit_numpy() (pybrops.model.gmod.lineargenomicmodel.lineargenomicmodel class method)": [[776, "pybrops.model.gmod.LinearGenomicModel.LinearGenomicModel.fit_numpy"]], "from_csv_dict() (pybrops.model.gmod.lineargenomicmodel.lineargenomicmodel class method)": [[776, "pybrops.model.gmod.LinearGenomicModel.LinearGenomicModel.from_csv_dict"]], "from_hdf5() (pybrops.model.gmod.lineargenomicmodel.lineargenomicmodel class method)": [[776, "pybrops.model.gmod.LinearGenomicModel.LinearGenomicModel.from_hdf5"]], "from_pandas_dict() (pybrops.model.gmod.lineargenomicmodel.lineargenomicmodel class method)": [[776, "pybrops.model.gmod.LinearGenomicModel.LinearGenomicModel.from_pandas_dict"]], "gebv() (pybrops.model.gmod.lineargenomicmodel.lineargenomicmodel method)": [[776, "pybrops.model.gmod.LinearGenomicModel.LinearGenomicModel.gebv"]], "gebv_numpy() (pybrops.model.gmod.lineargenomicmodel.lineargenomicmodel method)": [[776, "pybrops.model.gmod.LinearGenomicModel.LinearGenomicModel.gebv_numpy"]], "gegv() (pybrops.model.gmod.lineargenomicmodel.lineargenomicmodel method)": [[776, "pybrops.model.gmod.LinearGenomicModel.LinearGenomicModel.gegv"]], "gegv_numpy() (pybrops.model.gmod.lineargenomicmodel.lineargenomicmodel method)": [[776, "pybrops.model.gmod.LinearGenomicModel.LinearGenomicModel.gegv_numpy"]], "hyperparams (pybrops.model.gmod.lineargenomicmodel.lineargenomicmodel property)": [[776, "pybrops.model.gmod.LinearGenomicModel.LinearGenomicModel.hyperparams"]], "lsl() (pybrops.model.gmod.lineargenomicmodel.lineargenomicmodel method)": [[776, "pybrops.model.gmod.LinearGenomicModel.LinearGenomicModel.lsl"]], "lsl_numpy() (pybrops.model.gmod.lineargenomicmodel.lineargenomicmodel method)": [[776, "pybrops.model.gmod.LinearGenomicModel.LinearGenomicModel.lsl_numpy"]], "model_name (pybrops.model.gmod.lineargenomicmodel.lineargenomicmodel property)": [[776, "pybrops.model.gmod.LinearGenomicModel.LinearGenomicModel.model_name"]], "nexplan (pybrops.model.gmod.lineargenomicmodel.lineargenomicmodel property)": [[776, "pybrops.model.gmod.LinearGenomicModel.LinearGenomicModel.nexplan"]], "nexplan_beta (pybrops.model.gmod.lineargenomicmodel.lineargenomicmodel property)": [[776, "pybrops.model.gmod.LinearGenomicModel.LinearGenomicModel.nexplan_beta"]], "nexplan_u (pybrops.model.gmod.lineargenomicmodel.lineargenomicmodel property)": [[776, "pybrops.model.gmod.LinearGenomicModel.LinearGenomicModel.nexplan_u"]], "nparam (pybrops.model.gmod.lineargenomicmodel.lineargenomicmodel property)": [[776, "pybrops.model.gmod.LinearGenomicModel.LinearGenomicModel.nparam"]], "nparam_beta (pybrops.model.gmod.lineargenomicmodel.lineargenomicmodel property)": [[776, "pybrops.model.gmod.LinearGenomicModel.LinearGenomicModel.nparam_beta"]], "nparam_u (pybrops.model.gmod.lineargenomicmodel.lineargenomicmodel property)": [[776, "pybrops.model.gmod.LinearGenomicModel.LinearGenomicModel.nparam_u"]], "ntrait (pybrops.model.gmod.lineargenomicmodel.lineargenomicmodel property)": [[776, "pybrops.model.gmod.LinearGenomicModel.LinearGenomicModel.ntrait"]], "predict() (pybrops.model.gmod.lineargenomicmodel.lineargenomicmodel method)": [[776, "pybrops.model.gmod.LinearGenomicModel.LinearGenomicModel.predict"]], "predict_numpy() (pybrops.model.gmod.lineargenomicmodel.lineargenomicmodel method)": [[776, "pybrops.model.gmod.LinearGenomicModel.LinearGenomicModel.predict_numpy"]], "score() (pybrops.model.gmod.lineargenomicmodel.lineargenomicmodel method)": [[776, "pybrops.model.gmod.LinearGenomicModel.LinearGenomicModel.score"]], "score_numpy() (pybrops.model.gmod.lineargenomicmodel.lineargenomicmodel method)": [[776, "pybrops.model.gmod.LinearGenomicModel.LinearGenomicModel.score_numpy"]], "to_csv_dict() (pybrops.model.gmod.lineargenomicmodel.lineargenomicmodel method)": [[776, "pybrops.model.gmod.LinearGenomicModel.LinearGenomicModel.to_csv_dict"]], "to_hdf5() (pybrops.model.gmod.lineargenomicmodel.lineargenomicmodel method)": [[776, "pybrops.model.gmod.LinearGenomicModel.LinearGenomicModel.to_hdf5"]], "to_pandas_dict() (pybrops.model.gmod.lineargenomicmodel.lineargenomicmodel method)": [[776, "pybrops.model.gmod.LinearGenomicModel.LinearGenomicModel.to_pandas_dict"]], "trait (pybrops.model.gmod.lineargenomicmodel.lineargenomicmodel property)": [[776, "pybrops.model.gmod.LinearGenomicModel.LinearGenomicModel.trait"]], "u (pybrops.model.gmod.lineargenomicmodel.lineargenomicmodel property)": [[776, "pybrops.model.gmod.LinearGenomicModel.LinearGenomicModel.u"]], "usl() (pybrops.model.gmod.lineargenomicmodel.lineargenomicmodel method)": [[776, "pybrops.model.gmod.LinearGenomicModel.LinearGenomicModel.usl"]], "usl_numpy() (pybrops.model.gmod.lineargenomicmodel.lineargenomicmodel method)": [[776, "pybrops.model.gmod.LinearGenomicModel.LinearGenomicModel.usl_numpy"]], "var_a() (pybrops.model.gmod.lineargenomicmodel.lineargenomicmodel method)": [[776, "pybrops.model.gmod.LinearGenomicModel.LinearGenomicModel.var_A"], [776, "pybrops.model.gmod.LinearGenomicModel.LinearGenomicModel.var_a"]], "var_a_numpy() (pybrops.model.gmod.lineargenomicmodel.lineargenomicmodel method)": [[776, "pybrops.model.gmod.LinearGenomicModel.LinearGenomicModel.var_A_numpy"], [776, "pybrops.model.gmod.LinearGenomicModel.LinearGenomicModel.var_a_numpy"]], "var_g() (pybrops.model.gmod.lineargenomicmodel.lineargenomicmodel method)": [[776, "pybrops.model.gmod.LinearGenomicModel.LinearGenomicModel.var_G"]], "var_g_numpy() (pybrops.model.gmod.lineargenomicmodel.lineargenomicmodel method)": [[776, "pybrops.model.gmod.LinearGenomicModel.LinearGenomicModel.var_G_numpy"]], "check_is_lineargenomicmodel() (in module pybrops.model.gmod.lineargenomicmodel)": [[777, "pybrops.model.gmod.LinearGenomicModel.check_is_LinearGenomicModel"]], "pybrops.model.gmod.nonlineargenomicmodel": [[778, "module-pybrops.model.gmod.NonlinearGenomicModel"]], "nonlineargenomicmodel (class in pybrops.model.gmod.nonlineargenomicmodel)": [[779, "pybrops.model.gmod.NonlinearGenomicModel.NonlinearGenomicModel"]], "bulmer() (pybrops.model.gmod.nonlineargenomicmodel.nonlineargenomicmodel method)": [[779, "pybrops.model.gmod.NonlinearGenomicModel.NonlinearGenomicModel.bulmer"]], "bulmer_numpy() (pybrops.model.gmod.nonlineargenomicmodel.nonlineargenomicmodel method)": [[779, "pybrops.model.gmod.NonlinearGenomicModel.NonlinearGenomicModel.bulmer_numpy"]], "copy() (pybrops.model.gmod.nonlineargenomicmodel.nonlineargenomicmodel method)": [[779, "pybrops.model.gmod.NonlinearGenomicModel.NonlinearGenomicModel.copy"]], "daavail() (pybrops.model.gmod.nonlineargenomicmodel.nonlineargenomicmodel method)": [[779, "pybrops.model.gmod.NonlinearGenomicModel.NonlinearGenomicModel.daavail"]], "dacount() (pybrops.model.gmod.nonlineargenomicmodel.nonlineargenomicmodel method)": [[779, "pybrops.model.gmod.NonlinearGenomicModel.NonlinearGenomicModel.dacount"]], "dafixed() (pybrops.model.gmod.nonlineargenomicmodel.nonlineargenomicmodel method)": [[779, "pybrops.model.gmod.NonlinearGenomicModel.NonlinearGenomicModel.dafixed"]], "dafreq() (pybrops.model.gmod.nonlineargenomicmodel.nonlineargenomicmodel method)": [[779, "pybrops.model.gmod.NonlinearGenomicModel.NonlinearGenomicModel.dafreq"]], "deepcopy() (pybrops.model.gmod.nonlineargenomicmodel.nonlineargenomicmodel method)": [[779, "pybrops.model.gmod.NonlinearGenomicModel.NonlinearGenomicModel.deepcopy"]], "faavail() (pybrops.model.gmod.nonlineargenomicmodel.nonlineargenomicmodel method)": [[779, "pybrops.model.gmod.NonlinearGenomicModel.NonlinearGenomicModel.faavail"]], "facount() (pybrops.model.gmod.nonlineargenomicmodel.nonlineargenomicmodel method)": [[779, "pybrops.model.gmod.NonlinearGenomicModel.NonlinearGenomicModel.facount"]], "fafixed() (pybrops.model.gmod.nonlineargenomicmodel.nonlineargenomicmodel method)": [[779, "pybrops.model.gmod.NonlinearGenomicModel.NonlinearGenomicModel.fafixed"]], "fafreq() (pybrops.model.gmod.nonlineargenomicmodel.nonlineargenomicmodel method)": [[779, "pybrops.model.gmod.NonlinearGenomicModel.NonlinearGenomicModel.fafreq"]], "fit() (pybrops.model.gmod.nonlineargenomicmodel.nonlineargenomicmodel class method)": [[779, "pybrops.model.gmod.NonlinearGenomicModel.NonlinearGenomicModel.fit"]], "fit_numpy() (pybrops.model.gmod.nonlineargenomicmodel.nonlineargenomicmodel class method)": [[779, "pybrops.model.gmod.NonlinearGenomicModel.NonlinearGenomicModel.fit_numpy"]], "from_hdf5() (pybrops.model.gmod.nonlineargenomicmodel.nonlineargenomicmodel class method)": [[779, "pybrops.model.gmod.NonlinearGenomicModel.NonlinearGenomicModel.from_hdf5"]], "gebv() (pybrops.model.gmod.nonlineargenomicmodel.nonlineargenomicmodel method)": [[779, "pybrops.model.gmod.NonlinearGenomicModel.NonlinearGenomicModel.gebv"]], "gebv_numpy() (pybrops.model.gmod.nonlineargenomicmodel.nonlineargenomicmodel method)": [[779, "pybrops.model.gmod.NonlinearGenomicModel.NonlinearGenomicModel.gebv_numpy"]], "gegv() (pybrops.model.gmod.nonlineargenomicmodel.nonlineargenomicmodel method)": [[779, "pybrops.model.gmod.NonlinearGenomicModel.NonlinearGenomicModel.gegv"]], "gegv_numpy() (pybrops.model.gmod.nonlineargenomicmodel.nonlineargenomicmodel method)": [[779, "pybrops.model.gmod.NonlinearGenomicModel.NonlinearGenomicModel.gegv_numpy"]], "hyperparams (pybrops.model.gmod.nonlineargenomicmodel.nonlineargenomicmodel property)": [[779, "pybrops.model.gmod.NonlinearGenomicModel.NonlinearGenomicModel.hyperparams"]], "lsl() (pybrops.model.gmod.nonlineargenomicmodel.nonlineargenomicmodel method)": [[779, "pybrops.model.gmod.NonlinearGenomicModel.NonlinearGenomicModel.lsl"]], "lsl_numpy() (pybrops.model.gmod.nonlineargenomicmodel.nonlineargenomicmodel method)": [[779, "pybrops.model.gmod.NonlinearGenomicModel.NonlinearGenomicModel.lsl_numpy"]], "model_name (pybrops.model.gmod.nonlineargenomicmodel.nonlineargenomicmodel property)": [[779, "pybrops.model.gmod.NonlinearGenomicModel.NonlinearGenomicModel.model_name"]], "nexplan (pybrops.model.gmod.nonlineargenomicmodel.nonlineargenomicmodel property)": [[779, "pybrops.model.gmod.NonlinearGenomicModel.NonlinearGenomicModel.nexplan"]], "nparam (pybrops.model.gmod.nonlineargenomicmodel.nonlineargenomicmodel property)": [[779, "pybrops.model.gmod.NonlinearGenomicModel.NonlinearGenomicModel.nparam"]], "ntrait (pybrops.model.gmod.nonlineargenomicmodel.nonlineargenomicmodel property)": [[779, "pybrops.model.gmod.NonlinearGenomicModel.NonlinearGenomicModel.ntrait"]], "predict() (pybrops.model.gmod.nonlineargenomicmodel.nonlineargenomicmodel method)": [[779, "pybrops.model.gmod.NonlinearGenomicModel.NonlinearGenomicModel.predict"]], "predict_numpy() (pybrops.model.gmod.nonlineargenomicmodel.nonlineargenomicmodel method)": [[779, "pybrops.model.gmod.NonlinearGenomicModel.NonlinearGenomicModel.predict_numpy"]], "score() (pybrops.model.gmod.nonlineargenomicmodel.nonlineargenomicmodel method)": [[779, "pybrops.model.gmod.NonlinearGenomicModel.NonlinearGenomicModel.score"]], "score_numpy() (pybrops.model.gmod.nonlineargenomicmodel.nonlineargenomicmodel method)": [[779, "pybrops.model.gmod.NonlinearGenomicModel.NonlinearGenomicModel.score_numpy"]], "to_hdf5() (pybrops.model.gmod.nonlineargenomicmodel.nonlineargenomicmodel method)": [[779, "pybrops.model.gmod.NonlinearGenomicModel.NonlinearGenomicModel.to_hdf5"]], "trait (pybrops.model.gmod.nonlineargenomicmodel.nonlineargenomicmodel property)": [[779, "pybrops.model.gmod.NonlinearGenomicModel.NonlinearGenomicModel.trait"]], "usl() (pybrops.model.gmod.nonlineargenomicmodel.nonlineargenomicmodel method)": [[779, "pybrops.model.gmod.NonlinearGenomicModel.NonlinearGenomicModel.usl"]], "usl_numpy() (pybrops.model.gmod.nonlineargenomicmodel.nonlineargenomicmodel method)": [[779, "pybrops.model.gmod.NonlinearGenomicModel.NonlinearGenomicModel.usl_numpy"]], "var_a() (pybrops.model.gmod.nonlineargenomicmodel.nonlineargenomicmodel method)": [[779, "pybrops.model.gmod.NonlinearGenomicModel.NonlinearGenomicModel.var_A"], [779, "pybrops.model.gmod.NonlinearGenomicModel.NonlinearGenomicModel.var_a"]], "var_a_numpy() (pybrops.model.gmod.nonlineargenomicmodel.nonlineargenomicmodel method)": [[779, "pybrops.model.gmod.NonlinearGenomicModel.NonlinearGenomicModel.var_A_numpy"], [779, "pybrops.model.gmod.NonlinearGenomicModel.NonlinearGenomicModel.var_a_numpy"]], "var_g() (pybrops.model.gmod.nonlineargenomicmodel.nonlineargenomicmodel method)": [[779, "pybrops.model.gmod.NonlinearGenomicModel.NonlinearGenomicModel.var_G"]], "var_g_numpy() (pybrops.model.gmod.nonlineargenomicmodel.nonlineargenomicmodel method)": [[779, "pybrops.model.gmod.NonlinearGenomicModel.NonlinearGenomicModel.var_G_numpy"]], "check_is_nonlineargenomicmodel() (in module pybrops.model.gmod.nonlineargenomicmodel)": [[780, "pybrops.model.gmod.NonlinearGenomicModel.check_is_NonlinearGenomicModel"]], "pybrops.model.gmod.rrblupmodel0": [[781, "module-pybrops.model.gmod.rrBLUPModel0"]], "check_is_rrblupmodel0() (in module pybrops.model.gmod.rrblupmodel0)": [[782, "pybrops.model.gmod.rrBLUPModel0.check_is_rrBLUPModel0"]], "gauss_seidel() (in module pybrops.model.gmod.rrblupmodel0)": [[783, "pybrops.model.gmod.rrBLUPModel0.gauss_seidel"]], "beta (pybrops.model.gmod.rrblupmodel0.rrblupmodel0 property)": [[784, "pybrops.model.gmod.rrBLUPModel0.rrBLUPModel0.beta"]], "bulmer() (pybrops.model.gmod.rrblupmodel0.rrblupmodel0 method)": [[784, "pybrops.model.gmod.rrBLUPModel0.rrBLUPModel0.bulmer"]], "bulmer_numpy() (pybrops.model.gmod.rrblupmodel0.rrblupmodel0 method)": [[784, "pybrops.model.gmod.rrBLUPModel0.rrBLUPModel0.bulmer_numpy"]], "copy() (pybrops.model.gmod.rrblupmodel0.rrblupmodel0 method)": [[784, "pybrops.model.gmod.rrBLUPModel0.rrBLUPModel0.copy"]], "daavail() (pybrops.model.gmod.rrblupmodel0.rrblupmodel0 method)": [[784, "pybrops.model.gmod.rrBLUPModel0.rrBLUPModel0.daavail"]], "dacount() (pybrops.model.gmod.rrblupmodel0.rrblupmodel0 method)": [[784, "pybrops.model.gmod.rrBLUPModel0.rrBLUPModel0.dacount"]], "dafixed() (pybrops.model.gmod.rrblupmodel0.rrblupmodel0 method)": [[784, "pybrops.model.gmod.rrBLUPModel0.rrBLUPModel0.dafixed"]], "dafreq() (pybrops.model.gmod.rrblupmodel0.rrblupmodel0 method)": [[784, "pybrops.model.gmod.rrBLUPModel0.rrBLUPModel0.dafreq"]], "deepcopy() (pybrops.model.gmod.rrblupmodel0.rrblupmodel0 method)": [[784, "pybrops.model.gmod.rrBLUPModel0.rrBLUPModel0.deepcopy"]], "faavail() (pybrops.model.gmod.rrblupmodel0.rrblupmodel0 method)": [[784, "pybrops.model.gmod.rrBLUPModel0.rrBLUPModel0.faavail"]], "facount() (pybrops.model.gmod.rrblupmodel0.rrblupmodel0 method)": [[784, "pybrops.model.gmod.rrBLUPModel0.rrBLUPModel0.facount"]], "fafixed() (pybrops.model.gmod.rrblupmodel0.rrblupmodel0 method)": [[784, "pybrops.model.gmod.rrBLUPModel0.rrBLUPModel0.fafixed"]], "fafreq() (pybrops.model.gmod.rrblupmodel0.rrblupmodel0 method)": [[784, "pybrops.model.gmod.rrBLUPModel0.rrBLUPModel0.fafreq"]], "fit() (pybrops.model.gmod.rrblupmodel0.rrblupmodel0 class method)": [[784, "pybrops.model.gmod.rrBLUPModel0.rrBLUPModel0.fit"]], "fit_numpy() (pybrops.model.gmod.rrblupmodel0.rrblupmodel0 class method)": [[784, "pybrops.model.gmod.rrBLUPModel0.rrBLUPModel0.fit_numpy"]], "from_csv_dict() (pybrops.model.gmod.rrblupmodel0.rrblupmodel0 class method)": [[784, "pybrops.model.gmod.rrBLUPModel0.rrBLUPModel0.from_csv_dict"]], "from_hdf5() (pybrops.model.gmod.rrblupmodel0.rrblupmodel0 class method)": [[784, "pybrops.model.gmod.rrBLUPModel0.rrBLUPModel0.from_hdf5"]], "from_pandas_dict() (pybrops.model.gmod.rrblupmodel0.rrblupmodel0 class method)": [[784, "pybrops.model.gmod.rrBLUPModel0.rrBLUPModel0.from_pandas_dict"]], "gebv() (pybrops.model.gmod.rrblupmodel0.rrblupmodel0 method)": [[784, "pybrops.model.gmod.rrBLUPModel0.rrBLUPModel0.gebv"]], "gebv_numpy() (pybrops.model.gmod.rrblupmodel0.rrblupmodel0 method)": [[784, "pybrops.model.gmod.rrBLUPModel0.rrBLUPModel0.gebv_numpy"]], "gegv() (pybrops.model.gmod.rrblupmodel0.rrblupmodel0 method)": [[784, "pybrops.model.gmod.rrBLUPModel0.rrBLUPModel0.gegv"]], "gegv_numpy() (pybrops.model.gmod.rrblupmodel0.rrblupmodel0 method)": [[784, "pybrops.model.gmod.rrBLUPModel0.rrBLUPModel0.gegv_numpy"]], "hyperparams (pybrops.model.gmod.rrblupmodel0.rrblupmodel0 property)": [[784, "pybrops.model.gmod.rrBLUPModel0.rrBLUPModel0.hyperparams"]], "lsl() (pybrops.model.gmod.rrblupmodel0.rrblupmodel0 method)": [[784, "pybrops.model.gmod.rrBLUPModel0.rrBLUPModel0.lsl"]], "lsl_numpy() (pybrops.model.gmod.rrblupmodel0.rrblupmodel0 method)": [[784, "pybrops.model.gmod.rrBLUPModel0.rrBLUPModel0.lsl_numpy"]], "method (pybrops.model.gmod.rrblupmodel0.rrblupmodel0 property)": [[784, "pybrops.model.gmod.rrBLUPModel0.rrBLUPModel0.method"]], "model_name (pybrops.model.gmod.rrblupmodel0.rrblupmodel0 property)": [[784, "pybrops.model.gmod.rrBLUPModel0.rrBLUPModel0.model_name"]], "nexplan (pybrops.model.gmod.rrblupmodel0.rrblupmodel0 property)": [[784, "pybrops.model.gmod.rrBLUPModel0.rrBLUPModel0.nexplan"]], "nexplan_beta (pybrops.model.gmod.rrblupmodel0.rrblupmodel0 property)": [[784, "pybrops.model.gmod.rrBLUPModel0.rrBLUPModel0.nexplan_beta"]], "nexplan_u (pybrops.model.gmod.rrblupmodel0.rrblupmodel0 property)": [[784, "pybrops.model.gmod.rrBLUPModel0.rrBLUPModel0.nexplan_u"]], "nexplan_u_a (pybrops.model.gmod.rrblupmodel0.rrblupmodel0 property)": [[784, "pybrops.model.gmod.rrBLUPModel0.rrBLUPModel0.nexplan_u_a"]], "nexplan_u_misc (pybrops.model.gmod.rrblupmodel0.rrblupmodel0 property)": [[784, "pybrops.model.gmod.rrBLUPModel0.rrBLUPModel0.nexplan_u_misc"]], "nparam (pybrops.model.gmod.rrblupmodel0.rrblupmodel0 property)": [[784, "pybrops.model.gmod.rrBLUPModel0.rrBLUPModel0.nparam"]], "nparam_beta (pybrops.model.gmod.rrblupmodel0.rrblupmodel0 property)": [[784, "pybrops.model.gmod.rrBLUPModel0.rrBLUPModel0.nparam_beta"]], "nparam_u (pybrops.model.gmod.rrblupmodel0.rrblupmodel0 property)": [[784, "pybrops.model.gmod.rrBLUPModel0.rrBLUPModel0.nparam_u"]], "nparam_u_a (pybrops.model.gmod.rrblupmodel0.rrblupmodel0 property)": [[784, "pybrops.model.gmod.rrBLUPModel0.rrBLUPModel0.nparam_u_a"]], "nparam_u_misc (pybrops.model.gmod.rrblupmodel0.rrblupmodel0 property)": [[784, "pybrops.model.gmod.rrBLUPModel0.rrBLUPModel0.nparam_u_misc"]], "ntrait (pybrops.model.gmod.rrblupmodel0.rrblupmodel0 property)": [[784, "pybrops.model.gmod.rrBLUPModel0.rrBLUPModel0.ntrait"]], "predict() (pybrops.model.gmod.rrblupmodel0.rrblupmodel0 method)": [[784, "pybrops.model.gmod.rrBLUPModel0.rrBLUPModel0.predict"]], "predict_numpy() (pybrops.model.gmod.rrblupmodel0.rrblupmodel0 method)": [[784, "pybrops.model.gmod.rrBLUPModel0.rrBLUPModel0.predict_numpy"]], "rrblupmodel0 (class in pybrops.model.gmod.rrblupmodel0)": [[784, "pybrops.model.gmod.rrBLUPModel0.rrBLUPModel0"]], "score() (pybrops.model.gmod.rrblupmodel0.rrblupmodel0 method)": [[784, "pybrops.model.gmod.rrBLUPModel0.rrBLUPModel0.score"]], "score_numpy() (pybrops.model.gmod.rrblupmodel0.rrblupmodel0 method)": [[784, "pybrops.model.gmod.rrBLUPModel0.rrBLUPModel0.score_numpy"]], "to_csv_dict() (pybrops.model.gmod.rrblupmodel0.rrblupmodel0 method)": [[784, "pybrops.model.gmod.rrBLUPModel0.rrBLUPModel0.to_csv_dict"]], "to_hdf5() (pybrops.model.gmod.rrblupmodel0.rrblupmodel0 method)": [[784, "pybrops.model.gmod.rrBLUPModel0.rrBLUPModel0.to_hdf5"]], "to_pandas_dict() (pybrops.model.gmod.rrblupmodel0.rrblupmodel0 method)": [[784, "pybrops.model.gmod.rrBLUPModel0.rrBLUPModel0.to_pandas_dict"]], "trait (pybrops.model.gmod.rrblupmodel0.rrblupmodel0 property)": [[784, "pybrops.model.gmod.rrBLUPModel0.rrBLUPModel0.trait"]], "u (pybrops.model.gmod.rrblupmodel0.rrblupmodel0 property)": [[784, "pybrops.model.gmod.rrBLUPModel0.rrBLUPModel0.u"]], "u_a (pybrops.model.gmod.rrblupmodel0.rrblupmodel0 property)": [[784, "pybrops.model.gmod.rrBLUPModel0.rrBLUPModel0.u_a"]], "u_misc (pybrops.model.gmod.rrblupmodel0.rrblupmodel0 property)": [[784, "pybrops.model.gmod.rrBLUPModel0.rrBLUPModel0.u_misc"]], "usl() (pybrops.model.gmod.rrblupmodel0.rrblupmodel0 method)": [[784, "pybrops.model.gmod.rrBLUPModel0.rrBLUPModel0.usl"]], "usl_numpy() (pybrops.model.gmod.rrblupmodel0.rrblupmodel0 method)": [[784, "pybrops.model.gmod.rrBLUPModel0.rrBLUPModel0.usl_numpy"]], "var_a() (pybrops.model.gmod.rrblupmodel0.rrblupmodel0 method)": [[784, "pybrops.model.gmod.rrBLUPModel0.rrBLUPModel0.var_A"], [784, "pybrops.model.gmod.rrBLUPModel0.rrBLUPModel0.var_a"]], "var_a_numpy() (pybrops.model.gmod.rrblupmodel0.rrblupmodel0 method)": [[784, "pybrops.model.gmod.rrBLUPModel0.rrBLUPModel0.var_A_numpy"], [784, "pybrops.model.gmod.rrBLUPModel0.rrBLUPModel0.var_a_numpy"]], "var_g() (pybrops.model.gmod.rrblupmodel0.rrblupmodel0 method)": [[784, "pybrops.model.gmod.rrBLUPModel0.rrBLUPModel0.var_G"]], "var_g_numpy() (pybrops.model.gmod.rrblupmodel0.rrblupmodel0 method)": [[784, "pybrops.model.gmod.rrBLUPModel0.rrBLUPModel0.var_G_numpy"]], "rrblup_ml0() (in module pybrops.model.gmod.rrblupmodel0)": [[785, "pybrops.model.gmod.rrBLUPModel0.rrBLUP_ML0"]], "rrblup_ml0_calc_g() (in module pybrops.model.gmod.rrblupmodel0)": [[786, "pybrops.model.gmod.rrBLUPModel0.rrBLUP_ML0_calc_G"]], "rrblup_ml0_calc_ztzpli() (in module pybrops.model.gmod.rrblupmodel0)": [[787, "pybrops.model.gmod.rrBLUPModel0.rrBLUP_ML0_calc_ZtZplI"]], "rrblup_ml0_calc_zty() (in module pybrops.model.gmod.rrblupmodel0)": [[788, "pybrops.model.gmod.rrBLUPModel0.rrBLUP_ML0_calc_Zty"]], "rrblup_ml0_calc_d_v() (in module pybrops.model.gmod.rrblupmodel0)": [[789, "pybrops.model.gmod.rrBLUPModel0.rrBLUP_ML0_calc_d_V"]], "rrblup_ml0_calc_etasq() (in module pybrops.model.gmod.rrblupmodel0)": [[790, "pybrops.model.gmod.rrBLUPModel0.rrBLUP_ML0_calc_etasq"]], "rrblup_ml0_calc_ridge() (in module pybrops.model.gmod.rrblupmodel0)": [[791, "pybrops.model.gmod.rrBLUPModel0.rrBLUP_ML0_calc_ridge"]], "rrblup_ml0_center_y() (in module pybrops.model.gmod.rrblupmodel0)": [[792, "pybrops.model.gmod.rrBLUPModel0.rrBLUP_ML0_center_y"]], "rrblup_ml0_neg2loglik_fast() (in module pybrops.model.gmod.rrblupmodel0)": [[793, "pybrops.model.gmod.rrBLUPModel0.rrBLUP_ML0_neg2LogLik_fast"]], "rrblup_ml0_nonzero_d_v() (in module pybrops.model.gmod.rrblupmodel0)": [[794, "pybrops.model.gmod.rrBLUPModel0.rrBLUP_ML0_nonzero_d_V"]], "pybrops.model.pcvmat": [[795, "module-pybrops.model.pcvmat"]], "pybrops.model.pcvmat.additiveprogenygeneticcovariancematrix": [[796, "module-pybrops.model.pcvmat.AdditiveProgenyGeneticCovarianceMatrix"]], "additiveprogenygeneticcovariancematrix (class in pybrops.model.pcvmat.additiveprogenygeneticcovariancematrix)": [[797, "pybrops.model.pcvmat.AdditiveProgenyGeneticCovarianceMatrix.AdditiveProgenyGeneticCovarianceMatrix"]], "__add__() (pybrops.model.pcvmat.additiveprogenygeneticcovariancematrix.additiveprogenygeneticcovariancematrix method)": [[797, "pybrops.model.pcvmat.AdditiveProgenyGeneticCovarianceMatrix.AdditiveProgenyGeneticCovarianceMatrix.__add__"]], "__mul__() (pybrops.model.pcvmat.additiveprogenygeneticcovariancematrix.additiveprogenygeneticcovariancematrix method)": [[797, "pybrops.model.pcvmat.AdditiveProgenyGeneticCovarianceMatrix.AdditiveProgenyGeneticCovarianceMatrix.__mul__"]], "adjoin() (pybrops.model.pcvmat.additiveprogenygeneticcovariancematrix.additiveprogenygeneticcovariancematrix method)": [[797, "pybrops.model.pcvmat.AdditiveProgenyGeneticCovarianceMatrix.AdditiveProgenyGeneticCovarianceMatrix.adjoin"]], "adjoin_taxa() (pybrops.model.pcvmat.additiveprogenygeneticcovariancematrix.additiveprogenygeneticcovariancematrix method)": [[797, "pybrops.model.pcvmat.AdditiveProgenyGeneticCovarianceMatrix.AdditiveProgenyGeneticCovarianceMatrix.adjoin_taxa"]], "adjoin_trait() (pybrops.model.pcvmat.additiveprogenygeneticcovariancematrix.additiveprogenygeneticcovariancematrix method)": [[797, "pybrops.model.pcvmat.AdditiveProgenyGeneticCovarianceMatrix.AdditiveProgenyGeneticCovarianceMatrix.adjoin_trait"]], "append() (pybrops.model.pcvmat.additiveprogenygeneticcovariancematrix.additiveprogenygeneticcovariancematrix method)": [[797, "pybrops.model.pcvmat.AdditiveProgenyGeneticCovarianceMatrix.AdditiveProgenyGeneticCovarianceMatrix.append"]], "append_taxa() (pybrops.model.pcvmat.additiveprogenygeneticcovariancematrix.additiveprogenygeneticcovariancematrix method)": [[797, "pybrops.model.pcvmat.AdditiveProgenyGeneticCovarianceMatrix.AdditiveProgenyGeneticCovarianceMatrix.append_taxa"]], "append_trait() (pybrops.model.pcvmat.additiveprogenygeneticcovariancematrix.additiveprogenygeneticcovariancematrix method)": [[797, "pybrops.model.pcvmat.AdditiveProgenyGeneticCovarianceMatrix.AdditiveProgenyGeneticCovarianceMatrix.append_trait"]], "concat() (pybrops.model.pcvmat.additiveprogenygeneticcovariancematrix.additiveprogenygeneticcovariancematrix class method)": [[797, "pybrops.model.pcvmat.AdditiveProgenyGeneticCovarianceMatrix.AdditiveProgenyGeneticCovarianceMatrix.concat"]], "concat_taxa() (pybrops.model.pcvmat.additiveprogenygeneticcovariancematrix.additiveprogenygeneticcovariancematrix class method)": [[797, "pybrops.model.pcvmat.AdditiveProgenyGeneticCovarianceMatrix.AdditiveProgenyGeneticCovarianceMatrix.concat_taxa"]], "concat_trait() (pybrops.model.pcvmat.additiveprogenygeneticcovariancematrix.additiveprogenygeneticcovariancematrix class method)": [[797, "pybrops.model.pcvmat.AdditiveProgenyGeneticCovarianceMatrix.AdditiveProgenyGeneticCovarianceMatrix.concat_trait"]], "copy() (pybrops.model.pcvmat.additiveprogenygeneticcovariancematrix.additiveprogenygeneticcovariancematrix method)": [[797, "pybrops.model.pcvmat.AdditiveProgenyGeneticCovarianceMatrix.AdditiveProgenyGeneticCovarianceMatrix.copy"]], "deepcopy() (pybrops.model.pcvmat.additiveprogenygeneticcovariancematrix.additiveprogenygeneticcovariancematrix method)": [[797, "pybrops.model.pcvmat.AdditiveProgenyGeneticCovarianceMatrix.AdditiveProgenyGeneticCovarianceMatrix.deepcopy"]], "delete() (pybrops.model.pcvmat.additiveprogenygeneticcovariancematrix.additiveprogenygeneticcovariancematrix method)": [[797, "pybrops.model.pcvmat.AdditiveProgenyGeneticCovarianceMatrix.AdditiveProgenyGeneticCovarianceMatrix.delete"]], "delete_taxa() (pybrops.model.pcvmat.additiveprogenygeneticcovariancematrix.additiveprogenygeneticcovariancematrix method)": [[797, "pybrops.model.pcvmat.AdditiveProgenyGeneticCovarianceMatrix.AdditiveProgenyGeneticCovarianceMatrix.delete_taxa"]], "delete_trait() (pybrops.model.pcvmat.additiveprogenygeneticcovariancematrix.additiveprogenygeneticcovariancematrix method)": [[797, "pybrops.model.pcvmat.AdditiveProgenyGeneticCovarianceMatrix.AdditiveProgenyGeneticCovarianceMatrix.delete_trait"]], "epgc (pybrops.model.pcvmat.additiveprogenygeneticcovariancematrix.additiveprogenygeneticcovariancematrix property)": [[797, "pybrops.model.pcvmat.AdditiveProgenyGeneticCovarianceMatrix.AdditiveProgenyGeneticCovarianceMatrix.epgc"]], "from_algmod() (pybrops.model.pcvmat.additiveprogenygeneticcovariancematrix.additiveprogenygeneticcovariancematrix class method)": [[797, "pybrops.model.pcvmat.AdditiveProgenyGeneticCovarianceMatrix.AdditiveProgenyGeneticCovarianceMatrix.from_algmod"]], "from_csv() (pybrops.model.pcvmat.additiveprogenygeneticcovariancematrix.additiveprogenygeneticcovariancematrix class method)": [[797, "pybrops.model.pcvmat.AdditiveProgenyGeneticCovarianceMatrix.AdditiveProgenyGeneticCovarianceMatrix.from_csv"]], "from_gmod() (pybrops.model.pcvmat.additiveprogenygeneticcovariancematrix.additiveprogenygeneticcovariancematrix class method)": [[797, "pybrops.model.pcvmat.AdditiveProgenyGeneticCovarianceMatrix.AdditiveProgenyGeneticCovarianceMatrix.from_gmod"]], "from_hdf5() (pybrops.model.pcvmat.additiveprogenygeneticcovariancematrix.additiveprogenygeneticcovariancematrix class method)": [[797, "pybrops.model.pcvmat.AdditiveProgenyGeneticCovarianceMatrix.AdditiveProgenyGeneticCovarianceMatrix.from_hdf5"]], "from_pandas() (pybrops.model.pcvmat.additiveprogenygeneticcovariancematrix.additiveprogenygeneticcovariancematrix class method)": [[797, "pybrops.model.pcvmat.AdditiveProgenyGeneticCovarianceMatrix.AdditiveProgenyGeneticCovarianceMatrix.from_pandas"]], "group() (pybrops.model.pcvmat.additiveprogenygeneticcovariancematrix.additiveprogenygeneticcovariancematrix method)": [[797, "pybrops.model.pcvmat.AdditiveProgenyGeneticCovarianceMatrix.AdditiveProgenyGeneticCovarianceMatrix.group"]], "group_taxa() (pybrops.model.pcvmat.additiveprogenygeneticcovariancematrix.additiveprogenygeneticcovariancematrix method)": [[797, "pybrops.model.pcvmat.AdditiveProgenyGeneticCovarianceMatrix.AdditiveProgenyGeneticCovarianceMatrix.group_taxa"]], "incorp() (pybrops.model.pcvmat.additiveprogenygeneticcovariancematrix.additiveprogenygeneticcovariancematrix method)": [[797, "pybrops.model.pcvmat.AdditiveProgenyGeneticCovarianceMatrix.AdditiveProgenyGeneticCovarianceMatrix.incorp"]], "incorp_taxa() (pybrops.model.pcvmat.additiveprogenygeneticcovariancematrix.additiveprogenygeneticcovariancematrix method)": [[797, "pybrops.model.pcvmat.AdditiveProgenyGeneticCovarianceMatrix.AdditiveProgenyGeneticCovarianceMatrix.incorp_taxa"]], "incorp_trait() (pybrops.model.pcvmat.additiveprogenygeneticcovariancematrix.additiveprogenygeneticcovariancematrix method)": [[797, "pybrops.model.pcvmat.AdditiveProgenyGeneticCovarianceMatrix.AdditiveProgenyGeneticCovarianceMatrix.incorp_trait"]], "insert() (pybrops.model.pcvmat.additiveprogenygeneticcovariancematrix.additiveprogenygeneticcovariancematrix method)": [[797, "pybrops.model.pcvmat.AdditiveProgenyGeneticCovarianceMatrix.AdditiveProgenyGeneticCovarianceMatrix.insert"]], "insert_taxa() (pybrops.model.pcvmat.additiveprogenygeneticcovariancematrix.additiveprogenygeneticcovariancematrix method)": [[797, "pybrops.model.pcvmat.AdditiveProgenyGeneticCovarianceMatrix.AdditiveProgenyGeneticCovarianceMatrix.insert_taxa"]], "insert_trait() (pybrops.model.pcvmat.additiveprogenygeneticcovariancematrix.additiveprogenygeneticcovariancematrix method)": [[797, "pybrops.model.pcvmat.AdditiveProgenyGeneticCovarianceMatrix.AdditiveProgenyGeneticCovarianceMatrix.insert_trait"]], "is_grouped() (pybrops.model.pcvmat.additiveprogenygeneticcovariancematrix.additiveprogenygeneticcovariancematrix method)": [[797, "pybrops.model.pcvmat.AdditiveProgenyGeneticCovarianceMatrix.AdditiveProgenyGeneticCovarianceMatrix.is_grouped"]], "is_grouped_taxa() (pybrops.model.pcvmat.additiveprogenygeneticcovariancematrix.additiveprogenygeneticcovariancematrix method)": [[797, "pybrops.model.pcvmat.AdditiveProgenyGeneticCovarianceMatrix.AdditiveProgenyGeneticCovarianceMatrix.is_grouped_taxa"]], "is_square() (pybrops.model.pcvmat.additiveprogenygeneticcovariancematrix.additiveprogenygeneticcovariancematrix method)": [[797, "pybrops.model.pcvmat.AdditiveProgenyGeneticCovarianceMatrix.AdditiveProgenyGeneticCovarianceMatrix.is_square"]], "is_square_taxa() (pybrops.model.pcvmat.additiveprogenygeneticcovariancematrix.additiveprogenygeneticcovariancematrix method)": [[797, "pybrops.model.pcvmat.AdditiveProgenyGeneticCovarianceMatrix.AdditiveProgenyGeneticCovarianceMatrix.is_square_taxa"]], "is_square_trait() (pybrops.model.pcvmat.additiveprogenygeneticcovariancematrix.additiveprogenygeneticcovariancematrix method)": [[797, "pybrops.model.pcvmat.AdditiveProgenyGeneticCovarianceMatrix.AdditiveProgenyGeneticCovarianceMatrix.is_square_trait"]], "lexsort() (pybrops.model.pcvmat.additiveprogenygeneticcovariancematrix.additiveprogenygeneticcovariancematrix method)": [[797, "pybrops.model.pcvmat.AdditiveProgenyGeneticCovarianceMatrix.AdditiveProgenyGeneticCovarianceMatrix.lexsort"]], "lexsort_taxa() (pybrops.model.pcvmat.additiveprogenygeneticcovariancematrix.additiveprogenygeneticcovariancematrix method)": [[797, "pybrops.model.pcvmat.AdditiveProgenyGeneticCovarianceMatrix.AdditiveProgenyGeneticCovarianceMatrix.lexsort_taxa"]], "lexsort_trait() (pybrops.model.pcvmat.additiveprogenygeneticcovariancematrix.additiveprogenygeneticcovariancematrix method)": [[797, "pybrops.model.pcvmat.AdditiveProgenyGeneticCovarianceMatrix.AdditiveProgenyGeneticCovarianceMatrix.lexsort_trait"]], "mat (pybrops.model.pcvmat.additiveprogenygeneticcovariancematrix.additiveprogenygeneticcovariancematrix property)": [[797, "pybrops.model.pcvmat.AdditiveProgenyGeneticCovarianceMatrix.AdditiveProgenyGeneticCovarianceMatrix.mat"]], "mat_ndim (pybrops.model.pcvmat.additiveprogenygeneticcovariancematrix.additiveprogenygeneticcovariancematrix property)": [[797, "pybrops.model.pcvmat.AdditiveProgenyGeneticCovarianceMatrix.AdditiveProgenyGeneticCovarianceMatrix.mat_ndim"]], "mat_shape (pybrops.model.pcvmat.additiveprogenygeneticcovariancematrix.additiveprogenygeneticcovariancematrix property)": [[797, "pybrops.model.pcvmat.AdditiveProgenyGeneticCovarianceMatrix.AdditiveProgenyGeneticCovarianceMatrix.mat_shape"]], "nsquare (pybrops.model.pcvmat.additiveprogenygeneticcovariancematrix.additiveprogenygeneticcovariancematrix property)": [[797, "pybrops.model.pcvmat.AdditiveProgenyGeneticCovarianceMatrix.AdditiveProgenyGeneticCovarianceMatrix.nsquare"]], "nsquare_taxa (pybrops.model.pcvmat.additiveprogenygeneticcovariancematrix.additiveprogenygeneticcovariancematrix property)": [[797, "pybrops.model.pcvmat.AdditiveProgenyGeneticCovarianceMatrix.AdditiveProgenyGeneticCovarianceMatrix.nsquare_taxa"]], "nsquare_trait (pybrops.model.pcvmat.additiveprogenygeneticcovariancematrix.additiveprogenygeneticcovariancematrix property)": [[797, "pybrops.model.pcvmat.AdditiveProgenyGeneticCovarianceMatrix.AdditiveProgenyGeneticCovarianceMatrix.nsquare_trait"]], "ntaxa (pybrops.model.pcvmat.additiveprogenygeneticcovariancematrix.additiveprogenygeneticcovariancematrix property)": [[797, "pybrops.model.pcvmat.AdditiveProgenyGeneticCovarianceMatrix.AdditiveProgenyGeneticCovarianceMatrix.ntaxa"]], "ntrait (pybrops.model.pcvmat.additiveprogenygeneticcovariancematrix.additiveprogenygeneticcovariancematrix property)": [[797, "pybrops.model.pcvmat.AdditiveProgenyGeneticCovarianceMatrix.AdditiveProgenyGeneticCovarianceMatrix.ntrait"]], "remove() (pybrops.model.pcvmat.additiveprogenygeneticcovariancematrix.additiveprogenygeneticcovariancematrix method)": [[797, "pybrops.model.pcvmat.AdditiveProgenyGeneticCovarianceMatrix.AdditiveProgenyGeneticCovarianceMatrix.remove"]], "remove_taxa() (pybrops.model.pcvmat.additiveprogenygeneticcovariancematrix.additiveprogenygeneticcovariancematrix method)": [[797, "pybrops.model.pcvmat.AdditiveProgenyGeneticCovarianceMatrix.AdditiveProgenyGeneticCovarianceMatrix.remove_taxa"]], "remove_trait() (pybrops.model.pcvmat.additiveprogenygeneticcovariancematrix.additiveprogenygeneticcovariancematrix method)": [[797, "pybrops.model.pcvmat.AdditiveProgenyGeneticCovarianceMatrix.AdditiveProgenyGeneticCovarianceMatrix.remove_trait"]], "reorder() (pybrops.model.pcvmat.additiveprogenygeneticcovariancematrix.additiveprogenygeneticcovariancematrix method)": [[797, "pybrops.model.pcvmat.AdditiveProgenyGeneticCovarianceMatrix.AdditiveProgenyGeneticCovarianceMatrix.reorder"]], "reorder_taxa() (pybrops.model.pcvmat.additiveprogenygeneticcovariancematrix.additiveprogenygeneticcovariancematrix method)": [[797, "pybrops.model.pcvmat.AdditiveProgenyGeneticCovarianceMatrix.AdditiveProgenyGeneticCovarianceMatrix.reorder_taxa"]], "reorder_trait() (pybrops.model.pcvmat.additiveprogenygeneticcovariancematrix.additiveprogenygeneticcovariancematrix method)": [[797, "pybrops.model.pcvmat.AdditiveProgenyGeneticCovarianceMatrix.AdditiveProgenyGeneticCovarianceMatrix.reorder_trait"]], "select() (pybrops.model.pcvmat.additiveprogenygeneticcovariancematrix.additiveprogenygeneticcovariancematrix method)": [[797, "pybrops.model.pcvmat.AdditiveProgenyGeneticCovarianceMatrix.AdditiveProgenyGeneticCovarianceMatrix.select"]], "select_taxa() (pybrops.model.pcvmat.additiveprogenygeneticcovariancematrix.additiveprogenygeneticcovariancematrix method)": [[797, "pybrops.model.pcvmat.AdditiveProgenyGeneticCovarianceMatrix.AdditiveProgenyGeneticCovarianceMatrix.select_taxa"]], "select_trait() (pybrops.model.pcvmat.additiveprogenygeneticcovariancematrix.additiveprogenygeneticcovariancematrix method)": [[797, "pybrops.model.pcvmat.AdditiveProgenyGeneticCovarianceMatrix.AdditiveProgenyGeneticCovarianceMatrix.select_trait"]], "sort() (pybrops.model.pcvmat.additiveprogenygeneticcovariancematrix.additiveprogenygeneticcovariancematrix method)": [[797, "pybrops.model.pcvmat.AdditiveProgenyGeneticCovarianceMatrix.AdditiveProgenyGeneticCovarianceMatrix.sort"]], "sort_taxa() (pybrops.model.pcvmat.additiveprogenygeneticcovariancematrix.additiveprogenygeneticcovariancematrix method)": [[797, "pybrops.model.pcvmat.AdditiveProgenyGeneticCovarianceMatrix.AdditiveProgenyGeneticCovarianceMatrix.sort_taxa"]], "sort_trait() (pybrops.model.pcvmat.additiveprogenygeneticcovariancematrix.additiveprogenygeneticcovariancematrix method)": [[797, "pybrops.model.pcvmat.AdditiveProgenyGeneticCovarianceMatrix.AdditiveProgenyGeneticCovarianceMatrix.sort_trait"]], "square_axes (pybrops.model.pcvmat.additiveprogenygeneticcovariancematrix.additiveprogenygeneticcovariancematrix property)": [[797, "pybrops.model.pcvmat.AdditiveProgenyGeneticCovarianceMatrix.AdditiveProgenyGeneticCovarianceMatrix.square_axes"]], "square_axes_len (pybrops.model.pcvmat.additiveprogenygeneticcovariancematrix.additiveprogenygeneticcovariancematrix property)": [[797, "pybrops.model.pcvmat.AdditiveProgenyGeneticCovarianceMatrix.AdditiveProgenyGeneticCovarianceMatrix.square_axes_len"]], "square_taxa_axes (pybrops.model.pcvmat.additiveprogenygeneticcovariancematrix.additiveprogenygeneticcovariancematrix property)": [[797, "pybrops.model.pcvmat.AdditiveProgenyGeneticCovarianceMatrix.AdditiveProgenyGeneticCovarianceMatrix.square_taxa_axes"]], "square_taxa_axes_len (pybrops.model.pcvmat.additiveprogenygeneticcovariancematrix.additiveprogenygeneticcovariancematrix property)": [[797, "pybrops.model.pcvmat.AdditiveProgenyGeneticCovarianceMatrix.AdditiveProgenyGeneticCovarianceMatrix.square_taxa_axes_len"]], "square_trait_axes (pybrops.model.pcvmat.additiveprogenygeneticcovariancematrix.additiveprogenygeneticcovariancematrix property)": [[797, "pybrops.model.pcvmat.AdditiveProgenyGeneticCovarianceMatrix.AdditiveProgenyGeneticCovarianceMatrix.square_trait_axes"]], "square_trait_axes_len (pybrops.model.pcvmat.additiveprogenygeneticcovariancematrix.additiveprogenygeneticcovariancematrix property)": [[797, "pybrops.model.pcvmat.AdditiveProgenyGeneticCovarianceMatrix.AdditiveProgenyGeneticCovarianceMatrix.square_trait_axes_len"]], "taxa (pybrops.model.pcvmat.additiveprogenygeneticcovariancematrix.additiveprogenygeneticcovariancematrix property)": [[797, "pybrops.model.pcvmat.AdditiveProgenyGeneticCovarianceMatrix.AdditiveProgenyGeneticCovarianceMatrix.taxa"]], "taxa_axis (pybrops.model.pcvmat.additiveprogenygeneticcovariancematrix.additiveprogenygeneticcovariancematrix property)": [[797, "pybrops.model.pcvmat.AdditiveProgenyGeneticCovarianceMatrix.AdditiveProgenyGeneticCovarianceMatrix.taxa_axis"]], "taxa_grp (pybrops.model.pcvmat.additiveprogenygeneticcovariancematrix.additiveprogenygeneticcovariancematrix property)": [[797, "pybrops.model.pcvmat.AdditiveProgenyGeneticCovarianceMatrix.AdditiveProgenyGeneticCovarianceMatrix.taxa_grp"]], "taxa_grp_len (pybrops.model.pcvmat.additiveprogenygeneticcovariancematrix.additiveprogenygeneticcovariancematrix property)": [[797, "pybrops.model.pcvmat.AdditiveProgenyGeneticCovarianceMatrix.AdditiveProgenyGeneticCovarianceMatrix.taxa_grp_len"]], "taxa_grp_name (pybrops.model.pcvmat.additiveprogenygeneticcovariancematrix.additiveprogenygeneticcovariancematrix property)": [[797, "pybrops.model.pcvmat.AdditiveProgenyGeneticCovarianceMatrix.AdditiveProgenyGeneticCovarianceMatrix.taxa_grp_name"]], "taxa_grp_spix (pybrops.model.pcvmat.additiveprogenygeneticcovariancematrix.additiveprogenygeneticcovariancematrix property)": [[797, "pybrops.model.pcvmat.AdditiveProgenyGeneticCovarianceMatrix.AdditiveProgenyGeneticCovarianceMatrix.taxa_grp_spix"]], "taxa_grp_stix (pybrops.model.pcvmat.additiveprogenygeneticcovariancematrix.additiveprogenygeneticcovariancematrix property)": [[797, "pybrops.model.pcvmat.AdditiveProgenyGeneticCovarianceMatrix.AdditiveProgenyGeneticCovarianceMatrix.taxa_grp_stix"]], "to_csv() (pybrops.model.pcvmat.additiveprogenygeneticcovariancematrix.additiveprogenygeneticcovariancematrix method)": [[797, "pybrops.model.pcvmat.AdditiveProgenyGeneticCovarianceMatrix.AdditiveProgenyGeneticCovarianceMatrix.to_csv"]], "to_hdf5() (pybrops.model.pcvmat.additiveprogenygeneticcovariancematrix.additiveprogenygeneticcovariancematrix method)": [[797, "pybrops.model.pcvmat.AdditiveProgenyGeneticCovarianceMatrix.AdditiveProgenyGeneticCovarianceMatrix.to_hdf5"]], "to_pandas() (pybrops.model.pcvmat.additiveprogenygeneticcovariancematrix.additiveprogenygeneticcovariancematrix method)": [[797, "pybrops.model.pcvmat.AdditiveProgenyGeneticCovarianceMatrix.AdditiveProgenyGeneticCovarianceMatrix.to_pandas"]], "trait (pybrops.model.pcvmat.additiveprogenygeneticcovariancematrix.additiveprogenygeneticcovariancematrix property)": [[797, "pybrops.model.pcvmat.AdditiveProgenyGeneticCovarianceMatrix.AdditiveProgenyGeneticCovarianceMatrix.trait"]], "trait_axis (pybrops.model.pcvmat.additiveprogenygeneticcovariancematrix.additiveprogenygeneticcovariancematrix property)": [[797, "pybrops.model.pcvmat.AdditiveProgenyGeneticCovarianceMatrix.AdditiveProgenyGeneticCovarianceMatrix.trait_axis"]], "ungroup() (pybrops.model.pcvmat.additiveprogenygeneticcovariancematrix.additiveprogenygeneticcovariancematrix method)": [[797, "pybrops.model.pcvmat.AdditiveProgenyGeneticCovarianceMatrix.AdditiveProgenyGeneticCovarianceMatrix.ungroup"]], "ungroup_taxa() (pybrops.model.pcvmat.additiveprogenygeneticcovariancematrix.additiveprogenygeneticcovariancematrix method)": [[797, "pybrops.model.pcvmat.AdditiveProgenyGeneticCovarianceMatrix.AdditiveProgenyGeneticCovarianceMatrix.ungroup_taxa"]], "check_is_additiveprogenygeneticcovariancematrix() (in module pybrops.model.pcvmat.additiveprogenygeneticcovariancematrix)": [[798, "pybrops.model.pcvmat.AdditiveProgenyGeneticCovarianceMatrix.check_is_AdditiveProgenyGeneticCovarianceMatrix"]], "pybrops.model.pcvmat.additiveprogenygeniccovariancematrix": [[799, "module-pybrops.model.pcvmat.AdditiveProgenyGenicCovarianceMatrix"]], "additiveprogenygeniccovariancematrix (class in pybrops.model.pcvmat.additiveprogenygeniccovariancematrix)": [[800, "pybrops.model.pcvmat.AdditiveProgenyGenicCovarianceMatrix.AdditiveProgenyGenicCovarianceMatrix"]], "__add__() (pybrops.model.pcvmat.additiveprogenygeniccovariancematrix.additiveprogenygeniccovariancematrix method)": [[800, "pybrops.model.pcvmat.AdditiveProgenyGenicCovarianceMatrix.AdditiveProgenyGenicCovarianceMatrix.__add__"]], "__mul__() (pybrops.model.pcvmat.additiveprogenygeniccovariancematrix.additiveprogenygeniccovariancematrix method)": [[800, "pybrops.model.pcvmat.AdditiveProgenyGenicCovarianceMatrix.AdditiveProgenyGenicCovarianceMatrix.__mul__"]], "adjoin() (pybrops.model.pcvmat.additiveprogenygeniccovariancematrix.additiveprogenygeniccovariancematrix method)": [[800, "pybrops.model.pcvmat.AdditiveProgenyGenicCovarianceMatrix.AdditiveProgenyGenicCovarianceMatrix.adjoin"]], "adjoin_taxa() (pybrops.model.pcvmat.additiveprogenygeniccovariancematrix.additiveprogenygeniccovariancematrix method)": [[800, "pybrops.model.pcvmat.AdditiveProgenyGenicCovarianceMatrix.AdditiveProgenyGenicCovarianceMatrix.adjoin_taxa"]], "adjoin_trait() (pybrops.model.pcvmat.additiveprogenygeniccovariancematrix.additiveprogenygeniccovariancematrix method)": [[800, "pybrops.model.pcvmat.AdditiveProgenyGenicCovarianceMatrix.AdditiveProgenyGenicCovarianceMatrix.adjoin_trait"]], "append() (pybrops.model.pcvmat.additiveprogenygeniccovariancematrix.additiveprogenygeniccovariancematrix method)": [[800, "pybrops.model.pcvmat.AdditiveProgenyGenicCovarianceMatrix.AdditiveProgenyGenicCovarianceMatrix.append"]], "append_taxa() (pybrops.model.pcvmat.additiveprogenygeniccovariancematrix.additiveprogenygeniccovariancematrix method)": [[800, "pybrops.model.pcvmat.AdditiveProgenyGenicCovarianceMatrix.AdditiveProgenyGenicCovarianceMatrix.append_taxa"]], "append_trait() (pybrops.model.pcvmat.additiveprogenygeniccovariancematrix.additiveprogenygeniccovariancematrix method)": [[800, "pybrops.model.pcvmat.AdditiveProgenyGenicCovarianceMatrix.AdditiveProgenyGenicCovarianceMatrix.append_trait"]], "concat() (pybrops.model.pcvmat.additiveprogenygeniccovariancematrix.additiveprogenygeniccovariancematrix class method)": [[800, "pybrops.model.pcvmat.AdditiveProgenyGenicCovarianceMatrix.AdditiveProgenyGenicCovarianceMatrix.concat"]], "concat_taxa() (pybrops.model.pcvmat.additiveprogenygeniccovariancematrix.additiveprogenygeniccovariancematrix class method)": [[800, "pybrops.model.pcvmat.AdditiveProgenyGenicCovarianceMatrix.AdditiveProgenyGenicCovarianceMatrix.concat_taxa"]], "concat_trait() (pybrops.model.pcvmat.additiveprogenygeniccovariancematrix.additiveprogenygeniccovariancematrix class method)": [[800, "pybrops.model.pcvmat.AdditiveProgenyGenicCovarianceMatrix.AdditiveProgenyGenicCovarianceMatrix.concat_trait"]], "copy() (pybrops.model.pcvmat.additiveprogenygeniccovariancematrix.additiveprogenygeniccovariancematrix method)": [[800, "pybrops.model.pcvmat.AdditiveProgenyGenicCovarianceMatrix.AdditiveProgenyGenicCovarianceMatrix.copy"]], "deepcopy() (pybrops.model.pcvmat.additiveprogenygeniccovariancematrix.additiveprogenygeniccovariancematrix method)": [[800, "pybrops.model.pcvmat.AdditiveProgenyGenicCovarianceMatrix.AdditiveProgenyGenicCovarianceMatrix.deepcopy"]], "delete() (pybrops.model.pcvmat.additiveprogenygeniccovariancematrix.additiveprogenygeniccovariancematrix method)": [[800, "pybrops.model.pcvmat.AdditiveProgenyGenicCovarianceMatrix.AdditiveProgenyGenicCovarianceMatrix.delete"]], "delete_taxa() (pybrops.model.pcvmat.additiveprogenygeniccovariancematrix.additiveprogenygeniccovariancematrix method)": [[800, "pybrops.model.pcvmat.AdditiveProgenyGenicCovarianceMatrix.AdditiveProgenyGenicCovarianceMatrix.delete_taxa"]], "delete_trait() (pybrops.model.pcvmat.additiveprogenygeniccovariancematrix.additiveprogenygeniccovariancematrix method)": [[800, "pybrops.model.pcvmat.AdditiveProgenyGenicCovarianceMatrix.AdditiveProgenyGenicCovarianceMatrix.delete_trait"]], "epgc (pybrops.model.pcvmat.additiveprogenygeniccovariancematrix.additiveprogenygeniccovariancematrix property)": [[800, "pybrops.model.pcvmat.AdditiveProgenyGenicCovarianceMatrix.AdditiveProgenyGenicCovarianceMatrix.epgc"]], "from_algmod() (pybrops.model.pcvmat.additiveprogenygeniccovariancematrix.additiveprogenygeniccovariancematrix class method)": [[800, "pybrops.model.pcvmat.AdditiveProgenyGenicCovarianceMatrix.AdditiveProgenyGenicCovarianceMatrix.from_algmod"]], "from_csv() (pybrops.model.pcvmat.additiveprogenygeniccovariancematrix.additiveprogenygeniccovariancematrix class method)": [[800, "pybrops.model.pcvmat.AdditiveProgenyGenicCovarianceMatrix.AdditiveProgenyGenicCovarianceMatrix.from_csv"]], "from_gmod() (pybrops.model.pcvmat.additiveprogenygeniccovariancematrix.additiveprogenygeniccovariancematrix class method)": [[800, "pybrops.model.pcvmat.AdditiveProgenyGenicCovarianceMatrix.AdditiveProgenyGenicCovarianceMatrix.from_gmod"]], "from_hdf5() (pybrops.model.pcvmat.additiveprogenygeniccovariancematrix.additiveprogenygeniccovariancematrix class method)": [[800, "pybrops.model.pcvmat.AdditiveProgenyGenicCovarianceMatrix.AdditiveProgenyGenicCovarianceMatrix.from_hdf5"]], "from_pandas() (pybrops.model.pcvmat.additiveprogenygeniccovariancematrix.additiveprogenygeniccovariancematrix class method)": [[800, "pybrops.model.pcvmat.AdditiveProgenyGenicCovarianceMatrix.AdditiveProgenyGenicCovarianceMatrix.from_pandas"]], "group() (pybrops.model.pcvmat.additiveprogenygeniccovariancematrix.additiveprogenygeniccovariancematrix method)": [[800, "pybrops.model.pcvmat.AdditiveProgenyGenicCovarianceMatrix.AdditiveProgenyGenicCovarianceMatrix.group"]], "group_taxa() (pybrops.model.pcvmat.additiveprogenygeniccovariancematrix.additiveprogenygeniccovariancematrix method)": [[800, "pybrops.model.pcvmat.AdditiveProgenyGenicCovarianceMatrix.AdditiveProgenyGenicCovarianceMatrix.group_taxa"]], "incorp() (pybrops.model.pcvmat.additiveprogenygeniccovariancematrix.additiveprogenygeniccovariancematrix method)": [[800, "pybrops.model.pcvmat.AdditiveProgenyGenicCovarianceMatrix.AdditiveProgenyGenicCovarianceMatrix.incorp"]], "incorp_taxa() (pybrops.model.pcvmat.additiveprogenygeniccovariancematrix.additiveprogenygeniccovariancematrix method)": [[800, "pybrops.model.pcvmat.AdditiveProgenyGenicCovarianceMatrix.AdditiveProgenyGenicCovarianceMatrix.incorp_taxa"]], "incorp_trait() (pybrops.model.pcvmat.additiveprogenygeniccovariancematrix.additiveprogenygeniccovariancematrix method)": [[800, "pybrops.model.pcvmat.AdditiveProgenyGenicCovarianceMatrix.AdditiveProgenyGenicCovarianceMatrix.incorp_trait"]], "insert() (pybrops.model.pcvmat.additiveprogenygeniccovariancematrix.additiveprogenygeniccovariancematrix method)": [[800, "pybrops.model.pcvmat.AdditiveProgenyGenicCovarianceMatrix.AdditiveProgenyGenicCovarianceMatrix.insert"]], "insert_taxa() (pybrops.model.pcvmat.additiveprogenygeniccovariancematrix.additiveprogenygeniccovariancematrix method)": [[800, "pybrops.model.pcvmat.AdditiveProgenyGenicCovarianceMatrix.AdditiveProgenyGenicCovarianceMatrix.insert_taxa"]], "insert_trait() (pybrops.model.pcvmat.additiveprogenygeniccovariancematrix.additiveprogenygeniccovariancematrix method)": [[800, "pybrops.model.pcvmat.AdditiveProgenyGenicCovarianceMatrix.AdditiveProgenyGenicCovarianceMatrix.insert_trait"]], "is_grouped() (pybrops.model.pcvmat.additiveprogenygeniccovariancematrix.additiveprogenygeniccovariancematrix method)": [[800, "pybrops.model.pcvmat.AdditiveProgenyGenicCovarianceMatrix.AdditiveProgenyGenicCovarianceMatrix.is_grouped"]], "is_grouped_taxa() (pybrops.model.pcvmat.additiveprogenygeniccovariancematrix.additiveprogenygeniccovariancematrix method)": [[800, "pybrops.model.pcvmat.AdditiveProgenyGenicCovarianceMatrix.AdditiveProgenyGenicCovarianceMatrix.is_grouped_taxa"]], "is_square() (pybrops.model.pcvmat.additiveprogenygeniccovariancematrix.additiveprogenygeniccovariancematrix method)": [[800, "pybrops.model.pcvmat.AdditiveProgenyGenicCovarianceMatrix.AdditiveProgenyGenicCovarianceMatrix.is_square"]], "is_square_taxa() (pybrops.model.pcvmat.additiveprogenygeniccovariancematrix.additiveprogenygeniccovariancematrix method)": [[800, "pybrops.model.pcvmat.AdditiveProgenyGenicCovarianceMatrix.AdditiveProgenyGenicCovarianceMatrix.is_square_taxa"]], "is_square_trait() (pybrops.model.pcvmat.additiveprogenygeniccovariancematrix.additiveprogenygeniccovariancematrix method)": [[800, "pybrops.model.pcvmat.AdditiveProgenyGenicCovarianceMatrix.AdditiveProgenyGenicCovarianceMatrix.is_square_trait"]], "lexsort() (pybrops.model.pcvmat.additiveprogenygeniccovariancematrix.additiveprogenygeniccovariancematrix method)": [[800, "pybrops.model.pcvmat.AdditiveProgenyGenicCovarianceMatrix.AdditiveProgenyGenicCovarianceMatrix.lexsort"]], "lexsort_taxa() (pybrops.model.pcvmat.additiveprogenygeniccovariancematrix.additiveprogenygeniccovariancematrix method)": [[800, "pybrops.model.pcvmat.AdditiveProgenyGenicCovarianceMatrix.AdditiveProgenyGenicCovarianceMatrix.lexsort_taxa"]], "lexsort_trait() (pybrops.model.pcvmat.additiveprogenygeniccovariancematrix.additiveprogenygeniccovariancematrix method)": [[800, "pybrops.model.pcvmat.AdditiveProgenyGenicCovarianceMatrix.AdditiveProgenyGenicCovarianceMatrix.lexsort_trait"]], "mat (pybrops.model.pcvmat.additiveprogenygeniccovariancematrix.additiveprogenygeniccovariancematrix property)": [[800, "pybrops.model.pcvmat.AdditiveProgenyGenicCovarianceMatrix.AdditiveProgenyGenicCovarianceMatrix.mat"]], "mat_ndim (pybrops.model.pcvmat.additiveprogenygeniccovariancematrix.additiveprogenygeniccovariancematrix property)": [[800, "pybrops.model.pcvmat.AdditiveProgenyGenicCovarianceMatrix.AdditiveProgenyGenicCovarianceMatrix.mat_ndim"]], "mat_shape (pybrops.model.pcvmat.additiveprogenygeniccovariancematrix.additiveprogenygeniccovariancematrix property)": [[800, "pybrops.model.pcvmat.AdditiveProgenyGenicCovarianceMatrix.AdditiveProgenyGenicCovarianceMatrix.mat_shape"]], "nsquare (pybrops.model.pcvmat.additiveprogenygeniccovariancematrix.additiveprogenygeniccovariancematrix property)": [[800, "pybrops.model.pcvmat.AdditiveProgenyGenicCovarianceMatrix.AdditiveProgenyGenicCovarianceMatrix.nsquare"]], "nsquare_taxa (pybrops.model.pcvmat.additiveprogenygeniccovariancematrix.additiveprogenygeniccovariancematrix property)": [[800, "pybrops.model.pcvmat.AdditiveProgenyGenicCovarianceMatrix.AdditiveProgenyGenicCovarianceMatrix.nsquare_taxa"]], "nsquare_trait (pybrops.model.pcvmat.additiveprogenygeniccovariancematrix.additiveprogenygeniccovariancematrix property)": [[800, "pybrops.model.pcvmat.AdditiveProgenyGenicCovarianceMatrix.AdditiveProgenyGenicCovarianceMatrix.nsquare_trait"]], "ntaxa (pybrops.model.pcvmat.additiveprogenygeniccovariancematrix.additiveprogenygeniccovariancematrix property)": [[800, "pybrops.model.pcvmat.AdditiveProgenyGenicCovarianceMatrix.AdditiveProgenyGenicCovarianceMatrix.ntaxa"]], "ntrait (pybrops.model.pcvmat.additiveprogenygeniccovariancematrix.additiveprogenygeniccovariancematrix property)": [[800, "pybrops.model.pcvmat.AdditiveProgenyGenicCovarianceMatrix.AdditiveProgenyGenicCovarianceMatrix.ntrait"]], "remove() (pybrops.model.pcvmat.additiveprogenygeniccovariancematrix.additiveprogenygeniccovariancematrix method)": [[800, "pybrops.model.pcvmat.AdditiveProgenyGenicCovarianceMatrix.AdditiveProgenyGenicCovarianceMatrix.remove"]], "remove_taxa() (pybrops.model.pcvmat.additiveprogenygeniccovariancematrix.additiveprogenygeniccovariancematrix method)": [[800, "pybrops.model.pcvmat.AdditiveProgenyGenicCovarianceMatrix.AdditiveProgenyGenicCovarianceMatrix.remove_taxa"]], "remove_trait() (pybrops.model.pcvmat.additiveprogenygeniccovariancematrix.additiveprogenygeniccovariancematrix method)": [[800, "pybrops.model.pcvmat.AdditiveProgenyGenicCovarianceMatrix.AdditiveProgenyGenicCovarianceMatrix.remove_trait"]], "reorder() (pybrops.model.pcvmat.additiveprogenygeniccovariancematrix.additiveprogenygeniccovariancematrix method)": [[800, "pybrops.model.pcvmat.AdditiveProgenyGenicCovarianceMatrix.AdditiveProgenyGenicCovarianceMatrix.reorder"]], "reorder_taxa() (pybrops.model.pcvmat.additiveprogenygeniccovariancematrix.additiveprogenygeniccovariancematrix method)": [[800, "pybrops.model.pcvmat.AdditiveProgenyGenicCovarianceMatrix.AdditiveProgenyGenicCovarianceMatrix.reorder_taxa"]], "reorder_trait() (pybrops.model.pcvmat.additiveprogenygeniccovariancematrix.additiveprogenygeniccovariancematrix method)": [[800, "pybrops.model.pcvmat.AdditiveProgenyGenicCovarianceMatrix.AdditiveProgenyGenicCovarianceMatrix.reorder_trait"]], "select() (pybrops.model.pcvmat.additiveprogenygeniccovariancematrix.additiveprogenygeniccovariancematrix method)": [[800, "pybrops.model.pcvmat.AdditiveProgenyGenicCovarianceMatrix.AdditiveProgenyGenicCovarianceMatrix.select"]], "select_taxa() (pybrops.model.pcvmat.additiveprogenygeniccovariancematrix.additiveprogenygeniccovariancematrix method)": [[800, "pybrops.model.pcvmat.AdditiveProgenyGenicCovarianceMatrix.AdditiveProgenyGenicCovarianceMatrix.select_taxa"]], "select_trait() (pybrops.model.pcvmat.additiveprogenygeniccovariancematrix.additiveprogenygeniccovariancematrix method)": [[800, "pybrops.model.pcvmat.AdditiveProgenyGenicCovarianceMatrix.AdditiveProgenyGenicCovarianceMatrix.select_trait"]], "sort() (pybrops.model.pcvmat.additiveprogenygeniccovariancematrix.additiveprogenygeniccovariancematrix method)": [[800, "pybrops.model.pcvmat.AdditiveProgenyGenicCovarianceMatrix.AdditiveProgenyGenicCovarianceMatrix.sort"]], "sort_taxa() (pybrops.model.pcvmat.additiveprogenygeniccovariancematrix.additiveprogenygeniccovariancematrix method)": [[800, "pybrops.model.pcvmat.AdditiveProgenyGenicCovarianceMatrix.AdditiveProgenyGenicCovarianceMatrix.sort_taxa"]], "sort_trait() (pybrops.model.pcvmat.additiveprogenygeniccovariancematrix.additiveprogenygeniccovariancematrix method)": [[800, "pybrops.model.pcvmat.AdditiveProgenyGenicCovarianceMatrix.AdditiveProgenyGenicCovarianceMatrix.sort_trait"]], "square_axes (pybrops.model.pcvmat.additiveprogenygeniccovariancematrix.additiveprogenygeniccovariancematrix property)": [[800, "pybrops.model.pcvmat.AdditiveProgenyGenicCovarianceMatrix.AdditiveProgenyGenicCovarianceMatrix.square_axes"]], "square_axes_len (pybrops.model.pcvmat.additiveprogenygeniccovariancematrix.additiveprogenygeniccovariancematrix property)": [[800, "pybrops.model.pcvmat.AdditiveProgenyGenicCovarianceMatrix.AdditiveProgenyGenicCovarianceMatrix.square_axes_len"]], "square_taxa_axes (pybrops.model.pcvmat.additiveprogenygeniccovariancematrix.additiveprogenygeniccovariancematrix property)": [[800, "pybrops.model.pcvmat.AdditiveProgenyGenicCovarianceMatrix.AdditiveProgenyGenicCovarianceMatrix.square_taxa_axes"]], "square_taxa_axes_len (pybrops.model.pcvmat.additiveprogenygeniccovariancematrix.additiveprogenygeniccovariancematrix property)": [[800, "pybrops.model.pcvmat.AdditiveProgenyGenicCovarianceMatrix.AdditiveProgenyGenicCovarianceMatrix.square_taxa_axes_len"]], "square_trait_axes (pybrops.model.pcvmat.additiveprogenygeniccovariancematrix.additiveprogenygeniccovariancematrix property)": [[800, "pybrops.model.pcvmat.AdditiveProgenyGenicCovarianceMatrix.AdditiveProgenyGenicCovarianceMatrix.square_trait_axes"]], "square_trait_axes_len (pybrops.model.pcvmat.additiveprogenygeniccovariancematrix.additiveprogenygeniccovariancematrix property)": [[800, "pybrops.model.pcvmat.AdditiveProgenyGenicCovarianceMatrix.AdditiveProgenyGenicCovarianceMatrix.square_trait_axes_len"]], "taxa (pybrops.model.pcvmat.additiveprogenygeniccovariancematrix.additiveprogenygeniccovariancematrix property)": [[800, "pybrops.model.pcvmat.AdditiveProgenyGenicCovarianceMatrix.AdditiveProgenyGenicCovarianceMatrix.taxa"]], "taxa_axis (pybrops.model.pcvmat.additiveprogenygeniccovariancematrix.additiveprogenygeniccovariancematrix property)": [[800, "pybrops.model.pcvmat.AdditiveProgenyGenicCovarianceMatrix.AdditiveProgenyGenicCovarianceMatrix.taxa_axis"]], "taxa_grp (pybrops.model.pcvmat.additiveprogenygeniccovariancematrix.additiveprogenygeniccovariancematrix property)": [[800, "pybrops.model.pcvmat.AdditiveProgenyGenicCovarianceMatrix.AdditiveProgenyGenicCovarianceMatrix.taxa_grp"]], "taxa_grp_len (pybrops.model.pcvmat.additiveprogenygeniccovariancematrix.additiveprogenygeniccovariancematrix property)": [[800, "pybrops.model.pcvmat.AdditiveProgenyGenicCovarianceMatrix.AdditiveProgenyGenicCovarianceMatrix.taxa_grp_len"]], "taxa_grp_name (pybrops.model.pcvmat.additiveprogenygeniccovariancematrix.additiveprogenygeniccovariancematrix property)": [[800, "pybrops.model.pcvmat.AdditiveProgenyGenicCovarianceMatrix.AdditiveProgenyGenicCovarianceMatrix.taxa_grp_name"]], "taxa_grp_spix (pybrops.model.pcvmat.additiveprogenygeniccovariancematrix.additiveprogenygeniccovariancematrix property)": [[800, "pybrops.model.pcvmat.AdditiveProgenyGenicCovarianceMatrix.AdditiveProgenyGenicCovarianceMatrix.taxa_grp_spix"]], "taxa_grp_stix (pybrops.model.pcvmat.additiveprogenygeniccovariancematrix.additiveprogenygeniccovariancematrix property)": [[800, "pybrops.model.pcvmat.AdditiveProgenyGenicCovarianceMatrix.AdditiveProgenyGenicCovarianceMatrix.taxa_grp_stix"]], "to_csv() (pybrops.model.pcvmat.additiveprogenygeniccovariancematrix.additiveprogenygeniccovariancematrix method)": [[800, "pybrops.model.pcvmat.AdditiveProgenyGenicCovarianceMatrix.AdditiveProgenyGenicCovarianceMatrix.to_csv"]], "to_hdf5() (pybrops.model.pcvmat.additiveprogenygeniccovariancematrix.additiveprogenygeniccovariancematrix method)": [[800, "pybrops.model.pcvmat.AdditiveProgenyGenicCovarianceMatrix.AdditiveProgenyGenicCovarianceMatrix.to_hdf5"]], "to_pandas() (pybrops.model.pcvmat.additiveprogenygeniccovariancematrix.additiveprogenygeniccovariancematrix method)": [[800, "pybrops.model.pcvmat.AdditiveProgenyGenicCovarianceMatrix.AdditiveProgenyGenicCovarianceMatrix.to_pandas"]], "trait (pybrops.model.pcvmat.additiveprogenygeniccovariancematrix.additiveprogenygeniccovariancematrix property)": [[800, "pybrops.model.pcvmat.AdditiveProgenyGenicCovarianceMatrix.AdditiveProgenyGenicCovarianceMatrix.trait"]], "trait_axis (pybrops.model.pcvmat.additiveprogenygeniccovariancematrix.additiveprogenygeniccovariancematrix property)": [[800, "pybrops.model.pcvmat.AdditiveProgenyGenicCovarianceMatrix.AdditiveProgenyGenicCovarianceMatrix.trait_axis"]], "ungroup() (pybrops.model.pcvmat.additiveprogenygeniccovariancematrix.additiveprogenygeniccovariancematrix method)": [[800, "pybrops.model.pcvmat.AdditiveProgenyGenicCovarianceMatrix.AdditiveProgenyGenicCovarianceMatrix.ungroup"]], "ungroup_taxa() (pybrops.model.pcvmat.additiveprogenygeniccovariancematrix.additiveprogenygeniccovariancematrix method)": [[800, "pybrops.model.pcvmat.AdditiveProgenyGenicCovarianceMatrix.AdditiveProgenyGenicCovarianceMatrix.ungroup_taxa"]], "check_is_additiveprogenygeniccovariancematrix() (in module pybrops.model.pcvmat.additiveprogenygeniccovariancematrix)": [[801, "pybrops.model.pcvmat.AdditiveProgenyGenicCovarianceMatrix.check_is_AdditiveProgenyGenicCovarianceMatrix"]], "pybrops.model.pcvmat.denseadditiveprogenygeneticcovariancematrix": [[802, "module-pybrops.model.pcvmat.DenseAdditiveProgenyGeneticCovarianceMatrix"]], "denseadditiveprogenygeneticcovariancematrix (class in pybrops.model.pcvmat.denseadditiveprogenygeneticcovariancematrix)": [[803, "pybrops.model.pcvmat.DenseAdditiveProgenyGeneticCovarianceMatrix.DenseAdditiveProgenyGeneticCovarianceMatrix"]], "__add__() (pybrops.model.pcvmat.denseadditiveprogenygeneticcovariancematrix.denseadditiveprogenygeneticcovariancematrix method)": [[803, "pybrops.model.pcvmat.DenseAdditiveProgenyGeneticCovarianceMatrix.DenseAdditiveProgenyGeneticCovarianceMatrix.__add__"]], "__mul__() (pybrops.model.pcvmat.denseadditiveprogenygeneticcovariancematrix.denseadditiveprogenygeneticcovariancematrix method)": [[803, "pybrops.model.pcvmat.DenseAdditiveProgenyGeneticCovarianceMatrix.DenseAdditiveProgenyGeneticCovarianceMatrix.__mul__"]], "adjoin() (pybrops.model.pcvmat.denseadditiveprogenygeneticcovariancematrix.denseadditiveprogenygeneticcovariancematrix method)": [[803, "pybrops.model.pcvmat.DenseAdditiveProgenyGeneticCovarianceMatrix.DenseAdditiveProgenyGeneticCovarianceMatrix.adjoin"]], "adjoin_taxa() (pybrops.model.pcvmat.denseadditiveprogenygeneticcovariancematrix.denseadditiveprogenygeneticcovariancematrix method)": [[803, "pybrops.model.pcvmat.DenseAdditiveProgenyGeneticCovarianceMatrix.DenseAdditiveProgenyGeneticCovarianceMatrix.adjoin_taxa"]], "adjoin_trait() (pybrops.model.pcvmat.denseadditiveprogenygeneticcovariancematrix.denseadditiveprogenygeneticcovariancematrix method)": [[803, "pybrops.model.pcvmat.DenseAdditiveProgenyGeneticCovarianceMatrix.DenseAdditiveProgenyGeneticCovarianceMatrix.adjoin_trait"]], "append() (pybrops.model.pcvmat.denseadditiveprogenygeneticcovariancematrix.denseadditiveprogenygeneticcovariancematrix method)": [[803, "pybrops.model.pcvmat.DenseAdditiveProgenyGeneticCovarianceMatrix.DenseAdditiveProgenyGeneticCovarianceMatrix.append"]], "append_taxa() (pybrops.model.pcvmat.denseadditiveprogenygeneticcovariancematrix.denseadditiveprogenygeneticcovariancematrix method)": [[803, "pybrops.model.pcvmat.DenseAdditiveProgenyGeneticCovarianceMatrix.DenseAdditiveProgenyGeneticCovarianceMatrix.append_taxa"]], "append_trait() (pybrops.model.pcvmat.denseadditiveprogenygeneticcovariancematrix.denseadditiveprogenygeneticcovariancematrix method)": [[803, "pybrops.model.pcvmat.DenseAdditiveProgenyGeneticCovarianceMatrix.DenseAdditiveProgenyGeneticCovarianceMatrix.append_trait"]], "concat() (pybrops.model.pcvmat.denseadditiveprogenygeneticcovariancematrix.denseadditiveprogenygeneticcovariancematrix class method)": [[803, "pybrops.model.pcvmat.DenseAdditiveProgenyGeneticCovarianceMatrix.DenseAdditiveProgenyGeneticCovarianceMatrix.concat"]], "concat_taxa() (pybrops.model.pcvmat.denseadditiveprogenygeneticcovariancematrix.denseadditiveprogenygeneticcovariancematrix class method)": [[803, "pybrops.model.pcvmat.DenseAdditiveProgenyGeneticCovarianceMatrix.DenseAdditiveProgenyGeneticCovarianceMatrix.concat_taxa"]], "concat_trait() (pybrops.model.pcvmat.denseadditiveprogenygeneticcovariancematrix.denseadditiveprogenygeneticcovariancematrix class method)": [[803, "pybrops.model.pcvmat.DenseAdditiveProgenyGeneticCovarianceMatrix.DenseAdditiveProgenyGeneticCovarianceMatrix.concat_trait"]], "copy() (pybrops.model.pcvmat.denseadditiveprogenygeneticcovariancematrix.denseadditiveprogenygeneticcovariancematrix method)": [[803, "pybrops.model.pcvmat.DenseAdditiveProgenyGeneticCovarianceMatrix.DenseAdditiveProgenyGeneticCovarianceMatrix.copy"]], "deepcopy() (pybrops.model.pcvmat.denseadditiveprogenygeneticcovariancematrix.denseadditiveprogenygeneticcovariancematrix method)": [[803, "pybrops.model.pcvmat.DenseAdditiveProgenyGeneticCovarianceMatrix.DenseAdditiveProgenyGeneticCovarianceMatrix.deepcopy"]], "delete() (pybrops.model.pcvmat.denseadditiveprogenygeneticcovariancematrix.denseadditiveprogenygeneticcovariancematrix method)": [[803, "pybrops.model.pcvmat.DenseAdditiveProgenyGeneticCovarianceMatrix.DenseAdditiveProgenyGeneticCovarianceMatrix.delete"]], "delete_taxa() (pybrops.model.pcvmat.denseadditiveprogenygeneticcovariancematrix.denseadditiveprogenygeneticcovariancematrix method)": [[803, "pybrops.model.pcvmat.DenseAdditiveProgenyGeneticCovarianceMatrix.DenseAdditiveProgenyGeneticCovarianceMatrix.delete_taxa"]], "delete_trait() (pybrops.model.pcvmat.denseadditiveprogenygeneticcovariancematrix.denseadditiveprogenygeneticcovariancematrix method)": [[803, "pybrops.model.pcvmat.DenseAdditiveProgenyGeneticCovarianceMatrix.DenseAdditiveProgenyGeneticCovarianceMatrix.delete_trait"]], "epgc (pybrops.model.pcvmat.denseadditiveprogenygeneticcovariancematrix.denseadditiveprogenygeneticcovariancematrix property)": [[803, "pybrops.model.pcvmat.DenseAdditiveProgenyGeneticCovarianceMatrix.DenseAdditiveProgenyGeneticCovarianceMatrix.epgc"]], "from_algmod() (pybrops.model.pcvmat.denseadditiveprogenygeneticcovariancematrix.denseadditiveprogenygeneticcovariancematrix class method)": [[803, "pybrops.model.pcvmat.DenseAdditiveProgenyGeneticCovarianceMatrix.DenseAdditiveProgenyGeneticCovarianceMatrix.from_algmod"]], "from_csv() (pybrops.model.pcvmat.denseadditiveprogenygeneticcovariancematrix.denseadditiveprogenygeneticcovariancematrix class method)": [[803, "pybrops.model.pcvmat.DenseAdditiveProgenyGeneticCovarianceMatrix.DenseAdditiveProgenyGeneticCovarianceMatrix.from_csv"]], "from_gmod() (pybrops.model.pcvmat.denseadditiveprogenygeneticcovariancematrix.denseadditiveprogenygeneticcovariancematrix class method)": [[803, "pybrops.model.pcvmat.DenseAdditiveProgenyGeneticCovarianceMatrix.DenseAdditiveProgenyGeneticCovarianceMatrix.from_gmod"]], "from_hdf5() (pybrops.model.pcvmat.denseadditiveprogenygeneticcovariancematrix.denseadditiveprogenygeneticcovariancematrix class method)": [[803, "pybrops.model.pcvmat.DenseAdditiveProgenyGeneticCovarianceMatrix.DenseAdditiveProgenyGeneticCovarianceMatrix.from_hdf5"]], "from_pandas() (pybrops.model.pcvmat.denseadditiveprogenygeneticcovariancematrix.denseadditiveprogenygeneticcovariancematrix class method)": [[803, "pybrops.model.pcvmat.DenseAdditiveProgenyGeneticCovarianceMatrix.DenseAdditiveProgenyGeneticCovarianceMatrix.from_pandas"]], "group() (pybrops.model.pcvmat.denseadditiveprogenygeneticcovariancematrix.denseadditiveprogenygeneticcovariancematrix method)": [[803, "pybrops.model.pcvmat.DenseAdditiveProgenyGeneticCovarianceMatrix.DenseAdditiveProgenyGeneticCovarianceMatrix.group"]], "group_taxa() (pybrops.model.pcvmat.denseadditiveprogenygeneticcovariancematrix.denseadditiveprogenygeneticcovariancematrix method)": [[803, "pybrops.model.pcvmat.DenseAdditiveProgenyGeneticCovarianceMatrix.DenseAdditiveProgenyGeneticCovarianceMatrix.group_taxa"]], "incorp() (pybrops.model.pcvmat.denseadditiveprogenygeneticcovariancematrix.denseadditiveprogenygeneticcovariancematrix method)": [[803, "pybrops.model.pcvmat.DenseAdditiveProgenyGeneticCovarianceMatrix.DenseAdditiveProgenyGeneticCovarianceMatrix.incorp"]], "incorp_taxa() (pybrops.model.pcvmat.denseadditiveprogenygeneticcovariancematrix.denseadditiveprogenygeneticcovariancematrix method)": [[803, "pybrops.model.pcvmat.DenseAdditiveProgenyGeneticCovarianceMatrix.DenseAdditiveProgenyGeneticCovarianceMatrix.incorp_taxa"]], "incorp_trait() (pybrops.model.pcvmat.denseadditiveprogenygeneticcovariancematrix.denseadditiveprogenygeneticcovariancematrix method)": [[803, "pybrops.model.pcvmat.DenseAdditiveProgenyGeneticCovarianceMatrix.DenseAdditiveProgenyGeneticCovarianceMatrix.incorp_trait"]], "insert() (pybrops.model.pcvmat.denseadditiveprogenygeneticcovariancematrix.denseadditiveprogenygeneticcovariancematrix method)": [[803, "pybrops.model.pcvmat.DenseAdditiveProgenyGeneticCovarianceMatrix.DenseAdditiveProgenyGeneticCovarianceMatrix.insert"]], "insert_taxa() (pybrops.model.pcvmat.denseadditiveprogenygeneticcovariancematrix.denseadditiveprogenygeneticcovariancematrix method)": [[803, "pybrops.model.pcvmat.DenseAdditiveProgenyGeneticCovarianceMatrix.DenseAdditiveProgenyGeneticCovarianceMatrix.insert_taxa"]], "insert_trait() (pybrops.model.pcvmat.denseadditiveprogenygeneticcovariancematrix.denseadditiveprogenygeneticcovariancematrix method)": [[803, "pybrops.model.pcvmat.DenseAdditiveProgenyGeneticCovarianceMatrix.DenseAdditiveProgenyGeneticCovarianceMatrix.insert_trait"]], "is_grouped() (pybrops.model.pcvmat.denseadditiveprogenygeneticcovariancematrix.denseadditiveprogenygeneticcovariancematrix method)": [[803, "pybrops.model.pcvmat.DenseAdditiveProgenyGeneticCovarianceMatrix.DenseAdditiveProgenyGeneticCovarianceMatrix.is_grouped"]], "is_grouped_taxa() (pybrops.model.pcvmat.denseadditiveprogenygeneticcovariancematrix.denseadditiveprogenygeneticcovariancematrix method)": [[803, "pybrops.model.pcvmat.DenseAdditiveProgenyGeneticCovarianceMatrix.DenseAdditiveProgenyGeneticCovarianceMatrix.is_grouped_taxa"]], "is_square() (pybrops.model.pcvmat.denseadditiveprogenygeneticcovariancematrix.denseadditiveprogenygeneticcovariancematrix method)": [[803, "pybrops.model.pcvmat.DenseAdditiveProgenyGeneticCovarianceMatrix.DenseAdditiveProgenyGeneticCovarianceMatrix.is_square"]], "is_square_taxa() (pybrops.model.pcvmat.denseadditiveprogenygeneticcovariancematrix.denseadditiveprogenygeneticcovariancematrix method)": [[803, "pybrops.model.pcvmat.DenseAdditiveProgenyGeneticCovarianceMatrix.DenseAdditiveProgenyGeneticCovarianceMatrix.is_square_taxa"]], "is_square_trait() (pybrops.model.pcvmat.denseadditiveprogenygeneticcovariancematrix.denseadditiveprogenygeneticcovariancematrix method)": [[803, "pybrops.model.pcvmat.DenseAdditiveProgenyGeneticCovarianceMatrix.DenseAdditiveProgenyGeneticCovarianceMatrix.is_square_trait"]], "lexsort() (pybrops.model.pcvmat.denseadditiveprogenygeneticcovariancematrix.denseadditiveprogenygeneticcovariancematrix method)": [[803, "pybrops.model.pcvmat.DenseAdditiveProgenyGeneticCovarianceMatrix.DenseAdditiveProgenyGeneticCovarianceMatrix.lexsort"]], "lexsort_taxa() (pybrops.model.pcvmat.denseadditiveprogenygeneticcovariancematrix.denseadditiveprogenygeneticcovariancematrix method)": [[803, "pybrops.model.pcvmat.DenseAdditiveProgenyGeneticCovarianceMatrix.DenseAdditiveProgenyGeneticCovarianceMatrix.lexsort_taxa"]], "lexsort_trait() (pybrops.model.pcvmat.denseadditiveprogenygeneticcovariancematrix.denseadditiveprogenygeneticcovariancematrix method)": [[803, "pybrops.model.pcvmat.DenseAdditiveProgenyGeneticCovarianceMatrix.DenseAdditiveProgenyGeneticCovarianceMatrix.lexsort_trait"]], "mat (pybrops.model.pcvmat.denseadditiveprogenygeneticcovariancematrix.denseadditiveprogenygeneticcovariancematrix property)": [[803, "pybrops.model.pcvmat.DenseAdditiveProgenyGeneticCovarianceMatrix.DenseAdditiveProgenyGeneticCovarianceMatrix.mat"]], "mat_ndim (pybrops.model.pcvmat.denseadditiveprogenygeneticcovariancematrix.denseadditiveprogenygeneticcovariancematrix property)": [[803, "pybrops.model.pcvmat.DenseAdditiveProgenyGeneticCovarianceMatrix.DenseAdditiveProgenyGeneticCovarianceMatrix.mat_ndim"]], "mat_shape (pybrops.model.pcvmat.denseadditiveprogenygeneticcovariancematrix.denseadditiveprogenygeneticcovariancematrix property)": [[803, "pybrops.model.pcvmat.DenseAdditiveProgenyGeneticCovarianceMatrix.DenseAdditiveProgenyGeneticCovarianceMatrix.mat_shape"]], "nsquare (pybrops.model.pcvmat.denseadditiveprogenygeneticcovariancematrix.denseadditiveprogenygeneticcovariancematrix property)": [[803, "pybrops.model.pcvmat.DenseAdditiveProgenyGeneticCovarianceMatrix.DenseAdditiveProgenyGeneticCovarianceMatrix.nsquare"]], "nsquare_taxa (pybrops.model.pcvmat.denseadditiveprogenygeneticcovariancematrix.denseadditiveprogenygeneticcovariancematrix property)": [[803, "pybrops.model.pcvmat.DenseAdditiveProgenyGeneticCovarianceMatrix.DenseAdditiveProgenyGeneticCovarianceMatrix.nsquare_taxa"]], "nsquare_trait (pybrops.model.pcvmat.denseadditiveprogenygeneticcovariancematrix.denseadditiveprogenygeneticcovariancematrix property)": [[803, "pybrops.model.pcvmat.DenseAdditiveProgenyGeneticCovarianceMatrix.DenseAdditiveProgenyGeneticCovarianceMatrix.nsquare_trait"]], "ntaxa (pybrops.model.pcvmat.denseadditiveprogenygeneticcovariancematrix.denseadditiveprogenygeneticcovariancematrix property)": [[803, "pybrops.model.pcvmat.DenseAdditiveProgenyGeneticCovarianceMatrix.DenseAdditiveProgenyGeneticCovarianceMatrix.ntaxa"]], "ntrait (pybrops.model.pcvmat.denseadditiveprogenygeneticcovariancematrix.denseadditiveprogenygeneticcovariancematrix property)": [[803, "pybrops.model.pcvmat.DenseAdditiveProgenyGeneticCovarianceMatrix.DenseAdditiveProgenyGeneticCovarianceMatrix.ntrait"]], "remove() (pybrops.model.pcvmat.denseadditiveprogenygeneticcovariancematrix.denseadditiveprogenygeneticcovariancematrix method)": [[803, "pybrops.model.pcvmat.DenseAdditiveProgenyGeneticCovarianceMatrix.DenseAdditiveProgenyGeneticCovarianceMatrix.remove"]], "remove_taxa() (pybrops.model.pcvmat.denseadditiveprogenygeneticcovariancematrix.denseadditiveprogenygeneticcovariancematrix method)": [[803, "pybrops.model.pcvmat.DenseAdditiveProgenyGeneticCovarianceMatrix.DenseAdditiveProgenyGeneticCovarianceMatrix.remove_taxa"]], "remove_trait() (pybrops.model.pcvmat.denseadditiveprogenygeneticcovariancematrix.denseadditiveprogenygeneticcovariancematrix method)": [[803, "pybrops.model.pcvmat.DenseAdditiveProgenyGeneticCovarianceMatrix.DenseAdditiveProgenyGeneticCovarianceMatrix.remove_trait"]], "reorder() (pybrops.model.pcvmat.denseadditiveprogenygeneticcovariancematrix.denseadditiveprogenygeneticcovariancematrix method)": [[803, "pybrops.model.pcvmat.DenseAdditiveProgenyGeneticCovarianceMatrix.DenseAdditiveProgenyGeneticCovarianceMatrix.reorder"]], "reorder_taxa() (pybrops.model.pcvmat.denseadditiveprogenygeneticcovariancematrix.denseadditiveprogenygeneticcovariancematrix method)": [[803, "pybrops.model.pcvmat.DenseAdditiveProgenyGeneticCovarianceMatrix.DenseAdditiveProgenyGeneticCovarianceMatrix.reorder_taxa"]], "reorder_trait() (pybrops.model.pcvmat.denseadditiveprogenygeneticcovariancematrix.denseadditiveprogenygeneticcovariancematrix method)": [[803, "pybrops.model.pcvmat.DenseAdditiveProgenyGeneticCovarianceMatrix.DenseAdditiveProgenyGeneticCovarianceMatrix.reorder_trait"]], "select() (pybrops.model.pcvmat.denseadditiveprogenygeneticcovariancematrix.denseadditiveprogenygeneticcovariancematrix method)": [[803, "pybrops.model.pcvmat.DenseAdditiveProgenyGeneticCovarianceMatrix.DenseAdditiveProgenyGeneticCovarianceMatrix.select"]], "select_taxa() (pybrops.model.pcvmat.denseadditiveprogenygeneticcovariancematrix.denseadditiveprogenygeneticcovariancematrix method)": [[803, "pybrops.model.pcvmat.DenseAdditiveProgenyGeneticCovarianceMatrix.DenseAdditiveProgenyGeneticCovarianceMatrix.select_taxa"]], "select_trait() (pybrops.model.pcvmat.denseadditiveprogenygeneticcovariancematrix.denseadditiveprogenygeneticcovariancematrix method)": [[803, "pybrops.model.pcvmat.DenseAdditiveProgenyGeneticCovarianceMatrix.DenseAdditiveProgenyGeneticCovarianceMatrix.select_trait"]], "sort() (pybrops.model.pcvmat.denseadditiveprogenygeneticcovariancematrix.denseadditiveprogenygeneticcovariancematrix method)": [[803, "pybrops.model.pcvmat.DenseAdditiveProgenyGeneticCovarianceMatrix.DenseAdditiveProgenyGeneticCovarianceMatrix.sort"]], "sort_taxa() (pybrops.model.pcvmat.denseadditiveprogenygeneticcovariancematrix.denseadditiveprogenygeneticcovariancematrix method)": [[803, "pybrops.model.pcvmat.DenseAdditiveProgenyGeneticCovarianceMatrix.DenseAdditiveProgenyGeneticCovarianceMatrix.sort_taxa"]], "sort_trait() (pybrops.model.pcvmat.denseadditiveprogenygeneticcovariancematrix.denseadditiveprogenygeneticcovariancematrix method)": [[803, "pybrops.model.pcvmat.DenseAdditiveProgenyGeneticCovarianceMatrix.DenseAdditiveProgenyGeneticCovarianceMatrix.sort_trait"]], "square_axes (pybrops.model.pcvmat.denseadditiveprogenygeneticcovariancematrix.denseadditiveprogenygeneticcovariancematrix property)": [[803, "pybrops.model.pcvmat.DenseAdditiveProgenyGeneticCovarianceMatrix.DenseAdditiveProgenyGeneticCovarianceMatrix.square_axes"]], "square_axes_len (pybrops.model.pcvmat.denseadditiveprogenygeneticcovariancematrix.denseadditiveprogenygeneticcovariancematrix property)": [[803, "pybrops.model.pcvmat.DenseAdditiveProgenyGeneticCovarianceMatrix.DenseAdditiveProgenyGeneticCovarianceMatrix.square_axes_len"]], "square_taxa_axes (pybrops.model.pcvmat.denseadditiveprogenygeneticcovariancematrix.denseadditiveprogenygeneticcovariancematrix property)": [[803, "pybrops.model.pcvmat.DenseAdditiveProgenyGeneticCovarianceMatrix.DenseAdditiveProgenyGeneticCovarianceMatrix.square_taxa_axes"]], "square_taxa_axes_len (pybrops.model.pcvmat.denseadditiveprogenygeneticcovariancematrix.denseadditiveprogenygeneticcovariancematrix property)": [[803, "pybrops.model.pcvmat.DenseAdditiveProgenyGeneticCovarianceMatrix.DenseAdditiveProgenyGeneticCovarianceMatrix.square_taxa_axes_len"]], "square_trait_axes (pybrops.model.pcvmat.denseadditiveprogenygeneticcovariancematrix.denseadditiveprogenygeneticcovariancematrix property)": [[803, "pybrops.model.pcvmat.DenseAdditiveProgenyGeneticCovarianceMatrix.DenseAdditiveProgenyGeneticCovarianceMatrix.square_trait_axes"]], "square_trait_axes_len (pybrops.model.pcvmat.denseadditiveprogenygeneticcovariancematrix.denseadditiveprogenygeneticcovariancematrix property)": [[803, "pybrops.model.pcvmat.DenseAdditiveProgenyGeneticCovarianceMatrix.DenseAdditiveProgenyGeneticCovarianceMatrix.square_trait_axes_len"]], "taxa (pybrops.model.pcvmat.denseadditiveprogenygeneticcovariancematrix.denseadditiveprogenygeneticcovariancematrix property)": [[803, "pybrops.model.pcvmat.DenseAdditiveProgenyGeneticCovarianceMatrix.DenseAdditiveProgenyGeneticCovarianceMatrix.taxa"]], "taxa_axis (pybrops.model.pcvmat.denseadditiveprogenygeneticcovariancematrix.denseadditiveprogenygeneticcovariancematrix property)": [[803, "pybrops.model.pcvmat.DenseAdditiveProgenyGeneticCovarianceMatrix.DenseAdditiveProgenyGeneticCovarianceMatrix.taxa_axis"]], "taxa_grp (pybrops.model.pcvmat.denseadditiveprogenygeneticcovariancematrix.denseadditiveprogenygeneticcovariancematrix property)": [[803, "pybrops.model.pcvmat.DenseAdditiveProgenyGeneticCovarianceMatrix.DenseAdditiveProgenyGeneticCovarianceMatrix.taxa_grp"]], "taxa_grp_len (pybrops.model.pcvmat.denseadditiveprogenygeneticcovariancematrix.denseadditiveprogenygeneticcovariancematrix property)": [[803, "pybrops.model.pcvmat.DenseAdditiveProgenyGeneticCovarianceMatrix.DenseAdditiveProgenyGeneticCovarianceMatrix.taxa_grp_len"]], "taxa_grp_name (pybrops.model.pcvmat.denseadditiveprogenygeneticcovariancematrix.denseadditiveprogenygeneticcovariancematrix property)": [[803, "pybrops.model.pcvmat.DenseAdditiveProgenyGeneticCovarianceMatrix.DenseAdditiveProgenyGeneticCovarianceMatrix.taxa_grp_name"]], "taxa_grp_spix (pybrops.model.pcvmat.denseadditiveprogenygeneticcovariancematrix.denseadditiveprogenygeneticcovariancematrix property)": [[803, "pybrops.model.pcvmat.DenseAdditiveProgenyGeneticCovarianceMatrix.DenseAdditiveProgenyGeneticCovarianceMatrix.taxa_grp_spix"]], "taxa_grp_stix (pybrops.model.pcvmat.denseadditiveprogenygeneticcovariancematrix.denseadditiveprogenygeneticcovariancematrix property)": [[803, "pybrops.model.pcvmat.DenseAdditiveProgenyGeneticCovarianceMatrix.DenseAdditiveProgenyGeneticCovarianceMatrix.taxa_grp_stix"]], "to_csv() (pybrops.model.pcvmat.denseadditiveprogenygeneticcovariancematrix.denseadditiveprogenygeneticcovariancematrix method)": [[803, "pybrops.model.pcvmat.DenseAdditiveProgenyGeneticCovarianceMatrix.DenseAdditiveProgenyGeneticCovarianceMatrix.to_csv"]], "to_hdf5() (pybrops.model.pcvmat.denseadditiveprogenygeneticcovariancematrix.denseadditiveprogenygeneticcovariancematrix method)": [[803, "pybrops.model.pcvmat.DenseAdditiveProgenyGeneticCovarianceMatrix.DenseAdditiveProgenyGeneticCovarianceMatrix.to_hdf5"]], "to_pandas() (pybrops.model.pcvmat.denseadditiveprogenygeneticcovariancematrix.denseadditiveprogenygeneticcovariancematrix method)": [[803, "pybrops.model.pcvmat.DenseAdditiveProgenyGeneticCovarianceMatrix.DenseAdditiveProgenyGeneticCovarianceMatrix.to_pandas"]], "trait (pybrops.model.pcvmat.denseadditiveprogenygeneticcovariancematrix.denseadditiveprogenygeneticcovariancematrix property)": [[803, "pybrops.model.pcvmat.DenseAdditiveProgenyGeneticCovarianceMatrix.DenseAdditiveProgenyGeneticCovarianceMatrix.trait"]], "trait_axis (pybrops.model.pcvmat.denseadditiveprogenygeneticcovariancematrix.denseadditiveprogenygeneticcovariancematrix property)": [[803, "pybrops.model.pcvmat.DenseAdditiveProgenyGeneticCovarianceMatrix.DenseAdditiveProgenyGeneticCovarianceMatrix.trait_axis"]], "ungroup() (pybrops.model.pcvmat.denseadditiveprogenygeneticcovariancematrix.denseadditiveprogenygeneticcovariancematrix method)": [[803, "pybrops.model.pcvmat.DenseAdditiveProgenyGeneticCovarianceMatrix.DenseAdditiveProgenyGeneticCovarianceMatrix.ungroup"]], "ungroup_taxa() (pybrops.model.pcvmat.denseadditiveprogenygeneticcovariancematrix.denseadditiveprogenygeneticcovariancematrix method)": [[803, "pybrops.model.pcvmat.DenseAdditiveProgenyGeneticCovarianceMatrix.DenseAdditiveProgenyGeneticCovarianceMatrix.ungroup_taxa"]], "check_is_denseadditiveprogenygeneticcovariancematrix() (in module pybrops.model.pcvmat.denseadditiveprogenygeneticcovariancematrix)": [[804, "pybrops.model.pcvmat.DenseAdditiveProgenyGeneticCovarianceMatrix.check_is_DenseAdditiveProgenyGeneticCovarianceMatrix"]], "pybrops.model.pcvmat.denseadditiveprogenygeniccovariancematrix": [[805, "module-pybrops.model.pcvmat.DenseAdditiveProgenyGenicCovarianceMatrix"]], "denseadditiveprogenygeniccovariancematrix (class in pybrops.model.pcvmat.denseadditiveprogenygeniccovariancematrix)": [[806, "pybrops.model.pcvmat.DenseAdditiveProgenyGenicCovarianceMatrix.DenseAdditiveProgenyGenicCovarianceMatrix"]], "__add__() (pybrops.model.pcvmat.denseadditiveprogenygeniccovariancematrix.denseadditiveprogenygeniccovariancematrix method)": [[806, "pybrops.model.pcvmat.DenseAdditiveProgenyGenicCovarianceMatrix.DenseAdditiveProgenyGenicCovarianceMatrix.__add__"]], "__mul__() (pybrops.model.pcvmat.denseadditiveprogenygeniccovariancematrix.denseadditiveprogenygeniccovariancematrix method)": [[806, "pybrops.model.pcvmat.DenseAdditiveProgenyGenicCovarianceMatrix.DenseAdditiveProgenyGenicCovarianceMatrix.__mul__"]], "adjoin() (pybrops.model.pcvmat.denseadditiveprogenygeniccovariancematrix.denseadditiveprogenygeniccovariancematrix method)": [[806, "pybrops.model.pcvmat.DenseAdditiveProgenyGenicCovarianceMatrix.DenseAdditiveProgenyGenicCovarianceMatrix.adjoin"]], "adjoin_taxa() (pybrops.model.pcvmat.denseadditiveprogenygeniccovariancematrix.denseadditiveprogenygeniccovariancematrix method)": [[806, "pybrops.model.pcvmat.DenseAdditiveProgenyGenicCovarianceMatrix.DenseAdditiveProgenyGenicCovarianceMatrix.adjoin_taxa"]], "adjoin_trait() (pybrops.model.pcvmat.denseadditiveprogenygeniccovariancematrix.denseadditiveprogenygeniccovariancematrix method)": [[806, "pybrops.model.pcvmat.DenseAdditiveProgenyGenicCovarianceMatrix.DenseAdditiveProgenyGenicCovarianceMatrix.adjoin_trait"]], "append() (pybrops.model.pcvmat.denseadditiveprogenygeniccovariancematrix.denseadditiveprogenygeniccovariancematrix method)": [[806, "pybrops.model.pcvmat.DenseAdditiveProgenyGenicCovarianceMatrix.DenseAdditiveProgenyGenicCovarianceMatrix.append"]], "append_taxa() (pybrops.model.pcvmat.denseadditiveprogenygeniccovariancematrix.denseadditiveprogenygeniccovariancematrix method)": [[806, "pybrops.model.pcvmat.DenseAdditiveProgenyGenicCovarianceMatrix.DenseAdditiveProgenyGenicCovarianceMatrix.append_taxa"]], "append_trait() (pybrops.model.pcvmat.denseadditiveprogenygeniccovariancematrix.denseadditiveprogenygeniccovariancematrix method)": [[806, "pybrops.model.pcvmat.DenseAdditiveProgenyGenicCovarianceMatrix.DenseAdditiveProgenyGenicCovarianceMatrix.append_trait"]], "concat() (pybrops.model.pcvmat.denseadditiveprogenygeniccovariancematrix.denseadditiveprogenygeniccovariancematrix class method)": [[806, "pybrops.model.pcvmat.DenseAdditiveProgenyGenicCovarianceMatrix.DenseAdditiveProgenyGenicCovarianceMatrix.concat"]], "concat_taxa() (pybrops.model.pcvmat.denseadditiveprogenygeniccovariancematrix.denseadditiveprogenygeniccovariancematrix class method)": [[806, "pybrops.model.pcvmat.DenseAdditiveProgenyGenicCovarianceMatrix.DenseAdditiveProgenyGenicCovarianceMatrix.concat_taxa"]], "concat_trait() (pybrops.model.pcvmat.denseadditiveprogenygeniccovariancematrix.denseadditiveprogenygeniccovariancematrix class method)": [[806, "pybrops.model.pcvmat.DenseAdditiveProgenyGenicCovarianceMatrix.DenseAdditiveProgenyGenicCovarianceMatrix.concat_trait"]], "copy() (pybrops.model.pcvmat.denseadditiveprogenygeniccovariancematrix.denseadditiveprogenygeniccovariancematrix method)": [[806, "pybrops.model.pcvmat.DenseAdditiveProgenyGenicCovarianceMatrix.DenseAdditiveProgenyGenicCovarianceMatrix.copy"]], "deepcopy() (pybrops.model.pcvmat.denseadditiveprogenygeniccovariancematrix.denseadditiveprogenygeniccovariancematrix method)": [[806, "pybrops.model.pcvmat.DenseAdditiveProgenyGenicCovarianceMatrix.DenseAdditiveProgenyGenicCovarianceMatrix.deepcopy"]], "delete() (pybrops.model.pcvmat.denseadditiveprogenygeniccovariancematrix.denseadditiveprogenygeniccovariancematrix method)": [[806, "pybrops.model.pcvmat.DenseAdditiveProgenyGenicCovarianceMatrix.DenseAdditiveProgenyGenicCovarianceMatrix.delete"]], "delete_taxa() (pybrops.model.pcvmat.denseadditiveprogenygeniccovariancematrix.denseadditiveprogenygeniccovariancematrix method)": [[806, "pybrops.model.pcvmat.DenseAdditiveProgenyGenicCovarianceMatrix.DenseAdditiveProgenyGenicCovarianceMatrix.delete_taxa"]], "delete_trait() (pybrops.model.pcvmat.denseadditiveprogenygeniccovariancematrix.denseadditiveprogenygeniccovariancematrix method)": [[806, "pybrops.model.pcvmat.DenseAdditiveProgenyGenicCovarianceMatrix.DenseAdditiveProgenyGenicCovarianceMatrix.delete_trait"]], "epgc (pybrops.model.pcvmat.denseadditiveprogenygeniccovariancematrix.denseadditiveprogenygeniccovariancematrix property)": [[806, "pybrops.model.pcvmat.DenseAdditiveProgenyGenicCovarianceMatrix.DenseAdditiveProgenyGenicCovarianceMatrix.epgc"]], "from_algmod() (pybrops.model.pcvmat.denseadditiveprogenygeniccovariancematrix.denseadditiveprogenygeniccovariancematrix class method)": [[806, "pybrops.model.pcvmat.DenseAdditiveProgenyGenicCovarianceMatrix.DenseAdditiveProgenyGenicCovarianceMatrix.from_algmod"]], "from_csv() (pybrops.model.pcvmat.denseadditiveprogenygeniccovariancematrix.denseadditiveprogenygeniccovariancematrix class method)": [[806, "pybrops.model.pcvmat.DenseAdditiveProgenyGenicCovarianceMatrix.DenseAdditiveProgenyGenicCovarianceMatrix.from_csv"]], "from_gmod() (pybrops.model.pcvmat.denseadditiveprogenygeniccovariancematrix.denseadditiveprogenygeniccovariancematrix class method)": [[806, "pybrops.model.pcvmat.DenseAdditiveProgenyGenicCovarianceMatrix.DenseAdditiveProgenyGenicCovarianceMatrix.from_gmod"]], "from_hdf5() (pybrops.model.pcvmat.denseadditiveprogenygeniccovariancematrix.denseadditiveprogenygeniccovariancematrix class method)": [[806, "pybrops.model.pcvmat.DenseAdditiveProgenyGenicCovarianceMatrix.DenseAdditiveProgenyGenicCovarianceMatrix.from_hdf5"]], "from_pandas() (pybrops.model.pcvmat.denseadditiveprogenygeniccovariancematrix.denseadditiveprogenygeniccovariancematrix class method)": [[806, "pybrops.model.pcvmat.DenseAdditiveProgenyGenicCovarianceMatrix.DenseAdditiveProgenyGenicCovarianceMatrix.from_pandas"]], "group() (pybrops.model.pcvmat.denseadditiveprogenygeniccovariancematrix.denseadditiveprogenygeniccovariancematrix method)": [[806, "pybrops.model.pcvmat.DenseAdditiveProgenyGenicCovarianceMatrix.DenseAdditiveProgenyGenicCovarianceMatrix.group"]], "group_taxa() (pybrops.model.pcvmat.denseadditiveprogenygeniccovariancematrix.denseadditiveprogenygeniccovariancematrix method)": [[806, "pybrops.model.pcvmat.DenseAdditiveProgenyGenicCovarianceMatrix.DenseAdditiveProgenyGenicCovarianceMatrix.group_taxa"]], "incorp() (pybrops.model.pcvmat.denseadditiveprogenygeniccovariancematrix.denseadditiveprogenygeniccovariancematrix method)": [[806, "pybrops.model.pcvmat.DenseAdditiveProgenyGenicCovarianceMatrix.DenseAdditiveProgenyGenicCovarianceMatrix.incorp"]], "incorp_taxa() (pybrops.model.pcvmat.denseadditiveprogenygeniccovariancematrix.denseadditiveprogenygeniccovariancematrix method)": [[806, "pybrops.model.pcvmat.DenseAdditiveProgenyGenicCovarianceMatrix.DenseAdditiveProgenyGenicCovarianceMatrix.incorp_taxa"]], "incorp_trait() (pybrops.model.pcvmat.denseadditiveprogenygeniccovariancematrix.denseadditiveprogenygeniccovariancematrix method)": [[806, "pybrops.model.pcvmat.DenseAdditiveProgenyGenicCovarianceMatrix.DenseAdditiveProgenyGenicCovarianceMatrix.incorp_trait"]], "insert() (pybrops.model.pcvmat.denseadditiveprogenygeniccovariancematrix.denseadditiveprogenygeniccovariancematrix method)": [[806, "pybrops.model.pcvmat.DenseAdditiveProgenyGenicCovarianceMatrix.DenseAdditiveProgenyGenicCovarianceMatrix.insert"]], "insert_taxa() (pybrops.model.pcvmat.denseadditiveprogenygeniccovariancematrix.denseadditiveprogenygeniccovariancematrix method)": [[806, "pybrops.model.pcvmat.DenseAdditiveProgenyGenicCovarianceMatrix.DenseAdditiveProgenyGenicCovarianceMatrix.insert_taxa"]], "insert_trait() (pybrops.model.pcvmat.denseadditiveprogenygeniccovariancematrix.denseadditiveprogenygeniccovariancematrix method)": [[806, "pybrops.model.pcvmat.DenseAdditiveProgenyGenicCovarianceMatrix.DenseAdditiveProgenyGenicCovarianceMatrix.insert_trait"]], "is_grouped() (pybrops.model.pcvmat.denseadditiveprogenygeniccovariancematrix.denseadditiveprogenygeniccovariancematrix method)": [[806, "pybrops.model.pcvmat.DenseAdditiveProgenyGenicCovarianceMatrix.DenseAdditiveProgenyGenicCovarianceMatrix.is_grouped"]], "is_grouped_taxa() (pybrops.model.pcvmat.denseadditiveprogenygeniccovariancematrix.denseadditiveprogenygeniccovariancematrix method)": [[806, "pybrops.model.pcvmat.DenseAdditiveProgenyGenicCovarianceMatrix.DenseAdditiveProgenyGenicCovarianceMatrix.is_grouped_taxa"]], "is_square() (pybrops.model.pcvmat.denseadditiveprogenygeniccovariancematrix.denseadditiveprogenygeniccovariancematrix method)": [[806, "pybrops.model.pcvmat.DenseAdditiveProgenyGenicCovarianceMatrix.DenseAdditiveProgenyGenicCovarianceMatrix.is_square"]], "is_square_taxa() (pybrops.model.pcvmat.denseadditiveprogenygeniccovariancematrix.denseadditiveprogenygeniccovariancematrix method)": [[806, "pybrops.model.pcvmat.DenseAdditiveProgenyGenicCovarianceMatrix.DenseAdditiveProgenyGenicCovarianceMatrix.is_square_taxa"]], "is_square_trait() (pybrops.model.pcvmat.denseadditiveprogenygeniccovariancematrix.denseadditiveprogenygeniccovariancematrix method)": [[806, "pybrops.model.pcvmat.DenseAdditiveProgenyGenicCovarianceMatrix.DenseAdditiveProgenyGenicCovarianceMatrix.is_square_trait"]], "lexsort() (pybrops.model.pcvmat.denseadditiveprogenygeniccovariancematrix.denseadditiveprogenygeniccovariancematrix method)": [[806, "pybrops.model.pcvmat.DenseAdditiveProgenyGenicCovarianceMatrix.DenseAdditiveProgenyGenicCovarianceMatrix.lexsort"]], "lexsort_taxa() (pybrops.model.pcvmat.denseadditiveprogenygeniccovariancematrix.denseadditiveprogenygeniccovariancematrix method)": [[806, "pybrops.model.pcvmat.DenseAdditiveProgenyGenicCovarianceMatrix.DenseAdditiveProgenyGenicCovarianceMatrix.lexsort_taxa"]], "lexsort_trait() (pybrops.model.pcvmat.denseadditiveprogenygeniccovariancematrix.denseadditiveprogenygeniccovariancematrix method)": [[806, "pybrops.model.pcvmat.DenseAdditiveProgenyGenicCovarianceMatrix.DenseAdditiveProgenyGenicCovarianceMatrix.lexsort_trait"]], "mat (pybrops.model.pcvmat.denseadditiveprogenygeniccovariancematrix.denseadditiveprogenygeniccovariancematrix property)": [[806, "pybrops.model.pcvmat.DenseAdditiveProgenyGenicCovarianceMatrix.DenseAdditiveProgenyGenicCovarianceMatrix.mat"]], "mat_ndim (pybrops.model.pcvmat.denseadditiveprogenygeniccovariancematrix.denseadditiveprogenygeniccovariancematrix property)": [[806, "pybrops.model.pcvmat.DenseAdditiveProgenyGenicCovarianceMatrix.DenseAdditiveProgenyGenicCovarianceMatrix.mat_ndim"]], "mat_shape (pybrops.model.pcvmat.denseadditiveprogenygeniccovariancematrix.denseadditiveprogenygeniccovariancematrix property)": [[806, "pybrops.model.pcvmat.DenseAdditiveProgenyGenicCovarianceMatrix.DenseAdditiveProgenyGenicCovarianceMatrix.mat_shape"]], "nsquare (pybrops.model.pcvmat.denseadditiveprogenygeniccovariancematrix.denseadditiveprogenygeniccovariancematrix property)": [[806, "pybrops.model.pcvmat.DenseAdditiveProgenyGenicCovarianceMatrix.DenseAdditiveProgenyGenicCovarianceMatrix.nsquare"]], "nsquare_taxa (pybrops.model.pcvmat.denseadditiveprogenygeniccovariancematrix.denseadditiveprogenygeniccovariancematrix property)": [[806, "pybrops.model.pcvmat.DenseAdditiveProgenyGenicCovarianceMatrix.DenseAdditiveProgenyGenicCovarianceMatrix.nsquare_taxa"]], "nsquare_trait (pybrops.model.pcvmat.denseadditiveprogenygeniccovariancematrix.denseadditiveprogenygeniccovariancematrix property)": [[806, "pybrops.model.pcvmat.DenseAdditiveProgenyGenicCovarianceMatrix.DenseAdditiveProgenyGenicCovarianceMatrix.nsquare_trait"]], "ntaxa (pybrops.model.pcvmat.denseadditiveprogenygeniccovariancematrix.denseadditiveprogenygeniccovariancematrix property)": [[806, "pybrops.model.pcvmat.DenseAdditiveProgenyGenicCovarianceMatrix.DenseAdditiveProgenyGenicCovarianceMatrix.ntaxa"]], "ntrait (pybrops.model.pcvmat.denseadditiveprogenygeniccovariancematrix.denseadditiveprogenygeniccovariancematrix property)": [[806, "pybrops.model.pcvmat.DenseAdditiveProgenyGenicCovarianceMatrix.DenseAdditiveProgenyGenicCovarianceMatrix.ntrait"]], "remove() (pybrops.model.pcvmat.denseadditiveprogenygeniccovariancematrix.denseadditiveprogenygeniccovariancematrix method)": [[806, "pybrops.model.pcvmat.DenseAdditiveProgenyGenicCovarianceMatrix.DenseAdditiveProgenyGenicCovarianceMatrix.remove"]], "remove_taxa() (pybrops.model.pcvmat.denseadditiveprogenygeniccovariancematrix.denseadditiveprogenygeniccovariancematrix method)": [[806, "pybrops.model.pcvmat.DenseAdditiveProgenyGenicCovarianceMatrix.DenseAdditiveProgenyGenicCovarianceMatrix.remove_taxa"]], "remove_trait() (pybrops.model.pcvmat.denseadditiveprogenygeniccovariancematrix.denseadditiveprogenygeniccovariancematrix method)": [[806, "pybrops.model.pcvmat.DenseAdditiveProgenyGenicCovarianceMatrix.DenseAdditiveProgenyGenicCovarianceMatrix.remove_trait"]], "reorder() (pybrops.model.pcvmat.denseadditiveprogenygeniccovariancematrix.denseadditiveprogenygeniccovariancematrix method)": [[806, "pybrops.model.pcvmat.DenseAdditiveProgenyGenicCovarianceMatrix.DenseAdditiveProgenyGenicCovarianceMatrix.reorder"]], "reorder_taxa() (pybrops.model.pcvmat.denseadditiveprogenygeniccovariancematrix.denseadditiveprogenygeniccovariancematrix method)": [[806, "pybrops.model.pcvmat.DenseAdditiveProgenyGenicCovarianceMatrix.DenseAdditiveProgenyGenicCovarianceMatrix.reorder_taxa"]], "reorder_trait() (pybrops.model.pcvmat.denseadditiveprogenygeniccovariancematrix.denseadditiveprogenygeniccovariancematrix method)": [[806, "pybrops.model.pcvmat.DenseAdditiveProgenyGenicCovarianceMatrix.DenseAdditiveProgenyGenicCovarianceMatrix.reorder_trait"]], "select() (pybrops.model.pcvmat.denseadditiveprogenygeniccovariancematrix.denseadditiveprogenygeniccovariancematrix method)": [[806, "pybrops.model.pcvmat.DenseAdditiveProgenyGenicCovarianceMatrix.DenseAdditiveProgenyGenicCovarianceMatrix.select"]], "select_taxa() (pybrops.model.pcvmat.denseadditiveprogenygeniccovariancematrix.denseadditiveprogenygeniccovariancematrix method)": [[806, "pybrops.model.pcvmat.DenseAdditiveProgenyGenicCovarianceMatrix.DenseAdditiveProgenyGenicCovarianceMatrix.select_taxa"]], "select_trait() (pybrops.model.pcvmat.denseadditiveprogenygeniccovariancematrix.denseadditiveprogenygeniccovariancematrix method)": [[806, "pybrops.model.pcvmat.DenseAdditiveProgenyGenicCovarianceMatrix.DenseAdditiveProgenyGenicCovarianceMatrix.select_trait"]], "sort() (pybrops.model.pcvmat.denseadditiveprogenygeniccovariancematrix.denseadditiveprogenygeniccovariancematrix method)": [[806, "pybrops.model.pcvmat.DenseAdditiveProgenyGenicCovarianceMatrix.DenseAdditiveProgenyGenicCovarianceMatrix.sort"]], "sort_taxa() (pybrops.model.pcvmat.denseadditiveprogenygeniccovariancematrix.denseadditiveprogenygeniccovariancematrix method)": [[806, "pybrops.model.pcvmat.DenseAdditiveProgenyGenicCovarianceMatrix.DenseAdditiveProgenyGenicCovarianceMatrix.sort_taxa"]], "sort_trait() (pybrops.model.pcvmat.denseadditiveprogenygeniccovariancematrix.denseadditiveprogenygeniccovariancematrix method)": [[806, "pybrops.model.pcvmat.DenseAdditiveProgenyGenicCovarianceMatrix.DenseAdditiveProgenyGenicCovarianceMatrix.sort_trait"]], "square_axes (pybrops.model.pcvmat.denseadditiveprogenygeniccovariancematrix.denseadditiveprogenygeniccovariancematrix property)": [[806, "pybrops.model.pcvmat.DenseAdditiveProgenyGenicCovarianceMatrix.DenseAdditiveProgenyGenicCovarianceMatrix.square_axes"]], "square_axes_len (pybrops.model.pcvmat.denseadditiveprogenygeniccovariancematrix.denseadditiveprogenygeniccovariancematrix property)": [[806, "pybrops.model.pcvmat.DenseAdditiveProgenyGenicCovarianceMatrix.DenseAdditiveProgenyGenicCovarianceMatrix.square_axes_len"]], "square_taxa_axes (pybrops.model.pcvmat.denseadditiveprogenygeniccovariancematrix.denseadditiveprogenygeniccovariancematrix property)": [[806, "pybrops.model.pcvmat.DenseAdditiveProgenyGenicCovarianceMatrix.DenseAdditiveProgenyGenicCovarianceMatrix.square_taxa_axes"]], "square_taxa_axes_len (pybrops.model.pcvmat.denseadditiveprogenygeniccovariancematrix.denseadditiveprogenygeniccovariancematrix property)": [[806, "pybrops.model.pcvmat.DenseAdditiveProgenyGenicCovarianceMatrix.DenseAdditiveProgenyGenicCovarianceMatrix.square_taxa_axes_len"]], "square_trait_axes (pybrops.model.pcvmat.denseadditiveprogenygeniccovariancematrix.denseadditiveprogenygeniccovariancematrix property)": [[806, "pybrops.model.pcvmat.DenseAdditiveProgenyGenicCovarianceMatrix.DenseAdditiveProgenyGenicCovarianceMatrix.square_trait_axes"]], "square_trait_axes_len (pybrops.model.pcvmat.denseadditiveprogenygeniccovariancematrix.denseadditiveprogenygeniccovariancematrix property)": [[806, "pybrops.model.pcvmat.DenseAdditiveProgenyGenicCovarianceMatrix.DenseAdditiveProgenyGenicCovarianceMatrix.square_trait_axes_len"]], "taxa (pybrops.model.pcvmat.denseadditiveprogenygeniccovariancematrix.denseadditiveprogenygeniccovariancematrix property)": [[806, "pybrops.model.pcvmat.DenseAdditiveProgenyGenicCovarianceMatrix.DenseAdditiveProgenyGenicCovarianceMatrix.taxa"]], "taxa_axis (pybrops.model.pcvmat.denseadditiveprogenygeniccovariancematrix.denseadditiveprogenygeniccovariancematrix property)": [[806, "pybrops.model.pcvmat.DenseAdditiveProgenyGenicCovarianceMatrix.DenseAdditiveProgenyGenicCovarianceMatrix.taxa_axis"]], "taxa_grp (pybrops.model.pcvmat.denseadditiveprogenygeniccovariancematrix.denseadditiveprogenygeniccovariancematrix property)": [[806, "pybrops.model.pcvmat.DenseAdditiveProgenyGenicCovarianceMatrix.DenseAdditiveProgenyGenicCovarianceMatrix.taxa_grp"]], "taxa_grp_len (pybrops.model.pcvmat.denseadditiveprogenygeniccovariancematrix.denseadditiveprogenygeniccovariancematrix property)": [[806, "pybrops.model.pcvmat.DenseAdditiveProgenyGenicCovarianceMatrix.DenseAdditiveProgenyGenicCovarianceMatrix.taxa_grp_len"]], "taxa_grp_name (pybrops.model.pcvmat.denseadditiveprogenygeniccovariancematrix.denseadditiveprogenygeniccovariancematrix property)": [[806, "pybrops.model.pcvmat.DenseAdditiveProgenyGenicCovarianceMatrix.DenseAdditiveProgenyGenicCovarianceMatrix.taxa_grp_name"]], "taxa_grp_spix (pybrops.model.pcvmat.denseadditiveprogenygeniccovariancematrix.denseadditiveprogenygeniccovariancematrix property)": [[806, "pybrops.model.pcvmat.DenseAdditiveProgenyGenicCovarianceMatrix.DenseAdditiveProgenyGenicCovarianceMatrix.taxa_grp_spix"]], "taxa_grp_stix (pybrops.model.pcvmat.denseadditiveprogenygeniccovariancematrix.denseadditiveprogenygeniccovariancematrix property)": [[806, "pybrops.model.pcvmat.DenseAdditiveProgenyGenicCovarianceMatrix.DenseAdditiveProgenyGenicCovarianceMatrix.taxa_grp_stix"]], "to_csv() (pybrops.model.pcvmat.denseadditiveprogenygeniccovariancematrix.denseadditiveprogenygeniccovariancematrix method)": [[806, "pybrops.model.pcvmat.DenseAdditiveProgenyGenicCovarianceMatrix.DenseAdditiveProgenyGenicCovarianceMatrix.to_csv"]], "to_hdf5() (pybrops.model.pcvmat.denseadditiveprogenygeniccovariancematrix.denseadditiveprogenygeniccovariancematrix method)": [[806, "pybrops.model.pcvmat.DenseAdditiveProgenyGenicCovarianceMatrix.DenseAdditiveProgenyGenicCovarianceMatrix.to_hdf5"]], "to_pandas() (pybrops.model.pcvmat.denseadditiveprogenygeniccovariancematrix.denseadditiveprogenygeniccovariancematrix method)": [[806, "pybrops.model.pcvmat.DenseAdditiveProgenyGenicCovarianceMatrix.DenseAdditiveProgenyGenicCovarianceMatrix.to_pandas"]], "trait (pybrops.model.pcvmat.denseadditiveprogenygeniccovariancematrix.denseadditiveprogenygeniccovariancematrix property)": [[806, "pybrops.model.pcvmat.DenseAdditiveProgenyGenicCovarianceMatrix.DenseAdditiveProgenyGenicCovarianceMatrix.trait"]], "trait_axis (pybrops.model.pcvmat.denseadditiveprogenygeniccovariancematrix.denseadditiveprogenygeniccovariancematrix property)": [[806, "pybrops.model.pcvmat.DenseAdditiveProgenyGenicCovarianceMatrix.DenseAdditiveProgenyGenicCovarianceMatrix.trait_axis"]], "ungroup() (pybrops.model.pcvmat.denseadditiveprogenygeniccovariancematrix.denseadditiveprogenygeniccovariancematrix method)": [[806, "pybrops.model.pcvmat.DenseAdditiveProgenyGenicCovarianceMatrix.DenseAdditiveProgenyGenicCovarianceMatrix.ungroup"]], "ungroup_taxa() (pybrops.model.pcvmat.denseadditiveprogenygeniccovariancematrix.denseadditiveprogenygeniccovariancematrix method)": [[806, "pybrops.model.pcvmat.DenseAdditiveProgenyGenicCovarianceMatrix.DenseAdditiveProgenyGenicCovarianceMatrix.ungroup_taxa"]], "check_is_denseadditiveprogenygeniccovariancematrix() (in module pybrops.model.pcvmat.denseadditiveprogenygeniccovariancematrix)": [[807, "pybrops.model.pcvmat.DenseAdditiveProgenyGenicCovarianceMatrix.check_is_DenseAdditiveProgenyGenicCovarianceMatrix"]], "pybrops.model.pcvmat.densedihybriddhadditiveprogenygeneticcovariancematrix": [[808, "module-pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix"]], "densedihybriddhadditiveprogenygeneticcovariancematrix (class in pybrops.model.pcvmat.densedihybriddhadditiveprogenygeneticcovariancematrix)": [[809, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix"]], "__add__() (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeneticcovariancematrix.densedihybriddhadditiveprogenygeneticcovariancematrix method)": [[809, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.__add__"]], "__mul__() (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeneticcovariancematrix.densedihybriddhadditiveprogenygeneticcovariancematrix method)": [[809, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.__mul__"]], "adjoin() (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeneticcovariancematrix.densedihybriddhadditiveprogenygeneticcovariancematrix method)": [[809, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.adjoin"]], "adjoin_taxa() (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeneticcovariancematrix.densedihybriddhadditiveprogenygeneticcovariancematrix method)": [[809, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.adjoin_taxa"]], "adjoin_trait() (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeneticcovariancematrix.densedihybriddhadditiveprogenygeneticcovariancematrix method)": [[809, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.adjoin_trait"]], "append() (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeneticcovariancematrix.densedihybriddhadditiveprogenygeneticcovariancematrix method)": [[809, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.append"]], "append_taxa() (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeneticcovariancematrix.densedihybriddhadditiveprogenygeneticcovariancematrix method)": [[809, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.append_taxa"]], "append_trait() (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeneticcovariancematrix.densedihybriddhadditiveprogenygeneticcovariancematrix method)": [[809, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.append_trait"]], "concat() (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeneticcovariancematrix.densedihybriddhadditiveprogenygeneticcovariancematrix class method)": [[809, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.concat"]], "concat_taxa() (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeneticcovariancematrix.densedihybriddhadditiveprogenygeneticcovariancematrix class method)": [[809, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.concat_taxa"]], "concat_trait() (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeneticcovariancematrix.densedihybriddhadditiveprogenygeneticcovariancematrix class method)": [[809, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.concat_trait"]], "copy() (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeneticcovariancematrix.densedihybriddhadditiveprogenygeneticcovariancematrix method)": [[809, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.copy"]], "deepcopy() (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeneticcovariancematrix.densedihybriddhadditiveprogenygeneticcovariancematrix method)": [[809, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.deepcopy"]], "delete() (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeneticcovariancematrix.densedihybriddhadditiveprogenygeneticcovariancematrix method)": [[809, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.delete"]], "delete_taxa() (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeneticcovariancematrix.densedihybriddhadditiveprogenygeneticcovariancematrix method)": [[809, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.delete_taxa"]], "delete_trait() (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeneticcovariancematrix.densedihybriddhadditiveprogenygeneticcovariancematrix method)": [[809, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.delete_trait"]], "epgc (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeneticcovariancematrix.densedihybriddhadditiveprogenygeneticcovariancematrix property)": [[809, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.epgc"]], "female_axis (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeneticcovariancematrix.densedihybriddhadditiveprogenygeneticcovariancematrix property)": [[809, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.female_axis"]], "from_algmod() (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeneticcovariancematrix.densedihybriddhadditiveprogenygeneticcovariancematrix class method)": [[809, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.from_algmod"]], "from_csv() (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeneticcovariancematrix.densedihybriddhadditiveprogenygeneticcovariancematrix class method)": [[809, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.from_csv"]], "from_gmod() (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeneticcovariancematrix.densedihybriddhadditiveprogenygeneticcovariancematrix class method)": [[809, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.from_gmod"]], "from_hdf5() (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeneticcovariancematrix.densedihybriddhadditiveprogenygeneticcovariancematrix class method)": [[809, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.from_hdf5"]], "from_pandas() (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeneticcovariancematrix.densedihybriddhadditiveprogenygeneticcovariancematrix class method)": [[809, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.from_pandas"]], "group() (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeneticcovariancematrix.densedihybriddhadditiveprogenygeneticcovariancematrix method)": [[809, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.group"]], "group_taxa() (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeneticcovariancematrix.densedihybriddhadditiveprogenygeneticcovariancematrix method)": [[809, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.group_taxa"]], "incorp() (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeneticcovariancematrix.densedihybriddhadditiveprogenygeneticcovariancematrix method)": [[809, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.incorp"]], "incorp_taxa() (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeneticcovariancematrix.densedihybriddhadditiveprogenygeneticcovariancematrix method)": [[809, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.incorp_taxa"]], "incorp_trait() (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeneticcovariancematrix.densedihybriddhadditiveprogenygeneticcovariancematrix method)": [[809, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.incorp_trait"]], "insert() (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeneticcovariancematrix.densedihybriddhadditiveprogenygeneticcovariancematrix method)": [[809, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.insert"]], "insert_taxa() (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeneticcovariancematrix.densedihybriddhadditiveprogenygeneticcovariancematrix method)": [[809, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.insert_taxa"]], "insert_trait() (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeneticcovariancematrix.densedihybriddhadditiveprogenygeneticcovariancematrix method)": [[809, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.insert_trait"]], "is_grouped() (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeneticcovariancematrix.densedihybriddhadditiveprogenygeneticcovariancematrix method)": [[809, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.is_grouped"]], "is_grouped_taxa() (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeneticcovariancematrix.densedihybriddhadditiveprogenygeneticcovariancematrix method)": [[809, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.is_grouped_taxa"]], "is_square() (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeneticcovariancematrix.densedihybriddhadditiveprogenygeneticcovariancematrix method)": [[809, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.is_square"]], "is_square_taxa() (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeneticcovariancematrix.densedihybriddhadditiveprogenygeneticcovariancematrix method)": [[809, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.is_square_taxa"]], "is_square_trait() (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeneticcovariancematrix.densedihybriddhadditiveprogenygeneticcovariancematrix method)": [[809, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.is_square_trait"]], "lexsort() (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeneticcovariancematrix.densedihybriddhadditiveprogenygeneticcovariancematrix method)": [[809, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.lexsort"]], "lexsort_taxa() (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeneticcovariancematrix.densedihybriddhadditiveprogenygeneticcovariancematrix method)": [[809, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.lexsort_taxa"]], "lexsort_trait() (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeneticcovariancematrix.densedihybriddhadditiveprogenygeneticcovariancematrix method)": [[809, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.lexsort_trait"]], "male_axis (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeneticcovariancematrix.densedihybriddhadditiveprogenygeneticcovariancematrix property)": [[809, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.male_axis"]], "mat (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeneticcovariancematrix.densedihybriddhadditiveprogenygeneticcovariancematrix property)": [[809, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.mat"]], "mat_ndim (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeneticcovariancematrix.densedihybriddhadditiveprogenygeneticcovariancematrix property)": [[809, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.mat_ndim"]], "mat_shape (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeneticcovariancematrix.densedihybriddhadditiveprogenygeneticcovariancematrix property)": [[809, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.mat_shape"]], "nfemale (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeneticcovariancematrix.densedihybriddhadditiveprogenygeneticcovariancematrix property)": [[809, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.nfemale"]], "nmale (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeneticcovariancematrix.densedihybriddhadditiveprogenygeneticcovariancematrix property)": [[809, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.nmale"]], "nsquare (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeneticcovariancematrix.densedihybriddhadditiveprogenygeneticcovariancematrix property)": [[809, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.nsquare"]], "nsquare_taxa (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeneticcovariancematrix.densedihybriddhadditiveprogenygeneticcovariancematrix property)": [[809, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.nsquare_taxa"]], "nsquare_trait (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeneticcovariancematrix.densedihybriddhadditiveprogenygeneticcovariancematrix property)": [[809, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.nsquare_trait"]], "ntaxa (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeneticcovariancematrix.densedihybriddhadditiveprogenygeneticcovariancematrix property)": [[809, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.ntaxa"]], "ntrait (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeneticcovariancematrix.densedihybriddhadditiveprogenygeneticcovariancematrix property)": [[809, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.ntrait"]], "remove() (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeneticcovariancematrix.densedihybriddhadditiveprogenygeneticcovariancematrix method)": [[809, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.remove"]], "remove_taxa() (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeneticcovariancematrix.densedihybriddhadditiveprogenygeneticcovariancematrix method)": [[809, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.remove_taxa"]], "remove_trait() (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeneticcovariancematrix.densedihybriddhadditiveprogenygeneticcovariancematrix method)": [[809, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.remove_trait"]], "reorder() (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeneticcovariancematrix.densedihybriddhadditiveprogenygeneticcovariancematrix method)": [[809, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.reorder"]], "reorder_taxa() (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeneticcovariancematrix.densedihybriddhadditiveprogenygeneticcovariancematrix method)": [[809, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.reorder_taxa"]], "reorder_trait() (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeneticcovariancematrix.densedihybriddhadditiveprogenygeneticcovariancematrix method)": [[809, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.reorder_trait"]], "select() (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeneticcovariancematrix.densedihybriddhadditiveprogenygeneticcovariancematrix method)": [[809, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.select"]], "select_taxa() (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeneticcovariancematrix.densedihybriddhadditiveprogenygeneticcovariancematrix method)": [[809, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.select_taxa"]], "select_trait() (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeneticcovariancematrix.densedihybriddhadditiveprogenygeneticcovariancematrix method)": [[809, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.select_trait"]], "sort() (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeneticcovariancematrix.densedihybriddhadditiveprogenygeneticcovariancematrix method)": [[809, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.sort"]], "sort_taxa() (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeneticcovariancematrix.densedihybriddhadditiveprogenygeneticcovariancematrix method)": [[809, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.sort_taxa"]], "sort_trait() (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeneticcovariancematrix.densedihybriddhadditiveprogenygeneticcovariancematrix method)": [[809, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.sort_trait"]], "square_axes (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeneticcovariancematrix.densedihybriddhadditiveprogenygeneticcovariancematrix property)": [[809, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.square_axes"]], "square_axes_len (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeneticcovariancematrix.densedihybriddhadditiveprogenygeneticcovariancematrix property)": [[809, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.square_axes_len"]], "square_taxa_axes (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeneticcovariancematrix.densedihybriddhadditiveprogenygeneticcovariancematrix property)": [[809, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.square_taxa_axes"]], "square_taxa_axes_len (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeneticcovariancematrix.densedihybriddhadditiveprogenygeneticcovariancematrix property)": [[809, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.square_taxa_axes_len"]], "square_trait_axes (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeneticcovariancematrix.densedihybriddhadditiveprogenygeneticcovariancematrix property)": [[809, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.square_trait_axes"]], "square_trait_axes_len (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeneticcovariancematrix.densedihybriddhadditiveprogenygeneticcovariancematrix property)": [[809, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.square_trait_axes_len"]], "taxa (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeneticcovariancematrix.densedihybriddhadditiveprogenygeneticcovariancematrix property)": [[809, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.taxa"]], "taxa_axis (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeneticcovariancematrix.densedihybriddhadditiveprogenygeneticcovariancematrix property)": [[809, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.taxa_axis"]], "taxa_grp (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeneticcovariancematrix.densedihybriddhadditiveprogenygeneticcovariancematrix property)": [[809, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.taxa_grp"]], "taxa_grp_len (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeneticcovariancematrix.densedihybriddhadditiveprogenygeneticcovariancematrix property)": [[809, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.taxa_grp_len"]], "taxa_grp_name (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeneticcovariancematrix.densedihybriddhadditiveprogenygeneticcovariancematrix property)": [[809, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.taxa_grp_name"]], "taxa_grp_spix (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeneticcovariancematrix.densedihybriddhadditiveprogenygeneticcovariancematrix property)": [[809, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.taxa_grp_spix"]], "taxa_grp_stix (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeneticcovariancematrix.densedihybriddhadditiveprogenygeneticcovariancematrix property)": [[809, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.taxa_grp_stix"]], "to_csv() (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeneticcovariancematrix.densedihybriddhadditiveprogenygeneticcovariancematrix method)": [[809, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.to_csv"]], "to_hdf5() (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeneticcovariancematrix.densedihybriddhadditiveprogenygeneticcovariancematrix method)": [[809, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.to_hdf5"]], "to_pandas() (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeneticcovariancematrix.densedihybriddhadditiveprogenygeneticcovariancematrix method)": [[809, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.to_pandas"]], "trait (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeneticcovariancematrix.densedihybriddhadditiveprogenygeneticcovariancematrix property)": [[809, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.trait"]], "trait_axis (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeneticcovariancematrix.densedihybriddhadditiveprogenygeneticcovariancematrix property)": [[809, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.trait_axis"]], "ungroup() (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeneticcovariancematrix.densedihybriddhadditiveprogenygeneticcovariancematrix method)": [[809, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.ungroup"]], "ungroup_taxa() (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeneticcovariancematrix.densedihybriddhadditiveprogenygeneticcovariancematrix method)": [[809, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.ungroup_taxa"]], "check_is_densedihybriddhadditiveprogenygeneticcovariancematrix() (in module pybrops.model.pcvmat.densedihybriddhadditiveprogenygeneticcovariancematrix)": [[810, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix.check_is_DenseDihybridDHAdditiveProgenyGeneticCovarianceMatrix"]], "pybrops.model.pcvmat.densedihybriddhadditiveprogenygeniccovariancematrix": [[811, "module-pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix"]], "densedihybriddhadditiveprogenygeniccovariancematrix (class in pybrops.model.pcvmat.densedihybriddhadditiveprogenygeniccovariancematrix)": [[812, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix"]], "__add__() (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeniccovariancematrix.densedihybriddhadditiveprogenygeniccovariancematrix method)": [[812, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.__add__"]], "__mul__() (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeniccovariancematrix.densedihybriddhadditiveprogenygeniccovariancematrix method)": [[812, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.__mul__"]], "adjoin() (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeniccovariancematrix.densedihybriddhadditiveprogenygeniccovariancematrix method)": [[812, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.adjoin"]], "adjoin_taxa() (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeniccovariancematrix.densedihybriddhadditiveprogenygeniccovariancematrix method)": [[812, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.adjoin_taxa"]], "adjoin_trait() (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeniccovariancematrix.densedihybriddhadditiveprogenygeniccovariancematrix method)": [[812, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.adjoin_trait"]], "append() (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeniccovariancematrix.densedihybriddhadditiveprogenygeniccovariancematrix method)": [[812, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.append"]], "append_taxa() (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeniccovariancematrix.densedihybriddhadditiveprogenygeniccovariancematrix method)": [[812, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.append_taxa"]], "append_trait() (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeniccovariancematrix.densedihybriddhadditiveprogenygeniccovariancematrix method)": [[812, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.append_trait"]], "concat() (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeniccovariancematrix.densedihybriddhadditiveprogenygeniccovariancematrix class method)": [[812, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.concat"]], "concat_taxa() (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeniccovariancematrix.densedihybriddhadditiveprogenygeniccovariancematrix class method)": [[812, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.concat_taxa"]], "concat_trait() (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeniccovariancematrix.densedihybriddhadditiveprogenygeniccovariancematrix class method)": [[812, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.concat_trait"]], "copy() (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeniccovariancematrix.densedihybriddhadditiveprogenygeniccovariancematrix method)": [[812, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.copy"]], "deepcopy() (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeniccovariancematrix.densedihybriddhadditiveprogenygeniccovariancematrix method)": [[812, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.deepcopy"]], "delete() (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeniccovariancematrix.densedihybriddhadditiveprogenygeniccovariancematrix method)": [[812, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.delete"]], "delete_taxa() (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeniccovariancematrix.densedihybriddhadditiveprogenygeniccovariancematrix method)": [[812, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.delete_taxa"]], "delete_trait() (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeniccovariancematrix.densedihybriddhadditiveprogenygeniccovariancematrix method)": [[812, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.delete_trait"]], "epgc (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeniccovariancematrix.densedihybriddhadditiveprogenygeniccovariancematrix property)": [[812, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.epgc"]], "female_axis (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeniccovariancematrix.densedihybriddhadditiveprogenygeniccovariancematrix property)": [[812, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.female_axis"]], "from_algmod() (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeniccovariancematrix.densedihybriddhadditiveprogenygeniccovariancematrix class method)": [[812, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.from_algmod"]], "from_csv() (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeniccovariancematrix.densedihybriddhadditiveprogenygeniccovariancematrix class method)": [[812, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.from_csv"]], "from_gmod() (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeniccovariancematrix.densedihybriddhadditiveprogenygeniccovariancematrix class method)": [[812, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.from_gmod"]], "from_hdf5() (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeniccovariancematrix.densedihybriddhadditiveprogenygeniccovariancematrix class method)": [[812, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.from_hdf5"]], "from_pandas() (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeniccovariancematrix.densedihybriddhadditiveprogenygeniccovariancematrix class method)": [[812, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.from_pandas"]], "group() (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeniccovariancematrix.densedihybriddhadditiveprogenygeniccovariancematrix method)": [[812, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.group"]], "group_taxa() (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeniccovariancematrix.densedihybriddhadditiveprogenygeniccovariancematrix method)": [[812, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.group_taxa"]], "incorp() (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeniccovariancematrix.densedihybriddhadditiveprogenygeniccovariancematrix method)": [[812, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.incorp"]], "incorp_taxa() (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeniccovariancematrix.densedihybriddhadditiveprogenygeniccovariancematrix method)": [[812, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.incorp_taxa"]], "incorp_trait() (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeniccovariancematrix.densedihybriddhadditiveprogenygeniccovariancematrix method)": [[812, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.incorp_trait"]], "insert() (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeniccovariancematrix.densedihybriddhadditiveprogenygeniccovariancematrix method)": [[812, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.insert"]], "insert_taxa() (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeniccovariancematrix.densedihybriddhadditiveprogenygeniccovariancematrix method)": [[812, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.insert_taxa"]], "insert_trait() (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeniccovariancematrix.densedihybriddhadditiveprogenygeniccovariancematrix method)": [[812, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.insert_trait"]], "is_grouped() (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeniccovariancematrix.densedihybriddhadditiveprogenygeniccovariancematrix method)": [[812, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.is_grouped"]], "is_grouped_taxa() (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeniccovariancematrix.densedihybriddhadditiveprogenygeniccovariancematrix method)": [[812, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.is_grouped_taxa"]], "is_square() (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeniccovariancematrix.densedihybriddhadditiveprogenygeniccovariancematrix method)": [[812, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.is_square"]], "is_square_taxa() (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeniccovariancematrix.densedihybriddhadditiveprogenygeniccovariancematrix method)": [[812, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.is_square_taxa"]], "is_square_trait() (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeniccovariancematrix.densedihybriddhadditiveprogenygeniccovariancematrix method)": [[812, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.is_square_trait"]], "lexsort() (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeniccovariancematrix.densedihybriddhadditiveprogenygeniccovariancematrix method)": [[812, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.lexsort"]], "lexsort_taxa() (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeniccovariancematrix.densedihybriddhadditiveprogenygeniccovariancematrix method)": [[812, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.lexsort_taxa"]], "lexsort_trait() (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeniccovariancematrix.densedihybriddhadditiveprogenygeniccovariancematrix method)": [[812, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.lexsort_trait"]], "male_axis (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeniccovariancematrix.densedihybriddhadditiveprogenygeniccovariancematrix property)": [[812, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.male_axis"]], "mat (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeniccovariancematrix.densedihybriddhadditiveprogenygeniccovariancematrix property)": [[812, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.mat"]], "mat_ndim (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeniccovariancematrix.densedihybriddhadditiveprogenygeniccovariancematrix property)": [[812, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.mat_ndim"]], "mat_shape (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeniccovariancematrix.densedihybriddhadditiveprogenygeniccovariancematrix property)": [[812, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.mat_shape"]], "nfemale (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeniccovariancematrix.densedihybriddhadditiveprogenygeniccovariancematrix property)": [[812, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.nfemale"]], "nmale (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeniccovariancematrix.densedihybriddhadditiveprogenygeniccovariancematrix property)": [[812, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.nmale"]], "nsquare (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeniccovariancematrix.densedihybriddhadditiveprogenygeniccovariancematrix property)": [[812, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.nsquare"]], "nsquare_taxa (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeniccovariancematrix.densedihybriddhadditiveprogenygeniccovariancematrix property)": [[812, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.nsquare_taxa"]], "nsquare_trait (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeniccovariancematrix.densedihybriddhadditiveprogenygeniccovariancematrix property)": [[812, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.nsquare_trait"]], "ntaxa (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeniccovariancematrix.densedihybriddhadditiveprogenygeniccovariancematrix property)": [[812, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.ntaxa"]], "ntrait (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeniccovariancematrix.densedihybriddhadditiveprogenygeniccovariancematrix property)": [[812, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.ntrait"]], "remove() (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeniccovariancematrix.densedihybriddhadditiveprogenygeniccovariancematrix method)": [[812, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.remove"]], "remove_taxa() (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeniccovariancematrix.densedihybriddhadditiveprogenygeniccovariancematrix method)": [[812, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.remove_taxa"]], "remove_trait() (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeniccovariancematrix.densedihybriddhadditiveprogenygeniccovariancematrix method)": [[812, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.remove_trait"]], "reorder() (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeniccovariancematrix.densedihybriddhadditiveprogenygeniccovariancematrix method)": [[812, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.reorder"]], "reorder_taxa() (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeniccovariancematrix.densedihybriddhadditiveprogenygeniccovariancematrix method)": [[812, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.reorder_taxa"]], "reorder_trait() (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeniccovariancematrix.densedihybriddhadditiveprogenygeniccovariancematrix method)": [[812, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.reorder_trait"]], "select() (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeniccovariancematrix.densedihybriddhadditiveprogenygeniccovariancematrix method)": [[812, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.select"]], "select_taxa() (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeniccovariancematrix.densedihybriddhadditiveprogenygeniccovariancematrix method)": [[812, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.select_taxa"]], "select_trait() (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeniccovariancematrix.densedihybriddhadditiveprogenygeniccovariancematrix method)": [[812, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.select_trait"]], "sort() (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeniccovariancematrix.densedihybriddhadditiveprogenygeniccovariancematrix method)": [[812, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.sort"]], "sort_taxa() (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeniccovariancematrix.densedihybriddhadditiveprogenygeniccovariancematrix method)": [[812, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.sort_taxa"]], "sort_trait() (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeniccovariancematrix.densedihybriddhadditiveprogenygeniccovariancematrix method)": [[812, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.sort_trait"]], "square_axes (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeniccovariancematrix.densedihybriddhadditiveprogenygeniccovariancematrix property)": [[812, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.square_axes"]], "square_axes_len (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeniccovariancematrix.densedihybriddhadditiveprogenygeniccovariancematrix property)": [[812, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.square_axes_len"]], "square_taxa_axes (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeniccovariancematrix.densedihybriddhadditiveprogenygeniccovariancematrix property)": [[812, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.square_taxa_axes"]], "square_taxa_axes_len (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeniccovariancematrix.densedihybriddhadditiveprogenygeniccovariancematrix property)": [[812, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.square_taxa_axes_len"]], "square_trait_axes (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeniccovariancematrix.densedihybriddhadditiveprogenygeniccovariancematrix property)": [[812, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.square_trait_axes"]], "square_trait_axes_len (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeniccovariancematrix.densedihybriddhadditiveprogenygeniccovariancematrix property)": [[812, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.square_trait_axes_len"]], "taxa (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeniccovariancematrix.densedihybriddhadditiveprogenygeniccovariancematrix property)": [[812, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.taxa"]], "taxa_axis (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeniccovariancematrix.densedihybriddhadditiveprogenygeniccovariancematrix property)": [[812, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.taxa_axis"]], "taxa_grp (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeniccovariancematrix.densedihybriddhadditiveprogenygeniccovariancematrix property)": [[812, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.taxa_grp"]], "taxa_grp_len (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeniccovariancematrix.densedihybriddhadditiveprogenygeniccovariancematrix property)": [[812, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.taxa_grp_len"]], "taxa_grp_name (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeniccovariancematrix.densedihybriddhadditiveprogenygeniccovariancematrix property)": [[812, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.taxa_grp_name"]], "taxa_grp_spix (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeniccovariancematrix.densedihybriddhadditiveprogenygeniccovariancematrix property)": [[812, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.taxa_grp_spix"]], "taxa_grp_stix (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeniccovariancematrix.densedihybriddhadditiveprogenygeniccovariancematrix property)": [[812, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.taxa_grp_stix"]], "to_csv() (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeniccovariancematrix.densedihybriddhadditiveprogenygeniccovariancematrix method)": [[812, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.to_csv"]], "to_hdf5() (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeniccovariancematrix.densedihybriddhadditiveprogenygeniccovariancematrix method)": [[812, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.to_hdf5"]], "to_pandas() (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeniccovariancematrix.densedihybriddhadditiveprogenygeniccovariancematrix method)": [[812, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.to_pandas"]], "trait (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeniccovariancematrix.densedihybriddhadditiveprogenygeniccovariancematrix property)": [[812, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.trait"]], "trait_axis (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeniccovariancematrix.densedihybriddhadditiveprogenygeniccovariancematrix property)": [[812, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.trait_axis"]], "ungroup() (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeniccovariancematrix.densedihybriddhadditiveprogenygeniccovariancematrix method)": [[812, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.ungroup"]], "ungroup_taxa() (pybrops.model.pcvmat.densedihybriddhadditiveprogenygeniccovariancematrix.densedihybriddhadditiveprogenygeniccovariancematrix method)": [[812, "pybrops.model.pcvmat.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.DenseDihybridDHAdditiveProgenyGenicCovarianceMatrix.ungroup_taxa"]], "pybrops.model.pcvmat.densefourwaydhadditiveprogenygeneticcovariancematrix": [[813, "module-pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix"]], "densefourwaydhadditiveprogenygeneticcovariancematrix (class in pybrops.model.pcvmat.densefourwaydhadditiveprogenygeneticcovariancematrix)": [[814, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix"]], "__add__() (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeneticcovariancematrix.densefourwaydhadditiveprogenygeneticcovariancematrix method)": [[814, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.__add__"]], "__mul__() (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeneticcovariancematrix.densefourwaydhadditiveprogenygeneticcovariancematrix method)": [[814, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.__mul__"]], "adjoin() (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeneticcovariancematrix.densefourwaydhadditiveprogenygeneticcovariancematrix method)": [[814, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.adjoin"]], "adjoin_taxa() (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeneticcovariancematrix.densefourwaydhadditiveprogenygeneticcovariancematrix method)": [[814, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.adjoin_taxa"]], "adjoin_trait() (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeneticcovariancematrix.densefourwaydhadditiveprogenygeneticcovariancematrix method)": [[814, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.adjoin_trait"]], "append() (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeneticcovariancematrix.densefourwaydhadditiveprogenygeneticcovariancematrix method)": [[814, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.append"]], "append_taxa() (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeneticcovariancematrix.densefourwaydhadditiveprogenygeneticcovariancematrix method)": [[814, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.append_taxa"]], "append_trait() (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeneticcovariancematrix.densefourwaydhadditiveprogenygeneticcovariancematrix method)": [[814, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.append_trait"]], "concat() (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeneticcovariancematrix.densefourwaydhadditiveprogenygeneticcovariancematrix class method)": [[814, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.concat"]], "concat_taxa() (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeneticcovariancematrix.densefourwaydhadditiveprogenygeneticcovariancematrix class method)": [[814, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.concat_taxa"]], "concat_trait() (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeneticcovariancematrix.densefourwaydhadditiveprogenygeneticcovariancematrix class method)": [[814, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.concat_trait"]], "copy() (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeneticcovariancematrix.densefourwaydhadditiveprogenygeneticcovariancematrix method)": [[814, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.copy"]], "deepcopy() (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeneticcovariancematrix.densefourwaydhadditiveprogenygeneticcovariancematrix method)": [[814, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.deepcopy"]], "delete() (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeneticcovariancematrix.densefourwaydhadditiveprogenygeneticcovariancematrix method)": [[814, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.delete"]], "delete_taxa() (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeneticcovariancematrix.densefourwaydhadditiveprogenygeneticcovariancematrix method)": [[814, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.delete_taxa"]], "delete_trait() (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeneticcovariancematrix.densefourwaydhadditiveprogenygeneticcovariancematrix method)": [[814, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.delete_trait"]], "epgc (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeneticcovariancematrix.densefourwaydhadditiveprogenygeneticcovariancematrix property)": [[814, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.epgc"]], "female1_axis (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeneticcovariancematrix.densefourwaydhadditiveprogenygeneticcovariancematrix property)": [[814, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.female1_axis"]], "female2_axis (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeneticcovariancematrix.densefourwaydhadditiveprogenygeneticcovariancematrix property)": [[814, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.female2_axis"]], "from_algmod() (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeneticcovariancematrix.densefourwaydhadditiveprogenygeneticcovariancematrix class method)": [[814, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.from_algmod"]], "from_csv() (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeneticcovariancematrix.densefourwaydhadditiveprogenygeneticcovariancematrix class method)": [[814, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.from_csv"]], "from_gmod() (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeneticcovariancematrix.densefourwaydhadditiveprogenygeneticcovariancematrix class method)": [[814, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.from_gmod"]], "from_hdf5() (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeneticcovariancematrix.densefourwaydhadditiveprogenygeneticcovariancematrix class method)": [[814, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.from_hdf5"]], "from_pandas() (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeneticcovariancematrix.densefourwaydhadditiveprogenygeneticcovariancematrix class method)": [[814, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.from_pandas"]], "group() (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeneticcovariancematrix.densefourwaydhadditiveprogenygeneticcovariancematrix method)": [[814, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.group"]], "group_taxa() (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeneticcovariancematrix.densefourwaydhadditiveprogenygeneticcovariancematrix method)": [[814, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.group_taxa"]], "incorp() (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeneticcovariancematrix.densefourwaydhadditiveprogenygeneticcovariancematrix method)": [[814, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.incorp"]], "incorp_taxa() (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeneticcovariancematrix.densefourwaydhadditiveprogenygeneticcovariancematrix method)": [[814, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.incorp_taxa"]], "incorp_trait() (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeneticcovariancematrix.densefourwaydhadditiveprogenygeneticcovariancematrix method)": [[814, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.incorp_trait"]], "insert() (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeneticcovariancematrix.densefourwaydhadditiveprogenygeneticcovariancematrix method)": [[814, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.insert"]], "insert_taxa() (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeneticcovariancematrix.densefourwaydhadditiveprogenygeneticcovariancematrix method)": [[814, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.insert_taxa"]], "insert_trait() (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeneticcovariancematrix.densefourwaydhadditiveprogenygeneticcovariancematrix method)": [[814, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.insert_trait"]], "is_grouped() (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeneticcovariancematrix.densefourwaydhadditiveprogenygeneticcovariancematrix method)": [[814, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.is_grouped"]], "is_grouped_taxa() (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeneticcovariancematrix.densefourwaydhadditiveprogenygeneticcovariancematrix method)": [[814, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.is_grouped_taxa"]], "is_square() (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeneticcovariancematrix.densefourwaydhadditiveprogenygeneticcovariancematrix method)": [[814, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.is_square"]], "is_square_taxa() (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeneticcovariancematrix.densefourwaydhadditiveprogenygeneticcovariancematrix method)": [[814, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.is_square_taxa"]], "is_square_trait() (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeneticcovariancematrix.densefourwaydhadditiveprogenygeneticcovariancematrix method)": [[814, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.is_square_trait"]], "lexsort() (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeneticcovariancematrix.densefourwaydhadditiveprogenygeneticcovariancematrix method)": [[814, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.lexsort"]], "lexsort_taxa() (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeneticcovariancematrix.densefourwaydhadditiveprogenygeneticcovariancematrix method)": [[814, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.lexsort_taxa"]], "lexsort_trait() (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeneticcovariancematrix.densefourwaydhadditiveprogenygeneticcovariancematrix method)": [[814, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.lexsort_trait"]], "male1_axis (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeneticcovariancematrix.densefourwaydhadditiveprogenygeneticcovariancematrix property)": [[814, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.male1_axis"]], "male2_axis (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeneticcovariancematrix.densefourwaydhadditiveprogenygeneticcovariancematrix property)": [[814, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.male2_axis"]], "mat (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeneticcovariancematrix.densefourwaydhadditiveprogenygeneticcovariancematrix property)": [[814, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.mat"]], "mat_ndim (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeneticcovariancematrix.densefourwaydhadditiveprogenygeneticcovariancematrix property)": [[814, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.mat_ndim"]], "mat_shape (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeneticcovariancematrix.densefourwaydhadditiveprogenygeneticcovariancematrix property)": [[814, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.mat_shape"]], "nfemale1 (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeneticcovariancematrix.densefourwaydhadditiveprogenygeneticcovariancematrix property)": [[814, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.nfemale1"]], "nfemale2 (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeneticcovariancematrix.densefourwaydhadditiveprogenygeneticcovariancematrix property)": [[814, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.nfemale2"]], "nmale1 (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeneticcovariancematrix.densefourwaydhadditiveprogenygeneticcovariancematrix property)": [[814, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.nmale1"]], "nmale2 (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeneticcovariancematrix.densefourwaydhadditiveprogenygeneticcovariancematrix property)": [[814, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.nmale2"]], "nsquare (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeneticcovariancematrix.densefourwaydhadditiveprogenygeneticcovariancematrix property)": [[814, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.nsquare"]], "nsquare_taxa (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeneticcovariancematrix.densefourwaydhadditiveprogenygeneticcovariancematrix property)": [[814, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.nsquare_taxa"]], "nsquare_trait (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeneticcovariancematrix.densefourwaydhadditiveprogenygeneticcovariancematrix property)": [[814, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.nsquare_trait"]], "ntaxa (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeneticcovariancematrix.densefourwaydhadditiveprogenygeneticcovariancematrix property)": [[814, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.ntaxa"]], "ntrait (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeneticcovariancematrix.densefourwaydhadditiveprogenygeneticcovariancematrix property)": [[814, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.ntrait"]], "remove() (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeneticcovariancematrix.densefourwaydhadditiveprogenygeneticcovariancematrix method)": [[814, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.remove"]], "remove_taxa() (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeneticcovariancematrix.densefourwaydhadditiveprogenygeneticcovariancematrix method)": [[814, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.remove_taxa"]], "remove_trait() (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeneticcovariancematrix.densefourwaydhadditiveprogenygeneticcovariancematrix method)": [[814, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.remove_trait"]], "reorder() (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeneticcovariancematrix.densefourwaydhadditiveprogenygeneticcovariancematrix method)": [[814, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.reorder"]], "reorder_taxa() (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeneticcovariancematrix.densefourwaydhadditiveprogenygeneticcovariancematrix method)": [[814, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.reorder_taxa"]], "reorder_trait() (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeneticcovariancematrix.densefourwaydhadditiveprogenygeneticcovariancematrix method)": [[814, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.reorder_trait"]], "select() (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeneticcovariancematrix.densefourwaydhadditiveprogenygeneticcovariancematrix method)": [[814, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.select"]], "select_taxa() (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeneticcovariancematrix.densefourwaydhadditiveprogenygeneticcovariancematrix method)": [[814, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.select_taxa"]], "select_trait() (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeneticcovariancematrix.densefourwaydhadditiveprogenygeneticcovariancematrix method)": [[814, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.select_trait"]], "sort() (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeneticcovariancematrix.densefourwaydhadditiveprogenygeneticcovariancematrix method)": [[814, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.sort"]], "sort_taxa() (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeneticcovariancematrix.densefourwaydhadditiveprogenygeneticcovariancematrix method)": [[814, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.sort_taxa"]], "sort_trait() (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeneticcovariancematrix.densefourwaydhadditiveprogenygeneticcovariancematrix method)": [[814, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.sort_trait"]], "square_axes (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeneticcovariancematrix.densefourwaydhadditiveprogenygeneticcovariancematrix property)": [[814, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.square_axes"]], "square_axes_len (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeneticcovariancematrix.densefourwaydhadditiveprogenygeneticcovariancematrix property)": [[814, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.square_axes_len"]], "square_taxa_axes (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeneticcovariancematrix.densefourwaydhadditiveprogenygeneticcovariancematrix property)": [[814, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.square_taxa_axes"]], "square_taxa_axes_len (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeneticcovariancematrix.densefourwaydhadditiveprogenygeneticcovariancematrix property)": [[814, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.square_taxa_axes_len"]], "square_trait_axes (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeneticcovariancematrix.densefourwaydhadditiveprogenygeneticcovariancematrix property)": [[814, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.square_trait_axes"]], "square_trait_axes_len (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeneticcovariancematrix.densefourwaydhadditiveprogenygeneticcovariancematrix property)": [[814, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.square_trait_axes_len"]], "taxa (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeneticcovariancematrix.densefourwaydhadditiveprogenygeneticcovariancematrix property)": [[814, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.taxa"]], "taxa_axis (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeneticcovariancematrix.densefourwaydhadditiveprogenygeneticcovariancematrix property)": [[814, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.taxa_axis"]], "taxa_grp (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeneticcovariancematrix.densefourwaydhadditiveprogenygeneticcovariancematrix property)": [[814, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.taxa_grp"]], "taxa_grp_len (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeneticcovariancematrix.densefourwaydhadditiveprogenygeneticcovariancematrix property)": [[814, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.taxa_grp_len"]], "taxa_grp_name (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeneticcovariancematrix.densefourwaydhadditiveprogenygeneticcovariancematrix property)": [[814, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.taxa_grp_name"]], "taxa_grp_spix (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeneticcovariancematrix.densefourwaydhadditiveprogenygeneticcovariancematrix property)": [[814, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.taxa_grp_spix"]], "taxa_grp_stix (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeneticcovariancematrix.densefourwaydhadditiveprogenygeneticcovariancematrix property)": [[814, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.taxa_grp_stix"]], "to_csv() (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeneticcovariancematrix.densefourwaydhadditiveprogenygeneticcovariancematrix method)": [[814, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.to_csv"]], "to_hdf5() (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeneticcovariancematrix.densefourwaydhadditiveprogenygeneticcovariancematrix method)": [[814, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.to_hdf5"]], "to_pandas() (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeneticcovariancematrix.densefourwaydhadditiveprogenygeneticcovariancematrix method)": [[814, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.to_pandas"]], "trait (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeneticcovariancematrix.densefourwaydhadditiveprogenygeneticcovariancematrix property)": [[814, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.trait"]], "trait_axis (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeneticcovariancematrix.densefourwaydhadditiveprogenygeneticcovariancematrix property)": [[814, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.trait_axis"]], "ungroup() (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeneticcovariancematrix.densefourwaydhadditiveprogenygeneticcovariancematrix method)": [[814, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.ungroup"]], "ungroup_taxa() (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeneticcovariancematrix.densefourwaydhadditiveprogenygeneticcovariancematrix method)": [[814, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.ungroup_taxa"]], "check_is_densefourwaydhadditiveprogenygeneticcovariancematrix() (in module pybrops.model.pcvmat.densefourwaydhadditiveprogenygeneticcovariancematrix)": [[815, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix.check_is_DenseFourWayDHAdditiveProgenyGeneticCovarianceMatrix"]], "pybrops.model.pcvmat.densefourwaydhadditiveprogenygeniccovariancematrix": [[816, "module-pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix"]], "densefourwaydhadditiveprogenygeniccovariancematrix (class in pybrops.model.pcvmat.densefourwaydhadditiveprogenygeniccovariancematrix)": [[817, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix"]], "__add__() (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeniccovariancematrix.densefourwaydhadditiveprogenygeniccovariancematrix method)": [[817, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.__add__"]], "__mul__() (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeniccovariancematrix.densefourwaydhadditiveprogenygeniccovariancematrix method)": [[817, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.__mul__"]], "adjoin() (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeniccovariancematrix.densefourwaydhadditiveprogenygeniccovariancematrix method)": [[817, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.adjoin"]], "adjoin_taxa() (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeniccovariancematrix.densefourwaydhadditiveprogenygeniccovariancematrix method)": [[817, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.adjoin_taxa"]], "adjoin_trait() (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeniccovariancematrix.densefourwaydhadditiveprogenygeniccovariancematrix method)": [[817, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.adjoin_trait"]], "append() (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeniccovariancematrix.densefourwaydhadditiveprogenygeniccovariancematrix method)": [[817, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.append"]], "append_taxa() (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeniccovariancematrix.densefourwaydhadditiveprogenygeniccovariancematrix method)": [[817, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.append_taxa"]], "append_trait() (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeniccovariancematrix.densefourwaydhadditiveprogenygeniccovariancematrix method)": [[817, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.append_trait"]], "concat() (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeniccovariancematrix.densefourwaydhadditiveprogenygeniccovariancematrix class method)": [[817, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.concat"]], "concat_taxa() (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeniccovariancematrix.densefourwaydhadditiveprogenygeniccovariancematrix class method)": [[817, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.concat_taxa"]], "concat_trait() (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeniccovariancematrix.densefourwaydhadditiveprogenygeniccovariancematrix class method)": [[817, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.concat_trait"]], "copy() (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeniccovariancematrix.densefourwaydhadditiveprogenygeniccovariancematrix method)": [[817, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.copy"]], "deepcopy() (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeniccovariancematrix.densefourwaydhadditiveprogenygeniccovariancematrix method)": [[817, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.deepcopy"]], "delete() (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeniccovariancematrix.densefourwaydhadditiveprogenygeniccovariancematrix method)": [[817, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.delete"]], "delete_taxa() (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeniccovariancematrix.densefourwaydhadditiveprogenygeniccovariancematrix method)": [[817, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.delete_taxa"]], "delete_trait() (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeniccovariancematrix.densefourwaydhadditiveprogenygeniccovariancematrix method)": [[817, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.delete_trait"]], "epgc (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeniccovariancematrix.densefourwaydhadditiveprogenygeniccovariancematrix property)": [[817, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.epgc"]], "female1_axis (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeniccovariancematrix.densefourwaydhadditiveprogenygeniccovariancematrix property)": [[817, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.female1_axis"]], "female2_axis (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeniccovariancematrix.densefourwaydhadditiveprogenygeniccovariancematrix property)": [[817, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.female2_axis"]], "from_algmod() (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeniccovariancematrix.densefourwaydhadditiveprogenygeniccovariancematrix class method)": [[817, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.from_algmod"]], "from_csv() (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeniccovariancematrix.densefourwaydhadditiveprogenygeniccovariancematrix class method)": [[817, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.from_csv"]], "from_gmod() (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeniccovariancematrix.densefourwaydhadditiveprogenygeniccovariancematrix class method)": [[817, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.from_gmod"]], "from_hdf5() (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeniccovariancematrix.densefourwaydhadditiveprogenygeniccovariancematrix class method)": [[817, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.from_hdf5"]], "from_pandas() (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeniccovariancematrix.densefourwaydhadditiveprogenygeniccovariancematrix class method)": [[817, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.from_pandas"]], "group() (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeniccovariancematrix.densefourwaydhadditiveprogenygeniccovariancematrix method)": [[817, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.group"]], "group_taxa() (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeniccovariancematrix.densefourwaydhadditiveprogenygeniccovariancematrix method)": [[817, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.group_taxa"]], "incorp() (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeniccovariancematrix.densefourwaydhadditiveprogenygeniccovariancematrix method)": [[817, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.incorp"]], "incorp_taxa() (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeniccovariancematrix.densefourwaydhadditiveprogenygeniccovariancematrix method)": [[817, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.incorp_taxa"]], "incorp_trait() (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeniccovariancematrix.densefourwaydhadditiveprogenygeniccovariancematrix method)": [[817, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.incorp_trait"]], "insert() (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeniccovariancematrix.densefourwaydhadditiveprogenygeniccovariancematrix method)": [[817, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.insert"]], "insert_taxa() (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeniccovariancematrix.densefourwaydhadditiveprogenygeniccovariancematrix method)": [[817, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.insert_taxa"]], "insert_trait() (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeniccovariancematrix.densefourwaydhadditiveprogenygeniccovariancematrix method)": [[817, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.insert_trait"]], "is_grouped() (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeniccovariancematrix.densefourwaydhadditiveprogenygeniccovariancematrix method)": [[817, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.is_grouped"]], "is_grouped_taxa() (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeniccovariancematrix.densefourwaydhadditiveprogenygeniccovariancematrix method)": [[817, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.is_grouped_taxa"]], "is_square() (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeniccovariancematrix.densefourwaydhadditiveprogenygeniccovariancematrix method)": [[817, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.is_square"]], "is_square_taxa() (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeniccovariancematrix.densefourwaydhadditiveprogenygeniccovariancematrix method)": [[817, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.is_square_taxa"]], "is_square_trait() (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeniccovariancematrix.densefourwaydhadditiveprogenygeniccovariancematrix method)": [[817, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.is_square_trait"]], "lexsort() (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeniccovariancematrix.densefourwaydhadditiveprogenygeniccovariancematrix method)": [[817, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.lexsort"]], "lexsort_taxa() (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeniccovariancematrix.densefourwaydhadditiveprogenygeniccovariancematrix method)": [[817, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.lexsort_taxa"]], "lexsort_trait() (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeniccovariancematrix.densefourwaydhadditiveprogenygeniccovariancematrix method)": [[817, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.lexsort_trait"]], "male1_axis (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeniccovariancematrix.densefourwaydhadditiveprogenygeniccovariancematrix property)": [[817, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.male1_axis"]], "male2_axis (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeniccovariancematrix.densefourwaydhadditiveprogenygeniccovariancematrix property)": [[817, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.male2_axis"]], "mat (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeniccovariancematrix.densefourwaydhadditiveprogenygeniccovariancematrix property)": [[817, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.mat"]], "mat_ndim (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeniccovariancematrix.densefourwaydhadditiveprogenygeniccovariancematrix property)": [[817, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.mat_ndim"]], "mat_shape (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeniccovariancematrix.densefourwaydhadditiveprogenygeniccovariancematrix property)": [[817, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.mat_shape"]], "nfemale1 (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeniccovariancematrix.densefourwaydhadditiveprogenygeniccovariancematrix property)": [[817, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.nfemale1"]], "nfemale2 (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeniccovariancematrix.densefourwaydhadditiveprogenygeniccovariancematrix property)": [[817, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.nfemale2"]], "nmale1 (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeniccovariancematrix.densefourwaydhadditiveprogenygeniccovariancematrix property)": [[817, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.nmale1"]], "nmale2 (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeniccovariancematrix.densefourwaydhadditiveprogenygeniccovariancematrix property)": [[817, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.nmale2"]], "nsquare (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeniccovariancematrix.densefourwaydhadditiveprogenygeniccovariancematrix property)": [[817, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.nsquare"]], "nsquare_taxa (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeniccovariancematrix.densefourwaydhadditiveprogenygeniccovariancematrix property)": [[817, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.nsquare_taxa"]], "nsquare_trait (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeniccovariancematrix.densefourwaydhadditiveprogenygeniccovariancematrix property)": [[817, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.nsquare_trait"]], "ntaxa (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeniccovariancematrix.densefourwaydhadditiveprogenygeniccovariancematrix property)": [[817, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.ntaxa"]], "ntrait (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeniccovariancematrix.densefourwaydhadditiveprogenygeniccovariancematrix property)": [[817, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.ntrait"]], "remove() (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeniccovariancematrix.densefourwaydhadditiveprogenygeniccovariancematrix method)": [[817, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.remove"]], "remove_taxa() (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeniccovariancematrix.densefourwaydhadditiveprogenygeniccovariancematrix method)": [[817, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.remove_taxa"]], "remove_trait() (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeniccovariancematrix.densefourwaydhadditiveprogenygeniccovariancematrix method)": [[817, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.remove_trait"]], "reorder() (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeniccovariancematrix.densefourwaydhadditiveprogenygeniccovariancematrix method)": [[817, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.reorder"]], "reorder_taxa() (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeniccovariancematrix.densefourwaydhadditiveprogenygeniccovariancematrix method)": [[817, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.reorder_taxa"]], "reorder_trait() (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeniccovariancematrix.densefourwaydhadditiveprogenygeniccovariancematrix method)": [[817, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.reorder_trait"]], "select() (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeniccovariancematrix.densefourwaydhadditiveprogenygeniccovariancematrix method)": [[817, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.select"]], "select_taxa() (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeniccovariancematrix.densefourwaydhadditiveprogenygeniccovariancematrix method)": [[817, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.select_taxa"]], "select_trait() (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeniccovariancematrix.densefourwaydhadditiveprogenygeniccovariancematrix method)": [[817, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.select_trait"]], "sort() (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeniccovariancematrix.densefourwaydhadditiveprogenygeniccovariancematrix method)": [[817, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.sort"]], "sort_taxa() (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeniccovariancematrix.densefourwaydhadditiveprogenygeniccovariancematrix method)": [[817, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.sort_taxa"]], "sort_trait() (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeniccovariancematrix.densefourwaydhadditiveprogenygeniccovariancematrix method)": [[817, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.sort_trait"]], "square_axes (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeniccovariancematrix.densefourwaydhadditiveprogenygeniccovariancematrix property)": [[817, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.square_axes"]], "square_axes_len (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeniccovariancematrix.densefourwaydhadditiveprogenygeniccovariancematrix property)": [[817, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.square_axes_len"]], "square_taxa_axes (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeniccovariancematrix.densefourwaydhadditiveprogenygeniccovariancematrix property)": [[817, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.square_taxa_axes"]], "square_taxa_axes_len (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeniccovariancematrix.densefourwaydhadditiveprogenygeniccovariancematrix property)": [[817, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.square_taxa_axes_len"]], "square_trait_axes (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeniccovariancematrix.densefourwaydhadditiveprogenygeniccovariancematrix property)": [[817, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.square_trait_axes"]], "square_trait_axes_len (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeniccovariancematrix.densefourwaydhadditiveprogenygeniccovariancematrix property)": [[817, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.square_trait_axes_len"]], "taxa (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeniccovariancematrix.densefourwaydhadditiveprogenygeniccovariancematrix property)": [[817, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.taxa"]], "taxa_axis (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeniccovariancematrix.densefourwaydhadditiveprogenygeniccovariancematrix property)": [[817, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.taxa_axis"]], "taxa_grp (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeniccovariancematrix.densefourwaydhadditiveprogenygeniccovariancematrix property)": [[817, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.taxa_grp"]], "taxa_grp_len (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeniccovariancematrix.densefourwaydhadditiveprogenygeniccovariancematrix property)": [[817, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.taxa_grp_len"]], "taxa_grp_name (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeniccovariancematrix.densefourwaydhadditiveprogenygeniccovariancematrix property)": [[817, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.taxa_grp_name"]], "taxa_grp_spix (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeniccovariancematrix.densefourwaydhadditiveprogenygeniccovariancematrix property)": [[817, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.taxa_grp_spix"]], "taxa_grp_stix (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeniccovariancematrix.densefourwaydhadditiveprogenygeniccovariancematrix property)": [[817, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.taxa_grp_stix"]], "to_csv() (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeniccovariancematrix.densefourwaydhadditiveprogenygeniccovariancematrix method)": [[817, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.to_csv"]], "to_hdf5() (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeniccovariancematrix.densefourwaydhadditiveprogenygeniccovariancematrix method)": [[817, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.to_hdf5"]], "to_pandas() (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeniccovariancematrix.densefourwaydhadditiveprogenygeniccovariancematrix method)": [[817, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.to_pandas"]], "trait (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeniccovariancematrix.densefourwaydhadditiveprogenygeniccovariancematrix property)": [[817, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.trait"]], "trait_axis (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeniccovariancematrix.densefourwaydhadditiveprogenygeniccovariancematrix property)": [[817, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.trait_axis"]], "ungroup() (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeniccovariancematrix.densefourwaydhadditiveprogenygeniccovariancematrix method)": [[817, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.ungroup"]], "ungroup_taxa() (pybrops.model.pcvmat.densefourwaydhadditiveprogenygeniccovariancematrix.densefourwaydhadditiveprogenygeniccovariancematrix method)": [[817, "pybrops.model.pcvmat.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.DenseFourWayDHAdditiveProgenyGenicCovarianceMatrix.ungroup_taxa"]], "pybrops.model.pcvmat.denseprogenygeneticcovariancematrix": [[818, "module-pybrops.model.pcvmat.DenseProgenyGeneticCovarianceMatrix"]], "denseprogenygeneticcovariancematrix (class in pybrops.model.pcvmat.denseprogenygeneticcovariancematrix)": [[819, "pybrops.model.pcvmat.DenseProgenyGeneticCovarianceMatrix.DenseProgenyGeneticCovarianceMatrix"]], "__add__() (pybrops.model.pcvmat.denseprogenygeneticcovariancematrix.denseprogenygeneticcovariancematrix method)": [[819, "pybrops.model.pcvmat.DenseProgenyGeneticCovarianceMatrix.DenseProgenyGeneticCovarianceMatrix.__add__"]], "__mul__() (pybrops.model.pcvmat.denseprogenygeneticcovariancematrix.denseprogenygeneticcovariancematrix method)": [[819, "pybrops.model.pcvmat.DenseProgenyGeneticCovarianceMatrix.DenseProgenyGeneticCovarianceMatrix.__mul__"]], "adjoin() (pybrops.model.pcvmat.denseprogenygeneticcovariancematrix.denseprogenygeneticcovariancematrix method)": [[819, "pybrops.model.pcvmat.DenseProgenyGeneticCovarianceMatrix.DenseProgenyGeneticCovarianceMatrix.adjoin"]], "adjoin_taxa() (pybrops.model.pcvmat.denseprogenygeneticcovariancematrix.denseprogenygeneticcovariancematrix method)": [[819, "pybrops.model.pcvmat.DenseProgenyGeneticCovarianceMatrix.DenseProgenyGeneticCovarianceMatrix.adjoin_taxa"]], "adjoin_trait() (pybrops.model.pcvmat.denseprogenygeneticcovariancematrix.denseprogenygeneticcovariancematrix method)": [[819, "pybrops.model.pcvmat.DenseProgenyGeneticCovarianceMatrix.DenseProgenyGeneticCovarianceMatrix.adjoin_trait"]], "append() (pybrops.model.pcvmat.denseprogenygeneticcovariancematrix.denseprogenygeneticcovariancematrix method)": [[819, "pybrops.model.pcvmat.DenseProgenyGeneticCovarianceMatrix.DenseProgenyGeneticCovarianceMatrix.append"]], "append_taxa() (pybrops.model.pcvmat.denseprogenygeneticcovariancematrix.denseprogenygeneticcovariancematrix method)": [[819, "pybrops.model.pcvmat.DenseProgenyGeneticCovarianceMatrix.DenseProgenyGeneticCovarianceMatrix.append_taxa"]], "append_trait() (pybrops.model.pcvmat.denseprogenygeneticcovariancematrix.denseprogenygeneticcovariancematrix method)": [[819, "pybrops.model.pcvmat.DenseProgenyGeneticCovarianceMatrix.DenseProgenyGeneticCovarianceMatrix.append_trait"]], "concat() (pybrops.model.pcvmat.denseprogenygeneticcovariancematrix.denseprogenygeneticcovariancematrix class method)": [[819, "pybrops.model.pcvmat.DenseProgenyGeneticCovarianceMatrix.DenseProgenyGeneticCovarianceMatrix.concat"]], "concat_taxa() (pybrops.model.pcvmat.denseprogenygeneticcovariancematrix.denseprogenygeneticcovariancematrix class method)": [[819, "pybrops.model.pcvmat.DenseProgenyGeneticCovarianceMatrix.DenseProgenyGeneticCovarianceMatrix.concat_taxa"]], "concat_trait() (pybrops.model.pcvmat.denseprogenygeneticcovariancematrix.denseprogenygeneticcovariancematrix class method)": [[819, "pybrops.model.pcvmat.DenseProgenyGeneticCovarianceMatrix.DenseProgenyGeneticCovarianceMatrix.concat_trait"]], "copy() (pybrops.model.pcvmat.denseprogenygeneticcovariancematrix.denseprogenygeneticcovariancematrix method)": [[819, "pybrops.model.pcvmat.DenseProgenyGeneticCovarianceMatrix.DenseProgenyGeneticCovarianceMatrix.copy"]], "deepcopy() (pybrops.model.pcvmat.denseprogenygeneticcovariancematrix.denseprogenygeneticcovariancematrix method)": [[819, "pybrops.model.pcvmat.DenseProgenyGeneticCovarianceMatrix.DenseProgenyGeneticCovarianceMatrix.deepcopy"]], "delete() (pybrops.model.pcvmat.denseprogenygeneticcovariancematrix.denseprogenygeneticcovariancematrix method)": [[819, "pybrops.model.pcvmat.DenseProgenyGeneticCovarianceMatrix.DenseProgenyGeneticCovarianceMatrix.delete"]], "delete_taxa() (pybrops.model.pcvmat.denseprogenygeneticcovariancematrix.denseprogenygeneticcovariancematrix method)": [[819, "pybrops.model.pcvmat.DenseProgenyGeneticCovarianceMatrix.DenseProgenyGeneticCovarianceMatrix.delete_taxa"]], "delete_trait() (pybrops.model.pcvmat.denseprogenygeneticcovariancematrix.denseprogenygeneticcovariancematrix method)": [[819, "pybrops.model.pcvmat.DenseProgenyGeneticCovarianceMatrix.DenseProgenyGeneticCovarianceMatrix.delete_trait"]], "epgc (pybrops.model.pcvmat.denseprogenygeneticcovariancematrix.denseprogenygeneticcovariancematrix property)": [[819, "pybrops.model.pcvmat.DenseProgenyGeneticCovarianceMatrix.DenseProgenyGeneticCovarianceMatrix.epgc"]], "from_csv() (pybrops.model.pcvmat.denseprogenygeneticcovariancematrix.denseprogenygeneticcovariancematrix class method)": [[819, "pybrops.model.pcvmat.DenseProgenyGeneticCovarianceMatrix.DenseProgenyGeneticCovarianceMatrix.from_csv"]], "from_gmod() (pybrops.model.pcvmat.denseprogenygeneticcovariancematrix.denseprogenygeneticcovariancematrix class method)": [[819, "pybrops.model.pcvmat.DenseProgenyGeneticCovarianceMatrix.DenseProgenyGeneticCovarianceMatrix.from_gmod"]], "from_hdf5() (pybrops.model.pcvmat.denseprogenygeneticcovariancematrix.denseprogenygeneticcovariancematrix class method)": [[819, "pybrops.model.pcvmat.DenseProgenyGeneticCovarianceMatrix.DenseProgenyGeneticCovarianceMatrix.from_hdf5"]], "from_pandas() (pybrops.model.pcvmat.denseprogenygeneticcovariancematrix.denseprogenygeneticcovariancematrix class method)": [[819, "pybrops.model.pcvmat.DenseProgenyGeneticCovarianceMatrix.DenseProgenyGeneticCovarianceMatrix.from_pandas"]], "group() (pybrops.model.pcvmat.denseprogenygeneticcovariancematrix.denseprogenygeneticcovariancematrix method)": [[819, "pybrops.model.pcvmat.DenseProgenyGeneticCovarianceMatrix.DenseProgenyGeneticCovarianceMatrix.group"]], "group_taxa() (pybrops.model.pcvmat.denseprogenygeneticcovariancematrix.denseprogenygeneticcovariancematrix method)": [[819, "pybrops.model.pcvmat.DenseProgenyGeneticCovarianceMatrix.DenseProgenyGeneticCovarianceMatrix.group_taxa"]], "incorp() (pybrops.model.pcvmat.denseprogenygeneticcovariancematrix.denseprogenygeneticcovariancematrix method)": [[819, "pybrops.model.pcvmat.DenseProgenyGeneticCovarianceMatrix.DenseProgenyGeneticCovarianceMatrix.incorp"]], "incorp_taxa() (pybrops.model.pcvmat.denseprogenygeneticcovariancematrix.denseprogenygeneticcovariancematrix method)": [[819, "pybrops.model.pcvmat.DenseProgenyGeneticCovarianceMatrix.DenseProgenyGeneticCovarianceMatrix.incorp_taxa"]], "incorp_trait() (pybrops.model.pcvmat.denseprogenygeneticcovariancematrix.denseprogenygeneticcovariancematrix method)": [[819, "pybrops.model.pcvmat.DenseProgenyGeneticCovarianceMatrix.DenseProgenyGeneticCovarianceMatrix.incorp_trait"]], "insert() (pybrops.model.pcvmat.denseprogenygeneticcovariancematrix.denseprogenygeneticcovariancematrix method)": [[819, "pybrops.model.pcvmat.DenseProgenyGeneticCovarianceMatrix.DenseProgenyGeneticCovarianceMatrix.insert"]], "insert_taxa() (pybrops.model.pcvmat.denseprogenygeneticcovariancematrix.denseprogenygeneticcovariancematrix method)": [[819, "pybrops.model.pcvmat.DenseProgenyGeneticCovarianceMatrix.DenseProgenyGeneticCovarianceMatrix.insert_taxa"]], "insert_trait() (pybrops.model.pcvmat.denseprogenygeneticcovariancematrix.denseprogenygeneticcovariancematrix method)": [[819, "pybrops.model.pcvmat.DenseProgenyGeneticCovarianceMatrix.DenseProgenyGeneticCovarianceMatrix.insert_trait"]], "is_grouped() (pybrops.model.pcvmat.denseprogenygeneticcovariancematrix.denseprogenygeneticcovariancematrix method)": [[819, "pybrops.model.pcvmat.DenseProgenyGeneticCovarianceMatrix.DenseProgenyGeneticCovarianceMatrix.is_grouped"]], "is_grouped_taxa() (pybrops.model.pcvmat.denseprogenygeneticcovariancematrix.denseprogenygeneticcovariancematrix method)": [[819, "pybrops.model.pcvmat.DenseProgenyGeneticCovarianceMatrix.DenseProgenyGeneticCovarianceMatrix.is_grouped_taxa"]], "is_square() (pybrops.model.pcvmat.denseprogenygeneticcovariancematrix.denseprogenygeneticcovariancematrix method)": [[819, "pybrops.model.pcvmat.DenseProgenyGeneticCovarianceMatrix.DenseProgenyGeneticCovarianceMatrix.is_square"]], "is_square_taxa() (pybrops.model.pcvmat.denseprogenygeneticcovariancematrix.denseprogenygeneticcovariancematrix method)": [[819, "pybrops.model.pcvmat.DenseProgenyGeneticCovarianceMatrix.DenseProgenyGeneticCovarianceMatrix.is_square_taxa"]], "is_square_trait() (pybrops.model.pcvmat.denseprogenygeneticcovariancematrix.denseprogenygeneticcovariancematrix method)": [[819, "pybrops.model.pcvmat.DenseProgenyGeneticCovarianceMatrix.DenseProgenyGeneticCovarianceMatrix.is_square_trait"]], "lexsort() (pybrops.model.pcvmat.denseprogenygeneticcovariancematrix.denseprogenygeneticcovariancematrix method)": [[819, "pybrops.model.pcvmat.DenseProgenyGeneticCovarianceMatrix.DenseProgenyGeneticCovarianceMatrix.lexsort"]], "lexsort_taxa() (pybrops.model.pcvmat.denseprogenygeneticcovariancematrix.denseprogenygeneticcovariancematrix method)": [[819, "pybrops.model.pcvmat.DenseProgenyGeneticCovarianceMatrix.DenseProgenyGeneticCovarianceMatrix.lexsort_taxa"]], "lexsort_trait() (pybrops.model.pcvmat.denseprogenygeneticcovariancematrix.denseprogenygeneticcovariancematrix method)": [[819, "pybrops.model.pcvmat.DenseProgenyGeneticCovarianceMatrix.DenseProgenyGeneticCovarianceMatrix.lexsort_trait"]], "mat (pybrops.model.pcvmat.denseprogenygeneticcovariancematrix.denseprogenygeneticcovariancematrix property)": [[819, "pybrops.model.pcvmat.DenseProgenyGeneticCovarianceMatrix.DenseProgenyGeneticCovarianceMatrix.mat"]], "mat_ndim (pybrops.model.pcvmat.denseprogenygeneticcovariancematrix.denseprogenygeneticcovariancematrix property)": [[819, "pybrops.model.pcvmat.DenseProgenyGeneticCovarianceMatrix.DenseProgenyGeneticCovarianceMatrix.mat_ndim"]], "mat_shape (pybrops.model.pcvmat.denseprogenygeneticcovariancematrix.denseprogenygeneticcovariancematrix property)": [[819, "pybrops.model.pcvmat.DenseProgenyGeneticCovarianceMatrix.DenseProgenyGeneticCovarianceMatrix.mat_shape"]], "nsquare (pybrops.model.pcvmat.denseprogenygeneticcovariancematrix.denseprogenygeneticcovariancematrix property)": [[819, "pybrops.model.pcvmat.DenseProgenyGeneticCovarianceMatrix.DenseProgenyGeneticCovarianceMatrix.nsquare"]], "nsquare_taxa (pybrops.model.pcvmat.denseprogenygeneticcovariancematrix.denseprogenygeneticcovariancematrix property)": [[819, "pybrops.model.pcvmat.DenseProgenyGeneticCovarianceMatrix.DenseProgenyGeneticCovarianceMatrix.nsquare_taxa"]], "nsquare_trait (pybrops.model.pcvmat.denseprogenygeneticcovariancematrix.denseprogenygeneticcovariancematrix property)": [[819, "pybrops.model.pcvmat.DenseProgenyGeneticCovarianceMatrix.DenseProgenyGeneticCovarianceMatrix.nsquare_trait"]], "ntaxa (pybrops.model.pcvmat.denseprogenygeneticcovariancematrix.denseprogenygeneticcovariancematrix property)": [[819, "pybrops.model.pcvmat.DenseProgenyGeneticCovarianceMatrix.DenseProgenyGeneticCovarianceMatrix.ntaxa"]], "ntrait (pybrops.model.pcvmat.denseprogenygeneticcovariancematrix.denseprogenygeneticcovariancematrix property)": [[819, "pybrops.model.pcvmat.DenseProgenyGeneticCovarianceMatrix.DenseProgenyGeneticCovarianceMatrix.ntrait"]], "remove() (pybrops.model.pcvmat.denseprogenygeneticcovariancematrix.denseprogenygeneticcovariancematrix method)": [[819, "pybrops.model.pcvmat.DenseProgenyGeneticCovarianceMatrix.DenseProgenyGeneticCovarianceMatrix.remove"]], "remove_taxa() (pybrops.model.pcvmat.denseprogenygeneticcovariancematrix.denseprogenygeneticcovariancematrix method)": [[819, "pybrops.model.pcvmat.DenseProgenyGeneticCovarianceMatrix.DenseProgenyGeneticCovarianceMatrix.remove_taxa"]], "remove_trait() (pybrops.model.pcvmat.denseprogenygeneticcovariancematrix.denseprogenygeneticcovariancematrix method)": [[819, "pybrops.model.pcvmat.DenseProgenyGeneticCovarianceMatrix.DenseProgenyGeneticCovarianceMatrix.remove_trait"]], "reorder() (pybrops.model.pcvmat.denseprogenygeneticcovariancematrix.denseprogenygeneticcovariancematrix method)": [[819, "pybrops.model.pcvmat.DenseProgenyGeneticCovarianceMatrix.DenseProgenyGeneticCovarianceMatrix.reorder"]], "reorder_taxa() (pybrops.model.pcvmat.denseprogenygeneticcovariancematrix.denseprogenygeneticcovariancematrix method)": [[819, "pybrops.model.pcvmat.DenseProgenyGeneticCovarianceMatrix.DenseProgenyGeneticCovarianceMatrix.reorder_taxa"]], "reorder_trait() (pybrops.model.pcvmat.denseprogenygeneticcovariancematrix.denseprogenygeneticcovariancematrix method)": [[819, "pybrops.model.pcvmat.DenseProgenyGeneticCovarianceMatrix.DenseProgenyGeneticCovarianceMatrix.reorder_trait"]], "select() (pybrops.model.pcvmat.denseprogenygeneticcovariancematrix.denseprogenygeneticcovariancematrix method)": [[819, "pybrops.model.pcvmat.DenseProgenyGeneticCovarianceMatrix.DenseProgenyGeneticCovarianceMatrix.select"]], "select_taxa() (pybrops.model.pcvmat.denseprogenygeneticcovariancematrix.denseprogenygeneticcovariancematrix method)": [[819, "pybrops.model.pcvmat.DenseProgenyGeneticCovarianceMatrix.DenseProgenyGeneticCovarianceMatrix.select_taxa"]], "select_trait() (pybrops.model.pcvmat.denseprogenygeneticcovariancematrix.denseprogenygeneticcovariancematrix method)": [[819, "pybrops.model.pcvmat.DenseProgenyGeneticCovarianceMatrix.DenseProgenyGeneticCovarianceMatrix.select_trait"]], "sort() (pybrops.model.pcvmat.denseprogenygeneticcovariancematrix.denseprogenygeneticcovariancematrix method)": [[819, "pybrops.model.pcvmat.DenseProgenyGeneticCovarianceMatrix.DenseProgenyGeneticCovarianceMatrix.sort"]], "sort_taxa() (pybrops.model.pcvmat.denseprogenygeneticcovariancematrix.denseprogenygeneticcovariancematrix method)": [[819, "pybrops.model.pcvmat.DenseProgenyGeneticCovarianceMatrix.DenseProgenyGeneticCovarianceMatrix.sort_taxa"]], "sort_trait() (pybrops.model.pcvmat.denseprogenygeneticcovariancematrix.denseprogenygeneticcovariancematrix method)": [[819, "pybrops.model.pcvmat.DenseProgenyGeneticCovarianceMatrix.DenseProgenyGeneticCovarianceMatrix.sort_trait"]], "square_axes (pybrops.model.pcvmat.denseprogenygeneticcovariancematrix.denseprogenygeneticcovariancematrix property)": [[819, "pybrops.model.pcvmat.DenseProgenyGeneticCovarianceMatrix.DenseProgenyGeneticCovarianceMatrix.square_axes"]], "square_axes_len (pybrops.model.pcvmat.denseprogenygeneticcovariancematrix.denseprogenygeneticcovariancematrix property)": [[819, "pybrops.model.pcvmat.DenseProgenyGeneticCovarianceMatrix.DenseProgenyGeneticCovarianceMatrix.square_axes_len"]], "square_taxa_axes (pybrops.model.pcvmat.denseprogenygeneticcovariancematrix.denseprogenygeneticcovariancematrix property)": [[819, "pybrops.model.pcvmat.DenseProgenyGeneticCovarianceMatrix.DenseProgenyGeneticCovarianceMatrix.square_taxa_axes"]], "square_taxa_axes_len (pybrops.model.pcvmat.denseprogenygeneticcovariancematrix.denseprogenygeneticcovariancematrix property)": [[819, "pybrops.model.pcvmat.DenseProgenyGeneticCovarianceMatrix.DenseProgenyGeneticCovarianceMatrix.square_taxa_axes_len"]], "square_trait_axes (pybrops.model.pcvmat.denseprogenygeneticcovariancematrix.denseprogenygeneticcovariancematrix property)": [[819, "pybrops.model.pcvmat.DenseProgenyGeneticCovarianceMatrix.DenseProgenyGeneticCovarianceMatrix.square_trait_axes"]], "square_trait_axes_len (pybrops.model.pcvmat.denseprogenygeneticcovariancematrix.denseprogenygeneticcovariancematrix property)": [[819, "pybrops.model.pcvmat.DenseProgenyGeneticCovarianceMatrix.DenseProgenyGeneticCovarianceMatrix.square_trait_axes_len"]], "taxa (pybrops.model.pcvmat.denseprogenygeneticcovariancematrix.denseprogenygeneticcovariancematrix property)": [[819, "pybrops.model.pcvmat.DenseProgenyGeneticCovarianceMatrix.DenseProgenyGeneticCovarianceMatrix.taxa"]], "taxa_axis (pybrops.model.pcvmat.denseprogenygeneticcovariancematrix.denseprogenygeneticcovariancematrix property)": [[819, "pybrops.model.pcvmat.DenseProgenyGeneticCovarianceMatrix.DenseProgenyGeneticCovarianceMatrix.taxa_axis"]], "taxa_grp (pybrops.model.pcvmat.denseprogenygeneticcovariancematrix.denseprogenygeneticcovariancematrix property)": [[819, "pybrops.model.pcvmat.DenseProgenyGeneticCovarianceMatrix.DenseProgenyGeneticCovarianceMatrix.taxa_grp"]], "taxa_grp_len (pybrops.model.pcvmat.denseprogenygeneticcovariancematrix.denseprogenygeneticcovariancematrix property)": [[819, "pybrops.model.pcvmat.DenseProgenyGeneticCovarianceMatrix.DenseProgenyGeneticCovarianceMatrix.taxa_grp_len"]], "taxa_grp_name (pybrops.model.pcvmat.denseprogenygeneticcovariancematrix.denseprogenygeneticcovariancematrix property)": [[819, "pybrops.model.pcvmat.DenseProgenyGeneticCovarianceMatrix.DenseProgenyGeneticCovarianceMatrix.taxa_grp_name"]], "taxa_grp_spix (pybrops.model.pcvmat.denseprogenygeneticcovariancematrix.denseprogenygeneticcovariancematrix property)": [[819, "pybrops.model.pcvmat.DenseProgenyGeneticCovarianceMatrix.DenseProgenyGeneticCovarianceMatrix.taxa_grp_spix"]], "taxa_grp_stix (pybrops.model.pcvmat.denseprogenygeneticcovariancematrix.denseprogenygeneticcovariancematrix property)": [[819, "pybrops.model.pcvmat.DenseProgenyGeneticCovarianceMatrix.DenseProgenyGeneticCovarianceMatrix.taxa_grp_stix"]], "to_csv() (pybrops.model.pcvmat.denseprogenygeneticcovariancematrix.denseprogenygeneticcovariancematrix method)": [[819, "pybrops.model.pcvmat.DenseProgenyGeneticCovarianceMatrix.DenseProgenyGeneticCovarianceMatrix.to_csv"]], "to_hdf5() (pybrops.model.pcvmat.denseprogenygeneticcovariancematrix.denseprogenygeneticcovariancematrix method)": [[819, "pybrops.model.pcvmat.DenseProgenyGeneticCovarianceMatrix.DenseProgenyGeneticCovarianceMatrix.to_hdf5"]], "to_pandas() (pybrops.model.pcvmat.denseprogenygeneticcovariancematrix.denseprogenygeneticcovariancematrix method)": [[819, "pybrops.model.pcvmat.DenseProgenyGeneticCovarianceMatrix.DenseProgenyGeneticCovarianceMatrix.to_pandas"]], "trait (pybrops.model.pcvmat.denseprogenygeneticcovariancematrix.denseprogenygeneticcovariancematrix property)": [[819, "pybrops.model.pcvmat.DenseProgenyGeneticCovarianceMatrix.DenseProgenyGeneticCovarianceMatrix.trait"]], "trait_axis (pybrops.model.pcvmat.denseprogenygeneticcovariancematrix.denseprogenygeneticcovariancematrix property)": [[819, "pybrops.model.pcvmat.DenseProgenyGeneticCovarianceMatrix.DenseProgenyGeneticCovarianceMatrix.trait_axis"]], "ungroup() (pybrops.model.pcvmat.denseprogenygeneticcovariancematrix.denseprogenygeneticcovariancematrix method)": [[819, "pybrops.model.pcvmat.DenseProgenyGeneticCovarianceMatrix.DenseProgenyGeneticCovarianceMatrix.ungroup"]], "ungroup_taxa() (pybrops.model.pcvmat.denseprogenygeneticcovariancematrix.denseprogenygeneticcovariancematrix method)": [[819, "pybrops.model.pcvmat.DenseProgenyGeneticCovarianceMatrix.DenseProgenyGeneticCovarianceMatrix.ungroup_taxa"]], "check_is_denseprogenygeneticcovariancematrix() (in module pybrops.model.pcvmat.denseprogenygeneticcovariancematrix)": [[820, "pybrops.model.pcvmat.DenseProgenyGeneticCovarianceMatrix.check_is_DenseProgenyGeneticCovarianceMatrix"]], "pybrops.model.pcvmat.denseprogenygeniccovariancematrix": [[821, "module-pybrops.model.pcvmat.DenseProgenyGenicCovarianceMatrix"]], "denseprogenygeniccovariancematrix (class in pybrops.model.pcvmat.denseprogenygeniccovariancematrix)": [[822, "pybrops.model.pcvmat.DenseProgenyGenicCovarianceMatrix.DenseProgenyGenicCovarianceMatrix"]], "__add__() (pybrops.model.pcvmat.denseprogenygeniccovariancematrix.denseprogenygeniccovariancematrix method)": [[822, "pybrops.model.pcvmat.DenseProgenyGenicCovarianceMatrix.DenseProgenyGenicCovarianceMatrix.__add__"]], "__mul__() (pybrops.model.pcvmat.denseprogenygeniccovariancematrix.denseprogenygeniccovariancematrix method)": [[822, "pybrops.model.pcvmat.DenseProgenyGenicCovarianceMatrix.DenseProgenyGenicCovarianceMatrix.__mul__"]], "adjoin() (pybrops.model.pcvmat.denseprogenygeniccovariancematrix.denseprogenygeniccovariancematrix method)": [[822, "pybrops.model.pcvmat.DenseProgenyGenicCovarianceMatrix.DenseProgenyGenicCovarianceMatrix.adjoin"]], "adjoin_taxa() (pybrops.model.pcvmat.denseprogenygeniccovariancematrix.denseprogenygeniccovariancematrix method)": [[822, "pybrops.model.pcvmat.DenseProgenyGenicCovarianceMatrix.DenseProgenyGenicCovarianceMatrix.adjoin_taxa"]], "adjoin_trait() (pybrops.model.pcvmat.denseprogenygeniccovariancematrix.denseprogenygeniccovariancematrix method)": [[822, "pybrops.model.pcvmat.DenseProgenyGenicCovarianceMatrix.DenseProgenyGenicCovarianceMatrix.adjoin_trait"]], "append() (pybrops.model.pcvmat.denseprogenygeniccovariancematrix.denseprogenygeniccovariancematrix method)": [[822, "pybrops.model.pcvmat.DenseProgenyGenicCovarianceMatrix.DenseProgenyGenicCovarianceMatrix.append"]], "append_taxa() (pybrops.model.pcvmat.denseprogenygeniccovariancematrix.denseprogenygeniccovariancematrix method)": [[822, "pybrops.model.pcvmat.DenseProgenyGenicCovarianceMatrix.DenseProgenyGenicCovarianceMatrix.append_taxa"]], "append_trait() (pybrops.model.pcvmat.denseprogenygeniccovariancematrix.denseprogenygeniccovariancematrix method)": [[822, "pybrops.model.pcvmat.DenseProgenyGenicCovarianceMatrix.DenseProgenyGenicCovarianceMatrix.append_trait"]], "concat() (pybrops.model.pcvmat.denseprogenygeniccovariancematrix.denseprogenygeniccovariancematrix class method)": [[822, "pybrops.model.pcvmat.DenseProgenyGenicCovarianceMatrix.DenseProgenyGenicCovarianceMatrix.concat"]], "concat_taxa() (pybrops.model.pcvmat.denseprogenygeniccovariancematrix.denseprogenygeniccovariancematrix class method)": [[822, "pybrops.model.pcvmat.DenseProgenyGenicCovarianceMatrix.DenseProgenyGenicCovarianceMatrix.concat_taxa"]], "concat_trait() (pybrops.model.pcvmat.denseprogenygeniccovariancematrix.denseprogenygeniccovariancematrix class method)": [[822, "pybrops.model.pcvmat.DenseProgenyGenicCovarianceMatrix.DenseProgenyGenicCovarianceMatrix.concat_trait"]], "copy() (pybrops.model.pcvmat.denseprogenygeniccovariancematrix.denseprogenygeniccovariancematrix method)": [[822, "pybrops.model.pcvmat.DenseProgenyGenicCovarianceMatrix.DenseProgenyGenicCovarianceMatrix.copy"]], "deepcopy() (pybrops.model.pcvmat.denseprogenygeniccovariancematrix.denseprogenygeniccovariancematrix method)": [[822, "pybrops.model.pcvmat.DenseProgenyGenicCovarianceMatrix.DenseProgenyGenicCovarianceMatrix.deepcopy"]], "delete() (pybrops.model.pcvmat.denseprogenygeniccovariancematrix.denseprogenygeniccovariancematrix method)": [[822, "pybrops.model.pcvmat.DenseProgenyGenicCovarianceMatrix.DenseProgenyGenicCovarianceMatrix.delete"]], "delete_taxa() (pybrops.model.pcvmat.denseprogenygeniccovariancematrix.denseprogenygeniccovariancematrix method)": [[822, "pybrops.model.pcvmat.DenseProgenyGenicCovarianceMatrix.DenseProgenyGenicCovarianceMatrix.delete_taxa"]], "delete_trait() (pybrops.model.pcvmat.denseprogenygeniccovariancematrix.denseprogenygeniccovariancematrix method)": [[822, "pybrops.model.pcvmat.DenseProgenyGenicCovarianceMatrix.DenseProgenyGenicCovarianceMatrix.delete_trait"]], "epgc (pybrops.model.pcvmat.denseprogenygeniccovariancematrix.denseprogenygeniccovariancematrix property)": [[822, "pybrops.model.pcvmat.DenseProgenyGenicCovarianceMatrix.DenseProgenyGenicCovarianceMatrix.epgc"]], "from_csv() (pybrops.model.pcvmat.denseprogenygeniccovariancematrix.denseprogenygeniccovariancematrix class method)": [[822, "pybrops.model.pcvmat.DenseProgenyGenicCovarianceMatrix.DenseProgenyGenicCovarianceMatrix.from_csv"]], "from_gmod() (pybrops.model.pcvmat.denseprogenygeniccovariancematrix.denseprogenygeniccovariancematrix class method)": [[822, "pybrops.model.pcvmat.DenseProgenyGenicCovarianceMatrix.DenseProgenyGenicCovarianceMatrix.from_gmod"]], "from_hdf5() (pybrops.model.pcvmat.denseprogenygeniccovariancematrix.denseprogenygeniccovariancematrix class method)": [[822, "pybrops.model.pcvmat.DenseProgenyGenicCovarianceMatrix.DenseProgenyGenicCovarianceMatrix.from_hdf5"]], "from_pandas() (pybrops.model.pcvmat.denseprogenygeniccovariancematrix.denseprogenygeniccovariancematrix class method)": [[822, "pybrops.model.pcvmat.DenseProgenyGenicCovarianceMatrix.DenseProgenyGenicCovarianceMatrix.from_pandas"]], "group() (pybrops.model.pcvmat.denseprogenygeniccovariancematrix.denseprogenygeniccovariancematrix method)": [[822, "pybrops.model.pcvmat.DenseProgenyGenicCovarianceMatrix.DenseProgenyGenicCovarianceMatrix.group"]], "group_taxa() (pybrops.model.pcvmat.denseprogenygeniccovariancematrix.denseprogenygeniccovariancematrix method)": [[822, "pybrops.model.pcvmat.DenseProgenyGenicCovarianceMatrix.DenseProgenyGenicCovarianceMatrix.group_taxa"]], "incorp() (pybrops.model.pcvmat.denseprogenygeniccovariancematrix.denseprogenygeniccovariancematrix method)": [[822, "pybrops.model.pcvmat.DenseProgenyGenicCovarianceMatrix.DenseProgenyGenicCovarianceMatrix.incorp"]], "incorp_taxa() (pybrops.model.pcvmat.denseprogenygeniccovariancematrix.denseprogenygeniccovariancematrix method)": [[822, "pybrops.model.pcvmat.DenseProgenyGenicCovarianceMatrix.DenseProgenyGenicCovarianceMatrix.incorp_taxa"]], "incorp_trait() (pybrops.model.pcvmat.denseprogenygeniccovariancematrix.denseprogenygeniccovariancematrix method)": [[822, "pybrops.model.pcvmat.DenseProgenyGenicCovarianceMatrix.DenseProgenyGenicCovarianceMatrix.incorp_trait"]], "insert() (pybrops.model.pcvmat.denseprogenygeniccovariancematrix.denseprogenygeniccovariancematrix method)": [[822, "pybrops.model.pcvmat.DenseProgenyGenicCovarianceMatrix.DenseProgenyGenicCovarianceMatrix.insert"]], "insert_taxa() (pybrops.model.pcvmat.denseprogenygeniccovariancematrix.denseprogenygeniccovariancematrix method)": [[822, "pybrops.model.pcvmat.DenseProgenyGenicCovarianceMatrix.DenseProgenyGenicCovarianceMatrix.insert_taxa"]], "insert_trait() (pybrops.model.pcvmat.denseprogenygeniccovariancematrix.denseprogenygeniccovariancematrix method)": [[822, "pybrops.model.pcvmat.DenseProgenyGenicCovarianceMatrix.DenseProgenyGenicCovarianceMatrix.insert_trait"]], "is_grouped() (pybrops.model.pcvmat.denseprogenygeniccovariancematrix.denseprogenygeniccovariancematrix method)": [[822, "pybrops.model.pcvmat.DenseProgenyGenicCovarianceMatrix.DenseProgenyGenicCovarianceMatrix.is_grouped"]], "is_grouped_taxa() (pybrops.model.pcvmat.denseprogenygeniccovariancematrix.denseprogenygeniccovariancematrix method)": [[822, "pybrops.model.pcvmat.DenseProgenyGenicCovarianceMatrix.DenseProgenyGenicCovarianceMatrix.is_grouped_taxa"]], "is_square() (pybrops.model.pcvmat.denseprogenygeniccovariancematrix.denseprogenygeniccovariancematrix method)": [[822, "pybrops.model.pcvmat.DenseProgenyGenicCovarianceMatrix.DenseProgenyGenicCovarianceMatrix.is_square"]], "is_square_taxa() (pybrops.model.pcvmat.denseprogenygeniccovariancematrix.denseprogenygeniccovariancematrix method)": [[822, "pybrops.model.pcvmat.DenseProgenyGenicCovarianceMatrix.DenseProgenyGenicCovarianceMatrix.is_square_taxa"]], "is_square_trait() (pybrops.model.pcvmat.denseprogenygeniccovariancematrix.denseprogenygeniccovariancematrix method)": [[822, "pybrops.model.pcvmat.DenseProgenyGenicCovarianceMatrix.DenseProgenyGenicCovarianceMatrix.is_square_trait"]], "lexsort() (pybrops.model.pcvmat.denseprogenygeniccovariancematrix.denseprogenygeniccovariancematrix method)": [[822, "pybrops.model.pcvmat.DenseProgenyGenicCovarianceMatrix.DenseProgenyGenicCovarianceMatrix.lexsort"]], "lexsort_taxa() (pybrops.model.pcvmat.denseprogenygeniccovariancematrix.denseprogenygeniccovariancematrix method)": [[822, "pybrops.model.pcvmat.DenseProgenyGenicCovarianceMatrix.DenseProgenyGenicCovarianceMatrix.lexsort_taxa"]], "lexsort_trait() (pybrops.model.pcvmat.denseprogenygeniccovariancematrix.denseprogenygeniccovariancematrix method)": [[822, "pybrops.model.pcvmat.DenseProgenyGenicCovarianceMatrix.DenseProgenyGenicCovarianceMatrix.lexsort_trait"]], "mat (pybrops.model.pcvmat.denseprogenygeniccovariancematrix.denseprogenygeniccovariancematrix property)": [[822, "pybrops.model.pcvmat.DenseProgenyGenicCovarianceMatrix.DenseProgenyGenicCovarianceMatrix.mat"]], "mat_ndim (pybrops.model.pcvmat.denseprogenygeniccovariancematrix.denseprogenygeniccovariancematrix property)": [[822, "pybrops.model.pcvmat.DenseProgenyGenicCovarianceMatrix.DenseProgenyGenicCovarianceMatrix.mat_ndim"]], "mat_shape (pybrops.model.pcvmat.denseprogenygeniccovariancematrix.denseprogenygeniccovariancematrix property)": [[822, "pybrops.model.pcvmat.DenseProgenyGenicCovarianceMatrix.DenseProgenyGenicCovarianceMatrix.mat_shape"]], "nsquare (pybrops.model.pcvmat.denseprogenygeniccovariancematrix.denseprogenygeniccovariancematrix property)": [[822, "pybrops.model.pcvmat.DenseProgenyGenicCovarianceMatrix.DenseProgenyGenicCovarianceMatrix.nsquare"]], "nsquare_taxa (pybrops.model.pcvmat.denseprogenygeniccovariancematrix.denseprogenygeniccovariancematrix property)": [[822, "pybrops.model.pcvmat.DenseProgenyGenicCovarianceMatrix.DenseProgenyGenicCovarianceMatrix.nsquare_taxa"]], "nsquare_trait (pybrops.model.pcvmat.denseprogenygeniccovariancematrix.denseprogenygeniccovariancematrix property)": [[822, "pybrops.model.pcvmat.DenseProgenyGenicCovarianceMatrix.DenseProgenyGenicCovarianceMatrix.nsquare_trait"]], "ntaxa (pybrops.model.pcvmat.denseprogenygeniccovariancematrix.denseprogenygeniccovariancematrix property)": [[822, "pybrops.model.pcvmat.DenseProgenyGenicCovarianceMatrix.DenseProgenyGenicCovarianceMatrix.ntaxa"]], "ntrait (pybrops.model.pcvmat.denseprogenygeniccovariancematrix.denseprogenygeniccovariancematrix property)": [[822, "pybrops.model.pcvmat.DenseProgenyGenicCovarianceMatrix.DenseProgenyGenicCovarianceMatrix.ntrait"]], "remove() (pybrops.model.pcvmat.denseprogenygeniccovariancematrix.denseprogenygeniccovariancematrix method)": [[822, "pybrops.model.pcvmat.DenseProgenyGenicCovarianceMatrix.DenseProgenyGenicCovarianceMatrix.remove"]], "remove_taxa() (pybrops.model.pcvmat.denseprogenygeniccovariancematrix.denseprogenygeniccovariancematrix method)": [[822, "pybrops.model.pcvmat.DenseProgenyGenicCovarianceMatrix.DenseProgenyGenicCovarianceMatrix.remove_taxa"]], "remove_trait() (pybrops.model.pcvmat.denseprogenygeniccovariancematrix.denseprogenygeniccovariancematrix method)": [[822, "pybrops.model.pcvmat.DenseProgenyGenicCovarianceMatrix.DenseProgenyGenicCovarianceMatrix.remove_trait"]], "reorder() (pybrops.model.pcvmat.denseprogenygeniccovariancematrix.denseprogenygeniccovariancematrix method)": [[822, "pybrops.model.pcvmat.DenseProgenyGenicCovarianceMatrix.DenseProgenyGenicCovarianceMatrix.reorder"]], "reorder_taxa() (pybrops.model.pcvmat.denseprogenygeniccovariancematrix.denseprogenygeniccovariancematrix method)": [[822, "pybrops.model.pcvmat.DenseProgenyGenicCovarianceMatrix.DenseProgenyGenicCovarianceMatrix.reorder_taxa"]], "reorder_trait() (pybrops.model.pcvmat.denseprogenygeniccovariancematrix.denseprogenygeniccovariancematrix method)": [[822, "pybrops.model.pcvmat.DenseProgenyGenicCovarianceMatrix.DenseProgenyGenicCovarianceMatrix.reorder_trait"]], "select() (pybrops.model.pcvmat.denseprogenygeniccovariancematrix.denseprogenygeniccovariancematrix method)": [[822, "pybrops.model.pcvmat.DenseProgenyGenicCovarianceMatrix.DenseProgenyGenicCovarianceMatrix.select"]], "select_taxa() (pybrops.model.pcvmat.denseprogenygeniccovariancematrix.denseprogenygeniccovariancematrix method)": [[822, "pybrops.model.pcvmat.DenseProgenyGenicCovarianceMatrix.DenseProgenyGenicCovarianceMatrix.select_taxa"]], "select_trait() (pybrops.model.pcvmat.denseprogenygeniccovariancematrix.denseprogenygeniccovariancematrix method)": [[822, "pybrops.model.pcvmat.DenseProgenyGenicCovarianceMatrix.DenseProgenyGenicCovarianceMatrix.select_trait"]], "sort() (pybrops.model.pcvmat.denseprogenygeniccovariancematrix.denseprogenygeniccovariancematrix method)": [[822, "pybrops.model.pcvmat.DenseProgenyGenicCovarianceMatrix.DenseProgenyGenicCovarianceMatrix.sort"]], "sort_taxa() (pybrops.model.pcvmat.denseprogenygeniccovariancematrix.denseprogenygeniccovariancematrix method)": [[822, "pybrops.model.pcvmat.DenseProgenyGenicCovarianceMatrix.DenseProgenyGenicCovarianceMatrix.sort_taxa"]], "sort_trait() (pybrops.model.pcvmat.denseprogenygeniccovariancematrix.denseprogenygeniccovariancematrix method)": [[822, "pybrops.model.pcvmat.DenseProgenyGenicCovarianceMatrix.DenseProgenyGenicCovarianceMatrix.sort_trait"]], "square_axes (pybrops.model.pcvmat.denseprogenygeniccovariancematrix.denseprogenygeniccovariancematrix property)": [[822, "pybrops.model.pcvmat.DenseProgenyGenicCovarianceMatrix.DenseProgenyGenicCovarianceMatrix.square_axes"]], "square_axes_len (pybrops.model.pcvmat.denseprogenygeniccovariancematrix.denseprogenygeniccovariancematrix property)": [[822, "pybrops.model.pcvmat.DenseProgenyGenicCovarianceMatrix.DenseProgenyGenicCovarianceMatrix.square_axes_len"]], "square_taxa_axes (pybrops.model.pcvmat.denseprogenygeniccovariancematrix.denseprogenygeniccovariancematrix property)": [[822, "pybrops.model.pcvmat.DenseProgenyGenicCovarianceMatrix.DenseProgenyGenicCovarianceMatrix.square_taxa_axes"]], "square_taxa_axes_len (pybrops.model.pcvmat.denseprogenygeniccovariancematrix.denseprogenygeniccovariancematrix property)": [[822, "pybrops.model.pcvmat.DenseProgenyGenicCovarianceMatrix.DenseProgenyGenicCovarianceMatrix.square_taxa_axes_len"]], "square_trait_axes (pybrops.model.pcvmat.denseprogenygeniccovariancematrix.denseprogenygeniccovariancematrix property)": [[822, "pybrops.model.pcvmat.DenseProgenyGenicCovarianceMatrix.DenseProgenyGenicCovarianceMatrix.square_trait_axes"]], "square_trait_axes_len (pybrops.model.pcvmat.denseprogenygeniccovariancematrix.denseprogenygeniccovariancematrix property)": [[822, "pybrops.model.pcvmat.DenseProgenyGenicCovarianceMatrix.DenseProgenyGenicCovarianceMatrix.square_trait_axes_len"]], "taxa (pybrops.model.pcvmat.denseprogenygeniccovariancematrix.denseprogenygeniccovariancematrix property)": [[822, "pybrops.model.pcvmat.DenseProgenyGenicCovarianceMatrix.DenseProgenyGenicCovarianceMatrix.taxa"]], "taxa_axis (pybrops.model.pcvmat.denseprogenygeniccovariancematrix.denseprogenygeniccovariancematrix property)": [[822, "pybrops.model.pcvmat.DenseProgenyGenicCovarianceMatrix.DenseProgenyGenicCovarianceMatrix.taxa_axis"]], "taxa_grp (pybrops.model.pcvmat.denseprogenygeniccovariancematrix.denseprogenygeniccovariancematrix property)": [[822, "pybrops.model.pcvmat.DenseProgenyGenicCovarianceMatrix.DenseProgenyGenicCovarianceMatrix.taxa_grp"]], "taxa_grp_len (pybrops.model.pcvmat.denseprogenygeniccovariancematrix.denseprogenygeniccovariancematrix property)": [[822, "pybrops.model.pcvmat.DenseProgenyGenicCovarianceMatrix.DenseProgenyGenicCovarianceMatrix.taxa_grp_len"]], "taxa_grp_name (pybrops.model.pcvmat.denseprogenygeniccovariancematrix.denseprogenygeniccovariancematrix property)": [[822, "pybrops.model.pcvmat.DenseProgenyGenicCovarianceMatrix.DenseProgenyGenicCovarianceMatrix.taxa_grp_name"]], "taxa_grp_spix (pybrops.model.pcvmat.denseprogenygeniccovariancematrix.denseprogenygeniccovariancematrix property)": [[822, "pybrops.model.pcvmat.DenseProgenyGenicCovarianceMatrix.DenseProgenyGenicCovarianceMatrix.taxa_grp_spix"]], "taxa_grp_stix (pybrops.model.pcvmat.denseprogenygeniccovariancematrix.denseprogenygeniccovariancematrix property)": [[822, "pybrops.model.pcvmat.DenseProgenyGenicCovarianceMatrix.DenseProgenyGenicCovarianceMatrix.taxa_grp_stix"]], "to_csv() (pybrops.model.pcvmat.denseprogenygeniccovariancematrix.denseprogenygeniccovariancematrix method)": [[822, "pybrops.model.pcvmat.DenseProgenyGenicCovarianceMatrix.DenseProgenyGenicCovarianceMatrix.to_csv"]], "to_hdf5() (pybrops.model.pcvmat.denseprogenygeniccovariancematrix.denseprogenygeniccovariancematrix method)": [[822, "pybrops.model.pcvmat.DenseProgenyGenicCovarianceMatrix.DenseProgenyGenicCovarianceMatrix.to_hdf5"]], "to_pandas() (pybrops.model.pcvmat.denseprogenygeniccovariancematrix.denseprogenygeniccovariancematrix method)": [[822, "pybrops.model.pcvmat.DenseProgenyGenicCovarianceMatrix.DenseProgenyGenicCovarianceMatrix.to_pandas"]], "trait (pybrops.model.pcvmat.denseprogenygeniccovariancematrix.denseprogenygeniccovariancematrix property)": [[822, "pybrops.model.pcvmat.DenseProgenyGenicCovarianceMatrix.DenseProgenyGenicCovarianceMatrix.trait"]], "trait_axis (pybrops.model.pcvmat.denseprogenygeniccovariancematrix.denseprogenygeniccovariancematrix property)": [[822, "pybrops.model.pcvmat.DenseProgenyGenicCovarianceMatrix.DenseProgenyGenicCovarianceMatrix.trait_axis"]], "ungroup() (pybrops.model.pcvmat.denseprogenygeniccovariancematrix.denseprogenygeniccovariancematrix method)": [[822, "pybrops.model.pcvmat.DenseProgenyGenicCovarianceMatrix.DenseProgenyGenicCovarianceMatrix.ungroup"]], "ungroup_taxa() (pybrops.model.pcvmat.denseprogenygeniccovariancematrix.denseprogenygeniccovariancematrix method)": [[822, "pybrops.model.pcvmat.DenseProgenyGenicCovarianceMatrix.DenseProgenyGenicCovarianceMatrix.ungroup_taxa"]], "check_is_denseprogenygeniccovariancematrix() (in module pybrops.model.pcvmat.denseprogenygeniccovariancematrix)": [[823, "pybrops.model.pcvmat.DenseProgenyGenicCovarianceMatrix.check_is_DenseProgenyGenicCovarianceMatrix"]], "pybrops.model.pcvmat.densethreewaydhadditiveprogenygeneticcovariancematrix": [[824, "module-pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix"]], "densethreewaydhadditiveprogenygeneticcovariancematrix (class in pybrops.model.pcvmat.densethreewaydhadditiveprogenygeneticcovariancematrix)": [[825, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix"]], "__add__() (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeneticcovariancematrix.densethreewaydhadditiveprogenygeneticcovariancematrix method)": [[825, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.__add__"]], "__mul__() (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeneticcovariancematrix.densethreewaydhadditiveprogenygeneticcovariancematrix method)": [[825, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.__mul__"]], "adjoin() (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeneticcovariancematrix.densethreewaydhadditiveprogenygeneticcovariancematrix method)": [[825, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.adjoin"]], "adjoin_taxa() (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeneticcovariancematrix.densethreewaydhadditiveprogenygeneticcovariancematrix method)": [[825, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.adjoin_taxa"]], "adjoin_trait() (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeneticcovariancematrix.densethreewaydhadditiveprogenygeneticcovariancematrix method)": [[825, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.adjoin_trait"]], "append() (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeneticcovariancematrix.densethreewaydhadditiveprogenygeneticcovariancematrix method)": [[825, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.append"]], "append_taxa() (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeneticcovariancematrix.densethreewaydhadditiveprogenygeneticcovariancematrix method)": [[825, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.append_taxa"]], "append_trait() (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeneticcovariancematrix.densethreewaydhadditiveprogenygeneticcovariancematrix method)": [[825, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.append_trait"]], "concat() (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeneticcovariancematrix.densethreewaydhadditiveprogenygeneticcovariancematrix class method)": [[825, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.concat"]], "concat_taxa() (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeneticcovariancematrix.densethreewaydhadditiveprogenygeneticcovariancematrix class method)": [[825, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.concat_taxa"]], "concat_trait() (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeneticcovariancematrix.densethreewaydhadditiveprogenygeneticcovariancematrix class method)": [[825, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.concat_trait"]], "copy() (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeneticcovariancematrix.densethreewaydhadditiveprogenygeneticcovariancematrix method)": [[825, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.copy"]], "deepcopy() (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeneticcovariancematrix.densethreewaydhadditiveprogenygeneticcovariancematrix method)": [[825, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.deepcopy"]], "delete() (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeneticcovariancematrix.densethreewaydhadditiveprogenygeneticcovariancematrix method)": [[825, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.delete"]], "delete_taxa() (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeneticcovariancematrix.densethreewaydhadditiveprogenygeneticcovariancematrix method)": [[825, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.delete_taxa"]], "delete_trait() (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeneticcovariancematrix.densethreewaydhadditiveprogenygeneticcovariancematrix method)": [[825, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.delete_trait"]], "epgc (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeneticcovariancematrix.densethreewaydhadditiveprogenygeneticcovariancematrix property)": [[825, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.epgc"]], "female_axis (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeneticcovariancematrix.densethreewaydhadditiveprogenygeneticcovariancematrix property)": [[825, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.female_axis"]], "from_algmod() (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeneticcovariancematrix.densethreewaydhadditiveprogenygeneticcovariancematrix class method)": [[825, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.from_algmod"]], "from_csv() (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeneticcovariancematrix.densethreewaydhadditiveprogenygeneticcovariancematrix class method)": [[825, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.from_csv"]], "from_gmod() (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeneticcovariancematrix.densethreewaydhadditiveprogenygeneticcovariancematrix class method)": [[825, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.from_gmod"]], "from_hdf5() (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeneticcovariancematrix.densethreewaydhadditiveprogenygeneticcovariancematrix class method)": [[825, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.from_hdf5"]], "from_pandas() (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeneticcovariancematrix.densethreewaydhadditiveprogenygeneticcovariancematrix class method)": [[825, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.from_pandas"]], "group() (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeneticcovariancematrix.densethreewaydhadditiveprogenygeneticcovariancematrix method)": [[825, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.group"]], "group_taxa() (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeneticcovariancematrix.densethreewaydhadditiveprogenygeneticcovariancematrix method)": [[825, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.group_taxa"]], "incorp() (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeneticcovariancematrix.densethreewaydhadditiveprogenygeneticcovariancematrix method)": [[825, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.incorp"]], "incorp_taxa() (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeneticcovariancematrix.densethreewaydhadditiveprogenygeneticcovariancematrix method)": [[825, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.incorp_taxa"]], "incorp_trait() (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeneticcovariancematrix.densethreewaydhadditiveprogenygeneticcovariancematrix method)": [[825, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.incorp_trait"]], "insert() (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeneticcovariancematrix.densethreewaydhadditiveprogenygeneticcovariancematrix method)": [[825, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.insert"]], "insert_taxa() (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeneticcovariancematrix.densethreewaydhadditiveprogenygeneticcovariancematrix method)": [[825, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.insert_taxa"]], "insert_trait() (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeneticcovariancematrix.densethreewaydhadditiveprogenygeneticcovariancematrix method)": [[825, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.insert_trait"]], "is_grouped() (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeneticcovariancematrix.densethreewaydhadditiveprogenygeneticcovariancematrix method)": [[825, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.is_grouped"]], "is_grouped_taxa() (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeneticcovariancematrix.densethreewaydhadditiveprogenygeneticcovariancematrix method)": [[825, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.is_grouped_taxa"]], "is_square() (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeneticcovariancematrix.densethreewaydhadditiveprogenygeneticcovariancematrix method)": [[825, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.is_square"]], "is_square_taxa() (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeneticcovariancematrix.densethreewaydhadditiveprogenygeneticcovariancematrix method)": [[825, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.is_square_taxa"]], "is_square_trait() (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeneticcovariancematrix.densethreewaydhadditiveprogenygeneticcovariancematrix method)": [[825, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.is_square_trait"]], "lexsort() (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeneticcovariancematrix.densethreewaydhadditiveprogenygeneticcovariancematrix method)": [[825, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.lexsort"]], "lexsort_taxa() (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeneticcovariancematrix.densethreewaydhadditiveprogenygeneticcovariancematrix method)": [[825, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.lexsort_taxa"]], "lexsort_trait() (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeneticcovariancematrix.densethreewaydhadditiveprogenygeneticcovariancematrix method)": [[825, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.lexsort_trait"]], "male_axis (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeneticcovariancematrix.densethreewaydhadditiveprogenygeneticcovariancematrix property)": [[825, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.male_axis"]], "mat (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeneticcovariancematrix.densethreewaydhadditiveprogenygeneticcovariancematrix property)": [[825, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.mat"]], "mat_ndim (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeneticcovariancematrix.densethreewaydhadditiveprogenygeneticcovariancematrix property)": [[825, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.mat_ndim"]], "mat_shape (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeneticcovariancematrix.densethreewaydhadditiveprogenygeneticcovariancematrix property)": [[825, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.mat_shape"]], "nfemale (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeneticcovariancematrix.densethreewaydhadditiveprogenygeneticcovariancematrix property)": [[825, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.nfemale"]], "nmale (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeneticcovariancematrix.densethreewaydhadditiveprogenygeneticcovariancematrix property)": [[825, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.nmale"]], "nrecurrent (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeneticcovariancematrix.densethreewaydhadditiveprogenygeneticcovariancematrix property)": [[825, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.nrecurrent"]], "nsquare (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeneticcovariancematrix.densethreewaydhadditiveprogenygeneticcovariancematrix property)": [[825, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.nsquare"]], "nsquare_taxa (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeneticcovariancematrix.densethreewaydhadditiveprogenygeneticcovariancematrix property)": [[825, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.nsquare_taxa"]], "nsquare_trait (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeneticcovariancematrix.densethreewaydhadditiveprogenygeneticcovariancematrix property)": [[825, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.nsquare_trait"]], "ntaxa (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeneticcovariancematrix.densethreewaydhadditiveprogenygeneticcovariancematrix property)": [[825, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.ntaxa"]], "ntrait (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeneticcovariancematrix.densethreewaydhadditiveprogenygeneticcovariancematrix property)": [[825, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.ntrait"]], "recurrent_axis (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeneticcovariancematrix.densethreewaydhadditiveprogenygeneticcovariancematrix property)": [[825, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.recurrent_axis"]], "remove() (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeneticcovariancematrix.densethreewaydhadditiveprogenygeneticcovariancematrix method)": [[825, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.remove"]], "remove_taxa() (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeneticcovariancematrix.densethreewaydhadditiveprogenygeneticcovariancematrix method)": [[825, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.remove_taxa"]], "remove_trait() (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeneticcovariancematrix.densethreewaydhadditiveprogenygeneticcovariancematrix method)": [[825, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.remove_trait"]], "reorder() (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeneticcovariancematrix.densethreewaydhadditiveprogenygeneticcovariancematrix method)": [[825, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.reorder"]], "reorder_taxa() (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeneticcovariancematrix.densethreewaydhadditiveprogenygeneticcovariancematrix method)": [[825, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.reorder_taxa"]], "reorder_trait() (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeneticcovariancematrix.densethreewaydhadditiveprogenygeneticcovariancematrix method)": [[825, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.reorder_trait"]], "select() (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeneticcovariancematrix.densethreewaydhadditiveprogenygeneticcovariancematrix method)": [[825, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.select"]], "select_taxa() (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeneticcovariancematrix.densethreewaydhadditiveprogenygeneticcovariancematrix method)": [[825, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.select_taxa"]], "select_trait() (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeneticcovariancematrix.densethreewaydhadditiveprogenygeneticcovariancematrix method)": [[825, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.select_trait"]], "sort() (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeneticcovariancematrix.densethreewaydhadditiveprogenygeneticcovariancematrix method)": [[825, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.sort"]], "sort_taxa() (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeneticcovariancematrix.densethreewaydhadditiveprogenygeneticcovariancematrix method)": [[825, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.sort_taxa"]], "sort_trait() (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeneticcovariancematrix.densethreewaydhadditiveprogenygeneticcovariancematrix method)": [[825, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.sort_trait"]], "square_axes (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeneticcovariancematrix.densethreewaydhadditiveprogenygeneticcovariancematrix property)": [[825, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.square_axes"]], "square_axes_len (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeneticcovariancematrix.densethreewaydhadditiveprogenygeneticcovariancematrix property)": [[825, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.square_axes_len"]], "square_taxa_axes (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeneticcovariancematrix.densethreewaydhadditiveprogenygeneticcovariancematrix property)": [[825, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.square_taxa_axes"]], "square_taxa_axes_len (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeneticcovariancematrix.densethreewaydhadditiveprogenygeneticcovariancematrix property)": [[825, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.square_taxa_axes_len"]], "square_trait_axes (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeneticcovariancematrix.densethreewaydhadditiveprogenygeneticcovariancematrix property)": [[825, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.square_trait_axes"]], "square_trait_axes_len (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeneticcovariancematrix.densethreewaydhadditiveprogenygeneticcovariancematrix property)": [[825, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.square_trait_axes_len"]], "taxa (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeneticcovariancematrix.densethreewaydhadditiveprogenygeneticcovariancematrix property)": [[825, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.taxa"]], "taxa_axis (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeneticcovariancematrix.densethreewaydhadditiveprogenygeneticcovariancematrix property)": [[825, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.taxa_axis"]], "taxa_grp (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeneticcovariancematrix.densethreewaydhadditiveprogenygeneticcovariancematrix property)": [[825, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.taxa_grp"]], "taxa_grp_len (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeneticcovariancematrix.densethreewaydhadditiveprogenygeneticcovariancematrix property)": [[825, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.taxa_grp_len"]], "taxa_grp_name (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeneticcovariancematrix.densethreewaydhadditiveprogenygeneticcovariancematrix property)": [[825, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.taxa_grp_name"]], "taxa_grp_spix (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeneticcovariancematrix.densethreewaydhadditiveprogenygeneticcovariancematrix property)": [[825, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.taxa_grp_spix"]], "taxa_grp_stix (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeneticcovariancematrix.densethreewaydhadditiveprogenygeneticcovariancematrix property)": [[825, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.taxa_grp_stix"]], "to_csv() (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeneticcovariancematrix.densethreewaydhadditiveprogenygeneticcovariancematrix method)": [[825, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.to_csv"]], "to_hdf5() (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeneticcovariancematrix.densethreewaydhadditiveprogenygeneticcovariancematrix method)": [[825, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.to_hdf5"]], "to_pandas() (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeneticcovariancematrix.densethreewaydhadditiveprogenygeneticcovariancematrix method)": [[825, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.to_pandas"]], "trait (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeneticcovariancematrix.densethreewaydhadditiveprogenygeneticcovariancematrix property)": [[825, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.trait"]], "trait_axis (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeneticcovariancematrix.densethreewaydhadditiveprogenygeneticcovariancematrix property)": [[825, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.trait_axis"]], "ungroup() (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeneticcovariancematrix.densethreewaydhadditiveprogenygeneticcovariancematrix method)": [[825, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.ungroup"]], "ungroup_taxa() (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeneticcovariancematrix.densethreewaydhadditiveprogenygeneticcovariancematrix method)": [[825, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGeneticCovarianceMatrix.ungroup_taxa"]], "pybrops.model.pcvmat.densethreewaydhadditiveprogenygeniccovariancematrix": [[826, "module-pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix"]], "densethreewaydhadditiveprogenygeniccovariancematrix (class in pybrops.model.pcvmat.densethreewaydhadditiveprogenygeniccovariancematrix)": [[827, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix"]], "__add__() (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeniccovariancematrix.densethreewaydhadditiveprogenygeniccovariancematrix method)": [[827, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.__add__"]], "__mul__() (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeniccovariancematrix.densethreewaydhadditiveprogenygeniccovariancematrix method)": [[827, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.__mul__"]], "adjoin() (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeniccovariancematrix.densethreewaydhadditiveprogenygeniccovariancematrix method)": [[827, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.adjoin"]], "adjoin_taxa() (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeniccovariancematrix.densethreewaydhadditiveprogenygeniccovariancematrix method)": [[827, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.adjoin_taxa"]], "adjoin_trait() (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeniccovariancematrix.densethreewaydhadditiveprogenygeniccovariancematrix method)": [[827, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.adjoin_trait"]], "append() (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeniccovariancematrix.densethreewaydhadditiveprogenygeniccovariancematrix method)": [[827, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.append"]], "append_taxa() (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeniccovariancematrix.densethreewaydhadditiveprogenygeniccovariancematrix method)": [[827, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.append_taxa"]], "append_trait() (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeniccovariancematrix.densethreewaydhadditiveprogenygeniccovariancematrix method)": [[827, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.append_trait"]], "concat() (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeniccovariancematrix.densethreewaydhadditiveprogenygeniccovariancematrix class method)": [[827, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.concat"]], "concat_taxa() (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeniccovariancematrix.densethreewaydhadditiveprogenygeniccovariancematrix class method)": [[827, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.concat_taxa"]], "concat_trait() (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeniccovariancematrix.densethreewaydhadditiveprogenygeniccovariancematrix class method)": [[827, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.concat_trait"]], "copy() (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeniccovariancematrix.densethreewaydhadditiveprogenygeniccovariancematrix method)": [[827, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.copy"]], "deepcopy() (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeniccovariancematrix.densethreewaydhadditiveprogenygeniccovariancematrix method)": [[827, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.deepcopy"]], "delete() (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeniccovariancematrix.densethreewaydhadditiveprogenygeniccovariancematrix method)": [[827, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.delete"]], "delete_taxa() (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeniccovariancematrix.densethreewaydhadditiveprogenygeniccovariancematrix method)": [[827, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.delete_taxa"]], "delete_trait() (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeniccovariancematrix.densethreewaydhadditiveprogenygeniccovariancematrix method)": [[827, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.delete_trait"]], "epgc (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeniccovariancematrix.densethreewaydhadditiveprogenygeniccovariancematrix property)": [[827, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.epgc"]], "female_axis (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeniccovariancematrix.densethreewaydhadditiveprogenygeniccovariancematrix property)": [[827, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.female_axis"]], "from_algmod() (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeniccovariancematrix.densethreewaydhadditiveprogenygeniccovariancematrix class method)": [[827, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.from_algmod"]], "from_csv() (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeniccovariancematrix.densethreewaydhadditiveprogenygeniccovariancematrix class method)": [[827, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.from_csv"]], "from_gmod() (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeniccovariancematrix.densethreewaydhadditiveprogenygeniccovariancematrix class method)": [[827, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.from_gmod"]], "from_hdf5() (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeniccovariancematrix.densethreewaydhadditiveprogenygeniccovariancematrix class method)": [[827, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.from_hdf5"]], "from_pandas() (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeniccovariancematrix.densethreewaydhadditiveprogenygeniccovariancematrix class method)": [[827, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.from_pandas"]], "group() (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeniccovariancematrix.densethreewaydhadditiveprogenygeniccovariancematrix method)": [[827, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.group"]], "group_taxa() (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeniccovariancematrix.densethreewaydhadditiveprogenygeniccovariancematrix method)": [[827, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.group_taxa"]], "incorp() (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeniccovariancematrix.densethreewaydhadditiveprogenygeniccovariancematrix method)": [[827, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.incorp"]], "incorp_taxa() (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeniccovariancematrix.densethreewaydhadditiveprogenygeniccovariancematrix method)": [[827, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.incorp_taxa"]], "incorp_trait() (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeniccovariancematrix.densethreewaydhadditiveprogenygeniccovariancematrix method)": [[827, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.incorp_trait"]], "insert() (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeniccovariancematrix.densethreewaydhadditiveprogenygeniccovariancematrix method)": [[827, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.insert"]], "insert_taxa() (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeniccovariancematrix.densethreewaydhadditiveprogenygeniccovariancematrix method)": [[827, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.insert_taxa"]], "insert_trait() (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeniccovariancematrix.densethreewaydhadditiveprogenygeniccovariancematrix method)": [[827, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.insert_trait"]], "is_grouped() (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeniccovariancematrix.densethreewaydhadditiveprogenygeniccovariancematrix method)": [[827, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.is_grouped"]], "is_grouped_taxa() (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeniccovariancematrix.densethreewaydhadditiveprogenygeniccovariancematrix method)": [[827, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.is_grouped_taxa"]], "is_square() (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeniccovariancematrix.densethreewaydhadditiveprogenygeniccovariancematrix method)": [[827, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.is_square"]], "is_square_taxa() (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeniccovariancematrix.densethreewaydhadditiveprogenygeniccovariancematrix method)": [[827, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.is_square_taxa"]], "is_square_trait() (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeniccovariancematrix.densethreewaydhadditiveprogenygeniccovariancematrix method)": [[827, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.is_square_trait"]], "lexsort() (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeniccovariancematrix.densethreewaydhadditiveprogenygeniccovariancematrix method)": [[827, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.lexsort"]], "lexsort_taxa() (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeniccovariancematrix.densethreewaydhadditiveprogenygeniccovariancematrix method)": [[827, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.lexsort_taxa"]], "lexsort_trait() (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeniccovariancematrix.densethreewaydhadditiveprogenygeniccovariancematrix method)": [[827, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.lexsort_trait"]], "male_axis (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeniccovariancematrix.densethreewaydhadditiveprogenygeniccovariancematrix property)": [[827, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.male_axis"]], "mat (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeniccovariancematrix.densethreewaydhadditiveprogenygeniccovariancematrix property)": [[827, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.mat"]], "mat_ndim (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeniccovariancematrix.densethreewaydhadditiveprogenygeniccovariancematrix property)": [[827, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.mat_ndim"]], "mat_shape (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeniccovariancematrix.densethreewaydhadditiveprogenygeniccovariancematrix property)": [[827, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.mat_shape"]], "nfemale (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeniccovariancematrix.densethreewaydhadditiveprogenygeniccovariancematrix property)": [[827, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.nfemale"]], "nmale (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeniccovariancematrix.densethreewaydhadditiveprogenygeniccovariancematrix property)": [[827, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.nmale"]], "nrecurrent (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeniccovariancematrix.densethreewaydhadditiveprogenygeniccovariancematrix property)": [[827, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.nrecurrent"]], "nsquare (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeniccovariancematrix.densethreewaydhadditiveprogenygeniccovariancematrix property)": [[827, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.nsquare"]], "nsquare_taxa (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeniccovariancematrix.densethreewaydhadditiveprogenygeniccovariancematrix property)": [[827, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.nsquare_taxa"]], "nsquare_trait (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeniccovariancematrix.densethreewaydhadditiveprogenygeniccovariancematrix property)": [[827, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.nsquare_trait"]], "ntaxa (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeniccovariancematrix.densethreewaydhadditiveprogenygeniccovariancematrix property)": [[827, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.ntaxa"]], "ntrait (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeniccovariancematrix.densethreewaydhadditiveprogenygeniccovariancematrix property)": [[827, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.ntrait"]], "recurrent_axis (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeniccovariancematrix.densethreewaydhadditiveprogenygeniccovariancematrix property)": [[827, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.recurrent_axis"]], "remove() (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeniccovariancematrix.densethreewaydhadditiveprogenygeniccovariancematrix method)": [[827, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.remove"]], "remove_taxa() (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeniccovariancematrix.densethreewaydhadditiveprogenygeniccovariancematrix method)": [[827, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.remove_taxa"]], "remove_trait() (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeniccovariancematrix.densethreewaydhadditiveprogenygeniccovariancematrix method)": [[827, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.remove_trait"]], "reorder() (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeniccovariancematrix.densethreewaydhadditiveprogenygeniccovariancematrix method)": [[827, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.reorder"]], "reorder_taxa() (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeniccovariancematrix.densethreewaydhadditiveprogenygeniccovariancematrix method)": [[827, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.reorder_taxa"]], "reorder_trait() (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeniccovariancematrix.densethreewaydhadditiveprogenygeniccovariancematrix method)": [[827, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.reorder_trait"]], "select() (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeniccovariancematrix.densethreewaydhadditiveprogenygeniccovariancematrix method)": [[827, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.select"]], "select_taxa() (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeniccovariancematrix.densethreewaydhadditiveprogenygeniccovariancematrix method)": [[827, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.select_taxa"]], "select_trait() (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeniccovariancematrix.densethreewaydhadditiveprogenygeniccovariancematrix method)": [[827, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.select_trait"]], "sort() (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeniccovariancematrix.densethreewaydhadditiveprogenygeniccovariancematrix method)": [[827, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.sort"]], "sort_taxa() (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeniccovariancematrix.densethreewaydhadditiveprogenygeniccovariancematrix method)": [[827, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.sort_taxa"]], "sort_trait() (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeniccovariancematrix.densethreewaydhadditiveprogenygeniccovariancematrix method)": [[827, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.sort_trait"]], "square_axes (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeniccovariancematrix.densethreewaydhadditiveprogenygeniccovariancematrix property)": [[827, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.square_axes"]], "square_axes_len (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeniccovariancematrix.densethreewaydhadditiveprogenygeniccovariancematrix property)": [[827, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.square_axes_len"]], "square_taxa_axes (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeniccovariancematrix.densethreewaydhadditiveprogenygeniccovariancematrix property)": [[827, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.square_taxa_axes"]], "square_taxa_axes_len (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeniccovariancematrix.densethreewaydhadditiveprogenygeniccovariancematrix property)": [[827, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.square_taxa_axes_len"]], "square_trait_axes (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeniccovariancematrix.densethreewaydhadditiveprogenygeniccovariancematrix property)": [[827, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.square_trait_axes"]], "square_trait_axes_len (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeniccovariancematrix.densethreewaydhadditiveprogenygeniccovariancematrix property)": [[827, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.square_trait_axes_len"]], "taxa (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeniccovariancematrix.densethreewaydhadditiveprogenygeniccovariancematrix property)": [[827, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.taxa"]], "taxa_axis (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeniccovariancematrix.densethreewaydhadditiveprogenygeniccovariancematrix property)": [[827, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.taxa_axis"]], "taxa_grp (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeniccovariancematrix.densethreewaydhadditiveprogenygeniccovariancematrix property)": [[827, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.taxa_grp"]], "taxa_grp_len (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeniccovariancematrix.densethreewaydhadditiveprogenygeniccovariancematrix property)": [[827, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.taxa_grp_len"]], "taxa_grp_name (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeniccovariancematrix.densethreewaydhadditiveprogenygeniccovariancematrix property)": [[827, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.taxa_grp_name"]], "taxa_grp_spix (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeniccovariancematrix.densethreewaydhadditiveprogenygeniccovariancematrix property)": [[827, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.taxa_grp_spix"]], "taxa_grp_stix (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeniccovariancematrix.densethreewaydhadditiveprogenygeniccovariancematrix property)": [[827, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.taxa_grp_stix"]], "to_csv() (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeniccovariancematrix.densethreewaydhadditiveprogenygeniccovariancematrix method)": [[827, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.to_csv"]], "to_hdf5() (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeniccovariancematrix.densethreewaydhadditiveprogenygeniccovariancematrix method)": [[827, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.to_hdf5"]], "to_pandas() (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeniccovariancematrix.densethreewaydhadditiveprogenygeniccovariancematrix method)": [[827, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.to_pandas"]], "trait (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeniccovariancematrix.densethreewaydhadditiveprogenygeniccovariancematrix property)": [[827, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.trait"]], "trait_axis (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeniccovariancematrix.densethreewaydhadditiveprogenygeniccovariancematrix property)": [[827, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.trait_axis"]], "ungroup() (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeniccovariancematrix.densethreewaydhadditiveprogenygeniccovariancematrix method)": [[827, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.ungroup"]], "ungroup_taxa() (pybrops.model.pcvmat.densethreewaydhadditiveprogenygeniccovariancematrix.densethreewaydhadditiveprogenygeniccovariancematrix method)": [[827, "pybrops.model.pcvmat.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.DenseThreeWayDHAdditiveProgenyGenicCovarianceMatrix.ungroup_taxa"]], "pybrops.model.pcvmat.densetwowaydhadditiveprogenygeneticcovariancematrix": [[828, "module-pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix"]], "densetwowaydhadditiveprogenygeneticcovariancematrix (class in pybrops.model.pcvmat.densetwowaydhadditiveprogenygeneticcovariancematrix)": [[829, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix"]], "__add__() (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeneticcovariancematrix.densetwowaydhadditiveprogenygeneticcovariancematrix method)": [[829, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.__add__"]], "__mul__() (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeneticcovariancematrix.densetwowaydhadditiveprogenygeneticcovariancematrix method)": [[829, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.__mul__"]], "adjoin() (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeneticcovariancematrix.densetwowaydhadditiveprogenygeneticcovariancematrix method)": [[829, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.adjoin"]], "adjoin_taxa() (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeneticcovariancematrix.densetwowaydhadditiveprogenygeneticcovariancematrix method)": [[829, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.adjoin_taxa"]], "adjoin_trait() (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeneticcovariancematrix.densetwowaydhadditiveprogenygeneticcovariancematrix method)": [[829, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.adjoin_trait"]], "append() (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeneticcovariancematrix.densetwowaydhadditiveprogenygeneticcovariancematrix method)": [[829, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.append"]], "append_taxa() (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeneticcovariancematrix.densetwowaydhadditiveprogenygeneticcovariancematrix method)": [[829, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.append_taxa"]], "append_trait() (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeneticcovariancematrix.densetwowaydhadditiveprogenygeneticcovariancematrix method)": [[829, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.append_trait"]], "concat() (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeneticcovariancematrix.densetwowaydhadditiveprogenygeneticcovariancematrix class method)": [[829, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.concat"]], "concat_taxa() (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeneticcovariancematrix.densetwowaydhadditiveprogenygeneticcovariancematrix class method)": [[829, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.concat_taxa"]], "concat_trait() (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeneticcovariancematrix.densetwowaydhadditiveprogenygeneticcovariancematrix class method)": [[829, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.concat_trait"]], "copy() (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeneticcovariancematrix.densetwowaydhadditiveprogenygeneticcovariancematrix method)": [[829, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.copy"]], "deepcopy() (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeneticcovariancematrix.densetwowaydhadditiveprogenygeneticcovariancematrix method)": [[829, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.deepcopy"]], "delete() (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeneticcovariancematrix.densetwowaydhadditiveprogenygeneticcovariancematrix method)": [[829, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.delete"]], "delete_taxa() (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeneticcovariancematrix.densetwowaydhadditiveprogenygeneticcovariancematrix method)": [[829, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.delete_taxa"]], "delete_trait() (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeneticcovariancematrix.densetwowaydhadditiveprogenygeneticcovariancematrix method)": [[829, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.delete_trait"]], "epgc (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeneticcovariancematrix.densetwowaydhadditiveprogenygeneticcovariancematrix property)": [[829, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.epgc"]], "female_axis (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeneticcovariancematrix.densetwowaydhadditiveprogenygeneticcovariancematrix property)": [[829, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.female_axis"]], "from_algmod() (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeneticcovariancematrix.densetwowaydhadditiveprogenygeneticcovariancematrix class method)": [[829, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.from_algmod"]], "from_csv() (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeneticcovariancematrix.densetwowaydhadditiveprogenygeneticcovariancematrix class method)": [[829, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.from_csv"]], "from_gmod() (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeneticcovariancematrix.densetwowaydhadditiveprogenygeneticcovariancematrix class method)": [[829, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.from_gmod"]], "from_hdf5() (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeneticcovariancematrix.densetwowaydhadditiveprogenygeneticcovariancematrix class method)": [[829, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.from_hdf5"]], "from_pandas() (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeneticcovariancematrix.densetwowaydhadditiveprogenygeneticcovariancematrix class method)": [[829, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.from_pandas"]], "group() (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeneticcovariancematrix.densetwowaydhadditiveprogenygeneticcovariancematrix method)": [[829, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.group"]], "group_taxa() (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeneticcovariancematrix.densetwowaydhadditiveprogenygeneticcovariancematrix method)": [[829, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.group_taxa"]], "incorp() (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeneticcovariancematrix.densetwowaydhadditiveprogenygeneticcovariancematrix method)": [[829, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.incorp"]], "incorp_taxa() (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeneticcovariancematrix.densetwowaydhadditiveprogenygeneticcovariancematrix method)": [[829, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.incorp_taxa"]], "incorp_trait() (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeneticcovariancematrix.densetwowaydhadditiveprogenygeneticcovariancematrix method)": [[829, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.incorp_trait"]], "insert() (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeneticcovariancematrix.densetwowaydhadditiveprogenygeneticcovariancematrix method)": [[829, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.insert"]], "insert_taxa() (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeneticcovariancematrix.densetwowaydhadditiveprogenygeneticcovariancematrix method)": [[829, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.insert_taxa"]], "insert_trait() (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeneticcovariancematrix.densetwowaydhadditiveprogenygeneticcovariancematrix method)": [[829, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.insert_trait"]], "is_grouped() (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeneticcovariancematrix.densetwowaydhadditiveprogenygeneticcovariancematrix method)": [[829, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.is_grouped"]], "is_grouped_taxa() (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeneticcovariancematrix.densetwowaydhadditiveprogenygeneticcovariancematrix method)": [[829, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.is_grouped_taxa"]], "is_square() (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeneticcovariancematrix.densetwowaydhadditiveprogenygeneticcovariancematrix method)": [[829, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.is_square"]], "is_square_taxa() (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeneticcovariancematrix.densetwowaydhadditiveprogenygeneticcovariancematrix method)": [[829, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.is_square_taxa"]], "is_square_trait() (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeneticcovariancematrix.densetwowaydhadditiveprogenygeneticcovariancematrix method)": [[829, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.is_square_trait"]], "lexsort() (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeneticcovariancematrix.densetwowaydhadditiveprogenygeneticcovariancematrix method)": [[829, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.lexsort"]], "lexsort_taxa() (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeneticcovariancematrix.densetwowaydhadditiveprogenygeneticcovariancematrix method)": [[829, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.lexsort_taxa"]], "lexsort_trait() (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeneticcovariancematrix.densetwowaydhadditiveprogenygeneticcovariancematrix method)": [[829, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.lexsort_trait"]], "male_axis (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeneticcovariancematrix.densetwowaydhadditiveprogenygeneticcovariancematrix property)": [[829, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.male_axis"]], "mat (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeneticcovariancematrix.densetwowaydhadditiveprogenygeneticcovariancematrix property)": [[829, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.mat"]], "mat_ndim (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeneticcovariancematrix.densetwowaydhadditiveprogenygeneticcovariancematrix property)": [[829, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.mat_ndim"]], "mat_shape (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeneticcovariancematrix.densetwowaydhadditiveprogenygeneticcovariancematrix property)": [[829, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.mat_shape"]], "nfemale (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeneticcovariancematrix.densetwowaydhadditiveprogenygeneticcovariancematrix property)": [[829, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.nfemale"]], "nmale (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeneticcovariancematrix.densetwowaydhadditiveprogenygeneticcovariancematrix property)": [[829, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.nmale"]], "nsquare (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeneticcovariancematrix.densetwowaydhadditiveprogenygeneticcovariancematrix property)": [[829, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.nsquare"]], "nsquare_taxa (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeneticcovariancematrix.densetwowaydhadditiveprogenygeneticcovariancematrix property)": [[829, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.nsquare_taxa"]], "nsquare_trait (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeneticcovariancematrix.densetwowaydhadditiveprogenygeneticcovariancematrix property)": [[829, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.nsquare_trait"]], "ntaxa (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeneticcovariancematrix.densetwowaydhadditiveprogenygeneticcovariancematrix property)": [[829, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.ntaxa"]], "ntrait (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeneticcovariancematrix.densetwowaydhadditiveprogenygeneticcovariancematrix property)": [[829, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.ntrait"]], "remove() (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeneticcovariancematrix.densetwowaydhadditiveprogenygeneticcovariancematrix method)": [[829, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.remove"]], "remove_taxa() (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeneticcovariancematrix.densetwowaydhadditiveprogenygeneticcovariancematrix method)": [[829, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.remove_taxa"]], "remove_trait() (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeneticcovariancematrix.densetwowaydhadditiveprogenygeneticcovariancematrix method)": [[829, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.remove_trait"]], "reorder() (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeneticcovariancematrix.densetwowaydhadditiveprogenygeneticcovariancematrix method)": [[829, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.reorder"]], "reorder_taxa() (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeneticcovariancematrix.densetwowaydhadditiveprogenygeneticcovariancematrix method)": [[829, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.reorder_taxa"]], "reorder_trait() (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeneticcovariancematrix.densetwowaydhadditiveprogenygeneticcovariancematrix method)": [[829, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.reorder_trait"]], "select() (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeneticcovariancematrix.densetwowaydhadditiveprogenygeneticcovariancematrix method)": [[829, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.select"]], "select_taxa() (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeneticcovariancematrix.densetwowaydhadditiveprogenygeneticcovariancematrix method)": [[829, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.select_taxa"]], "select_trait() (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeneticcovariancematrix.densetwowaydhadditiveprogenygeneticcovariancematrix method)": [[829, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.select_trait"]], "sort() (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeneticcovariancematrix.densetwowaydhadditiveprogenygeneticcovariancematrix method)": [[829, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.sort"]], "sort_taxa() (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeneticcovariancematrix.densetwowaydhadditiveprogenygeneticcovariancematrix method)": [[829, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.sort_taxa"]], "sort_trait() (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeneticcovariancematrix.densetwowaydhadditiveprogenygeneticcovariancematrix method)": [[829, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.sort_trait"]], "square_axes (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeneticcovariancematrix.densetwowaydhadditiveprogenygeneticcovariancematrix property)": [[829, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.square_axes"]], "square_axes_len (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeneticcovariancematrix.densetwowaydhadditiveprogenygeneticcovariancematrix property)": [[829, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.square_axes_len"]], "square_taxa_axes (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeneticcovariancematrix.densetwowaydhadditiveprogenygeneticcovariancematrix property)": [[829, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.square_taxa_axes"]], "square_taxa_axes_len (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeneticcovariancematrix.densetwowaydhadditiveprogenygeneticcovariancematrix property)": [[829, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.square_taxa_axes_len"]], "square_trait_axes (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeneticcovariancematrix.densetwowaydhadditiveprogenygeneticcovariancematrix property)": [[829, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.square_trait_axes"]], "square_trait_axes_len (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeneticcovariancematrix.densetwowaydhadditiveprogenygeneticcovariancematrix property)": [[829, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.square_trait_axes_len"]], "taxa (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeneticcovariancematrix.densetwowaydhadditiveprogenygeneticcovariancematrix property)": [[829, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.taxa"]], "taxa_axis (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeneticcovariancematrix.densetwowaydhadditiveprogenygeneticcovariancematrix property)": [[829, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.taxa_axis"]], "taxa_grp (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeneticcovariancematrix.densetwowaydhadditiveprogenygeneticcovariancematrix property)": [[829, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.taxa_grp"]], "taxa_grp_len (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeneticcovariancematrix.densetwowaydhadditiveprogenygeneticcovariancematrix property)": [[829, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.taxa_grp_len"]], "taxa_grp_name (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeneticcovariancematrix.densetwowaydhadditiveprogenygeneticcovariancematrix property)": [[829, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.taxa_grp_name"]], "taxa_grp_spix (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeneticcovariancematrix.densetwowaydhadditiveprogenygeneticcovariancematrix property)": [[829, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.taxa_grp_spix"]], "taxa_grp_stix (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeneticcovariancematrix.densetwowaydhadditiveprogenygeneticcovariancematrix property)": [[829, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.taxa_grp_stix"]], "to_csv() (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeneticcovariancematrix.densetwowaydhadditiveprogenygeneticcovariancematrix method)": [[829, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.to_csv"]], "to_hdf5() (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeneticcovariancematrix.densetwowaydhadditiveprogenygeneticcovariancematrix method)": [[829, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.to_hdf5"]], "to_pandas() (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeneticcovariancematrix.densetwowaydhadditiveprogenygeneticcovariancematrix method)": [[829, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.to_pandas"]], "trait (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeneticcovariancematrix.densetwowaydhadditiveprogenygeneticcovariancematrix property)": [[829, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.trait"]], "trait_axis (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeneticcovariancematrix.densetwowaydhadditiveprogenygeneticcovariancematrix property)": [[829, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.trait_axis"]], "ungroup() (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeneticcovariancematrix.densetwowaydhadditiveprogenygeneticcovariancematrix method)": [[829, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.ungroup"]], "ungroup_taxa() (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeneticcovariancematrix.densetwowaydhadditiveprogenygeneticcovariancematrix method)": [[829, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGeneticCovarianceMatrix.ungroup_taxa"]], "pybrops.model.pcvmat.densetwowaydhadditiveprogenygeniccovariancematrix": [[830, "module-pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix"]], "densetwowaydhadditiveprogenygeniccovariancematrix (class in pybrops.model.pcvmat.densetwowaydhadditiveprogenygeniccovariancematrix)": [[831, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix"]], "__add__() (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeniccovariancematrix.densetwowaydhadditiveprogenygeniccovariancematrix method)": [[831, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.__add__"]], "__mul__() (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeniccovariancematrix.densetwowaydhadditiveprogenygeniccovariancematrix method)": [[831, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.__mul__"]], "adjoin() (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeniccovariancematrix.densetwowaydhadditiveprogenygeniccovariancematrix method)": [[831, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.adjoin"]], "adjoin_taxa() (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeniccovariancematrix.densetwowaydhadditiveprogenygeniccovariancematrix method)": [[831, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.adjoin_taxa"]], "adjoin_trait() (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeniccovariancematrix.densetwowaydhadditiveprogenygeniccovariancematrix method)": [[831, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.adjoin_trait"]], "append() (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeniccovariancematrix.densetwowaydhadditiveprogenygeniccovariancematrix method)": [[831, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.append"]], "append_taxa() (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeniccovariancematrix.densetwowaydhadditiveprogenygeniccovariancematrix method)": [[831, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.append_taxa"]], "append_trait() (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeniccovariancematrix.densetwowaydhadditiveprogenygeniccovariancematrix method)": [[831, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.append_trait"]], "concat() (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeniccovariancematrix.densetwowaydhadditiveprogenygeniccovariancematrix class method)": [[831, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.concat"]], "concat_taxa() (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeniccovariancematrix.densetwowaydhadditiveprogenygeniccovariancematrix class method)": [[831, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.concat_taxa"]], "concat_trait() (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeniccovariancematrix.densetwowaydhadditiveprogenygeniccovariancematrix class method)": [[831, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.concat_trait"]], "copy() (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeniccovariancematrix.densetwowaydhadditiveprogenygeniccovariancematrix method)": [[831, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.copy"]], "deepcopy() (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeniccovariancematrix.densetwowaydhadditiveprogenygeniccovariancematrix method)": [[831, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.deepcopy"]], "delete() (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeniccovariancematrix.densetwowaydhadditiveprogenygeniccovariancematrix method)": [[831, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.delete"]], "delete_taxa() (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeniccovariancematrix.densetwowaydhadditiveprogenygeniccovariancematrix method)": [[831, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.delete_taxa"]], "delete_trait() (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeniccovariancematrix.densetwowaydhadditiveprogenygeniccovariancematrix method)": [[831, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.delete_trait"]], "epgc (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeniccovariancematrix.densetwowaydhadditiveprogenygeniccovariancematrix property)": [[831, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.epgc"]], "female_axis (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeniccovariancematrix.densetwowaydhadditiveprogenygeniccovariancematrix property)": [[831, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.female_axis"]], "from_algmod() (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeniccovariancematrix.densetwowaydhadditiveprogenygeniccovariancematrix class method)": [[831, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.from_algmod"]], "from_csv() (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeniccovariancematrix.densetwowaydhadditiveprogenygeniccovariancematrix class method)": [[831, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.from_csv"]], "from_gmod() (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeniccovariancematrix.densetwowaydhadditiveprogenygeniccovariancematrix class method)": [[831, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.from_gmod"]], "from_hdf5() (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeniccovariancematrix.densetwowaydhadditiveprogenygeniccovariancematrix class method)": [[831, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.from_hdf5"]], "from_pandas() (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeniccovariancematrix.densetwowaydhadditiveprogenygeniccovariancematrix class method)": [[831, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.from_pandas"]], "group() (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeniccovariancematrix.densetwowaydhadditiveprogenygeniccovariancematrix method)": [[831, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.group"]], "group_taxa() (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeniccovariancematrix.densetwowaydhadditiveprogenygeniccovariancematrix method)": [[831, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.group_taxa"]], "incorp() (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeniccovariancematrix.densetwowaydhadditiveprogenygeniccovariancematrix method)": [[831, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.incorp"]], "incorp_taxa() (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeniccovariancematrix.densetwowaydhadditiveprogenygeniccovariancematrix method)": [[831, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.incorp_taxa"]], "incorp_trait() (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeniccovariancematrix.densetwowaydhadditiveprogenygeniccovariancematrix method)": [[831, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.incorp_trait"]], "insert() (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeniccovariancematrix.densetwowaydhadditiveprogenygeniccovariancematrix method)": [[831, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.insert"]], "insert_taxa() (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeniccovariancematrix.densetwowaydhadditiveprogenygeniccovariancematrix method)": [[831, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.insert_taxa"]], "insert_trait() (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeniccovariancematrix.densetwowaydhadditiveprogenygeniccovariancematrix method)": [[831, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.insert_trait"]], "is_grouped() (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeniccovariancematrix.densetwowaydhadditiveprogenygeniccovariancematrix method)": [[831, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.is_grouped"]], "is_grouped_taxa() (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeniccovariancematrix.densetwowaydhadditiveprogenygeniccovariancematrix method)": [[831, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.is_grouped_taxa"]], "is_square() (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeniccovariancematrix.densetwowaydhadditiveprogenygeniccovariancematrix method)": [[831, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.is_square"]], "is_square_taxa() (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeniccovariancematrix.densetwowaydhadditiveprogenygeniccovariancematrix method)": [[831, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.is_square_taxa"]], "is_square_trait() (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeniccovariancematrix.densetwowaydhadditiveprogenygeniccovariancematrix method)": [[831, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.is_square_trait"]], "lexsort() (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeniccovariancematrix.densetwowaydhadditiveprogenygeniccovariancematrix method)": [[831, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.lexsort"]], "lexsort_taxa() (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeniccovariancematrix.densetwowaydhadditiveprogenygeniccovariancematrix method)": [[831, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.lexsort_taxa"]], "lexsort_trait() (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeniccovariancematrix.densetwowaydhadditiveprogenygeniccovariancematrix method)": [[831, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.lexsort_trait"]], "male_axis (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeniccovariancematrix.densetwowaydhadditiveprogenygeniccovariancematrix property)": [[831, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.male_axis"]], "mat (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeniccovariancematrix.densetwowaydhadditiveprogenygeniccovariancematrix property)": [[831, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.mat"]], "mat_ndim (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeniccovariancematrix.densetwowaydhadditiveprogenygeniccovariancematrix property)": [[831, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.mat_ndim"]], "mat_shape (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeniccovariancematrix.densetwowaydhadditiveprogenygeniccovariancematrix property)": [[831, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.mat_shape"]], "nfemale (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeniccovariancematrix.densetwowaydhadditiveprogenygeniccovariancematrix property)": [[831, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.nfemale"]], "nmale (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeniccovariancematrix.densetwowaydhadditiveprogenygeniccovariancematrix property)": [[831, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.nmale"]], "nsquare (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeniccovariancematrix.densetwowaydhadditiveprogenygeniccovariancematrix property)": [[831, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.nsquare"]], "nsquare_taxa (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeniccovariancematrix.densetwowaydhadditiveprogenygeniccovariancematrix property)": [[831, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.nsquare_taxa"]], "nsquare_trait (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeniccovariancematrix.densetwowaydhadditiveprogenygeniccovariancematrix property)": [[831, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.nsquare_trait"]], "ntaxa (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeniccovariancematrix.densetwowaydhadditiveprogenygeniccovariancematrix property)": [[831, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.ntaxa"]], "ntrait (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeniccovariancematrix.densetwowaydhadditiveprogenygeniccovariancematrix property)": [[831, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.ntrait"]], "remove() (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeniccovariancematrix.densetwowaydhadditiveprogenygeniccovariancematrix method)": [[831, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.remove"]], "remove_taxa() (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeniccovariancematrix.densetwowaydhadditiveprogenygeniccovariancematrix method)": [[831, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.remove_taxa"]], "remove_trait() (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeniccovariancematrix.densetwowaydhadditiveprogenygeniccovariancematrix method)": [[831, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.remove_trait"]], "reorder() (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeniccovariancematrix.densetwowaydhadditiveprogenygeniccovariancematrix method)": [[831, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.reorder"]], "reorder_taxa() (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeniccovariancematrix.densetwowaydhadditiveprogenygeniccovariancematrix method)": [[831, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.reorder_taxa"]], "reorder_trait() (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeniccovariancematrix.densetwowaydhadditiveprogenygeniccovariancematrix method)": [[831, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.reorder_trait"]], "select() (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeniccovariancematrix.densetwowaydhadditiveprogenygeniccovariancematrix method)": [[831, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.select"]], "select_taxa() (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeniccovariancematrix.densetwowaydhadditiveprogenygeniccovariancematrix method)": [[831, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.select_taxa"]], "select_trait() (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeniccovariancematrix.densetwowaydhadditiveprogenygeniccovariancematrix method)": [[831, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.select_trait"]], "sort() (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeniccovariancematrix.densetwowaydhadditiveprogenygeniccovariancematrix method)": [[831, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.sort"]], "sort_taxa() (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeniccovariancematrix.densetwowaydhadditiveprogenygeniccovariancematrix method)": [[831, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.sort_taxa"]], "sort_trait() (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeniccovariancematrix.densetwowaydhadditiveprogenygeniccovariancematrix method)": [[831, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.sort_trait"]], "square_axes (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeniccovariancematrix.densetwowaydhadditiveprogenygeniccovariancematrix property)": [[831, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.square_axes"]], "square_axes_len (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeniccovariancematrix.densetwowaydhadditiveprogenygeniccovariancematrix property)": [[831, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.square_axes_len"]], "square_taxa_axes (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeniccovariancematrix.densetwowaydhadditiveprogenygeniccovariancematrix property)": [[831, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.square_taxa_axes"]], "square_taxa_axes_len (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeniccovariancematrix.densetwowaydhadditiveprogenygeniccovariancematrix property)": [[831, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.square_taxa_axes_len"]], "square_trait_axes (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeniccovariancematrix.densetwowaydhadditiveprogenygeniccovariancematrix property)": [[831, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.square_trait_axes"]], "square_trait_axes_len (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeniccovariancematrix.densetwowaydhadditiveprogenygeniccovariancematrix property)": [[831, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.square_trait_axes_len"]], "taxa (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeniccovariancematrix.densetwowaydhadditiveprogenygeniccovariancematrix property)": [[831, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.taxa"]], "taxa_axis (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeniccovariancematrix.densetwowaydhadditiveprogenygeniccovariancematrix property)": [[831, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.taxa_axis"]], "taxa_grp (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeniccovariancematrix.densetwowaydhadditiveprogenygeniccovariancematrix property)": [[831, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.taxa_grp"]], "taxa_grp_len (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeniccovariancematrix.densetwowaydhadditiveprogenygeniccovariancematrix property)": [[831, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.taxa_grp_len"]], "taxa_grp_name (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeniccovariancematrix.densetwowaydhadditiveprogenygeniccovariancematrix property)": [[831, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.taxa_grp_name"]], "taxa_grp_spix (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeniccovariancematrix.densetwowaydhadditiveprogenygeniccovariancematrix property)": [[831, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.taxa_grp_spix"]], "taxa_grp_stix (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeniccovariancematrix.densetwowaydhadditiveprogenygeniccovariancematrix property)": [[831, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.taxa_grp_stix"]], "to_csv() (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeniccovariancematrix.densetwowaydhadditiveprogenygeniccovariancematrix method)": [[831, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.to_csv"]], "to_hdf5() (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeniccovariancematrix.densetwowaydhadditiveprogenygeniccovariancematrix method)": [[831, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.to_hdf5"]], "to_pandas() (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeniccovariancematrix.densetwowaydhadditiveprogenygeniccovariancematrix method)": [[831, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.to_pandas"]], "trait (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeniccovariancematrix.densetwowaydhadditiveprogenygeniccovariancematrix property)": [[831, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.trait"]], "trait_axis (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeniccovariancematrix.densetwowaydhadditiveprogenygeniccovariancematrix property)": [[831, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.trait_axis"]], "ungroup() (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeniccovariancematrix.densetwowaydhadditiveprogenygeniccovariancematrix method)": [[831, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.ungroup"]], "ungroup_taxa() (pybrops.model.pcvmat.densetwowaydhadditiveprogenygeniccovariancematrix.densetwowaydhadditiveprogenygeniccovariancematrix method)": [[831, "pybrops.model.pcvmat.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.DenseTwoWayDHAdditiveProgenyGenicCovarianceMatrix.ungroup_taxa"]], "pybrops.model.pcvmat.progenygeneticcovariancematrix": [[832, "module-pybrops.model.pcvmat.ProgenyGeneticCovarianceMatrix"]], "progenygeneticcovariancematrix (class in pybrops.model.pcvmat.progenygeneticcovariancematrix)": [[833, "pybrops.model.pcvmat.ProgenyGeneticCovarianceMatrix.ProgenyGeneticCovarianceMatrix"]], "__add__() (pybrops.model.pcvmat.progenygeneticcovariancematrix.progenygeneticcovariancematrix method)": [[833, "pybrops.model.pcvmat.ProgenyGeneticCovarianceMatrix.ProgenyGeneticCovarianceMatrix.__add__"]], "__mul__() (pybrops.model.pcvmat.progenygeneticcovariancematrix.progenygeneticcovariancematrix method)": [[833, "pybrops.model.pcvmat.ProgenyGeneticCovarianceMatrix.ProgenyGeneticCovarianceMatrix.__mul__"]], "adjoin() (pybrops.model.pcvmat.progenygeneticcovariancematrix.progenygeneticcovariancematrix method)": [[833, "pybrops.model.pcvmat.ProgenyGeneticCovarianceMatrix.ProgenyGeneticCovarianceMatrix.adjoin"]], "adjoin_taxa() (pybrops.model.pcvmat.progenygeneticcovariancematrix.progenygeneticcovariancematrix method)": [[833, "pybrops.model.pcvmat.ProgenyGeneticCovarianceMatrix.ProgenyGeneticCovarianceMatrix.adjoin_taxa"]], "adjoin_trait() (pybrops.model.pcvmat.progenygeneticcovariancematrix.progenygeneticcovariancematrix method)": [[833, "pybrops.model.pcvmat.ProgenyGeneticCovarianceMatrix.ProgenyGeneticCovarianceMatrix.adjoin_trait"]], "append() (pybrops.model.pcvmat.progenygeneticcovariancematrix.progenygeneticcovariancematrix method)": [[833, "pybrops.model.pcvmat.ProgenyGeneticCovarianceMatrix.ProgenyGeneticCovarianceMatrix.append"]], "append_taxa() (pybrops.model.pcvmat.progenygeneticcovariancematrix.progenygeneticcovariancematrix method)": [[833, "pybrops.model.pcvmat.ProgenyGeneticCovarianceMatrix.ProgenyGeneticCovarianceMatrix.append_taxa"]], "append_trait() (pybrops.model.pcvmat.progenygeneticcovariancematrix.progenygeneticcovariancematrix method)": [[833, "pybrops.model.pcvmat.ProgenyGeneticCovarianceMatrix.ProgenyGeneticCovarianceMatrix.append_trait"]], "concat() (pybrops.model.pcvmat.progenygeneticcovariancematrix.progenygeneticcovariancematrix class method)": [[833, "pybrops.model.pcvmat.ProgenyGeneticCovarianceMatrix.ProgenyGeneticCovarianceMatrix.concat"]], "concat_taxa() (pybrops.model.pcvmat.progenygeneticcovariancematrix.progenygeneticcovariancematrix class method)": [[833, "pybrops.model.pcvmat.ProgenyGeneticCovarianceMatrix.ProgenyGeneticCovarianceMatrix.concat_taxa"]], "concat_trait() (pybrops.model.pcvmat.progenygeneticcovariancematrix.progenygeneticcovariancematrix class method)": [[833, "pybrops.model.pcvmat.ProgenyGeneticCovarianceMatrix.ProgenyGeneticCovarianceMatrix.concat_trait"]], "copy() (pybrops.model.pcvmat.progenygeneticcovariancematrix.progenygeneticcovariancematrix method)": [[833, "pybrops.model.pcvmat.ProgenyGeneticCovarianceMatrix.ProgenyGeneticCovarianceMatrix.copy"]], "deepcopy() (pybrops.model.pcvmat.progenygeneticcovariancematrix.progenygeneticcovariancematrix method)": [[833, "pybrops.model.pcvmat.ProgenyGeneticCovarianceMatrix.ProgenyGeneticCovarianceMatrix.deepcopy"]], "delete() (pybrops.model.pcvmat.progenygeneticcovariancematrix.progenygeneticcovariancematrix method)": [[833, "pybrops.model.pcvmat.ProgenyGeneticCovarianceMatrix.ProgenyGeneticCovarianceMatrix.delete"]], "delete_taxa() (pybrops.model.pcvmat.progenygeneticcovariancematrix.progenygeneticcovariancematrix method)": [[833, "pybrops.model.pcvmat.ProgenyGeneticCovarianceMatrix.ProgenyGeneticCovarianceMatrix.delete_taxa"]], "delete_trait() (pybrops.model.pcvmat.progenygeneticcovariancematrix.progenygeneticcovariancematrix method)": [[833, "pybrops.model.pcvmat.ProgenyGeneticCovarianceMatrix.ProgenyGeneticCovarianceMatrix.delete_trait"]], "epgc (pybrops.model.pcvmat.progenygeneticcovariancematrix.progenygeneticcovariancematrix property)": [[833, "pybrops.model.pcvmat.ProgenyGeneticCovarianceMatrix.ProgenyGeneticCovarianceMatrix.epgc"]], "from_csv() (pybrops.model.pcvmat.progenygeneticcovariancematrix.progenygeneticcovariancematrix class method)": [[833, "pybrops.model.pcvmat.ProgenyGeneticCovarianceMatrix.ProgenyGeneticCovarianceMatrix.from_csv"]], "from_gmod() (pybrops.model.pcvmat.progenygeneticcovariancematrix.progenygeneticcovariancematrix class method)": [[833, "pybrops.model.pcvmat.ProgenyGeneticCovarianceMatrix.ProgenyGeneticCovarianceMatrix.from_gmod"]], "from_hdf5() (pybrops.model.pcvmat.progenygeneticcovariancematrix.progenygeneticcovariancematrix class method)": [[833, "pybrops.model.pcvmat.ProgenyGeneticCovarianceMatrix.ProgenyGeneticCovarianceMatrix.from_hdf5"]], "from_pandas() (pybrops.model.pcvmat.progenygeneticcovariancematrix.progenygeneticcovariancematrix class method)": [[833, "pybrops.model.pcvmat.ProgenyGeneticCovarianceMatrix.ProgenyGeneticCovarianceMatrix.from_pandas"]], "group() (pybrops.model.pcvmat.progenygeneticcovariancematrix.progenygeneticcovariancematrix method)": [[833, "pybrops.model.pcvmat.ProgenyGeneticCovarianceMatrix.ProgenyGeneticCovarianceMatrix.group"]], "group_taxa() (pybrops.model.pcvmat.progenygeneticcovariancematrix.progenygeneticcovariancematrix method)": [[833, "pybrops.model.pcvmat.ProgenyGeneticCovarianceMatrix.ProgenyGeneticCovarianceMatrix.group_taxa"]], "incorp() (pybrops.model.pcvmat.progenygeneticcovariancematrix.progenygeneticcovariancematrix method)": [[833, "pybrops.model.pcvmat.ProgenyGeneticCovarianceMatrix.ProgenyGeneticCovarianceMatrix.incorp"]], "incorp_taxa() (pybrops.model.pcvmat.progenygeneticcovariancematrix.progenygeneticcovariancematrix method)": [[833, "pybrops.model.pcvmat.ProgenyGeneticCovarianceMatrix.ProgenyGeneticCovarianceMatrix.incorp_taxa"]], "incorp_trait() (pybrops.model.pcvmat.progenygeneticcovariancematrix.progenygeneticcovariancematrix method)": [[833, "pybrops.model.pcvmat.ProgenyGeneticCovarianceMatrix.ProgenyGeneticCovarianceMatrix.incorp_trait"]], "insert() (pybrops.model.pcvmat.progenygeneticcovariancematrix.progenygeneticcovariancematrix method)": [[833, "pybrops.model.pcvmat.ProgenyGeneticCovarianceMatrix.ProgenyGeneticCovarianceMatrix.insert"]], "insert_taxa() (pybrops.model.pcvmat.progenygeneticcovariancematrix.progenygeneticcovariancematrix method)": [[833, "pybrops.model.pcvmat.ProgenyGeneticCovarianceMatrix.ProgenyGeneticCovarianceMatrix.insert_taxa"]], "insert_trait() (pybrops.model.pcvmat.progenygeneticcovariancematrix.progenygeneticcovariancematrix method)": [[833, "pybrops.model.pcvmat.ProgenyGeneticCovarianceMatrix.ProgenyGeneticCovarianceMatrix.insert_trait"]], "is_grouped() (pybrops.model.pcvmat.progenygeneticcovariancematrix.progenygeneticcovariancematrix method)": [[833, "pybrops.model.pcvmat.ProgenyGeneticCovarianceMatrix.ProgenyGeneticCovarianceMatrix.is_grouped"]], "is_grouped_taxa() (pybrops.model.pcvmat.progenygeneticcovariancematrix.progenygeneticcovariancematrix method)": [[833, "pybrops.model.pcvmat.ProgenyGeneticCovarianceMatrix.ProgenyGeneticCovarianceMatrix.is_grouped_taxa"]], "is_square() (pybrops.model.pcvmat.progenygeneticcovariancematrix.progenygeneticcovariancematrix method)": [[833, "pybrops.model.pcvmat.ProgenyGeneticCovarianceMatrix.ProgenyGeneticCovarianceMatrix.is_square"]], "is_square_taxa() (pybrops.model.pcvmat.progenygeneticcovariancematrix.progenygeneticcovariancematrix method)": [[833, "pybrops.model.pcvmat.ProgenyGeneticCovarianceMatrix.ProgenyGeneticCovarianceMatrix.is_square_taxa"]], "is_square_trait() (pybrops.model.pcvmat.progenygeneticcovariancematrix.progenygeneticcovariancematrix method)": [[833, "pybrops.model.pcvmat.ProgenyGeneticCovarianceMatrix.ProgenyGeneticCovarianceMatrix.is_square_trait"]], "lexsort() (pybrops.model.pcvmat.progenygeneticcovariancematrix.progenygeneticcovariancematrix method)": [[833, "pybrops.model.pcvmat.ProgenyGeneticCovarianceMatrix.ProgenyGeneticCovarianceMatrix.lexsort"]], "lexsort_taxa() (pybrops.model.pcvmat.progenygeneticcovariancematrix.progenygeneticcovariancematrix method)": [[833, "pybrops.model.pcvmat.ProgenyGeneticCovarianceMatrix.ProgenyGeneticCovarianceMatrix.lexsort_taxa"]], "lexsort_trait() (pybrops.model.pcvmat.progenygeneticcovariancematrix.progenygeneticcovariancematrix method)": [[833, "pybrops.model.pcvmat.ProgenyGeneticCovarianceMatrix.ProgenyGeneticCovarianceMatrix.lexsort_trait"]], "mat (pybrops.model.pcvmat.progenygeneticcovariancematrix.progenygeneticcovariancematrix property)": [[833, "pybrops.model.pcvmat.ProgenyGeneticCovarianceMatrix.ProgenyGeneticCovarianceMatrix.mat"]], "mat_ndim (pybrops.model.pcvmat.progenygeneticcovariancematrix.progenygeneticcovariancematrix property)": [[833, "pybrops.model.pcvmat.ProgenyGeneticCovarianceMatrix.ProgenyGeneticCovarianceMatrix.mat_ndim"]], "mat_shape (pybrops.model.pcvmat.progenygeneticcovariancematrix.progenygeneticcovariancematrix property)": [[833, "pybrops.model.pcvmat.ProgenyGeneticCovarianceMatrix.ProgenyGeneticCovarianceMatrix.mat_shape"]], "nsquare (pybrops.model.pcvmat.progenygeneticcovariancematrix.progenygeneticcovariancematrix property)": [[833, "pybrops.model.pcvmat.ProgenyGeneticCovarianceMatrix.ProgenyGeneticCovarianceMatrix.nsquare"]], "nsquare_taxa (pybrops.model.pcvmat.progenygeneticcovariancematrix.progenygeneticcovariancematrix property)": [[833, "pybrops.model.pcvmat.ProgenyGeneticCovarianceMatrix.ProgenyGeneticCovarianceMatrix.nsquare_taxa"]], "nsquare_trait (pybrops.model.pcvmat.progenygeneticcovariancematrix.progenygeneticcovariancematrix property)": [[833, "pybrops.model.pcvmat.ProgenyGeneticCovarianceMatrix.ProgenyGeneticCovarianceMatrix.nsquare_trait"]], "ntaxa (pybrops.model.pcvmat.progenygeneticcovariancematrix.progenygeneticcovariancematrix property)": [[833, "pybrops.model.pcvmat.ProgenyGeneticCovarianceMatrix.ProgenyGeneticCovarianceMatrix.ntaxa"]], "ntrait (pybrops.model.pcvmat.progenygeneticcovariancematrix.progenygeneticcovariancematrix property)": [[833, "pybrops.model.pcvmat.ProgenyGeneticCovarianceMatrix.ProgenyGeneticCovarianceMatrix.ntrait"]], "remove() (pybrops.model.pcvmat.progenygeneticcovariancematrix.progenygeneticcovariancematrix method)": [[833, "pybrops.model.pcvmat.ProgenyGeneticCovarianceMatrix.ProgenyGeneticCovarianceMatrix.remove"]], "remove_taxa() (pybrops.model.pcvmat.progenygeneticcovariancematrix.progenygeneticcovariancematrix method)": [[833, "pybrops.model.pcvmat.ProgenyGeneticCovarianceMatrix.ProgenyGeneticCovarianceMatrix.remove_taxa"]], "remove_trait() (pybrops.model.pcvmat.progenygeneticcovariancematrix.progenygeneticcovariancematrix method)": [[833, "pybrops.model.pcvmat.ProgenyGeneticCovarianceMatrix.ProgenyGeneticCovarianceMatrix.remove_trait"]], "reorder() (pybrops.model.pcvmat.progenygeneticcovariancematrix.progenygeneticcovariancematrix method)": [[833, "pybrops.model.pcvmat.ProgenyGeneticCovarianceMatrix.ProgenyGeneticCovarianceMatrix.reorder"]], "reorder_taxa() (pybrops.model.pcvmat.progenygeneticcovariancematrix.progenygeneticcovariancematrix method)": [[833, "pybrops.model.pcvmat.ProgenyGeneticCovarianceMatrix.ProgenyGeneticCovarianceMatrix.reorder_taxa"]], "reorder_trait() (pybrops.model.pcvmat.progenygeneticcovariancematrix.progenygeneticcovariancematrix method)": [[833, "pybrops.model.pcvmat.ProgenyGeneticCovarianceMatrix.ProgenyGeneticCovarianceMatrix.reorder_trait"]], "select() (pybrops.model.pcvmat.progenygeneticcovariancematrix.progenygeneticcovariancematrix method)": [[833, "pybrops.model.pcvmat.ProgenyGeneticCovarianceMatrix.ProgenyGeneticCovarianceMatrix.select"]], "select_taxa() (pybrops.model.pcvmat.progenygeneticcovariancematrix.progenygeneticcovariancematrix method)": [[833, "pybrops.model.pcvmat.ProgenyGeneticCovarianceMatrix.ProgenyGeneticCovarianceMatrix.select_taxa"]], "select_trait() (pybrops.model.pcvmat.progenygeneticcovariancematrix.progenygeneticcovariancematrix method)": [[833, "pybrops.model.pcvmat.ProgenyGeneticCovarianceMatrix.ProgenyGeneticCovarianceMatrix.select_trait"]], "sort() (pybrops.model.pcvmat.progenygeneticcovariancematrix.progenygeneticcovariancematrix method)": [[833, "pybrops.model.pcvmat.ProgenyGeneticCovarianceMatrix.ProgenyGeneticCovarianceMatrix.sort"]], "sort_taxa() (pybrops.model.pcvmat.progenygeneticcovariancematrix.progenygeneticcovariancematrix method)": [[833, "pybrops.model.pcvmat.ProgenyGeneticCovarianceMatrix.ProgenyGeneticCovarianceMatrix.sort_taxa"]], "sort_trait() (pybrops.model.pcvmat.progenygeneticcovariancematrix.progenygeneticcovariancematrix method)": [[833, "pybrops.model.pcvmat.ProgenyGeneticCovarianceMatrix.ProgenyGeneticCovarianceMatrix.sort_trait"]], "square_axes (pybrops.model.pcvmat.progenygeneticcovariancematrix.progenygeneticcovariancematrix property)": [[833, "pybrops.model.pcvmat.ProgenyGeneticCovarianceMatrix.ProgenyGeneticCovarianceMatrix.square_axes"]], "square_axes_len (pybrops.model.pcvmat.progenygeneticcovariancematrix.progenygeneticcovariancematrix property)": [[833, "pybrops.model.pcvmat.ProgenyGeneticCovarianceMatrix.ProgenyGeneticCovarianceMatrix.square_axes_len"]], "square_taxa_axes (pybrops.model.pcvmat.progenygeneticcovariancematrix.progenygeneticcovariancematrix property)": [[833, "pybrops.model.pcvmat.ProgenyGeneticCovarianceMatrix.ProgenyGeneticCovarianceMatrix.square_taxa_axes"]], "square_taxa_axes_len (pybrops.model.pcvmat.progenygeneticcovariancematrix.progenygeneticcovariancematrix property)": [[833, "pybrops.model.pcvmat.ProgenyGeneticCovarianceMatrix.ProgenyGeneticCovarianceMatrix.square_taxa_axes_len"]], "square_trait_axes (pybrops.model.pcvmat.progenygeneticcovariancematrix.progenygeneticcovariancematrix property)": [[833, "pybrops.model.pcvmat.ProgenyGeneticCovarianceMatrix.ProgenyGeneticCovarianceMatrix.square_trait_axes"]], "square_trait_axes_len (pybrops.model.pcvmat.progenygeneticcovariancematrix.progenygeneticcovariancematrix property)": [[833, "pybrops.model.pcvmat.ProgenyGeneticCovarianceMatrix.ProgenyGeneticCovarianceMatrix.square_trait_axes_len"]], "taxa (pybrops.model.pcvmat.progenygeneticcovariancematrix.progenygeneticcovariancematrix property)": [[833, "pybrops.model.pcvmat.ProgenyGeneticCovarianceMatrix.ProgenyGeneticCovarianceMatrix.taxa"]], "taxa_axis (pybrops.model.pcvmat.progenygeneticcovariancematrix.progenygeneticcovariancematrix property)": [[833, "pybrops.model.pcvmat.ProgenyGeneticCovarianceMatrix.ProgenyGeneticCovarianceMatrix.taxa_axis"]], "taxa_grp (pybrops.model.pcvmat.progenygeneticcovariancematrix.progenygeneticcovariancematrix property)": [[833, "pybrops.model.pcvmat.ProgenyGeneticCovarianceMatrix.ProgenyGeneticCovarianceMatrix.taxa_grp"]], "taxa_grp_len (pybrops.model.pcvmat.progenygeneticcovariancematrix.progenygeneticcovariancematrix property)": [[833, "pybrops.model.pcvmat.ProgenyGeneticCovarianceMatrix.ProgenyGeneticCovarianceMatrix.taxa_grp_len"]], "taxa_grp_name (pybrops.model.pcvmat.progenygeneticcovariancematrix.progenygeneticcovariancematrix property)": [[833, "pybrops.model.pcvmat.ProgenyGeneticCovarianceMatrix.ProgenyGeneticCovarianceMatrix.taxa_grp_name"]], "taxa_grp_spix (pybrops.model.pcvmat.progenygeneticcovariancematrix.progenygeneticcovariancematrix property)": [[833, "pybrops.model.pcvmat.ProgenyGeneticCovarianceMatrix.ProgenyGeneticCovarianceMatrix.taxa_grp_spix"]], "taxa_grp_stix (pybrops.model.pcvmat.progenygeneticcovariancematrix.progenygeneticcovariancematrix property)": [[833, "pybrops.model.pcvmat.ProgenyGeneticCovarianceMatrix.ProgenyGeneticCovarianceMatrix.taxa_grp_stix"]], "to_csv() (pybrops.model.pcvmat.progenygeneticcovariancematrix.progenygeneticcovariancematrix method)": [[833, "pybrops.model.pcvmat.ProgenyGeneticCovarianceMatrix.ProgenyGeneticCovarianceMatrix.to_csv"]], "to_hdf5() (pybrops.model.pcvmat.progenygeneticcovariancematrix.progenygeneticcovariancematrix method)": [[833, "pybrops.model.pcvmat.ProgenyGeneticCovarianceMatrix.ProgenyGeneticCovarianceMatrix.to_hdf5"]], "to_pandas() (pybrops.model.pcvmat.progenygeneticcovariancematrix.progenygeneticcovariancematrix method)": [[833, "pybrops.model.pcvmat.ProgenyGeneticCovarianceMatrix.ProgenyGeneticCovarianceMatrix.to_pandas"]], "trait (pybrops.model.pcvmat.progenygeneticcovariancematrix.progenygeneticcovariancematrix property)": [[833, "pybrops.model.pcvmat.ProgenyGeneticCovarianceMatrix.ProgenyGeneticCovarianceMatrix.trait"]], "trait_axis (pybrops.model.pcvmat.progenygeneticcovariancematrix.progenygeneticcovariancematrix property)": [[833, "pybrops.model.pcvmat.ProgenyGeneticCovarianceMatrix.ProgenyGeneticCovarianceMatrix.trait_axis"]], "ungroup() (pybrops.model.pcvmat.progenygeneticcovariancematrix.progenygeneticcovariancematrix method)": [[833, "pybrops.model.pcvmat.ProgenyGeneticCovarianceMatrix.ProgenyGeneticCovarianceMatrix.ungroup"]], "ungroup_taxa() (pybrops.model.pcvmat.progenygeneticcovariancematrix.progenygeneticcovariancematrix method)": [[833, "pybrops.model.pcvmat.ProgenyGeneticCovarianceMatrix.ProgenyGeneticCovarianceMatrix.ungroup_taxa"]], "check_is_progenygeneticcovariancematrix() (in module pybrops.model.pcvmat.progenygeneticcovariancematrix)": [[834, "pybrops.model.pcvmat.ProgenyGeneticCovarianceMatrix.check_is_ProgenyGeneticCovarianceMatrix"]], "pybrops.model.pcvmat.progenygeniccovariancematrix": [[835, "module-pybrops.model.pcvmat.ProgenyGenicCovarianceMatrix"]], "progenygeniccovariancematrix (class in pybrops.model.pcvmat.progenygeniccovariancematrix)": [[836, "pybrops.model.pcvmat.ProgenyGenicCovarianceMatrix.ProgenyGenicCovarianceMatrix"]], "__add__() (pybrops.model.pcvmat.progenygeniccovariancematrix.progenygeniccovariancematrix method)": [[836, "pybrops.model.pcvmat.ProgenyGenicCovarianceMatrix.ProgenyGenicCovarianceMatrix.__add__"]], "__mul__() (pybrops.model.pcvmat.progenygeniccovariancematrix.progenygeniccovariancematrix method)": [[836, "pybrops.model.pcvmat.ProgenyGenicCovarianceMatrix.ProgenyGenicCovarianceMatrix.__mul__"]], "adjoin() (pybrops.model.pcvmat.progenygeniccovariancematrix.progenygeniccovariancematrix method)": [[836, "pybrops.model.pcvmat.ProgenyGenicCovarianceMatrix.ProgenyGenicCovarianceMatrix.adjoin"]], "adjoin_taxa() (pybrops.model.pcvmat.progenygeniccovariancematrix.progenygeniccovariancematrix method)": [[836, "pybrops.model.pcvmat.ProgenyGenicCovarianceMatrix.ProgenyGenicCovarianceMatrix.adjoin_taxa"]], "adjoin_trait() (pybrops.model.pcvmat.progenygeniccovariancematrix.progenygeniccovariancematrix method)": [[836, "pybrops.model.pcvmat.ProgenyGenicCovarianceMatrix.ProgenyGenicCovarianceMatrix.adjoin_trait"]], "append() (pybrops.model.pcvmat.progenygeniccovariancematrix.progenygeniccovariancematrix method)": [[836, "pybrops.model.pcvmat.ProgenyGenicCovarianceMatrix.ProgenyGenicCovarianceMatrix.append"]], "append_taxa() (pybrops.model.pcvmat.progenygeniccovariancematrix.progenygeniccovariancematrix method)": [[836, "pybrops.model.pcvmat.ProgenyGenicCovarianceMatrix.ProgenyGenicCovarianceMatrix.append_taxa"]], "append_trait() (pybrops.model.pcvmat.progenygeniccovariancematrix.progenygeniccovariancematrix method)": [[836, "pybrops.model.pcvmat.ProgenyGenicCovarianceMatrix.ProgenyGenicCovarianceMatrix.append_trait"]], "concat() (pybrops.model.pcvmat.progenygeniccovariancematrix.progenygeniccovariancematrix class method)": [[836, "pybrops.model.pcvmat.ProgenyGenicCovarianceMatrix.ProgenyGenicCovarianceMatrix.concat"]], "concat_taxa() (pybrops.model.pcvmat.progenygeniccovariancematrix.progenygeniccovariancematrix class method)": [[836, "pybrops.model.pcvmat.ProgenyGenicCovarianceMatrix.ProgenyGenicCovarianceMatrix.concat_taxa"]], "concat_trait() (pybrops.model.pcvmat.progenygeniccovariancematrix.progenygeniccovariancematrix class method)": [[836, "pybrops.model.pcvmat.ProgenyGenicCovarianceMatrix.ProgenyGenicCovarianceMatrix.concat_trait"]], "copy() (pybrops.model.pcvmat.progenygeniccovariancematrix.progenygeniccovariancematrix method)": [[836, "pybrops.model.pcvmat.ProgenyGenicCovarianceMatrix.ProgenyGenicCovarianceMatrix.copy"]], "deepcopy() (pybrops.model.pcvmat.progenygeniccovariancematrix.progenygeniccovariancematrix method)": [[836, "pybrops.model.pcvmat.ProgenyGenicCovarianceMatrix.ProgenyGenicCovarianceMatrix.deepcopy"]], "delete() (pybrops.model.pcvmat.progenygeniccovariancematrix.progenygeniccovariancematrix method)": [[836, "pybrops.model.pcvmat.ProgenyGenicCovarianceMatrix.ProgenyGenicCovarianceMatrix.delete"]], "delete_taxa() (pybrops.model.pcvmat.progenygeniccovariancematrix.progenygeniccovariancematrix method)": [[836, "pybrops.model.pcvmat.ProgenyGenicCovarianceMatrix.ProgenyGenicCovarianceMatrix.delete_taxa"]], "delete_trait() (pybrops.model.pcvmat.progenygeniccovariancematrix.progenygeniccovariancematrix method)": [[836, "pybrops.model.pcvmat.ProgenyGenicCovarianceMatrix.ProgenyGenicCovarianceMatrix.delete_trait"]], "epgc (pybrops.model.pcvmat.progenygeniccovariancematrix.progenygeniccovariancematrix property)": [[836, "pybrops.model.pcvmat.ProgenyGenicCovarianceMatrix.ProgenyGenicCovarianceMatrix.epgc"]], "from_csv() (pybrops.model.pcvmat.progenygeniccovariancematrix.progenygeniccovariancematrix class method)": [[836, "pybrops.model.pcvmat.ProgenyGenicCovarianceMatrix.ProgenyGenicCovarianceMatrix.from_csv"]], "from_gmod() (pybrops.model.pcvmat.progenygeniccovariancematrix.progenygeniccovariancematrix class method)": [[836, "pybrops.model.pcvmat.ProgenyGenicCovarianceMatrix.ProgenyGenicCovarianceMatrix.from_gmod"]], "from_hdf5() (pybrops.model.pcvmat.progenygeniccovariancematrix.progenygeniccovariancematrix class method)": [[836, "pybrops.model.pcvmat.ProgenyGenicCovarianceMatrix.ProgenyGenicCovarianceMatrix.from_hdf5"]], "from_pandas() (pybrops.model.pcvmat.progenygeniccovariancematrix.progenygeniccovariancematrix class method)": [[836, "pybrops.model.pcvmat.ProgenyGenicCovarianceMatrix.ProgenyGenicCovarianceMatrix.from_pandas"]], "group() (pybrops.model.pcvmat.progenygeniccovariancematrix.progenygeniccovariancematrix method)": [[836, "pybrops.model.pcvmat.ProgenyGenicCovarianceMatrix.ProgenyGenicCovarianceMatrix.group"]], "group_taxa() (pybrops.model.pcvmat.progenygeniccovariancematrix.progenygeniccovariancematrix method)": [[836, "pybrops.model.pcvmat.ProgenyGenicCovarianceMatrix.ProgenyGenicCovarianceMatrix.group_taxa"]], "incorp() (pybrops.model.pcvmat.progenygeniccovariancematrix.progenygeniccovariancematrix method)": [[836, "pybrops.model.pcvmat.ProgenyGenicCovarianceMatrix.ProgenyGenicCovarianceMatrix.incorp"]], "incorp_taxa() (pybrops.model.pcvmat.progenygeniccovariancematrix.progenygeniccovariancematrix method)": [[836, "pybrops.model.pcvmat.ProgenyGenicCovarianceMatrix.ProgenyGenicCovarianceMatrix.incorp_taxa"]], "incorp_trait() (pybrops.model.pcvmat.progenygeniccovariancematrix.progenygeniccovariancematrix method)": [[836, "pybrops.model.pcvmat.ProgenyGenicCovarianceMatrix.ProgenyGenicCovarianceMatrix.incorp_trait"]], "insert() (pybrops.model.pcvmat.progenygeniccovariancematrix.progenygeniccovariancematrix method)": [[836, "pybrops.model.pcvmat.ProgenyGenicCovarianceMatrix.ProgenyGenicCovarianceMatrix.insert"]], "insert_taxa() (pybrops.model.pcvmat.progenygeniccovariancematrix.progenygeniccovariancematrix method)": [[836, "pybrops.model.pcvmat.ProgenyGenicCovarianceMatrix.ProgenyGenicCovarianceMatrix.insert_taxa"]], "insert_trait() (pybrops.model.pcvmat.progenygeniccovariancematrix.progenygeniccovariancematrix method)": [[836, "pybrops.model.pcvmat.ProgenyGenicCovarianceMatrix.ProgenyGenicCovarianceMatrix.insert_trait"]], "is_grouped() (pybrops.model.pcvmat.progenygeniccovariancematrix.progenygeniccovariancematrix method)": [[836, "pybrops.model.pcvmat.ProgenyGenicCovarianceMatrix.ProgenyGenicCovarianceMatrix.is_grouped"]], "is_grouped_taxa() (pybrops.model.pcvmat.progenygeniccovariancematrix.progenygeniccovariancematrix method)": [[836, "pybrops.model.pcvmat.ProgenyGenicCovarianceMatrix.ProgenyGenicCovarianceMatrix.is_grouped_taxa"]], "is_square() (pybrops.model.pcvmat.progenygeniccovariancematrix.progenygeniccovariancematrix method)": [[836, "pybrops.model.pcvmat.ProgenyGenicCovarianceMatrix.ProgenyGenicCovarianceMatrix.is_square"]], "is_square_taxa() (pybrops.model.pcvmat.progenygeniccovariancematrix.progenygeniccovariancematrix method)": [[836, "pybrops.model.pcvmat.ProgenyGenicCovarianceMatrix.ProgenyGenicCovarianceMatrix.is_square_taxa"]], "is_square_trait() (pybrops.model.pcvmat.progenygeniccovariancematrix.progenygeniccovariancematrix method)": [[836, "pybrops.model.pcvmat.ProgenyGenicCovarianceMatrix.ProgenyGenicCovarianceMatrix.is_square_trait"]], "lexsort() (pybrops.model.pcvmat.progenygeniccovariancematrix.progenygeniccovariancematrix method)": [[836, "pybrops.model.pcvmat.ProgenyGenicCovarianceMatrix.ProgenyGenicCovarianceMatrix.lexsort"]], "lexsort_taxa() (pybrops.model.pcvmat.progenygeniccovariancematrix.progenygeniccovariancematrix method)": [[836, "pybrops.model.pcvmat.ProgenyGenicCovarianceMatrix.ProgenyGenicCovarianceMatrix.lexsort_taxa"]], "lexsort_trait() (pybrops.model.pcvmat.progenygeniccovariancematrix.progenygeniccovariancematrix method)": [[836, "pybrops.model.pcvmat.ProgenyGenicCovarianceMatrix.ProgenyGenicCovarianceMatrix.lexsort_trait"]], "mat (pybrops.model.pcvmat.progenygeniccovariancematrix.progenygeniccovariancematrix property)": [[836, "pybrops.model.pcvmat.ProgenyGenicCovarianceMatrix.ProgenyGenicCovarianceMatrix.mat"]], "mat_ndim (pybrops.model.pcvmat.progenygeniccovariancematrix.progenygeniccovariancematrix property)": [[836, "pybrops.model.pcvmat.ProgenyGenicCovarianceMatrix.ProgenyGenicCovarianceMatrix.mat_ndim"]], "mat_shape (pybrops.model.pcvmat.progenygeniccovariancematrix.progenygeniccovariancematrix property)": [[836, "pybrops.model.pcvmat.ProgenyGenicCovarianceMatrix.ProgenyGenicCovarianceMatrix.mat_shape"]], "nsquare (pybrops.model.pcvmat.progenygeniccovariancematrix.progenygeniccovariancematrix property)": [[836, "pybrops.model.pcvmat.ProgenyGenicCovarianceMatrix.ProgenyGenicCovarianceMatrix.nsquare"]], "nsquare_taxa (pybrops.model.pcvmat.progenygeniccovariancematrix.progenygeniccovariancematrix property)": [[836, "pybrops.model.pcvmat.ProgenyGenicCovarianceMatrix.ProgenyGenicCovarianceMatrix.nsquare_taxa"]], "nsquare_trait (pybrops.model.pcvmat.progenygeniccovariancematrix.progenygeniccovariancematrix property)": [[836, "pybrops.model.pcvmat.ProgenyGenicCovarianceMatrix.ProgenyGenicCovarianceMatrix.nsquare_trait"]], "ntaxa (pybrops.model.pcvmat.progenygeniccovariancematrix.progenygeniccovariancematrix property)": [[836, "pybrops.model.pcvmat.ProgenyGenicCovarianceMatrix.ProgenyGenicCovarianceMatrix.ntaxa"]], "ntrait (pybrops.model.pcvmat.progenygeniccovariancematrix.progenygeniccovariancematrix property)": [[836, "pybrops.model.pcvmat.ProgenyGenicCovarianceMatrix.ProgenyGenicCovarianceMatrix.ntrait"]], "remove() (pybrops.model.pcvmat.progenygeniccovariancematrix.progenygeniccovariancematrix method)": [[836, "pybrops.model.pcvmat.ProgenyGenicCovarianceMatrix.ProgenyGenicCovarianceMatrix.remove"]], "remove_taxa() (pybrops.model.pcvmat.progenygeniccovariancematrix.progenygeniccovariancematrix method)": [[836, "pybrops.model.pcvmat.ProgenyGenicCovarianceMatrix.ProgenyGenicCovarianceMatrix.remove_taxa"]], "remove_trait() (pybrops.model.pcvmat.progenygeniccovariancematrix.progenygeniccovariancematrix method)": [[836, "pybrops.model.pcvmat.ProgenyGenicCovarianceMatrix.ProgenyGenicCovarianceMatrix.remove_trait"]], "reorder() (pybrops.model.pcvmat.progenygeniccovariancematrix.progenygeniccovariancematrix method)": [[836, "pybrops.model.pcvmat.ProgenyGenicCovarianceMatrix.ProgenyGenicCovarianceMatrix.reorder"]], "reorder_taxa() (pybrops.model.pcvmat.progenygeniccovariancematrix.progenygeniccovariancematrix method)": [[836, "pybrops.model.pcvmat.ProgenyGenicCovarianceMatrix.ProgenyGenicCovarianceMatrix.reorder_taxa"]], "reorder_trait() (pybrops.model.pcvmat.progenygeniccovariancematrix.progenygeniccovariancematrix method)": [[836, "pybrops.model.pcvmat.ProgenyGenicCovarianceMatrix.ProgenyGenicCovarianceMatrix.reorder_trait"]], "select() (pybrops.model.pcvmat.progenygeniccovariancematrix.progenygeniccovariancematrix method)": [[836, "pybrops.model.pcvmat.ProgenyGenicCovarianceMatrix.ProgenyGenicCovarianceMatrix.select"]], "select_taxa() (pybrops.model.pcvmat.progenygeniccovariancematrix.progenygeniccovariancematrix method)": [[836, "pybrops.model.pcvmat.ProgenyGenicCovarianceMatrix.ProgenyGenicCovarianceMatrix.select_taxa"]], "select_trait() (pybrops.model.pcvmat.progenygeniccovariancematrix.progenygeniccovariancematrix method)": [[836, "pybrops.model.pcvmat.ProgenyGenicCovarianceMatrix.ProgenyGenicCovarianceMatrix.select_trait"]], "sort() (pybrops.model.pcvmat.progenygeniccovariancematrix.progenygeniccovariancematrix method)": [[836, "pybrops.model.pcvmat.ProgenyGenicCovarianceMatrix.ProgenyGenicCovarianceMatrix.sort"]], "sort_taxa() (pybrops.model.pcvmat.progenygeniccovariancematrix.progenygeniccovariancematrix method)": [[836, "pybrops.model.pcvmat.ProgenyGenicCovarianceMatrix.ProgenyGenicCovarianceMatrix.sort_taxa"]], "sort_trait() (pybrops.model.pcvmat.progenygeniccovariancematrix.progenygeniccovariancematrix method)": [[836, "pybrops.model.pcvmat.ProgenyGenicCovarianceMatrix.ProgenyGenicCovarianceMatrix.sort_trait"]], "square_axes (pybrops.model.pcvmat.progenygeniccovariancematrix.progenygeniccovariancematrix property)": [[836, "pybrops.model.pcvmat.ProgenyGenicCovarianceMatrix.ProgenyGenicCovarianceMatrix.square_axes"]], "square_axes_len (pybrops.model.pcvmat.progenygeniccovariancematrix.progenygeniccovariancematrix property)": [[836, "pybrops.model.pcvmat.ProgenyGenicCovarianceMatrix.ProgenyGenicCovarianceMatrix.square_axes_len"]], "square_taxa_axes (pybrops.model.pcvmat.progenygeniccovariancematrix.progenygeniccovariancematrix property)": [[836, "pybrops.model.pcvmat.ProgenyGenicCovarianceMatrix.ProgenyGenicCovarianceMatrix.square_taxa_axes"]], "square_taxa_axes_len (pybrops.model.pcvmat.progenygeniccovariancematrix.progenygeniccovariancematrix property)": [[836, "pybrops.model.pcvmat.ProgenyGenicCovarianceMatrix.ProgenyGenicCovarianceMatrix.square_taxa_axes_len"]], "square_trait_axes (pybrops.model.pcvmat.progenygeniccovariancematrix.progenygeniccovariancematrix property)": [[836, "pybrops.model.pcvmat.ProgenyGenicCovarianceMatrix.ProgenyGenicCovarianceMatrix.square_trait_axes"]], "square_trait_axes_len (pybrops.model.pcvmat.progenygeniccovariancematrix.progenygeniccovariancematrix property)": [[836, "pybrops.model.pcvmat.ProgenyGenicCovarianceMatrix.ProgenyGenicCovarianceMatrix.square_trait_axes_len"]], "taxa (pybrops.model.pcvmat.progenygeniccovariancematrix.progenygeniccovariancematrix property)": [[836, "pybrops.model.pcvmat.ProgenyGenicCovarianceMatrix.ProgenyGenicCovarianceMatrix.taxa"]], "taxa_axis (pybrops.model.pcvmat.progenygeniccovariancematrix.progenygeniccovariancematrix property)": [[836, "pybrops.model.pcvmat.ProgenyGenicCovarianceMatrix.ProgenyGenicCovarianceMatrix.taxa_axis"]], "taxa_grp (pybrops.model.pcvmat.progenygeniccovariancematrix.progenygeniccovariancematrix property)": [[836, "pybrops.model.pcvmat.ProgenyGenicCovarianceMatrix.ProgenyGenicCovarianceMatrix.taxa_grp"]], "taxa_grp_len (pybrops.model.pcvmat.progenygeniccovariancematrix.progenygeniccovariancematrix property)": [[836, "pybrops.model.pcvmat.ProgenyGenicCovarianceMatrix.ProgenyGenicCovarianceMatrix.taxa_grp_len"]], "taxa_grp_name (pybrops.model.pcvmat.progenygeniccovariancematrix.progenygeniccovariancematrix property)": [[836, "pybrops.model.pcvmat.ProgenyGenicCovarianceMatrix.ProgenyGenicCovarianceMatrix.taxa_grp_name"]], "taxa_grp_spix (pybrops.model.pcvmat.progenygeniccovariancematrix.progenygeniccovariancematrix property)": [[836, "pybrops.model.pcvmat.ProgenyGenicCovarianceMatrix.ProgenyGenicCovarianceMatrix.taxa_grp_spix"]], "taxa_grp_stix (pybrops.model.pcvmat.progenygeniccovariancematrix.progenygeniccovariancematrix property)": [[836, "pybrops.model.pcvmat.ProgenyGenicCovarianceMatrix.ProgenyGenicCovarianceMatrix.taxa_grp_stix"]], "to_csv() (pybrops.model.pcvmat.progenygeniccovariancematrix.progenygeniccovariancematrix method)": [[836, "pybrops.model.pcvmat.ProgenyGenicCovarianceMatrix.ProgenyGenicCovarianceMatrix.to_csv"]], "to_hdf5() (pybrops.model.pcvmat.progenygeniccovariancematrix.progenygeniccovariancematrix method)": [[836, "pybrops.model.pcvmat.ProgenyGenicCovarianceMatrix.ProgenyGenicCovarianceMatrix.to_hdf5"]], "to_pandas() (pybrops.model.pcvmat.progenygeniccovariancematrix.progenygeniccovariancematrix method)": [[836, "pybrops.model.pcvmat.ProgenyGenicCovarianceMatrix.ProgenyGenicCovarianceMatrix.to_pandas"]], "trait (pybrops.model.pcvmat.progenygeniccovariancematrix.progenygeniccovariancematrix property)": [[836, "pybrops.model.pcvmat.ProgenyGenicCovarianceMatrix.ProgenyGenicCovarianceMatrix.trait"]], "trait_axis (pybrops.model.pcvmat.progenygeniccovariancematrix.progenygeniccovariancematrix property)": [[836, "pybrops.model.pcvmat.ProgenyGenicCovarianceMatrix.ProgenyGenicCovarianceMatrix.trait_axis"]], "ungroup() (pybrops.model.pcvmat.progenygeniccovariancematrix.progenygeniccovariancematrix method)": [[836, "pybrops.model.pcvmat.ProgenyGenicCovarianceMatrix.ProgenyGenicCovarianceMatrix.ungroup"]], "ungroup_taxa() (pybrops.model.pcvmat.progenygeniccovariancematrix.progenygeniccovariancematrix method)": [[836, "pybrops.model.pcvmat.ProgenyGenicCovarianceMatrix.ProgenyGenicCovarianceMatrix.ungroup_taxa"]], "check_is_progenygeniccovariancematrix() (in module pybrops.model.pcvmat.progenygeniccovariancematrix)": [[837, "pybrops.model.pcvmat.ProgenyGenicCovarianceMatrix.check_is_ProgenyGenicCovarianceMatrix"]], "pybrops.model.vmat": [[838, "module-pybrops.model.vmat"]], "pybrops.model.vmat.additivegeneticvariancematrix": [[839, "module-pybrops.model.vmat.AdditiveGeneticVarianceMatrix"]], "additivegeneticvariancematrix (class in pybrops.model.vmat.additivegeneticvariancematrix)": [[840, "pybrops.model.vmat.AdditiveGeneticVarianceMatrix.AdditiveGeneticVarianceMatrix"]], "__add__() (pybrops.model.vmat.additivegeneticvariancematrix.additivegeneticvariancematrix method)": [[840, "pybrops.model.vmat.AdditiveGeneticVarianceMatrix.AdditiveGeneticVarianceMatrix.__add__"]], "__mul__() (pybrops.model.vmat.additivegeneticvariancematrix.additivegeneticvariancematrix method)": [[840, "pybrops.model.vmat.AdditiveGeneticVarianceMatrix.AdditiveGeneticVarianceMatrix.__mul__"]], "adjoin() (pybrops.model.vmat.additivegeneticvariancematrix.additivegeneticvariancematrix method)": [[840, "pybrops.model.vmat.AdditiveGeneticVarianceMatrix.AdditiveGeneticVarianceMatrix.adjoin"]], "adjoin_taxa() (pybrops.model.vmat.additivegeneticvariancematrix.additivegeneticvariancematrix method)": [[840, "pybrops.model.vmat.AdditiveGeneticVarianceMatrix.AdditiveGeneticVarianceMatrix.adjoin_taxa"]], "adjoin_trait() (pybrops.model.vmat.additivegeneticvariancematrix.additivegeneticvariancematrix method)": [[840, "pybrops.model.vmat.AdditiveGeneticVarianceMatrix.AdditiveGeneticVarianceMatrix.adjoin_trait"]], "append() (pybrops.model.vmat.additivegeneticvariancematrix.additivegeneticvariancematrix method)": [[840, "pybrops.model.vmat.AdditiveGeneticVarianceMatrix.AdditiveGeneticVarianceMatrix.append"]], "append_taxa() (pybrops.model.vmat.additivegeneticvariancematrix.additivegeneticvariancematrix method)": [[840, "pybrops.model.vmat.AdditiveGeneticVarianceMatrix.AdditiveGeneticVarianceMatrix.append_taxa"]], "append_trait() (pybrops.model.vmat.additivegeneticvariancematrix.additivegeneticvariancematrix method)": [[840, "pybrops.model.vmat.AdditiveGeneticVarianceMatrix.AdditiveGeneticVarianceMatrix.append_trait"]], "concat() (pybrops.model.vmat.additivegeneticvariancematrix.additivegeneticvariancematrix class method)": [[840, "pybrops.model.vmat.AdditiveGeneticVarianceMatrix.AdditiveGeneticVarianceMatrix.concat"]], "concat_taxa() (pybrops.model.vmat.additivegeneticvariancematrix.additivegeneticvariancematrix class method)": [[840, "pybrops.model.vmat.AdditiveGeneticVarianceMatrix.AdditiveGeneticVarianceMatrix.concat_taxa"]], "concat_trait() (pybrops.model.vmat.additivegeneticvariancematrix.additivegeneticvariancematrix class method)": [[840, "pybrops.model.vmat.AdditiveGeneticVarianceMatrix.AdditiveGeneticVarianceMatrix.concat_trait"]], "copy() (pybrops.model.vmat.additivegeneticvariancematrix.additivegeneticvariancematrix method)": [[840, "pybrops.model.vmat.AdditiveGeneticVarianceMatrix.AdditiveGeneticVarianceMatrix.copy"]], "deepcopy() (pybrops.model.vmat.additivegeneticvariancematrix.additivegeneticvariancematrix method)": [[840, "pybrops.model.vmat.AdditiveGeneticVarianceMatrix.AdditiveGeneticVarianceMatrix.deepcopy"]], "delete() (pybrops.model.vmat.additivegeneticvariancematrix.additivegeneticvariancematrix method)": [[840, "pybrops.model.vmat.AdditiveGeneticVarianceMatrix.AdditiveGeneticVarianceMatrix.delete"]], "delete_taxa() (pybrops.model.vmat.additivegeneticvariancematrix.additivegeneticvariancematrix method)": [[840, "pybrops.model.vmat.AdditiveGeneticVarianceMatrix.AdditiveGeneticVarianceMatrix.delete_taxa"]], "delete_trait() (pybrops.model.vmat.additivegeneticvariancematrix.additivegeneticvariancematrix method)": [[840, "pybrops.model.vmat.AdditiveGeneticVarianceMatrix.AdditiveGeneticVarianceMatrix.delete_trait"]], "epgc (pybrops.model.vmat.additivegeneticvariancematrix.additivegeneticvariancematrix property)": [[840, "pybrops.model.vmat.AdditiveGeneticVarianceMatrix.AdditiveGeneticVarianceMatrix.epgc"]], "from_algmod() (pybrops.model.vmat.additivegeneticvariancematrix.additivegeneticvariancematrix class method)": [[840, "pybrops.model.vmat.AdditiveGeneticVarianceMatrix.AdditiveGeneticVarianceMatrix.from_algmod"]], "from_csv() (pybrops.model.vmat.additivegeneticvariancematrix.additivegeneticvariancematrix class method)": [[840, "pybrops.model.vmat.AdditiveGeneticVarianceMatrix.AdditiveGeneticVarianceMatrix.from_csv"]], "from_gmod() (pybrops.model.vmat.additivegeneticvariancematrix.additivegeneticvariancematrix class method)": [[840, "pybrops.model.vmat.AdditiveGeneticVarianceMatrix.AdditiveGeneticVarianceMatrix.from_gmod"]], "from_hdf5() (pybrops.model.vmat.additivegeneticvariancematrix.additivegeneticvariancematrix class method)": [[840, "pybrops.model.vmat.AdditiveGeneticVarianceMatrix.AdditiveGeneticVarianceMatrix.from_hdf5"]], "from_pandas() (pybrops.model.vmat.additivegeneticvariancematrix.additivegeneticvariancematrix class method)": [[840, "pybrops.model.vmat.AdditiveGeneticVarianceMatrix.AdditiveGeneticVarianceMatrix.from_pandas"]], "group() (pybrops.model.vmat.additivegeneticvariancematrix.additivegeneticvariancematrix method)": [[840, "pybrops.model.vmat.AdditiveGeneticVarianceMatrix.AdditiveGeneticVarianceMatrix.group"]], "group_taxa() (pybrops.model.vmat.additivegeneticvariancematrix.additivegeneticvariancematrix method)": [[840, "pybrops.model.vmat.AdditiveGeneticVarianceMatrix.AdditiveGeneticVarianceMatrix.group_taxa"]], "incorp() (pybrops.model.vmat.additivegeneticvariancematrix.additivegeneticvariancematrix method)": [[840, "pybrops.model.vmat.AdditiveGeneticVarianceMatrix.AdditiveGeneticVarianceMatrix.incorp"]], "incorp_taxa() (pybrops.model.vmat.additivegeneticvariancematrix.additivegeneticvariancematrix method)": [[840, "pybrops.model.vmat.AdditiveGeneticVarianceMatrix.AdditiveGeneticVarianceMatrix.incorp_taxa"]], "incorp_trait() (pybrops.model.vmat.additivegeneticvariancematrix.additivegeneticvariancematrix method)": [[840, "pybrops.model.vmat.AdditiveGeneticVarianceMatrix.AdditiveGeneticVarianceMatrix.incorp_trait"]], "insert() (pybrops.model.vmat.additivegeneticvariancematrix.additivegeneticvariancematrix method)": [[840, "pybrops.model.vmat.AdditiveGeneticVarianceMatrix.AdditiveGeneticVarianceMatrix.insert"]], "insert_taxa() (pybrops.model.vmat.additivegeneticvariancematrix.additivegeneticvariancematrix method)": [[840, "pybrops.model.vmat.AdditiveGeneticVarianceMatrix.AdditiveGeneticVarianceMatrix.insert_taxa"]], "insert_trait() (pybrops.model.vmat.additivegeneticvariancematrix.additivegeneticvariancematrix method)": [[840, "pybrops.model.vmat.AdditiveGeneticVarianceMatrix.AdditiveGeneticVarianceMatrix.insert_trait"]], "is_grouped() (pybrops.model.vmat.additivegeneticvariancematrix.additivegeneticvariancematrix method)": [[840, "pybrops.model.vmat.AdditiveGeneticVarianceMatrix.AdditiveGeneticVarianceMatrix.is_grouped"]], "is_grouped_taxa() (pybrops.model.vmat.additivegeneticvariancematrix.additivegeneticvariancematrix method)": [[840, "pybrops.model.vmat.AdditiveGeneticVarianceMatrix.AdditiveGeneticVarianceMatrix.is_grouped_taxa"]], "is_square() (pybrops.model.vmat.additivegeneticvariancematrix.additivegeneticvariancematrix method)": [[840, "pybrops.model.vmat.AdditiveGeneticVarianceMatrix.AdditiveGeneticVarianceMatrix.is_square"]], "is_square_taxa() (pybrops.model.vmat.additivegeneticvariancematrix.additivegeneticvariancematrix method)": [[840, "pybrops.model.vmat.AdditiveGeneticVarianceMatrix.AdditiveGeneticVarianceMatrix.is_square_taxa"]], "lexsort() (pybrops.model.vmat.additivegeneticvariancematrix.additivegeneticvariancematrix method)": [[840, "pybrops.model.vmat.AdditiveGeneticVarianceMatrix.AdditiveGeneticVarianceMatrix.lexsort"]], "lexsort_taxa() (pybrops.model.vmat.additivegeneticvariancematrix.additivegeneticvariancematrix method)": [[840, "pybrops.model.vmat.AdditiveGeneticVarianceMatrix.AdditiveGeneticVarianceMatrix.lexsort_taxa"]], "lexsort_trait() (pybrops.model.vmat.additivegeneticvariancematrix.additivegeneticvariancematrix method)": [[840, "pybrops.model.vmat.AdditiveGeneticVarianceMatrix.AdditiveGeneticVarianceMatrix.lexsort_trait"]], "mat (pybrops.model.vmat.additivegeneticvariancematrix.additivegeneticvariancematrix property)": [[840, "pybrops.model.vmat.AdditiveGeneticVarianceMatrix.AdditiveGeneticVarianceMatrix.mat"]], "mat_ndim (pybrops.model.vmat.additivegeneticvariancematrix.additivegeneticvariancematrix property)": [[840, "pybrops.model.vmat.AdditiveGeneticVarianceMatrix.AdditiveGeneticVarianceMatrix.mat_ndim"]], "mat_shape (pybrops.model.vmat.additivegeneticvariancematrix.additivegeneticvariancematrix property)": [[840, "pybrops.model.vmat.AdditiveGeneticVarianceMatrix.AdditiveGeneticVarianceMatrix.mat_shape"]], "nsquare (pybrops.model.vmat.additivegeneticvariancematrix.additivegeneticvariancematrix property)": [[840, "pybrops.model.vmat.AdditiveGeneticVarianceMatrix.AdditiveGeneticVarianceMatrix.nsquare"]], "nsquare_taxa (pybrops.model.vmat.additivegeneticvariancematrix.additivegeneticvariancematrix property)": [[840, "pybrops.model.vmat.AdditiveGeneticVarianceMatrix.AdditiveGeneticVarianceMatrix.nsquare_taxa"]], "ntaxa (pybrops.model.vmat.additivegeneticvariancematrix.additivegeneticvariancematrix property)": [[840, "pybrops.model.vmat.AdditiveGeneticVarianceMatrix.AdditiveGeneticVarianceMatrix.ntaxa"]], "ntrait (pybrops.model.vmat.additivegeneticvariancematrix.additivegeneticvariancematrix property)": [[840, "pybrops.model.vmat.AdditiveGeneticVarianceMatrix.AdditiveGeneticVarianceMatrix.ntrait"]], "remove() (pybrops.model.vmat.additivegeneticvariancematrix.additivegeneticvariancematrix method)": [[840, "pybrops.model.vmat.AdditiveGeneticVarianceMatrix.AdditiveGeneticVarianceMatrix.remove"]], "remove_taxa() (pybrops.model.vmat.additivegeneticvariancematrix.additivegeneticvariancematrix method)": [[840, "pybrops.model.vmat.AdditiveGeneticVarianceMatrix.AdditiveGeneticVarianceMatrix.remove_taxa"]], "remove_trait() (pybrops.model.vmat.additivegeneticvariancematrix.additivegeneticvariancematrix method)": [[840, "pybrops.model.vmat.AdditiveGeneticVarianceMatrix.AdditiveGeneticVarianceMatrix.remove_trait"]], "reorder() (pybrops.model.vmat.additivegeneticvariancematrix.additivegeneticvariancematrix method)": [[840, "pybrops.model.vmat.AdditiveGeneticVarianceMatrix.AdditiveGeneticVarianceMatrix.reorder"]], "reorder_taxa() (pybrops.model.vmat.additivegeneticvariancematrix.additivegeneticvariancematrix method)": [[840, "pybrops.model.vmat.AdditiveGeneticVarianceMatrix.AdditiveGeneticVarianceMatrix.reorder_taxa"]], "reorder_trait() (pybrops.model.vmat.additivegeneticvariancematrix.additivegeneticvariancematrix method)": [[840, "pybrops.model.vmat.AdditiveGeneticVarianceMatrix.AdditiveGeneticVarianceMatrix.reorder_trait"]], "select() (pybrops.model.vmat.additivegeneticvariancematrix.additivegeneticvariancematrix method)": [[840, "pybrops.model.vmat.AdditiveGeneticVarianceMatrix.AdditiveGeneticVarianceMatrix.select"]], "select_taxa() (pybrops.model.vmat.additivegeneticvariancematrix.additivegeneticvariancematrix method)": [[840, "pybrops.model.vmat.AdditiveGeneticVarianceMatrix.AdditiveGeneticVarianceMatrix.select_taxa"]], "select_trait() (pybrops.model.vmat.additivegeneticvariancematrix.additivegeneticvariancematrix method)": [[840, "pybrops.model.vmat.AdditiveGeneticVarianceMatrix.AdditiveGeneticVarianceMatrix.select_trait"]], "sort() (pybrops.model.vmat.additivegeneticvariancematrix.additivegeneticvariancematrix method)": [[840, "pybrops.model.vmat.AdditiveGeneticVarianceMatrix.AdditiveGeneticVarianceMatrix.sort"]], "sort_taxa() (pybrops.model.vmat.additivegeneticvariancematrix.additivegeneticvariancematrix method)": [[840, "pybrops.model.vmat.AdditiveGeneticVarianceMatrix.AdditiveGeneticVarianceMatrix.sort_taxa"]], "sort_trait() (pybrops.model.vmat.additivegeneticvariancematrix.additivegeneticvariancematrix method)": [[840, "pybrops.model.vmat.AdditiveGeneticVarianceMatrix.AdditiveGeneticVarianceMatrix.sort_trait"]], "square_axes (pybrops.model.vmat.additivegeneticvariancematrix.additivegeneticvariancematrix property)": [[840, "pybrops.model.vmat.AdditiveGeneticVarianceMatrix.AdditiveGeneticVarianceMatrix.square_axes"]], "square_axes_len (pybrops.model.vmat.additivegeneticvariancematrix.additivegeneticvariancematrix property)": [[840, "pybrops.model.vmat.AdditiveGeneticVarianceMatrix.AdditiveGeneticVarianceMatrix.square_axes_len"]], "square_taxa_axes (pybrops.model.vmat.additivegeneticvariancematrix.additivegeneticvariancematrix property)": [[840, "pybrops.model.vmat.AdditiveGeneticVarianceMatrix.AdditiveGeneticVarianceMatrix.square_taxa_axes"]], "square_taxa_axes_len (pybrops.model.vmat.additivegeneticvariancematrix.additivegeneticvariancematrix property)": [[840, "pybrops.model.vmat.AdditiveGeneticVarianceMatrix.AdditiveGeneticVarianceMatrix.square_taxa_axes_len"]], "taxa (pybrops.model.vmat.additivegeneticvariancematrix.additivegeneticvariancematrix property)": [[840, "pybrops.model.vmat.AdditiveGeneticVarianceMatrix.AdditiveGeneticVarianceMatrix.taxa"]], "taxa_axis (pybrops.model.vmat.additivegeneticvariancematrix.additivegeneticvariancematrix property)": [[840, "pybrops.model.vmat.AdditiveGeneticVarianceMatrix.AdditiveGeneticVarianceMatrix.taxa_axis"]], "taxa_grp (pybrops.model.vmat.additivegeneticvariancematrix.additivegeneticvariancematrix property)": [[840, "pybrops.model.vmat.AdditiveGeneticVarianceMatrix.AdditiveGeneticVarianceMatrix.taxa_grp"]], "taxa_grp_len (pybrops.model.vmat.additivegeneticvariancematrix.additivegeneticvariancematrix property)": [[840, "pybrops.model.vmat.AdditiveGeneticVarianceMatrix.AdditiveGeneticVarianceMatrix.taxa_grp_len"]], "taxa_grp_name (pybrops.model.vmat.additivegeneticvariancematrix.additivegeneticvariancematrix property)": [[840, "pybrops.model.vmat.AdditiveGeneticVarianceMatrix.AdditiveGeneticVarianceMatrix.taxa_grp_name"]], "taxa_grp_spix (pybrops.model.vmat.additivegeneticvariancematrix.additivegeneticvariancematrix property)": [[840, "pybrops.model.vmat.AdditiveGeneticVarianceMatrix.AdditiveGeneticVarianceMatrix.taxa_grp_spix"]], "taxa_grp_stix (pybrops.model.vmat.additivegeneticvariancematrix.additivegeneticvariancematrix property)": [[840, "pybrops.model.vmat.AdditiveGeneticVarianceMatrix.AdditiveGeneticVarianceMatrix.taxa_grp_stix"]], "to_csv() (pybrops.model.vmat.additivegeneticvariancematrix.additivegeneticvariancematrix method)": [[840, "pybrops.model.vmat.AdditiveGeneticVarianceMatrix.AdditiveGeneticVarianceMatrix.to_csv"]], "to_hdf5() (pybrops.model.vmat.additivegeneticvariancematrix.additivegeneticvariancematrix method)": [[840, "pybrops.model.vmat.AdditiveGeneticVarianceMatrix.AdditiveGeneticVarianceMatrix.to_hdf5"]], "to_pandas() (pybrops.model.vmat.additivegeneticvariancematrix.additivegeneticvariancematrix method)": [[840, "pybrops.model.vmat.AdditiveGeneticVarianceMatrix.AdditiveGeneticVarianceMatrix.to_pandas"]], "trait (pybrops.model.vmat.additivegeneticvariancematrix.additivegeneticvariancematrix property)": [[840, "pybrops.model.vmat.AdditiveGeneticVarianceMatrix.AdditiveGeneticVarianceMatrix.trait"]], "trait_axis (pybrops.model.vmat.additivegeneticvariancematrix.additivegeneticvariancematrix property)": [[840, "pybrops.model.vmat.AdditiveGeneticVarianceMatrix.AdditiveGeneticVarianceMatrix.trait_axis"]], "ungroup() (pybrops.model.vmat.additivegeneticvariancematrix.additivegeneticvariancematrix method)": [[840, "pybrops.model.vmat.AdditiveGeneticVarianceMatrix.AdditiveGeneticVarianceMatrix.ungroup"]], "ungroup_taxa() (pybrops.model.vmat.additivegeneticvariancematrix.additivegeneticvariancematrix method)": [[840, "pybrops.model.vmat.AdditiveGeneticVarianceMatrix.AdditiveGeneticVarianceMatrix.ungroup_taxa"]], "check_is_additivegeneticvariancematrix() (in module pybrops.model.vmat.additivegeneticvariancematrix)": [[841, "pybrops.model.vmat.AdditiveGeneticVarianceMatrix.check_is_AdditiveGeneticVarianceMatrix"]], "pybrops.model.vmat.additivegenicvariancematrix": [[842, "module-pybrops.model.vmat.AdditiveGenicVarianceMatrix"]], "additivegenicvariancematrix (class in pybrops.model.vmat.additivegenicvariancematrix)": [[843, "pybrops.model.vmat.AdditiveGenicVarianceMatrix.AdditiveGenicVarianceMatrix"]], "__add__() (pybrops.model.vmat.additivegenicvariancematrix.additivegenicvariancematrix method)": [[843, "pybrops.model.vmat.AdditiveGenicVarianceMatrix.AdditiveGenicVarianceMatrix.__add__"]], "__mul__() (pybrops.model.vmat.additivegenicvariancematrix.additivegenicvariancematrix method)": [[843, "pybrops.model.vmat.AdditiveGenicVarianceMatrix.AdditiveGenicVarianceMatrix.__mul__"]], "adjoin() (pybrops.model.vmat.additivegenicvariancematrix.additivegenicvariancematrix method)": [[843, "pybrops.model.vmat.AdditiveGenicVarianceMatrix.AdditiveGenicVarianceMatrix.adjoin"]], "adjoin_taxa() (pybrops.model.vmat.additivegenicvariancematrix.additivegenicvariancematrix method)": [[843, "pybrops.model.vmat.AdditiveGenicVarianceMatrix.AdditiveGenicVarianceMatrix.adjoin_taxa"]], "adjoin_trait() (pybrops.model.vmat.additivegenicvariancematrix.additivegenicvariancematrix method)": [[843, "pybrops.model.vmat.AdditiveGenicVarianceMatrix.AdditiveGenicVarianceMatrix.adjoin_trait"]], "append() (pybrops.model.vmat.additivegenicvariancematrix.additivegenicvariancematrix method)": [[843, "pybrops.model.vmat.AdditiveGenicVarianceMatrix.AdditiveGenicVarianceMatrix.append"]], "append_taxa() (pybrops.model.vmat.additivegenicvariancematrix.additivegenicvariancematrix method)": [[843, "pybrops.model.vmat.AdditiveGenicVarianceMatrix.AdditiveGenicVarianceMatrix.append_taxa"]], "append_trait() (pybrops.model.vmat.additivegenicvariancematrix.additivegenicvariancematrix method)": [[843, "pybrops.model.vmat.AdditiveGenicVarianceMatrix.AdditiveGenicVarianceMatrix.append_trait"]], "concat() (pybrops.model.vmat.additivegenicvariancematrix.additivegenicvariancematrix class method)": [[843, "pybrops.model.vmat.AdditiveGenicVarianceMatrix.AdditiveGenicVarianceMatrix.concat"]], "concat_taxa() (pybrops.model.vmat.additivegenicvariancematrix.additivegenicvariancematrix class method)": [[843, "pybrops.model.vmat.AdditiveGenicVarianceMatrix.AdditiveGenicVarianceMatrix.concat_taxa"]], "concat_trait() (pybrops.model.vmat.additivegenicvariancematrix.additivegenicvariancematrix class method)": [[843, "pybrops.model.vmat.AdditiveGenicVarianceMatrix.AdditiveGenicVarianceMatrix.concat_trait"]], "copy() (pybrops.model.vmat.additivegenicvariancematrix.additivegenicvariancematrix method)": [[843, "pybrops.model.vmat.AdditiveGenicVarianceMatrix.AdditiveGenicVarianceMatrix.copy"]], "deepcopy() (pybrops.model.vmat.additivegenicvariancematrix.additivegenicvariancematrix method)": [[843, "pybrops.model.vmat.AdditiveGenicVarianceMatrix.AdditiveGenicVarianceMatrix.deepcopy"]], "delete() (pybrops.model.vmat.additivegenicvariancematrix.additivegenicvariancematrix method)": [[843, "pybrops.model.vmat.AdditiveGenicVarianceMatrix.AdditiveGenicVarianceMatrix.delete"]], "delete_taxa() (pybrops.model.vmat.additivegenicvariancematrix.additivegenicvariancematrix method)": [[843, "pybrops.model.vmat.AdditiveGenicVarianceMatrix.AdditiveGenicVarianceMatrix.delete_taxa"]], "delete_trait() (pybrops.model.vmat.additivegenicvariancematrix.additivegenicvariancematrix method)": [[843, "pybrops.model.vmat.AdditiveGenicVarianceMatrix.AdditiveGenicVarianceMatrix.delete_trait"]], "epgc (pybrops.model.vmat.additivegenicvariancematrix.additivegenicvariancematrix property)": [[843, "pybrops.model.vmat.AdditiveGenicVarianceMatrix.AdditiveGenicVarianceMatrix.epgc"]], "from_algmod() (pybrops.model.vmat.additivegenicvariancematrix.additivegenicvariancematrix class method)": [[843, "pybrops.model.vmat.AdditiveGenicVarianceMatrix.AdditiveGenicVarianceMatrix.from_algmod"]], "from_csv() (pybrops.model.vmat.additivegenicvariancematrix.additivegenicvariancematrix class method)": [[843, "pybrops.model.vmat.AdditiveGenicVarianceMatrix.AdditiveGenicVarianceMatrix.from_csv"]], "from_gmod() (pybrops.model.vmat.additivegenicvariancematrix.additivegenicvariancematrix class method)": [[843, "pybrops.model.vmat.AdditiveGenicVarianceMatrix.AdditiveGenicVarianceMatrix.from_gmod"]], "from_hdf5() (pybrops.model.vmat.additivegenicvariancematrix.additivegenicvariancematrix class method)": [[843, "pybrops.model.vmat.AdditiveGenicVarianceMatrix.AdditiveGenicVarianceMatrix.from_hdf5"]], "from_pandas() (pybrops.model.vmat.additivegenicvariancematrix.additivegenicvariancematrix class method)": [[843, "pybrops.model.vmat.AdditiveGenicVarianceMatrix.AdditiveGenicVarianceMatrix.from_pandas"]], "group() (pybrops.model.vmat.additivegenicvariancematrix.additivegenicvariancematrix method)": [[843, "pybrops.model.vmat.AdditiveGenicVarianceMatrix.AdditiveGenicVarianceMatrix.group"]], "group_taxa() (pybrops.model.vmat.additivegenicvariancematrix.additivegenicvariancematrix method)": [[843, "pybrops.model.vmat.AdditiveGenicVarianceMatrix.AdditiveGenicVarianceMatrix.group_taxa"]], "incorp() (pybrops.model.vmat.additivegenicvariancematrix.additivegenicvariancematrix method)": [[843, "pybrops.model.vmat.AdditiveGenicVarianceMatrix.AdditiveGenicVarianceMatrix.incorp"]], "incorp_taxa() (pybrops.model.vmat.additivegenicvariancematrix.additivegenicvariancematrix method)": [[843, "pybrops.model.vmat.AdditiveGenicVarianceMatrix.AdditiveGenicVarianceMatrix.incorp_taxa"]], "incorp_trait() (pybrops.model.vmat.additivegenicvariancematrix.additivegenicvariancematrix method)": [[843, "pybrops.model.vmat.AdditiveGenicVarianceMatrix.AdditiveGenicVarianceMatrix.incorp_trait"]], "insert() (pybrops.model.vmat.additivegenicvariancematrix.additivegenicvariancematrix method)": [[843, "pybrops.model.vmat.AdditiveGenicVarianceMatrix.AdditiveGenicVarianceMatrix.insert"]], "insert_taxa() (pybrops.model.vmat.additivegenicvariancematrix.additivegenicvariancematrix method)": [[843, "pybrops.model.vmat.AdditiveGenicVarianceMatrix.AdditiveGenicVarianceMatrix.insert_taxa"]], "insert_trait() (pybrops.model.vmat.additivegenicvariancematrix.additivegenicvariancematrix method)": [[843, "pybrops.model.vmat.AdditiveGenicVarianceMatrix.AdditiveGenicVarianceMatrix.insert_trait"]], "is_grouped() (pybrops.model.vmat.additivegenicvariancematrix.additivegenicvariancematrix method)": [[843, "pybrops.model.vmat.AdditiveGenicVarianceMatrix.AdditiveGenicVarianceMatrix.is_grouped"]], "is_grouped_taxa() (pybrops.model.vmat.additivegenicvariancematrix.additivegenicvariancematrix method)": [[843, "pybrops.model.vmat.AdditiveGenicVarianceMatrix.AdditiveGenicVarianceMatrix.is_grouped_taxa"]], "is_square() (pybrops.model.vmat.additivegenicvariancematrix.additivegenicvariancematrix method)": [[843, "pybrops.model.vmat.AdditiveGenicVarianceMatrix.AdditiveGenicVarianceMatrix.is_square"]], "is_square_taxa() (pybrops.model.vmat.additivegenicvariancematrix.additivegenicvariancematrix method)": [[843, "pybrops.model.vmat.AdditiveGenicVarianceMatrix.AdditiveGenicVarianceMatrix.is_square_taxa"]], "lexsort() (pybrops.model.vmat.additivegenicvariancematrix.additivegenicvariancematrix method)": [[843, "pybrops.model.vmat.AdditiveGenicVarianceMatrix.AdditiveGenicVarianceMatrix.lexsort"]], "lexsort_taxa() (pybrops.model.vmat.additivegenicvariancematrix.additivegenicvariancematrix method)": [[843, "pybrops.model.vmat.AdditiveGenicVarianceMatrix.AdditiveGenicVarianceMatrix.lexsort_taxa"]], "lexsort_trait() (pybrops.model.vmat.additivegenicvariancematrix.additivegenicvariancematrix method)": [[843, "pybrops.model.vmat.AdditiveGenicVarianceMatrix.AdditiveGenicVarianceMatrix.lexsort_trait"]], "mat (pybrops.model.vmat.additivegenicvariancematrix.additivegenicvariancematrix property)": [[843, "pybrops.model.vmat.AdditiveGenicVarianceMatrix.AdditiveGenicVarianceMatrix.mat"]], "mat_ndim (pybrops.model.vmat.additivegenicvariancematrix.additivegenicvariancematrix property)": [[843, "pybrops.model.vmat.AdditiveGenicVarianceMatrix.AdditiveGenicVarianceMatrix.mat_ndim"]], "mat_shape (pybrops.model.vmat.additivegenicvariancematrix.additivegenicvariancematrix property)": [[843, "pybrops.model.vmat.AdditiveGenicVarianceMatrix.AdditiveGenicVarianceMatrix.mat_shape"]], "nsquare (pybrops.model.vmat.additivegenicvariancematrix.additivegenicvariancematrix property)": [[843, "pybrops.model.vmat.AdditiveGenicVarianceMatrix.AdditiveGenicVarianceMatrix.nsquare"]], "nsquare_taxa (pybrops.model.vmat.additivegenicvariancematrix.additivegenicvariancematrix property)": [[843, "pybrops.model.vmat.AdditiveGenicVarianceMatrix.AdditiveGenicVarianceMatrix.nsquare_taxa"]], "ntaxa (pybrops.model.vmat.additivegenicvariancematrix.additivegenicvariancematrix property)": [[843, "pybrops.model.vmat.AdditiveGenicVarianceMatrix.AdditiveGenicVarianceMatrix.ntaxa"]], "ntrait (pybrops.model.vmat.additivegenicvariancematrix.additivegenicvariancematrix property)": [[843, "pybrops.model.vmat.AdditiveGenicVarianceMatrix.AdditiveGenicVarianceMatrix.ntrait"]], "remove() (pybrops.model.vmat.additivegenicvariancematrix.additivegenicvariancematrix method)": [[843, "pybrops.model.vmat.AdditiveGenicVarianceMatrix.AdditiveGenicVarianceMatrix.remove"]], "remove_taxa() (pybrops.model.vmat.additivegenicvariancematrix.additivegenicvariancematrix method)": [[843, "pybrops.model.vmat.AdditiveGenicVarianceMatrix.AdditiveGenicVarianceMatrix.remove_taxa"]], "remove_trait() (pybrops.model.vmat.additivegenicvariancematrix.additivegenicvariancematrix method)": [[843, "pybrops.model.vmat.AdditiveGenicVarianceMatrix.AdditiveGenicVarianceMatrix.remove_trait"]], "reorder() (pybrops.model.vmat.additivegenicvariancematrix.additivegenicvariancematrix method)": [[843, "pybrops.model.vmat.AdditiveGenicVarianceMatrix.AdditiveGenicVarianceMatrix.reorder"]], "reorder_taxa() (pybrops.model.vmat.additivegenicvariancematrix.additivegenicvariancematrix method)": [[843, "pybrops.model.vmat.AdditiveGenicVarianceMatrix.AdditiveGenicVarianceMatrix.reorder_taxa"]], "reorder_trait() (pybrops.model.vmat.additivegenicvariancematrix.additivegenicvariancematrix method)": [[843, "pybrops.model.vmat.AdditiveGenicVarianceMatrix.AdditiveGenicVarianceMatrix.reorder_trait"]], "select() (pybrops.model.vmat.additivegenicvariancematrix.additivegenicvariancematrix method)": [[843, "pybrops.model.vmat.AdditiveGenicVarianceMatrix.AdditiveGenicVarianceMatrix.select"]], "select_taxa() (pybrops.model.vmat.additivegenicvariancematrix.additivegenicvariancematrix method)": [[843, "pybrops.model.vmat.AdditiveGenicVarianceMatrix.AdditiveGenicVarianceMatrix.select_taxa"]], "select_trait() (pybrops.model.vmat.additivegenicvariancematrix.additivegenicvariancematrix method)": [[843, "pybrops.model.vmat.AdditiveGenicVarianceMatrix.AdditiveGenicVarianceMatrix.select_trait"]], "sort() (pybrops.model.vmat.additivegenicvariancematrix.additivegenicvariancematrix method)": [[843, "pybrops.model.vmat.AdditiveGenicVarianceMatrix.AdditiveGenicVarianceMatrix.sort"]], "sort_taxa() (pybrops.model.vmat.additivegenicvariancematrix.additivegenicvariancematrix method)": [[843, "pybrops.model.vmat.AdditiveGenicVarianceMatrix.AdditiveGenicVarianceMatrix.sort_taxa"]], "sort_trait() (pybrops.model.vmat.additivegenicvariancematrix.additivegenicvariancematrix method)": [[843, "pybrops.model.vmat.AdditiveGenicVarianceMatrix.AdditiveGenicVarianceMatrix.sort_trait"]], "square_axes (pybrops.model.vmat.additivegenicvariancematrix.additivegenicvariancematrix property)": [[843, "pybrops.model.vmat.AdditiveGenicVarianceMatrix.AdditiveGenicVarianceMatrix.square_axes"]], "square_axes_len (pybrops.model.vmat.additivegenicvariancematrix.additivegenicvariancematrix property)": [[843, "pybrops.model.vmat.AdditiveGenicVarianceMatrix.AdditiveGenicVarianceMatrix.square_axes_len"]], "square_taxa_axes (pybrops.model.vmat.additivegenicvariancematrix.additivegenicvariancematrix property)": [[843, "pybrops.model.vmat.AdditiveGenicVarianceMatrix.AdditiveGenicVarianceMatrix.square_taxa_axes"]], "square_taxa_axes_len (pybrops.model.vmat.additivegenicvariancematrix.additivegenicvariancematrix property)": [[843, "pybrops.model.vmat.AdditiveGenicVarianceMatrix.AdditiveGenicVarianceMatrix.square_taxa_axes_len"]], "taxa (pybrops.model.vmat.additivegenicvariancematrix.additivegenicvariancematrix property)": [[843, "pybrops.model.vmat.AdditiveGenicVarianceMatrix.AdditiveGenicVarianceMatrix.taxa"]], "taxa_axis (pybrops.model.vmat.additivegenicvariancematrix.additivegenicvariancematrix property)": [[843, "pybrops.model.vmat.AdditiveGenicVarianceMatrix.AdditiveGenicVarianceMatrix.taxa_axis"]], "taxa_grp (pybrops.model.vmat.additivegenicvariancematrix.additivegenicvariancematrix property)": [[843, "pybrops.model.vmat.AdditiveGenicVarianceMatrix.AdditiveGenicVarianceMatrix.taxa_grp"]], "taxa_grp_len (pybrops.model.vmat.additivegenicvariancematrix.additivegenicvariancematrix property)": [[843, "pybrops.model.vmat.AdditiveGenicVarianceMatrix.AdditiveGenicVarianceMatrix.taxa_grp_len"]], "taxa_grp_name (pybrops.model.vmat.additivegenicvariancematrix.additivegenicvariancematrix property)": [[843, "pybrops.model.vmat.AdditiveGenicVarianceMatrix.AdditiveGenicVarianceMatrix.taxa_grp_name"]], "taxa_grp_spix (pybrops.model.vmat.additivegenicvariancematrix.additivegenicvariancematrix property)": [[843, "pybrops.model.vmat.AdditiveGenicVarianceMatrix.AdditiveGenicVarianceMatrix.taxa_grp_spix"]], "taxa_grp_stix (pybrops.model.vmat.additivegenicvariancematrix.additivegenicvariancematrix property)": [[843, "pybrops.model.vmat.AdditiveGenicVarianceMatrix.AdditiveGenicVarianceMatrix.taxa_grp_stix"]], "to_csv() (pybrops.model.vmat.additivegenicvariancematrix.additivegenicvariancematrix method)": [[843, "pybrops.model.vmat.AdditiveGenicVarianceMatrix.AdditiveGenicVarianceMatrix.to_csv"]], "to_hdf5() (pybrops.model.vmat.additivegenicvariancematrix.additivegenicvariancematrix method)": [[843, "pybrops.model.vmat.AdditiveGenicVarianceMatrix.AdditiveGenicVarianceMatrix.to_hdf5"]], "to_pandas() (pybrops.model.vmat.additivegenicvariancematrix.additivegenicvariancematrix method)": [[843, "pybrops.model.vmat.AdditiveGenicVarianceMatrix.AdditiveGenicVarianceMatrix.to_pandas"]], "trait (pybrops.model.vmat.additivegenicvariancematrix.additivegenicvariancematrix property)": [[843, "pybrops.model.vmat.AdditiveGenicVarianceMatrix.AdditiveGenicVarianceMatrix.trait"]], "trait_axis (pybrops.model.vmat.additivegenicvariancematrix.additivegenicvariancematrix property)": [[843, "pybrops.model.vmat.AdditiveGenicVarianceMatrix.AdditiveGenicVarianceMatrix.trait_axis"]], "ungroup() (pybrops.model.vmat.additivegenicvariancematrix.additivegenicvariancematrix method)": [[843, "pybrops.model.vmat.AdditiveGenicVarianceMatrix.AdditiveGenicVarianceMatrix.ungroup"]], "ungroup_taxa() (pybrops.model.vmat.additivegenicvariancematrix.additivegenicvariancematrix method)": [[843, "pybrops.model.vmat.AdditiveGenicVarianceMatrix.AdditiveGenicVarianceMatrix.ungroup_taxa"]], "check_is_additivegenicvariancematrix() (in module pybrops.model.vmat.additivegenicvariancematrix)": [[844, "pybrops.model.vmat.AdditiveGenicVarianceMatrix.check_is_AdditiveGenicVarianceMatrix"]], "pybrops.model.vmat.denseadditivegeneticvariancematrix": [[845, "module-pybrops.model.vmat.DenseAdditiveGeneticVarianceMatrix"]], "denseadditivegeneticvariancematrix (class in pybrops.model.vmat.denseadditivegeneticvariancematrix)": [[846, "pybrops.model.vmat.DenseAdditiveGeneticVarianceMatrix.DenseAdditiveGeneticVarianceMatrix"]], "__add__() (pybrops.model.vmat.denseadditivegeneticvariancematrix.denseadditivegeneticvariancematrix method)": [[846, "pybrops.model.vmat.DenseAdditiveGeneticVarianceMatrix.DenseAdditiveGeneticVarianceMatrix.__add__"]], "__mul__() (pybrops.model.vmat.denseadditivegeneticvariancematrix.denseadditivegeneticvariancematrix method)": [[846, "pybrops.model.vmat.DenseAdditiveGeneticVarianceMatrix.DenseAdditiveGeneticVarianceMatrix.__mul__"]], "adjoin() (pybrops.model.vmat.denseadditivegeneticvariancematrix.denseadditivegeneticvariancematrix method)": [[846, "pybrops.model.vmat.DenseAdditiveGeneticVarianceMatrix.DenseAdditiveGeneticVarianceMatrix.adjoin"]], "adjoin_taxa() (pybrops.model.vmat.denseadditivegeneticvariancematrix.denseadditivegeneticvariancematrix method)": [[846, "pybrops.model.vmat.DenseAdditiveGeneticVarianceMatrix.DenseAdditiveGeneticVarianceMatrix.adjoin_taxa"]], "adjoin_trait() (pybrops.model.vmat.denseadditivegeneticvariancematrix.denseadditivegeneticvariancematrix method)": [[846, "pybrops.model.vmat.DenseAdditiveGeneticVarianceMatrix.DenseAdditiveGeneticVarianceMatrix.adjoin_trait"]], "append() (pybrops.model.vmat.denseadditivegeneticvariancematrix.denseadditivegeneticvariancematrix method)": [[846, "pybrops.model.vmat.DenseAdditiveGeneticVarianceMatrix.DenseAdditiveGeneticVarianceMatrix.append"]], "append_taxa() (pybrops.model.vmat.denseadditivegeneticvariancematrix.denseadditivegeneticvariancematrix method)": [[846, "pybrops.model.vmat.DenseAdditiveGeneticVarianceMatrix.DenseAdditiveGeneticVarianceMatrix.append_taxa"]], "append_trait() (pybrops.model.vmat.denseadditivegeneticvariancematrix.denseadditivegeneticvariancematrix method)": [[846, "pybrops.model.vmat.DenseAdditiveGeneticVarianceMatrix.DenseAdditiveGeneticVarianceMatrix.append_trait"]], "concat() (pybrops.model.vmat.denseadditivegeneticvariancematrix.denseadditivegeneticvariancematrix class method)": [[846, "pybrops.model.vmat.DenseAdditiveGeneticVarianceMatrix.DenseAdditiveGeneticVarianceMatrix.concat"]], "concat_taxa() (pybrops.model.vmat.denseadditivegeneticvariancematrix.denseadditivegeneticvariancematrix class method)": [[846, "pybrops.model.vmat.DenseAdditiveGeneticVarianceMatrix.DenseAdditiveGeneticVarianceMatrix.concat_taxa"]], "concat_trait() (pybrops.model.vmat.denseadditivegeneticvariancematrix.denseadditivegeneticvariancematrix class method)": [[846, "pybrops.model.vmat.DenseAdditiveGeneticVarianceMatrix.DenseAdditiveGeneticVarianceMatrix.concat_trait"]], "copy() (pybrops.model.vmat.denseadditivegeneticvariancematrix.denseadditivegeneticvariancematrix method)": [[846, "pybrops.model.vmat.DenseAdditiveGeneticVarianceMatrix.DenseAdditiveGeneticVarianceMatrix.copy"]], "deepcopy() (pybrops.model.vmat.denseadditivegeneticvariancematrix.denseadditivegeneticvariancematrix method)": [[846, "pybrops.model.vmat.DenseAdditiveGeneticVarianceMatrix.DenseAdditiveGeneticVarianceMatrix.deepcopy"]], "delete() (pybrops.model.vmat.denseadditivegeneticvariancematrix.denseadditivegeneticvariancematrix method)": [[846, "pybrops.model.vmat.DenseAdditiveGeneticVarianceMatrix.DenseAdditiveGeneticVarianceMatrix.delete"]], "delete_taxa() (pybrops.model.vmat.denseadditivegeneticvariancematrix.denseadditivegeneticvariancematrix method)": [[846, "pybrops.model.vmat.DenseAdditiveGeneticVarianceMatrix.DenseAdditiveGeneticVarianceMatrix.delete_taxa"]], "delete_trait() (pybrops.model.vmat.denseadditivegeneticvariancematrix.denseadditivegeneticvariancematrix method)": [[846, "pybrops.model.vmat.DenseAdditiveGeneticVarianceMatrix.DenseAdditiveGeneticVarianceMatrix.delete_trait"]], "epgc (pybrops.model.vmat.denseadditivegeneticvariancematrix.denseadditivegeneticvariancematrix property)": [[846, "pybrops.model.vmat.DenseAdditiveGeneticVarianceMatrix.DenseAdditiveGeneticVarianceMatrix.epgc"]], "from_algmod() (pybrops.model.vmat.denseadditivegeneticvariancematrix.denseadditivegeneticvariancematrix class method)": [[846, "pybrops.model.vmat.DenseAdditiveGeneticVarianceMatrix.DenseAdditiveGeneticVarianceMatrix.from_algmod"]], "from_csv() (pybrops.model.vmat.denseadditivegeneticvariancematrix.denseadditivegeneticvariancematrix class method)": [[846, "pybrops.model.vmat.DenseAdditiveGeneticVarianceMatrix.DenseAdditiveGeneticVarianceMatrix.from_csv"]], "from_gmod() (pybrops.model.vmat.denseadditivegeneticvariancematrix.denseadditivegeneticvariancematrix class method)": [[846, "pybrops.model.vmat.DenseAdditiveGeneticVarianceMatrix.DenseAdditiveGeneticVarianceMatrix.from_gmod"]], "from_hdf5() (pybrops.model.vmat.denseadditivegeneticvariancematrix.denseadditivegeneticvariancematrix class method)": [[846, "pybrops.model.vmat.DenseAdditiveGeneticVarianceMatrix.DenseAdditiveGeneticVarianceMatrix.from_hdf5"]], "from_pandas() (pybrops.model.vmat.denseadditivegeneticvariancematrix.denseadditivegeneticvariancematrix class method)": [[846, "pybrops.model.vmat.DenseAdditiveGeneticVarianceMatrix.DenseAdditiveGeneticVarianceMatrix.from_pandas"]], "group() (pybrops.model.vmat.denseadditivegeneticvariancematrix.denseadditivegeneticvariancematrix method)": [[846, "pybrops.model.vmat.DenseAdditiveGeneticVarianceMatrix.DenseAdditiveGeneticVarianceMatrix.group"]], "group_taxa() (pybrops.model.vmat.denseadditivegeneticvariancematrix.denseadditivegeneticvariancematrix method)": [[846, "pybrops.model.vmat.DenseAdditiveGeneticVarianceMatrix.DenseAdditiveGeneticVarianceMatrix.group_taxa"]], "incorp() (pybrops.model.vmat.denseadditivegeneticvariancematrix.denseadditivegeneticvariancematrix method)": [[846, "pybrops.model.vmat.DenseAdditiveGeneticVarianceMatrix.DenseAdditiveGeneticVarianceMatrix.incorp"]], "incorp_taxa() (pybrops.model.vmat.denseadditivegeneticvariancematrix.denseadditivegeneticvariancematrix method)": [[846, "pybrops.model.vmat.DenseAdditiveGeneticVarianceMatrix.DenseAdditiveGeneticVarianceMatrix.incorp_taxa"]], "incorp_trait() (pybrops.model.vmat.denseadditivegeneticvariancematrix.denseadditivegeneticvariancematrix method)": [[846, "pybrops.model.vmat.DenseAdditiveGeneticVarianceMatrix.DenseAdditiveGeneticVarianceMatrix.incorp_trait"]], "insert() (pybrops.model.vmat.denseadditivegeneticvariancematrix.denseadditivegeneticvariancematrix method)": [[846, "pybrops.model.vmat.DenseAdditiveGeneticVarianceMatrix.DenseAdditiveGeneticVarianceMatrix.insert"]], "insert_taxa() (pybrops.model.vmat.denseadditivegeneticvariancematrix.denseadditivegeneticvariancematrix method)": [[846, "pybrops.model.vmat.DenseAdditiveGeneticVarianceMatrix.DenseAdditiveGeneticVarianceMatrix.insert_taxa"]], "insert_trait() (pybrops.model.vmat.denseadditivegeneticvariancematrix.denseadditivegeneticvariancematrix method)": [[846, "pybrops.model.vmat.DenseAdditiveGeneticVarianceMatrix.DenseAdditiveGeneticVarianceMatrix.insert_trait"]], "is_grouped() (pybrops.model.vmat.denseadditivegeneticvariancematrix.denseadditivegeneticvariancematrix method)": [[846, "pybrops.model.vmat.DenseAdditiveGeneticVarianceMatrix.DenseAdditiveGeneticVarianceMatrix.is_grouped"]], "is_grouped_taxa() (pybrops.model.vmat.denseadditivegeneticvariancematrix.denseadditivegeneticvariancematrix method)": [[846, "pybrops.model.vmat.DenseAdditiveGeneticVarianceMatrix.DenseAdditiveGeneticVarianceMatrix.is_grouped_taxa"]], "is_square() (pybrops.model.vmat.denseadditivegeneticvariancematrix.denseadditivegeneticvariancematrix method)": [[846, "pybrops.model.vmat.DenseAdditiveGeneticVarianceMatrix.DenseAdditiveGeneticVarianceMatrix.is_square"]], "is_square_taxa() (pybrops.model.vmat.denseadditivegeneticvariancematrix.denseadditivegeneticvariancematrix method)": [[846, "pybrops.model.vmat.DenseAdditiveGeneticVarianceMatrix.DenseAdditiveGeneticVarianceMatrix.is_square_taxa"]], "lexsort() (pybrops.model.vmat.denseadditivegeneticvariancematrix.denseadditivegeneticvariancematrix method)": [[846, "pybrops.model.vmat.DenseAdditiveGeneticVarianceMatrix.DenseAdditiveGeneticVarianceMatrix.lexsort"]], "lexsort_taxa() (pybrops.model.vmat.denseadditivegeneticvariancematrix.denseadditivegeneticvariancematrix method)": [[846, "pybrops.model.vmat.DenseAdditiveGeneticVarianceMatrix.DenseAdditiveGeneticVarianceMatrix.lexsort_taxa"]], "lexsort_trait() (pybrops.model.vmat.denseadditivegeneticvariancematrix.denseadditivegeneticvariancematrix method)": [[846, "pybrops.model.vmat.DenseAdditiveGeneticVarianceMatrix.DenseAdditiveGeneticVarianceMatrix.lexsort_trait"]], "mat (pybrops.model.vmat.denseadditivegeneticvariancematrix.denseadditivegeneticvariancematrix property)": [[846, "pybrops.model.vmat.DenseAdditiveGeneticVarianceMatrix.DenseAdditiveGeneticVarianceMatrix.mat"]], "mat_ndim (pybrops.model.vmat.denseadditivegeneticvariancematrix.denseadditivegeneticvariancematrix property)": [[846, "pybrops.model.vmat.DenseAdditiveGeneticVarianceMatrix.DenseAdditiveGeneticVarianceMatrix.mat_ndim"]], "mat_shape (pybrops.model.vmat.denseadditivegeneticvariancematrix.denseadditivegeneticvariancematrix property)": [[846, "pybrops.model.vmat.DenseAdditiveGeneticVarianceMatrix.DenseAdditiveGeneticVarianceMatrix.mat_shape"]], "nsquare (pybrops.model.vmat.denseadditivegeneticvariancematrix.denseadditivegeneticvariancematrix property)": [[846, "pybrops.model.vmat.DenseAdditiveGeneticVarianceMatrix.DenseAdditiveGeneticVarianceMatrix.nsquare"]], "nsquare_taxa (pybrops.model.vmat.denseadditivegeneticvariancematrix.denseadditivegeneticvariancematrix property)": [[846, "pybrops.model.vmat.DenseAdditiveGeneticVarianceMatrix.DenseAdditiveGeneticVarianceMatrix.nsquare_taxa"]], "ntaxa (pybrops.model.vmat.denseadditivegeneticvariancematrix.denseadditivegeneticvariancematrix property)": [[846, "pybrops.model.vmat.DenseAdditiveGeneticVarianceMatrix.DenseAdditiveGeneticVarianceMatrix.ntaxa"]], "ntrait (pybrops.model.vmat.denseadditivegeneticvariancematrix.denseadditivegeneticvariancematrix property)": [[846, "pybrops.model.vmat.DenseAdditiveGeneticVarianceMatrix.DenseAdditiveGeneticVarianceMatrix.ntrait"]], "remove() (pybrops.model.vmat.denseadditivegeneticvariancematrix.denseadditivegeneticvariancematrix method)": [[846, "pybrops.model.vmat.DenseAdditiveGeneticVarianceMatrix.DenseAdditiveGeneticVarianceMatrix.remove"]], "remove_taxa() (pybrops.model.vmat.denseadditivegeneticvariancematrix.denseadditivegeneticvariancematrix method)": [[846, "pybrops.model.vmat.DenseAdditiveGeneticVarianceMatrix.DenseAdditiveGeneticVarianceMatrix.remove_taxa"]], "remove_trait() (pybrops.model.vmat.denseadditivegeneticvariancematrix.denseadditivegeneticvariancematrix method)": [[846, "pybrops.model.vmat.DenseAdditiveGeneticVarianceMatrix.DenseAdditiveGeneticVarianceMatrix.remove_trait"]], "reorder() (pybrops.model.vmat.denseadditivegeneticvariancematrix.denseadditivegeneticvariancematrix method)": [[846, "pybrops.model.vmat.DenseAdditiveGeneticVarianceMatrix.DenseAdditiveGeneticVarianceMatrix.reorder"]], "reorder_taxa() (pybrops.model.vmat.denseadditivegeneticvariancematrix.denseadditivegeneticvariancematrix method)": [[846, "pybrops.model.vmat.DenseAdditiveGeneticVarianceMatrix.DenseAdditiveGeneticVarianceMatrix.reorder_taxa"]], "reorder_trait() (pybrops.model.vmat.denseadditivegeneticvariancematrix.denseadditivegeneticvariancematrix method)": [[846, "pybrops.model.vmat.DenseAdditiveGeneticVarianceMatrix.DenseAdditiveGeneticVarianceMatrix.reorder_trait"]], "select() (pybrops.model.vmat.denseadditivegeneticvariancematrix.denseadditivegeneticvariancematrix method)": [[846, "pybrops.model.vmat.DenseAdditiveGeneticVarianceMatrix.DenseAdditiveGeneticVarianceMatrix.select"]], "select_taxa() (pybrops.model.vmat.denseadditivegeneticvariancematrix.denseadditivegeneticvariancematrix method)": [[846, "pybrops.model.vmat.DenseAdditiveGeneticVarianceMatrix.DenseAdditiveGeneticVarianceMatrix.select_taxa"]], "select_trait() (pybrops.model.vmat.denseadditivegeneticvariancematrix.denseadditivegeneticvariancematrix method)": [[846, "pybrops.model.vmat.DenseAdditiveGeneticVarianceMatrix.DenseAdditiveGeneticVarianceMatrix.select_trait"]], "sort() (pybrops.model.vmat.denseadditivegeneticvariancematrix.denseadditivegeneticvariancematrix method)": [[846, "pybrops.model.vmat.DenseAdditiveGeneticVarianceMatrix.DenseAdditiveGeneticVarianceMatrix.sort"]], "sort_taxa() (pybrops.model.vmat.denseadditivegeneticvariancematrix.denseadditivegeneticvariancematrix method)": [[846, "pybrops.model.vmat.DenseAdditiveGeneticVarianceMatrix.DenseAdditiveGeneticVarianceMatrix.sort_taxa"]], "sort_trait() (pybrops.model.vmat.denseadditivegeneticvariancematrix.denseadditivegeneticvariancematrix method)": [[846, "pybrops.model.vmat.DenseAdditiveGeneticVarianceMatrix.DenseAdditiveGeneticVarianceMatrix.sort_trait"]], "square_axes (pybrops.model.vmat.denseadditivegeneticvariancematrix.denseadditivegeneticvariancematrix property)": [[846, "pybrops.model.vmat.DenseAdditiveGeneticVarianceMatrix.DenseAdditiveGeneticVarianceMatrix.square_axes"]], "square_axes_len (pybrops.model.vmat.denseadditivegeneticvariancematrix.denseadditivegeneticvariancematrix property)": [[846, "pybrops.model.vmat.DenseAdditiveGeneticVarianceMatrix.DenseAdditiveGeneticVarianceMatrix.square_axes_len"]], "square_taxa_axes (pybrops.model.vmat.denseadditivegeneticvariancematrix.denseadditivegeneticvariancematrix property)": [[846, "pybrops.model.vmat.DenseAdditiveGeneticVarianceMatrix.DenseAdditiveGeneticVarianceMatrix.square_taxa_axes"]], "square_taxa_axes_len (pybrops.model.vmat.denseadditivegeneticvariancematrix.denseadditivegeneticvariancematrix property)": [[846, "pybrops.model.vmat.DenseAdditiveGeneticVarianceMatrix.DenseAdditiveGeneticVarianceMatrix.square_taxa_axes_len"]], "taxa (pybrops.model.vmat.denseadditivegeneticvariancematrix.denseadditivegeneticvariancematrix property)": [[846, "pybrops.model.vmat.DenseAdditiveGeneticVarianceMatrix.DenseAdditiveGeneticVarianceMatrix.taxa"]], "taxa_axis (pybrops.model.vmat.denseadditivegeneticvariancematrix.denseadditivegeneticvariancematrix property)": [[846, "pybrops.model.vmat.DenseAdditiveGeneticVarianceMatrix.DenseAdditiveGeneticVarianceMatrix.taxa_axis"]], "taxa_grp (pybrops.model.vmat.denseadditivegeneticvariancematrix.denseadditivegeneticvariancematrix property)": [[846, "pybrops.model.vmat.DenseAdditiveGeneticVarianceMatrix.DenseAdditiveGeneticVarianceMatrix.taxa_grp"]], "taxa_grp_len (pybrops.model.vmat.denseadditivegeneticvariancematrix.denseadditivegeneticvariancematrix property)": [[846, "pybrops.model.vmat.DenseAdditiveGeneticVarianceMatrix.DenseAdditiveGeneticVarianceMatrix.taxa_grp_len"]], "taxa_grp_name (pybrops.model.vmat.denseadditivegeneticvariancematrix.denseadditivegeneticvariancematrix property)": [[846, "pybrops.model.vmat.DenseAdditiveGeneticVarianceMatrix.DenseAdditiveGeneticVarianceMatrix.taxa_grp_name"]], "taxa_grp_spix (pybrops.model.vmat.denseadditivegeneticvariancematrix.denseadditivegeneticvariancematrix property)": [[846, "pybrops.model.vmat.DenseAdditiveGeneticVarianceMatrix.DenseAdditiveGeneticVarianceMatrix.taxa_grp_spix"]], "taxa_grp_stix (pybrops.model.vmat.denseadditivegeneticvariancematrix.denseadditivegeneticvariancematrix property)": [[846, "pybrops.model.vmat.DenseAdditiveGeneticVarianceMatrix.DenseAdditiveGeneticVarianceMatrix.taxa_grp_stix"]], "to_csv() (pybrops.model.vmat.denseadditivegeneticvariancematrix.denseadditivegeneticvariancematrix method)": [[846, "pybrops.model.vmat.DenseAdditiveGeneticVarianceMatrix.DenseAdditiveGeneticVarianceMatrix.to_csv"]], "to_hdf5() (pybrops.model.vmat.denseadditivegeneticvariancematrix.denseadditivegeneticvariancematrix method)": [[846, "pybrops.model.vmat.DenseAdditiveGeneticVarianceMatrix.DenseAdditiveGeneticVarianceMatrix.to_hdf5"]], "to_pandas() (pybrops.model.vmat.denseadditivegeneticvariancematrix.denseadditivegeneticvariancematrix method)": [[846, "pybrops.model.vmat.DenseAdditiveGeneticVarianceMatrix.DenseAdditiveGeneticVarianceMatrix.to_pandas"]], "trait (pybrops.model.vmat.denseadditivegeneticvariancematrix.denseadditivegeneticvariancematrix property)": [[846, "pybrops.model.vmat.DenseAdditiveGeneticVarianceMatrix.DenseAdditiveGeneticVarianceMatrix.trait"]], "trait_axis (pybrops.model.vmat.denseadditivegeneticvariancematrix.denseadditivegeneticvariancematrix property)": [[846, "pybrops.model.vmat.DenseAdditiveGeneticVarianceMatrix.DenseAdditiveGeneticVarianceMatrix.trait_axis"]], "ungroup() (pybrops.model.vmat.denseadditivegeneticvariancematrix.denseadditivegeneticvariancematrix method)": [[846, "pybrops.model.vmat.DenseAdditiveGeneticVarianceMatrix.DenseAdditiveGeneticVarianceMatrix.ungroup"]], "ungroup_taxa() (pybrops.model.vmat.denseadditivegeneticvariancematrix.denseadditivegeneticvariancematrix method)": [[846, "pybrops.model.vmat.DenseAdditiveGeneticVarianceMatrix.DenseAdditiveGeneticVarianceMatrix.ungroup_taxa"]], "check_is_denseadditivegeneticvariancematrix() (in module pybrops.model.vmat.denseadditivegeneticvariancematrix)": [[847, "pybrops.model.vmat.DenseAdditiveGeneticVarianceMatrix.check_is_DenseAdditiveGeneticVarianceMatrix"]], "pybrops.model.vmat.denseadditivegenicvariancematrix": [[848, "module-pybrops.model.vmat.DenseAdditiveGenicVarianceMatrix"]], "denseadditivegenicvariancematrix (class in pybrops.model.vmat.denseadditivegenicvariancematrix)": [[849, "pybrops.model.vmat.DenseAdditiveGenicVarianceMatrix.DenseAdditiveGenicVarianceMatrix"]], "__add__() (pybrops.model.vmat.denseadditivegenicvariancematrix.denseadditivegenicvariancematrix method)": [[849, "pybrops.model.vmat.DenseAdditiveGenicVarianceMatrix.DenseAdditiveGenicVarianceMatrix.__add__"]], "__mul__() (pybrops.model.vmat.denseadditivegenicvariancematrix.denseadditivegenicvariancematrix method)": [[849, "pybrops.model.vmat.DenseAdditiveGenicVarianceMatrix.DenseAdditiveGenicVarianceMatrix.__mul__"]], "adjoin() (pybrops.model.vmat.denseadditivegenicvariancematrix.denseadditivegenicvariancematrix method)": [[849, "pybrops.model.vmat.DenseAdditiveGenicVarianceMatrix.DenseAdditiveGenicVarianceMatrix.adjoin"]], "adjoin_taxa() (pybrops.model.vmat.denseadditivegenicvariancematrix.denseadditivegenicvariancematrix method)": [[849, "pybrops.model.vmat.DenseAdditiveGenicVarianceMatrix.DenseAdditiveGenicVarianceMatrix.adjoin_taxa"]], "adjoin_trait() (pybrops.model.vmat.denseadditivegenicvariancematrix.denseadditivegenicvariancematrix method)": [[849, "pybrops.model.vmat.DenseAdditiveGenicVarianceMatrix.DenseAdditiveGenicVarianceMatrix.adjoin_trait"]], "append() (pybrops.model.vmat.denseadditivegenicvariancematrix.denseadditivegenicvariancematrix method)": [[849, "pybrops.model.vmat.DenseAdditiveGenicVarianceMatrix.DenseAdditiveGenicVarianceMatrix.append"]], "append_taxa() (pybrops.model.vmat.denseadditivegenicvariancematrix.denseadditivegenicvariancematrix method)": [[849, "pybrops.model.vmat.DenseAdditiveGenicVarianceMatrix.DenseAdditiveGenicVarianceMatrix.append_taxa"]], "append_trait() (pybrops.model.vmat.denseadditivegenicvariancematrix.denseadditivegenicvariancematrix method)": [[849, "pybrops.model.vmat.DenseAdditiveGenicVarianceMatrix.DenseAdditiveGenicVarianceMatrix.append_trait"]], "concat() (pybrops.model.vmat.denseadditivegenicvariancematrix.denseadditivegenicvariancematrix class method)": [[849, "pybrops.model.vmat.DenseAdditiveGenicVarianceMatrix.DenseAdditiveGenicVarianceMatrix.concat"]], "concat_taxa() (pybrops.model.vmat.denseadditivegenicvariancematrix.denseadditivegenicvariancematrix class method)": [[849, "pybrops.model.vmat.DenseAdditiveGenicVarianceMatrix.DenseAdditiveGenicVarianceMatrix.concat_taxa"]], "concat_trait() (pybrops.model.vmat.denseadditivegenicvariancematrix.denseadditivegenicvariancematrix class method)": [[849, "pybrops.model.vmat.DenseAdditiveGenicVarianceMatrix.DenseAdditiveGenicVarianceMatrix.concat_trait"]], "copy() (pybrops.model.vmat.denseadditivegenicvariancematrix.denseadditivegenicvariancematrix method)": [[849, "pybrops.model.vmat.DenseAdditiveGenicVarianceMatrix.DenseAdditiveGenicVarianceMatrix.copy"]], "deepcopy() (pybrops.model.vmat.denseadditivegenicvariancematrix.denseadditivegenicvariancematrix method)": [[849, "pybrops.model.vmat.DenseAdditiveGenicVarianceMatrix.DenseAdditiveGenicVarianceMatrix.deepcopy"]], "delete() (pybrops.model.vmat.denseadditivegenicvariancematrix.denseadditivegenicvariancematrix method)": [[849, "pybrops.model.vmat.DenseAdditiveGenicVarianceMatrix.DenseAdditiveGenicVarianceMatrix.delete"]], "delete_taxa() (pybrops.model.vmat.denseadditivegenicvariancematrix.denseadditivegenicvariancematrix method)": [[849, "pybrops.model.vmat.DenseAdditiveGenicVarianceMatrix.DenseAdditiveGenicVarianceMatrix.delete_taxa"]], "delete_trait() (pybrops.model.vmat.denseadditivegenicvariancematrix.denseadditivegenicvariancematrix method)": [[849, "pybrops.model.vmat.DenseAdditiveGenicVarianceMatrix.DenseAdditiveGenicVarianceMatrix.delete_trait"]], "epgc (pybrops.model.vmat.denseadditivegenicvariancematrix.denseadditivegenicvariancematrix property)": [[849, "pybrops.model.vmat.DenseAdditiveGenicVarianceMatrix.DenseAdditiveGenicVarianceMatrix.epgc"]], "from_algmod() (pybrops.model.vmat.denseadditivegenicvariancematrix.denseadditivegenicvariancematrix class method)": [[849, "pybrops.model.vmat.DenseAdditiveGenicVarianceMatrix.DenseAdditiveGenicVarianceMatrix.from_algmod"]], "from_csv() (pybrops.model.vmat.denseadditivegenicvariancematrix.denseadditivegenicvariancematrix class method)": [[849, "pybrops.model.vmat.DenseAdditiveGenicVarianceMatrix.DenseAdditiveGenicVarianceMatrix.from_csv"]], "from_gmod() (pybrops.model.vmat.denseadditivegenicvariancematrix.denseadditivegenicvariancematrix class method)": [[849, "pybrops.model.vmat.DenseAdditiveGenicVarianceMatrix.DenseAdditiveGenicVarianceMatrix.from_gmod"]], "from_hdf5() (pybrops.model.vmat.denseadditivegenicvariancematrix.denseadditivegenicvariancematrix class method)": [[849, "pybrops.model.vmat.DenseAdditiveGenicVarianceMatrix.DenseAdditiveGenicVarianceMatrix.from_hdf5"]], "from_pandas() (pybrops.model.vmat.denseadditivegenicvariancematrix.denseadditivegenicvariancematrix class method)": [[849, "pybrops.model.vmat.DenseAdditiveGenicVarianceMatrix.DenseAdditiveGenicVarianceMatrix.from_pandas"]], "group() (pybrops.model.vmat.denseadditivegenicvariancematrix.denseadditivegenicvariancematrix method)": [[849, "pybrops.model.vmat.DenseAdditiveGenicVarianceMatrix.DenseAdditiveGenicVarianceMatrix.group"]], "group_taxa() (pybrops.model.vmat.denseadditivegenicvariancematrix.denseadditivegenicvariancematrix method)": [[849, "pybrops.model.vmat.DenseAdditiveGenicVarianceMatrix.DenseAdditiveGenicVarianceMatrix.group_taxa"]], "incorp() (pybrops.model.vmat.denseadditivegenicvariancematrix.denseadditivegenicvariancematrix method)": [[849, "pybrops.model.vmat.DenseAdditiveGenicVarianceMatrix.DenseAdditiveGenicVarianceMatrix.incorp"]], "incorp_taxa() (pybrops.model.vmat.denseadditivegenicvariancematrix.denseadditivegenicvariancematrix method)": [[849, "pybrops.model.vmat.DenseAdditiveGenicVarianceMatrix.DenseAdditiveGenicVarianceMatrix.incorp_taxa"]], "incorp_trait() (pybrops.model.vmat.denseadditivegenicvariancematrix.denseadditivegenicvariancematrix method)": [[849, "pybrops.model.vmat.DenseAdditiveGenicVarianceMatrix.DenseAdditiveGenicVarianceMatrix.incorp_trait"]], "insert() (pybrops.model.vmat.denseadditivegenicvariancematrix.denseadditivegenicvariancematrix method)": [[849, "pybrops.model.vmat.DenseAdditiveGenicVarianceMatrix.DenseAdditiveGenicVarianceMatrix.insert"]], "insert_taxa() (pybrops.model.vmat.denseadditivegenicvariancematrix.denseadditivegenicvariancematrix method)": [[849, "pybrops.model.vmat.DenseAdditiveGenicVarianceMatrix.DenseAdditiveGenicVarianceMatrix.insert_taxa"]], "insert_trait() (pybrops.model.vmat.denseadditivegenicvariancematrix.denseadditivegenicvariancematrix method)": [[849, "pybrops.model.vmat.DenseAdditiveGenicVarianceMatrix.DenseAdditiveGenicVarianceMatrix.insert_trait"]], "is_grouped() (pybrops.model.vmat.denseadditivegenicvariancematrix.denseadditivegenicvariancematrix method)": [[849, "pybrops.model.vmat.DenseAdditiveGenicVarianceMatrix.DenseAdditiveGenicVarianceMatrix.is_grouped"]], "is_grouped_taxa() (pybrops.model.vmat.denseadditivegenicvariancematrix.denseadditivegenicvariancematrix method)": [[849, "pybrops.model.vmat.DenseAdditiveGenicVarianceMatrix.DenseAdditiveGenicVarianceMatrix.is_grouped_taxa"]], "is_square() (pybrops.model.vmat.denseadditivegenicvariancematrix.denseadditivegenicvariancematrix method)": [[849, "pybrops.model.vmat.DenseAdditiveGenicVarianceMatrix.DenseAdditiveGenicVarianceMatrix.is_square"]], "is_square_taxa() (pybrops.model.vmat.denseadditivegenicvariancematrix.denseadditivegenicvariancematrix method)": [[849, "pybrops.model.vmat.DenseAdditiveGenicVarianceMatrix.DenseAdditiveGenicVarianceMatrix.is_square_taxa"]], "lexsort() (pybrops.model.vmat.denseadditivegenicvariancematrix.denseadditivegenicvariancematrix method)": [[849, "pybrops.model.vmat.DenseAdditiveGenicVarianceMatrix.DenseAdditiveGenicVarianceMatrix.lexsort"]], "lexsort_taxa() (pybrops.model.vmat.denseadditivegenicvariancematrix.denseadditivegenicvariancematrix method)": [[849, "pybrops.model.vmat.DenseAdditiveGenicVarianceMatrix.DenseAdditiveGenicVarianceMatrix.lexsort_taxa"]], "lexsort_trait() (pybrops.model.vmat.denseadditivegenicvariancematrix.denseadditivegenicvariancematrix method)": [[849, "pybrops.model.vmat.DenseAdditiveGenicVarianceMatrix.DenseAdditiveGenicVarianceMatrix.lexsort_trait"]], "mat (pybrops.model.vmat.denseadditivegenicvariancematrix.denseadditivegenicvariancematrix property)": [[849, "pybrops.model.vmat.DenseAdditiveGenicVarianceMatrix.DenseAdditiveGenicVarianceMatrix.mat"]], "mat_ndim (pybrops.model.vmat.denseadditivegenicvariancematrix.denseadditivegenicvariancematrix property)": [[849, "pybrops.model.vmat.DenseAdditiveGenicVarianceMatrix.DenseAdditiveGenicVarianceMatrix.mat_ndim"]], "mat_shape (pybrops.model.vmat.denseadditivegenicvariancematrix.denseadditivegenicvariancematrix property)": [[849, "pybrops.model.vmat.DenseAdditiveGenicVarianceMatrix.DenseAdditiveGenicVarianceMatrix.mat_shape"]], "nsquare (pybrops.model.vmat.denseadditivegenicvariancematrix.denseadditivegenicvariancematrix property)": [[849, "pybrops.model.vmat.DenseAdditiveGenicVarianceMatrix.DenseAdditiveGenicVarianceMatrix.nsquare"]], "nsquare_taxa (pybrops.model.vmat.denseadditivegenicvariancematrix.denseadditivegenicvariancematrix property)": [[849, "pybrops.model.vmat.DenseAdditiveGenicVarianceMatrix.DenseAdditiveGenicVarianceMatrix.nsquare_taxa"]], "ntaxa (pybrops.model.vmat.denseadditivegenicvariancematrix.denseadditivegenicvariancematrix property)": [[849, "pybrops.model.vmat.DenseAdditiveGenicVarianceMatrix.DenseAdditiveGenicVarianceMatrix.ntaxa"]], "ntrait (pybrops.model.vmat.denseadditivegenicvariancematrix.denseadditivegenicvariancematrix property)": [[849, "pybrops.model.vmat.DenseAdditiveGenicVarianceMatrix.DenseAdditiveGenicVarianceMatrix.ntrait"]], "remove() (pybrops.model.vmat.denseadditivegenicvariancematrix.denseadditivegenicvariancematrix method)": [[849, "pybrops.model.vmat.DenseAdditiveGenicVarianceMatrix.DenseAdditiveGenicVarianceMatrix.remove"]], "remove_taxa() (pybrops.model.vmat.denseadditivegenicvariancematrix.denseadditivegenicvariancematrix method)": [[849, "pybrops.model.vmat.DenseAdditiveGenicVarianceMatrix.DenseAdditiveGenicVarianceMatrix.remove_taxa"]], "remove_trait() (pybrops.model.vmat.denseadditivegenicvariancematrix.denseadditivegenicvariancematrix method)": [[849, "pybrops.model.vmat.DenseAdditiveGenicVarianceMatrix.DenseAdditiveGenicVarianceMatrix.remove_trait"]], "reorder() (pybrops.model.vmat.denseadditivegenicvariancematrix.denseadditivegenicvariancematrix method)": [[849, "pybrops.model.vmat.DenseAdditiveGenicVarianceMatrix.DenseAdditiveGenicVarianceMatrix.reorder"]], "reorder_taxa() (pybrops.model.vmat.denseadditivegenicvariancematrix.denseadditivegenicvariancematrix method)": [[849, "pybrops.model.vmat.DenseAdditiveGenicVarianceMatrix.DenseAdditiveGenicVarianceMatrix.reorder_taxa"]], "reorder_trait() (pybrops.model.vmat.denseadditivegenicvariancematrix.denseadditivegenicvariancematrix method)": [[849, "pybrops.model.vmat.DenseAdditiveGenicVarianceMatrix.DenseAdditiveGenicVarianceMatrix.reorder_trait"]], "select() (pybrops.model.vmat.denseadditivegenicvariancematrix.denseadditivegenicvariancematrix method)": [[849, "pybrops.model.vmat.DenseAdditiveGenicVarianceMatrix.DenseAdditiveGenicVarianceMatrix.select"]], "select_taxa() (pybrops.model.vmat.denseadditivegenicvariancematrix.denseadditivegenicvariancematrix method)": [[849, "pybrops.model.vmat.DenseAdditiveGenicVarianceMatrix.DenseAdditiveGenicVarianceMatrix.select_taxa"]], "select_trait() (pybrops.model.vmat.denseadditivegenicvariancematrix.denseadditivegenicvariancematrix method)": [[849, "pybrops.model.vmat.DenseAdditiveGenicVarianceMatrix.DenseAdditiveGenicVarianceMatrix.select_trait"]], "sort() (pybrops.model.vmat.denseadditivegenicvariancematrix.denseadditivegenicvariancematrix method)": [[849, "pybrops.model.vmat.DenseAdditiveGenicVarianceMatrix.DenseAdditiveGenicVarianceMatrix.sort"]], "sort_taxa() (pybrops.model.vmat.denseadditivegenicvariancematrix.denseadditivegenicvariancematrix method)": [[849, "pybrops.model.vmat.DenseAdditiveGenicVarianceMatrix.DenseAdditiveGenicVarianceMatrix.sort_taxa"]], "sort_trait() (pybrops.model.vmat.denseadditivegenicvariancematrix.denseadditivegenicvariancematrix method)": [[849, "pybrops.model.vmat.DenseAdditiveGenicVarianceMatrix.DenseAdditiveGenicVarianceMatrix.sort_trait"]], "square_axes (pybrops.model.vmat.denseadditivegenicvariancematrix.denseadditivegenicvariancematrix property)": [[849, "pybrops.model.vmat.DenseAdditiveGenicVarianceMatrix.DenseAdditiveGenicVarianceMatrix.square_axes"]], "square_axes_len (pybrops.model.vmat.denseadditivegenicvariancematrix.denseadditivegenicvariancematrix property)": [[849, "pybrops.model.vmat.DenseAdditiveGenicVarianceMatrix.DenseAdditiveGenicVarianceMatrix.square_axes_len"]], "square_taxa_axes (pybrops.model.vmat.denseadditivegenicvariancematrix.denseadditivegenicvariancematrix property)": [[849, "pybrops.model.vmat.DenseAdditiveGenicVarianceMatrix.DenseAdditiveGenicVarianceMatrix.square_taxa_axes"]], "square_taxa_axes_len (pybrops.model.vmat.denseadditivegenicvariancematrix.denseadditivegenicvariancematrix property)": [[849, "pybrops.model.vmat.DenseAdditiveGenicVarianceMatrix.DenseAdditiveGenicVarianceMatrix.square_taxa_axes_len"]], "taxa (pybrops.model.vmat.denseadditivegenicvariancematrix.denseadditivegenicvariancematrix property)": [[849, "pybrops.model.vmat.DenseAdditiveGenicVarianceMatrix.DenseAdditiveGenicVarianceMatrix.taxa"]], "taxa_axis (pybrops.model.vmat.denseadditivegenicvariancematrix.denseadditivegenicvariancematrix property)": [[849, "pybrops.model.vmat.DenseAdditiveGenicVarianceMatrix.DenseAdditiveGenicVarianceMatrix.taxa_axis"]], "taxa_grp (pybrops.model.vmat.denseadditivegenicvariancematrix.denseadditivegenicvariancematrix property)": [[849, "pybrops.model.vmat.DenseAdditiveGenicVarianceMatrix.DenseAdditiveGenicVarianceMatrix.taxa_grp"]], "taxa_grp_len (pybrops.model.vmat.denseadditivegenicvariancematrix.denseadditivegenicvariancematrix property)": [[849, "pybrops.model.vmat.DenseAdditiveGenicVarianceMatrix.DenseAdditiveGenicVarianceMatrix.taxa_grp_len"]], "taxa_grp_name (pybrops.model.vmat.denseadditivegenicvariancematrix.denseadditivegenicvariancematrix property)": [[849, "pybrops.model.vmat.DenseAdditiveGenicVarianceMatrix.DenseAdditiveGenicVarianceMatrix.taxa_grp_name"]], "taxa_grp_spix (pybrops.model.vmat.denseadditivegenicvariancematrix.denseadditivegenicvariancematrix property)": [[849, "pybrops.model.vmat.DenseAdditiveGenicVarianceMatrix.DenseAdditiveGenicVarianceMatrix.taxa_grp_spix"]], "taxa_grp_stix (pybrops.model.vmat.denseadditivegenicvariancematrix.denseadditivegenicvariancematrix property)": [[849, "pybrops.model.vmat.DenseAdditiveGenicVarianceMatrix.DenseAdditiveGenicVarianceMatrix.taxa_grp_stix"]], "to_csv() (pybrops.model.vmat.denseadditivegenicvariancematrix.denseadditivegenicvariancematrix method)": [[849, "pybrops.model.vmat.DenseAdditiveGenicVarianceMatrix.DenseAdditiveGenicVarianceMatrix.to_csv"]], "to_hdf5() (pybrops.model.vmat.denseadditivegenicvariancematrix.denseadditivegenicvariancematrix method)": [[849, "pybrops.model.vmat.DenseAdditiveGenicVarianceMatrix.DenseAdditiveGenicVarianceMatrix.to_hdf5"]], "to_pandas() (pybrops.model.vmat.denseadditivegenicvariancematrix.denseadditivegenicvariancematrix method)": [[849, "pybrops.model.vmat.DenseAdditiveGenicVarianceMatrix.DenseAdditiveGenicVarianceMatrix.to_pandas"]], "trait (pybrops.model.vmat.denseadditivegenicvariancematrix.denseadditivegenicvariancematrix property)": [[849, "pybrops.model.vmat.DenseAdditiveGenicVarianceMatrix.DenseAdditiveGenicVarianceMatrix.trait"]], "trait_axis (pybrops.model.vmat.denseadditivegenicvariancematrix.denseadditivegenicvariancematrix property)": [[849, "pybrops.model.vmat.DenseAdditiveGenicVarianceMatrix.DenseAdditiveGenicVarianceMatrix.trait_axis"]], "ungroup() (pybrops.model.vmat.denseadditivegenicvariancematrix.denseadditivegenicvariancematrix method)": [[849, "pybrops.model.vmat.DenseAdditiveGenicVarianceMatrix.DenseAdditiveGenicVarianceMatrix.ungroup"]], "ungroup_taxa() (pybrops.model.vmat.denseadditivegenicvariancematrix.denseadditivegenicvariancematrix method)": [[849, "pybrops.model.vmat.DenseAdditiveGenicVarianceMatrix.DenseAdditiveGenicVarianceMatrix.ungroup_taxa"]], "check_is_denseadditivegenicvariancematrix() (in module pybrops.model.vmat.denseadditivegenicvariancematrix)": [[850, "pybrops.model.vmat.DenseAdditiveGenicVarianceMatrix.check_is_DenseAdditiveGenicVarianceMatrix"]], "pybrops.model.vmat.densedihybriddhadditivegeneticvariancematrix": [[851, "module-pybrops.model.vmat.DenseDihybridDHAdditiveGeneticVarianceMatrix"]], "densedihybriddhadditivegeneticvariancematrix (class in pybrops.model.vmat.densedihybriddhadditivegeneticvariancematrix)": [[852, "pybrops.model.vmat.DenseDihybridDHAdditiveGeneticVarianceMatrix.DenseDihybridDHAdditiveGeneticVarianceMatrix"]], "__add__() (pybrops.model.vmat.densedihybriddhadditivegeneticvariancematrix.densedihybriddhadditivegeneticvariancematrix method)": [[852, "pybrops.model.vmat.DenseDihybridDHAdditiveGeneticVarianceMatrix.DenseDihybridDHAdditiveGeneticVarianceMatrix.__add__"]], "__mul__() (pybrops.model.vmat.densedihybriddhadditivegeneticvariancematrix.densedihybriddhadditivegeneticvariancematrix method)": [[852, "pybrops.model.vmat.DenseDihybridDHAdditiveGeneticVarianceMatrix.DenseDihybridDHAdditiveGeneticVarianceMatrix.__mul__"]], "adjoin() (pybrops.model.vmat.densedihybriddhadditivegeneticvariancematrix.densedihybriddhadditivegeneticvariancematrix method)": [[852, "pybrops.model.vmat.DenseDihybridDHAdditiveGeneticVarianceMatrix.DenseDihybridDHAdditiveGeneticVarianceMatrix.adjoin"]], "adjoin_taxa() (pybrops.model.vmat.densedihybriddhadditivegeneticvariancematrix.densedihybriddhadditivegeneticvariancematrix method)": [[852, "pybrops.model.vmat.DenseDihybridDHAdditiveGeneticVarianceMatrix.DenseDihybridDHAdditiveGeneticVarianceMatrix.adjoin_taxa"]], "adjoin_trait() (pybrops.model.vmat.densedihybriddhadditivegeneticvariancematrix.densedihybriddhadditivegeneticvariancematrix method)": [[852, "pybrops.model.vmat.DenseDihybridDHAdditiveGeneticVarianceMatrix.DenseDihybridDHAdditiveGeneticVarianceMatrix.adjoin_trait"]], "append() (pybrops.model.vmat.densedihybriddhadditivegeneticvariancematrix.densedihybriddhadditivegeneticvariancematrix method)": [[852, "pybrops.model.vmat.DenseDihybridDHAdditiveGeneticVarianceMatrix.DenseDihybridDHAdditiveGeneticVarianceMatrix.append"]], "append_taxa() (pybrops.model.vmat.densedihybriddhadditivegeneticvariancematrix.densedihybriddhadditivegeneticvariancematrix method)": [[852, "pybrops.model.vmat.DenseDihybridDHAdditiveGeneticVarianceMatrix.DenseDihybridDHAdditiveGeneticVarianceMatrix.append_taxa"]], "append_trait() (pybrops.model.vmat.densedihybriddhadditivegeneticvariancematrix.densedihybriddhadditivegeneticvariancematrix method)": [[852, "pybrops.model.vmat.DenseDihybridDHAdditiveGeneticVarianceMatrix.DenseDihybridDHAdditiveGeneticVarianceMatrix.append_trait"]], "concat() (pybrops.model.vmat.densedihybriddhadditivegeneticvariancematrix.densedihybriddhadditivegeneticvariancematrix class method)": [[852, "pybrops.model.vmat.DenseDihybridDHAdditiveGeneticVarianceMatrix.DenseDihybridDHAdditiveGeneticVarianceMatrix.concat"]], "concat_taxa() (pybrops.model.vmat.densedihybriddhadditivegeneticvariancematrix.densedihybriddhadditivegeneticvariancematrix class method)": [[852, "pybrops.model.vmat.DenseDihybridDHAdditiveGeneticVarianceMatrix.DenseDihybridDHAdditiveGeneticVarianceMatrix.concat_taxa"]], "concat_trait() (pybrops.model.vmat.densedihybriddhadditivegeneticvariancematrix.densedihybriddhadditivegeneticvariancematrix class method)": [[852, "pybrops.model.vmat.DenseDihybridDHAdditiveGeneticVarianceMatrix.DenseDihybridDHAdditiveGeneticVarianceMatrix.concat_trait"]], "copy() (pybrops.model.vmat.densedihybriddhadditivegeneticvariancematrix.densedihybriddhadditivegeneticvariancematrix method)": [[852, "pybrops.model.vmat.DenseDihybridDHAdditiveGeneticVarianceMatrix.DenseDihybridDHAdditiveGeneticVarianceMatrix.copy"]], "deepcopy() (pybrops.model.vmat.densedihybriddhadditivegeneticvariancematrix.densedihybriddhadditivegeneticvariancematrix method)": [[852, "pybrops.model.vmat.DenseDihybridDHAdditiveGeneticVarianceMatrix.DenseDihybridDHAdditiveGeneticVarianceMatrix.deepcopy"]], "delete() (pybrops.model.vmat.densedihybriddhadditivegeneticvariancematrix.densedihybriddhadditivegeneticvariancematrix method)": [[852, "pybrops.model.vmat.DenseDihybridDHAdditiveGeneticVarianceMatrix.DenseDihybridDHAdditiveGeneticVarianceMatrix.delete"]], "delete_taxa() (pybrops.model.vmat.densedihybriddhadditivegeneticvariancematrix.densedihybriddhadditivegeneticvariancematrix method)": [[852, "pybrops.model.vmat.DenseDihybridDHAdditiveGeneticVarianceMatrix.DenseDihybridDHAdditiveGeneticVarianceMatrix.delete_taxa"]], "delete_trait() (pybrops.model.vmat.densedihybriddhadditivegeneticvariancematrix.densedihybriddhadditivegeneticvariancematrix method)": [[852, "pybrops.model.vmat.DenseDihybridDHAdditiveGeneticVarianceMatrix.DenseDihybridDHAdditiveGeneticVarianceMatrix.delete_trait"]], "epgc (pybrops.model.vmat.densedihybriddhadditivegeneticvariancematrix.densedihybriddhadditivegeneticvariancematrix property)": [[852, "pybrops.model.vmat.DenseDihybridDHAdditiveGeneticVarianceMatrix.DenseDihybridDHAdditiveGeneticVarianceMatrix.epgc"]], "female_axis (pybrops.model.vmat.densedihybriddhadditivegeneticvariancematrix.densedihybriddhadditivegeneticvariancematrix property)": [[852, "pybrops.model.vmat.DenseDihybridDHAdditiveGeneticVarianceMatrix.DenseDihybridDHAdditiveGeneticVarianceMatrix.female_axis"]], "from_algmod() (pybrops.model.vmat.densedihybriddhadditivegeneticvariancematrix.densedihybriddhadditivegeneticvariancematrix class method)": [[852, "pybrops.model.vmat.DenseDihybridDHAdditiveGeneticVarianceMatrix.DenseDihybridDHAdditiveGeneticVarianceMatrix.from_algmod"]], "from_csv() (pybrops.model.vmat.densedihybriddhadditivegeneticvariancematrix.densedihybriddhadditivegeneticvariancematrix class method)": [[852, "pybrops.model.vmat.DenseDihybridDHAdditiveGeneticVarianceMatrix.DenseDihybridDHAdditiveGeneticVarianceMatrix.from_csv"]], "from_gmod() (pybrops.model.vmat.densedihybriddhadditivegeneticvariancematrix.densedihybriddhadditivegeneticvariancematrix class method)": [[852, "pybrops.model.vmat.DenseDihybridDHAdditiveGeneticVarianceMatrix.DenseDihybridDHAdditiveGeneticVarianceMatrix.from_gmod"]], "from_hdf5() (pybrops.model.vmat.densedihybriddhadditivegeneticvariancematrix.densedihybriddhadditivegeneticvariancematrix class method)": [[852, "pybrops.model.vmat.DenseDihybridDHAdditiveGeneticVarianceMatrix.DenseDihybridDHAdditiveGeneticVarianceMatrix.from_hdf5"]], "from_pandas() (pybrops.model.vmat.densedihybriddhadditivegeneticvariancematrix.densedihybriddhadditivegeneticvariancematrix class method)": [[852, "pybrops.model.vmat.DenseDihybridDHAdditiveGeneticVarianceMatrix.DenseDihybridDHAdditiveGeneticVarianceMatrix.from_pandas"]], "group() (pybrops.model.vmat.densedihybriddhadditivegeneticvariancematrix.densedihybriddhadditivegeneticvariancematrix method)": [[852, "pybrops.model.vmat.DenseDihybridDHAdditiveGeneticVarianceMatrix.DenseDihybridDHAdditiveGeneticVarianceMatrix.group"]], "group_taxa() (pybrops.model.vmat.densedihybriddhadditivegeneticvariancematrix.densedihybriddhadditivegeneticvariancematrix method)": [[852, "pybrops.model.vmat.DenseDihybridDHAdditiveGeneticVarianceMatrix.DenseDihybridDHAdditiveGeneticVarianceMatrix.group_taxa"]], "incorp() (pybrops.model.vmat.densedihybriddhadditivegeneticvariancematrix.densedihybriddhadditivegeneticvariancematrix method)": [[852, "pybrops.model.vmat.DenseDihybridDHAdditiveGeneticVarianceMatrix.DenseDihybridDHAdditiveGeneticVarianceMatrix.incorp"]], "incorp_taxa() (pybrops.model.vmat.densedihybriddhadditivegeneticvariancematrix.densedihybriddhadditivegeneticvariancematrix method)": [[852, "pybrops.model.vmat.DenseDihybridDHAdditiveGeneticVarianceMatrix.DenseDihybridDHAdditiveGeneticVarianceMatrix.incorp_taxa"]], "incorp_trait() (pybrops.model.vmat.densedihybriddhadditivegeneticvariancematrix.densedihybriddhadditivegeneticvariancematrix method)": [[852, "pybrops.model.vmat.DenseDihybridDHAdditiveGeneticVarianceMatrix.DenseDihybridDHAdditiveGeneticVarianceMatrix.incorp_trait"]], "insert() (pybrops.model.vmat.densedihybriddhadditivegeneticvariancematrix.densedihybriddhadditivegeneticvariancematrix method)": [[852, "pybrops.model.vmat.DenseDihybridDHAdditiveGeneticVarianceMatrix.DenseDihybridDHAdditiveGeneticVarianceMatrix.insert"]], "insert_taxa() (pybrops.model.vmat.densedihybriddhadditivegeneticvariancematrix.densedihybriddhadditivegeneticvariancematrix method)": [[852, "pybrops.model.vmat.DenseDihybridDHAdditiveGeneticVarianceMatrix.DenseDihybridDHAdditiveGeneticVarianceMatrix.insert_taxa"]], "insert_trait() (pybrops.model.vmat.densedihybriddhadditivegeneticvariancematrix.densedihybriddhadditivegeneticvariancematrix method)": [[852, "pybrops.model.vmat.DenseDihybridDHAdditiveGeneticVarianceMatrix.DenseDihybridDHAdditiveGeneticVarianceMatrix.insert_trait"]], "is_grouped() (pybrops.model.vmat.densedihybriddhadditivegeneticvariancematrix.densedihybriddhadditivegeneticvariancematrix method)": [[852, "pybrops.model.vmat.DenseDihybridDHAdditiveGeneticVarianceMatrix.DenseDihybridDHAdditiveGeneticVarianceMatrix.is_grouped"]], "is_grouped_taxa() (pybrops.model.vmat.densedihybriddhadditivegeneticvariancematrix.densedihybriddhadditivegeneticvariancematrix method)": [[852, "pybrops.model.vmat.DenseDihybridDHAdditiveGeneticVarianceMatrix.DenseDihybridDHAdditiveGeneticVarianceMatrix.is_grouped_taxa"]], "is_square() (pybrops.model.vmat.densedihybriddhadditivegeneticvariancematrix.densedihybriddhadditivegeneticvariancematrix method)": [[852, "pybrops.model.vmat.DenseDihybridDHAdditiveGeneticVarianceMatrix.DenseDihybridDHAdditiveGeneticVarianceMatrix.is_square"]], "is_square_taxa() (pybrops.model.vmat.densedihybriddhadditivegeneticvariancematrix.densedihybriddhadditivegeneticvariancematrix method)": [[852, "pybrops.model.vmat.DenseDihybridDHAdditiveGeneticVarianceMatrix.DenseDihybridDHAdditiveGeneticVarianceMatrix.is_square_taxa"]], "lexsort() (pybrops.model.vmat.densedihybriddhadditivegeneticvariancematrix.densedihybriddhadditivegeneticvariancematrix method)": [[852, "pybrops.model.vmat.DenseDihybridDHAdditiveGeneticVarianceMatrix.DenseDihybridDHAdditiveGeneticVarianceMatrix.lexsort"]], "lexsort_taxa() (pybrops.model.vmat.densedihybriddhadditivegeneticvariancematrix.densedihybriddhadditivegeneticvariancematrix method)": [[852, "pybrops.model.vmat.DenseDihybridDHAdditiveGeneticVarianceMatrix.DenseDihybridDHAdditiveGeneticVarianceMatrix.lexsort_taxa"]], "lexsort_trait() (pybrops.model.vmat.densedihybriddhadditivegeneticvariancematrix.densedihybriddhadditivegeneticvariancematrix method)": [[852, "pybrops.model.vmat.DenseDihybridDHAdditiveGeneticVarianceMatrix.DenseDihybridDHAdditiveGeneticVarianceMatrix.lexsort_trait"]], "male_axis (pybrops.model.vmat.densedihybriddhadditivegeneticvariancematrix.densedihybriddhadditivegeneticvariancematrix property)": [[852, "pybrops.model.vmat.DenseDihybridDHAdditiveGeneticVarianceMatrix.DenseDihybridDHAdditiveGeneticVarianceMatrix.male_axis"]], "mat (pybrops.model.vmat.densedihybriddhadditivegeneticvariancematrix.densedihybriddhadditivegeneticvariancematrix property)": [[852, "pybrops.model.vmat.DenseDihybridDHAdditiveGeneticVarianceMatrix.DenseDihybridDHAdditiveGeneticVarianceMatrix.mat"]], "mat_ndim (pybrops.model.vmat.densedihybriddhadditivegeneticvariancematrix.densedihybriddhadditivegeneticvariancematrix property)": [[852, "pybrops.model.vmat.DenseDihybridDHAdditiveGeneticVarianceMatrix.DenseDihybridDHAdditiveGeneticVarianceMatrix.mat_ndim"]], "mat_shape (pybrops.model.vmat.densedihybriddhadditivegeneticvariancematrix.densedihybriddhadditivegeneticvariancematrix property)": [[852, "pybrops.model.vmat.DenseDihybridDHAdditiveGeneticVarianceMatrix.DenseDihybridDHAdditiveGeneticVarianceMatrix.mat_shape"]], "nfemale (pybrops.model.vmat.densedihybriddhadditivegeneticvariancematrix.densedihybriddhadditivegeneticvariancematrix property)": [[852, "pybrops.model.vmat.DenseDihybridDHAdditiveGeneticVarianceMatrix.DenseDihybridDHAdditiveGeneticVarianceMatrix.nfemale"]], "nmale (pybrops.model.vmat.densedihybriddhadditivegeneticvariancematrix.densedihybriddhadditivegeneticvariancematrix property)": [[852, "pybrops.model.vmat.DenseDihybridDHAdditiveGeneticVarianceMatrix.DenseDihybridDHAdditiveGeneticVarianceMatrix.nmale"]], "nsquare (pybrops.model.vmat.densedihybriddhadditivegeneticvariancematrix.densedihybriddhadditivegeneticvariancematrix property)": [[852, "pybrops.model.vmat.DenseDihybridDHAdditiveGeneticVarianceMatrix.DenseDihybridDHAdditiveGeneticVarianceMatrix.nsquare"]], "nsquare_taxa (pybrops.model.vmat.densedihybriddhadditivegeneticvariancematrix.densedihybriddhadditivegeneticvariancematrix property)": [[852, "pybrops.model.vmat.DenseDihybridDHAdditiveGeneticVarianceMatrix.DenseDihybridDHAdditiveGeneticVarianceMatrix.nsquare_taxa"]], "ntaxa (pybrops.model.vmat.densedihybriddhadditivegeneticvariancematrix.densedihybriddhadditivegeneticvariancematrix property)": [[852, "pybrops.model.vmat.DenseDihybridDHAdditiveGeneticVarianceMatrix.DenseDihybridDHAdditiveGeneticVarianceMatrix.ntaxa"]], "ntrait (pybrops.model.vmat.densedihybriddhadditivegeneticvariancematrix.densedihybriddhadditivegeneticvariancematrix property)": [[852, "pybrops.model.vmat.DenseDihybridDHAdditiveGeneticVarianceMatrix.DenseDihybridDHAdditiveGeneticVarianceMatrix.ntrait"]], "remove() (pybrops.model.vmat.densedihybriddhadditivegeneticvariancematrix.densedihybriddhadditivegeneticvariancematrix method)": [[852, "pybrops.model.vmat.DenseDihybridDHAdditiveGeneticVarianceMatrix.DenseDihybridDHAdditiveGeneticVarianceMatrix.remove"]], "remove_taxa() (pybrops.model.vmat.densedihybriddhadditivegeneticvariancematrix.densedihybriddhadditivegeneticvariancematrix method)": [[852, "pybrops.model.vmat.DenseDihybridDHAdditiveGeneticVarianceMatrix.DenseDihybridDHAdditiveGeneticVarianceMatrix.remove_taxa"]], "remove_trait() (pybrops.model.vmat.densedihybriddhadditivegeneticvariancematrix.densedihybriddhadditivegeneticvariancematrix method)": [[852, "pybrops.model.vmat.DenseDihybridDHAdditiveGeneticVarianceMatrix.DenseDihybridDHAdditiveGeneticVarianceMatrix.remove_trait"]], "reorder() (pybrops.model.vmat.densedihybriddhadditivegeneticvariancematrix.densedihybriddhadditivegeneticvariancematrix method)": [[852, "pybrops.model.vmat.DenseDihybridDHAdditiveGeneticVarianceMatrix.DenseDihybridDHAdditiveGeneticVarianceMatrix.reorder"]], "reorder_taxa() (pybrops.model.vmat.densedihybriddhadditivegeneticvariancematrix.densedihybriddhadditivegeneticvariancematrix method)": [[852, "pybrops.model.vmat.DenseDihybridDHAdditiveGeneticVarianceMatrix.DenseDihybridDHAdditiveGeneticVarianceMatrix.reorder_taxa"]], "reorder_trait() (pybrops.model.vmat.densedihybriddhadditivegeneticvariancematrix.densedihybriddhadditivegeneticvariancematrix method)": [[852, "pybrops.model.vmat.DenseDihybridDHAdditiveGeneticVarianceMatrix.DenseDihybridDHAdditiveGeneticVarianceMatrix.reorder_trait"]], "select() (pybrops.model.vmat.densedihybriddhadditivegeneticvariancematrix.densedihybriddhadditivegeneticvariancematrix method)": [[852, "pybrops.model.vmat.DenseDihybridDHAdditiveGeneticVarianceMatrix.DenseDihybridDHAdditiveGeneticVarianceMatrix.select"]], "select_taxa() (pybrops.model.vmat.densedihybriddhadditivegeneticvariancematrix.densedihybriddhadditivegeneticvariancematrix method)": [[852, "pybrops.model.vmat.DenseDihybridDHAdditiveGeneticVarianceMatrix.DenseDihybridDHAdditiveGeneticVarianceMatrix.select_taxa"]], "select_trait() (pybrops.model.vmat.densedihybriddhadditivegeneticvariancematrix.densedihybriddhadditivegeneticvariancematrix method)": [[852, "pybrops.model.vmat.DenseDihybridDHAdditiveGeneticVarianceMatrix.DenseDihybridDHAdditiveGeneticVarianceMatrix.select_trait"]], "sort() (pybrops.model.vmat.densedihybriddhadditivegeneticvariancematrix.densedihybriddhadditivegeneticvariancematrix method)": [[852, "pybrops.model.vmat.DenseDihybridDHAdditiveGeneticVarianceMatrix.DenseDihybridDHAdditiveGeneticVarianceMatrix.sort"]], "sort_taxa() (pybrops.model.vmat.densedihybriddhadditivegeneticvariancematrix.densedihybriddhadditivegeneticvariancematrix method)": [[852, "pybrops.model.vmat.DenseDihybridDHAdditiveGeneticVarianceMatrix.DenseDihybridDHAdditiveGeneticVarianceMatrix.sort_taxa"]], "sort_trait() (pybrops.model.vmat.densedihybriddhadditivegeneticvariancematrix.densedihybriddhadditivegeneticvariancematrix method)": [[852, "pybrops.model.vmat.DenseDihybridDHAdditiveGeneticVarianceMatrix.DenseDihybridDHAdditiveGeneticVarianceMatrix.sort_trait"]], "square_axes (pybrops.model.vmat.densedihybriddhadditivegeneticvariancematrix.densedihybriddhadditivegeneticvariancematrix property)": [[852, "pybrops.model.vmat.DenseDihybridDHAdditiveGeneticVarianceMatrix.DenseDihybridDHAdditiveGeneticVarianceMatrix.square_axes"]], "square_axes_len (pybrops.model.vmat.densedihybriddhadditivegeneticvariancematrix.densedihybriddhadditivegeneticvariancematrix property)": [[852, "pybrops.model.vmat.DenseDihybridDHAdditiveGeneticVarianceMatrix.DenseDihybridDHAdditiveGeneticVarianceMatrix.square_axes_len"]], "square_taxa_axes (pybrops.model.vmat.densedihybriddhadditivegeneticvariancematrix.densedihybriddhadditivegeneticvariancematrix property)": [[852, "pybrops.model.vmat.DenseDihybridDHAdditiveGeneticVarianceMatrix.DenseDihybridDHAdditiveGeneticVarianceMatrix.square_taxa_axes"]], "square_taxa_axes_len (pybrops.model.vmat.densedihybriddhadditivegeneticvariancematrix.densedihybriddhadditivegeneticvariancematrix property)": [[852, "pybrops.model.vmat.DenseDihybridDHAdditiveGeneticVarianceMatrix.DenseDihybridDHAdditiveGeneticVarianceMatrix.square_taxa_axes_len"]], "taxa (pybrops.model.vmat.densedihybriddhadditivegeneticvariancematrix.densedihybriddhadditivegeneticvariancematrix property)": [[852, "pybrops.model.vmat.DenseDihybridDHAdditiveGeneticVarianceMatrix.DenseDihybridDHAdditiveGeneticVarianceMatrix.taxa"]], "taxa_axis (pybrops.model.vmat.densedihybriddhadditivegeneticvariancematrix.densedihybriddhadditivegeneticvariancematrix property)": [[852, "pybrops.model.vmat.DenseDihybridDHAdditiveGeneticVarianceMatrix.DenseDihybridDHAdditiveGeneticVarianceMatrix.taxa_axis"]], "taxa_grp (pybrops.model.vmat.densedihybriddhadditivegeneticvariancematrix.densedihybriddhadditivegeneticvariancematrix property)": [[852, "pybrops.model.vmat.DenseDihybridDHAdditiveGeneticVarianceMatrix.DenseDihybridDHAdditiveGeneticVarianceMatrix.taxa_grp"]], "taxa_grp_len (pybrops.model.vmat.densedihybriddhadditivegeneticvariancematrix.densedihybriddhadditivegeneticvariancematrix property)": [[852, "pybrops.model.vmat.DenseDihybridDHAdditiveGeneticVarianceMatrix.DenseDihybridDHAdditiveGeneticVarianceMatrix.taxa_grp_len"]], "taxa_grp_name (pybrops.model.vmat.densedihybriddhadditivegeneticvariancematrix.densedihybriddhadditivegeneticvariancematrix property)": [[852, "pybrops.model.vmat.DenseDihybridDHAdditiveGeneticVarianceMatrix.DenseDihybridDHAdditiveGeneticVarianceMatrix.taxa_grp_name"]], "taxa_grp_spix (pybrops.model.vmat.densedihybriddhadditivegeneticvariancematrix.densedihybriddhadditivegeneticvariancematrix property)": [[852, "pybrops.model.vmat.DenseDihybridDHAdditiveGeneticVarianceMatrix.DenseDihybridDHAdditiveGeneticVarianceMatrix.taxa_grp_spix"]], "taxa_grp_stix (pybrops.model.vmat.densedihybriddhadditivegeneticvariancematrix.densedihybriddhadditivegeneticvariancematrix property)": [[852, "pybrops.model.vmat.DenseDihybridDHAdditiveGeneticVarianceMatrix.DenseDihybridDHAdditiveGeneticVarianceMatrix.taxa_grp_stix"]], "to_csv() (pybrops.model.vmat.densedihybriddhadditivegeneticvariancematrix.densedihybriddhadditivegeneticvariancematrix method)": [[852, "pybrops.model.vmat.DenseDihybridDHAdditiveGeneticVarianceMatrix.DenseDihybridDHAdditiveGeneticVarianceMatrix.to_csv"]], "to_hdf5() (pybrops.model.vmat.densedihybriddhadditivegeneticvariancematrix.densedihybriddhadditivegeneticvariancematrix method)": [[852, "pybrops.model.vmat.DenseDihybridDHAdditiveGeneticVarianceMatrix.DenseDihybridDHAdditiveGeneticVarianceMatrix.to_hdf5"]], "to_pandas() (pybrops.model.vmat.densedihybriddhadditivegeneticvariancematrix.densedihybriddhadditivegeneticvariancematrix method)": [[852, "pybrops.model.vmat.DenseDihybridDHAdditiveGeneticVarianceMatrix.DenseDihybridDHAdditiveGeneticVarianceMatrix.to_pandas"]], "trait (pybrops.model.vmat.densedihybriddhadditivegeneticvariancematrix.densedihybriddhadditivegeneticvariancematrix property)": [[852, "pybrops.model.vmat.DenseDihybridDHAdditiveGeneticVarianceMatrix.DenseDihybridDHAdditiveGeneticVarianceMatrix.trait"]], "trait_axis (pybrops.model.vmat.densedihybriddhadditivegeneticvariancematrix.densedihybriddhadditivegeneticvariancematrix property)": [[852, "pybrops.model.vmat.DenseDihybridDHAdditiveGeneticVarianceMatrix.DenseDihybridDHAdditiveGeneticVarianceMatrix.trait_axis"]], "ungroup() (pybrops.model.vmat.densedihybriddhadditivegeneticvariancematrix.densedihybriddhadditivegeneticvariancematrix method)": [[852, "pybrops.model.vmat.DenseDihybridDHAdditiveGeneticVarianceMatrix.DenseDihybridDHAdditiveGeneticVarianceMatrix.ungroup"]], "ungroup_taxa() (pybrops.model.vmat.densedihybriddhadditivegeneticvariancematrix.densedihybriddhadditivegeneticvariancematrix method)": [[852, "pybrops.model.vmat.DenseDihybridDHAdditiveGeneticVarianceMatrix.DenseDihybridDHAdditiveGeneticVarianceMatrix.ungroup_taxa"]], "check_is_densedihybriddhadditivegeneticvariancematrix() (in module pybrops.model.vmat.densedihybriddhadditivegeneticvariancematrix)": [[853, "pybrops.model.vmat.DenseDihybridDHAdditiveGeneticVarianceMatrix.check_is_DenseDihybridDHAdditiveGeneticVarianceMatrix"]], "pybrops.model.vmat.densedihybriddhadditivegenicvariancematrix": [[854, "module-pybrops.model.vmat.DenseDihybridDHAdditiveGenicVarianceMatrix"]], "densedihybriddhadditivegenicvariancematrix (class in pybrops.model.vmat.densedihybriddhadditivegenicvariancematrix)": [[855, "pybrops.model.vmat.DenseDihybridDHAdditiveGenicVarianceMatrix.DenseDihybridDHAdditiveGenicVarianceMatrix"]], "__add__() (pybrops.model.vmat.densedihybriddhadditivegenicvariancematrix.densedihybriddhadditivegenicvariancematrix method)": [[855, "pybrops.model.vmat.DenseDihybridDHAdditiveGenicVarianceMatrix.DenseDihybridDHAdditiveGenicVarianceMatrix.__add__"]], "__mul__() (pybrops.model.vmat.densedihybriddhadditivegenicvariancematrix.densedihybriddhadditivegenicvariancematrix method)": [[855, "pybrops.model.vmat.DenseDihybridDHAdditiveGenicVarianceMatrix.DenseDihybridDHAdditiveGenicVarianceMatrix.__mul__"]], "adjoin() (pybrops.model.vmat.densedihybriddhadditivegenicvariancematrix.densedihybriddhadditivegenicvariancematrix method)": [[855, "pybrops.model.vmat.DenseDihybridDHAdditiveGenicVarianceMatrix.DenseDihybridDHAdditiveGenicVarianceMatrix.adjoin"]], "adjoin_taxa() (pybrops.model.vmat.densedihybriddhadditivegenicvariancematrix.densedihybriddhadditivegenicvariancematrix method)": [[855, "pybrops.model.vmat.DenseDihybridDHAdditiveGenicVarianceMatrix.DenseDihybridDHAdditiveGenicVarianceMatrix.adjoin_taxa"]], "adjoin_trait() (pybrops.model.vmat.densedihybriddhadditivegenicvariancematrix.densedihybriddhadditivegenicvariancematrix method)": [[855, "pybrops.model.vmat.DenseDihybridDHAdditiveGenicVarianceMatrix.DenseDihybridDHAdditiveGenicVarianceMatrix.adjoin_trait"]], "append() (pybrops.model.vmat.densedihybriddhadditivegenicvariancematrix.densedihybriddhadditivegenicvariancematrix method)": [[855, "pybrops.model.vmat.DenseDihybridDHAdditiveGenicVarianceMatrix.DenseDihybridDHAdditiveGenicVarianceMatrix.append"]], "append_taxa() (pybrops.model.vmat.densedihybriddhadditivegenicvariancematrix.densedihybriddhadditivegenicvariancematrix method)": [[855, "pybrops.model.vmat.DenseDihybridDHAdditiveGenicVarianceMatrix.DenseDihybridDHAdditiveGenicVarianceMatrix.append_taxa"]], "append_trait() (pybrops.model.vmat.densedihybriddhadditivegenicvariancematrix.densedihybriddhadditivegenicvariancematrix method)": [[855, "pybrops.model.vmat.DenseDihybridDHAdditiveGenicVarianceMatrix.DenseDihybridDHAdditiveGenicVarianceMatrix.append_trait"]], "concat() (pybrops.model.vmat.densedihybriddhadditivegenicvariancematrix.densedihybriddhadditivegenicvariancematrix class method)": [[855, "pybrops.model.vmat.DenseDihybridDHAdditiveGenicVarianceMatrix.DenseDihybridDHAdditiveGenicVarianceMatrix.concat"]], "concat_taxa() (pybrops.model.vmat.densedihybriddhadditivegenicvariancematrix.densedihybriddhadditivegenicvariancematrix class method)": [[855, "pybrops.model.vmat.DenseDihybridDHAdditiveGenicVarianceMatrix.DenseDihybridDHAdditiveGenicVarianceMatrix.concat_taxa"]], "concat_trait() (pybrops.model.vmat.densedihybriddhadditivegenicvariancematrix.densedihybriddhadditivegenicvariancematrix class method)": [[855, "pybrops.model.vmat.DenseDihybridDHAdditiveGenicVarianceMatrix.DenseDihybridDHAdditiveGenicVarianceMatrix.concat_trait"]], "copy() (pybrops.model.vmat.densedihybriddhadditivegenicvariancematrix.densedihybriddhadditivegenicvariancematrix method)": [[855, "pybrops.model.vmat.DenseDihybridDHAdditiveGenicVarianceMatrix.DenseDihybridDHAdditiveGenicVarianceMatrix.copy"]], "deepcopy() (pybrops.model.vmat.densedihybriddhadditivegenicvariancematrix.densedihybriddhadditivegenicvariancematrix method)": [[855, "pybrops.model.vmat.DenseDihybridDHAdditiveGenicVarianceMatrix.DenseDihybridDHAdditiveGenicVarianceMatrix.deepcopy"]], "delete() (pybrops.model.vmat.densedihybriddhadditivegenicvariancematrix.densedihybriddhadditivegenicvariancematrix method)": [[855, "pybrops.model.vmat.DenseDihybridDHAdditiveGenicVarianceMatrix.DenseDihybridDHAdditiveGenicVarianceMatrix.delete"]], "delete_taxa() (pybrops.model.vmat.densedihybriddhadditivegenicvariancematrix.densedihybriddhadditivegenicvariancematrix method)": [[855, "pybrops.model.vmat.DenseDihybridDHAdditiveGenicVarianceMatrix.DenseDihybridDHAdditiveGenicVarianceMatrix.delete_taxa"]], "delete_trait() (pybrops.model.vmat.densedihybriddhadditivegenicvariancematrix.densedihybriddhadditivegenicvariancematrix method)": [[855, "pybrops.model.vmat.DenseDihybridDHAdditiveGenicVarianceMatrix.DenseDihybridDHAdditiveGenicVarianceMatrix.delete_trait"]], "epgc (pybrops.model.vmat.densedihybriddhadditivegenicvariancematrix.densedihybriddhadditivegenicvariancematrix property)": [[855, "pybrops.model.vmat.DenseDihybridDHAdditiveGenicVarianceMatrix.DenseDihybridDHAdditiveGenicVarianceMatrix.epgc"]], "female_axis (pybrops.model.vmat.densedihybriddhadditivegenicvariancematrix.densedihybriddhadditivegenicvariancematrix property)": [[855, "pybrops.model.vmat.DenseDihybridDHAdditiveGenicVarianceMatrix.DenseDihybridDHAdditiveGenicVarianceMatrix.female_axis"]], "from_algmod() (pybrops.model.vmat.densedihybriddhadditivegenicvariancematrix.densedihybriddhadditivegenicvariancematrix class method)": [[855, "pybrops.model.vmat.DenseDihybridDHAdditiveGenicVarianceMatrix.DenseDihybridDHAdditiveGenicVarianceMatrix.from_algmod"]], "from_csv() (pybrops.model.vmat.densedihybriddhadditivegenicvariancematrix.densedihybriddhadditivegenicvariancematrix class method)": [[855, "pybrops.model.vmat.DenseDihybridDHAdditiveGenicVarianceMatrix.DenseDihybridDHAdditiveGenicVarianceMatrix.from_csv"]], "from_gmod() (pybrops.model.vmat.densedihybriddhadditivegenicvariancematrix.densedihybriddhadditivegenicvariancematrix class method)": [[855, "pybrops.model.vmat.DenseDihybridDHAdditiveGenicVarianceMatrix.DenseDihybridDHAdditiveGenicVarianceMatrix.from_gmod"]], "from_hdf5() (pybrops.model.vmat.densedihybriddhadditivegenicvariancematrix.densedihybriddhadditivegenicvariancematrix class method)": [[855, "pybrops.model.vmat.DenseDihybridDHAdditiveGenicVarianceMatrix.DenseDihybridDHAdditiveGenicVarianceMatrix.from_hdf5"]], "from_pandas() (pybrops.model.vmat.densedihybriddhadditivegenicvariancematrix.densedihybriddhadditivegenicvariancematrix class method)": [[855, "pybrops.model.vmat.DenseDihybridDHAdditiveGenicVarianceMatrix.DenseDihybridDHAdditiveGenicVarianceMatrix.from_pandas"]], "group() (pybrops.model.vmat.densedihybriddhadditivegenicvariancematrix.densedihybriddhadditivegenicvariancematrix method)": [[855, "pybrops.model.vmat.DenseDihybridDHAdditiveGenicVarianceMatrix.DenseDihybridDHAdditiveGenicVarianceMatrix.group"]], "group_taxa() (pybrops.model.vmat.densedihybriddhadditivegenicvariancematrix.densedihybriddhadditivegenicvariancematrix method)": [[855, "pybrops.model.vmat.DenseDihybridDHAdditiveGenicVarianceMatrix.DenseDihybridDHAdditiveGenicVarianceMatrix.group_taxa"]], "incorp() (pybrops.model.vmat.densedihybriddhadditivegenicvariancematrix.densedihybriddhadditivegenicvariancematrix method)": [[855, "pybrops.model.vmat.DenseDihybridDHAdditiveGenicVarianceMatrix.DenseDihybridDHAdditiveGenicVarianceMatrix.incorp"]], "incorp_taxa() (pybrops.model.vmat.densedihybriddhadditivegenicvariancematrix.densedihybriddhadditivegenicvariancematrix method)": [[855, "pybrops.model.vmat.DenseDihybridDHAdditiveGenicVarianceMatrix.DenseDihybridDHAdditiveGenicVarianceMatrix.incorp_taxa"]], "incorp_trait() (pybrops.model.vmat.densedihybriddhadditivegenicvariancematrix.densedihybriddhadditivegenicvariancematrix method)": [[855, "pybrops.model.vmat.DenseDihybridDHAdditiveGenicVarianceMatrix.DenseDihybridDHAdditiveGenicVarianceMatrix.incorp_trait"]], "insert() (pybrops.model.vmat.densedihybriddhadditivegenicvariancematrix.densedihybriddhadditivegenicvariancematrix method)": [[855, "pybrops.model.vmat.DenseDihybridDHAdditiveGenicVarianceMatrix.DenseDihybridDHAdditiveGenicVarianceMatrix.insert"]], "insert_taxa() (pybrops.model.vmat.densedihybriddhadditivegenicvariancematrix.densedihybriddhadditivegenicvariancematrix method)": [[855, "pybrops.model.vmat.DenseDihybridDHAdditiveGenicVarianceMatrix.DenseDihybridDHAdditiveGenicVarianceMatrix.insert_taxa"]], "insert_trait() (pybrops.model.vmat.densedihybriddhadditivegenicvariancematrix.densedihybriddhadditivegenicvariancematrix method)": [[855, "pybrops.model.vmat.DenseDihybridDHAdditiveGenicVarianceMatrix.DenseDihybridDHAdditiveGenicVarianceMatrix.insert_trait"]], "is_grouped() (pybrops.model.vmat.densedihybriddhadditivegenicvariancematrix.densedihybriddhadditivegenicvariancematrix method)": [[855, "pybrops.model.vmat.DenseDihybridDHAdditiveGenicVarianceMatrix.DenseDihybridDHAdditiveGenicVarianceMatrix.is_grouped"]], "is_grouped_taxa() (pybrops.model.vmat.densedihybriddhadditivegenicvariancematrix.densedihybriddhadditivegenicvariancematrix method)": [[855, "pybrops.model.vmat.DenseDihybridDHAdditiveGenicVarianceMatrix.DenseDihybridDHAdditiveGenicVarianceMatrix.is_grouped_taxa"]], "is_square() (pybrops.model.vmat.densedihybriddhadditivegenicvariancematrix.densedihybriddhadditivegenicvariancematrix method)": [[855, "pybrops.model.vmat.DenseDihybridDHAdditiveGenicVarianceMatrix.DenseDihybridDHAdditiveGenicVarianceMatrix.is_square"]], "is_square_taxa() (pybrops.model.vmat.densedihybriddhadditivegenicvariancematrix.densedihybriddhadditivegenicvariancematrix method)": [[855, "pybrops.model.vmat.DenseDihybridDHAdditiveGenicVarianceMatrix.DenseDihybridDHAdditiveGenicVarianceMatrix.is_square_taxa"]], "lexsort() (pybrops.model.vmat.densedihybriddhadditivegenicvariancematrix.densedihybriddhadditivegenicvariancematrix method)": [[855, "pybrops.model.vmat.DenseDihybridDHAdditiveGenicVarianceMatrix.DenseDihybridDHAdditiveGenicVarianceMatrix.lexsort"]], "lexsort_taxa() (pybrops.model.vmat.densedihybriddhadditivegenicvariancematrix.densedihybriddhadditivegenicvariancematrix method)": [[855, "pybrops.model.vmat.DenseDihybridDHAdditiveGenicVarianceMatrix.DenseDihybridDHAdditiveGenicVarianceMatrix.lexsort_taxa"]], "lexsort_trait() (pybrops.model.vmat.densedihybriddhadditivegenicvariancematrix.densedihybriddhadditivegenicvariancematrix method)": [[855, "pybrops.model.vmat.DenseDihybridDHAdditiveGenicVarianceMatrix.DenseDihybridDHAdditiveGenicVarianceMatrix.lexsort_trait"]], "male_axis (pybrops.model.vmat.densedihybriddhadditivegenicvariancematrix.densedihybriddhadditivegenicvariancematrix property)": [[855, "pybrops.model.vmat.DenseDihybridDHAdditiveGenicVarianceMatrix.DenseDihybridDHAdditiveGenicVarianceMatrix.male_axis"]], "mat (pybrops.model.vmat.densedihybriddhadditivegenicvariancematrix.densedihybriddhadditivegenicvariancematrix property)": [[855, "pybrops.model.vmat.DenseDihybridDHAdditiveGenicVarianceMatrix.DenseDihybridDHAdditiveGenicVarianceMatrix.mat"]], "mat_ndim (pybrops.model.vmat.densedihybriddhadditivegenicvariancematrix.densedihybriddhadditivegenicvariancematrix property)": [[855, "pybrops.model.vmat.DenseDihybridDHAdditiveGenicVarianceMatrix.DenseDihybridDHAdditiveGenicVarianceMatrix.mat_ndim"]], "mat_shape (pybrops.model.vmat.densedihybriddhadditivegenicvariancematrix.densedihybriddhadditivegenicvariancematrix property)": [[855, "pybrops.model.vmat.DenseDihybridDHAdditiveGenicVarianceMatrix.DenseDihybridDHAdditiveGenicVarianceMatrix.mat_shape"]], "nfemale (pybrops.model.vmat.densedihybriddhadditivegenicvariancematrix.densedihybriddhadditivegenicvariancematrix property)": [[855, "pybrops.model.vmat.DenseDihybridDHAdditiveGenicVarianceMatrix.DenseDihybridDHAdditiveGenicVarianceMatrix.nfemale"]], "nmale (pybrops.model.vmat.densedihybriddhadditivegenicvariancematrix.densedihybriddhadditivegenicvariancematrix property)": [[855, "pybrops.model.vmat.DenseDihybridDHAdditiveGenicVarianceMatrix.DenseDihybridDHAdditiveGenicVarianceMatrix.nmale"]], "nsquare (pybrops.model.vmat.densedihybriddhadditivegenicvariancematrix.densedihybriddhadditivegenicvariancematrix property)": [[855, "pybrops.model.vmat.DenseDihybridDHAdditiveGenicVarianceMatrix.DenseDihybridDHAdditiveGenicVarianceMatrix.nsquare"]], "nsquare_taxa (pybrops.model.vmat.densedihybriddhadditivegenicvariancematrix.densedihybriddhadditivegenicvariancematrix property)": [[855, "pybrops.model.vmat.DenseDihybridDHAdditiveGenicVarianceMatrix.DenseDihybridDHAdditiveGenicVarianceMatrix.nsquare_taxa"]], "ntaxa (pybrops.model.vmat.densedihybriddhadditivegenicvariancematrix.densedihybriddhadditivegenicvariancematrix property)": [[855, "pybrops.model.vmat.DenseDihybridDHAdditiveGenicVarianceMatrix.DenseDihybridDHAdditiveGenicVarianceMatrix.ntaxa"]], "ntrait (pybrops.model.vmat.densedihybriddhadditivegenicvariancematrix.densedihybriddhadditivegenicvariancematrix property)": [[855, "pybrops.model.vmat.DenseDihybridDHAdditiveGenicVarianceMatrix.DenseDihybridDHAdditiveGenicVarianceMatrix.ntrait"]], "remove() (pybrops.model.vmat.densedihybriddhadditivegenicvariancematrix.densedihybriddhadditivegenicvariancematrix method)": [[855, "pybrops.model.vmat.DenseDihybridDHAdditiveGenicVarianceMatrix.DenseDihybridDHAdditiveGenicVarianceMatrix.remove"]], "remove_taxa() (pybrops.model.vmat.densedihybriddhadditivegenicvariancematrix.densedihybriddhadditivegenicvariancematrix method)": [[855, "pybrops.model.vmat.DenseDihybridDHAdditiveGenicVarianceMatrix.DenseDihybridDHAdditiveGenicVarianceMatrix.remove_taxa"]], "remove_trait() (pybrops.model.vmat.densedihybriddhadditivegenicvariancematrix.densedihybriddhadditivegenicvariancematrix method)": [[855, "pybrops.model.vmat.DenseDihybridDHAdditiveGenicVarianceMatrix.DenseDihybridDHAdditiveGenicVarianceMatrix.remove_trait"]], "reorder() (pybrops.model.vmat.densedihybriddhadditivegenicvariancematrix.densedihybriddhadditivegenicvariancematrix method)": [[855, "pybrops.model.vmat.DenseDihybridDHAdditiveGenicVarianceMatrix.DenseDihybridDHAdditiveGenicVarianceMatrix.reorder"]], "reorder_taxa() (pybrops.model.vmat.densedihybriddhadditivegenicvariancematrix.densedihybriddhadditivegenicvariancematrix method)": [[855, "pybrops.model.vmat.DenseDihybridDHAdditiveGenicVarianceMatrix.DenseDihybridDHAdditiveGenicVarianceMatrix.reorder_taxa"]], "reorder_trait() (pybrops.model.vmat.densedihybriddhadditivegenicvariancematrix.densedihybriddhadditivegenicvariancematrix method)": [[855, "pybrops.model.vmat.DenseDihybridDHAdditiveGenicVarianceMatrix.DenseDihybridDHAdditiveGenicVarianceMatrix.reorder_trait"]], "select() (pybrops.model.vmat.densedihybriddhadditivegenicvariancematrix.densedihybriddhadditivegenicvariancematrix method)": [[855, "pybrops.model.vmat.DenseDihybridDHAdditiveGenicVarianceMatrix.DenseDihybridDHAdditiveGenicVarianceMatrix.select"]], "select_taxa() (pybrops.model.vmat.densedihybriddhadditivegenicvariancematrix.densedihybriddhadditivegenicvariancematrix method)": [[855, "pybrops.model.vmat.DenseDihybridDHAdditiveGenicVarianceMatrix.DenseDihybridDHAdditiveGenicVarianceMatrix.select_taxa"]], "select_trait() (pybrops.model.vmat.densedihybriddhadditivegenicvariancematrix.densedihybriddhadditivegenicvariancematrix method)": [[855, "pybrops.model.vmat.DenseDihybridDHAdditiveGenicVarianceMatrix.DenseDihybridDHAdditiveGenicVarianceMatrix.select_trait"]], "sort() (pybrops.model.vmat.densedihybriddhadditivegenicvariancematrix.densedihybriddhadditivegenicvariancematrix method)": [[855, "pybrops.model.vmat.DenseDihybridDHAdditiveGenicVarianceMatrix.DenseDihybridDHAdditiveGenicVarianceMatrix.sort"]], "sort_taxa() (pybrops.model.vmat.densedihybriddhadditivegenicvariancematrix.densedihybriddhadditivegenicvariancematrix method)": [[855, "pybrops.model.vmat.DenseDihybridDHAdditiveGenicVarianceMatrix.DenseDihybridDHAdditiveGenicVarianceMatrix.sort_taxa"]], "sort_trait() (pybrops.model.vmat.densedihybriddhadditivegenicvariancematrix.densedihybriddhadditivegenicvariancematrix method)": [[855, "pybrops.model.vmat.DenseDihybridDHAdditiveGenicVarianceMatrix.DenseDihybridDHAdditiveGenicVarianceMatrix.sort_trait"]], "square_axes (pybrops.model.vmat.densedihybriddhadditivegenicvariancematrix.densedihybriddhadditivegenicvariancematrix property)": [[855, "pybrops.model.vmat.DenseDihybridDHAdditiveGenicVarianceMatrix.DenseDihybridDHAdditiveGenicVarianceMatrix.square_axes"]], "square_axes_len (pybrops.model.vmat.densedihybriddhadditivegenicvariancematrix.densedihybriddhadditivegenicvariancematrix property)": [[855, "pybrops.model.vmat.DenseDihybridDHAdditiveGenicVarianceMatrix.DenseDihybridDHAdditiveGenicVarianceMatrix.square_axes_len"]], "square_taxa_axes (pybrops.model.vmat.densedihybriddhadditivegenicvariancematrix.densedihybriddhadditivegenicvariancematrix property)": [[855, "pybrops.model.vmat.DenseDihybridDHAdditiveGenicVarianceMatrix.DenseDihybridDHAdditiveGenicVarianceMatrix.square_taxa_axes"]], "square_taxa_axes_len (pybrops.model.vmat.densedihybriddhadditivegenicvariancematrix.densedihybriddhadditivegenicvariancematrix property)": [[855, "pybrops.model.vmat.DenseDihybridDHAdditiveGenicVarianceMatrix.DenseDihybridDHAdditiveGenicVarianceMatrix.square_taxa_axes_len"]], "taxa (pybrops.model.vmat.densedihybriddhadditivegenicvariancematrix.densedihybriddhadditivegenicvariancematrix property)": [[855, "pybrops.model.vmat.DenseDihybridDHAdditiveGenicVarianceMatrix.DenseDihybridDHAdditiveGenicVarianceMatrix.taxa"]], "taxa_axis (pybrops.model.vmat.densedihybriddhadditivegenicvariancematrix.densedihybriddhadditivegenicvariancematrix property)": [[855, "pybrops.model.vmat.DenseDihybridDHAdditiveGenicVarianceMatrix.DenseDihybridDHAdditiveGenicVarianceMatrix.taxa_axis"]], "taxa_grp (pybrops.model.vmat.densedihybriddhadditivegenicvariancematrix.densedihybriddhadditivegenicvariancematrix property)": [[855, "pybrops.model.vmat.DenseDihybridDHAdditiveGenicVarianceMatrix.DenseDihybridDHAdditiveGenicVarianceMatrix.taxa_grp"]], "taxa_grp_len (pybrops.model.vmat.densedihybriddhadditivegenicvariancematrix.densedihybriddhadditivegenicvariancematrix property)": [[855, "pybrops.model.vmat.DenseDihybridDHAdditiveGenicVarianceMatrix.DenseDihybridDHAdditiveGenicVarianceMatrix.taxa_grp_len"]], "taxa_grp_name (pybrops.model.vmat.densedihybriddhadditivegenicvariancematrix.densedihybriddhadditivegenicvariancematrix property)": [[855, "pybrops.model.vmat.DenseDihybridDHAdditiveGenicVarianceMatrix.DenseDihybridDHAdditiveGenicVarianceMatrix.taxa_grp_name"]], "taxa_grp_spix (pybrops.model.vmat.densedihybriddhadditivegenicvariancematrix.densedihybriddhadditivegenicvariancematrix property)": [[855, "pybrops.model.vmat.DenseDihybridDHAdditiveGenicVarianceMatrix.DenseDihybridDHAdditiveGenicVarianceMatrix.taxa_grp_spix"]], "taxa_grp_stix (pybrops.model.vmat.densedihybriddhadditivegenicvariancematrix.densedihybriddhadditivegenicvariancematrix property)": [[855, "pybrops.model.vmat.DenseDihybridDHAdditiveGenicVarianceMatrix.DenseDihybridDHAdditiveGenicVarianceMatrix.taxa_grp_stix"]], "to_csv() (pybrops.model.vmat.densedihybriddhadditivegenicvariancematrix.densedihybriddhadditivegenicvariancematrix method)": [[855, "pybrops.model.vmat.DenseDihybridDHAdditiveGenicVarianceMatrix.DenseDihybridDHAdditiveGenicVarianceMatrix.to_csv"]], "to_hdf5() (pybrops.model.vmat.densedihybriddhadditivegenicvariancematrix.densedihybriddhadditivegenicvariancematrix method)": [[855, "pybrops.model.vmat.DenseDihybridDHAdditiveGenicVarianceMatrix.DenseDihybridDHAdditiveGenicVarianceMatrix.to_hdf5"]], "to_pandas() (pybrops.model.vmat.densedihybriddhadditivegenicvariancematrix.densedihybriddhadditivegenicvariancematrix method)": [[855, "pybrops.model.vmat.DenseDihybridDHAdditiveGenicVarianceMatrix.DenseDihybridDHAdditiveGenicVarianceMatrix.to_pandas"]], "trait (pybrops.model.vmat.densedihybriddhadditivegenicvariancematrix.densedihybriddhadditivegenicvariancematrix property)": [[855, "pybrops.model.vmat.DenseDihybridDHAdditiveGenicVarianceMatrix.DenseDihybridDHAdditiveGenicVarianceMatrix.trait"]], "trait_axis (pybrops.model.vmat.densedihybriddhadditivegenicvariancematrix.densedihybriddhadditivegenicvariancematrix property)": [[855, "pybrops.model.vmat.DenseDihybridDHAdditiveGenicVarianceMatrix.DenseDihybridDHAdditiveGenicVarianceMatrix.trait_axis"]], "ungroup() (pybrops.model.vmat.densedihybriddhadditivegenicvariancematrix.densedihybriddhadditivegenicvariancematrix method)": [[855, "pybrops.model.vmat.DenseDihybridDHAdditiveGenicVarianceMatrix.DenseDihybridDHAdditiveGenicVarianceMatrix.ungroup"]], "ungroup_taxa() (pybrops.model.vmat.densedihybriddhadditivegenicvariancematrix.densedihybriddhadditivegenicvariancematrix method)": [[855, "pybrops.model.vmat.DenseDihybridDHAdditiveGenicVarianceMatrix.DenseDihybridDHAdditiveGenicVarianceMatrix.ungroup_taxa"]], "pybrops.model.vmat.densefourwaydhadditivegeneticvariancematrix": [[856, "module-pybrops.model.vmat.DenseFourWayDHAdditiveGeneticVarianceMatrix"]], "densefourwaydhadditivegeneticvariancematrix (class in pybrops.model.vmat.densefourwaydhadditivegeneticvariancematrix)": [[857, "pybrops.model.vmat.DenseFourWayDHAdditiveGeneticVarianceMatrix.DenseFourWayDHAdditiveGeneticVarianceMatrix"]], "__add__() (pybrops.model.vmat.densefourwaydhadditivegeneticvariancematrix.densefourwaydhadditivegeneticvariancematrix method)": [[857, "pybrops.model.vmat.DenseFourWayDHAdditiveGeneticVarianceMatrix.DenseFourWayDHAdditiveGeneticVarianceMatrix.__add__"]], "__mul__() (pybrops.model.vmat.densefourwaydhadditivegeneticvariancematrix.densefourwaydhadditivegeneticvariancematrix method)": [[857, "pybrops.model.vmat.DenseFourWayDHAdditiveGeneticVarianceMatrix.DenseFourWayDHAdditiveGeneticVarianceMatrix.__mul__"]], "adjoin() (pybrops.model.vmat.densefourwaydhadditivegeneticvariancematrix.densefourwaydhadditivegeneticvariancematrix method)": [[857, "pybrops.model.vmat.DenseFourWayDHAdditiveGeneticVarianceMatrix.DenseFourWayDHAdditiveGeneticVarianceMatrix.adjoin"]], "adjoin_taxa() (pybrops.model.vmat.densefourwaydhadditivegeneticvariancematrix.densefourwaydhadditivegeneticvariancematrix method)": [[857, "pybrops.model.vmat.DenseFourWayDHAdditiveGeneticVarianceMatrix.DenseFourWayDHAdditiveGeneticVarianceMatrix.adjoin_taxa"]], "adjoin_trait() (pybrops.model.vmat.densefourwaydhadditivegeneticvariancematrix.densefourwaydhadditivegeneticvariancematrix method)": [[857, "pybrops.model.vmat.DenseFourWayDHAdditiveGeneticVarianceMatrix.DenseFourWayDHAdditiveGeneticVarianceMatrix.adjoin_trait"]], "append() (pybrops.model.vmat.densefourwaydhadditivegeneticvariancematrix.densefourwaydhadditivegeneticvariancematrix method)": [[857, "pybrops.model.vmat.DenseFourWayDHAdditiveGeneticVarianceMatrix.DenseFourWayDHAdditiveGeneticVarianceMatrix.append"]], "append_taxa() (pybrops.model.vmat.densefourwaydhadditivegeneticvariancematrix.densefourwaydhadditivegeneticvariancematrix method)": [[857, "pybrops.model.vmat.DenseFourWayDHAdditiveGeneticVarianceMatrix.DenseFourWayDHAdditiveGeneticVarianceMatrix.append_taxa"]], "append_trait() (pybrops.model.vmat.densefourwaydhadditivegeneticvariancematrix.densefourwaydhadditivegeneticvariancematrix method)": [[857, "pybrops.model.vmat.DenseFourWayDHAdditiveGeneticVarianceMatrix.DenseFourWayDHAdditiveGeneticVarianceMatrix.append_trait"]], "concat() (pybrops.model.vmat.densefourwaydhadditivegeneticvariancematrix.densefourwaydhadditivegeneticvariancematrix class method)": [[857, "pybrops.model.vmat.DenseFourWayDHAdditiveGeneticVarianceMatrix.DenseFourWayDHAdditiveGeneticVarianceMatrix.concat"]], "concat_taxa() (pybrops.model.vmat.densefourwaydhadditivegeneticvariancematrix.densefourwaydhadditivegeneticvariancematrix class method)": [[857, "pybrops.model.vmat.DenseFourWayDHAdditiveGeneticVarianceMatrix.DenseFourWayDHAdditiveGeneticVarianceMatrix.concat_taxa"]], "concat_trait() (pybrops.model.vmat.densefourwaydhadditivegeneticvariancematrix.densefourwaydhadditivegeneticvariancematrix class method)": [[857, "pybrops.model.vmat.DenseFourWayDHAdditiveGeneticVarianceMatrix.DenseFourWayDHAdditiveGeneticVarianceMatrix.concat_trait"]], "copy() (pybrops.model.vmat.densefourwaydhadditivegeneticvariancematrix.densefourwaydhadditivegeneticvariancematrix method)": [[857, "pybrops.model.vmat.DenseFourWayDHAdditiveGeneticVarianceMatrix.DenseFourWayDHAdditiveGeneticVarianceMatrix.copy"]], "deepcopy() (pybrops.model.vmat.densefourwaydhadditivegeneticvariancematrix.densefourwaydhadditivegeneticvariancematrix method)": [[857, "pybrops.model.vmat.DenseFourWayDHAdditiveGeneticVarianceMatrix.DenseFourWayDHAdditiveGeneticVarianceMatrix.deepcopy"]], "delete() (pybrops.model.vmat.densefourwaydhadditivegeneticvariancematrix.densefourwaydhadditivegeneticvariancematrix method)": [[857, "pybrops.model.vmat.DenseFourWayDHAdditiveGeneticVarianceMatrix.DenseFourWayDHAdditiveGeneticVarianceMatrix.delete"]], "delete_taxa() (pybrops.model.vmat.densefourwaydhadditivegeneticvariancematrix.densefourwaydhadditivegeneticvariancematrix method)": [[857, "pybrops.model.vmat.DenseFourWayDHAdditiveGeneticVarianceMatrix.DenseFourWayDHAdditiveGeneticVarianceMatrix.delete_taxa"]], "delete_trait() (pybrops.model.vmat.densefourwaydhadditivegeneticvariancematrix.densefourwaydhadditivegeneticvariancematrix method)": [[857, "pybrops.model.vmat.DenseFourWayDHAdditiveGeneticVarianceMatrix.DenseFourWayDHAdditiveGeneticVarianceMatrix.delete_trait"]], "epgc (pybrops.model.vmat.densefourwaydhadditivegeneticvariancematrix.densefourwaydhadditivegeneticvariancematrix property)": [[857, "pybrops.model.vmat.DenseFourWayDHAdditiveGeneticVarianceMatrix.DenseFourWayDHAdditiveGeneticVarianceMatrix.epgc"]], "female1_axis (pybrops.model.vmat.densefourwaydhadditivegeneticvariancematrix.densefourwaydhadditivegeneticvariancematrix property)": [[857, "pybrops.model.vmat.DenseFourWayDHAdditiveGeneticVarianceMatrix.DenseFourWayDHAdditiveGeneticVarianceMatrix.female1_axis"]], "female2_axis (pybrops.model.vmat.densefourwaydhadditivegeneticvariancematrix.densefourwaydhadditivegeneticvariancematrix property)": [[857, "pybrops.model.vmat.DenseFourWayDHAdditiveGeneticVarianceMatrix.DenseFourWayDHAdditiveGeneticVarianceMatrix.female2_axis"]], "from_algmod() (pybrops.model.vmat.densefourwaydhadditivegeneticvariancematrix.densefourwaydhadditivegeneticvariancematrix class method)": [[857, "pybrops.model.vmat.DenseFourWayDHAdditiveGeneticVarianceMatrix.DenseFourWayDHAdditiveGeneticVarianceMatrix.from_algmod"]], "from_csv() (pybrops.model.vmat.densefourwaydhadditivegeneticvariancematrix.densefourwaydhadditivegeneticvariancematrix class method)": [[857, "pybrops.model.vmat.DenseFourWayDHAdditiveGeneticVarianceMatrix.DenseFourWayDHAdditiveGeneticVarianceMatrix.from_csv"]], "from_gmod() (pybrops.model.vmat.densefourwaydhadditivegeneticvariancematrix.densefourwaydhadditivegeneticvariancematrix class method)": [[857, "pybrops.model.vmat.DenseFourWayDHAdditiveGeneticVarianceMatrix.DenseFourWayDHAdditiveGeneticVarianceMatrix.from_gmod"]], "from_hdf5() (pybrops.model.vmat.densefourwaydhadditivegeneticvariancematrix.densefourwaydhadditivegeneticvariancematrix class method)": [[857, "pybrops.model.vmat.DenseFourWayDHAdditiveGeneticVarianceMatrix.DenseFourWayDHAdditiveGeneticVarianceMatrix.from_hdf5"]], "from_pandas() (pybrops.model.vmat.densefourwaydhadditivegeneticvariancematrix.densefourwaydhadditivegeneticvariancematrix class method)": [[857, "pybrops.model.vmat.DenseFourWayDHAdditiveGeneticVarianceMatrix.DenseFourWayDHAdditiveGeneticVarianceMatrix.from_pandas"]], "group() (pybrops.model.vmat.densefourwaydhadditivegeneticvariancematrix.densefourwaydhadditivegeneticvariancematrix method)": [[857, "pybrops.model.vmat.DenseFourWayDHAdditiveGeneticVarianceMatrix.DenseFourWayDHAdditiveGeneticVarianceMatrix.group"]], "group_taxa() (pybrops.model.vmat.densefourwaydhadditivegeneticvariancematrix.densefourwaydhadditivegeneticvariancematrix method)": [[857, "pybrops.model.vmat.DenseFourWayDHAdditiveGeneticVarianceMatrix.DenseFourWayDHAdditiveGeneticVarianceMatrix.group_taxa"]], "incorp() (pybrops.model.vmat.densefourwaydhadditivegeneticvariancematrix.densefourwaydhadditivegeneticvariancematrix method)": [[857, "pybrops.model.vmat.DenseFourWayDHAdditiveGeneticVarianceMatrix.DenseFourWayDHAdditiveGeneticVarianceMatrix.incorp"]], "incorp_taxa() (pybrops.model.vmat.densefourwaydhadditivegeneticvariancematrix.densefourwaydhadditivegeneticvariancematrix method)": [[857, "pybrops.model.vmat.DenseFourWayDHAdditiveGeneticVarianceMatrix.DenseFourWayDHAdditiveGeneticVarianceMatrix.incorp_taxa"]], "incorp_trait() (pybrops.model.vmat.densefourwaydhadditivegeneticvariancematrix.densefourwaydhadditivegeneticvariancematrix method)": [[857, "pybrops.model.vmat.DenseFourWayDHAdditiveGeneticVarianceMatrix.DenseFourWayDHAdditiveGeneticVarianceMatrix.incorp_trait"]], "insert() (pybrops.model.vmat.densefourwaydhadditivegeneticvariancematrix.densefourwaydhadditivegeneticvariancematrix method)": [[857, "pybrops.model.vmat.DenseFourWayDHAdditiveGeneticVarianceMatrix.DenseFourWayDHAdditiveGeneticVarianceMatrix.insert"]], "insert_taxa() (pybrops.model.vmat.densefourwaydhadditivegeneticvariancematrix.densefourwaydhadditivegeneticvariancematrix method)": [[857, "pybrops.model.vmat.DenseFourWayDHAdditiveGeneticVarianceMatrix.DenseFourWayDHAdditiveGeneticVarianceMatrix.insert_taxa"]], "insert_trait() (pybrops.model.vmat.densefourwaydhadditivegeneticvariancematrix.densefourwaydhadditivegeneticvariancematrix method)": [[857, "pybrops.model.vmat.DenseFourWayDHAdditiveGeneticVarianceMatrix.DenseFourWayDHAdditiveGeneticVarianceMatrix.insert_trait"]], "is_grouped() (pybrops.model.vmat.densefourwaydhadditivegeneticvariancematrix.densefourwaydhadditivegeneticvariancematrix method)": [[857, "pybrops.model.vmat.DenseFourWayDHAdditiveGeneticVarianceMatrix.DenseFourWayDHAdditiveGeneticVarianceMatrix.is_grouped"]], "is_grouped_taxa() (pybrops.model.vmat.densefourwaydhadditivegeneticvariancematrix.densefourwaydhadditivegeneticvariancematrix method)": [[857, "pybrops.model.vmat.DenseFourWayDHAdditiveGeneticVarianceMatrix.DenseFourWayDHAdditiveGeneticVarianceMatrix.is_grouped_taxa"]], "is_square() (pybrops.model.vmat.densefourwaydhadditivegeneticvariancematrix.densefourwaydhadditivegeneticvariancematrix method)": [[857, "pybrops.model.vmat.DenseFourWayDHAdditiveGeneticVarianceMatrix.DenseFourWayDHAdditiveGeneticVarianceMatrix.is_square"]], "is_square_taxa() (pybrops.model.vmat.densefourwaydhadditivegeneticvariancematrix.densefourwaydhadditivegeneticvariancematrix method)": [[857, "pybrops.model.vmat.DenseFourWayDHAdditiveGeneticVarianceMatrix.DenseFourWayDHAdditiveGeneticVarianceMatrix.is_square_taxa"]], "lexsort() (pybrops.model.vmat.densefourwaydhadditivegeneticvariancematrix.densefourwaydhadditivegeneticvariancematrix method)": [[857, "pybrops.model.vmat.DenseFourWayDHAdditiveGeneticVarianceMatrix.DenseFourWayDHAdditiveGeneticVarianceMatrix.lexsort"]], "lexsort_taxa() (pybrops.model.vmat.densefourwaydhadditivegeneticvariancematrix.densefourwaydhadditivegeneticvariancematrix method)": [[857, "pybrops.model.vmat.DenseFourWayDHAdditiveGeneticVarianceMatrix.DenseFourWayDHAdditiveGeneticVarianceMatrix.lexsort_taxa"]], "lexsort_trait() (pybrops.model.vmat.densefourwaydhadditivegeneticvariancematrix.densefourwaydhadditivegeneticvariancematrix method)": [[857, "pybrops.model.vmat.DenseFourWayDHAdditiveGeneticVarianceMatrix.DenseFourWayDHAdditiveGeneticVarianceMatrix.lexsort_trait"]], "male1_axis (pybrops.model.vmat.densefourwaydhadditivegeneticvariancematrix.densefourwaydhadditivegeneticvariancematrix property)": [[857, "pybrops.model.vmat.DenseFourWayDHAdditiveGeneticVarianceMatrix.DenseFourWayDHAdditiveGeneticVarianceMatrix.male1_axis"]], "male2_axis (pybrops.model.vmat.densefourwaydhadditivegeneticvariancematrix.densefourwaydhadditivegeneticvariancematrix property)": [[857, "pybrops.model.vmat.DenseFourWayDHAdditiveGeneticVarianceMatrix.DenseFourWayDHAdditiveGeneticVarianceMatrix.male2_axis"]], "mat (pybrops.model.vmat.densefourwaydhadditivegeneticvariancematrix.densefourwaydhadditivegeneticvariancematrix property)": [[857, "pybrops.model.vmat.DenseFourWayDHAdditiveGeneticVarianceMatrix.DenseFourWayDHAdditiveGeneticVarianceMatrix.mat"]], "mat_ndim (pybrops.model.vmat.densefourwaydhadditivegeneticvariancematrix.densefourwaydhadditivegeneticvariancematrix property)": [[857, "pybrops.model.vmat.DenseFourWayDHAdditiveGeneticVarianceMatrix.DenseFourWayDHAdditiveGeneticVarianceMatrix.mat_ndim"]], "mat_shape (pybrops.model.vmat.densefourwaydhadditivegeneticvariancematrix.densefourwaydhadditivegeneticvariancematrix property)": [[857, "pybrops.model.vmat.DenseFourWayDHAdditiveGeneticVarianceMatrix.DenseFourWayDHAdditiveGeneticVarianceMatrix.mat_shape"]], "nfemale1 (pybrops.model.vmat.densefourwaydhadditivegeneticvariancematrix.densefourwaydhadditivegeneticvariancematrix property)": [[857, "pybrops.model.vmat.DenseFourWayDHAdditiveGeneticVarianceMatrix.DenseFourWayDHAdditiveGeneticVarianceMatrix.nfemale1"]], "nfemale2 (pybrops.model.vmat.densefourwaydhadditivegeneticvariancematrix.densefourwaydhadditivegeneticvariancematrix property)": [[857, "pybrops.model.vmat.DenseFourWayDHAdditiveGeneticVarianceMatrix.DenseFourWayDHAdditiveGeneticVarianceMatrix.nfemale2"]], "nmale1 (pybrops.model.vmat.densefourwaydhadditivegeneticvariancematrix.densefourwaydhadditivegeneticvariancematrix property)": [[857, "pybrops.model.vmat.DenseFourWayDHAdditiveGeneticVarianceMatrix.DenseFourWayDHAdditiveGeneticVarianceMatrix.nmale1"]], "nmale2 (pybrops.model.vmat.densefourwaydhadditivegeneticvariancematrix.densefourwaydhadditivegeneticvariancematrix property)": [[857, "pybrops.model.vmat.DenseFourWayDHAdditiveGeneticVarianceMatrix.DenseFourWayDHAdditiveGeneticVarianceMatrix.nmale2"]], "nsquare (pybrops.model.vmat.densefourwaydhadditivegeneticvariancematrix.densefourwaydhadditivegeneticvariancematrix property)": [[857, "pybrops.model.vmat.DenseFourWayDHAdditiveGeneticVarianceMatrix.DenseFourWayDHAdditiveGeneticVarianceMatrix.nsquare"]], "nsquare_taxa (pybrops.model.vmat.densefourwaydhadditivegeneticvariancematrix.densefourwaydhadditivegeneticvariancematrix property)": [[857, "pybrops.model.vmat.DenseFourWayDHAdditiveGeneticVarianceMatrix.DenseFourWayDHAdditiveGeneticVarianceMatrix.nsquare_taxa"]], "ntaxa (pybrops.model.vmat.densefourwaydhadditivegeneticvariancematrix.densefourwaydhadditivegeneticvariancematrix property)": [[857, "pybrops.model.vmat.DenseFourWayDHAdditiveGeneticVarianceMatrix.DenseFourWayDHAdditiveGeneticVarianceMatrix.ntaxa"]], "ntrait (pybrops.model.vmat.densefourwaydhadditivegeneticvariancematrix.densefourwaydhadditivegeneticvariancematrix property)": [[857, "pybrops.model.vmat.DenseFourWayDHAdditiveGeneticVarianceMatrix.DenseFourWayDHAdditiveGeneticVarianceMatrix.ntrait"]], "remove() (pybrops.model.vmat.densefourwaydhadditivegeneticvariancematrix.densefourwaydhadditivegeneticvariancematrix method)": [[857, "pybrops.model.vmat.DenseFourWayDHAdditiveGeneticVarianceMatrix.DenseFourWayDHAdditiveGeneticVarianceMatrix.remove"]], "remove_taxa() (pybrops.model.vmat.densefourwaydhadditivegeneticvariancematrix.densefourwaydhadditivegeneticvariancematrix method)": [[857, "pybrops.model.vmat.DenseFourWayDHAdditiveGeneticVarianceMatrix.DenseFourWayDHAdditiveGeneticVarianceMatrix.remove_taxa"]], "remove_trait() (pybrops.model.vmat.densefourwaydhadditivegeneticvariancematrix.densefourwaydhadditivegeneticvariancematrix method)": [[857, "pybrops.model.vmat.DenseFourWayDHAdditiveGeneticVarianceMatrix.DenseFourWayDHAdditiveGeneticVarianceMatrix.remove_trait"]], "reorder() (pybrops.model.vmat.densefourwaydhadditivegeneticvariancematrix.densefourwaydhadditivegeneticvariancematrix method)": [[857, "pybrops.model.vmat.DenseFourWayDHAdditiveGeneticVarianceMatrix.DenseFourWayDHAdditiveGeneticVarianceMatrix.reorder"]], "reorder_taxa() (pybrops.model.vmat.densefourwaydhadditivegeneticvariancematrix.densefourwaydhadditivegeneticvariancematrix method)": [[857, "pybrops.model.vmat.DenseFourWayDHAdditiveGeneticVarianceMatrix.DenseFourWayDHAdditiveGeneticVarianceMatrix.reorder_taxa"]], "reorder_trait() (pybrops.model.vmat.densefourwaydhadditivegeneticvariancematrix.densefourwaydhadditivegeneticvariancematrix method)": [[857, "pybrops.model.vmat.DenseFourWayDHAdditiveGeneticVarianceMatrix.DenseFourWayDHAdditiveGeneticVarianceMatrix.reorder_trait"]], "select() (pybrops.model.vmat.densefourwaydhadditivegeneticvariancematrix.densefourwaydhadditivegeneticvariancematrix method)": [[857, "pybrops.model.vmat.DenseFourWayDHAdditiveGeneticVarianceMatrix.DenseFourWayDHAdditiveGeneticVarianceMatrix.select"]], "select_taxa() (pybrops.model.vmat.densefourwaydhadditivegeneticvariancematrix.densefourwaydhadditivegeneticvariancematrix method)": [[857, "pybrops.model.vmat.DenseFourWayDHAdditiveGeneticVarianceMatrix.DenseFourWayDHAdditiveGeneticVarianceMatrix.select_taxa"]], "select_trait() (pybrops.model.vmat.densefourwaydhadditivegeneticvariancematrix.densefourwaydhadditivegeneticvariancematrix method)": [[857, "pybrops.model.vmat.DenseFourWayDHAdditiveGeneticVarianceMatrix.DenseFourWayDHAdditiveGeneticVarianceMatrix.select_trait"]], "sort() (pybrops.model.vmat.densefourwaydhadditivegeneticvariancematrix.densefourwaydhadditivegeneticvariancematrix method)": [[857, "pybrops.model.vmat.DenseFourWayDHAdditiveGeneticVarianceMatrix.DenseFourWayDHAdditiveGeneticVarianceMatrix.sort"]], "sort_taxa() (pybrops.model.vmat.densefourwaydhadditivegeneticvariancematrix.densefourwaydhadditivegeneticvariancematrix method)": [[857, "pybrops.model.vmat.DenseFourWayDHAdditiveGeneticVarianceMatrix.DenseFourWayDHAdditiveGeneticVarianceMatrix.sort_taxa"]], "sort_trait() (pybrops.model.vmat.densefourwaydhadditivegeneticvariancematrix.densefourwaydhadditivegeneticvariancematrix method)": [[857, "pybrops.model.vmat.DenseFourWayDHAdditiveGeneticVarianceMatrix.DenseFourWayDHAdditiveGeneticVarianceMatrix.sort_trait"]], "square_axes (pybrops.model.vmat.densefourwaydhadditivegeneticvariancematrix.densefourwaydhadditivegeneticvariancematrix property)": [[857, "pybrops.model.vmat.DenseFourWayDHAdditiveGeneticVarianceMatrix.DenseFourWayDHAdditiveGeneticVarianceMatrix.square_axes"]], "square_axes_len (pybrops.model.vmat.densefourwaydhadditivegeneticvariancematrix.densefourwaydhadditivegeneticvariancematrix property)": [[857, "pybrops.model.vmat.DenseFourWayDHAdditiveGeneticVarianceMatrix.DenseFourWayDHAdditiveGeneticVarianceMatrix.square_axes_len"]], "square_taxa_axes (pybrops.model.vmat.densefourwaydhadditivegeneticvariancematrix.densefourwaydhadditivegeneticvariancematrix property)": [[857, "pybrops.model.vmat.DenseFourWayDHAdditiveGeneticVarianceMatrix.DenseFourWayDHAdditiveGeneticVarianceMatrix.square_taxa_axes"]], "square_taxa_axes_len (pybrops.model.vmat.densefourwaydhadditivegeneticvariancematrix.densefourwaydhadditivegeneticvariancematrix property)": [[857, "pybrops.model.vmat.DenseFourWayDHAdditiveGeneticVarianceMatrix.DenseFourWayDHAdditiveGeneticVarianceMatrix.square_taxa_axes_len"]], "taxa (pybrops.model.vmat.densefourwaydhadditivegeneticvariancematrix.densefourwaydhadditivegeneticvariancematrix property)": [[857, "pybrops.model.vmat.DenseFourWayDHAdditiveGeneticVarianceMatrix.DenseFourWayDHAdditiveGeneticVarianceMatrix.taxa"]], "taxa_axis (pybrops.model.vmat.densefourwaydhadditivegeneticvariancematrix.densefourwaydhadditivegeneticvariancematrix property)": [[857, "pybrops.model.vmat.DenseFourWayDHAdditiveGeneticVarianceMatrix.DenseFourWayDHAdditiveGeneticVarianceMatrix.taxa_axis"]], "taxa_grp (pybrops.model.vmat.densefourwaydhadditivegeneticvariancematrix.densefourwaydhadditivegeneticvariancematrix property)": [[857, "pybrops.model.vmat.DenseFourWayDHAdditiveGeneticVarianceMatrix.DenseFourWayDHAdditiveGeneticVarianceMatrix.taxa_grp"]], "taxa_grp_len (pybrops.model.vmat.densefourwaydhadditivegeneticvariancematrix.densefourwaydhadditivegeneticvariancematrix property)": [[857, "pybrops.model.vmat.DenseFourWayDHAdditiveGeneticVarianceMatrix.DenseFourWayDHAdditiveGeneticVarianceMatrix.taxa_grp_len"]], "taxa_grp_name (pybrops.model.vmat.densefourwaydhadditivegeneticvariancematrix.densefourwaydhadditivegeneticvariancematrix property)": [[857, "pybrops.model.vmat.DenseFourWayDHAdditiveGeneticVarianceMatrix.DenseFourWayDHAdditiveGeneticVarianceMatrix.taxa_grp_name"]], "taxa_grp_spix (pybrops.model.vmat.densefourwaydhadditivegeneticvariancematrix.densefourwaydhadditivegeneticvariancematrix property)": [[857, "pybrops.model.vmat.DenseFourWayDHAdditiveGeneticVarianceMatrix.DenseFourWayDHAdditiveGeneticVarianceMatrix.taxa_grp_spix"]], "taxa_grp_stix (pybrops.model.vmat.densefourwaydhadditivegeneticvariancematrix.densefourwaydhadditivegeneticvariancematrix property)": [[857, "pybrops.model.vmat.DenseFourWayDHAdditiveGeneticVarianceMatrix.DenseFourWayDHAdditiveGeneticVarianceMatrix.taxa_grp_stix"]], "to_csv() (pybrops.model.vmat.densefourwaydhadditivegeneticvariancematrix.densefourwaydhadditivegeneticvariancematrix method)": [[857, "pybrops.model.vmat.DenseFourWayDHAdditiveGeneticVarianceMatrix.DenseFourWayDHAdditiveGeneticVarianceMatrix.to_csv"]], "to_hdf5() (pybrops.model.vmat.densefourwaydhadditivegeneticvariancematrix.densefourwaydhadditivegeneticvariancematrix method)": [[857, "pybrops.model.vmat.DenseFourWayDHAdditiveGeneticVarianceMatrix.DenseFourWayDHAdditiveGeneticVarianceMatrix.to_hdf5"]], "to_pandas() (pybrops.model.vmat.densefourwaydhadditivegeneticvariancematrix.densefourwaydhadditivegeneticvariancematrix method)": [[857, "pybrops.model.vmat.DenseFourWayDHAdditiveGeneticVarianceMatrix.DenseFourWayDHAdditiveGeneticVarianceMatrix.to_pandas"]], "trait (pybrops.model.vmat.densefourwaydhadditivegeneticvariancematrix.densefourwaydhadditivegeneticvariancematrix property)": [[857, "pybrops.model.vmat.DenseFourWayDHAdditiveGeneticVarianceMatrix.DenseFourWayDHAdditiveGeneticVarianceMatrix.trait"]], "trait_axis (pybrops.model.vmat.densefourwaydhadditivegeneticvariancematrix.densefourwaydhadditivegeneticvariancematrix property)": [[857, "pybrops.model.vmat.DenseFourWayDHAdditiveGeneticVarianceMatrix.DenseFourWayDHAdditiveGeneticVarianceMatrix.trait_axis"]], "ungroup() (pybrops.model.vmat.densefourwaydhadditivegeneticvariancematrix.densefourwaydhadditivegeneticvariancematrix method)": [[857, "pybrops.model.vmat.DenseFourWayDHAdditiveGeneticVarianceMatrix.DenseFourWayDHAdditiveGeneticVarianceMatrix.ungroup"]], "ungroup_taxa() (pybrops.model.vmat.densefourwaydhadditivegeneticvariancematrix.densefourwaydhadditivegeneticvariancematrix method)": [[857, "pybrops.model.vmat.DenseFourWayDHAdditiveGeneticVarianceMatrix.DenseFourWayDHAdditiveGeneticVarianceMatrix.ungroup_taxa"]], "check_is_densefourwaydhadditivegeneticvariancematrix() (in module pybrops.model.vmat.densefourwaydhadditivegeneticvariancematrix)": [[858, "pybrops.model.vmat.DenseFourWayDHAdditiveGeneticVarianceMatrix.check_is_DenseFourWayDHAdditiveGeneticVarianceMatrix"]], "pybrops.model.vmat.densefourwaydhadditivegenicvariancematrix": [[859, "module-pybrops.model.vmat.DenseFourWayDHAdditiveGenicVarianceMatrix"]], "densefourwaydhadditivegenicvariancematrix (class in pybrops.model.vmat.densefourwaydhadditivegenicvariancematrix)": [[860, "pybrops.model.vmat.DenseFourWayDHAdditiveGenicVarianceMatrix.DenseFourWayDHAdditiveGenicVarianceMatrix"]], "__add__() (pybrops.model.vmat.densefourwaydhadditivegenicvariancematrix.densefourwaydhadditivegenicvariancematrix method)": [[860, "pybrops.model.vmat.DenseFourWayDHAdditiveGenicVarianceMatrix.DenseFourWayDHAdditiveGenicVarianceMatrix.__add__"]], "__mul__() (pybrops.model.vmat.densefourwaydhadditivegenicvariancematrix.densefourwaydhadditivegenicvariancematrix method)": [[860, "pybrops.model.vmat.DenseFourWayDHAdditiveGenicVarianceMatrix.DenseFourWayDHAdditiveGenicVarianceMatrix.__mul__"]], "adjoin() (pybrops.model.vmat.densefourwaydhadditivegenicvariancematrix.densefourwaydhadditivegenicvariancematrix method)": [[860, "pybrops.model.vmat.DenseFourWayDHAdditiveGenicVarianceMatrix.DenseFourWayDHAdditiveGenicVarianceMatrix.adjoin"]], "adjoin_taxa() (pybrops.model.vmat.densefourwaydhadditivegenicvariancematrix.densefourwaydhadditivegenicvariancematrix method)": [[860, "pybrops.model.vmat.DenseFourWayDHAdditiveGenicVarianceMatrix.DenseFourWayDHAdditiveGenicVarianceMatrix.adjoin_taxa"]], "adjoin_trait() (pybrops.model.vmat.densefourwaydhadditivegenicvariancematrix.densefourwaydhadditivegenicvariancematrix method)": [[860, "pybrops.model.vmat.DenseFourWayDHAdditiveGenicVarianceMatrix.DenseFourWayDHAdditiveGenicVarianceMatrix.adjoin_trait"]], "append() (pybrops.model.vmat.densefourwaydhadditivegenicvariancematrix.densefourwaydhadditivegenicvariancematrix method)": [[860, "pybrops.model.vmat.DenseFourWayDHAdditiveGenicVarianceMatrix.DenseFourWayDHAdditiveGenicVarianceMatrix.append"]], "append_taxa() (pybrops.model.vmat.densefourwaydhadditivegenicvariancematrix.densefourwaydhadditivegenicvariancematrix method)": [[860, "pybrops.model.vmat.DenseFourWayDHAdditiveGenicVarianceMatrix.DenseFourWayDHAdditiveGenicVarianceMatrix.append_taxa"]], "append_trait() (pybrops.model.vmat.densefourwaydhadditivegenicvariancematrix.densefourwaydhadditivegenicvariancematrix method)": [[860, "pybrops.model.vmat.DenseFourWayDHAdditiveGenicVarianceMatrix.DenseFourWayDHAdditiveGenicVarianceMatrix.append_trait"]], "concat() (pybrops.model.vmat.densefourwaydhadditivegenicvariancematrix.densefourwaydhadditivegenicvariancematrix class method)": [[860, "pybrops.model.vmat.DenseFourWayDHAdditiveGenicVarianceMatrix.DenseFourWayDHAdditiveGenicVarianceMatrix.concat"]], "concat_taxa() (pybrops.model.vmat.densefourwaydhadditivegenicvariancematrix.densefourwaydhadditivegenicvariancematrix class method)": [[860, "pybrops.model.vmat.DenseFourWayDHAdditiveGenicVarianceMatrix.DenseFourWayDHAdditiveGenicVarianceMatrix.concat_taxa"]], "concat_trait() (pybrops.model.vmat.densefourwaydhadditivegenicvariancematrix.densefourwaydhadditivegenicvariancematrix class method)": [[860, "pybrops.model.vmat.DenseFourWayDHAdditiveGenicVarianceMatrix.DenseFourWayDHAdditiveGenicVarianceMatrix.concat_trait"]], "copy() (pybrops.model.vmat.densefourwaydhadditivegenicvariancematrix.densefourwaydhadditivegenicvariancematrix method)": [[860, "pybrops.model.vmat.DenseFourWayDHAdditiveGenicVarianceMatrix.DenseFourWayDHAdditiveGenicVarianceMatrix.copy"]], "deepcopy() (pybrops.model.vmat.densefourwaydhadditivegenicvariancematrix.densefourwaydhadditivegenicvariancematrix method)": [[860, "pybrops.model.vmat.DenseFourWayDHAdditiveGenicVarianceMatrix.DenseFourWayDHAdditiveGenicVarianceMatrix.deepcopy"]], "delete() (pybrops.model.vmat.densefourwaydhadditivegenicvariancematrix.densefourwaydhadditivegenicvariancematrix method)": [[860, "pybrops.model.vmat.DenseFourWayDHAdditiveGenicVarianceMatrix.DenseFourWayDHAdditiveGenicVarianceMatrix.delete"]], "delete_taxa() (pybrops.model.vmat.densefourwaydhadditivegenicvariancematrix.densefourwaydhadditivegenicvariancematrix method)": [[860, "pybrops.model.vmat.DenseFourWayDHAdditiveGenicVarianceMatrix.DenseFourWayDHAdditiveGenicVarianceMatrix.delete_taxa"]], "delete_trait() (pybrops.model.vmat.densefourwaydhadditivegenicvariancematrix.densefourwaydhadditivegenicvariancematrix method)": [[860, "pybrops.model.vmat.DenseFourWayDHAdditiveGenicVarianceMatrix.DenseFourWayDHAdditiveGenicVarianceMatrix.delete_trait"]], "epgc (pybrops.model.vmat.densefourwaydhadditivegenicvariancematrix.densefourwaydhadditivegenicvariancematrix property)": [[860, "pybrops.model.vmat.DenseFourWayDHAdditiveGenicVarianceMatrix.DenseFourWayDHAdditiveGenicVarianceMatrix.epgc"]], "female1_axis (pybrops.model.vmat.densefourwaydhadditivegenicvariancematrix.densefourwaydhadditivegenicvariancematrix property)": [[860, "pybrops.model.vmat.DenseFourWayDHAdditiveGenicVarianceMatrix.DenseFourWayDHAdditiveGenicVarianceMatrix.female1_axis"]], "female2_axis (pybrops.model.vmat.densefourwaydhadditivegenicvariancematrix.densefourwaydhadditivegenicvariancematrix property)": [[860, "pybrops.model.vmat.DenseFourWayDHAdditiveGenicVarianceMatrix.DenseFourWayDHAdditiveGenicVarianceMatrix.female2_axis"]], "from_algmod() (pybrops.model.vmat.densefourwaydhadditivegenicvariancematrix.densefourwaydhadditivegenicvariancematrix class method)": [[860, "pybrops.model.vmat.DenseFourWayDHAdditiveGenicVarianceMatrix.DenseFourWayDHAdditiveGenicVarianceMatrix.from_algmod"]], "from_csv() (pybrops.model.vmat.densefourwaydhadditivegenicvariancematrix.densefourwaydhadditivegenicvariancematrix class method)": [[860, "pybrops.model.vmat.DenseFourWayDHAdditiveGenicVarianceMatrix.DenseFourWayDHAdditiveGenicVarianceMatrix.from_csv"]], "from_gmod() (pybrops.model.vmat.densefourwaydhadditivegenicvariancematrix.densefourwaydhadditivegenicvariancematrix class method)": [[860, "pybrops.model.vmat.DenseFourWayDHAdditiveGenicVarianceMatrix.DenseFourWayDHAdditiveGenicVarianceMatrix.from_gmod"]], "from_hdf5() (pybrops.model.vmat.densefourwaydhadditivegenicvariancematrix.densefourwaydhadditivegenicvariancematrix class method)": [[860, "pybrops.model.vmat.DenseFourWayDHAdditiveGenicVarianceMatrix.DenseFourWayDHAdditiveGenicVarianceMatrix.from_hdf5"]], "from_pandas() (pybrops.model.vmat.densefourwaydhadditivegenicvariancematrix.densefourwaydhadditivegenicvariancematrix class method)": [[860, "pybrops.model.vmat.DenseFourWayDHAdditiveGenicVarianceMatrix.DenseFourWayDHAdditiveGenicVarianceMatrix.from_pandas"]], "group() (pybrops.model.vmat.densefourwaydhadditivegenicvariancematrix.densefourwaydhadditivegenicvariancematrix method)": [[860, "pybrops.model.vmat.DenseFourWayDHAdditiveGenicVarianceMatrix.DenseFourWayDHAdditiveGenicVarianceMatrix.group"]], "group_taxa() (pybrops.model.vmat.densefourwaydhadditivegenicvariancematrix.densefourwaydhadditivegenicvariancematrix method)": [[860, "pybrops.model.vmat.DenseFourWayDHAdditiveGenicVarianceMatrix.DenseFourWayDHAdditiveGenicVarianceMatrix.group_taxa"]], "incorp() (pybrops.model.vmat.densefourwaydhadditivegenicvariancematrix.densefourwaydhadditivegenicvariancematrix method)": [[860, "pybrops.model.vmat.DenseFourWayDHAdditiveGenicVarianceMatrix.DenseFourWayDHAdditiveGenicVarianceMatrix.incorp"]], "incorp_taxa() (pybrops.model.vmat.densefourwaydhadditivegenicvariancematrix.densefourwaydhadditivegenicvariancematrix method)": [[860, "pybrops.model.vmat.DenseFourWayDHAdditiveGenicVarianceMatrix.DenseFourWayDHAdditiveGenicVarianceMatrix.incorp_taxa"]], "incorp_trait() (pybrops.model.vmat.densefourwaydhadditivegenicvariancematrix.densefourwaydhadditivegenicvariancematrix method)": [[860, "pybrops.model.vmat.DenseFourWayDHAdditiveGenicVarianceMatrix.DenseFourWayDHAdditiveGenicVarianceMatrix.incorp_trait"]], "insert() (pybrops.model.vmat.densefourwaydhadditivegenicvariancematrix.densefourwaydhadditivegenicvariancematrix method)": [[860, "pybrops.model.vmat.DenseFourWayDHAdditiveGenicVarianceMatrix.DenseFourWayDHAdditiveGenicVarianceMatrix.insert"]], "insert_taxa() (pybrops.model.vmat.densefourwaydhadditivegenicvariancematrix.densefourwaydhadditivegenicvariancematrix method)": [[860, "pybrops.model.vmat.DenseFourWayDHAdditiveGenicVarianceMatrix.DenseFourWayDHAdditiveGenicVarianceMatrix.insert_taxa"]], "insert_trait() (pybrops.model.vmat.densefourwaydhadditivegenicvariancematrix.densefourwaydhadditivegenicvariancematrix method)": [[860, "pybrops.model.vmat.DenseFourWayDHAdditiveGenicVarianceMatrix.DenseFourWayDHAdditiveGenicVarianceMatrix.insert_trait"]], "is_grouped() (pybrops.model.vmat.densefourwaydhadditivegenicvariancematrix.densefourwaydhadditivegenicvariancematrix method)": [[860, "pybrops.model.vmat.DenseFourWayDHAdditiveGenicVarianceMatrix.DenseFourWayDHAdditiveGenicVarianceMatrix.is_grouped"]], "is_grouped_taxa() (pybrops.model.vmat.densefourwaydhadditivegenicvariancematrix.densefourwaydhadditivegenicvariancematrix method)": [[860, "pybrops.model.vmat.DenseFourWayDHAdditiveGenicVarianceMatrix.DenseFourWayDHAdditiveGenicVarianceMatrix.is_grouped_taxa"]], "is_square() (pybrops.model.vmat.densefourwaydhadditivegenicvariancematrix.densefourwaydhadditivegenicvariancematrix method)": [[860, "pybrops.model.vmat.DenseFourWayDHAdditiveGenicVarianceMatrix.DenseFourWayDHAdditiveGenicVarianceMatrix.is_square"]], "is_square_taxa() (pybrops.model.vmat.densefourwaydhadditivegenicvariancematrix.densefourwaydhadditivegenicvariancematrix method)": [[860, "pybrops.model.vmat.DenseFourWayDHAdditiveGenicVarianceMatrix.DenseFourWayDHAdditiveGenicVarianceMatrix.is_square_taxa"]], "lexsort() (pybrops.model.vmat.densefourwaydhadditivegenicvariancematrix.densefourwaydhadditivegenicvariancematrix method)": [[860, "pybrops.model.vmat.DenseFourWayDHAdditiveGenicVarianceMatrix.DenseFourWayDHAdditiveGenicVarianceMatrix.lexsort"]], "lexsort_taxa() (pybrops.model.vmat.densefourwaydhadditivegenicvariancematrix.densefourwaydhadditivegenicvariancematrix method)": [[860, "pybrops.model.vmat.DenseFourWayDHAdditiveGenicVarianceMatrix.DenseFourWayDHAdditiveGenicVarianceMatrix.lexsort_taxa"]], "lexsort_trait() (pybrops.model.vmat.densefourwaydhadditivegenicvariancematrix.densefourwaydhadditivegenicvariancematrix method)": [[860, "pybrops.model.vmat.DenseFourWayDHAdditiveGenicVarianceMatrix.DenseFourWayDHAdditiveGenicVarianceMatrix.lexsort_trait"]], "male1_axis (pybrops.model.vmat.densefourwaydhadditivegenicvariancematrix.densefourwaydhadditivegenicvariancematrix property)": [[860, "pybrops.model.vmat.DenseFourWayDHAdditiveGenicVarianceMatrix.DenseFourWayDHAdditiveGenicVarianceMatrix.male1_axis"]], "male2_axis (pybrops.model.vmat.densefourwaydhadditivegenicvariancematrix.densefourwaydhadditivegenicvariancematrix property)": [[860, "pybrops.model.vmat.DenseFourWayDHAdditiveGenicVarianceMatrix.DenseFourWayDHAdditiveGenicVarianceMatrix.male2_axis"]], "mat (pybrops.model.vmat.densefourwaydhadditivegenicvariancematrix.densefourwaydhadditivegenicvariancematrix property)": [[860, "pybrops.model.vmat.DenseFourWayDHAdditiveGenicVarianceMatrix.DenseFourWayDHAdditiveGenicVarianceMatrix.mat"]], "mat_ndim (pybrops.model.vmat.densefourwaydhadditivegenicvariancematrix.densefourwaydhadditivegenicvariancematrix property)": [[860, "pybrops.model.vmat.DenseFourWayDHAdditiveGenicVarianceMatrix.DenseFourWayDHAdditiveGenicVarianceMatrix.mat_ndim"]], "mat_shape (pybrops.model.vmat.densefourwaydhadditivegenicvariancematrix.densefourwaydhadditivegenicvariancematrix property)": [[860, "pybrops.model.vmat.DenseFourWayDHAdditiveGenicVarianceMatrix.DenseFourWayDHAdditiveGenicVarianceMatrix.mat_shape"]], "nfemale1 (pybrops.model.vmat.densefourwaydhadditivegenicvariancematrix.densefourwaydhadditivegenicvariancematrix property)": [[860, "pybrops.model.vmat.DenseFourWayDHAdditiveGenicVarianceMatrix.DenseFourWayDHAdditiveGenicVarianceMatrix.nfemale1"]], "nfemale2 (pybrops.model.vmat.densefourwaydhadditivegenicvariancematrix.densefourwaydhadditivegenicvariancematrix property)": [[860, "pybrops.model.vmat.DenseFourWayDHAdditiveGenicVarianceMatrix.DenseFourWayDHAdditiveGenicVarianceMatrix.nfemale2"]], "nmale1 (pybrops.model.vmat.densefourwaydhadditivegenicvariancematrix.densefourwaydhadditivegenicvariancematrix property)": [[860, "pybrops.model.vmat.DenseFourWayDHAdditiveGenicVarianceMatrix.DenseFourWayDHAdditiveGenicVarianceMatrix.nmale1"]], "nmale2 (pybrops.model.vmat.densefourwaydhadditivegenicvariancematrix.densefourwaydhadditivegenicvariancematrix property)": [[860, "pybrops.model.vmat.DenseFourWayDHAdditiveGenicVarianceMatrix.DenseFourWayDHAdditiveGenicVarianceMatrix.nmale2"]], "nsquare (pybrops.model.vmat.densefourwaydhadditivegenicvariancematrix.densefourwaydhadditivegenicvariancematrix property)": [[860, "pybrops.model.vmat.DenseFourWayDHAdditiveGenicVarianceMatrix.DenseFourWayDHAdditiveGenicVarianceMatrix.nsquare"]], "nsquare_taxa (pybrops.model.vmat.densefourwaydhadditivegenicvariancematrix.densefourwaydhadditivegenicvariancematrix property)": [[860, "pybrops.model.vmat.DenseFourWayDHAdditiveGenicVarianceMatrix.DenseFourWayDHAdditiveGenicVarianceMatrix.nsquare_taxa"]], "ntaxa (pybrops.model.vmat.densefourwaydhadditivegenicvariancematrix.densefourwaydhadditivegenicvariancematrix property)": [[860, "pybrops.model.vmat.DenseFourWayDHAdditiveGenicVarianceMatrix.DenseFourWayDHAdditiveGenicVarianceMatrix.ntaxa"]], "ntrait (pybrops.model.vmat.densefourwaydhadditivegenicvariancematrix.densefourwaydhadditivegenicvariancematrix property)": [[860, "pybrops.model.vmat.DenseFourWayDHAdditiveGenicVarianceMatrix.DenseFourWayDHAdditiveGenicVarianceMatrix.ntrait"]], "remove() (pybrops.model.vmat.densefourwaydhadditivegenicvariancematrix.densefourwaydhadditivegenicvariancematrix method)": [[860, "pybrops.model.vmat.DenseFourWayDHAdditiveGenicVarianceMatrix.DenseFourWayDHAdditiveGenicVarianceMatrix.remove"]], "remove_taxa() (pybrops.model.vmat.densefourwaydhadditivegenicvariancematrix.densefourwaydhadditivegenicvariancematrix method)": [[860, "pybrops.model.vmat.DenseFourWayDHAdditiveGenicVarianceMatrix.DenseFourWayDHAdditiveGenicVarianceMatrix.remove_taxa"]], "remove_trait() (pybrops.model.vmat.densefourwaydhadditivegenicvariancematrix.densefourwaydhadditivegenicvariancematrix method)": [[860, "pybrops.model.vmat.DenseFourWayDHAdditiveGenicVarianceMatrix.DenseFourWayDHAdditiveGenicVarianceMatrix.remove_trait"]], "reorder() (pybrops.model.vmat.densefourwaydhadditivegenicvariancematrix.densefourwaydhadditivegenicvariancematrix method)": [[860, "pybrops.model.vmat.DenseFourWayDHAdditiveGenicVarianceMatrix.DenseFourWayDHAdditiveGenicVarianceMatrix.reorder"]], "reorder_taxa() (pybrops.model.vmat.densefourwaydhadditivegenicvariancematrix.densefourwaydhadditivegenicvariancematrix method)": [[860, "pybrops.model.vmat.DenseFourWayDHAdditiveGenicVarianceMatrix.DenseFourWayDHAdditiveGenicVarianceMatrix.reorder_taxa"]], "reorder_trait() (pybrops.model.vmat.densefourwaydhadditivegenicvariancematrix.densefourwaydhadditivegenicvariancematrix method)": [[860, "pybrops.model.vmat.DenseFourWayDHAdditiveGenicVarianceMatrix.DenseFourWayDHAdditiveGenicVarianceMatrix.reorder_trait"]], "select() (pybrops.model.vmat.densefourwaydhadditivegenicvariancematrix.densefourwaydhadditivegenicvariancematrix method)": [[860, "pybrops.model.vmat.DenseFourWayDHAdditiveGenicVarianceMatrix.DenseFourWayDHAdditiveGenicVarianceMatrix.select"]], "select_taxa() (pybrops.model.vmat.densefourwaydhadditivegenicvariancematrix.densefourwaydhadditivegenicvariancematrix method)": [[860, "pybrops.model.vmat.DenseFourWayDHAdditiveGenicVarianceMatrix.DenseFourWayDHAdditiveGenicVarianceMatrix.select_taxa"]], "select_trait() (pybrops.model.vmat.densefourwaydhadditivegenicvariancematrix.densefourwaydhadditivegenicvariancematrix method)": [[860, "pybrops.model.vmat.DenseFourWayDHAdditiveGenicVarianceMatrix.DenseFourWayDHAdditiveGenicVarianceMatrix.select_trait"]], "sort() (pybrops.model.vmat.densefourwaydhadditivegenicvariancematrix.densefourwaydhadditivegenicvariancematrix method)": [[860, "pybrops.model.vmat.DenseFourWayDHAdditiveGenicVarianceMatrix.DenseFourWayDHAdditiveGenicVarianceMatrix.sort"]], "sort_taxa() (pybrops.model.vmat.densefourwaydhadditivegenicvariancematrix.densefourwaydhadditivegenicvariancematrix method)": [[860, "pybrops.model.vmat.DenseFourWayDHAdditiveGenicVarianceMatrix.DenseFourWayDHAdditiveGenicVarianceMatrix.sort_taxa"]], "sort_trait() (pybrops.model.vmat.densefourwaydhadditivegenicvariancematrix.densefourwaydhadditivegenicvariancematrix method)": [[860, "pybrops.model.vmat.DenseFourWayDHAdditiveGenicVarianceMatrix.DenseFourWayDHAdditiveGenicVarianceMatrix.sort_trait"]], "square_axes (pybrops.model.vmat.densefourwaydhadditivegenicvariancematrix.densefourwaydhadditivegenicvariancematrix property)": [[860, "pybrops.model.vmat.DenseFourWayDHAdditiveGenicVarianceMatrix.DenseFourWayDHAdditiveGenicVarianceMatrix.square_axes"]], "square_axes_len (pybrops.model.vmat.densefourwaydhadditivegenicvariancematrix.densefourwaydhadditivegenicvariancematrix property)": [[860, "pybrops.model.vmat.DenseFourWayDHAdditiveGenicVarianceMatrix.DenseFourWayDHAdditiveGenicVarianceMatrix.square_axes_len"]], "square_taxa_axes (pybrops.model.vmat.densefourwaydhadditivegenicvariancematrix.densefourwaydhadditivegenicvariancematrix property)": [[860, "pybrops.model.vmat.DenseFourWayDHAdditiveGenicVarianceMatrix.DenseFourWayDHAdditiveGenicVarianceMatrix.square_taxa_axes"]], "square_taxa_axes_len (pybrops.model.vmat.densefourwaydhadditivegenicvariancematrix.densefourwaydhadditivegenicvariancematrix property)": [[860, "pybrops.model.vmat.DenseFourWayDHAdditiveGenicVarianceMatrix.DenseFourWayDHAdditiveGenicVarianceMatrix.square_taxa_axes_len"]], "taxa (pybrops.model.vmat.densefourwaydhadditivegenicvariancematrix.densefourwaydhadditivegenicvariancematrix property)": [[860, "pybrops.model.vmat.DenseFourWayDHAdditiveGenicVarianceMatrix.DenseFourWayDHAdditiveGenicVarianceMatrix.taxa"]], "taxa_axis (pybrops.model.vmat.densefourwaydhadditivegenicvariancematrix.densefourwaydhadditivegenicvariancematrix property)": [[860, "pybrops.model.vmat.DenseFourWayDHAdditiveGenicVarianceMatrix.DenseFourWayDHAdditiveGenicVarianceMatrix.taxa_axis"]], "taxa_grp (pybrops.model.vmat.densefourwaydhadditivegenicvariancematrix.densefourwaydhadditivegenicvariancematrix property)": [[860, "pybrops.model.vmat.DenseFourWayDHAdditiveGenicVarianceMatrix.DenseFourWayDHAdditiveGenicVarianceMatrix.taxa_grp"]], "taxa_grp_len (pybrops.model.vmat.densefourwaydhadditivegenicvariancematrix.densefourwaydhadditivegenicvariancematrix property)": [[860, "pybrops.model.vmat.DenseFourWayDHAdditiveGenicVarianceMatrix.DenseFourWayDHAdditiveGenicVarianceMatrix.taxa_grp_len"]], "taxa_grp_name (pybrops.model.vmat.densefourwaydhadditivegenicvariancematrix.densefourwaydhadditivegenicvariancematrix property)": [[860, "pybrops.model.vmat.DenseFourWayDHAdditiveGenicVarianceMatrix.DenseFourWayDHAdditiveGenicVarianceMatrix.taxa_grp_name"]], "taxa_grp_spix (pybrops.model.vmat.densefourwaydhadditivegenicvariancematrix.densefourwaydhadditivegenicvariancematrix property)": [[860, "pybrops.model.vmat.DenseFourWayDHAdditiveGenicVarianceMatrix.DenseFourWayDHAdditiveGenicVarianceMatrix.taxa_grp_spix"]], "taxa_grp_stix (pybrops.model.vmat.densefourwaydhadditivegenicvariancematrix.densefourwaydhadditivegenicvariancematrix property)": [[860, "pybrops.model.vmat.DenseFourWayDHAdditiveGenicVarianceMatrix.DenseFourWayDHAdditiveGenicVarianceMatrix.taxa_grp_stix"]], "to_csv() (pybrops.model.vmat.densefourwaydhadditivegenicvariancematrix.densefourwaydhadditivegenicvariancematrix method)": [[860, "pybrops.model.vmat.DenseFourWayDHAdditiveGenicVarianceMatrix.DenseFourWayDHAdditiveGenicVarianceMatrix.to_csv"]], "to_hdf5() (pybrops.model.vmat.densefourwaydhadditivegenicvariancematrix.densefourwaydhadditivegenicvariancematrix method)": [[860, "pybrops.model.vmat.DenseFourWayDHAdditiveGenicVarianceMatrix.DenseFourWayDHAdditiveGenicVarianceMatrix.to_hdf5"]], "to_pandas() (pybrops.model.vmat.densefourwaydhadditivegenicvariancematrix.densefourwaydhadditivegenicvariancematrix method)": [[860, "pybrops.model.vmat.DenseFourWayDHAdditiveGenicVarianceMatrix.DenseFourWayDHAdditiveGenicVarianceMatrix.to_pandas"]], "trait (pybrops.model.vmat.densefourwaydhadditivegenicvariancematrix.densefourwaydhadditivegenicvariancematrix property)": [[860, "pybrops.model.vmat.DenseFourWayDHAdditiveGenicVarianceMatrix.DenseFourWayDHAdditiveGenicVarianceMatrix.trait"]], "trait_axis (pybrops.model.vmat.densefourwaydhadditivegenicvariancematrix.densefourwaydhadditivegenicvariancematrix property)": [[860, "pybrops.model.vmat.DenseFourWayDHAdditiveGenicVarianceMatrix.DenseFourWayDHAdditiveGenicVarianceMatrix.trait_axis"]], "ungroup() (pybrops.model.vmat.densefourwaydhadditivegenicvariancematrix.densefourwaydhadditivegenicvariancematrix method)": [[860, "pybrops.model.vmat.DenseFourWayDHAdditiveGenicVarianceMatrix.DenseFourWayDHAdditiveGenicVarianceMatrix.ungroup"]], "ungroup_taxa() (pybrops.model.vmat.densefourwaydhadditivegenicvariancematrix.densefourwaydhadditivegenicvariancematrix method)": [[860, "pybrops.model.vmat.DenseFourWayDHAdditiveGenicVarianceMatrix.DenseFourWayDHAdditiveGenicVarianceMatrix.ungroup_taxa"]], "pybrops.model.vmat.densegeneticvariancematrix": [[861, "module-pybrops.model.vmat.DenseGeneticVarianceMatrix"]], "densegeneticvariancematrix (class in pybrops.model.vmat.densegeneticvariancematrix)": [[862, "pybrops.model.vmat.DenseGeneticVarianceMatrix.DenseGeneticVarianceMatrix"]], "__add__() (pybrops.model.vmat.densegeneticvariancematrix.densegeneticvariancematrix method)": [[862, "pybrops.model.vmat.DenseGeneticVarianceMatrix.DenseGeneticVarianceMatrix.__add__"]], "__mul__() (pybrops.model.vmat.densegeneticvariancematrix.densegeneticvariancematrix method)": [[862, "pybrops.model.vmat.DenseGeneticVarianceMatrix.DenseGeneticVarianceMatrix.__mul__"]], "adjoin() (pybrops.model.vmat.densegeneticvariancematrix.densegeneticvariancematrix method)": [[862, "pybrops.model.vmat.DenseGeneticVarianceMatrix.DenseGeneticVarianceMatrix.adjoin"]], "adjoin_taxa() (pybrops.model.vmat.densegeneticvariancematrix.densegeneticvariancematrix method)": [[862, "pybrops.model.vmat.DenseGeneticVarianceMatrix.DenseGeneticVarianceMatrix.adjoin_taxa"]], "adjoin_trait() (pybrops.model.vmat.densegeneticvariancematrix.densegeneticvariancematrix method)": [[862, "pybrops.model.vmat.DenseGeneticVarianceMatrix.DenseGeneticVarianceMatrix.adjoin_trait"]], "append() (pybrops.model.vmat.densegeneticvariancematrix.densegeneticvariancematrix method)": [[862, "pybrops.model.vmat.DenseGeneticVarianceMatrix.DenseGeneticVarianceMatrix.append"]], "append_taxa() (pybrops.model.vmat.densegeneticvariancematrix.densegeneticvariancematrix method)": [[862, "pybrops.model.vmat.DenseGeneticVarianceMatrix.DenseGeneticVarianceMatrix.append_taxa"]], "append_trait() (pybrops.model.vmat.densegeneticvariancematrix.densegeneticvariancematrix method)": [[862, "pybrops.model.vmat.DenseGeneticVarianceMatrix.DenseGeneticVarianceMatrix.append_trait"]], "concat() (pybrops.model.vmat.densegeneticvariancematrix.densegeneticvariancematrix class method)": [[862, "pybrops.model.vmat.DenseGeneticVarianceMatrix.DenseGeneticVarianceMatrix.concat"]], "concat_taxa() (pybrops.model.vmat.densegeneticvariancematrix.densegeneticvariancematrix class method)": [[862, "pybrops.model.vmat.DenseGeneticVarianceMatrix.DenseGeneticVarianceMatrix.concat_taxa"]], "concat_trait() (pybrops.model.vmat.densegeneticvariancematrix.densegeneticvariancematrix class method)": [[862, "pybrops.model.vmat.DenseGeneticVarianceMatrix.DenseGeneticVarianceMatrix.concat_trait"]], "copy() (pybrops.model.vmat.densegeneticvariancematrix.densegeneticvariancematrix method)": [[862, "pybrops.model.vmat.DenseGeneticVarianceMatrix.DenseGeneticVarianceMatrix.copy"]], "deepcopy() (pybrops.model.vmat.densegeneticvariancematrix.densegeneticvariancematrix method)": [[862, "pybrops.model.vmat.DenseGeneticVarianceMatrix.DenseGeneticVarianceMatrix.deepcopy"]], "delete() (pybrops.model.vmat.densegeneticvariancematrix.densegeneticvariancematrix method)": [[862, "pybrops.model.vmat.DenseGeneticVarianceMatrix.DenseGeneticVarianceMatrix.delete"]], "delete_taxa() (pybrops.model.vmat.densegeneticvariancematrix.densegeneticvariancematrix method)": [[862, "pybrops.model.vmat.DenseGeneticVarianceMatrix.DenseGeneticVarianceMatrix.delete_taxa"]], "delete_trait() (pybrops.model.vmat.densegeneticvariancematrix.densegeneticvariancematrix method)": [[862, "pybrops.model.vmat.DenseGeneticVarianceMatrix.DenseGeneticVarianceMatrix.delete_trait"]], "epgc (pybrops.model.vmat.densegeneticvariancematrix.densegeneticvariancematrix property)": [[862, "pybrops.model.vmat.DenseGeneticVarianceMatrix.DenseGeneticVarianceMatrix.epgc"]], "from_csv() (pybrops.model.vmat.densegeneticvariancematrix.densegeneticvariancematrix class method)": [[862, "pybrops.model.vmat.DenseGeneticVarianceMatrix.DenseGeneticVarianceMatrix.from_csv"]], "from_gmod() (pybrops.model.vmat.densegeneticvariancematrix.densegeneticvariancematrix class method)": [[862, "pybrops.model.vmat.DenseGeneticVarianceMatrix.DenseGeneticVarianceMatrix.from_gmod"]], "from_hdf5() (pybrops.model.vmat.densegeneticvariancematrix.densegeneticvariancematrix class method)": [[862, "pybrops.model.vmat.DenseGeneticVarianceMatrix.DenseGeneticVarianceMatrix.from_hdf5"]], "from_pandas() (pybrops.model.vmat.densegeneticvariancematrix.densegeneticvariancematrix class method)": [[862, "pybrops.model.vmat.DenseGeneticVarianceMatrix.DenseGeneticVarianceMatrix.from_pandas"]], "group() (pybrops.model.vmat.densegeneticvariancematrix.densegeneticvariancematrix method)": [[862, "pybrops.model.vmat.DenseGeneticVarianceMatrix.DenseGeneticVarianceMatrix.group"]], "group_taxa() (pybrops.model.vmat.densegeneticvariancematrix.densegeneticvariancematrix method)": [[862, "pybrops.model.vmat.DenseGeneticVarianceMatrix.DenseGeneticVarianceMatrix.group_taxa"]], "incorp() (pybrops.model.vmat.densegeneticvariancematrix.densegeneticvariancematrix method)": [[862, "pybrops.model.vmat.DenseGeneticVarianceMatrix.DenseGeneticVarianceMatrix.incorp"]], "incorp_taxa() (pybrops.model.vmat.densegeneticvariancematrix.densegeneticvariancematrix method)": [[862, "pybrops.model.vmat.DenseGeneticVarianceMatrix.DenseGeneticVarianceMatrix.incorp_taxa"]], "incorp_trait() (pybrops.model.vmat.densegeneticvariancematrix.densegeneticvariancematrix method)": [[862, "pybrops.model.vmat.DenseGeneticVarianceMatrix.DenseGeneticVarianceMatrix.incorp_trait"]], "insert() (pybrops.model.vmat.densegeneticvariancematrix.densegeneticvariancematrix method)": [[862, "pybrops.model.vmat.DenseGeneticVarianceMatrix.DenseGeneticVarianceMatrix.insert"]], "insert_taxa() (pybrops.model.vmat.densegeneticvariancematrix.densegeneticvariancematrix method)": [[862, "pybrops.model.vmat.DenseGeneticVarianceMatrix.DenseGeneticVarianceMatrix.insert_taxa"]], "insert_trait() (pybrops.model.vmat.densegeneticvariancematrix.densegeneticvariancematrix method)": [[862, "pybrops.model.vmat.DenseGeneticVarianceMatrix.DenseGeneticVarianceMatrix.insert_trait"]], "is_grouped() (pybrops.model.vmat.densegeneticvariancematrix.densegeneticvariancematrix method)": [[862, "pybrops.model.vmat.DenseGeneticVarianceMatrix.DenseGeneticVarianceMatrix.is_grouped"]], "is_grouped_taxa() (pybrops.model.vmat.densegeneticvariancematrix.densegeneticvariancematrix method)": [[862, "pybrops.model.vmat.DenseGeneticVarianceMatrix.DenseGeneticVarianceMatrix.is_grouped_taxa"]], "is_square() (pybrops.model.vmat.densegeneticvariancematrix.densegeneticvariancematrix method)": [[862, "pybrops.model.vmat.DenseGeneticVarianceMatrix.DenseGeneticVarianceMatrix.is_square"]], "is_square_taxa() (pybrops.model.vmat.densegeneticvariancematrix.densegeneticvariancematrix method)": [[862, "pybrops.model.vmat.DenseGeneticVarianceMatrix.DenseGeneticVarianceMatrix.is_square_taxa"]], "lexsort() (pybrops.model.vmat.densegeneticvariancematrix.densegeneticvariancematrix method)": [[862, "pybrops.model.vmat.DenseGeneticVarianceMatrix.DenseGeneticVarianceMatrix.lexsort"]], "lexsort_taxa() (pybrops.model.vmat.densegeneticvariancematrix.densegeneticvariancematrix method)": [[862, "pybrops.model.vmat.DenseGeneticVarianceMatrix.DenseGeneticVarianceMatrix.lexsort_taxa"]], "lexsort_trait() (pybrops.model.vmat.densegeneticvariancematrix.densegeneticvariancematrix method)": [[862, "pybrops.model.vmat.DenseGeneticVarianceMatrix.DenseGeneticVarianceMatrix.lexsort_trait"]], "mat (pybrops.model.vmat.densegeneticvariancematrix.densegeneticvariancematrix property)": [[862, "pybrops.model.vmat.DenseGeneticVarianceMatrix.DenseGeneticVarianceMatrix.mat"]], "mat_ndim (pybrops.model.vmat.densegeneticvariancematrix.densegeneticvariancematrix property)": [[862, "pybrops.model.vmat.DenseGeneticVarianceMatrix.DenseGeneticVarianceMatrix.mat_ndim"]], "mat_shape (pybrops.model.vmat.densegeneticvariancematrix.densegeneticvariancematrix property)": [[862, "pybrops.model.vmat.DenseGeneticVarianceMatrix.DenseGeneticVarianceMatrix.mat_shape"]], "nsquare (pybrops.model.vmat.densegeneticvariancematrix.densegeneticvariancematrix property)": [[862, "pybrops.model.vmat.DenseGeneticVarianceMatrix.DenseGeneticVarianceMatrix.nsquare"]], "nsquare_taxa (pybrops.model.vmat.densegeneticvariancematrix.densegeneticvariancematrix property)": [[862, "pybrops.model.vmat.DenseGeneticVarianceMatrix.DenseGeneticVarianceMatrix.nsquare_taxa"]], "ntaxa (pybrops.model.vmat.densegeneticvariancematrix.densegeneticvariancematrix property)": [[862, "pybrops.model.vmat.DenseGeneticVarianceMatrix.DenseGeneticVarianceMatrix.ntaxa"]], "ntrait (pybrops.model.vmat.densegeneticvariancematrix.densegeneticvariancematrix property)": [[862, "pybrops.model.vmat.DenseGeneticVarianceMatrix.DenseGeneticVarianceMatrix.ntrait"]], "remove() (pybrops.model.vmat.densegeneticvariancematrix.densegeneticvariancematrix method)": [[862, "pybrops.model.vmat.DenseGeneticVarianceMatrix.DenseGeneticVarianceMatrix.remove"]], "remove_taxa() (pybrops.model.vmat.densegeneticvariancematrix.densegeneticvariancematrix method)": [[862, "pybrops.model.vmat.DenseGeneticVarianceMatrix.DenseGeneticVarianceMatrix.remove_taxa"]], "remove_trait() (pybrops.model.vmat.densegeneticvariancematrix.densegeneticvariancematrix method)": [[862, "pybrops.model.vmat.DenseGeneticVarianceMatrix.DenseGeneticVarianceMatrix.remove_trait"]], "reorder() (pybrops.model.vmat.densegeneticvariancematrix.densegeneticvariancematrix method)": [[862, "pybrops.model.vmat.DenseGeneticVarianceMatrix.DenseGeneticVarianceMatrix.reorder"]], "reorder_taxa() (pybrops.model.vmat.densegeneticvariancematrix.densegeneticvariancematrix method)": [[862, "pybrops.model.vmat.DenseGeneticVarianceMatrix.DenseGeneticVarianceMatrix.reorder_taxa"]], "reorder_trait() (pybrops.model.vmat.densegeneticvariancematrix.densegeneticvariancematrix method)": [[862, "pybrops.model.vmat.DenseGeneticVarianceMatrix.DenseGeneticVarianceMatrix.reorder_trait"]], "select() (pybrops.model.vmat.densegeneticvariancematrix.densegeneticvariancematrix method)": [[862, "pybrops.model.vmat.DenseGeneticVarianceMatrix.DenseGeneticVarianceMatrix.select"]], "select_taxa() (pybrops.model.vmat.densegeneticvariancematrix.densegeneticvariancematrix method)": [[862, "pybrops.model.vmat.DenseGeneticVarianceMatrix.DenseGeneticVarianceMatrix.select_taxa"]], "select_trait() (pybrops.model.vmat.densegeneticvariancematrix.densegeneticvariancematrix method)": [[862, "pybrops.model.vmat.DenseGeneticVarianceMatrix.DenseGeneticVarianceMatrix.select_trait"]], "sort() (pybrops.model.vmat.densegeneticvariancematrix.densegeneticvariancematrix method)": [[862, "pybrops.model.vmat.DenseGeneticVarianceMatrix.DenseGeneticVarianceMatrix.sort"]], "sort_taxa() (pybrops.model.vmat.densegeneticvariancematrix.densegeneticvariancematrix method)": [[862, "pybrops.model.vmat.DenseGeneticVarianceMatrix.DenseGeneticVarianceMatrix.sort_taxa"]], "sort_trait() (pybrops.model.vmat.densegeneticvariancematrix.densegeneticvariancematrix method)": [[862, "pybrops.model.vmat.DenseGeneticVarianceMatrix.DenseGeneticVarianceMatrix.sort_trait"]], "square_axes (pybrops.model.vmat.densegeneticvariancematrix.densegeneticvariancematrix property)": [[862, "pybrops.model.vmat.DenseGeneticVarianceMatrix.DenseGeneticVarianceMatrix.square_axes"]], "square_axes_len (pybrops.model.vmat.densegeneticvariancematrix.densegeneticvariancematrix property)": [[862, "pybrops.model.vmat.DenseGeneticVarianceMatrix.DenseGeneticVarianceMatrix.square_axes_len"]], "square_taxa_axes (pybrops.model.vmat.densegeneticvariancematrix.densegeneticvariancematrix property)": [[862, "pybrops.model.vmat.DenseGeneticVarianceMatrix.DenseGeneticVarianceMatrix.square_taxa_axes"]], "square_taxa_axes_len (pybrops.model.vmat.densegeneticvariancematrix.densegeneticvariancematrix property)": [[862, "pybrops.model.vmat.DenseGeneticVarianceMatrix.DenseGeneticVarianceMatrix.square_taxa_axes_len"]], "taxa (pybrops.model.vmat.densegeneticvariancematrix.densegeneticvariancematrix property)": [[862, "pybrops.model.vmat.DenseGeneticVarianceMatrix.DenseGeneticVarianceMatrix.taxa"]], "taxa_axis (pybrops.model.vmat.densegeneticvariancematrix.densegeneticvariancematrix property)": [[862, "pybrops.model.vmat.DenseGeneticVarianceMatrix.DenseGeneticVarianceMatrix.taxa_axis"]], "taxa_grp (pybrops.model.vmat.densegeneticvariancematrix.densegeneticvariancematrix property)": [[862, "pybrops.model.vmat.DenseGeneticVarianceMatrix.DenseGeneticVarianceMatrix.taxa_grp"]], "taxa_grp_len (pybrops.model.vmat.densegeneticvariancematrix.densegeneticvariancematrix property)": [[862, "pybrops.model.vmat.DenseGeneticVarianceMatrix.DenseGeneticVarianceMatrix.taxa_grp_len"]], "taxa_grp_name (pybrops.model.vmat.densegeneticvariancematrix.densegeneticvariancematrix property)": [[862, "pybrops.model.vmat.DenseGeneticVarianceMatrix.DenseGeneticVarianceMatrix.taxa_grp_name"]], "taxa_grp_spix (pybrops.model.vmat.densegeneticvariancematrix.densegeneticvariancematrix property)": [[862, "pybrops.model.vmat.DenseGeneticVarianceMatrix.DenseGeneticVarianceMatrix.taxa_grp_spix"]], "taxa_grp_stix (pybrops.model.vmat.densegeneticvariancematrix.densegeneticvariancematrix property)": [[862, "pybrops.model.vmat.DenseGeneticVarianceMatrix.DenseGeneticVarianceMatrix.taxa_grp_stix"]], "to_csv() (pybrops.model.vmat.densegeneticvariancematrix.densegeneticvariancematrix method)": [[862, "pybrops.model.vmat.DenseGeneticVarianceMatrix.DenseGeneticVarianceMatrix.to_csv"]], "to_hdf5() (pybrops.model.vmat.densegeneticvariancematrix.densegeneticvariancematrix method)": [[862, "pybrops.model.vmat.DenseGeneticVarianceMatrix.DenseGeneticVarianceMatrix.to_hdf5"]], "to_pandas() (pybrops.model.vmat.densegeneticvariancematrix.densegeneticvariancematrix method)": [[862, "pybrops.model.vmat.DenseGeneticVarianceMatrix.DenseGeneticVarianceMatrix.to_pandas"]], "trait (pybrops.model.vmat.densegeneticvariancematrix.densegeneticvariancematrix property)": [[862, "pybrops.model.vmat.DenseGeneticVarianceMatrix.DenseGeneticVarianceMatrix.trait"]], "trait_axis (pybrops.model.vmat.densegeneticvariancematrix.densegeneticvariancematrix property)": [[862, "pybrops.model.vmat.DenseGeneticVarianceMatrix.DenseGeneticVarianceMatrix.trait_axis"]], "ungroup() (pybrops.model.vmat.densegeneticvariancematrix.densegeneticvariancematrix method)": [[862, "pybrops.model.vmat.DenseGeneticVarianceMatrix.DenseGeneticVarianceMatrix.ungroup"]], "ungroup_taxa() (pybrops.model.vmat.densegeneticvariancematrix.densegeneticvariancematrix method)": [[862, "pybrops.model.vmat.DenseGeneticVarianceMatrix.DenseGeneticVarianceMatrix.ungroup_taxa"]], "check_is_densegeneticvariancematrix() (in module pybrops.model.vmat.densegeneticvariancematrix)": [[863, "pybrops.model.vmat.DenseGeneticVarianceMatrix.check_is_DenseGeneticVarianceMatrix"]], "pybrops.model.vmat.densegenicvariancematrix": [[864, "module-pybrops.model.vmat.DenseGenicVarianceMatrix"]], "densegenicvariancematrix (class in pybrops.model.vmat.densegenicvariancematrix)": [[865, "pybrops.model.vmat.DenseGenicVarianceMatrix.DenseGenicVarianceMatrix"]], "__add__() (pybrops.model.vmat.densegenicvariancematrix.densegenicvariancematrix method)": [[865, "pybrops.model.vmat.DenseGenicVarianceMatrix.DenseGenicVarianceMatrix.__add__"]], "__mul__() (pybrops.model.vmat.densegenicvariancematrix.densegenicvariancematrix method)": [[865, "pybrops.model.vmat.DenseGenicVarianceMatrix.DenseGenicVarianceMatrix.__mul__"]], "adjoin() (pybrops.model.vmat.densegenicvariancematrix.densegenicvariancematrix method)": [[865, "pybrops.model.vmat.DenseGenicVarianceMatrix.DenseGenicVarianceMatrix.adjoin"]], "adjoin_taxa() (pybrops.model.vmat.densegenicvariancematrix.densegenicvariancematrix method)": [[865, "pybrops.model.vmat.DenseGenicVarianceMatrix.DenseGenicVarianceMatrix.adjoin_taxa"]], "adjoin_trait() (pybrops.model.vmat.densegenicvariancematrix.densegenicvariancematrix method)": [[865, "pybrops.model.vmat.DenseGenicVarianceMatrix.DenseGenicVarianceMatrix.adjoin_trait"]], "append() (pybrops.model.vmat.densegenicvariancematrix.densegenicvariancematrix method)": [[865, "pybrops.model.vmat.DenseGenicVarianceMatrix.DenseGenicVarianceMatrix.append"]], "append_taxa() (pybrops.model.vmat.densegenicvariancematrix.densegenicvariancematrix method)": [[865, "pybrops.model.vmat.DenseGenicVarianceMatrix.DenseGenicVarianceMatrix.append_taxa"]], "append_trait() (pybrops.model.vmat.densegenicvariancematrix.densegenicvariancematrix method)": [[865, "pybrops.model.vmat.DenseGenicVarianceMatrix.DenseGenicVarianceMatrix.append_trait"]], "concat() (pybrops.model.vmat.densegenicvariancematrix.densegenicvariancematrix class method)": [[865, "pybrops.model.vmat.DenseGenicVarianceMatrix.DenseGenicVarianceMatrix.concat"]], "concat_taxa() (pybrops.model.vmat.densegenicvariancematrix.densegenicvariancematrix class method)": [[865, "pybrops.model.vmat.DenseGenicVarianceMatrix.DenseGenicVarianceMatrix.concat_taxa"]], "concat_trait() (pybrops.model.vmat.densegenicvariancematrix.densegenicvariancematrix class method)": [[865, "pybrops.model.vmat.DenseGenicVarianceMatrix.DenseGenicVarianceMatrix.concat_trait"]], "copy() (pybrops.model.vmat.densegenicvariancematrix.densegenicvariancematrix method)": [[865, "pybrops.model.vmat.DenseGenicVarianceMatrix.DenseGenicVarianceMatrix.copy"]], "deepcopy() (pybrops.model.vmat.densegenicvariancematrix.densegenicvariancematrix method)": [[865, "pybrops.model.vmat.DenseGenicVarianceMatrix.DenseGenicVarianceMatrix.deepcopy"]], "delete() (pybrops.model.vmat.densegenicvariancematrix.densegenicvariancematrix method)": [[865, "pybrops.model.vmat.DenseGenicVarianceMatrix.DenseGenicVarianceMatrix.delete"]], "delete_taxa() (pybrops.model.vmat.densegenicvariancematrix.densegenicvariancematrix method)": [[865, "pybrops.model.vmat.DenseGenicVarianceMatrix.DenseGenicVarianceMatrix.delete_taxa"]], "delete_trait() (pybrops.model.vmat.densegenicvariancematrix.densegenicvariancematrix method)": [[865, "pybrops.model.vmat.DenseGenicVarianceMatrix.DenseGenicVarianceMatrix.delete_trait"]], "epgc (pybrops.model.vmat.densegenicvariancematrix.densegenicvariancematrix property)": [[865, "pybrops.model.vmat.DenseGenicVarianceMatrix.DenseGenicVarianceMatrix.epgc"]], "from_csv() (pybrops.model.vmat.densegenicvariancematrix.densegenicvariancematrix class method)": [[865, "pybrops.model.vmat.DenseGenicVarianceMatrix.DenseGenicVarianceMatrix.from_csv"]], "from_gmod() (pybrops.model.vmat.densegenicvariancematrix.densegenicvariancematrix class method)": [[865, "pybrops.model.vmat.DenseGenicVarianceMatrix.DenseGenicVarianceMatrix.from_gmod"]], "from_hdf5() (pybrops.model.vmat.densegenicvariancematrix.densegenicvariancematrix class method)": [[865, "pybrops.model.vmat.DenseGenicVarianceMatrix.DenseGenicVarianceMatrix.from_hdf5"]], "from_pandas() (pybrops.model.vmat.densegenicvariancematrix.densegenicvariancematrix class method)": [[865, "pybrops.model.vmat.DenseGenicVarianceMatrix.DenseGenicVarianceMatrix.from_pandas"]], "group() (pybrops.model.vmat.densegenicvariancematrix.densegenicvariancematrix method)": [[865, "pybrops.model.vmat.DenseGenicVarianceMatrix.DenseGenicVarianceMatrix.group"]], "group_taxa() (pybrops.model.vmat.densegenicvariancematrix.densegenicvariancematrix method)": [[865, "pybrops.model.vmat.DenseGenicVarianceMatrix.DenseGenicVarianceMatrix.group_taxa"]], "incorp() (pybrops.model.vmat.densegenicvariancematrix.densegenicvariancematrix method)": [[865, "pybrops.model.vmat.DenseGenicVarianceMatrix.DenseGenicVarianceMatrix.incorp"]], "incorp_taxa() (pybrops.model.vmat.densegenicvariancematrix.densegenicvariancematrix method)": [[865, "pybrops.model.vmat.DenseGenicVarianceMatrix.DenseGenicVarianceMatrix.incorp_taxa"]], "incorp_trait() (pybrops.model.vmat.densegenicvariancematrix.densegenicvariancematrix method)": [[865, "pybrops.model.vmat.DenseGenicVarianceMatrix.DenseGenicVarianceMatrix.incorp_trait"]], "insert() (pybrops.model.vmat.densegenicvariancematrix.densegenicvariancematrix method)": [[865, "pybrops.model.vmat.DenseGenicVarianceMatrix.DenseGenicVarianceMatrix.insert"]], "insert_taxa() (pybrops.model.vmat.densegenicvariancematrix.densegenicvariancematrix method)": [[865, "pybrops.model.vmat.DenseGenicVarianceMatrix.DenseGenicVarianceMatrix.insert_taxa"]], "insert_trait() (pybrops.model.vmat.densegenicvariancematrix.densegenicvariancematrix method)": [[865, "pybrops.model.vmat.DenseGenicVarianceMatrix.DenseGenicVarianceMatrix.insert_trait"]], "is_grouped() (pybrops.model.vmat.densegenicvariancematrix.densegenicvariancematrix method)": [[865, "pybrops.model.vmat.DenseGenicVarianceMatrix.DenseGenicVarianceMatrix.is_grouped"]], "is_grouped_taxa() (pybrops.model.vmat.densegenicvariancematrix.densegenicvariancematrix method)": [[865, "pybrops.model.vmat.DenseGenicVarianceMatrix.DenseGenicVarianceMatrix.is_grouped_taxa"]], "is_square() (pybrops.model.vmat.densegenicvariancematrix.densegenicvariancematrix method)": [[865, "pybrops.model.vmat.DenseGenicVarianceMatrix.DenseGenicVarianceMatrix.is_square"]], "is_square_taxa() (pybrops.model.vmat.densegenicvariancematrix.densegenicvariancematrix method)": [[865, "pybrops.model.vmat.DenseGenicVarianceMatrix.DenseGenicVarianceMatrix.is_square_taxa"]], "lexsort() (pybrops.model.vmat.densegenicvariancematrix.densegenicvariancematrix method)": [[865, "pybrops.model.vmat.DenseGenicVarianceMatrix.DenseGenicVarianceMatrix.lexsort"]], "lexsort_taxa() (pybrops.model.vmat.densegenicvariancematrix.densegenicvariancematrix method)": [[865, "pybrops.model.vmat.DenseGenicVarianceMatrix.DenseGenicVarianceMatrix.lexsort_taxa"]], "lexsort_trait() (pybrops.model.vmat.densegenicvariancematrix.densegenicvariancematrix method)": [[865, "pybrops.model.vmat.DenseGenicVarianceMatrix.DenseGenicVarianceMatrix.lexsort_trait"]], "mat (pybrops.model.vmat.densegenicvariancematrix.densegenicvariancematrix property)": [[865, "pybrops.model.vmat.DenseGenicVarianceMatrix.DenseGenicVarianceMatrix.mat"]], "mat_ndim (pybrops.model.vmat.densegenicvariancematrix.densegenicvariancematrix property)": [[865, "pybrops.model.vmat.DenseGenicVarianceMatrix.DenseGenicVarianceMatrix.mat_ndim"]], "mat_shape (pybrops.model.vmat.densegenicvariancematrix.densegenicvariancematrix property)": [[865, "pybrops.model.vmat.DenseGenicVarianceMatrix.DenseGenicVarianceMatrix.mat_shape"]], "nsquare (pybrops.model.vmat.densegenicvariancematrix.densegenicvariancematrix property)": [[865, "pybrops.model.vmat.DenseGenicVarianceMatrix.DenseGenicVarianceMatrix.nsquare"]], "nsquare_taxa (pybrops.model.vmat.densegenicvariancematrix.densegenicvariancematrix property)": [[865, "pybrops.model.vmat.DenseGenicVarianceMatrix.DenseGenicVarianceMatrix.nsquare_taxa"]], "ntaxa (pybrops.model.vmat.densegenicvariancematrix.densegenicvariancematrix property)": [[865, "pybrops.model.vmat.DenseGenicVarianceMatrix.DenseGenicVarianceMatrix.ntaxa"]], "ntrait (pybrops.model.vmat.densegenicvariancematrix.densegenicvariancematrix property)": [[865, "pybrops.model.vmat.DenseGenicVarianceMatrix.DenseGenicVarianceMatrix.ntrait"]], "remove() (pybrops.model.vmat.densegenicvariancematrix.densegenicvariancematrix method)": [[865, "pybrops.model.vmat.DenseGenicVarianceMatrix.DenseGenicVarianceMatrix.remove"]], "remove_taxa() (pybrops.model.vmat.densegenicvariancematrix.densegenicvariancematrix method)": [[865, "pybrops.model.vmat.DenseGenicVarianceMatrix.DenseGenicVarianceMatrix.remove_taxa"]], "remove_trait() (pybrops.model.vmat.densegenicvariancematrix.densegenicvariancematrix method)": [[865, "pybrops.model.vmat.DenseGenicVarianceMatrix.DenseGenicVarianceMatrix.remove_trait"]], "reorder() (pybrops.model.vmat.densegenicvariancematrix.densegenicvariancematrix method)": [[865, "pybrops.model.vmat.DenseGenicVarianceMatrix.DenseGenicVarianceMatrix.reorder"]], "reorder_taxa() (pybrops.model.vmat.densegenicvariancematrix.densegenicvariancematrix method)": [[865, "pybrops.model.vmat.DenseGenicVarianceMatrix.DenseGenicVarianceMatrix.reorder_taxa"]], "reorder_trait() (pybrops.model.vmat.densegenicvariancematrix.densegenicvariancematrix method)": [[865, "pybrops.model.vmat.DenseGenicVarianceMatrix.DenseGenicVarianceMatrix.reorder_trait"]], "select() (pybrops.model.vmat.densegenicvariancematrix.densegenicvariancematrix method)": [[865, "pybrops.model.vmat.DenseGenicVarianceMatrix.DenseGenicVarianceMatrix.select"]], "select_taxa() (pybrops.model.vmat.densegenicvariancematrix.densegenicvariancematrix method)": [[865, "pybrops.model.vmat.DenseGenicVarianceMatrix.DenseGenicVarianceMatrix.select_taxa"]], "select_trait() (pybrops.model.vmat.densegenicvariancematrix.densegenicvariancematrix method)": [[865, "pybrops.model.vmat.DenseGenicVarianceMatrix.DenseGenicVarianceMatrix.select_trait"]], "sort() (pybrops.model.vmat.densegenicvariancematrix.densegenicvariancematrix method)": [[865, "pybrops.model.vmat.DenseGenicVarianceMatrix.DenseGenicVarianceMatrix.sort"]], "sort_taxa() (pybrops.model.vmat.densegenicvariancematrix.densegenicvariancematrix method)": [[865, "pybrops.model.vmat.DenseGenicVarianceMatrix.DenseGenicVarianceMatrix.sort_taxa"]], "sort_trait() (pybrops.model.vmat.densegenicvariancematrix.densegenicvariancematrix method)": [[865, "pybrops.model.vmat.DenseGenicVarianceMatrix.DenseGenicVarianceMatrix.sort_trait"]], "square_axes (pybrops.model.vmat.densegenicvariancematrix.densegenicvariancematrix property)": [[865, "pybrops.model.vmat.DenseGenicVarianceMatrix.DenseGenicVarianceMatrix.square_axes"]], "square_axes_len (pybrops.model.vmat.densegenicvariancematrix.densegenicvariancematrix property)": [[865, "pybrops.model.vmat.DenseGenicVarianceMatrix.DenseGenicVarianceMatrix.square_axes_len"]], "square_taxa_axes (pybrops.model.vmat.densegenicvariancematrix.densegenicvariancematrix property)": [[865, "pybrops.model.vmat.DenseGenicVarianceMatrix.DenseGenicVarianceMatrix.square_taxa_axes"]], "square_taxa_axes_len (pybrops.model.vmat.densegenicvariancematrix.densegenicvariancematrix property)": [[865, "pybrops.model.vmat.DenseGenicVarianceMatrix.DenseGenicVarianceMatrix.square_taxa_axes_len"]], "taxa (pybrops.model.vmat.densegenicvariancematrix.densegenicvariancematrix property)": [[865, "pybrops.model.vmat.DenseGenicVarianceMatrix.DenseGenicVarianceMatrix.taxa"]], "taxa_axis (pybrops.model.vmat.densegenicvariancematrix.densegenicvariancematrix property)": [[865, "pybrops.model.vmat.DenseGenicVarianceMatrix.DenseGenicVarianceMatrix.taxa_axis"]], "taxa_grp (pybrops.model.vmat.densegenicvariancematrix.densegenicvariancematrix property)": [[865, "pybrops.model.vmat.DenseGenicVarianceMatrix.DenseGenicVarianceMatrix.taxa_grp"]], "taxa_grp_len (pybrops.model.vmat.densegenicvariancematrix.densegenicvariancematrix property)": [[865, "pybrops.model.vmat.DenseGenicVarianceMatrix.DenseGenicVarianceMatrix.taxa_grp_len"]], "taxa_grp_name (pybrops.model.vmat.densegenicvariancematrix.densegenicvariancematrix property)": [[865, "pybrops.model.vmat.DenseGenicVarianceMatrix.DenseGenicVarianceMatrix.taxa_grp_name"]], "taxa_grp_spix (pybrops.model.vmat.densegenicvariancematrix.densegenicvariancematrix property)": [[865, "pybrops.model.vmat.DenseGenicVarianceMatrix.DenseGenicVarianceMatrix.taxa_grp_spix"]], "taxa_grp_stix (pybrops.model.vmat.densegenicvariancematrix.densegenicvariancematrix property)": [[865, "pybrops.model.vmat.DenseGenicVarianceMatrix.DenseGenicVarianceMatrix.taxa_grp_stix"]], "to_csv() (pybrops.model.vmat.densegenicvariancematrix.densegenicvariancematrix method)": [[865, "pybrops.model.vmat.DenseGenicVarianceMatrix.DenseGenicVarianceMatrix.to_csv"]], "to_hdf5() (pybrops.model.vmat.densegenicvariancematrix.densegenicvariancematrix method)": [[865, "pybrops.model.vmat.DenseGenicVarianceMatrix.DenseGenicVarianceMatrix.to_hdf5"]], "to_pandas() (pybrops.model.vmat.densegenicvariancematrix.densegenicvariancematrix method)": [[865, "pybrops.model.vmat.DenseGenicVarianceMatrix.DenseGenicVarianceMatrix.to_pandas"]], "trait (pybrops.model.vmat.densegenicvariancematrix.densegenicvariancematrix property)": [[865, "pybrops.model.vmat.DenseGenicVarianceMatrix.DenseGenicVarianceMatrix.trait"]], "trait_axis (pybrops.model.vmat.densegenicvariancematrix.densegenicvariancematrix property)": [[865, "pybrops.model.vmat.DenseGenicVarianceMatrix.DenseGenicVarianceMatrix.trait_axis"]], "ungroup() (pybrops.model.vmat.densegenicvariancematrix.densegenicvariancematrix method)": [[865, "pybrops.model.vmat.DenseGenicVarianceMatrix.DenseGenicVarianceMatrix.ungroup"]], "ungroup_taxa() (pybrops.model.vmat.densegenicvariancematrix.densegenicvariancematrix method)": [[865, "pybrops.model.vmat.DenseGenicVarianceMatrix.DenseGenicVarianceMatrix.ungroup_taxa"]], "check_is_densegenicvariancematrix() (in module pybrops.model.vmat.densegenicvariancematrix)": [[866, "pybrops.model.vmat.DenseGenicVarianceMatrix.check_is_DenseGenicVarianceMatrix"]], "pybrops.model.vmat.densethreewaydhadditivegeneticvariancematrix": [[867, "module-pybrops.model.vmat.DenseThreeWayDHAdditiveGeneticVarianceMatrix"]], "densethreewaydhadditivegeneticvariancematrix (class in pybrops.model.vmat.densethreewaydhadditivegeneticvariancematrix)": [[868, "pybrops.model.vmat.DenseThreeWayDHAdditiveGeneticVarianceMatrix.DenseThreeWayDHAdditiveGeneticVarianceMatrix"]], "__add__() (pybrops.model.vmat.densethreewaydhadditivegeneticvariancematrix.densethreewaydhadditivegeneticvariancematrix method)": [[868, "pybrops.model.vmat.DenseThreeWayDHAdditiveGeneticVarianceMatrix.DenseThreeWayDHAdditiveGeneticVarianceMatrix.__add__"]], "__mul__() (pybrops.model.vmat.densethreewaydhadditivegeneticvariancematrix.densethreewaydhadditivegeneticvariancematrix method)": [[868, "pybrops.model.vmat.DenseThreeWayDHAdditiveGeneticVarianceMatrix.DenseThreeWayDHAdditiveGeneticVarianceMatrix.__mul__"]], "adjoin() (pybrops.model.vmat.densethreewaydhadditivegeneticvariancematrix.densethreewaydhadditivegeneticvariancematrix method)": [[868, "pybrops.model.vmat.DenseThreeWayDHAdditiveGeneticVarianceMatrix.DenseThreeWayDHAdditiveGeneticVarianceMatrix.adjoin"]], "adjoin_taxa() (pybrops.model.vmat.densethreewaydhadditivegeneticvariancematrix.densethreewaydhadditivegeneticvariancematrix method)": [[868, "pybrops.model.vmat.DenseThreeWayDHAdditiveGeneticVarianceMatrix.DenseThreeWayDHAdditiveGeneticVarianceMatrix.adjoin_taxa"]], "adjoin_trait() (pybrops.model.vmat.densethreewaydhadditivegeneticvariancematrix.densethreewaydhadditivegeneticvariancematrix method)": [[868, "pybrops.model.vmat.DenseThreeWayDHAdditiveGeneticVarianceMatrix.DenseThreeWayDHAdditiveGeneticVarianceMatrix.adjoin_trait"]], "append() (pybrops.model.vmat.densethreewaydhadditivegeneticvariancematrix.densethreewaydhadditivegeneticvariancematrix method)": [[868, "pybrops.model.vmat.DenseThreeWayDHAdditiveGeneticVarianceMatrix.DenseThreeWayDHAdditiveGeneticVarianceMatrix.append"]], "append_taxa() (pybrops.model.vmat.densethreewaydhadditivegeneticvariancematrix.densethreewaydhadditivegeneticvariancematrix method)": [[868, "pybrops.model.vmat.DenseThreeWayDHAdditiveGeneticVarianceMatrix.DenseThreeWayDHAdditiveGeneticVarianceMatrix.append_taxa"]], "append_trait() (pybrops.model.vmat.densethreewaydhadditivegeneticvariancematrix.densethreewaydhadditivegeneticvariancematrix method)": [[868, "pybrops.model.vmat.DenseThreeWayDHAdditiveGeneticVarianceMatrix.DenseThreeWayDHAdditiveGeneticVarianceMatrix.append_trait"]], "concat() (pybrops.model.vmat.densethreewaydhadditivegeneticvariancematrix.densethreewaydhadditivegeneticvariancematrix class method)": [[868, "pybrops.model.vmat.DenseThreeWayDHAdditiveGeneticVarianceMatrix.DenseThreeWayDHAdditiveGeneticVarianceMatrix.concat"]], "concat_taxa() (pybrops.model.vmat.densethreewaydhadditivegeneticvariancematrix.densethreewaydhadditivegeneticvariancematrix class method)": [[868, "pybrops.model.vmat.DenseThreeWayDHAdditiveGeneticVarianceMatrix.DenseThreeWayDHAdditiveGeneticVarianceMatrix.concat_taxa"]], "concat_trait() (pybrops.model.vmat.densethreewaydhadditivegeneticvariancematrix.densethreewaydhadditivegeneticvariancematrix class method)": [[868, "pybrops.model.vmat.DenseThreeWayDHAdditiveGeneticVarianceMatrix.DenseThreeWayDHAdditiveGeneticVarianceMatrix.concat_trait"]], "copy() (pybrops.model.vmat.densethreewaydhadditivegeneticvariancematrix.densethreewaydhadditivegeneticvariancematrix method)": [[868, "pybrops.model.vmat.DenseThreeWayDHAdditiveGeneticVarianceMatrix.DenseThreeWayDHAdditiveGeneticVarianceMatrix.copy"]], "deepcopy() (pybrops.model.vmat.densethreewaydhadditivegeneticvariancematrix.densethreewaydhadditivegeneticvariancematrix method)": [[868, "pybrops.model.vmat.DenseThreeWayDHAdditiveGeneticVarianceMatrix.DenseThreeWayDHAdditiveGeneticVarianceMatrix.deepcopy"]], "delete() (pybrops.model.vmat.densethreewaydhadditivegeneticvariancematrix.densethreewaydhadditivegeneticvariancematrix method)": [[868, "pybrops.model.vmat.DenseThreeWayDHAdditiveGeneticVarianceMatrix.DenseThreeWayDHAdditiveGeneticVarianceMatrix.delete"]], "delete_taxa() (pybrops.model.vmat.densethreewaydhadditivegeneticvariancematrix.densethreewaydhadditivegeneticvariancematrix method)": [[868, "pybrops.model.vmat.DenseThreeWayDHAdditiveGeneticVarianceMatrix.DenseThreeWayDHAdditiveGeneticVarianceMatrix.delete_taxa"]], "delete_trait() (pybrops.model.vmat.densethreewaydhadditivegeneticvariancematrix.densethreewaydhadditivegeneticvariancematrix method)": [[868, "pybrops.model.vmat.DenseThreeWayDHAdditiveGeneticVarianceMatrix.DenseThreeWayDHAdditiveGeneticVarianceMatrix.delete_trait"]], "epgc (pybrops.model.vmat.densethreewaydhadditivegeneticvariancematrix.densethreewaydhadditivegeneticvariancematrix property)": [[868, "pybrops.model.vmat.DenseThreeWayDHAdditiveGeneticVarianceMatrix.DenseThreeWayDHAdditiveGeneticVarianceMatrix.epgc"]], "female_axis (pybrops.model.vmat.densethreewaydhadditivegeneticvariancematrix.densethreewaydhadditivegeneticvariancematrix property)": [[868, "pybrops.model.vmat.DenseThreeWayDHAdditiveGeneticVarianceMatrix.DenseThreeWayDHAdditiveGeneticVarianceMatrix.female_axis"]], "from_algmod() (pybrops.model.vmat.densethreewaydhadditivegeneticvariancematrix.densethreewaydhadditivegeneticvariancematrix class method)": [[868, "pybrops.model.vmat.DenseThreeWayDHAdditiveGeneticVarianceMatrix.DenseThreeWayDHAdditiveGeneticVarianceMatrix.from_algmod"]], "from_csv() (pybrops.model.vmat.densethreewaydhadditivegeneticvariancematrix.densethreewaydhadditivegeneticvariancematrix class method)": [[868, "pybrops.model.vmat.DenseThreeWayDHAdditiveGeneticVarianceMatrix.DenseThreeWayDHAdditiveGeneticVarianceMatrix.from_csv"]], "from_gmod() (pybrops.model.vmat.densethreewaydhadditivegeneticvariancematrix.densethreewaydhadditivegeneticvariancematrix class method)": [[868, "pybrops.model.vmat.DenseThreeWayDHAdditiveGeneticVarianceMatrix.DenseThreeWayDHAdditiveGeneticVarianceMatrix.from_gmod"]], "from_hdf5() (pybrops.model.vmat.densethreewaydhadditivegeneticvariancematrix.densethreewaydhadditivegeneticvariancematrix class method)": [[868, "pybrops.model.vmat.DenseThreeWayDHAdditiveGeneticVarianceMatrix.DenseThreeWayDHAdditiveGeneticVarianceMatrix.from_hdf5"]], "from_pandas() (pybrops.model.vmat.densethreewaydhadditivegeneticvariancematrix.densethreewaydhadditivegeneticvariancematrix class method)": [[868, "pybrops.model.vmat.DenseThreeWayDHAdditiveGeneticVarianceMatrix.DenseThreeWayDHAdditiveGeneticVarianceMatrix.from_pandas"]], "group() (pybrops.model.vmat.densethreewaydhadditivegeneticvariancematrix.densethreewaydhadditivegeneticvariancematrix method)": [[868, "pybrops.model.vmat.DenseThreeWayDHAdditiveGeneticVarianceMatrix.DenseThreeWayDHAdditiveGeneticVarianceMatrix.group"]], "group_taxa() (pybrops.model.vmat.densethreewaydhadditivegeneticvariancematrix.densethreewaydhadditivegeneticvariancematrix method)": [[868, "pybrops.model.vmat.DenseThreeWayDHAdditiveGeneticVarianceMatrix.DenseThreeWayDHAdditiveGeneticVarianceMatrix.group_taxa"]], "incorp() (pybrops.model.vmat.densethreewaydhadditivegeneticvariancematrix.densethreewaydhadditivegeneticvariancematrix method)": [[868, "pybrops.model.vmat.DenseThreeWayDHAdditiveGeneticVarianceMatrix.DenseThreeWayDHAdditiveGeneticVarianceMatrix.incorp"]], "incorp_taxa() (pybrops.model.vmat.densethreewaydhadditivegeneticvariancematrix.densethreewaydhadditivegeneticvariancematrix method)": [[868, "pybrops.model.vmat.DenseThreeWayDHAdditiveGeneticVarianceMatrix.DenseThreeWayDHAdditiveGeneticVarianceMatrix.incorp_taxa"]], "incorp_trait() (pybrops.model.vmat.densethreewaydhadditivegeneticvariancematrix.densethreewaydhadditivegeneticvariancematrix method)": [[868, "pybrops.model.vmat.DenseThreeWayDHAdditiveGeneticVarianceMatrix.DenseThreeWayDHAdditiveGeneticVarianceMatrix.incorp_trait"]], "insert() (pybrops.model.vmat.densethreewaydhadditivegeneticvariancematrix.densethreewaydhadditivegeneticvariancematrix method)": [[868, "pybrops.model.vmat.DenseThreeWayDHAdditiveGeneticVarianceMatrix.DenseThreeWayDHAdditiveGeneticVarianceMatrix.insert"]], "insert_taxa() (pybrops.model.vmat.densethreewaydhadditivegeneticvariancematrix.densethreewaydhadditivegeneticvariancematrix method)": [[868, "pybrops.model.vmat.DenseThreeWayDHAdditiveGeneticVarianceMatrix.DenseThreeWayDHAdditiveGeneticVarianceMatrix.insert_taxa"]], "insert_trait() (pybrops.model.vmat.densethreewaydhadditivegeneticvariancematrix.densethreewaydhadditivegeneticvariancematrix method)": [[868, "pybrops.model.vmat.DenseThreeWayDHAdditiveGeneticVarianceMatrix.DenseThreeWayDHAdditiveGeneticVarianceMatrix.insert_trait"]], "is_grouped() (pybrops.model.vmat.densethreewaydhadditivegeneticvariancematrix.densethreewaydhadditivegeneticvariancematrix method)": [[868, "pybrops.model.vmat.DenseThreeWayDHAdditiveGeneticVarianceMatrix.DenseThreeWayDHAdditiveGeneticVarianceMatrix.is_grouped"]], "is_grouped_taxa() (pybrops.model.vmat.densethreewaydhadditivegeneticvariancematrix.densethreewaydhadditivegeneticvariancematrix method)": [[868, "pybrops.model.vmat.DenseThreeWayDHAdditiveGeneticVarianceMatrix.DenseThreeWayDHAdditiveGeneticVarianceMatrix.is_grouped_taxa"]], "is_square() (pybrops.model.vmat.densethreewaydhadditivegeneticvariancematrix.densethreewaydhadditivegeneticvariancematrix method)": [[868, "pybrops.model.vmat.DenseThreeWayDHAdditiveGeneticVarianceMatrix.DenseThreeWayDHAdditiveGeneticVarianceMatrix.is_square"]], "is_square_taxa() (pybrops.model.vmat.densethreewaydhadditivegeneticvariancematrix.densethreewaydhadditivegeneticvariancematrix method)": [[868, "pybrops.model.vmat.DenseThreeWayDHAdditiveGeneticVarianceMatrix.DenseThreeWayDHAdditiveGeneticVarianceMatrix.is_square_taxa"]], "lexsort() (pybrops.model.vmat.densethreewaydhadditivegeneticvariancematrix.densethreewaydhadditivegeneticvariancematrix method)": [[868, "pybrops.model.vmat.DenseThreeWayDHAdditiveGeneticVarianceMatrix.DenseThreeWayDHAdditiveGeneticVarianceMatrix.lexsort"]], "lexsort_taxa() (pybrops.model.vmat.densethreewaydhadditivegeneticvariancematrix.densethreewaydhadditivegeneticvariancematrix method)": [[868, "pybrops.model.vmat.DenseThreeWayDHAdditiveGeneticVarianceMatrix.DenseThreeWayDHAdditiveGeneticVarianceMatrix.lexsort_taxa"]], "lexsort_trait() (pybrops.model.vmat.densethreewaydhadditivegeneticvariancematrix.densethreewaydhadditivegeneticvariancematrix method)": [[868, "pybrops.model.vmat.DenseThreeWayDHAdditiveGeneticVarianceMatrix.DenseThreeWayDHAdditiveGeneticVarianceMatrix.lexsort_trait"]], "male_axis (pybrops.model.vmat.densethreewaydhadditivegeneticvariancematrix.densethreewaydhadditivegeneticvariancematrix property)": [[868, "pybrops.model.vmat.DenseThreeWayDHAdditiveGeneticVarianceMatrix.DenseThreeWayDHAdditiveGeneticVarianceMatrix.male_axis"]], "mat (pybrops.model.vmat.densethreewaydhadditivegeneticvariancematrix.densethreewaydhadditivegeneticvariancematrix property)": [[868, "pybrops.model.vmat.DenseThreeWayDHAdditiveGeneticVarianceMatrix.DenseThreeWayDHAdditiveGeneticVarianceMatrix.mat"]], "mat_ndim (pybrops.model.vmat.densethreewaydhadditivegeneticvariancematrix.densethreewaydhadditivegeneticvariancematrix property)": [[868, "pybrops.model.vmat.DenseThreeWayDHAdditiveGeneticVarianceMatrix.DenseThreeWayDHAdditiveGeneticVarianceMatrix.mat_ndim"]], "mat_shape (pybrops.model.vmat.densethreewaydhadditivegeneticvariancematrix.densethreewaydhadditivegeneticvariancematrix property)": [[868, "pybrops.model.vmat.DenseThreeWayDHAdditiveGeneticVarianceMatrix.DenseThreeWayDHAdditiveGeneticVarianceMatrix.mat_shape"]], "nfemale (pybrops.model.vmat.densethreewaydhadditivegeneticvariancematrix.densethreewaydhadditivegeneticvariancematrix property)": [[868, "pybrops.model.vmat.DenseThreeWayDHAdditiveGeneticVarianceMatrix.DenseThreeWayDHAdditiveGeneticVarianceMatrix.nfemale"]], "nmale (pybrops.model.vmat.densethreewaydhadditivegeneticvariancematrix.densethreewaydhadditivegeneticvariancematrix property)": [[868, "pybrops.model.vmat.DenseThreeWayDHAdditiveGeneticVarianceMatrix.DenseThreeWayDHAdditiveGeneticVarianceMatrix.nmale"]], "nrecurrent (pybrops.model.vmat.densethreewaydhadditivegeneticvariancematrix.densethreewaydhadditivegeneticvariancematrix property)": [[868, "pybrops.model.vmat.DenseThreeWayDHAdditiveGeneticVarianceMatrix.DenseThreeWayDHAdditiveGeneticVarianceMatrix.nrecurrent"]], "nsquare (pybrops.model.vmat.densethreewaydhadditivegeneticvariancematrix.densethreewaydhadditivegeneticvariancematrix property)": [[868, "pybrops.model.vmat.DenseThreeWayDHAdditiveGeneticVarianceMatrix.DenseThreeWayDHAdditiveGeneticVarianceMatrix.nsquare"]], "nsquare_taxa (pybrops.model.vmat.densethreewaydhadditivegeneticvariancematrix.densethreewaydhadditivegeneticvariancematrix property)": [[868, "pybrops.model.vmat.DenseThreeWayDHAdditiveGeneticVarianceMatrix.DenseThreeWayDHAdditiveGeneticVarianceMatrix.nsquare_taxa"]], "ntaxa (pybrops.model.vmat.densethreewaydhadditivegeneticvariancematrix.densethreewaydhadditivegeneticvariancematrix property)": [[868, "pybrops.model.vmat.DenseThreeWayDHAdditiveGeneticVarianceMatrix.DenseThreeWayDHAdditiveGeneticVarianceMatrix.ntaxa"]], "ntrait (pybrops.model.vmat.densethreewaydhadditivegeneticvariancematrix.densethreewaydhadditivegeneticvariancematrix property)": [[868, "pybrops.model.vmat.DenseThreeWayDHAdditiveGeneticVarianceMatrix.DenseThreeWayDHAdditiveGeneticVarianceMatrix.ntrait"]], "recurrent_axis (pybrops.model.vmat.densethreewaydhadditivegeneticvariancematrix.densethreewaydhadditivegeneticvariancematrix property)": [[868, "pybrops.model.vmat.DenseThreeWayDHAdditiveGeneticVarianceMatrix.DenseThreeWayDHAdditiveGeneticVarianceMatrix.recurrent_axis"]], "remove() (pybrops.model.vmat.densethreewaydhadditivegeneticvariancematrix.densethreewaydhadditivegeneticvariancematrix method)": [[868, "pybrops.model.vmat.DenseThreeWayDHAdditiveGeneticVarianceMatrix.DenseThreeWayDHAdditiveGeneticVarianceMatrix.remove"]], "remove_taxa() (pybrops.model.vmat.densethreewaydhadditivegeneticvariancematrix.densethreewaydhadditivegeneticvariancematrix method)": [[868, "pybrops.model.vmat.DenseThreeWayDHAdditiveGeneticVarianceMatrix.DenseThreeWayDHAdditiveGeneticVarianceMatrix.remove_taxa"]], "remove_trait() (pybrops.model.vmat.densethreewaydhadditivegeneticvariancematrix.densethreewaydhadditivegeneticvariancematrix method)": [[868, "pybrops.model.vmat.DenseThreeWayDHAdditiveGeneticVarianceMatrix.DenseThreeWayDHAdditiveGeneticVarianceMatrix.remove_trait"]], "reorder() (pybrops.model.vmat.densethreewaydhadditivegeneticvariancematrix.densethreewaydhadditivegeneticvariancematrix method)": [[868, "pybrops.model.vmat.DenseThreeWayDHAdditiveGeneticVarianceMatrix.DenseThreeWayDHAdditiveGeneticVarianceMatrix.reorder"]], "reorder_taxa() (pybrops.model.vmat.densethreewaydhadditivegeneticvariancematrix.densethreewaydhadditivegeneticvariancematrix method)": [[868, "pybrops.model.vmat.DenseThreeWayDHAdditiveGeneticVarianceMatrix.DenseThreeWayDHAdditiveGeneticVarianceMatrix.reorder_taxa"]], "reorder_trait() (pybrops.model.vmat.densethreewaydhadditivegeneticvariancematrix.densethreewaydhadditivegeneticvariancematrix method)": [[868, "pybrops.model.vmat.DenseThreeWayDHAdditiveGeneticVarianceMatrix.DenseThreeWayDHAdditiveGeneticVarianceMatrix.reorder_trait"]], "select() (pybrops.model.vmat.densethreewaydhadditivegeneticvariancematrix.densethreewaydhadditivegeneticvariancematrix method)": [[868, "pybrops.model.vmat.DenseThreeWayDHAdditiveGeneticVarianceMatrix.DenseThreeWayDHAdditiveGeneticVarianceMatrix.select"]], "select_taxa() (pybrops.model.vmat.densethreewaydhadditivegeneticvariancematrix.densethreewaydhadditivegeneticvariancematrix method)": [[868, "pybrops.model.vmat.DenseThreeWayDHAdditiveGeneticVarianceMatrix.DenseThreeWayDHAdditiveGeneticVarianceMatrix.select_taxa"]], "select_trait() (pybrops.model.vmat.densethreewaydhadditivegeneticvariancematrix.densethreewaydhadditivegeneticvariancematrix method)": [[868, "pybrops.model.vmat.DenseThreeWayDHAdditiveGeneticVarianceMatrix.DenseThreeWayDHAdditiveGeneticVarianceMatrix.select_trait"]], "sort() (pybrops.model.vmat.densethreewaydhadditivegeneticvariancematrix.densethreewaydhadditivegeneticvariancematrix method)": [[868, "pybrops.model.vmat.DenseThreeWayDHAdditiveGeneticVarianceMatrix.DenseThreeWayDHAdditiveGeneticVarianceMatrix.sort"]], "sort_taxa() (pybrops.model.vmat.densethreewaydhadditivegeneticvariancematrix.densethreewaydhadditivegeneticvariancematrix method)": [[868, "pybrops.model.vmat.DenseThreeWayDHAdditiveGeneticVarianceMatrix.DenseThreeWayDHAdditiveGeneticVarianceMatrix.sort_taxa"]], "sort_trait() (pybrops.model.vmat.densethreewaydhadditivegeneticvariancematrix.densethreewaydhadditivegeneticvariancematrix method)": [[868, "pybrops.model.vmat.DenseThreeWayDHAdditiveGeneticVarianceMatrix.DenseThreeWayDHAdditiveGeneticVarianceMatrix.sort_trait"]], "square_axes (pybrops.model.vmat.densethreewaydhadditivegeneticvariancematrix.densethreewaydhadditivegeneticvariancematrix property)": [[868, "pybrops.model.vmat.DenseThreeWayDHAdditiveGeneticVarianceMatrix.DenseThreeWayDHAdditiveGeneticVarianceMatrix.square_axes"]], "square_axes_len (pybrops.model.vmat.densethreewaydhadditivegeneticvariancematrix.densethreewaydhadditivegeneticvariancematrix property)": [[868, "pybrops.model.vmat.DenseThreeWayDHAdditiveGeneticVarianceMatrix.DenseThreeWayDHAdditiveGeneticVarianceMatrix.square_axes_len"]], "square_taxa_axes (pybrops.model.vmat.densethreewaydhadditivegeneticvariancematrix.densethreewaydhadditivegeneticvariancematrix property)": [[868, "pybrops.model.vmat.DenseThreeWayDHAdditiveGeneticVarianceMatrix.DenseThreeWayDHAdditiveGeneticVarianceMatrix.square_taxa_axes"]], "square_taxa_axes_len (pybrops.model.vmat.densethreewaydhadditivegeneticvariancematrix.densethreewaydhadditivegeneticvariancematrix property)": [[868, "pybrops.model.vmat.DenseThreeWayDHAdditiveGeneticVarianceMatrix.DenseThreeWayDHAdditiveGeneticVarianceMatrix.square_taxa_axes_len"]], "taxa (pybrops.model.vmat.densethreewaydhadditivegeneticvariancematrix.densethreewaydhadditivegeneticvariancematrix property)": [[868, "pybrops.model.vmat.DenseThreeWayDHAdditiveGeneticVarianceMatrix.DenseThreeWayDHAdditiveGeneticVarianceMatrix.taxa"]], "taxa_axis (pybrops.model.vmat.densethreewaydhadditivegeneticvariancematrix.densethreewaydhadditivegeneticvariancematrix property)": [[868, "pybrops.model.vmat.DenseThreeWayDHAdditiveGeneticVarianceMatrix.DenseThreeWayDHAdditiveGeneticVarianceMatrix.taxa_axis"]], "taxa_grp (pybrops.model.vmat.densethreewaydhadditivegeneticvariancematrix.densethreewaydhadditivegeneticvariancematrix property)": [[868, "pybrops.model.vmat.DenseThreeWayDHAdditiveGeneticVarianceMatrix.DenseThreeWayDHAdditiveGeneticVarianceMatrix.taxa_grp"]], "taxa_grp_len (pybrops.model.vmat.densethreewaydhadditivegeneticvariancematrix.densethreewaydhadditivegeneticvariancematrix property)": [[868, "pybrops.model.vmat.DenseThreeWayDHAdditiveGeneticVarianceMatrix.DenseThreeWayDHAdditiveGeneticVarianceMatrix.taxa_grp_len"]], "taxa_grp_name (pybrops.model.vmat.densethreewaydhadditivegeneticvariancematrix.densethreewaydhadditivegeneticvariancematrix property)": [[868, "pybrops.model.vmat.DenseThreeWayDHAdditiveGeneticVarianceMatrix.DenseThreeWayDHAdditiveGeneticVarianceMatrix.taxa_grp_name"]], "taxa_grp_spix (pybrops.model.vmat.densethreewaydhadditivegeneticvariancematrix.densethreewaydhadditivegeneticvariancematrix property)": [[868, "pybrops.model.vmat.DenseThreeWayDHAdditiveGeneticVarianceMatrix.DenseThreeWayDHAdditiveGeneticVarianceMatrix.taxa_grp_spix"]], "taxa_grp_stix (pybrops.model.vmat.densethreewaydhadditivegeneticvariancematrix.densethreewaydhadditivegeneticvariancematrix property)": [[868, "pybrops.model.vmat.DenseThreeWayDHAdditiveGeneticVarianceMatrix.DenseThreeWayDHAdditiveGeneticVarianceMatrix.taxa_grp_stix"]], "to_csv() (pybrops.model.vmat.densethreewaydhadditivegeneticvariancematrix.densethreewaydhadditivegeneticvariancematrix method)": [[868, "pybrops.model.vmat.DenseThreeWayDHAdditiveGeneticVarianceMatrix.DenseThreeWayDHAdditiveGeneticVarianceMatrix.to_csv"]], "to_hdf5() (pybrops.model.vmat.densethreewaydhadditivegeneticvariancematrix.densethreewaydhadditivegeneticvariancematrix method)": [[868, "pybrops.model.vmat.DenseThreeWayDHAdditiveGeneticVarianceMatrix.DenseThreeWayDHAdditiveGeneticVarianceMatrix.to_hdf5"]], "to_pandas() (pybrops.model.vmat.densethreewaydhadditivegeneticvariancematrix.densethreewaydhadditivegeneticvariancematrix method)": [[868, "pybrops.model.vmat.DenseThreeWayDHAdditiveGeneticVarianceMatrix.DenseThreeWayDHAdditiveGeneticVarianceMatrix.to_pandas"]], "trait (pybrops.model.vmat.densethreewaydhadditivegeneticvariancematrix.densethreewaydhadditivegeneticvariancematrix property)": [[868, "pybrops.model.vmat.DenseThreeWayDHAdditiveGeneticVarianceMatrix.DenseThreeWayDHAdditiveGeneticVarianceMatrix.trait"]], "trait_axis (pybrops.model.vmat.densethreewaydhadditivegeneticvariancematrix.densethreewaydhadditivegeneticvariancematrix property)": [[868, "pybrops.model.vmat.DenseThreeWayDHAdditiveGeneticVarianceMatrix.DenseThreeWayDHAdditiveGeneticVarianceMatrix.trait_axis"]], "ungroup() (pybrops.model.vmat.densethreewaydhadditivegeneticvariancematrix.densethreewaydhadditivegeneticvariancematrix method)": [[868, "pybrops.model.vmat.DenseThreeWayDHAdditiveGeneticVarianceMatrix.DenseThreeWayDHAdditiveGeneticVarianceMatrix.ungroup"]], "ungroup_taxa() (pybrops.model.vmat.densethreewaydhadditivegeneticvariancematrix.densethreewaydhadditivegeneticvariancematrix method)": [[868, "pybrops.model.vmat.DenseThreeWayDHAdditiveGeneticVarianceMatrix.DenseThreeWayDHAdditiveGeneticVarianceMatrix.ungroup_taxa"]], "pybrops.model.vmat.densethreewaydhadditivegenicvariancematrix": [[869, "module-pybrops.model.vmat.DenseThreeWayDHAdditiveGenicVarianceMatrix"]], "densethreewaydhadditivegenicvariancematrix (class in pybrops.model.vmat.densethreewaydhadditivegenicvariancematrix)": [[870, "pybrops.model.vmat.DenseThreeWayDHAdditiveGenicVarianceMatrix.DenseThreeWayDHAdditiveGenicVarianceMatrix"]], "__add__() (pybrops.model.vmat.densethreewaydhadditivegenicvariancematrix.densethreewaydhadditivegenicvariancematrix method)": [[870, "pybrops.model.vmat.DenseThreeWayDHAdditiveGenicVarianceMatrix.DenseThreeWayDHAdditiveGenicVarianceMatrix.__add__"]], "__mul__() (pybrops.model.vmat.densethreewaydhadditivegenicvariancematrix.densethreewaydhadditivegenicvariancematrix method)": [[870, "pybrops.model.vmat.DenseThreeWayDHAdditiveGenicVarianceMatrix.DenseThreeWayDHAdditiveGenicVarianceMatrix.__mul__"]], "adjoin() (pybrops.model.vmat.densethreewaydhadditivegenicvariancematrix.densethreewaydhadditivegenicvariancematrix method)": [[870, "pybrops.model.vmat.DenseThreeWayDHAdditiveGenicVarianceMatrix.DenseThreeWayDHAdditiveGenicVarianceMatrix.adjoin"]], "adjoin_taxa() (pybrops.model.vmat.densethreewaydhadditivegenicvariancematrix.densethreewaydhadditivegenicvariancematrix method)": [[870, "pybrops.model.vmat.DenseThreeWayDHAdditiveGenicVarianceMatrix.DenseThreeWayDHAdditiveGenicVarianceMatrix.adjoin_taxa"]], "adjoin_trait() (pybrops.model.vmat.densethreewaydhadditivegenicvariancematrix.densethreewaydhadditivegenicvariancematrix method)": [[870, "pybrops.model.vmat.DenseThreeWayDHAdditiveGenicVarianceMatrix.DenseThreeWayDHAdditiveGenicVarianceMatrix.adjoin_trait"]], "append() (pybrops.model.vmat.densethreewaydhadditivegenicvariancematrix.densethreewaydhadditivegenicvariancematrix method)": [[870, "pybrops.model.vmat.DenseThreeWayDHAdditiveGenicVarianceMatrix.DenseThreeWayDHAdditiveGenicVarianceMatrix.append"]], "append_taxa() (pybrops.model.vmat.densethreewaydhadditivegenicvariancematrix.densethreewaydhadditivegenicvariancematrix method)": [[870, "pybrops.model.vmat.DenseThreeWayDHAdditiveGenicVarianceMatrix.DenseThreeWayDHAdditiveGenicVarianceMatrix.append_taxa"]], "append_trait() (pybrops.model.vmat.densethreewaydhadditivegenicvariancematrix.densethreewaydhadditivegenicvariancematrix method)": [[870, "pybrops.model.vmat.DenseThreeWayDHAdditiveGenicVarianceMatrix.DenseThreeWayDHAdditiveGenicVarianceMatrix.append_trait"]], "concat() (pybrops.model.vmat.densethreewaydhadditivegenicvariancematrix.densethreewaydhadditivegenicvariancematrix class method)": [[870, "pybrops.model.vmat.DenseThreeWayDHAdditiveGenicVarianceMatrix.DenseThreeWayDHAdditiveGenicVarianceMatrix.concat"]], "concat_taxa() (pybrops.model.vmat.densethreewaydhadditivegenicvariancematrix.densethreewaydhadditivegenicvariancematrix class method)": [[870, "pybrops.model.vmat.DenseThreeWayDHAdditiveGenicVarianceMatrix.DenseThreeWayDHAdditiveGenicVarianceMatrix.concat_taxa"]], "concat_trait() (pybrops.model.vmat.densethreewaydhadditivegenicvariancematrix.densethreewaydhadditivegenicvariancematrix class method)": [[870, "pybrops.model.vmat.DenseThreeWayDHAdditiveGenicVarianceMatrix.DenseThreeWayDHAdditiveGenicVarianceMatrix.concat_trait"]], "copy() (pybrops.model.vmat.densethreewaydhadditivegenicvariancematrix.densethreewaydhadditivegenicvariancematrix method)": [[870, "pybrops.model.vmat.DenseThreeWayDHAdditiveGenicVarianceMatrix.DenseThreeWayDHAdditiveGenicVarianceMatrix.copy"]], "deepcopy() (pybrops.model.vmat.densethreewaydhadditivegenicvariancematrix.densethreewaydhadditivegenicvariancematrix method)": [[870, "pybrops.model.vmat.DenseThreeWayDHAdditiveGenicVarianceMatrix.DenseThreeWayDHAdditiveGenicVarianceMatrix.deepcopy"]], "delete() (pybrops.model.vmat.densethreewaydhadditivegenicvariancematrix.densethreewaydhadditivegenicvariancematrix method)": [[870, "pybrops.model.vmat.DenseThreeWayDHAdditiveGenicVarianceMatrix.DenseThreeWayDHAdditiveGenicVarianceMatrix.delete"]], "delete_taxa() (pybrops.model.vmat.densethreewaydhadditivegenicvariancematrix.densethreewaydhadditivegenicvariancematrix method)": [[870, "pybrops.model.vmat.DenseThreeWayDHAdditiveGenicVarianceMatrix.DenseThreeWayDHAdditiveGenicVarianceMatrix.delete_taxa"]], "delete_trait() (pybrops.model.vmat.densethreewaydhadditivegenicvariancematrix.densethreewaydhadditivegenicvariancematrix method)": [[870, "pybrops.model.vmat.DenseThreeWayDHAdditiveGenicVarianceMatrix.DenseThreeWayDHAdditiveGenicVarianceMatrix.delete_trait"]], "epgc (pybrops.model.vmat.densethreewaydhadditivegenicvariancematrix.densethreewaydhadditivegenicvariancematrix property)": [[870, "pybrops.model.vmat.DenseThreeWayDHAdditiveGenicVarianceMatrix.DenseThreeWayDHAdditiveGenicVarianceMatrix.epgc"]], "female_axis (pybrops.model.vmat.densethreewaydhadditivegenicvariancematrix.densethreewaydhadditivegenicvariancematrix property)": [[870, "pybrops.model.vmat.DenseThreeWayDHAdditiveGenicVarianceMatrix.DenseThreeWayDHAdditiveGenicVarianceMatrix.female_axis"]], "from_algmod() (pybrops.model.vmat.densethreewaydhadditivegenicvariancematrix.densethreewaydhadditivegenicvariancematrix class method)": [[870, "pybrops.model.vmat.DenseThreeWayDHAdditiveGenicVarianceMatrix.DenseThreeWayDHAdditiveGenicVarianceMatrix.from_algmod"]], "from_csv() (pybrops.model.vmat.densethreewaydhadditivegenicvariancematrix.densethreewaydhadditivegenicvariancematrix class method)": [[870, "pybrops.model.vmat.DenseThreeWayDHAdditiveGenicVarianceMatrix.DenseThreeWayDHAdditiveGenicVarianceMatrix.from_csv"]], "from_gmod() (pybrops.model.vmat.densethreewaydhadditivegenicvariancematrix.densethreewaydhadditivegenicvariancematrix class method)": [[870, "pybrops.model.vmat.DenseThreeWayDHAdditiveGenicVarianceMatrix.DenseThreeWayDHAdditiveGenicVarianceMatrix.from_gmod"]], "from_hdf5() (pybrops.model.vmat.densethreewaydhadditivegenicvariancematrix.densethreewaydhadditivegenicvariancematrix class method)": [[870, "pybrops.model.vmat.DenseThreeWayDHAdditiveGenicVarianceMatrix.DenseThreeWayDHAdditiveGenicVarianceMatrix.from_hdf5"]], "from_pandas() (pybrops.model.vmat.densethreewaydhadditivegenicvariancematrix.densethreewaydhadditivegenicvariancematrix class method)": [[870, "pybrops.model.vmat.DenseThreeWayDHAdditiveGenicVarianceMatrix.DenseThreeWayDHAdditiveGenicVarianceMatrix.from_pandas"]], "group() (pybrops.model.vmat.densethreewaydhadditivegenicvariancematrix.densethreewaydhadditivegenicvariancematrix method)": [[870, "pybrops.model.vmat.DenseThreeWayDHAdditiveGenicVarianceMatrix.DenseThreeWayDHAdditiveGenicVarianceMatrix.group"]], "group_taxa() (pybrops.model.vmat.densethreewaydhadditivegenicvariancematrix.densethreewaydhadditivegenicvariancematrix method)": [[870, "pybrops.model.vmat.DenseThreeWayDHAdditiveGenicVarianceMatrix.DenseThreeWayDHAdditiveGenicVarianceMatrix.group_taxa"]], "incorp() (pybrops.model.vmat.densethreewaydhadditivegenicvariancematrix.densethreewaydhadditivegenicvariancematrix method)": [[870, "pybrops.model.vmat.DenseThreeWayDHAdditiveGenicVarianceMatrix.DenseThreeWayDHAdditiveGenicVarianceMatrix.incorp"]], "incorp_taxa() (pybrops.model.vmat.densethreewaydhadditivegenicvariancematrix.densethreewaydhadditivegenicvariancematrix method)": [[870, "pybrops.model.vmat.DenseThreeWayDHAdditiveGenicVarianceMatrix.DenseThreeWayDHAdditiveGenicVarianceMatrix.incorp_taxa"]], "incorp_trait() (pybrops.model.vmat.densethreewaydhadditivegenicvariancematrix.densethreewaydhadditivegenicvariancematrix method)": [[870, "pybrops.model.vmat.DenseThreeWayDHAdditiveGenicVarianceMatrix.DenseThreeWayDHAdditiveGenicVarianceMatrix.incorp_trait"]], "insert() (pybrops.model.vmat.densethreewaydhadditivegenicvariancematrix.densethreewaydhadditivegenicvariancematrix method)": [[870, "pybrops.model.vmat.DenseThreeWayDHAdditiveGenicVarianceMatrix.DenseThreeWayDHAdditiveGenicVarianceMatrix.insert"]], "insert_taxa() (pybrops.model.vmat.densethreewaydhadditivegenicvariancematrix.densethreewaydhadditivegenicvariancematrix method)": [[870, "pybrops.model.vmat.DenseThreeWayDHAdditiveGenicVarianceMatrix.DenseThreeWayDHAdditiveGenicVarianceMatrix.insert_taxa"]], "insert_trait() (pybrops.model.vmat.densethreewaydhadditivegenicvariancematrix.densethreewaydhadditivegenicvariancematrix method)": [[870, "pybrops.model.vmat.DenseThreeWayDHAdditiveGenicVarianceMatrix.DenseThreeWayDHAdditiveGenicVarianceMatrix.insert_trait"]], "is_grouped() (pybrops.model.vmat.densethreewaydhadditivegenicvariancematrix.densethreewaydhadditivegenicvariancematrix method)": [[870, "pybrops.model.vmat.DenseThreeWayDHAdditiveGenicVarianceMatrix.DenseThreeWayDHAdditiveGenicVarianceMatrix.is_grouped"]], "is_grouped_taxa() (pybrops.model.vmat.densethreewaydhadditivegenicvariancematrix.densethreewaydhadditivegenicvariancematrix method)": [[870, "pybrops.model.vmat.DenseThreeWayDHAdditiveGenicVarianceMatrix.DenseThreeWayDHAdditiveGenicVarianceMatrix.is_grouped_taxa"]], "is_square() (pybrops.model.vmat.densethreewaydhadditivegenicvariancematrix.densethreewaydhadditivegenicvariancematrix method)": [[870, "pybrops.model.vmat.DenseThreeWayDHAdditiveGenicVarianceMatrix.DenseThreeWayDHAdditiveGenicVarianceMatrix.is_square"]], "is_square_taxa() (pybrops.model.vmat.densethreewaydhadditivegenicvariancematrix.densethreewaydhadditivegenicvariancematrix method)": [[870, "pybrops.model.vmat.DenseThreeWayDHAdditiveGenicVarianceMatrix.DenseThreeWayDHAdditiveGenicVarianceMatrix.is_square_taxa"]], "lexsort() (pybrops.model.vmat.densethreewaydhadditivegenicvariancematrix.densethreewaydhadditivegenicvariancematrix method)": [[870, "pybrops.model.vmat.DenseThreeWayDHAdditiveGenicVarianceMatrix.DenseThreeWayDHAdditiveGenicVarianceMatrix.lexsort"]], "lexsort_taxa() (pybrops.model.vmat.densethreewaydhadditivegenicvariancematrix.densethreewaydhadditivegenicvariancematrix method)": [[870, "pybrops.model.vmat.DenseThreeWayDHAdditiveGenicVarianceMatrix.DenseThreeWayDHAdditiveGenicVarianceMatrix.lexsort_taxa"]], "lexsort_trait() (pybrops.model.vmat.densethreewaydhadditivegenicvariancematrix.densethreewaydhadditivegenicvariancematrix method)": [[870, "pybrops.model.vmat.DenseThreeWayDHAdditiveGenicVarianceMatrix.DenseThreeWayDHAdditiveGenicVarianceMatrix.lexsort_trait"]], "male_axis (pybrops.model.vmat.densethreewaydhadditivegenicvariancematrix.densethreewaydhadditivegenicvariancematrix property)": [[870, "pybrops.model.vmat.DenseThreeWayDHAdditiveGenicVarianceMatrix.DenseThreeWayDHAdditiveGenicVarianceMatrix.male_axis"]], "mat (pybrops.model.vmat.densethreewaydhadditivegenicvariancematrix.densethreewaydhadditivegenicvariancematrix property)": [[870, "pybrops.model.vmat.DenseThreeWayDHAdditiveGenicVarianceMatrix.DenseThreeWayDHAdditiveGenicVarianceMatrix.mat"]], "mat_ndim (pybrops.model.vmat.densethreewaydhadditivegenicvariancematrix.densethreewaydhadditivegenicvariancematrix property)": [[870, "pybrops.model.vmat.DenseThreeWayDHAdditiveGenicVarianceMatrix.DenseThreeWayDHAdditiveGenicVarianceMatrix.mat_ndim"]], "mat_shape (pybrops.model.vmat.densethreewaydhadditivegenicvariancematrix.densethreewaydhadditivegenicvariancematrix property)": [[870, "pybrops.model.vmat.DenseThreeWayDHAdditiveGenicVarianceMatrix.DenseThreeWayDHAdditiveGenicVarianceMatrix.mat_shape"]], "nfemale (pybrops.model.vmat.densethreewaydhadditivegenicvariancematrix.densethreewaydhadditivegenicvariancematrix property)": [[870, "pybrops.model.vmat.DenseThreeWayDHAdditiveGenicVarianceMatrix.DenseThreeWayDHAdditiveGenicVarianceMatrix.nfemale"]], "nmale (pybrops.model.vmat.densethreewaydhadditivegenicvariancematrix.densethreewaydhadditivegenicvariancematrix property)": [[870, "pybrops.model.vmat.DenseThreeWayDHAdditiveGenicVarianceMatrix.DenseThreeWayDHAdditiveGenicVarianceMatrix.nmale"]], "nrecurrent (pybrops.model.vmat.densethreewaydhadditivegenicvariancematrix.densethreewaydhadditivegenicvariancematrix property)": [[870, "pybrops.model.vmat.DenseThreeWayDHAdditiveGenicVarianceMatrix.DenseThreeWayDHAdditiveGenicVarianceMatrix.nrecurrent"]], "nsquare (pybrops.model.vmat.densethreewaydhadditivegenicvariancematrix.densethreewaydhadditivegenicvariancematrix property)": [[870, "pybrops.model.vmat.DenseThreeWayDHAdditiveGenicVarianceMatrix.DenseThreeWayDHAdditiveGenicVarianceMatrix.nsquare"]], "nsquare_taxa (pybrops.model.vmat.densethreewaydhadditivegenicvariancematrix.densethreewaydhadditivegenicvariancematrix property)": [[870, "pybrops.model.vmat.DenseThreeWayDHAdditiveGenicVarianceMatrix.DenseThreeWayDHAdditiveGenicVarianceMatrix.nsquare_taxa"]], "ntaxa (pybrops.model.vmat.densethreewaydhadditivegenicvariancematrix.densethreewaydhadditivegenicvariancematrix property)": [[870, "pybrops.model.vmat.DenseThreeWayDHAdditiveGenicVarianceMatrix.DenseThreeWayDHAdditiveGenicVarianceMatrix.ntaxa"]], "ntrait (pybrops.model.vmat.densethreewaydhadditivegenicvariancematrix.densethreewaydhadditivegenicvariancematrix property)": [[870, "pybrops.model.vmat.DenseThreeWayDHAdditiveGenicVarianceMatrix.DenseThreeWayDHAdditiveGenicVarianceMatrix.ntrait"]], "recurrent_axis (pybrops.model.vmat.densethreewaydhadditivegenicvariancematrix.densethreewaydhadditivegenicvariancematrix property)": [[870, "pybrops.model.vmat.DenseThreeWayDHAdditiveGenicVarianceMatrix.DenseThreeWayDHAdditiveGenicVarianceMatrix.recurrent_axis"]], "remove() (pybrops.model.vmat.densethreewaydhadditivegenicvariancematrix.densethreewaydhadditivegenicvariancematrix method)": [[870, "pybrops.model.vmat.DenseThreeWayDHAdditiveGenicVarianceMatrix.DenseThreeWayDHAdditiveGenicVarianceMatrix.remove"]], "remove_taxa() (pybrops.model.vmat.densethreewaydhadditivegenicvariancematrix.densethreewaydhadditivegenicvariancematrix method)": [[870, "pybrops.model.vmat.DenseThreeWayDHAdditiveGenicVarianceMatrix.DenseThreeWayDHAdditiveGenicVarianceMatrix.remove_taxa"]], "remove_trait() (pybrops.model.vmat.densethreewaydhadditivegenicvariancematrix.densethreewaydhadditivegenicvariancematrix method)": [[870, "pybrops.model.vmat.DenseThreeWayDHAdditiveGenicVarianceMatrix.DenseThreeWayDHAdditiveGenicVarianceMatrix.remove_trait"]], "reorder() (pybrops.model.vmat.densethreewaydhadditivegenicvariancematrix.densethreewaydhadditivegenicvariancematrix method)": [[870, "pybrops.model.vmat.DenseThreeWayDHAdditiveGenicVarianceMatrix.DenseThreeWayDHAdditiveGenicVarianceMatrix.reorder"]], "reorder_taxa() (pybrops.model.vmat.densethreewaydhadditivegenicvariancematrix.densethreewaydhadditivegenicvariancematrix method)": [[870, "pybrops.model.vmat.DenseThreeWayDHAdditiveGenicVarianceMatrix.DenseThreeWayDHAdditiveGenicVarianceMatrix.reorder_taxa"]], "reorder_trait() (pybrops.model.vmat.densethreewaydhadditivegenicvariancematrix.densethreewaydhadditivegenicvariancematrix method)": [[870, "pybrops.model.vmat.DenseThreeWayDHAdditiveGenicVarianceMatrix.DenseThreeWayDHAdditiveGenicVarianceMatrix.reorder_trait"]], "select() (pybrops.model.vmat.densethreewaydhadditivegenicvariancematrix.densethreewaydhadditivegenicvariancematrix method)": [[870, "pybrops.model.vmat.DenseThreeWayDHAdditiveGenicVarianceMatrix.DenseThreeWayDHAdditiveGenicVarianceMatrix.select"]], "select_taxa() (pybrops.model.vmat.densethreewaydhadditivegenicvariancematrix.densethreewaydhadditivegenicvariancematrix method)": [[870, "pybrops.model.vmat.DenseThreeWayDHAdditiveGenicVarianceMatrix.DenseThreeWayDHAdditiveGenicVarianceMatrix.select_taxa"]], "select_trait() (pybrops.model.vmat.densethreewaydhadditivegenicvariancematrix.densethreewaydhadditivegenicvariancematrix method)": [[870, "pybrops.model.vmat.DenseThreeWayDHAdditiveGenicVarianceMatrix.DenseThreeWayDHAdditiveGenicVarianceMatrix.select_trait"]], "sort() (pybrops.model.vmat.densethreewaydhadditivegenicvariancematrix.densethreewaydhadditivegenicvariancematrix method)": [[870, "pybrops.model.vmat.DenseThreeWayDHAdditiveGenicVarianceMatrix.DenseThreeWayDHAdditiveGenicVarianceMatrix.sort"]], "sort_taxa() (pybrops.model.vmat.densethreewaydhadditivegenicvariancematrix.densethreewaydhadditivegenicvariancematrix method)": [[870, "pybrops.model.vmat.DenseThreeWayDHAdditiveGenicVarianceMatrix.DenseThreeWayDHAdditiveGenicVarianceMatrix.sort_taxa"]], "sort_trait() (pybrops.model.vmat.densethreewaydhadditivegenicvariancematrix.densethreewaydhadditivegenicvariancematrix method)": [[870, "pybrops.model.vmat.DenseThreeWayDHAdditiveGenicVarianceMatrix.DenseThreeWayDHAdditiveGenicVarianceMatrix.sort_trait"]], "square_axes (pybrops.model.vmat.densethreewaydhadditivegenicvariancematrix.densethreewaydhadditivegenicvariancematrix property)": [[870, "pybrops.model.vmat.DenseThreeWayDHAdditiveGenicVarianceMatrix.DenseThreeWayDHAdditiveGenicVarianceMatrix.square_axes"]], "square_axes_len (pybrops.model.vmat.densethreewaydhadditivegenicvariancematrix.densethreewaydhadditivegenicvariancematrix property)": [[870, "pybrops.model.vmat.DenseThreeWayDHAdditiveGenicVarianceMatrix.DenseThreeWayDHAdditiveGenicVarianceMatrix.square_axes_len"]], "square_taxa_axes (pybrops.model.vmat.densethreewaydhadditivegenicvariancematrix.densethreewaydhadditivegenicvariancematrix property)": [[870, "pybrops.model.vmat.DenseThreeWayDHAdditiveGenicVarianceMatrix.DenseThreeWayDHAdditiveGenicVarianceMatrix.square_taxa_axes"]], "square_taxa_axes_len (pybrops.model.vmat.densethreewaydhadditivegenicvariancematrix.densethreewaydhadditivegenicvariancematrix property)": [[870, "pybrops.model.vmat.DenseThreeWayDHAdditiveGenicVarianceMatrix.DenseThreeWayDHAdditiveGenicVarianceMatrix.square_taxa_axes_len"]], "taxa (pybrops.model.vmat.densethreewaydhadditivegenicvariancematrix.densethreewaydhadditivegenicvariancematrix property)": [[870, "pybrops.model.vmat.DenseThreeWayDHAdditiveGenicVarianceMatrix.DenseThreeWayDHAdditiveGenicVarianceMatrix.taxa"]], "taxa_axis (pybrops.model.vmat.densethreewaydhadditivegenicvariancematrix.densethreewaydhadditivegenicvariancematrix property)": [[870, "pybrops.model.vmat.DenseThreeWayDHAdditiveGenicVarianceMatrix.DenseThreeWayDHAdditiveGenicVarianceMatrix.taxa_axis"]], "taxa_grp (pybrops.model.vmat.densethreewaydhadditivegenicvariancematrix.densethreewaydhadditivegenicvariancematrix property)": [[870, "pybrops.model.vmat.DenseThreeWayDHAdditiveGenicVarianceMatrix.DenseThreeWayDHAdditiveGenicVarianceMatrix.taxa_grp"]], "taxa_grp_len (pybrops.model.vmat.densethreewaydhadditivegenicvariancematrix.densethreewaydhadditivegenicvariancematrix property)": [[870, "pybrops.model.vmat.DenseThreeWayDHAdditiveGenicVarianceMatrix.DenseThreeWayDHAdditiveGenicVarianceMatrix.taxa_grp_len"]], "taxa_grp_name (pybrops.model.vmat.densethreewaydhadditivegenicvariancematrix.densethreewaydhadditivegenicvariancematrix property)": [[870, "pybrops.model.vmat.DenseThreeWayDHAdditiveGenicVarianceMatrix.DenseThreeWayDHAdditiveGenicVarianceMatrix.taxa_grp_name"]], "taxa_grp_spix (pybrops.model.vmat.densethreewaydhadditivegenicvariancematrix.densethreewaydhadditivegenicvariancematrix property)": [[870, "pybrops.model.vmat.DenseThreeWayDHAdditiveGenicVarianceMatrix.DenseThreeWayDHAdditiveGenicVarianceMatrix.taxa_grp_spix"]], "taxa_grp_stix (pybrops.model.vmat.densethreewaydhadditivegenicvariancematrix.densethreewaydhadditivegenicvariancematrix property)": [[870, "pybrops.model.vmat.DenseThreeWayDHAdditiveGenicVarianceMatrix.DenseThreeWayDHAdditiveGenicVarianceMatrix.taxa_grp_stix"]], "to_csv() (pybrops.model.vmat.densethreewaydhadditivegenicvariancematrix.densethreewaydhadditivegenicvariancematrix method)": [[870, "pybrops.model.vmat.DenseThreeWayDHAdditiveGenicVarianceMatrix.DenseThreeWayDHAdditiveGenicVarianceMatrix.to_csv"]], "to_hdf5() (pybrops.model.vmat.densethreewaydhadditivegenicvariancematrix.densethreewaydhadditivegenicvariancematrix method)": [[870, "pybrops.model.vmat.DenseThreeWayDHAdditiveGenicVarianceMatrix.DenseThreeWayDHAdditiveGenicVarianceMatrix.to_hdf5"]], "to_pandas() (pybrops.model.vmat.densethreewaydhadditivegenicvariancematrix.densethreewaydhadditivegenicvariancematrix method)": [[870, "pybrops.model.vmat.DenseThreeWayDHAdditiveGenicVarianceMatrix.DenseThreeWayDHAdditiveGenicVarianceMatrix.to_pandas"]], "trait (pybrops.model.vmat.densethreewaydhadditivegenicvariancematrix.densethreewaydhadditivegenicvariancematrix property)": [[870, "pybrops.model.vmat.DenseThreeWayDHAdditiveGenicVarianceMatrix.DenseThreeWayDHAdditiveGenicVarianceMatrix.trait"]], "trait_axis (pybrops.model.vmat.densethreewaydhadditivegenicvariancematrix.densethreewaydhadditivegenicvariancematrix property)": [[870, "pybrops.model.vmat.DenseThreeWayDHAdditiveGenicVarianceMatrix.DenseThreeWayDHAdditiveGenicVarianceMatrix.trait_axis"]], "ungroup() (pybrops.model.vmat.densethreewaydhadditivegenicvariancematrix.densethreewaydhadditivegenicvariancematrix method)": [[870, "pybrops.model.vmat.DenseThreeWayDHAdditiveGenicVarianceMatrix.DenseThreeWayDHAdditiveGenicVarianceMatrix.ungroup"]], "ungroup_taxa() (pybrops.model.vmat.densethreewaydhadditivegenicvariancematrix.densethreewaydhadditivegenicvariancematrix method)": [[870, "pybrops.model.vmat.DenseThreeWayDHAdditiveGenicVarianceMatrix.DenseThreeWayDHAdditiveGenicVarianceMatrix.ungroup_taxa"]], "pybrops.model.vmat.densetwowaydhadditivegeneticvariancematrix": [[871, "module-pybrops.model.vmat.DenseTwoWayDHAdditiveGeneticVarianceMatrix"]], "densetwowaydhadditivegeneticvariancematrix (class in pybrops.model.vmat.densetwowaydhadditivegeneticvariancematrix)": [[872, "pybrops.model.vmat.DenseTwoWayDHAdditiveGeneticVarianceMatrix.DenseTwoWayDHAdditiveGeneticVarianceMatrix"]], "__add__() (pybrops.model.vmat.densetwowaydhadditivegeneticvariancematrix.densetwowaydhadditivegeneticvariancematrix method)": [[872, "pybrops.model.vmat.DenseTwoWayDHAdditiveGeneticVarianceMatrix.DenseTwoWayDHAdditiveGeneticVarianceMatrix.__add__"]], "__mul__() (pybrops.model.vmat.densetwowaydhadditivegeneticvariancematrix.densetwowaydhadditivegeneticvariancematrix method)": [[872, "pybrops.model.vmat.DenseTwoWayDHAdditiveGeneticVarianceMatrix.DenseTwoWayDHAdditiveGeneticVarianceMatrix.__mul__"]], "adjoin() (pybrops.model.vmat.densetwowaydhadditivegeneticvariancematrix.densetwowaydhadditivegeneticvariancematrix method)": [[872, "pybrops.model.vmat.DenseTwoWayDHAdditiveGeneticVarianceMatrix.DenseTwoWayDHAdditiveGeneticVarianceMatrix.adjoin"]], "adjoin_taxa() (pybrops.model.vmat.densetwowaydhadditivegeneticvariancematrix.densetwowaydhadditivegeneticvariancematrix method)": [[872, "pybrops.model.vmat.DenseTwoWayDHAdditiveGeneticVarianceMatrix.DenseTwoWayDHAdditiveGeneticVarianceMatrix.adjoin_taxa"]], "adjoin_trait() (pybrops.model.vmat.densetwowaydhadditivegeneticvariancematrix.densetwowaydhadditivegeneticvariancematrix method)": [[872, "pybrops.model.vmat.DenseTwoWayDHAdditiveGeneticVarianceMatrix.DenseTwoWayDHAdditiveGeneticVarianceMatrix.adjoin_trait"]], "append() (pybrops.model.vmat.densetwowaydhadditivegeneticvariancematrix.densetwowaydhadditivegeneticvariancematrix method)": [[872, "pybrops.model.vmat.DenseTwoWayDHAdditiveGeneticVarianceMatrix.DenseTwoWayDHAdditiveGeneticVarianceMatrix.append"]], "append_taxa() (pybrops.model.vmat.densetwowaydhadditivegeneticvariancematrix.densetwowaydhadditivegeneticvariancematrix method)": [[872, "pybrops.model.vmat.DenseTwoWayDHAdditiveGeneticVarianceMatrix.DenseTwoWayDHAdditiveGeneticVarianceMatrix.append_taxa"]], "append_trait() (pybrops.model.vmat.densetwowaydhadditivegeneticvariancematrix.densetwowaydhadditivegeneticvariancematrix method)": [[872, "pybrops.model.vmat.DenseTwoWayDHAdditiveGeneticVarianceMatrix.DenseTwoWayDHAdditiveGeneticVarianceMatrix.append_trait"]], "concat() (pybrops.model.vmat.densetwowaydhadditivegeneticvariancematrix.densetwowaydhadditivegeneticvariancematrix class method)": [[872, "pybrops.model.vmat.DenseTwoWayDHAdditiveGeneticVarianceMatrix.DenseTwoWayDHAdditiveGeneticVarianceMatrix.concat"]], "concat_taxa() (pybrops.model.vmat.densetwowaydhadditivegeneticvariancematrix.densetwowaydhadditivegeneticvariancematrix class method)": [[872, "pybrops.model.vmat.DenseTwoWayDHAdditiveGeneticVarianceMatrix.DenseTwoWayDHAdditiveGeneticVarianceMatrix.concat_taxa"]], "concat_trait() (pybrops.model.vmat.densetwowaydhadditivegeneticvariancematrix.densetwowaydhadditivegeneticvariancematrix class method)": [[872, "pybrops.model.vmat.DenseTwoWayDHAdditiveGeneticVarianceMatrix.DenseTwoWayDHAdditiveGeneticVarianceMatrix.concat_trait"]], "copy() (pybrops.model.vmat.densetwowaydhadditivegeneticvariancematrix.densetwowaydhadditivegeneticvariancematrix method)": [[872, "pybrops.model.vmat.DenseTwoWayDHAdditiveGeneticVarianceMatrix.DenseTwoWayDHAdditiveGeneticVarianceMatrix.copy"]], "deepcopy() (pybrops.model.vmat.densetwowaydhadditivegeneticvariancematrix.densetwowaydhadditivegeneticvariancematrix method)": [[872, "pybrops.model.vmat.DenseTwoWayDHAdditiveGeneticVarianceMatrix.DenseTwoWayDHAdditiveGeneticVarianceMatrix.deepcopy"]], "delete() (pybrops.model.vmat.densetwowaydhadditivegeneticvariancematrix.densetwowaydhadditivegeneticvariancematrix method)": [[872, "pybrops.model.vmat.DenseTwoWayDHAdditiveGeneticVarianceMatrix.DenseTwoWayDHAdditiveGeneticVarianceMatrix.delete"]], "delete_taxa() (pybrops.model.vmat.densetwowaydhadditivegeneticvariancematrix.densetwowaydhadditivegeneticvariancematrix method)": [[872, "pybrops.model.vmat.DenseTwoWayDHAdditiveGeneticVarianceMatrix.DenseTwoWayDHAdditiveGeneticVarianceMatrix.delete_taxa"]], "delete_trait() (pybrops.model.vmat.densetwowaydhadditivegeneticvariancematrix.densetwowaydhadditivegeneticvariancematrix method)": [[872, "pybrops.model.vmat.DenseTwoWayDHAdditiveGeneticVarianceMatrix.DenseTwoWayDHAdditiveGeneticVarianceMatrix.delete_trait"]], "epgc (pybrops.model.vmat.densetwowaydhadditivegeneticvariancematrix.densetwowaydhadditivegeneticvariancematrix property)": [[872, "pybrops.model.vmat.DenseTwoWayDHAdditiveGeneticVarianceMatrix.DenseTwoWayDHAdditiveGeneticVarianceMatrix.epgc"]], "female_axis (pybrops.model.vmat.densetwowaydhadditivegeneticvariancematrix.densetwowaydhadditivegeneticvariancematrix property)": [[872, "pybrops.model.vmat.DenseTwoWayDHAdditiveGeneticVarianceMatrix.DenseTwoWayDHAdditiveGeneticVarianceMatrix.female_axis"]], "from_algmod() (pybrops.model.vmat.densetwowaydhadditivegeneticvariancematrix.densetwowaydhadditivegeneticvariancematrix class method)": [[872, "pybrops.model.vmat.DenseTwoWayDHAdditiveGeneticVarianceMatrix.DenseTwoWayDHAdditiveGeneticVarianceMatrix.from_algmod"]], "from_csv() (pybrops.model.vmat.densetwowaydhadditivegeneticvariancematrix.densetwowaydhadditivegeneticvariancematrix class method)": [[872, "pybrops.model.vmat.DenseTwoWayDHAdditiveGeneticVarianceMatrix.DenseTwoWayDHAdditiveGeneticVarianceMatrix.from_csv"]], "from_gmod() (pybrops.model.vmat.densetwowaydhadditivegeneticvariancematrix.densetwowaydhadditivegeneticvariancematrix class method)": [[872, "pybrops.model.vmat.DenseTwoWayDHAdditiveGeneticVarianceMatrix.DenseTwoWayDHAdditiveGeneticVarianceMatrix.from_gmod"]], "from_hdf5() (pybrops.model.vmat.densetwowaydhadditivegeneticvariancematrix.densetwowaydhadditivegeneticvariancematrix class method)": [[872, "pybrops.model.vmat.DenseTwoWayDHAdditiveGeneticVarianceMatrix.DenseTwoWayDHAdditiveGeneticVarianceMatrix.from_hdf5"]], "from_pandas() (pybrops.model.vmat.densetwowaydhadditivegeneticvariancematrix.densetwowaydhadditivegeneticvariancematrix class method)": [[872, "pybrops.model.vmat.DenseTwoWayDHAdditiveGeneticVarianceMatrix.DenseTwoWayDHAdditiveGeneticVarianceMatrix.from_pandas"]], "group() (pybrops.model.vmat.densetwowaydhadditivegeneticvariancematrix.densetwowaydhadditivegeneticvariancematrix method)": [[872, "pybrops.model.vmat.DenseTwoWayDHAdditiveGeneticVarianceMatrix.DenseTwoWayDHAdditiveGeneticVarianceMatrix.group"]], "group_taxa() (pybrops.model.vmat.densetwowaydhadditivegeneticvariancematrix.densetwowaydhadditivegeneticvariancematrix method)": [[872, "pybrops.model.vmat.DenseTwoWayDHAdditiveGeneticVarianceMatrix.DenseTwoWayDHAdditiveGeneticVarianceMatrix.group_taxa"]], "incorp() (pybrops.model.vmat.densetwowaydhadditivegeneticvariancematrix.densetwowaydhadditivegeneticvariancematrix method)": [[872, "pybrops.model.vmat.DenseTwoWayDHAdditiveGeneticVarianceMatrix.DenseTwoWayDHAdditiveGeneticVarianceMatrix.incorp"]], "incorp_taxa() (pybrops.model.vmat.densetwowaydhadditivegeneticvariancematrix.densetwowaydhadditivegeneticvariancematrix method)": [[872, "pybrops.model.vmat.DenseTwoWayDHAdditiveGeneticVarianceMatrix.DenseTwoWayDHAdditiveGeneticVarianceMatrix.incorp_taxa"]], "incorp_trait() (pybrops.model.vmat.densetwowaydhadditivegeneticvariancematrix.densetwowaydhadditivegeneticvariancematrix method)": [[872, "pybrops.model.vmat.DenseTwoWayDHAdditiveGeneticVarianceMatrix.DenseTwoWayDHAdditiveGeneticVarianceMatrix.incorp_trait"]], "insert() (pybrops.model.vmat.densetwowaydhadditivegeneticvariancematrix.densetwowaydhadditivegeneticvariancematrix method)": [[872, "pybrops.model.vmat.DenseTwoWayDHAdditiveGeneticVarianceMatrix.DenseTwoWayDHAdditiveGeneticVarianceMatrix.insert"]], "insert_taxa() (pybrops.model.vmat.densetwowaydhadditivegeneticvariancematrix.densetwowaydhadditivegeneticvariancematrix method)": [[872, "pybrops.model.vmat.DenseTwoWayDHAdditiveGeneticVarianceMatrix.DenseTwoWayDHAdditiveGeneticVarianceMatrix.insert_taxa"]], "insert_trait() (pybrops.model.vmat.densetwowaydhadditivegeneticvariancematrix.densetwowaydhadditivegeneticvariancematrix method)": [[872, "pybrops.model.vmat.DenseTwoWayDHAdditiveGeneticVarianceMatrix.DenseTwoWayDHAdditiveGeneticVarianceMatrix.insert_trait"]], "is_grouped() (pybrops.model.vmat.densetwowaydhadditivegeneticvariancematrix.densetwowaydhadditivegeneticvariancematrix method)": [[872, "pybrops.model.vmat.DenseTwoWayDHAdditiveGeneticVarianceMatrix.DenseTwoWayDHAdditiveGeneticVarianceMatrix.is_grouped"]], "is_grouped_taxa() (pybrops.model.vmat.densetwowaydhadditivegeneticvariancematrix.densetwowaydhadditivegeneticvariancematrix method)": [[872, "pybrops.model.vmat.DenseTwoWayDHAdditiveGeneticVarianceMatrix.DenseTwoWayDHAdditiveGeneticVarianceMatrix.is_grouped_taxa"]], "is_square() (pybrops.model.vmat.densetwowaydhadditivegeneticvariancematrix.densetwowaydhadditivegeneticvariancematrix method)": [[872, "pybrops.model.vmat.DenseTwoWayDHAdditiveGeneticVarianceMatrix.DenseTwoWayDHAdditiveGeneticVarianceMatrix.is_square"]], "is_square_taxa() (pybrops.model.vmat.densetwowaydhadditivegeneticvariancematrix.densetwowaydhadditivegeneticvariancematrix method)": [[872, "pybrops.model.vmat.DenseTwoWayDHAdditiveGeneticVarianceMatrix.DenseTwoWayDHAdditiveGeneticVarianceMatrix.is_square_taxa"]], "lexsort() (pybrops.model.vmat.densetwowaydhadditivegeneticvariancematrix.densetwowaydhadditivegeneticvariancematrix method)": [[872, "pybrops.model.vmat.DenseTwoWayDHAdditiveGeneticVarianceMatrix.DenseTwoWayDHAdditiveGeneticVarianceMatrix.lexsort"]], "lexsort_taxa() (pybrops.model.vmat.densetwowaydhadditivegeneticvariancematrix.densetwowaydhadditivegeneticvariancematrix method)": [[872, "pybrops.model.vmat.DenseTwoWayDHAdditiveGeneticVarianceMatrix.DenseTwoWayDHAdditiveGeneticVarianceMatrix.lexsort_taxa"]], "lexsort_trait() (pybrops.model.vmat.densetwowaydhadditivegeneticvariancematrix.densetwowaydhadditivegeneticvariancematrix method)": [[872, "pybrops.model.vmat.DenseTwoWayDHAdditiveGeneticVarianceMatrix.DenseTwoWayDHAdditiveGeneticVarianceMatrix.lexsort_trait"]], "male_axis (pybrops.model.vmat.densetwowaydhadditivegeneticvariancematrix.densetwowaydhadditivegeneticvariancematrix property)": [[872, "pybrops.model.vmat.DenseTwoWayDHAdditiveGeneticVarianceMatrix.DenseTwoWayDHAdditiveGeneticVarianceMatrix.male_axis"]], "mat (pybrops.model.vmat.densetwowaydhadditivegeneticvariancematrix.densetwowaydhadditivegeneticvariancematrix property)": [[872, "pybrops.model.vmat.DenseTwoWayDHAdditiveGeneticVarianceMatrix.DenseTwoWayDHAdditiveGeneticVarianceMatrix.mat"]], "mat_ndim (pybrops.model.vmat.densetwowaydhadditivegeneticvariancematrix.densetwowaydhadditivegeneticvariancematrix property)": [[872, "pybrops.model.vmat.DenseTwoWayDHAdditiveGeneticVarianceMatrix.DenseTwoWayDHAdditiveGeneticVarianceMatrix.mat_ndim"]], "mat_shape (pybrops.model.vmat.densetwowaydhadditivegeneticvariancematrix.densetwowaydhadditivegeneticvariancematrix property)": [[872, "pybrops.model.vmat.DenseTwoWayDHAdditiveGeneticVarianceMatrix.DenseTwoWayDHAdditiveGeneticVarianceMatrix.mat_shape"]], "nfemale (pybrops.model.vmat.densetwowaydhadditivegeneticvariancematrix.densetwowaydhadditivegeneticvariancematrix property)": [[872, "pybrops.model.vmat.DenseTwoWayDHAdditiveGeneticVarianceMatrix.DenseTwoWayDHAdditiveGeneticVarianceMatrix.nfemale"]], "nmale (pybrops.model.vmat.densetwowaydhadditivegeneticvariancematrix.densetwowaydhadditivegeneticvariancematrix property)": [[872, "pybrops.model.vmat.DenseTwoWayDHAdditiveGeneticVarianceMatrix.DenseTwoWayDHAdditiveGeneticVarianceMatrix.nmale"]], "nsquare (pybrops.model.vmat.densetwowaydhadditivegeneticvariancematrix.densetwowaydhadditivegeneticvariancematrix property)": [[872, "pybrops.model.vmat.DenseTwoWayDHAdditiveGeneticVarianceMatrix.DenseTwoWayDHAdditiveGeneticVarianceMatrix.nsquare"]], "nsquare_taxa (pybrops.model.vmat.densetwowaydhadditivegeneticvariancematrix.densetwowaydhadditivegeneticvariancematrix property)": [[872, "pybrops.model.vmat.DenseTwoWayDHAdditiveGeneticVarianceMatrix.DenseTwoWayDHAdditiveGeneticVarianceMatrix.nsquare_taxa"]], "ntaxa (pybrops.model.vmat.densetwowaydhadditivegeneticvariancematrix.densetwowaydhadditivegeneticvariancematrix property)": [[872, "pybrops.model.vmat.DenseTwoWayDHAdditiveGeneticVarianceMatrix.DenseTwoWayDHAdditiveGeneticVarianceMatrix.ntaxa"]], "ntrait (pybrops.model.vmat.densetwowaydhadditivegeneticvariancematrix.densetwowaydhadditivegeneticvariancematrix property)": [[872, "pybrops.model.vmat.DenseTwoWayDHAdditiveGeneticVarianceMatrix.DenseTwoWayDHAdditiveGeneticVarianceMatrix.ntrait"]], "remove() (pybrops.model.vmat.densetwowaydhadditivegeneticvariancematrix.densetwowaydhadditivegeneticvariancematrix method)": [[872, "pybrops.model.vmat.DenseTwoWayDHAdditiveGeneticVarianceMatrix.DenseTwoWayDHAdditiveGeneticVarianceMatrix.remove"]], "remove_taxa() (pybrops.model.vmat.densetwowaydhadditivegeneticvariancematrix.densetwowaydhadditivegeneticvariancematrix method)": [[872, "pybrops.model.vmat.DenseTwoWayDHAdditiveGeneticVarianceMatrix.DenseTwoWayDHAdditiveGeneticVarianceMatrix.remove_taxa"]], "remove_trait() (pybrops.model.vmat.densetwowaydhadditivegeneticvariancematrix.densetwowaydhadditivegeneticvariancematrix method)": [[872, "pybrops.model.vmat.DenseTwoWayDHAdditiveGeneticVarianceMatrix.DenseTwoWayDHAdditiveGeneticVarianceMatrix.remove_trait"]], "reorder() (pybrops.model.vmat.densetwowaydhadditivegeneticvariancematrix.densetwowaydhadditivegeneticvariancematrix method)": [[872, "pybrops.model.vmat.DenseTwoWayDHAdditiveGeneticVarianceMatrix.DenseTwoWayDHAdditiveGeneticVarianceMatrix.reorder"]], "reorder_taxa() (pybrops.model.vmat.densetwowaydhadditivegeneticvariancematrix.densetwowaydhadditivegeneticvariancematrix method)": [[872, "pybrops.model.vmat.DenseTwoWayDHAdditiveGeneticVarianceMatrix.DenseTwoWayDHAdditiveGeneticVarianceMatrix.reorder_taxa"]], "reorder_trait() (pybrops.model.vmat.densetwowaydhadditivegeneticvariancematrix.densetwowaydhadditivegeneticvariancematrix method)": [[872, "pybrops.model.vmat.DenseTwoWayDHAdditiveGeneticVarianceMatrix.DenseTwoWayDHAdditiveGeneticVarianceMatrix.reorder_trait"]], "select() (pybrops.model.vmat.densetwowaydhadditivegeneticvariancematrix.densetwowaydhadditivegeneticvariancematrix method)": [[872, "pybrops.model.vmat.DenseTwoWayDHAdditiveGeneticVarianceMatrix.DenseTwoWayDHAdditiveGeneticVarianceMatrix.select"]], "select_taxa() (pybrops.model.vmat.densetwowaydhadditivegeneticvariancematrix.densetwowaydhadditivegeneticvariancematrix method)": [[872, "pybrops.model.vmat.DenseTwoWayDHAdditiveGeneticVarianceMatrix.DenseTwoWayDHAdditiveGeneticVarianceMatrix.select_taxa"]], "select_trait() (pybrops.model.vmat.densetwowaydhadditivegeneticvariancematrix.densetwowaydhadditivegeneticvariancematrix method)": [[872, "pybrops.model.vmat.DenseTwoWayDHAdditiveGeneticVarianceMatrix.DenseTwoWayDHAdditiveGeneticVarianceMatrix.select_trait"]], "sort() (pybrops.model.vmat.densetwowaydhadditivegeneticvariancematrix.densetwowaydhadditivegeneticvariancematrix method)": [[872, "pybrops.model.vmat.DenseTwoWayDHAdditiveGeneticVarianceMatrix.DenseTwoWayDHAdditiveGeneticVarianceMatrix.sort"]], "sort_taxa() (pybrops.model.vmat.densetwowaydhadditivegeneticvariancematrix.densetwowaydhadditivegeneticvariancematrix method)": [[872, "pybrops.model.vmat.DenseTwoWayDHAdditiveGeneticVarianceMatrix.DenseTwoWayDHAdditiveGeneticVarianceMatrix.sort_taxa"]], "sort_trait() (pybrops.model.vmat.densetwowaydhadditivegeneticvariancematrix.densetwowaydhadditivegeneticvariancematrix method)": [[872, "pybrops.model.vmat.DenseTwoWayDHAdditiveGeneticVarianceMatrix.DenseTwoWayDHAdditiveGeneticVarianceMatrix.sort_trait"]], "square_axes (pybrops.model.vmat.densetwowaydhadditivegeneticvariancematrix.densetwowaydhadditivegeneticvariancematrix property)": [[872, "pybrops.model.vmat.DenseTwoWayDHAdditiveGeneticVarianceMatrix.DenseTwoWayDHAdditiveGeneticVarianceMatrix.square_axes"]], "square_axes_len (pybrops.model.vmat.densetwowaydhadditivegeneticvariancematrix.densetwowaydhadditivegeneticvariancematrix property)": [[872, "pybrops.model.vmat.DenseTwoWayDHAdditiveGeneticVarianceMatrix.DenseTwoWayDHAdditiveGeneticVarianceMatrix.square_axes_len"]], "square_taxa_axes (pybrops.model.vmat.densetwowaydhadditivegeneticvariancematrix.densetwowaydhadditivegeneticvariancematrix property)": [[872, "pybrops.model.vmat.DenseTwoWayDHAdditiveGeneticVarianceMatrix.DenseTwoWayDHAdditiveGeneticVarianceMatrix.square_taxa_axes"]], "square_taxa_axes_len (pybrops.model.vmat.densetwowaydhadditivegeneticvariancematrix.densetwowaydhadditivegeneticvariancematrix property)": [[872, "pybrops.model.vmat.DenseTwoWayDHAdditiveGeneticVarianceMatrix.DenseTwoWayDHAdditiveGeneticVarianceMatrix.square_taxa_axes_len"]], "taxa (pybrops.model.vmat.densetwowaydhadditivegeneticvariancematrix.densetwowaydhadditivegeneticvariancematrix property)": [[872, "pybrops.model.vmat.DenseTwoWayDHAdditiveGeneticVarianceMatrix.DenseTwoWayDHAdditiveGeneticVarianceMatrix.taxa"]], "taxa_axis (pybrops.model.vmat.densetwowaydhadditivegeneticvariancematrix.densetwowaydhadditivegeneticvariancematrix property)": [[872, "pybrops.model.vmat.DenseTwoWayDHAdditiveGeneticVarianceMatrix.DenseTwoWayDHAdditiveGeneticVarianceMatrix.taxa_axis"]], "taxa_grp (pybrops.model.vmat.densetwowaydhadditivegeneticvariancematrix.densetwowaydhadditivegeneticvariancematrix property)": [[872, "pybrops.model.vmat.DenseTwoWayDHAdditiveGeneticVarianceMatrix.DenseTwoWayDHAdditiveGeneticVarianceMatrix.taxa_grp"]], "taxa_grp_len (pybrops.model.vmat.densetwowaydhadditivegeneticvariancematrix.densetwowaydhadditivegeneticvariancematrix property)": [[872, "pybrops.model.vmat.DenseTwoWayDHAdditiveGeneticVarianceMatrix.DenseTwoWayDHAdditiveGeneticVarianceMatrix.taxa_grp_len"]], "taxa_grp_name (pybrops.model.vmat.densetwowaydhadditivegeneticvariancematrix.densetwowaydhadditivegeneticvariancematrix property)": [[872, "pybrops.model.vmat.DenseTwoWayDHAdditiveGeneticVarianceMatrix.DenseTwoWayDHAdditiveGeneticVarianceMatrix.taxa_grp_name"]], "taxa_grp_spix (pybrops.model.vmat.densetwowaydhadditivegeneticvariancematrix.densetwowaydhadditivegeneticvariancematrix property)": [[872, "pybrops.model.vmat.DenseTwoWayDHAdditiveGeneticVarianceMatrix.DenseTwoWayDHAdditiveGeneticVarianceMatrix.taxa_grp_spix"]], "taxa_grp_stix (pybrops.model.vmat.densetwowaydhadditivegeneticvariancematrix.densetwowaydhadditivegeneticvariancematrix property)": [[872, "pybrops.model.vmat.DenseTwoWayDHAdditiveGeneticVarianceMatrix.DenseTwoWayDHAdditiveGeneticVarianceMatrix.taxa_grp_stix"]], "to_csv() (pybrops.model.vmat.densetwowaydhadditivegeneticvariancematrix.densetwowaydhadditivegeneticvariancematrix method)": [[872, "pybrops.model.vmat.DenseTwoWayDHAdditiveGeneticVarianceMatrix.DenseTwoWayDHAdditiveGeneticVarianceMatrix.to_csv"]], "to_hdf5() (pybrops.model.vmat.densetwowaydhadditivegeneticvariancematrix.densetwowaydhadditivegeneticvariancematrix method)": [[872, "pybrops.model.vmat.DenseTwoWayDHAdditiveGeneticVarianceMatrix.DenseTwoWayDHAdditiveGeneticVarianceMatrix.to_hdf5"]], "to_pandas() (pybrops.model.vmat.densetwowaydhadditivegeneticvariancematrix.densetwowaydhadditivegeneticvariancematrix method)": [[872, "pybrops.model.vmat.DenseTwoWayDHAdditiveGeneticVarianceMatrix.DenseTwoWayDHAdditiveGeneticVarianceMatrix.to_pandas"]], "trait (pybrops.model.vmat.densetwowaydhadditivegeneticvariancematrix.densetwowaydhadditivegeneticvariancematrix property)": [[872, "pybrops.model.vmat.DenseTwoWayDHAdditiveGeneticVarianceMatrix.DenseTwoWayDHAdditiveGeneticVarianceMatrix.trait"]], "trait_axis (pybrops.model.vmat.densetwowaydhadditivegeneticvariancematrix.densetwowaydhadditivegeneticvariancematrix property)": [[872, "pybrops.model.vmat.DenseTwoWayDHAdditiveGeneticVarianceMatrix.DenseTwoWayDHAdditiveGeneticVarianceMatrix.trait_axis"]], "ungroup() (pybrops.model.vmat.densetwowaydhadditivegeneticvariancematrix.densetwowaydhadditivegeneticvariancematrix method)": [[872, "pybrops.model.vmat.DenseTwoWayDHAdditiveGeneticVarianceMatrix.DenseTwoWayDHAdditiveGeneticVarianceMatrix.ungroup"]], "ungroup_taxa() (pybrops.model.vmat.densetwowaydhadditivegeneticvariancematrix.densetwowaydhadditivegeneticvariancematrix method)": [[872, "pybrops.model.vmat.DenseTwoWayDHAdditiveGeneticVarianceMatrix.DenseTwoWayDHAdditiveGeneticVarianceMatrix.ungroup_taxa"]], "pybrops.model.vmat.densetwowaydhadditivegenicvariancematrix": [[873, "module-pybrops.model.vmat.DenseTwoWayDHAdditiveGenicVarianceMatrix"]], "densetwowaydhadditivegenicvariancematrix (class in pybrops.model.vmat.densetwowaydhadditivegenicvariancematrix)": [[874, "pybrops.model.vmat.DenseTwoWayDHAdditiveGenicVarianceMatrix.DenseTwoWayDHAdditiveGenicVarianceMatrix"]], "__add__() (pybrops.model.vmat.densetwowaydhadditivegenicvariancematrix.densetwowaydhadditivegenicvariancematrix method)": [[874, "pybrops.model.vmat.DenseTwoWayDHAdditiveGenicVarianceMatrix.DenseTwoWayDHAdditiveGenicVarianceMatrix.__add__"]], "__mul__() (pybrops.model.vmat.densetwowaydhadditivegenicvariancematrix.densetwowaydhadditivegenicvariancematrix method)": [[874, "pybrops.model.vmat.DenseTwoWayDHAdditiveGenicVarianceMatrix.DenseTwoWayDHAdditiveGenicVarianceMatrix.__mul__"]], "adjoin() (pybrops.model.vmat.densetwowaydhadditivegenicvariancematrix.densetwowaydhadditivegenicvariancematrix method)": [[874, "pybrops.model.vmat.DenseTwoWayDHAdditiveGenicVarianceMatrix.DenseTwoWayDHAdditiveGenicVarianceMatrix.adjoin"]], "adjoin_taxa() (pybrops.model.vmat.densetwowaydhadditivegenicvariancematrix.densetwowaydhadditivegenicvariancematrix method)": [[874, "pybrops.model.vmat.DenseTwoWayDHAdditiveGenicVarianceMatrix.DenseTwoWayDHAdditiveGenicVarianceMatrix.adjoin_taxa"]], "adjoin_trait() (pybrops.model.vmat.densetwowaydhadditivegenicvariancematrix.densetwowaydhadditivegenicvariancematrix method)": [[874, "pybrops.model.vmat.DenseTwoWayDHAdditiveGenicVarianceMatrix.DenseTwoWayDHAdditiveGenicVarianceMatrix.adjoin_trait"]], "append() (pybrops.model.vmat.densetwowaydhadditivegenicvariancematrix.densetwowaydhadditivegenicvariancematrix method)": [[874, "pybrops.model.vmat.DenseTwoWayDHAdditiveGenicVarianceMatrix.DenseTwoWayDHAdditiveGenicVarianceMatrix.append"]], "append_taxa() (pybrops.model.vmat.densetwowaydhadditivegenicvariancematrix.densetwowaydhadditivegenicvariancematrix method)": [[874, "pybrops.model.vmat.DenseTwoWayDHAdditiveGenicVarianceMatrix.DenseTwoWayDHAdditiveGenicVarianceMatrix.append_taxa"]], "append_trait() (pybrops.model.vmat.densetwowaydhadditivegenicvariancematrix.densetwowaydhadditivegenicvariancematrix method)": [[874, "pybrops.model.vmat.DenseTwoWayDHAdditiveGenicVarianceMatrix.DenseTwoWayDHAdditiveGenicVarianceMatrix.append_trait"]], "concat() (pybrops.model.vmat.densetwowaydhadditivegenicvariancematrix.densetwowaydhadditivegenicvariancematrix class method)": [[874, "pybrops.model.vmat.DenseTwoWayDHAdditiveGenicVarianceMatrix.DenseTwoWayDHAdditiveGenicVarianceMatrix.concat"]], "concat_taxa() (pybrops.model.vmat.densetwowaydhadditivegenicvariancematrix.densetwowaydhadditivegenicvariancematrix class method)": [[874, "pybrops.model.vmat.DenseTwoWayDHAdditiveGenicVarianceMatrix.DenseTwoWayDHAdditiveGenicVarianceMatrix.concat_taxa"]], "concat_trait() (pybrops.model.vmat.densetwowaydhadditivegenicvariancematrix.densetwowaydhadditivegenicvariancematrix class method)": [[874, "pybrops.model.vmat.DenseTwoWayDHAdditiveGenicVarianceMatrix.DenseTwoWayDHAdditiveGenicVarianceMatrix.concat_trait"]], "copy() (pybrops.model.vmat.densetwowaydhadditivegenicvariancematrix.densetwowaydhadditivegenicvariancematrix method)": [[874, "pybrops.model.vmat.DenseTwoWayDHAdditiveGenicVarianceMatrix.DenseTwoWayDHAdditiveGenicVarianceMatrix.copy"]], "deepcopy() (pybrops.model.vmat.densetwowaydhadditivegenicvariancematrix.densetwowaydhadditivegenicvariancematrix method)": [[874, "pybrops.model.vmat.DenseTwoWayDHAdditiveGenicVarianceMatrix.DenseTwoWayDHAdditiveGenicVarianceMatrix.deepcopy"]], "delete() (pybrops.model.vmat.densetwowaydhadditivegenicvariancematrix.densetwowaydhadditivegenicvariancematrix method)": [[874, "pybrops.model.vmat.DenseTwoWayDHAdditiveGenicVarianceMatrix.DenseTwoWayDHAdditiveGenicVarianceMatrix.delete"]], "delete_taxa() (pybrops.model.vmat.densetwowaydhadditivegenicvariancematrix.densetwowaydhadditivegenicvariancematrix method)": [[874, "pybrops.model.vmat.DenseTwoWayDHAdditiveGenicVarianceMatrix.DenseTwoWayDHAdditiveGenicVarianceMatrix.delete_taxa"]], "delete_trait() (pybrops.model.vmat.densetwowaydhadditivegenicvariancematrix.densetwowaydhadditivegenicvariancematrix method)": [[874, "pybrops.model.vmat.DenseTwoWayDHAdditiveGenicVarianceMatrix.DenseTwoWayDHAdditiveGenicVarianceMatrix.delete_trait"]], "epgc (pybrops.model.vmat.densetwowaydhadditivegenicvariancematrix.densetwowaydhadditivegenicvariancematrix property)": [[874, "pybrops.model.vmat.DenseTwoWayDHAdditiveGenicVarianceMatrix.DenseTwoWayDHAdditiveGenicVarianceMatrix.epgc"]], "female_axis (pybrops.model.vmat.densetwowaydhadditivegenicvariancematrix.densetwowaydhadditivegenicvariancematrix property)": [[874, "pybrops.model.vmat.DenseTwoWayDHAdditiveGenicVarianceMatrix.DenseTwoWayDHAdditiveGenicVarianceMatrix.female_axis"]], "from_algmod() (pybrops.model.vmat.densetwowaydhadditivegenicvariancematrix.densetwowaydhadditivegenicvariancematrix class method)": [[874, "pybrops.model.vmat.DenseTwoWayDHAdditiveGenicVarianceMatrix.DenseTwoWayDHAdditiveGenicVarianceMatrix.from_algmod"]], "from_csv() (pybrops.model.vmat.densetwowaydhadditivegenicvariancematrix.densetwowaydhadditivegenicvariancematrix class method)": [[874, "pybrops.model.vmat.DenseTwoWayDHAdditiveGenicVarianceMatrix.DenseTwoWayDHAdditiveGenicVarianceMatrix.from_csv"]], "from_gmod() (pybrops.model.vmat.densetwowaydhadditivegenicvariancematrix.densetwowaydhadditivegenicvariancematrix class method)": [[874, "pybrops.model.vmat.DenseTwoWayDHAdditiveGenicVarianceMatrix.DenseTwoWayDHAdditiveGenicVarianceMatrix.from_gmod"]], "from_hdf5() (pybrops.model.vmat.densetwowaydhadditivegenicvariancematrix.densetwowaydhadditivegenicvariancematrix class method)": [[874, "pybrops.model.vmat.DenseTwoWayDHAdditiveGenicVarianceMatrix.DenseTwoWayDHAdditiveGenicVarianceMatrix.from_hdf5"]], "from_pandas() (pybrops.model.vmat.densetwowaydhadditivegenicvariancematrix.densetwowaydhadditivegenicvariancematrix class method)": [[874, "pybrops.model.vmat.DenseTwoWayDHAdditiveGenicVarianceMatrix.DenseTwoWayDHAdditiveGenicVarianceMatrix.from_pandas"]], "group() (pybrops.model.vmat.densetwowaydhadditivegenicvariancematrix.densetwowaydhadditivegenicvariancematrix method)": [[874, "pybrops.model.vmat.DenseTwoWayDHAdditiveGenicVarianceMatrix.DenseTwoWayDHAdditiveGenicVarianceMatrix.group"]], "group_taxa() (pybrops.model.vmat.densetwowaydhadditivegenicvariancematrix.densetwowaydhadditivegenicvariancematrix method)": [[874, "pybrops.model.vmat.DenseTwoWayDHAdditiveGenicVarianceMatrix.DenseTwoWayDHAdditiveGenicVarianceMatrix.group_taxa"]], "incorp() (pybrops.model.vmat.densetwowaydhadditivegenicvariancematrix.densetwowaydhadditivegenicvariancematrix method)": [[874, "pybrops.model.vmat.DenseTwoWayDHAdditiveGenicVarianceMatrix.DenseTwoWayDHAdditiveGenicVarianceMatrix.incorp"]], "incorp_taxa() (pybrops.model.vmat.densetwowaydhadditivegenicvariancematrix.densetwowaydhadditivegenicvariancematrix method)": [[874, "pybrops.model.vmat.DenseTwoWayDHAdditiveGenicVarianceMatrix.DenseTwoWayDHAdditiveGenicVarianceMatrix.incorp_taxa"]], "incorp_trait() (pybrops.model.vmat.densetwowaydhadditivegenicvariancematrix.densetwowaydhadditivegenicvariancematrix method)": [[874, "pybrops.model.vmat.DenseTwoWayDHAdditiveGenicVarianceMatrix.DenseTwoWayDHAdditiveGenicVarianceMatrix.incorp_trait"]], "insert() (pybrops.model.vmat.densetwowaydhadditivegenicvariancematrix.densetwowaydhadditivegenicvariancematrix method)": [[874, "pybrops.model.vmat.DenseTwoWayDHAdditiveGenicVarianceMatrix.DenseTwoWayDHAdditiveGenicVarianceMatrix.insert"]], "insert_taxa() (pybrops.model.vmat.densetwowaydhadditivegenicvariancematrix.densetwowaydhadditivegenicvariancematrix method)": [[874, "pybrops.model.vmat.DenseTwoWayDHAdditiveGenicVarianceMatrix.DenseTwoWayDHAdditiveGenicVarianceMatrix.insert_taxa"]], "insert_trait() (pybrops.model.vmat.densetwowaydhadditivegenicvariancematrix.densetwowaydhadditivegenicvariancematrix method)": [[874, "pybrops.model.vmat.DenseTwoWayDHAdditiveGenicVarianceMatrix.DenseTwoWayDHAdditiveGenicVarianceMatrix.insert_trait"]], "is_grouped() (pybrops.model.vmat.densetwowaydhadditivegenicvariancematrix.densetwowaydhadditivegenicvariancematrix method)": [[874, "pybrops.model.vmat.DenseTwoWayDHAdditiveGenicVarianceMatrix.DenseTwoWayDHAdditiveGenicVarianceMatrix.is_grouped"]], "is_grouped_taxa() (pybrops.model.vmat.densetwowaydhadditivegenicvariancematrix.densetwowaydhadditivegenicvariancematrix method)": [[874, "pybrops.model.vmat.DenseTwoWayDHAdditiveGenicVarianceMatrix.DenseTwoWayDHAdditiveGenicVarianceMatrix.is_grouped_taxa"]], "is_square() (pybrops.model.vmat.densetwowaydhadditivegenicvariancematrix.densetwowaydhadditivegenicvariancematrix method)": [[874, "pybrops.model.vmat.DenseTwoWayDHAdditiveGenicVarianceMatrix.DenseTwoWayDHAdditiveGenicVarianceMatrix.is_square"]], "is_square_taxa() (pybrops.model.vmat.densetwowaydhadditivegenicvariancematrix.densetwowaydhadditivegenicvariancematrix method)": [[874, "pybrops.model.vmat.DenseTwoWayDHAdditiveGenicVarianceMatrix.DenseTwoWayDHAdditiveGenicVarianceMatrix.is_square_taxa"]], "lexsort() (pybrops.model.vmat.densetwowaydhadditivegenicvariancematrix.densetwowaydhadditivegenicvariancematrix method)": [[874, "pybrops.model.vmat.DenseTwoWayDHAdditiveGenicVarianceMatrix.DenseTwoWayDHAdditiveGenicVarianceMatrix.lexsort"]], "lexsort_taxa() (pybrops.model.vmat.densetwowaydhadditivegenicvariancematrix.densetwowaydhadditivegenicvariancematrix method)": [[874, "pybrops.model.vmat.DenseTwoWayDHAdditiveGenicVarianceMatrix.DenseTwoWayDHAdditiveGenicVarianceMatrix.lexsort_taxa"]], "lexsort_trait() (pybrops.model.vmat.densetwowaydhadditivegenicvariancematrix.densetwowaydhadditivegenicvariancematrix method)": [[874, "pybrops.model.vmat.DenseTwoWayDHAdditiveGenicVarianceMatrix.DenseTwoWayDHAdditiveGenicVarianceMatrix.lexsort_trait"]], "male_axis (pybrops.model.vmat.densetwowaydhadditivegenicvariancematrix.densetwowaydhadditivegenicvariancematrix property)": [[874, "pybrops.model.vmat.DenseTwoWayDHAdditiveGenicVarianceMatrix.DenseTwoWayDHAdditiveGenicVarianceMatrix.male_axis"]], "mat (pybrops.model.vmat.densetwowaydhadditivegenicvariancematrix.densetwowaydhadditivegenicvariancematrix property)": [[874, "pybrops.model.vmat.DenseTwoWayDHAdditiveGenicVarianceMatrix.DenseTwoWayDHAdditiveGenicVarianceMatrix.mat"]], "mat_ndim (pybrops.model.vmat.densetwowaydhadditivegenicvariancematrix.densetwowaydhadditivegenicvariancematrix property)": [[874, "pybrops.model.vmat.DenseTwoWayDHAdditiveGenicVarianceMatrix.DenseTwoWayDHAdditiveGenicVarianceMatrix.mat_ndim"]], "mat_shape (pybrops.model.vmat.densetwowaydhadditivegenicvariancematrix.densetwowaydhadditivegenicvariancematrix property)": [[874, "pybrops.model.vmat.DenseTwoWayDHAdditiveGenicVarianceMatrix.DenseTwoWayDHAdditiveGenicVarianceMatrix.mat_shape"]], "nfemale (pybrops.model.vmat.densetwowaydhadditivegenicvariancematrix.densetwowaydhadditivegenicvariancematrix property)": [[874, "pybrops.model.vmat.DenseTwoWayDHAdditiveGenicVarianceMatrix.DenseTwoWayDHAdditiveGenicVarianceMatrix.nfemale"]], "nmale (pybrops.model.vmat.densetwowaydhadditivegenicvariancematrix.densetwowaydhadditivegenicvariancematrix property)": [[874, "pybrops.model.vmat.DenseTwoWayDHAdditiveGenicVarianceMatrix.DenseTwoWayDHAdditiveGenicVarianceMatrix.nmale"]], "nsquare (pybrops.model.vmat.densetwowaydhadditivegenicvariancematrix.densetwowaydhadditivegenicvariancematrix property)": [[874, "pybrops.model.vmat.DenseTwoWayDHAdditiveGenicVarianceMatrix.DenseTwoWayDHAdditiveGenicVarianceMatrix.nsquare"]], "nsquare_taxa (pybrops.model.vmat.densetwowaydhadditivegenicvariancematrix.densetwowaydhadditivegenicvariancematrix property)": [[874, "pybrops.model.vmat.DenseTwoWayDHAdditiveGenicVarianceMatrix.DenseTwoWayDHAdditiveGenicVarianceMatrix.nsquare_taxa"]], "ntaxa (pybrops.model.vmat.densetwowaydhadditivegenicvariancematrix.densetwowaydhadditivegenicvariancematrix property)": [[874, "pybrops.model.vmat.DenseTwoWayDHAdditiveGenicVarianceMatrix.DenseTwoWayDHAdditiveGenicVarianceMatrix.ntaxa"]], "ntrait (pybrops.model.vmat.densetwowaydhadditivegenicvariancematrix.densetwowaydhadditivegenicvariancematrix property)": [[874, "pybrops.model.vmat.DenseTwoWayDHAdditiveGenicVarianceMatrix.DenseTwoWayDHAdditiveGenicVarianceMatrix.ntrait"]], "remove() (pybrops.model.vmat.densetwowaydhadditivegenicvariancematrix.densetwowaydhadditivegenicvariancematrix method)": [[874, "pybrops.model.vmat.DenseTwoWayDHAdditiveGenicVarianceMatrix.DenseTwoWayDHAdditiveGenicVarianceMatrix.remove"]], "remove_taxa() (pybrops.model.vmat.densetwowaydhadditivegenicvariancematrix.densetwowaydhadditivegenicvariancematrix method)": [[874, "pybrops.model.vmat.DenseTwoWayDHAdditiveGenicVarianceMatrix.DenseTwoWayDHAdditiveGenicVarianceMatrix.remove_taxa"]], "remove_trait() (pybrops.model.vmat.densetwowaydhadditivegenicvariancematrix.densetwowaydhadditivegenicvariancematrix method)": [[874, "pybrops.model.vmat.DenseTwoWayDHAdditiveGenicVarianceMatrix.DenseTwoWayDHAdditiveGenicVarianceMatrix.remove_trait"]], "reorder() (pybrops.model.vmat.densetwowaydhadditivegenicvariancematrix.densetwowaydhadditivegenicvariancematrix method)": [[874, "pybrops.model.vmat.DenseTwoWayDHAdditiveGenicVarianceMatrix.DenseTwoWayDHAdditiveGenicVarianceMatrix.reorder"]], "reorder_taxa() (pybrops.model.vmat.densetwowaydhadditivegenicvariancematrix.densetwowaydhadditivegenicvariancematrix method)": [[874, "pybrops.model.vmat.DenseTwoWayDHAdditiveGenicVarianceMatrix.DenseTwoWayDHAdditiveGenicVarianceMatrix.reorder_taxa"]], "reorder_trait() (pybrops.model.vmat.densetwowaydhadditivegenicvariancematrix.densetwowaydhadditivegenicvariancematrix method)": [[874, "pybrops.model.vmat.DenseTwoWayDHAdditiveGenicVarianceMatrix.DenseTwoWayDHAdditiveGenicVarianceMatrix.reorder_trait"]], "select() (pybrops.model.vmat.densetwowaydhadditivegenicvariancematrix.densetwowaydhadditivegenicvariancematrix method)": [[874, "pybrops.model.vmat.DenseTwoWayDHAdditiveGenicVarianceMatrix.DenseTwoWayDHAdditiveGenicVarianceMatrix.select"]], "select_taxa() (pybrops.model.vmat.densetwowaydhadditivegenicvariancematrix.densetwowaydhadditivegenicvariancematrix method)": [[874, "pybrops.model.vmat.DenseTwoWayDHAdditiveGenicVarianceMatrix.DenseTwoWayDHAdditiveGenicVarianceMatrix.select_taxa"]], "select_trait() (pybrops.model.vmat.densetwowaydhadditivegenicvariancematrix.densetwowaydhadditivegenicvariancematrix method)": [[874, "pybrops.model.vmat.DenseTwoWayDHAdditiveGenicVarianceMatrix.DenseTwoWayDHAdditiveGenicVarianceMatrix.select_trait"]], "sort() (pybrops.model.vmat.densetwowaydhadditivegenicvariancematrix.densetwowaydhadditivegenicvariancematrix method)": [[874, "pybrops.model.vmat.DenseTwoWayDHAdditiveGenicVarianceMatrix.DenseTwoWayDHAdditiveGenicVarianceMatrix.sort"]], "sort_taxa() (pybrops.model.vmat.densetwowaydhadditivegenicvariancematrix.densetwowaydhadditivegenicvariancematrix method)": [[874, "pybrops.model.vmat.DenseTwoWayDHAdditiveGenicVarianceMatrix.DenseTwoWayDHAdditiveGenicVarianceMatrix.sort_taxa"]], "sort_trait() (pybrops.model.vmat.densetwowaydhadditivegenicvariancematrix.densetwowaydhadditivegenicvariancematrix method)": [[874, "pybrops.model.vmat.DenseTwoWayDHAdditiveGenicVarianceMatrix.DenseTwoWayDHAdditiveGenicVarianceMatrix.sort_trait"]], "square_axes (pybrops.model.vmat.densetwowaydhadditivegenicvariancematrix.densetwowaydhadditivegenicvariancematrix property)": [[874, "pybrops.model.vmat.DenseTwoWayDHAdditiveGenicVarianceMatrix.DenseTwoWayDHAdditiveGenicVarianceMatrix.square_axes"]], "square_axes_len (pybrops.model.vmat.densetwowaydhadditivegenicvariancematrix.densetwowaydhadditivegenicvariancematrix property)": [[874, "pybrops.model.vmat.DenseTwoWayDHAdditiveGenicVarianceMatrix.DenseTwoWayDHAdditiveGenicVarianceMatrix.square_axes_len"]], "square_taxa_axes (pybrops.model.vmat.densetwowaydhadditivegenicvariancematrix.densetwowaydhadditivegenicvariancematrix property)": [[874, "pybrops.model.vmat.DenseTwoWayDHAdditiveGenicVarianceMatrix.DenseTwoWayDHAdditiveGenicVarianceMatrix.square_taxa_axes"]], "square_taxa_axes_len (pybrops.model.vmat.densetwowaydhadditivegenicvariancematrix.densetwowaydhadditivegenicvariancematrix property)": [[874, "pybrops.model.vmat.DenseTwoWayDHAdditiveGenicVarianceMatrix.DenseTwoWayDHAdditiveGenicVarianceMatrix.square_taxa_axes_len"]], "taxa (pybrops.model.vmat.densetwowaydhadditivegenicvariancematrix.densetwowaydhadditivegenicvariancematrix property)": [[874, "pybrops.model.vmat.DenseTwoWayDHAdditiveGenicVarianceMatrix.DenseTwoWayDHAdditiveGenicVarianceMatrix.taxa"]], "taxa_axis (pybrops.model.vmat.densetwowaydhadditivegenicvariancematrix.densetwowaydhadditivegenicvariancematrix property)": [[874, "pybrops.model.vmat.DenseTwoWayDHAdditiveGenicVarianceMatrix.DenseTwoWayDHAdditiveGenicVarianceMatrix.taxa_axis"]], "taxa_grp (pybrops.model.vmat.densetwowaydhadditivegenicvariancematrix.densetwowaydhadditivegenicvariancematrix property)": [[874, "pybrops.model.vmat.DenseTwoWayDHAdditiveGenicVarianceMatrix.DenseTwoWayDHAdditiveGenicVarianceMatrix.taxa_grp"]], "taxa_grp_len (pybrops.model.vmat.densetwowaydhadditivegenicvariancematrix.densetwowaydhadditivegenicvariancematrix property)": [[874, "pybrops.model.vmat.DenseTwoWayDHAdditiveGenicVarianceMatrix.DenseTwoWayDHAdditiveGenicVarianceMatrix.taxa_grp_len"]], "taxa_grp_name (pybrops.model.vmat.densetwowaydhadditivegenicvariancematrix.densetwowaydhadditivegenicvariancematrix property)": [[874, "pybrops.model.vmat.DenseTwoWayDHAdditiveGenicVarianceMatrix.DenseTwoWayDHAdditiveGenicVarianceMatrix.taxa_grp_name"]], "taxa_grp_spix (pybrops.model.vmat.densetwowaydhadditivegenicvariancematrix.densetwowaydhadditivegenicvariancematrix property)": [[874, "pybrops.model.vmat.DenseTwoWayDHAdditiveGenicVarianceMatrix.DenseTwoWayDHAdditiveGenicVarianceMatrix.taxa_grp_spix"]], "taxa_grp_stix (pybrops.model.vmat.densetwowaydhadditivegenicvariancematrix.densetwowaydhadditivegenicvariancematrix property)": [[874, "pybrops.model.vmat.DenseTwoWayDHAdditiveGenicVarianceMatrix.DenseTwoWayDHAdditiveGenicVarianceMatrix.taxa_grp_stix"]], "to_csv() (pybrops.model.vmat.densetwowaydhadditivegenicvariancematrix.densetwowaydhadditivegenicvariancematrix method)": [[874, "pybrops.model.vmat.DenseTwoWayDHAdditiveGenicVarianceMatrix.DenseTwoWayDHAdditiveGenicVarianceMatrix.to_csv"]], "to_hdf5() (pybrops.model.vmat.densetwowaydhadditivegenicvariancematrix.densetwowaydhadditivegenicvariancematrix method)": [[874, "pybrops.model.vmat.DenseTwoWayDHAdditiveGenicVarianceMatrix.DenseTwoWayDHAdditiveGenicVarianceMatrix.to_hdf5"]], "to_pandas() (pybrops.model.vmat.densetwowaydhadditivegenicvariancematrix.densetwowaydhadditivegenicvariancematrix method)": [[874, "pybrops.model.vmat.DenseTwoWayDHAdditiveGenicVarianceMatrix.DenseTwoWayDHAdditiveGenicVarianceMatrix.to_pandas"]], "trait (pybrops.model.vmat.densetwowaydhadditivegenicvariancematrix.densetwowaydhadditivegenicvariancematrix property)": [[874, "pybrops.model.vmat.DenseTwoWayDHAdditiveGenicVarianceMatrix.DenseTwoWayDHAdditiveGenicVarianceMatrix.trait"]], "trait_axis (pybrops.model.vmat.densetwowaydhadditivegenicvariancematrix.densetwowaydhadditivegenicvariancematrix property)": [[874, "pybrops.model.vmat.DenseTwoWayDHAdditiveGenicVarianceMatrix.DenseTwoWayDHAdditiveGenicVarianceMatrix.trait_axis"]], "ungroup() (pybrops.model.vmat.densetwowaydhadditivegenicvariancematrix.densetwowaydhadditivegenicvariancematrix method)": [[874, "pybrops.model.vmat.DenseTwoWayDHAdditiveGenicVarianceMatrix.DenseTwoWayDHAdditiveGenicVarianceMatrix.ungroup"]], "ungroup_taxa() (pybrops.model.vmat.densetwowaydhadditivegenicvariancematrix.densetwowaydhadditivegenicvariancematrix method)": [[874, "pybrops.model.vmat.DenseTwoWayDHAdditiveGenicVarianceMatrix.DenseTwoWayDHAdditiveGenicVarianceMatrix.ungroup_taxa"]], "pybrops.model.vmat.geneticvariancematrix": [[875, "module-pybrops.model.vmat.GeneticVarianceMatrix"]], "geneticvariancematrix (class in pybrops.model.vmat.geneticvariancematrix)": [[876, "pybrops.model.vmat.GeneticVarianceMatrix.GeneticVarianceMatrix"]], "__add__() (pybrops.model.vmat.geneticvariancematrix.geneticvariancematrix method)": [[876, "pybrops.model.vmat.GeneticVarianceMatrix.GeneticVarianceMatrix.__add__"]], "__mul__() (pybrops.model.vmat.geneticvariancematrix.geneticvariancematrix method)": [[876, "pybrops.model.vmat.GeneticVarianceMatrix.GeneticVarianceMatrix.__mul__"]], "adjoin() (pybrops.model.vmat.geneticvariancematrix.geneticvariancematrix method)": [[876, "pybrops.model.vmat.GeneticVarianceMatrix.GeneticVarianceMatrix.adjoin"]], "adjoin_taxa() (pybrops.model.vmat.geneticvariancematrix.geneticvariancematrix method)": [[876, "pybrops.model.vmat.GeneticVarianceMatrix.GeneticVarianceMatrix.adjoin_taxa"]], "adjoin_trait() (pybrops.model.vmat.geneticvariancematrix.geneticvariancematrix method)": [[876, "pybrops.model.vmat.GeneticVarianceMatrix.GeneticVarianceMatrix.adjoin_trait"]], "append() (pybrops.model.vmat.geneticvariancematrix.geneticvariancematrix method)": [[876, "pybrops.model.vmat.GeneticVarianceMatrix.GeneticVarianceMatrix.append"]], "append_taxa() (pybrops.model.vmat.geneticvariancematrix.geneticvariancematrix method)": [[876, "pybrops.model.vmat.GeneticVarianceMatrix.GeneticVarianceMatrix.append_taxa"]], "append_trait() (pybrops.model.vmat.geneticvariancematrix.geneticvariancematrix method)": [[876, "pybrops.model.vmat.GeneticVarianceMatrix.GeneticVarianceMatrix.append_trait"]], "concat() (pybrops.model.vmat.geneticvariancematrix.geneticvariancematrix class method)": [[876, "pybrops.model.vmat.GeneticVarianceMatrix.GeneticVarianceMatrix.concat"]], "concat_taxa() (pybrops.model.vmat.geneticvariancematrix.geneticvariancematrix class method)": [[876, "pybrops.model.vmat.GeneticVarianceMatrix.GeneticVarianceMatrix.concat_taxa"]], "concat_trait() (pybrops.model.vmat.geneticvariancematrix.geneticvariancematrix class method)": [[876, "pybrops.model.vmat.GeneticVarianceMatrix.GeneticVarianceMatrix.concat_trait"]], "copy() (pybrops.model.vmat.geneticvariancematrix.geneticvariancematrix method)": [[876, "pybrops.model.vmat.GeneticVarianceMatrix.GeneticVarianceMatrix.copy"]], "deepcopy() (pybrops.model.vmat.geneticvariancematrix.geneticvariancematrix method)": [[876, "pybrops.model.vmat.GeneticVarianceMatrix.GeneticVarianceMatrix.deepcopy"]], "delete() (pybrops.model.vmat.geneticvariancematrix.geneticvariancematrix method)": [[876, "pybrops.model.vmat.GeneticVarianceMatrix.GeneticVarianceMatrix.delete"]], "delete_taxa() (pybrops.model.vmat.geneticvariancematrix.geneticvariancematrix method)": [[876, "pybrops.model.vmat.GeneticVarianceMatrix.GeneticVarianceMatrix.delete_taxa"]], "delete_trait() (pybrops.model.vmat.geneticvariancematrix.geneticvariancematrix method)": [[876, "pybrops.model.vmat.GeneticVarianceMatrix.GeneticVarianceMatrix.delete_trait"]], "epgc (pybrops.model.vmat.geneticvariancematrix.geneticvariancematrix property)": [[876, "pybrops.model.vmat.GeneticVarianceMatrix.GeneticVarianceMatrix.epgc"]], "from_csv() (pybrops.model.vmat.geneticvariancematrix.geneticvariancematrix class method)": [[876, "pybrops.model.vmat.GeneticVarianceMatrix.GeneticVarianceMatrix.from_csv"]], "from_gmod() (pybrops.model.vmat.geneticvariancematrix.geneticvariancematrix class method)": [[876, "pybrops.model.vmat.GeneticVarianceMatrix.GeneticVarianceMatrix.from_gmod"]], "from_hdf5() (pybrops.model.vmat.geneticvariancematrix.geneticvariancematrix class method)": [[876, "pybrops.model.vmat.GeneticVarianceMatrix.GeneticVarianceMatrix.from_hdf5"]], "from_pandas() (pybrops.model.vmat.geneticvariancematrix.geneticvariancematrix class method)": [[876, "pybrops.model.vmat.GeneticVarianceMatrix.GeneticVarianceMatrix.from_pandas"]], "group() (pybrops.model.vmat.geneticvariancematrix.geneticvariancematrix method)": [[876, "pybrops.model.vmat.GeneticVarianceMatrix.GeneticVarianceMatrix.group"]], "group_taxa() (pybrops.model.vmat.geneticvariancematrix.geneticvariancematrix method)": [[876, "pybrops.model.vmat.GeneticVarianceMatrix.GeneticVarianceMatrix.group_taxa"]], "incorp() (pybrops.model.vmat.geneticvariancematrix.geneticvariancematrix method)": [[876, "pybrops.model.vmat.GeneticVarianceMatrix.GeneticVarianceMatrix.incorp"]], "incorp_taxa() (pybrops.model.vmat.geneticvariancematrix.geneticvariancematrix method)": [[876, "pybrops.model.vmat.GeneticVarianceMatrix.GeneticVarianceMatrix.incorp_taxa"]], "incorp_trait() (pybrops.model.vmat.geneticvariancematrix.geneticvariancematrix method)": [[876, "pybrops.model.vmat.GeneticVarianceMatrix.GeneticVarianceMatrix.incorp_trait"]], "insert() (pybrops.model.vmat.geneticvariancematrix.geneticvariancematrix method)": [[876, "pybrops.model.vmat.GeneticVarianceMatrix.GeneticVarianceMatrix.insert"]], "insert_taxa() (pybrops.model.vmat.geneticvariancematrix.geneticvariancematrix method)": [[876, "pybrops.model.vmat.GeneticVarianceMatrix.GeneticVarianceMatrix.insert_taxa"]], "insert_trait() (pybrops.model.vmat.geneticvariancematrix.geneticvariancematrix method)": [[876, "pybrops.model.vmat.GeneticVarianceMatrix.GeneticVarianceMatrix.insert_trait"]], "is_grouped() (pybrops.model.vmat.geneticvariancematrix.geneticvariancematrix method)": [[876, "pybrops.model.vmat.GeneticVarianceMatrix.GeneticVarianceMatrix.is_grouped"]], "is_grouped_taxa() (pybrops.model.vmat.geneticvariancematrix.geneticvariancematrix method)": [[876, "pybrops.model.vmat.GeneticVarianceMatrix.GeneticVarianceMatrix.is_grouped_taxa"]], "is_square() (pybrops.model.vmat.geneticvariancematrix.geneticvariancematrix method)": [[876, "pybrops.model.vmat.GeneticVarianceMatrix.GeneticVarianceMatrix.is_square"]], "is_square_taxa() (pybrops.model.vmat.geneticvariancematrix.geneticvariancematrix method)": [[876, "pybrops.model.vmat.GeneticVarianceMatrix.GeneticVarianceMatrix.is_square_taxa"]], "lexsort() (pybrops.model.vmat.geneticvariancematrix.geneticvariancematrix method)": [[876, "pybrops.model.vmat.GeneticVarianceMatrix.GeneticVarianceMatrix.lexsort"]], "lexsort_taxa() (pybrops.model.vmat.geneticvariancematrix.geneticvariancematrix method)": [[876, "pybrops.model.vmat.GeneticVarianceMatrix.GeneticVarianceMatrix.lexsort_taxa"]], "lexsort_trait() (pybrops.model.vmat.geneticvariancematrix.geneticvariancematrix method)": [[876, "pybrops.model.vmat.GeneticVarianceMatrix.GeneticVarianceMatrix.lexsort_trait"]], "mat (pybrops.model.vmat.geneticvariancematrix.geneticvariancematrix property)": [[876, "pybrops.model.vmat.GeneticVarianceMatrix.GeneticVarianceMatrix.mat"]], "mat_ndim (pybrops.model.vmat.geneticvariancematrix.geneticvariancematrix property)": [[876, "pybrops.model.vmat.GeneticVarianceMatrix.GeneticVarianceMatrix.mat_ndim"]], "mat_shape (pybrops.model.vmat.geneticvariancematrix.geneticvariancematrix property)": [[876, "pybrops.model.vmat.GeneticVarianceMatrix.GeneticVarianceMatrix.mat_shape"]], "nsquare (pybrops.model.vmat.geneticvariancematrix.geneticvariancematrix property)": [[876, "pybrops.model.vmat.GeneticVarianceMatrix.GeneticVarianceMatrix.nsquare"]], "nsquare_taxa (pybrops.model.vmat.geneticvariancematrix.geneticvariancematrix property)": [[876, "pybrops.model.vmat.GeneticVarianceMatrix.GeneticVarianceMatrix.nsquare_taxa"]], "ntaxa (pybrops.model.vmat.geneticvariancematrix.geneticvariancematrix property)": [[876, "pybrops.model.vmat.GeneticVarianceMatrix.GeneticVarianceMatrix.ntaxa"]], "ntrait (pybrops.model.vmat.geneticvariancematrix.geneticvariancematrix property)": [[876, "pybrops.model.vmat.GeneticVarianceMatrix.GeneticVarianceMatrix.ntrait"]], "remove() (pybrops.model.vmat.geneticvariancematrix.geneticvariancematrix method)": [[876, "pybrops.model.vmat.GeneticVarianceMatrix.GeneticVarianceMatrix.remove"]], "remove_taxa() (pybrops.model.vmat.geneticvariancematrix.geneticvariancematrix method)": [[876, "pybrops.model.vmat.GeneticVarianceMatrix.GeneticVarianceMatrix.remove_taxa"]], "remove_trait() (pybrops.model.vmat.geneticvariancematrix.geneticvariancematrix method)": [[876, "pybrops.model.vmat.GeneticVarianceMatrix.GeneticVarianceMatrix.remove_trait"]], "reorder() (pybrops.model.vmat.geneticvariancematrix.geneticvariancematrix method)": [[876, "pybrops.model.vmat.GeneticVarianceMatrix.GeneticVarianceMatrix.reorder"]], "reorder_taxa() (pybrops.model.vmat.geneticvariancematrix.geneticvariancematrix method)": [[876, "pybrops.model.vmat.GeneticVarianceMatrix.GeneticVarianceMatrix.reorder_taxa"]], "reorder_trait() (pybrops.model.vmat.geneticvariancematrix.geneticvariancematrix method)": [[876, "pybrops.model.vmat.GeneticVarianceMatrix.GeneticVarianceMatrix.reorder_trait"]], "select() (pybrops.model.vmat.geneticvariancematrix.geneticvariancematrix method)": [[876, "pybrops.model.vmat.GeneticVarianceMatrix.GeneticVarianceMatrix.select"]], "select_taxa() (pybrops.model.vmat.geneticvariancematrix.geneticvariancematrix method)": [[876, "pybrops.model.vmat.GeneticVarianceMatrix.GeneticVarianceMatrix.select_taxa"]], "select_trait() (pybrops.model.vmat.geneticvariancematrix.geneticvariancematrix method)": [[876, "pybrops.model.vmat.GeneticVarianceMatrix.GeneticVarianceMatrix.select_trait"]], "sort() (pybrops.model.vmat.geneticvariancematrix.geneticvariancematrix method)": [[876, "pybrops.model.vmat.GeneticVarianceMatrix.GeneticVarianceMatrix.sort"]], "sort_taxa() (pybrops.model.vmat.geneticvariancematrix.geneticvariancematrix method)": [[876, "pybrops.model.vmat.GeneticVarianceMatrix.GeneticVarianceMatrix.sort_taxa"]], "sort_trait() (pybrops.model.vmat.geneticvariancematrix.geneticvariancematrix method)": [[876, "pybrops.model.vmat.GeneticVarianceMatrix.GeneticVarianceMatrix.sort_trait"]], "square_axes (pybrops.model.vmat.geneticvariancematrix.geneticvariancematrix property)": [[876, "pybrops.model.vmat.GeneticVarianceMatrix.GeneticVarianceMatrix.square_axes"]], "square_axes_len (pybrops.model.vmat.geneticvariancematrix.geneticvariancematrix property)": [[876, "pybrops.model.vmat.GeneticVarianceMatrix.GeneticVarianceMatrix.square_axes_len"]], "square_taxa_axes (pybrops.model.vmat.geneticvariancematrix.geneticvariancematrix property)": [[876, "pybrops.model.vmat.GeneticVarianceMatrix.GeneticVarianceMatrix.square_taxa_axes"]], "square_taxa_axes_len (pybrops.model.vmat.geneticvariancematrix.geneticvariancematrix property)": [[876, "pybrops.model.vmat.GeneticVarianceMatrix.GeneticVarianceMatrix.square_taxa_axes_len"]], "taxa (pybrops.model.vmat.geneticvariancematrix.geneticvariancematrix property)": [[876, "pybrops.model.vmat.GeneticVarianceMatrix.GeneticVarianceMatrix.taxa"]], "taxa_axis (pybrops.model.vmat.geneticvariancematrix.geneticvariancematrix property)": [[876, "pybrops.model.vmat.GeneticVarianceMatrix.GeneticVarianceMatrix.taxa_axis"]], "taxa_grp (pybrops.model.vmat.geneticvariancematrix.geneticvariancematrix property)": [[876, "pybrops.model.vmat.GeneticVarianceMatrix.GeneticVarianceMatrix.taxa_grp"]], "taxa_grp_len (pybrops.model.vmat.geneticvariancematrix.geneticvariancematrix property)": [[876, "pybrops.model.vmat.GeneticVarianceMatrix.GeneticVarianceMatrix.taxa_grp_len"]], "taxa_grp_name (pybrops.model.vmat.geneticvariancematrix.geneticvariancematrix property)": [[876, "pybrops.model.vmat.GeneticVarianceMatrix.GeneticVarianceMatrix.taxa_grp_name"]], "taxa_grp_spix (pybrops.model.vmat.geneticvariancematrix.geneticvariancematrix property)": [[876, "pybrops.model.vmat.GeneticVarianceMatrix.GeneticVarianceMatrix.taxa_grp_spix"]], "taxa_grp_stix (pybrops.model.vmat.geneticvariancematrix.geneticvariancematrix property)": [[876, "pybrops.model.vmat.GeneticVarianceMatrix.GeneticVarianceMatrix.taxa_grp_stix"]], "to_csv() (pybrops.model.vmat.geneticvariancematrix.geneticvariancematrix method)": [[876, "pybrops.model.vmat.GeneticVarianceMatrix.GeneticVarianceMatrix.to_csv"]], "to_hdf5() (pybrops.model.vmat.geneticvariancematrix.geneticvariancematrix method)": [[876, "pybrops.model.vmat.GeneticVarianceMatrix.GeneticVarianceMatrix.to_hdf5"]], "to_pandas() (pybrops.model.vmat.geneticvariancematrix.geneticvariancematrix method)": [[876, "pybrops.model.vmat.GeneticVarianceMatrix.GeneticVarianceMatrix.to_pandas"]], "trait (pybrops.model.vmat.geneticvariancematrix.geneticvariancematrix property)": [[876, "pybrops.model.vmat.GeneticVarianceMatrix.GeneticVarianceMatrix.trait"]], "trait_axis (pybrops.model.vmat.geneticvariancematrix.geneticvariancematrix property)": [[876, "pybrops.model.vmat.GeneticVarianceMatrix.GeneticVarianceMatrix.trait_axis"]], "ungroup() (pybrops.model.vmat.geneticvariancematrix.geneticvariancematrix method)": [[876, "pybrops.model.vmat.GeneticVarianceMatrix.GeneticVarianceMatrix.ungroup"]], "ungroup_taxa() (pybrops.model.vmat.geneticvariancematrix.geneticvariancematrix method)": [[876, "pybrops.model.vmat.GeneticVarianceMatrix.GeneticVarianceMatrix.ungroup_taxa"]], "check_is_geneticvariancematrix() (in module pybrops.model.vmat.geneticvariancematrix)": [[877, "pybrops.model.vmat.GeneticVarianceMatrix.check_is_GeneticVarianceMatrix"]], "pybrops.model.vmat.genicvariancematrix": [[878, "module-pybrops.model.vmat.GenicVarianceMatrix"]], "genicvariancematrix (class in pybrops.model.vmat.genicvariancematrix)": [[879, "pybrops.model.vmat.GenicVarianceMatrix.GenicVarianceMatrix"]], "__add__() (pybrops.model.vmat.genicvariancematrix.genicvariancematrix method)": [[879, "pybrops.model.vmat.GenicVarianceMatrix.GenicVarianceMatrix.__add__"]], "__mul__() (pybrops.model.vmat.genicvariancematrix.genicvariancematrix method)": [[879, "pybrops.model.vmat.GenicVarianceMatrix.GenicVarianceMatrix.__mul__"]], "adjoin() (pybrops.model.vmat.genicvariancematrix.genicvariancematrix method)": [[879, "pybrops.model.vmat.GenicVarianceMatrix.GenicVarianceMatrix.adjoin"]], "adjoin_taxa() (pybrops.model.vmat.genicvariancematrix.genicvariancematrix method)": [[879, "pybrops.model.vmat.GenicVarianceMatrix.GenicVarianceMatrix.adjoin_taxa"]], "adjoin_trait() (pybrops.model.vmat.genicvariancematrix.genicvariancematrix method)": [[879, "pybrops.model.vmat.GenicVarianceMatrix.GenicVarianceMatrix.adjoin_trait"]], "append() (pybrops.model.vmat.genicvariancematrix.genicvariancematrix method)": [[879, "pybrops.model.vmat.GenicVarianceMatrix.GenicVarianceMatrix.append"]], "append_taxa() (pybrops.model.vmat.genicvariancematrix.genicvariancematrix method)": [[879, "pybrops.model.vmat.GenicVarianceMatrix.GenicVarianceMatrix.append_taxa"]], "append_trait() (pybrops.model.vmat.genicvariancematrix.genicvariancematrix method)": [[879, "pybrops.model.vmat.GenicVarianceMatrix.GenicVarianceMatrix.append_trait"]], "concat() (pybrops.model.vmat.genicvariancematrix.genicvariancematrix class method)": [[879, "pybrops.model.vmat.GenicVarianceMatrix.GenicVarianceMatrix.concat"]], "concat_taxa() (pybrops.model.vmat.genicvariancematrix.genicvariancematrix class method)": [[879, "pybrops.model.vmat.GenicVarianceMatrix.GenicVarianceMatrix.concat_taxa"]], "concat_trait() (pybrops.model.vmat.genicvariancematrix.genicvariancematrix class method)": [[879, "pybrops.model.vmat.GenicVarianceMatrix.GenicVarianceMatrix.concat_trait"]], "copy() (pybrops.model.vmat.genicvariancematrix.genicvariancematrix method)": [[879, "pybrops.model.vmat.GenicVarianceMatrix.GenicVarianceMatrix.copy"]], "deepcopy() (pybrops.model.vmat.genicvariancematrix.genicvariancematrix method)": [[879, "pybrops.model.vmat.GenicVarianceMatrix.GenicVarianceMatrix.deepcopy"]], "delete() (pybrops.model.vmat.genicvariancematrix.genicvariancematrix method)": [[879, "pybrops.model.vmat.GenicVarianceMatrix.GenicVarianceMatrix.delete"]], "delete_taxa() (pybrops.model.vmat.genicvariancematrix.genicvariancematrix method)": [[879, "pybrops.model.vmat.GenicVarianceMatrix.GenicVarianceMatrix.delete_taxa"]], "delete_trait() (pybrops.model.vmat.genicvariancematrix.genicvariancematrix method)": [[879, "pybrops.model.vmat.GenicVarianceMatrix.GenicVarianceMatrix.delete_trait"]], "epgc (pybrops.model.vmat.genicvariancematrix.genicvariancematrix property)": [[879, "pybrops.model.vmat.GenicVarianceMatrix.GenicVarianceMatrix.epgc"]], "from_csv() (pybrops.model.vmat.genicvariancematrix.genicvariancematrix class method)": [[879, "pybrops.model.vmat.GenicVarianceMatrix.GenicVarianceMatrix.from_csv"]], "from_gmod() (pybrops.model.vmat.genicvariancematrix.genicvariancematrix class method)": [[879, "pybrops.model.vmat.GenicVarianceMatrix.GenicVarianceMatrix.from_gmod"]], "from_hdf5() (pybrops.model.vmat.genicvariancematrix.genicvariancematrix class method)": [[879, "pybrops.model.vmat.GenicVarianceMatrix.GenicVarianceMatrix.from_hdf5"]], "from_pandas() (pybrops.model.vmat.genicvariancematrix.genicvariancematrix class method)": [[879, "pybrops.model.vmat.GenicVarianceMatrix.GenicVarianceMatrix.from_pandas"]], "group() (pybrops.model.vmat.genicvariancematrix.genicvariancematrix method)": [[879, "pybrops.model.vmat.GenicVarianceMatrix.GenicVarianceMatrix.group"]], "group_taxa() (pybrops.model.vmat.genicvariancematrix.genicvariancematrix method)": [[879, "pybrops.model.vmat.GenicVarianceMatrix.GenicVarianceMatrix.group_taxa"]], "incorp() (pybrops.model.vmat.genicvariancematrix.genicvariancematrix method)": [[879, "pybrops.model.vmat.GenicVarianceMatrix.GenicVarianceMatrix.incorp"]], "incorp_taxa() (pybrops.model.vmat.genicvariancematrix.genicvariancematrix method)": [[879, "pybrops.model.vmat.GenicVarianceMatrix.GenicVarianceMatrix.incorp_taxa"]], "incorp_trait() (pybrops.model.vmat.genicvariancematrix.genicvariancematrix method)": [[879, "pybrops.model.vmat.GenicVarianceMatrix.GenicVarianceMatrix.incorp_trait"]], "insert() (pybrops.model.vmat.genicvariancematrix.genicvariancematrix method)": [[879, "pybrops.model.vmat.GenicVarianceMatrix.GenicVarianceMatrix.insert"]], "insert_taxa() (pybrops.model.vmat.genicvariancematrix.genicvariancematrix method)": [[879, "pybrops.model.vmat.GenicVarianceMatrix.GenicVarianceMatrix.insert_taxa"]], "insert_trait() (pybrops.model.vmat.genicvariancematrix.genicvariancematrix method)": [[879, "pybrops.model.vmat.GenicVarianceMatrix.GenicVarianceMatrix.insert_trait"]], "is_grouped() (pybrops.model.vmat.genicvariancematrix.genicvariancematrix method)": [[879, "pybrops.model.vmat.GenicVarianceMatrix.GenicVarianceMatrix.is_grouped"]], "is_grouped_taxa() (pybrops.model.vmat.genicvariancematrix.genicvariancematrix method)": [[879, "pybrops.model.vmat.GenicVarianceMatrix.GenicVarianceMatrix.is_grouped_taxa"]], "is_square() (pybrops.model.vmat.genicvariancematrix.genicvariancematrix method)": [[879, "pybrops.model.vmat.GenicVarianceMatrix.GenicVarianceMatrix.is_square"]], "is_square_taxa() (pybrops.model.vmat.genicvariancematrix.genicvariancematrix method)": [[879, "pybrops.model.vmat.GenicVarianceMatrix.GenicVarianceMatrix.is_square_taxa"]], "lexsort() (pybrops.model.vmat.genicvariancematrix.genicvariancematrix method)": [[879, "pybrops.model.vmat.GenicVarianceMatrix.GenicVarianceMatrix.lexsort"]], "lexsort_taxa() (pybrops.model.vmat.genicvariancematrix.genicvariancematrix method)": [[879, "pybrops.model.vmat.GenicVarianceMatrix.GenicVarianceMatrix.lexsort_taxa"]], "lexsort_trait() (pybrops.model.vmat.genicvariancematrix.genicvariancematrix method)": [[879, "pybrops.model.vmat.GenicVarianceMatrix.GenicVarianceMatrix.lexsort_trait"]], "mat (pybrops.model.vmat.genicvariancematrix.genicvariancematrix property)": [[879, "pybrops.model.vmat.GenicVarianceMatrix.GenicVarianceMatrix.mat"]], "mat_ndim (pybrops.model.vmat.genicvariancematrix.genicvariancematrix property)": [[879, "pybrops.model.vmat.GenicVarianceMatrix.GenicVarianceMatrix.mat_ndim"]], "mat_shape (pybrops.model.vmat.genicvariancematrix.genicvariancematrix property)": [[879, "pybrops.model.vmat.GenicVarianceMatrix.GenicVarianceMatrix.mat_shape"]], "nsquare (pybrops.model.vmat.genicvariancematrix.genicvariancematrix property)": [[879, "pybrops.model.vmat.GenicVarianceMatrix.GenicVarianceMatrix.nsquare"]], "nsquare_taxa (pybrops.model.vmat.genicvariancematrix.genicvariancematrix property)": [[879, "pybrops.model.vmat.GenicVarianceMatrix.GenicVarianceMatrix.nsquare_taxa"]], "ntaxa (pybrops.model.vmat.genicvariancematrix.genicvariancematrix property)": [[879, "pybrops.model.vmat.GenicVarianceMatrix.GenicVarianceMatrix.ntaxa"]], "ntrait (pybrops.model.vmat.genicvariancematrix.genicvariancematrix property)": [[879, "pybrops.model.vmat.GenicVarianceMatrix.GenicVarianceMatrix.ntrait"]], "remove() (pybrops.model.vmat.genicvariancematrix.genicvariancematrix method)": [[879, "pybrops.model.vmat.GenicVarianceMatrix.GenicVarianceMatrix.remove"]], "remove_taxa() (pybrops.model.vmat.genicvariancematrix.genicvariancematrix method)": [[879, "pybrops.model.vmat.GenicVarianceMatrix.GenicVarianceMatrix.remove_taxa"]], "remove_trait() (pybrops.model.vmat.genicvariancematrix.genicvariancematrix method)": [[879, "pybrops.model.vmat.GenicVarianceMatrix.GenicVarianceMatrix.remove_trait"]], "reorder() (pybrops.model.vmat.genicvariancematrix.genicvariancematrix method)": [[879, "pybrops.model.vmat.GenicVarianceMatrix.GenicVarianceMatrix.reorder"]], "reorder_taxa() (pybrops.model.vmat.genicvariancematrix.genicvariancematrix method)": [[879, "pybrops.model.vmat.GenicVarianceMatrix.GenicVarianceMatrix.reorder_taxa"]], "reorder_trait() (pybrops.model.vmat.genicvariancematrix.genicvariancematrix method)": [[879, "pybrops.model.vmat.GenicVarianceMatrix.GenicVarianceMatrix.reorder_trait"]], "select() (pybrops.model.vmat.genicvariancematrix.genicvariancematrix method)": [[879, "pybrops.model.vmat.GenicVarianceMatrix.GenicVarianceMatrix.select"]], "select_taxa() (pybrops.model.vmat.genicvariancematrix.genicvariancematrix method)": [[879, "pybrops.model.vmat.GenicVarianceMatrix.GenicVarianceMatrix.select_taxa"]], "select_trait() (pybrops.model.vmat.genicvariancematrix.genicvariancematrix method)": [[879, "pybrops.model.vmat.GenicVarianceMatrix.GenicVarianceMatrix.select_trait"]], "sort() (pybrops.model.vmat.genicvariancematrix.genicvariancematrix method)": [[879, "pybrops.model.vmat.GenicVarianceMatrix.GenicVarianceMatrix.sort"]], "sort_taxa() (pybrops.model.vmat.genicvariancematrix.genicvariancematrix method)": [[879, "pybrops.model.vmat.GenicVarianceMatrix.GenicVarianceMatrix.sort_taxa"]], "sort_trait() (pybrops.model.vmat.genicvariancematrix.genicvariancematrix method)": [[879, "pybrops.model.vmat.GenicVarianceMatrix.GenicVarianceMatrix.sort_trait"]], "square_axes (pybrops.model.vmat.genicvariancematrix.genicvariancematrix property)": [[879, "pybrops.model.vmat.GenicVarianceMatrix.GenicVarianceMatrix.square_axes"]], "square_axes_len (pybrops.model.vmat.genicvariancematrix.genicvariancematrix property)": [[879, "pybrops.model.vmat.GenicVarianceMatrix.GenicVarianceMatrix.square_axes_len"]], "square_taxa_axes (pybrops.model.vmat.genicvariancematrix.genicvariancematrix property)": [[879, "pybrops.model.vmat.GenicVarianceMatrix.GenicVarianceMatrix.square_taxa_axes"]], "square_taxa_axes_len (pybrops.model.vmat.genicvariancematrix.genicvariancematrix property)": [[879, "pybrops.model.vmat.GenicVarianceMatrix.GenicVarianceMatrix.square_taxa_axes_len"]], "taxa (pybrops.model.vmat.genicvariancematrix.genicvariancematrix property)": [[879, "pybrops.model.vmat.GenicVarianceMatrix.GenicVarianceMatrix.taxa"]], "taxa_axis (pybrops.model.vmat.genicvariancematrix.genicvariancematrix property)": [[879, "pybrops.model.vmat.GenicVarianceMatrix.GenicVarianceMatrix.taxa_axis"]], "taxa_grp (pybrops.model.vmat.genicvariancematrix.genicvariancematrix property)": [[879, "pybrops.model.vmat.GenicVarianceMatrix.GenicVarianceMatrix.taxa_grp"]], "taxa_grp_len (pybrops.model.vmat.genicvariancematrix.genicvariancematrix property)": [[879, "pybrops.model.vmat.GenicVarianceMatrix.GenicVarianceMatrix.taxa_grp_len"]], "taxa_grp_name (pybrops.model.vmat.genicvariancematrix.genicvariancematrix property)": [[879, "pybrops.model.vmat.GenicVarianceMatrix.GenicVarianceMatrix.taxa_grp_name"]], "taxa_grp_spix (pybrops.model.vmat.genicvariancematrix.genicvariancematrix property)": [[879, "pybrops.model.vmat.GenicVarianceMatrix.GenicVarianceMatrix.taxa_grp_spix"]], "taxa_grp_stix (pybrops.model.vmat.genicvariancematrix.genicvariancematrix property)": [[879, "pybrops.model.vmat.GenicVarianceMatrix.GenicVarianceMatrix.taxa_grp_stix"]], "to_csv() (pybrops.model.vmat.genicvariancematrix.genicvariancematrix method)": [[879, "pybrops.model.vmat.GenicVarianceMatrix.GenicVarianceMatrix.to_csv"]], "to_hdf5() (pybrops.model.vmat.genicvariancematrix.genicvariancematrix method)": [[879, "pybrops.model.vmat.GenicVarianceMatrix.GenicVarianceMatrix.to_hdf5"]], "to_pandas() (pybrops.model.vmat.genicvariancematrix.genicvariancematrix method)": [[879, "pybrops.model.vmat.GenicVarianceMatrix.GenicVarianceMatrix.to_pandas"]], "trait (pybrops.model.vmat.genicvariancematrix.genicvariancematrix property)": [[879, "pybrops.model.vmat.GenicVarianceMatrix.GenicVarianceMatrix.trait"]], "trait_axis (pybrops.model.vmat.genicvariancematrix.genicvariancematrix property)": [[879, "pybrops.model.vmat.GenicVarianceMatrix.GenicVarianceMatrix.trait_axis"]], "ungroup() (pybrops.model.vmat.genicvariancematrix.genicvariancematrix method)": [[879, "pybrops.model.vmat.GenicVarianceMatrix.GenicVarianceMatrix.ungroup"]], "ungroup_taxa() (pybrops.model.vmat.genicvariancematrix.genicvariancematrix method)": [[879, "pybrops.model.vmat.GenicVarianceMatrix.GenicVarianceMatrix.ungroup_taxa"]], "check_is_genicvariancematrix() (in module pybrops.model.vmat.genicvariancematrix)": [[880, "pybrops.model.vmat.GenicVarianceMatrix.check_is_GenicVarianceMatrix"]], "pybrops.model.vmat.fcty": [[881, "module-pybrops.model.vmat.fcty"]], "pybrops.model.vmat.fcty.additivegeneticvariancematrixfactory": [[882, "module-pybrops.model.vmat.fcty.AdditiveGeneticVarianceMatrixFactory"]], "additivegeneticvariancematrixfactory (class in pybrops.model.vmat.fcty.additivegeneticvariancematrixfactory)": [[883, "pybrops.model.vmat.fcty.AdditiveGeneticVarianceMatrixFactory.AdditiveGeneticVarianceMatrixFactory"]], "from_algmod() (pybrops.model.vmat.fcty.additivegeneticvariancematrixfactory.additivegeneticvariancematrixfactory method)": [[883, "pybrops.model.vmat.fcty.AdditiveGeneticVarianceMatrixFactory.AdditiveGeneticVarianceMatrixFactory.from_algmod"]], "from_gmod() (pybrops.model.vmat.fcty.additivegeneticvariancematrixfactory.additivegeneticvariancematrixfactory method)": [[883, "pybrops.model.vmat.fcty.AdditiveGeneticVarianceMatrixFactory.AdditiveGeneticVarianceMatrixFactory.from_gmod"]], "check_is_additivegeneticvariancematrixfactory() (in module pybrops.model.vmat.fcty.additivegeneticvariancematrixfactory)": [[884, "pybrops.model.vmat.fcty.AdditiveGeneticVarianceMatrixFactory.check_is_AdditiveGeneticVarianceMatrixFactory"]], "pybrops.model.vmat.fcty.additivegenicvariancematrixfactory": [[885, "module-pybrops.model.vmat.fcty.AdditiveGenicVarianceMatrixFactory"]], "additivegenicvariancematrixfactory (class in pybrops.model.vmat.fcty.additivegenicvariancematrixfactory)": [[886, "pybrops.model.vmat.fcty.AdditiveGenicVarianceMatrixFactory.AdditiveGenicVarianceMatrixFactory"]], "from_algmod() (pybrops.model.vmat.fcty.additivegenicvariancematrixfactory.additivegenicvariancematrixfactory method)": [[886, "pybrops.model.vmat.fcty.AdditiveGenicVarianceMatrixFactory.AdditiveGenicVarianceMatrixFactory.from_algmod"]], "from_gmod() (pybrops.model.vmat.fcty.additivegenicvariancematrixfactory.additivegenicvariancematrixfactory method)": [[886, "pybrops.model.vmat.fcty.AdditiveGenicVarianceMatrixFactory.AdditiveGenicVarianceMatrixFactory.from_gmod"]], "check_is_additivegenicvariancematrixfactory() (in module pybrops.model.vmat.fcty.additivegenicvariancematrixfactory)": [[887, "pybrops.model.vmat.fcty.AdditiveGenicVarianceMatrixFactory.check_is_AdditiveGenicVarianceMatrixFactory"]], "pybrops.model.vmat.fcty.densedihybriddhadditivegeneticvariancematrixfactory": [[888, "module-pybrops.model.vmat.fcty.DenseDihybridDHAdditiveGeneticVarianceMatrixFactory"]], "densedihybriddhadditivegeneticvariancematrixfactory (class in pybrops.model.vmat.fcty.densedihybriddhadditivegeneticvariancematrixfactory)": [[889, "pybrops.model.vmat.fcty.DenseDihybridDHAdditiveGeneticVarianceMatrixFactory.DenseDihybridDHAdditiveGeneticVarianceMatrixFactory"]], "from_algmod() (pybrops.model.vmat.fcty.densedihybriddhadditivegeneticvariancematrixfactory.densedihybriddhadditivegeneticvariancematrixfactory method)": [[889, "pybrops.model.vmat.fcty.DenseDihybridDHAdditiveGeneticVarianceMatrixFactory.DenseDihybridDHAdditiveGeneticVarianceMatrixFactory.from_algmod"]], "from_gmod() (pybrops.model.vmat.fcty.densedihybriddhadditivegeneticvariancematrixfactory.densedihybriddhadditivegeneticvariancematrixfactory method)": [[889, "pybrops.model.vmat.fcty.DenseDihybridDHAdditiveGeneticVarianceMatrixFactory.DenseDihybridDHAdditiveGeneticVarianceMatrixFactory.from_gmod"]], "check_is_densedihybriddhadditivegeneticvariancematrixfactory() (in module pybrops.model.vmat.fcty.densedihybriddhadditivegeneticvariancematrixfactory)": [[890, "pybrops.model.vmat.fcty.DenseDihybridDHAdditiveGeneticVarianceMatrixFactory.check_is_DenseDihybridDHAdditiveGeneticVarianceMatrixFactory"]], "pybrops.model.vmat.fcty.densefourwaydhadditivegeneticvariancematrixfactory": [[891, "module-pybrops.model.vmat.fcty.DenseFourWayDHAdditiveGeneticVarianceMatrixFactory"]], "densefourwaydhadditivegeneticvariancematrixfactory (class in pybrops.model.vmat.fcty.densefourwaydhadditivegeneticvariancematrixfactory)": [[892, "pybrops.model.vmat.fcty.DenseFourWayDHAdditiveGeneticVarianceMatrixFactory.DenseFourWayDHAdditiveGeneticVarianceMatrixFactory"]], "from_algmod() (pybrops.model.vmat.fcty.densefourwaydhadditivegeneticvariancematrixfactory.densefourwaydhadditivegeneticvariancematrixfactory method)": [[892, "pybrops.model.vmat.fcty.DenseFourWayDHAdditiveGeneticVarianceMatrixFactory.DenseFourWayDHAdditiveGeneticVarianceMatrixFactory.from_algmod"]], "from_gmod() (pybrops.model.vmat.fcty.densefourwaydhadditivegeneticvariancematrixfactory.densefourwaydhadditivegeneticvariancematrixfactory method)": [[892, "pybrops.model.vmat.fcty.DenseFourWayDHAdditiveGeneticVarianceMatrixFactory.DenseFourWayDHAdditiveGeneticVarianceMatrixFactory.from_gmod"]], "check_is_densefourwaydhadditivegeneticvariancematrixfactory() (in module pybrops.model.vmat.fcty.densefourwaydhadditivegeneticvariancematrixfactory)": [[893, "pybrops.model.vmat.fcty.DenseFourWayDHAdditiveGeneticVarianceMatrixFactory.check_is_DenseFourWayDHAdditiveGeneticVarianceMatrixFactory"]], "pybrops.model.vmat.fcty.densethreewaydhadditivegeneticvariancematrixfactory": [[894, "module-pybrops.model.vmat.fcty.DenseThreeWayDHAdditiveGeneticVarianceMatrixFactory"]], "densethreewaydhadditivegeneticvariancematrixfactory (class in pybrops.model.vmat.fcty.densethreewaydhadditivegeneticvariancematrixfactory)": [[895, "pybrops.model.vmat.fcty.DenseThreeWayDHAdditiveGeneticVarianceMatrixFactory.DenseThreeWayDHAdditiveGeneticVarianceMatrixFactory"]], "from_algmod() (pybrops.model.vmat.fcty.densethreewaydhadditivegeneticvariancematrixfactory.densethreewaydhadditivegeneticvariancematrixfactory method)": [[895, "pybrops.model.vmat.fcty.DenseThreeWayDHAdditiveGeneticVarianceMatrixFactory.DenseThreeWayDHAdditiveGeneticVarianceMatrixFactory.from_algmod"]], "from_gmod() (pybrops.model.vmat.fcty.densethreewaydhadditivegeneticvariancematrixfactory.densethreewaydhadditivegeneticvariancematrixfactory method)": [[895, "pybrops.model.vmat.fcty.DenseThreeWayDHAdditiveGeneticVarianceMatrixFactory.DenseThreeWayDHAdditiveGeneticVarianceMatrixFactory.from_gmod"]], "check_is_densethreewaydhadditivegeneticvariancematrixfactory() (in module pybrops.model.vmat.fcty.densethreewaydhadditivegeneticvariancematrixfactory)": [[896, "pybrops.model.vmat.fcty.DenseThreeWayDHAdditiveGeneticVarianceMatrixFactory.check_is_DenseThreeWayDHAdditiveGeneticVarianceMatrixFactory"]], "pybrops.model.vmat.fcty.densetwowaydhadditivegeneticvariancematrixfactory": [[897, "module-pybrops.model.vmat.fcty.DenseTwoWayDHAdditiveGeneticVarianceMatrixFactory"]], "densetwowaydhadditivegeneticvariancematrixfactory (class in pybrops.model.vmat.fcty.densetwowaydhadditivegeneticvariancematrixfactory)": [[898, "pybrops.model.vmat.fcty.DenseTwoWayDHAdditiveGeneticVarianceMatrixFactory.DenseTwoWayDHAdditiveGeneticVarianceMatrixFactory"]], "from_algmod() (pybrops.model.vmat.fcty.densetwowaydhadditivegeneticvariancematrixfactory.densetwowaydhadditivegeneticvariancematrixfactory method)": [[898, "pybrops.model.vmat.fcty.DenseTwoWayDHAdditiveGeneticVarianceMatrixFactory.DenseTwoWayDHAdditiveGeneticVarianceMatrixFactory.from_algmod"]], "from_gmod() (pybrops.model.vmat.fcty.densetwowaydhadditivegeneticvariancematrixfactory.densetwowaydhadditivegeneticvariancematrixfactory method)": [[898, "pybrops.model.vmat.fcty.DenseTwoWayDHAdditiveGeneticVarianceMatrixFactory.DenseTwoWayDHAdditiveGeneticVarianceMatrixFactory.from_gmod"]], "check_is_densetwowaydhadditivegeneticvariancematrixfactory() (in module pybrops.model.vmat.fcty.densetwowaydhadditivegeneticvariancematrixfactory)": [[899, "pybrops.model.vmat.fcty.DenseTwoWayDHAdditiveGeneticVarianceMatrixFactory.check_is_DenseTwoWayDHAdditiveGeneticVarianceMatrixFactory"]], "pybrops.model.vmat.fcty.densetwowaydhadditivegenicvariancematrixfactory": [[900, "module-pybrops.model.vmat.fcty.DenseTwoWayDHAdditiveGenicVarianceMatrixFactory"]], "densetwowaydhadditivegenicvariancematrixfactory (class in pybrops.model.vmat.fcty.densetwowaydhadditivegenicvariancematrixfactory)": [[901, "pybrops.model.vmat.fcty.DenseTwoWayDHAdditiveGenicVarianceMatrixFactory.DenseTwoWayDHAdditiveGenicVarianceMatrixFactory"]], "from_algmod() (pybrops.model.vmat.fcty.densetwowaydhadditivegenicvariancematrixfactory.densetwowaydhadditivegenicvariancematrixfactory method)": [[901, "pybrops.model.vmat.fcty.DenseTwoWayDHAdditiveGenicVarianceMatrixFactory.DenseTwoWayDHAdditiveGenicVarianceMatrixFactory.from_algmod"]], "from_gmod() (pybrops.model.vmat.fcty.densetwowaydhadditivegenicvariancematrixfactory.densetwowaydhadditivegenicvariancematrixfactory method)": [[901, "pybrops.model.vmat.fcty.DenseTwoWayDHAdditiveGenicVarianceMatrixFactory.DenseTwoWayDHAdditiveGenicVarianceMatrixFactory.from_gmod"]], "check_is_densetwowaydhadditivegenicvariancematrixfactory() (in module pybrops.model.vmat.fcty.densetwowaydhadditivegenicvariancematrixfactory)": [[902, "pybrops.model.vmat.fcty.DenseTwoWayDHAdditiveGenicVarianceMatrixFactory.check_is_DenseTwoWayDHAdditiveGenicVarianceMatrixFactory"]], "pybrops.model.vmat.fcty.geneticvariancematrixfactory": [[903, "module-pybrops.model.vmat.fcty.GeneticVarianceMatrixFactory"]], "geneticvariancematrixfactory (class in pybrops.model.vmat.fcty.geneticvariancematrixfactory)": [[904, "pybrops.model.vmat.fcty.GeneticVarianceMatrixFactory.GeneticVarianceMatrixFactory"]], "from_gmod() (pybrops.model.vmat.fcty.geneticvariancematrixfactory.geneticvariancematrixfactory method)": [[904, "pybrops.model.vmat.fcty.GeneticVarianceMatrixFactory.GeneticVarianceMatrixFactory.from_gmod"]], "check_is_geneticvariancematrixfactory() (in module pybrops.model.vmat.fcty.geneticvariancematrixfactory)": [[905, "pybrops.model.vmat.fcty.GeneticVarianceMatrixFactory.check_is_GeneticVarianceMatrixFactory"]], "pybrops.model.vmat.fcty.genicvariancematrixfactory": [[906, "module-pybrops.model.vmat.fcty.GenicVarianceMatrixFactory"]], "genicvariancematrixfactory (class in pybrops.model.vmat.fcty.genicvariancematrixfactory)": [[907, "pybrops.model.vmat.fcty.GenicVarianceMatrixFactory.GenicVarianceMatrixFactory"]], "from_gmod() (pybrops.model.vmat.fcty.genicvariancematrixfactory.genicvariancematrixfactory method)": [[907, "pybrops.model.vmat.fcty.GenicVarianceMatrixFactory.GenicVarianceMatrixFactory.from_gmod"]], "check_is_genicvariancematrixfactory() (in module pybrops.model.vmat.fcty.genicvariancematrixfactory)": [[908, "pybrops.model.vmat.fcty.GenicVarianceMatrixFactory.check_is_GenicVarianceMatrixFactory"]], "pybrops.model.vmat.util": [[909, "module-pybrops.model.vmat.util"]], "cov_d1s() (in module pybrops.model.vmat.util)": [[910, "pybrops.model.vmat.util.cov_D1s"]], "cov_d1st() (in module pybrops.model.vmat.util)": [[911, "pybrops.model.vmat.util.cov_D1st"]], "cov_d2s() (in module pybrops.model.vmat.util)": [[912, "pybrops.model.vmat.util.cov_D2s"]], "cov_d2st() (in module pybrops.model.vmat.util)": [[913, "pybrops.model.vmat.util.cov_D2st"]], "rprob_filial() (in module pybrops.model.vmat.util)": [[914, "pybrops.model.vmat.util.rprob_filial"]], "pybrops.opt": [[915, "module-pybrops.opt"]], "pybrops.opt.algo": [[916, "module-pybrops.opt.algo"]], "pybrops.opt.algo.binarygeneticalgorithm": [[917, "module-pybrops.opt.algo.BinaryGeneticAlgorithm"]], "binarygeneticalgorithm (class in pybrops.opt.algo.binarygeneticalgorithm)": [[918, "pybrops.opt.algo.BinaryGeneticAlgorithm.BinaryGeneticAlgorithm"]], "minimize() (pybrops.opt.algo.binarygeneticalgorithm.binarygeneticalgorithm method)": [[918, "pybrops.opt.algo.BinaryGeneticAlgorithm.BinaryGeneticAlgorithm.minimize"]], "ngen (pybrops.opt.algo.binarygeneticalgorithm.binarygeneticalgorithm property)": [[918, "pybrops.opt.algo.BinaryGeneticAlgorithm.BinaryGeneticAlgorithm.ngen"]], "pop_size (pybrops.opt.algo.binarygeneticalgorithm.binarygeneticalgorithm property)": [[918, "pybrops.opt.algo.BinaryGeneticAlgorithm.BinaryGeneticAlgorithm.pop_size"]], "rng (pybrops.opt.algo.binarygeneticalgorithm.binarygeneticalgorithm property)": [[918, "pybrops.opt.algo.BinaryGeneticAlgorithm.BinaryGeneticAlgorithm.rng"]], "pybrops.opt.algo.binaryoptimizationalgorithm": [[919, "module-pybrops.opt.algo.BinaryOptimizationAlgorithm"]], "binaryoptimizationalgorithm (class in pybrops.opt.algo.binaryoptimizationalgorithm)": [[920, "pybrops.opt.algo.BinaryOptimizationAlgorithm.BinaryOptimizationAlgorithm"]], "minimize() (pybrops.opt.algo.binaryoptimizationalgorithm.binaryoptimizationalgorithm method)": [[920, "pybrops.opt.algo.BinaryOptimizationAlgorithm.BinaryOptimizationAlgorithm.minimize"]], "check_is_binaryoptimizationalgorithm() (in module pybrops.opt.algo.binaryoptimizationalgorithm)": [[921, "pybrops.opt.algo.BinaryOptimizationAlgorithm.check_is_BinaryOptimizationAlgorithm"]], "pybrops.opt.algo.integergeneticalgorithm": [[922, "module-pybrops.opt.algo.IntegerGeneticAlgorithm"]], "integergeneticalgorithm (class in pybrops.opt.algo.integergeneticalgorithm)": [[923, "pybrops.opt.algo.IntegerGeneticAlgorithm.IntegerGeneticAlgorithm"]], "minimize() (pybrops.opt.algo.integergeneticalgorithm.integergeneticalgorithm method)": [[923, "pybrops.opt.algo.IntegerGeneticAlgorithm.IntegerGeneticAlgorithm.minimize"]], "ngen (pybrops.opt.algo.integergeneticalgorithm.integergeneticalgorithm property)": [[923, "pybrops.opt.algo.IntegerGeneticAlgorithm.IntegerGeneticAlgorithm.ngen"]], "pop_size (pybrops.opt.algo.integergeneticalgorithm.integergeneticalgorithm property)": [[923, "pybrops.opt.algo.IntegerGeneticAlgorithm.IntegerGeneticAlgorithm.pop_size"]], "rng (pybrops.opt.algo.integergeneticalgorithm.integergeneticalgorithm property)": [[923, "pybrops.opt.algo.IntegerGeneticAlgorithm.IntegerGeneticAlgorithm.rng"]], "pybrops.opt.algo.integeroptimizationalgorithm": [[924, "module-pybrops.opt.algo.IntegerOptimizationAlgorithm"]], "integeroptimizationalgorithm (class in pybrops.opt.algo.integeroptimizationalgorithm)": [[925, "pybrops.opt.algo.IntegerOptimizationAlgorithm.IntegerOptimizationAlgorithm"]], "minimize() (pybrops.opt.algo.integeroptimizationalgorithm.integeroptimizationalgorithm method)": [[925, "pybrops.opt.algo.IntegerOptimizationAlgorithm.IntegerOptimizationAlgorithm.minimize"]], "check_is_integeroptimizationalgorithm() (in module pybrops.opt.algo.integeroptimizationalgorithm)": [[926, "pybrops.opt.algo.IntegerOptimizationAlgorithm.check_is_IntegerOptimizationAlgorithm"]], "pybrops.opt.algo.nsga2binarygeneticalgorithm": [[927, "module-pybrops.opt.algo.NSGA2BinaryGeneticAlgorithm"]], "nsga2binarygeneticalgorithm (class in pybrops.opt.algo.nsga2binarygeneticalgorithm)": [[928, "pybrops.opt.algo.NSGA2BinaryGeneticAlgorithm.NSGA2BinaryGeneticAlgorithm"]], "minimize() (pybrops.opt.algo.nsga2binarygeneticalgorithm.nsga2binarygeneticalgorithm method)": [[928, "pybrops.opt.algo.NSGA2BinaryGeneticAlgorithm.NSGA2BinaryGeneticAlgorithm.minimize"]], "ngen (pybrops.opt.algo.nsga2binarygeneticalgorithm.nsga2binarygeneticalgorithm property)": [[928, "pybrops.opt.algo.NSGA2BinaryGeneticAlgorithm.NSGA2BinaryGeneticAlgorithm.ngen"]], "pop_size (pybrops.opt.algo.nsga2binarygeneticalgorithm.nsga2binarygeneticalgorithm property)": [[928, "pybrops.opt.algo.NSGA2BinaryGeneticAlgorithm.NSGA2BinaryGeneticAlgorithm.pop_size"]], "rng (pybrops.opt.algo.nsga2binarygeneticalgorithm.nsga2binarygeneticalgorithm property)": [[928, "pybrops.opt.algo.NSGA2BinaryGeneticAlgorithm.NSGA2BinaryGeneticAlgorithm.rng"]], "pybrops.opt.algo.nsga2integergeneticalgorithm": [[929, "module-pybrops.opt.algo.NSGA2IntegerGeneticAlgorithm"]], "nsga2integergeneticalgorithm (class in pybrops.opt.algo.nsga2integergeneticalgorithm)": [[930, "pybrops.opt.algo.NSGA2IntegerGeneticAlgorithm.NSGA2IntegerGeneticAlgorithm"]], "minimize() (pybrops.opt.algo.nsga2integergeneticalgorithm.nsga2integergeneticalgorithm method)": [[930, "pybrops.opt.algo.NSGA2IntegerGeneticAlgorithm.NSGA2IntegerGeneticAlgorithm.minimize"]], "ngen (pybrops.opt.algo.nsga2integergeneticalgorithm.nsga2integergeneticalgorithm property)": [[930, "pybrops.opt.algo.NSGA2IntegerGeneticAlgorithm.NSGA2IntegerGeneticAlgorithm.ngen"]], "pop_size (pybrops.opt.algo.nsga2integergeneticalgorithm.nsga2integergeneticalgorithm property)": [[930, "pybrops.opt.algo.NSGA2IntegerGeneticAlgorithm.NSGA2IntegerGeneticAlgorithm.pop_size"]], "rng (pybrops.opt.algo.nsga2integergeneticalgorithm.nsga2integergeneticalgorithm property)": [[930, "pybrops.opt.algo.NSGA2IntegerGeneticAlgorithm.NSGA2IntegerGeneticAlgorithm.rng"]], "pybrops.opt.algo.nsga2memeticsubsetgeneticalgorithm": [[931, "module-pybrops.opt.algo.NSGA2MemeticSubsetGeneticAlgorithm"]], "nsga2mutatorasubsetgeneticalgorithm (class in pybrops.opt.algo.nsga2memeticsubsetgeneticalgorithm)": [[932, "pybrops.opt.algo.NSGA2MemeticSubsetGeneticAlgorithm.NSGA2MutatorASubsetGeneticAlgorithm"]], "minimize() (pybrops.opt.algo.nsga2memeticsubsetgeneticalgorithm.nsga2mutatorasubsetgeneticalgorithm method)": [[932, "pybrops.opt.algo.NSGA2MemeticSubsetGeneticAlgorithm.NSGA2MutatorASubsetGeneticAlgorithm.minimize"]], "ngen (pybrops.opt.algo.nsga2memeticsubsetgeneticalgorithm.nsga2mutatorasubsetgeneticalgorithm property)": [[932, "pybrops.opt.algo.NSGA2MemeticSubsetGeneticAlgorithm.NSGA2MutatorASubsetGeneticAlgorithm.ngen"]], "phc (pybrops.opt.algo.nsga2memeticsubsetgeneticalgorithm.nsga2mutatorasubsetgeneticalgorithm property)": [[932, "pybrops.opt.algo.NSGA2MemeticSubsetGeneticAlgorithm.NSGA2MutatorASubsetGeneticAlgorithm.phc"]], "pop_size (pybrops.opt.algo.nsga2memeticsubsetgeneticalgorithm.nsga2mutatorasubsetgeneticalgorithm property)": [[932, "pybrops.opt.algo.NSGA2MemeticSubsetGeneticAlgorithm.NSGA2MutatorASubsetGeneticAlgorithm.pop_size"]], "rng (pybrops.opt.algo.nsga2memeticsubsetgeneticalgorithm.nsga2mutatorasubsetgeneticalgorithm property)": [[932, "pybrops.opt.algo.NSGA2MemeticSubsetGeneticAlgorithm.NSGA2MutatorASubsetGeneticAlgorithm.rng"]], "nsga2mutatorbsubsetgeneticalgorithm (class in pybrops.opt.algo.nsga2memeticsubsetgeneticalgorithm)": [[933, "pybrops.opt.algo.NSGA2MemeticSubsetGeneticAlgorithm.NSGA2MutatorBSubsetGeneticAlgorithm"]], "minimize() (pybrops.opt.algo.nsga2memeticsubsetgeneticalgorithm.nsga2mutatorbsubsetgeneticalgorithm method)": [[933, "pybrops.opt.algo.NSGA2MemeticSubsetGeneticAlgorithm.NSGA2MutatorBSubsetGeneticAlgorithm.minimize"]], "ngen (pybrops.opt.algo.nsga2memeticsubsetgeneticalgorithm.nsga2mutatorbsubsetgeneticalgorithm property)": [[933, "pybrops.opt.algo.NSGA2MemeticSubsetGeneticAlgorithm.NSGA2MutatorBSubsetGeneticAlgorithm.ngen"]], "phc (pybrops.opt.algo.nsga2memeticsubsetgeneticalgorithm.nsga2mutatorbsubsetgeneticalgorithm property)": [[933, "pybrops.opt.algo.NSGA2MemeticSubsetGeneticAlgorithm.NSGA2MutatorBSubsetGeneticAlgorithm.phc"]], "pop_size (pybrops.opt.algo.nsga2memeticsubsetgeneticalgorithm.nsga2mutatorbsubsetgeneticalgorithm property)": [[933, "pybrops.opt.algo.NSGA2MemeticSubsetGeneticAlgorithm.NSGA2MutatorBSubsetGeneticAlgorithm.pop_size"]], "rng (pybrops.opt.algo.nsga2memeticsubsetgeneticalgorithm.nsga2mutatorbsubsetgeneticalgorithm property)": [[933, "pybrops.opt.algo.NSGA2MemeticSubsetGeneticAlgorithm.NSGA2MutatorBSubsetGeneticAlgorithm.rng"]], "nsga2steepestdescentsubsetgeneticalgorithm (class in pybrops.opt.algo.nsga2memeticsubsetgeneticalgorithm)": [[934, "pybrops.opt.algo.NSGA2MemeticSubsetGeneticAlgorithm.NSGA2SteepestDescentSubsetGeneticAlgorithm"]], "minimize() (pybrops.opt.algo.nsga2memeticsubsetgeneticalgorithm.nsga2steepestdescentsubsetgeneticalgorithm method)": [[934, "pybrops.opt.algo.NSGA2MemeticSubsetGeneticAlgorithm.NSGA2SteepestDescentSubsetGeneticAlgorithm.minimize"]], "ngen (pybrops.opt.algo.nsga2memeticsubsetgeneticalgorithm.nsga2steepestdescentsubsetgeneticalgorithm property)": [[934, "pybrops.opt.algo.NSGA2MemeticSubsetGeneticAlgorithm.NSGA2SteepestDescentSubsetGeneticAlgorithm.ngen"]], "phc (pybrops.opt.algo.nsga2memeticsubsetgeneticalgorithm.nsga2steepestdescentsubsetgeneticalgorithm property)": [[934, "pybrops.opt.algo.NSGA2MemeticSubsetGeneticAlgorithm.NSGA2SteepestDescentSubsetGeneticAlgorithm.phc"]], "pop_size (pybrops.opt.algo.nsga2memeticsubsetgeneticalgorithm.nsga2steepestdescentsubsetgeneticalgorithm property)": [[934, "pybrops.opt.algo.NSGA2MemeticSubsetGeneticAlgorithm.NSGA2SteepestDescentSubsetGeneticAlgorithm.pop_size"]], "rng (pybrops.opt.algo.nsga2memeticsubsetgeneticalgorithm.nsga2steepestdescentsubsetgeneticalgorithm property)": [[934, "pybrops.opt.algo.NSGA2MemeticSubsetGeneticAlgorithm.NSGA2SteepestDescentSubsetGeneticAlgorithm.rng"]], "nsga2stochasticdescentsubsetgeneticalgorithm (class in pybrops.opt.algo.nsga2memeticsubsetgeneticalgorithm)": [[935, "pybrops.opt.algo.NSGA2MemeticSubsetGeneticAlgorithm.NSGA2StochasticDescentSubsetGeneticAlgorithm"]], "minimize() (pybrops.opt.algo.nsga2memeticsubsetgeneticalgorithm.nsga2stochasticdescentsubsetgeneticalgorithm method)": [[935, "pybrops.opt.algo.NSGA2MemeticSubsetGeneticAlgorithm.NSGA2StochasticDescentSubsetGeneticAlgorithm.minimize"]], "ngen (pybrops.opt.algo.nsga2memeticsubsetgeneticalgorithm.nsga2stochasticdescentsubsetgeneticalgorithm property)": [[935, "pybrops.opt.algo.NSGA2MemeticSubsetGeneticAlgorithm.NSGA2StochasticDescentSubsetGeneticAlgorithm.ngen"]], "phc (pybrops.opt.algo.nsga2memeticsubsetgeneticalgorithm.nsga2stochasticdescentsubsetgeneticalgorithm property)": [[935, "pybrops.opt.algo.NSGA2MemeticSubsetGeneticAlgorithm.NSGA2StochasticDescentSubsetGeneticAlgorithm.phc"]], "pop_size (pybrops.opt.algo.nsga2memeticsubsetgeneticalgorithm.nsga2stochasticdescentsubsetgeneticalgorithm property)": [[935, "pybrops.opt.algo.NSGA2MemeticSubsetGeneticAlgorithm.NSGA2StochasticDescentSubsetGeneticAlgorithm.pop_size"]], "rng (pybrops.opt.algo.nsga2memeticsubsetgeneticalgorithm.nsga2stochasticdescentsubsetgeneticalgorithm property)": [[935, "pybrops.opt.algo.NSGA2MemeticSubsetGeneticAlgorithm.NSGA2StochasticDescentSubsetGeneticAlgorithm.rng"]], "pybrops.opt.algo.nsga2realgeneticalgorithm": [[936, "module-pybrops.opt.algo.NSGA2RealGeneticAlgorithm"]], "nsga2realgeneticalgorithm (class in pybrops.opt.algo.nsga2realgeneticalgorithm)": [[937, "pybrops.opt.algo.NSGA2RealGeneticAlgorithm.NSGA2RealGeneticAlgorithm"]], "minimize() (pybrops.opt.algo.nsga2realgeneticalgorithm.nsga2realgeneticalgorithm method)": [[937, "pybrops.opt.algo.NSGA2RealGeneticAlgorithm.NSGA2RealGeneticAlgorithm.minimize"]], "ngen (pybrops.opt.algo.nsga2realgeneticalgorithm.nsga2realgeneticalgorithm property)": [[937, "pybrops.opt.algo.NSGA2RealGeneticAlgorithm.NSGA2RealGeneticAlgorithm.ngen"]], "pop_size (pybrops.opt.algo.nsga2realgeneticalgorithm.nsga2realgeneticalgorithm property)": [[937, "pybrops.opt.algo.NSGA2RealGeneticAlgorithm.NSGA2RealGeneticAlgorithm.pop_size"]], "rng (pybrops.opt.algo.nsga2realgeneticalgorithm.nsga2realgeneticalgorithm property)": [[937, "pybrops.opt.algo.NSGA2RealGeneticAlgorithm.NSGA2RealGeneticAlgorithm.rng"]], "pybrops.opt.algo.nsga2subsetgeneticalgorithm": [[938, "module-pybrops.opt.algo.NSGA2SubsetGeneticAlgorithm"]], "nsga2subsetgeneticalgorithm (class in pybrops.opt.algo.nsga2subsetgeneticalgorithm)": [[939, "pybrops.opt.algo.NSGA2SubsetGeneticAlgorithm.NSGA2SubsetGeneticAlgorithm"]], "minimize() (pybrops.opt.algo.nsga2subsetgeneticalgorithm.nsga2subsetgeneticalgorithm method)": [[939, "pybrops.opt.algo.NSGA2SubsetGeneticAlgorithm.NSGA2SubsetGeneticAlgorithm.minimize"]], "ngen (pybrops.opt.algo.nsga2subsetgeneticalgorithm.nsga2subsetgeneticalgorithm property)": [[939, "pybrops.opt.algo.NSGA2SubsetGeneticAlgorithm.NSGA2SubsetGeneticAlgorithm.ngen"]], "pop_size (pybrops.opt.algo.nsga2subsetgeneticalgorithm.nsga2subsetgeneticalgorithm property)": [[939, "pybrops.opt.algo.NSGA2SubsetGeneticAlgorithm.NSGA2SubsetGeneticAlgorithm.pop_size"]], "rng (pybrops.opt.algo.nsga2subsetgeneticalgorithm.nsga2subsetgeneticalgorithm property)": [[939, "pybrops.opt.algo.NSGA2SubsetGeneticAlgorithm.NSGA2SubsetGeneticAlgorithm.rng"]], "pybrops.opt.algo.nsga3subsetgeneticalgorithm": [[940, "module-pybrops.opt.algo.NSGA3SubsetGeneticAlgorithm"]], "nsga3subsetgeneticalgorithm (class in pybrops.opt.algo.nsga3subsetgeneticalgorithm)": [[941, "pybrops.opt.algo.NSGA3SubsetGeneticAlgorithm.NSGA3SubsetGeneticAlgorithm"]], "minimize() (pybrops.opt.algo.nsga3subsetgeneticalgorithm.nsga3subsetgeneticalgorithm method)": [[941, "pybrops.opt.algo.NSGA3SubsetGeneticAlgorithm.NSGA3SubsetGeneticAlgorithm.minimize"]], "ngen (pybrops.opt.algo.nsga3subsetgeneticalgorithm.nsga3subsetgeneticalgorithm property)": [[941, "pybrops.opt.algo.NSGA3SubsetGeneticAlgorithm.NSGA3SubsetGeneticAlgorithm.ngen"]], "nrefpts (pybrops.opt.algo.nsga3subsetgeneticalgorithm.nsga3subsetgeneticalgorithm property)": [[941, "pybrops.opt.algo.NSGA3SubsetGeneticAlgorithm.NSGA3SubsetGeneticAlgorithm.nrefpts"]], "pop_size (pybrops.opt.algo.nsga3subsetgeneticalgorithm.nsga3subsetgeneticalgorithm property)": [[941, "pybrops.opt.algo.NSGA3SubsetGeneticAlgorithm.NSGA3SubsetGeneticAlgorithm.pop_size"]], "rng (pybrops.opt.algo.nsga3subsetgeneticalgorithm.nsga3subsetgeneticalgorithm property)": [[941, "pybrops.opt.algo.NSGA3SubsetGeneticAlgorithm.NSGA3SubsetGeneticAlgorithm.rng"]], "pybrops.opt.algo.optimizationalgorithm": [[942, "module-pybrops.opt.algo.OptimizationAlgorithm"]], "optimizationalgorithm (class in pybrops.opt.algo.optimizationalgorithm)": [[943, "pybrops.opt.algo.OptimizationAlgorithm.OptimizationAlgorithm"]], "minimize() (pybrops.opt.algo.optimizationalgorithm.optimizationalgorithm method)": [[943, "pybrops.opt.algo.OptimizationAlgorithm.OptimizationAlgorithm.minimize"]], "check_is_optimizationalgorithm() (in module pybrops.opt.algo.optimizationalgorithm)": [[944, "pybrops.opt.algo.OptimizationAlgorithm.check_is_OptimizationAlgorithm"]], "pybrops.opt.algo.realgeneticalgorithm": [[945, "module-pybrops.opt.algo.RealGeneticAlgorithm"]], "realgeneticalgorithm (class in pybrops.opt.algo.realgeneticalgorithm)": [[946, "pybrops.opt.algo.RealGeneticAlgorithm.RealGeneticAlgorithm"]], "minimize() (pybrops.opt.algo.realgeneticalgorithm.realgeneticalgorithm method)": [[946, "pybrops.opt.algo.RealGeneticAlgorithm.RealGeneticAlgorithm.minimize"]], "ngen (pybrops.opt.algo.realgeneticalgorithm.realgeneticalgorithm property)": [[946, "pybrops.opt.algo.RealGeneticAlgorithm.RealGeneticAlgorithm.ngen"]], "pop_size (pybrops.opt.algo.realgeneticalgorithm.realgeneticalgorithm property)": [[946, "pybrops.opt.algo.RealGeneticAlgorithm.RealGeneticAlgorithm.pop_size"]], "rng (pybrops.opt.algo.realgeneticalgorithm.realgeneticalgorithm property)": [[946, "pybrops.opt.algo.RealGeneticAlgorithm.RealGeneticAlgorithm.rng"]], "pybrops.opt.algo.realoptimizationalgorithm": [[947, "module-pybrops.opt.algo.RealOptimizationAlgorithm"]], "realoptimizationalgorithm (class in pybrops.opt.algo.realoptimizationalgorithm)": [[948, "pybrops.opt.algo.RealOptimizationAlgorithm.RealOptimizationAlgorithm"]], "minimize() (pybrops.opt.algo.realoptimizationalgorithm.realoptimizationalgorithm method)": [[948, "pybrops.opt.algo.RealOptimizationAlgorithm.RealOptimizationAlgorithm.minimize"]], "check_is_realoptimizationalgorithm() (in module pybrops.opt.algo.realoptimizationalgorithm)": [[949, "pybrops.opt.algo.RealOptimizationAlgorithm.check_is_RealOptimizationAlgorithm"]], "pybrops.opt.algo.sortingsteepestdescentsubsethillclimber": [[950, "module-pybrops.opt.algo.SortingSteepestDescentSubsetHillClimber"]], "sortingsteepestdescentsubsethillclimber (class in pybrops.opt.algo.sortingsteepestdescentsubsethillclimber)": [[951, "pybrops.opt.algo.SortingSteepestDescentSubsetHillClimber.SortingSteepestDescentSubsetHillClimber"]], "minimize() (pybrops.opt.algo.sortingsteepestdescentsubsethillclimber.sortingsteepestdescentsubsethillclimber method)": [[951, "pybrops.opt.algo.SortingSteepestDescentSubsetHillClimber.SortingSteepestDescentSubsetHillClimber.minimize"]], "pybrops.opt.algo.sortingsubsetoptimizationalgorithm": [[952, "module-pybrops.opt.algo.SortingSubsetOptimizationAlgorithm"]], "sortingsubsetoptimizationalgorithm (class in pybrops.opt.algo.sortingsubsetoptimizationalgorithm)": [[953, "pybrops.opt.algo.SortingSubsetOptimizationAlgorithm.SortingSubsetOptimizationAlgorithm"]], "minimize() (pybrops.opt.algo.sortingsubsetoptimizationalgorithm.sortingsubsetoptimizationalgorithm method)": [[953, "pybrops.opt.algo.SortingSubsetOptimizationAlgorithm.SortingSubsetOptimizationAlgorithm.minimize"]], "pybrops.opt.algo.steepestdescentsubsethillclimber": [[954, "module-pybrops.opt.algo.SteepestDescentSubsetHillClimber"]], "steepestdescentsubsethillclimber (class in pybrops.opt.algo.steepestdescentsubsethillclimber)": [[955, "pybrops.opt.algo.SteepestDescentSubsetHillClimber.SteepestDescentSubsetHillClimber"]], "minimize() (pybrops.opt.algo.steepestdescentsubsethillclimber.steepestdescentsubsethillclimber method)": [[955, "pybrops.opt.algo.SteepestDescentSubsetHillClimber.SteepestDescentSubsetHillClimber.minimize"]], "rng (pybrops.opt.algo.steepestdescentsubsethillclimber.steepestdescentsubsethillclimber property)": [[955, "pybrops.opt.algo.SteepestDescentSubsetHillClimber.SteepestDescentSubsetHillClimber.rng"]], "pybrops.opt.algo.subsetgeneticalgorithm": [[956, "module-pybrops.opt.algo.SubsetGeneticAlgorithm"]], "subsetgeneticalgorithm (class in pybrops.opt.algo.subsetgeneticalgorithm)": [[957, "pybrops.opt.algo.SubsetGeneticAlgorithm.SubsetGeneticAlgorithm"]], "minimize() (pybrops.opt.algo.subsetgeneticalgorithm.subsetgeneticalgorithm method)": [[957, "pybrops.opt.algo.SubsetGeneticAlgorithm.SubsetGeneticAlgorithm.minimize"]], "ngen (pybrops.opt.algo.subsetgeneticalgorithm.subsetgeneticalgorithm property)": [[957, "pybrops.opt.algo.SubsetGeneticAlgorithm.SubsetGeneticAlgorithm.ngen"]], "pop_size (pybrops.opt.algo.subsetgeneticalgorithm.subsetgeneticalgorithm property)": [[957, "pybrops.opt.algo.SubsetGeneticAlgorithm.SubsetGeneticAlgorithm.pop_size"]], "rng (pybrops.opt.algo.subsetgeneticalgorithm.subsetgeneticalgorithm property)": [[957, "pybrops.opt.algo.SubsetGeneticAlgorithm.SubsetGeneticAlgorithm.rng"]], "pybrops.opt.algo.subsetoptimizationalgorithm": [[958, "module-pybrops.opt.algo.SubsetOptimizationAlgorithm"]], "subsetoptimizationalgorithm (class in pybrops.opt.algo.subsetoptimizationalgorithm)": [[959, "pybrops.opt.algo.SubsetOptimizationAlgorithm.SubsetOptimizationAlgorithm"]], "minimize() (pybrops.opt.algo.subsetoptimizationalgorithm.subsetoptimizationalgorithm method)": [[959, "pybrops.opt.algo.SubsetOptimizationAlgorithm.SubsetOptimizationAlgorithm.minimize"]], "check_is_subsetoptimizationalgorithm() (in module pybrops.opt.algo.subsetoptimizationalgorithm)": [[960, "pybrops.opt.algo.SubsetOptimizationAlgorithm.check_is_SubsetOptimizationAlgorithm"]], "pybrops.opt.algo.unconstrainednsga2setgeneticalgorithm": [[961, "module-pybrops.opt.algo.UnconstrainedNSGA2SetGeneticAlgorithm"]], "m (pybrops.opt.algo.unconstrainednsga2setgeneticalgorithm.unconstrainednsga2setgeneticalgorithm property)": [[962, "pybrops.opt.algo.UnconstrainedNSGA2SetGeneticAlgorithm.UnconstrainedNSGA2SetGeneticAlgorithm.M"]], "unconstrainednsga2setgeneticalgorithm (class in pybrops.opt.algo.unconstrainednsga2setgeneticalgorithm)": [[962, "pybrops.opt.algo.UnconstrainedNSGA2SetGeneticAlgorithm.UnconstrainedNSGA2SetGeneticAlgorithm"]], "cxset() (pybrops.opt.algo.unconstrainednsga2setgeneticalgorithm.unconstrainednsga2setgeneticalgorithm method)": [[962, "pybrops.opt.algo.UnconstrainedNSGA2SetGeneticAlgorithm.UnconstrainedNSGA2SetGeneticAlgorithm.cxSet"]], "lamb (pybrops.opt.algo.unconstrainednsga2setgeneticalgorithm.unconstrainednsga2setgeneticalgorithm property)": [[962, "pybrops.opt.algo.UnconstrainedNSGA2SetGeneticAlgorithm.UnconstrainedNSGA2SetGeneticAlgorithm.lamb"]], "mu (pybrops.opt.algo.unconstrainednsga2setgeneticalgorithm.unconstrainednsga2setgeneticalgorithm property)": [[962, "pybrops.opt.algo.UnconstrainedNSGA2SetGeneticAlgorithm.UnconstrainedNSGA2SetGeneticAlgorithm.mu"]], "mutset() (pybrops.opt.algo.unconstrainednsga2setgeneticalgorithm.unconstrainednsga2setgeneticalgorithm method)": [[962, "pybrops.opt.algo.UnconstrainedNSGA2SetGeneticAlgorithm.UnconstrainedNSGA2SetGeneticAlgorithm.mutSet"]], "ngen (pybrops.opt.algo.unconstrainednsga2setgeneticalgorithm.unconstrainednsga2setgeneticalgorithm property)": [[962, "pybrops.opt.algo.UnconstrainedNSGA2SetGeneticAlgorithm.UnconstrainedNSGA2SetGeneticAlgorithm.ngen"]], "optimize() (pybrops.opt.algo.unconstrainednsga2setgeneticalgorithm.unconstrainednsga2setgeneticalgorithm method)": [[962, "pybrops.opt.algo.UnconstrainedNSGA2SetGeneticAlgorithm.UnconstrainedNSGA2SetGeneticAlgorithm.optimize"]], "rng (pybrops.opt.algo.unconstrainednsga2setgeneticalgorithm.unconstrainednsga2setgeneticalgorithm property)": [[962, "pybrops.opt.algo.UnconstrainedNSGA2SetGeneticAlgorithm.UnconstrainedNSGA2SetGeneticAlgorithm.rng"]], "pybrops.opt.algo.unconstrainedoptimizationalgorithm": [[963, "module-pybrops.opt.algo.UnconstrainedOptimizationAlgorithm"]], "unconstrainedoptimizationalgorithm (class in pybrops.opt.algo.unconstrainedoptimizationalgorithm)": [[964, "pybrops.opt.algo.UnconstrainedOptimizationAlgorithm.UnconstrainedOptimizationAlgorithm"]], "optimize() (pybrops.opt.algo.unconstrainedoptimizationalgorithm.unconstrainedoptimizationalgorithm method)": [[964, "pybrops.opt.algo.UnconstrainedOptimizationAlgorithm.UnconstrainedOptimizationAlgorithm.optimize"]], "check_is_optimizationalgorithm() (in module pybrops.opt.algo.unconstrainedoptimizationalgorithm)": [[965, "pybrops.opt.algo.UnconstrainedOptimizationAlgorithm.check_is_OptimizationAlgorithm"]], "pybrops.opt.algo.unconstrainedsetgeneticalgorithm": [[966, "module-pybrops.opt.algo.UnconstrainedSetGeneticAlgorithm"]], "m (pybrops.opt.algo.unconstrainedsetgeneticalgorithm.unconstrainedsetgeneticalgorithm property)": [[967, "pybrops.opt.algo.UnconstrainedSetGeneticAlgorithm.UnconstrainedSetGeneticAlgorithm.M"]], "unconstrainedsetgeneticalgorithm (class in pybrops.opt.algo.unconstrainedsetgeneticalgorithm)": [[967, "pybrops.opt.algo.UnconstrainedSetGeneticAlgorithm.UnconstrainedSetGeneticAlgorithm"]], "cxset() (pybrops.opt.algo.unconstrainedsetgeneticalgorithm.unconstrainedsetgeneticalgorithm method)": [[967, "pybrops.opt.algo.UnconstrainedSetGeneticAlgorithm.UnconstrainedSetGeneticAlgorithm.cxSet"]], "lamb (pybrops.opt.algo.unconstrainedsetgeneticalgorithm.unconstrainedsetgeneticalgorithm property)": [[967, "pybrops.opt.algo.UnconstrainedSetGeneticAlgorithm.UnconstrainedSetGeneticAlgorithm.lamb"]], "mu (pybrops.opt.algo.unconstrainedsetgeneticalgorithm.unconstrainedsetgeneticalgorithm property)": [[967, "pybrops.opt.algo.UnconstrainedSetGeneticAlgorithm.UnconstrainedSetGeneticAlgorithm.mu"]], "mutset() (pybrops.opt.algo.unconstrainedsetgeneticalgorithm.unconstrainedsetgeneticalgorithm method)": [[967, "pybrops.opt.algo.UnconstrainedSetGeneticAlgorithm.UnconstrainedSetGeneticAlgorithm.mutSet"]], "ngen (pybrops.opt.algo.unconstrainedsetgeneticalgorithm.unconstrainedsetgeneticalgorithm property)": [[967, "pybrops.opt.algo.UnconstrainedSetGeneticAlgorithm.UnconstrainedSetGeneticAlgorithm.ngen"]], "optimize() (pybrops.opt.algo.unconstrainedsetgeneticalgorithm.unconstrainedsetgeneticalgorithm method)": [[967, "pybrops.opt.algo.UnconstrainedSetGeneticAlgorithm.UnconstrainedSetGeneticAlgorithm.optimize"]], "rng (pybrops.opt.algo.unconstrainedsetgeneticalgorithm.unconstrainedsetgeneticalgorithm property)": [[967, "pybrops.opt.algo.UnconstrainedSetGeneticAlgorithm.UnconstrainedSetGeneticAlgorithm.rng"]], "pybrops.opt.algo.unconstrainedsteepestascentsethillclimber": [[968, "module-pybrops.opt.algo.UnconstrainedSteepestAscentSetHillClimber"]], "unconstrainedsteepestascentsethillclimber (class in pybrops.opt.algo.unconstrainedsteepestascentsethillclimber)": [[969, "pybrops.opt.algo.UnconstrainedSteepestAscentSetHillClimber.UnconstrainedSteepestAscentSetHillClimber"]], "optimize() (pybrops.opt.algo.unconstrainedsteepestascentsethillclimber.unconstrainedsteepestascentsethillclimber method)": [[969, "pybrops.opt.algo.UnconstrainedSteepestAscentSetHillClimber.UnconstrainedSteepestAscentSetHillClimber.optimize"]], "rng (pybrops.opt.algo.unconstrainedsteepestascentsethillclimber.unconstrainedsteepestascentsethillclimber property)": [[969, "pybrops.opt.algo.UnconstrainedSteepestAscentSetHillClimber.UnconstrainedSteepestAscentSetHillClimber.rng"]], "pybrops.opt.algo.pymoo_addon": [[970, "module-pybrops.opt.algo.pymoo_addon"]], "integerpolynomialmutation (class in pybrops.opt.algo.pymoo_addon)": [[971, "pybrops.opt.algo.pymoo_addon.IntegerPolynomialMutation"]], "__call__() (pybrops.opt.algo.pymoo_addon.integerpolynomialmutation method)": [[971, "pybrops.opt.algo.pymoo_addon.IntegerPolynomialMutation.__call__"]], "integersimulatedbinarycrossover (class in pybrops.opt.algo.pymoo_addon)": [[972, "pybrops.opt.algo.pymoo_addon.IntegerSimulatedBinaryCrossover"]], "__call__() (pybrops.opt.algo.pymoo_addon.integersimulatedbinarycrossover method)": [[972, "pybrops.opt.algo.pymoo_addon.IntegerSimulatedBinaryCrossover.__call__"]], "multiobjectivesteepestdescenthillclimbermutation (class in pybrops.opt.algo.pymoo_addon)": [[973, "pybrops.opt.algo.pymoo_addon.MultiObjectiveSteepestDescentHillClimberMutation"]], "__call__() (pybrops.opt.algo.pymoo_addon.multiobjectivesteepestdescenthillclimbermutation method)": [[973, "pybrops.opt.algo.pymoo_addon.MultiObjectiveSteepestDescentHillClimberMutation.__call__"]], "do() (pybrops.opt.algo.pymoo_addon.multiobjectivesteepestdescenthillclimbermutation method)": [[973, "pybrops.opt.algo.pymoo_addon.MultiObjectiveSteepestDescentHillClimberMutation.do"]], "hillclimb() (pybrops.opt.algo.pymoo_addon.multiobjectivesteepestdescenthillclimbermutation method)": [[973, "pybrops.opt.algo.pymoo_addon.MultiObjectiveSteepestDescentHillClimberMutation.hillclimb"]], "setspace (pybrops.opt.algo.pymoo_addon.multiobjectivesteepestdescenthillclimbermutation property)": [[973, "pybrops.opt.algo.pymoo_addon.MultiObjectiveSteepestDescentHillClimberMutation.setspace"]], "multiobjectivestochasticdescenthillclimbermutation (class in pybrops.opt.algo.pymoo_addon)": [[974, "pybrops.opt.algo.pymoo_addon.MultiObjectiveStochasticDescentHillClimberMutation"]], "__call__() (pybrops.opt.algo.pymoo_addon.multiobjectivestochasticdescenthillclimbermutation method)": [[974, "pybrops.opt.algo.pymoo_addon.MultiObjectiveStochasticDescentHillClimberMutation.__call__"]], "do() (pybrops.opt.algo.pymoo_addon.multiobjectivestochasticdescenthillclimbermutation method)": [[974, "pybrops.opt.algo.pymoo_addon.MultiObjectiveStochasticDescentHillClimberMutation.do"]], "hillclimb() (pybrops.opt.algo.pymoo_addon.multiobjectivestochasticdescenthillclimbermutation method)": [[974, "pybrops.opt.algo.pymoo_addon.MultiObjectiveStochasticDescentHillClimberMutation.hillclimb"]], "setspace (pybrops.opt.algo.pymoo_addon.multiobjectivestochasticdescenthillclimbermutation property)": [[974, "pybrops.opt.algo.pymoo_addon.MultiObjectiveStochasticDescentHillClimberMutation.setspace"]], "multiobjectivestochastichillclimbermutation (class in pybrops.opt.algo.pymoo_addon)": [[975, "pybrops.opt.algo.pymoo_addon.MultiObjectiveStochasticHillClimberMutation"]], "__call__() (pybrops.opt.algo.pymoo_addon.multiobjectivestochastichillclimbermutation method)": [[975, "pybrops.opt.algo.pymoo_addon.MultiObjectiveStochasticHillClimberMutation.__call__"]], "hillclimb() (pybrops.opt.algo.pymoo_addon.multiobjectivestochastichillclimbermutation method)": [[975, "pybrops.opt.algo.pymoo_addon.MultiObjectiveStochasticHillClimberMutation.hillclimb"]], "setspace (pybrops.opt.algo.pymoo_addon.multiobjectivestochastichillclimbermutation property)": [[975, "pybrops.opt.algo.pymoo_addon.MultiObjectiveStochasticHillClimberMutation.setspace"]], "mutatora (class in pybrops.opt.algo.pymoo_addon)": [[976, "pybrops.opt.algo.pymoo_addon.MutatorA"]], "__call__() (pybrops.opt.algo.pymoo_addon.mutatora method)": [[976, "pybrops.opt.algo.pymoo_addon.MutatorA.__call__"]], "hillclimb() (pybrops.opt.algo.pymoo_addon.mutatora method)": [[976, "pybrops.opt.algo.pymoo_addon.MutatorA.hillclimb"]], "reduced_exchange() (pybrops.opt.algo.pymoo_addon.mutatora method)": [[976, "pybrops.opt.algo.pymoo_addon.MutatorA.reduced_exchange"]], "setspace (pybrops.opt.algo.pymoo_addon.mutatora property)": [[976, "pybrops.opt.algo.pymoo_addon.MutatorA.setspace"]], "mutatorb (class in pybrops.opt.algo.pymoo_addon)": [[977, "pybrops.opt.algo.pymoo_addon.MutatorB"]], "__call__() (pybrops.opt.algo.pymoo_addon.mutatorb method)": [[977, "pybrops.opt.algo.pymoo_addon.MutatorB.__call__"]], "hillclimb() (pybrops.opt.algo.pymoo_addon.mutatorb method)": [[977, "pybrops.opt.algo.pymoo_addon.MutatorB.hillclimb"]], "reduced_exchange() (pybrops.opt.algo.pymoo_addon.mutatorb method)": [[977, "pybrops.opt.algo.pymoo_addon.MutatorB.reduced_exchange"]], "setspace (pybrops.opt.algo.pymoo_addon.mutatorb property)": [[977, "pybrops.opt.algo.pymoo_addon.MutatorB.setspace"]], "mutatorf (class in pybrops.opt.algo.pymoo_addon)": [[978, "pybrops.opt.algo.pymoo_addon.MutatorF"]], "__call__() (pybrops.opt.algo.pymoo_addon.mutatorf method)": [[978, "pybrops.opt.algo.pymoo_addon.MutatorF.__call__"]], "hillclimb() (pybrops.opt.algo.pymoo_addon.mutatorf method)": [[978, "pybrops.opt.algo.pymoo_addon.MutatorF.hillclimb"]], "reduced_exchange() (pybrops.opt.algo.pymoo_addon.mutatorf method)": [[978, "pybrops.opt.algo.pymoo_addon.MutatorF.reduced_exchange"]], "setspace (pybrops.opt.algo.pymoo_addon.mutatorf property)": [[978, "pybrops.opt.algo.pymoo_addon.MutatorF.setspace"]], "reducedexchangecrossover (class in pybrops.opt.algo.pymoo_addon)": [[979, "pybrops.opt.algo.pymoo_addon.ReducedExchangeCrossover"]], "__call__() (pybrops.opt.algo.pymoo_addon.reducedexchangecrossover method)": [[979, "pybrops.opt.algo.pymoo_addon.ReducedExchangeCrossover.__call__"]], "reducedexchangemutation (class in pybrops.opt.algo.pymoo_addon)": [[980, "pybrops.opt.algo.pymoo_addon.ReducedExchangeMutation"]], "__call__() (pybrops.opt.algo.pymoo_addon.reducedexchangemutation method)": [[980, "pybrops.opt.algo.pymoo_addon.ReducedExchangeMutation.__call__"]], "setspace (pybrops.opt.algo.pymoo_addon.reducedexchangemutation property)": [[980, "pybrops.opt.algo.pymoo_addon.ReducedExchangeMutation.setspace"]], "stochastichillclimbermutation (class in pybrops.opt.algo.pymoo_addon)": [[981, "pybrops.opt.algo.pymoo_addon.StochasticHillClimberMutation"]], "__call__() (pybrops.opt.algo.pymoo_addon.stochastichillclimbermutation method)": [[981, "pybrops.opt.algo.pymoo_addon.StochasticHillClimberMutation.__call__"]], "hillclimb() (pybrops.opt.algo.pymoo_addon.stochastichillclimbermutation method)": [[981, "pybrops.opt.algo.pymoo_addon.StochasticHillClimberMutation.hillclimb"]], "reduced_exchange() (pybrops.opt.algo.pymoo_addon.stochastichillclimbermutation method)": [[981, "pybrops.opt.algo.pymoo_addon.StochasticHillClimberMutation.reduced_exchange"]], "setspace (pybrops.opt.algo.pymoo_addon.stochastichillclimbermutation property)": [[981, "pybrops.opt.algo.pymoo_addon.StochasticHillClimberMutation.setspace"]], "subsetrandomsampling (class in pybrops.opt.algo.pymoo_addon)": [[982, "pybrops.opt.algo.pymoo_addon.SubsetRandomSampling"]], "__call__() (pybrops.opt.algo.pymoo_addon.subsetrandomsampling method)": [[982, "pybrops.opt.algo.pymoo_addon.SubsetRandomSampling.__call__"]], "do() (pybrops.opt.algo.pymoo_addon.subsetrandomsampling method)": [[982, "pybrops.opt.algo.pymoo_addon.SubsetRandomSampling.do"]], "replace (pybrops.opt.algo.pymoo_addon.subsetrandomsampling property)": [[982, "pybrops.opt.algo.pymoo_addon.SubsetRandomSampling.replace"]], "setspace (pybrops.opt.algo.pymoo_addon.subsetrandomsampling property)": [[982, "pybrops.opt.algo.pymoo_addon.SubsetRandomSampling.setspace"]], "dominates() (in module pybrops.opt.algo.pymoo_addon)": [[983, "pybrops.opt.algo.pymoo_addon.dominates"]], "tiled_choice() (in module pybrops.opt.algo.pymoo_addon)": [[984, "pybrops.opt.algo.pymoo_addon.tiled_choice"]], "pybrops.opt.prob": [[985, "module-pybrops.opt.prob"]], "pybrops.opt.prob.binaryproblem": [[986, "module-pybrops.opt.prob.BinaryProblem"]], "binaryproblem (class in pybrops.opt.prob.binaryproblem)": [[987, "pybrops.opt.prob.BinaryProblem.BinaryProblem"]], "callback (pybrops.opt.prob.binaryproblem.binaryproblem property)": [[987, "pybrops.opt.prob.BinaryProblem.BinaryProblem.callback"]], "data (pybrops.opt.prob.binaryproblem.binaryproblem property)": [[987, "pybrops.opt.prob.BinaryProblem.BinaryProblem.data"]], "decn_space (pybrops.opt.prob.binaryproblem.binaryproblem property)": [[987, "pybrops.opt.prob.BinaryProblem.BinaryProblem.decn_space"]], "decn_space_lower (pybrops.opt.prob.binaryproblem.binaryproblem property)": [[987, "pybrops.opt.prob.BinaryProblem.BinaryProblem.decn_space_lower"]], "decn_space_upper (pybrops.opt.prob.binaryproblem.binaryproblem property)": [[987, "pybrops.opt.prob.BinaryProblem.BinaryProblem.decn_space_upper"]], "elementwise (pybrops.opt.prob.binaryproblem.binaryproblem property)": [[987, "pybrops.opt.prob.BinaryProblem.BinaryProblem.elementwise"]], "elementwise_func (pybrops.opt.prob.binaryproblem.binaryproblem property)": [[987, "pybrops.opt.prob.BinaryProblem.BinaryProblem.elementwise_func"]], "elementwise_runner (pybrops.opt.prob.binaryproblem.binaryproblem property)": [[987, "pybrops.opt.prob.BinaryProblem.BinaryProblem.elementwise_runner"]], "eqcv_wt (pybrops.opt.prob.binaryproblem.binaryproblem property)": [[987, "pybrops.opt.prob.BinaryProblem.BinaryProblem.eqcv_wt"]], "evalfn() (pybrops.opt.prob.binaryproblem.binaryproblem method)": [[987, "pybrops.opt.prob.BinaryProblem.BinaryProblem.evalfn"]], "exclude_from_serialization (pybrops.opt.prob.binaryproblem.binaryproblem property)": [[987, "pybrops.opt.prob.BinaryProblem.BinaryProblem.exclude_from_serialization"]], "ineqcv_wt (pybrops.opt.prob.binaryproblem.binaryproblem property)": [[987, "pybrops.opt.prob.BinaryProblem.BinaryProblem.ineqcv_wt"]], "n_eq_constr (pybrops.opt.prob.binaryproblem.binaryproblem property)": [[987, "pybrops.opt.prob.BinaryProblem.BinaryProblem.n_eq_constr"]], "n_ieq_constr (pybrops.opt.prob.binaryproblem.binaryproblem property)": [[987, "pybrops.opt.prob.BinaryProblem.BinaryProblem.n_ieq_constr"]], "n_obj (pybrops.opt.prob.binaryproblem.binaryproblem property)": [[987, "pybrops.opt.prob.BinaryProblem.BinaryProblem.n_obj"]], "n_var (pybrops.opt.prob.binaryproblem.binaryproblem property)": [[987, "pybrops.opt.prob.BinaryProblem.BinaryProblem.n_var"]], "ndecn (pybrops.opt.prob.binaryproblem.binaryproblem property)": [[987, "pybrops.opt.prob.BinaryProblem.BinaryProblem.ndecn"]], "neqcv (pybrops.opt.prob.binaryproblem.binaryproblem property)": [[987, "pybrops.opt.prob.BinaryProblem.BinaryProblem.neqcv"]], "nineqcv (pybrops.opt.prob.binaryproblem.binaryproblem property)": [[987, "pybrops.opt.prob.BinaryProblem.BinaryProblem.nineqcv"]], "nobj (pybrops.opt.prob.binaryproblem.binaryproblem property)": [[987, "pybrops.opt.prob.BinaryProblem.BinaryProblem.nobj"]], "obj_wt (pybrops.opt.prob.binaryproblem.binaryproblem property)": [[987, "pybrops.opt.prob.BinaryProblem.BinaryProblem.obj_wt"]], "replace_nan_values_by (pybrops.opt.prob.binaryproblem.binaryproblem property)": [[987, "pybrops.opt.prob.BinaryProblem.BinaryProblem.replace_nan_values_by"]], "strict (pybrops.opt.prob.binaryproblem.binaryproblem property)": [[987, "pybrops.opt.prob.BinaryProblem.BinaryProblem.strict"]], "vars (pybrops.opt.prob.binaryproblem.binaryproblem property)": [[987, "pybrops.opt.prob.BinaryProblem.BinaryProblem.vars"]], "vtype (pybrops.opt.prob.binaryproblem.binaryproblem property)": [[987, "pybrops.opt.prob.BinaryProblem.BinaryProblem.vtype"]], "xl (pybrops.opt.prob.binaryproblem.binaryproblem property)": [[987, "pybrops.opt.prob.BinaryProblem.BinaryProblem.xl"]], "xu (pybrops.opt.prob.binaryproblem.binaryproblem property)": [[987, "pybrops.opt.prob.BinaryProblem.BinaryProblem.xu"]], "check_binaryproblem_is_multi_objective() (in module pybrops.opt.prob.binaryproblem)": [[988, "pybrops.opt.prob.BinaryProblem.check_BinaryProblem_is_multi_objective"]], "check_binaryproblem_is_single_objective() (in module pybrops.opt.prob.binaryproblem)": [[989, "pybrops.opt.prob.BinaryProblem.check_BinaryProblem_is_single_objective"]], "check_is_binaryproblem() (in module pybrops.opt.prob.binaryproblem)": [[990, "pybrops.opt.prob.BinaryProblem.check_is_BinaryProblem"]], "pybrops.opt.prob.functionweight": [[991, "module-pybrops.opt.prob.FunctionWeight"]], "functionweight (class in pybrops.opt.prob.functionweight)": [[992, "pybrops.opt.prob.FunctionWeight.FunctionWeight"]], "optimization_type (pybrops.opt.prob.functionweight.functionweight property)": [[992, "pybrops.opt.prob.FunctionWeight.FunctionWeight.optimization_type"]], "wt (pybrops.opt.prob.functionweight.functionweight property)": [[992, "pybrops.opt.prob.FunctionWeight.FunctionWeight.wt"]], "maximizingfunctionweight (class in pybrops.opt.prob.functionweight)": [[993, "pybrops.opt.prob.FunctionWeight.MaximizingFunctionWeight"]], "optimization_type (pybrops.opt.prob.functionweight.maximizingfunctionweight property)": [[993, "pybrops.opt.prob.FunctionWeight.MaximizingFunctionWeight.optimization_type"]], "wt (pybrops.opt.prob.functionweight.maximizingfunctionweight property)": [[993, "pybrops.opt.prob.FunctionWeight.MaximizingFunctionWeight.wt"]], "minimizingfunctionweight (class in pybrops.opt.prob.functionweight)": [[994, "pybrops.opt.prob.FunctionWeight.MinimizingFunctionWeight"]], "optimization_type (pybrops.opt.prob.functionweight.minimizingfunctionweight property)": [[994, "pybrops.opt.prob.FunctionWeight.MinimizingFunctionWeight.optimization_type"]], "wt (pybrops.opt.prob.functionweight.minimizingfunctionweight property)": [[994, "pybrops.opt.prob.FunctionWeight.MinimizingFunctionWeight.wt"]], "pybrops.opt.prob.integerproblem": [[995, "module-pybrops.opt.prob.IntegerProblem"]], "integerproblem (class in pybrops.opt.prob.integerproblem)": [[996, "pybrops.opt.prob.IntegerProblem.IntegerProblem"]], "callback (pybrops.opt.prob.integerproblem.integerproblem property)": [[996, "pybrops.opt.prob.IntegerProblem.IntegerProblem.callback"]], "data (pybrops.opt.prob.integerproblem.integerproblem property)": [[996, "pybrops.opt.prob.IntegerProblem.IntegerProblem.data"]], "decn_space (pybrops.opt.prob.integerproblem.integerproblem property)": [[996, "pybrops.opt.prob.IntegerProblem.IntegerProblem.decn_space"]], "decn_space_lower (pybrops.opt.prob.integerproblem.integerproblem property)": [[996, "pybrops.opt.prob.IntegerProblem.IntegerProblem.decn_space_lower"]], "decn_space_upper (pybrops.opt.prob.integerproblem.integerproblem property)": [[996, "pybrops.opt.prob.IntegerProblem.IntegerProblem.decn_space_upper"]], "elementwise (pybrops.opt.prob.integerproblem.integerproblem property)": [[996, "pybrops.opt.prob.IntegerProblem.IntegerProblem.elementwise"]], "elementwise_func (pybrops.opt.prob.integerproblem.integerproblem property)": [[996, "pybrops.opt.prob.IntegerProblem.IntegerProblem.elementwise_func"]], "elementwise_runner (pybrops.opt.prob.integerproblem.integerproblem property)": [[996, "pybrops.opt.prob.IntegerProblem.IntegerProblem.elementwise_runner"]], "eqcv_wt (pybrops.opt.prob.integerproblem.integerproblem property)": [[996, "pybrops.opt.prob.IntegerProblem.IntegerProblem.eqcv_wt"]], "evalfn() (pybrops.opt.prob.integerproblem.integerproblem method)": [[996, "pybrops.opt.prob.IntegerProblem.IntegerProblem.evalfn"]], "exclude_from_serialization (pybrops.opt.prob.integerproblem.integerproblem property)": [[996, "pybrops.opt.prob.IntegerProblem.IntegerProblem.exclude_from_serialization"]], "ineqcv_wt (pybrops.opt.prob.integerproblem.integerproblem property)": [[996, "pybrops.opt.prob.IntegerProblem.IntegerProblem.ineqcv_wt"]], "n_eq_constr (pybrops.opt.prob.integerproblem.integerproblem property)": [[996, "pybrops.opt.prob.IntegerProblem.IntegerProblem.n_eq_constr"]], "n_ieq_constr (pybrops.opt.prob.integerproblem.integerproblem property)": [[996, "pybrops.opt.prob.IntegerProblem.IntegerProblem.n_ieq_constr"]], "n_obj (pybrops.opt.prob.integerproblem.integerproblem property)": [[996, "pybrops.opt.prob.IntegerProblem.IntegerProblem.n_obj"]], "n_var (pybrops.opt.prob.integerproblem.integerproblem property)": [[996, "pybrops.opt.prob.IntegerProblem.IntegerProblem.n_var"]], "ndecn (pybrops.opt.prob.integerproblem.integerproblem property)": [[996, "pybrops.opt.prob.IntegerProblem.IntegerProblem.ndecn"]], "neqcv (pybrops.opt.prob.integerproblem.integerproblem property)": [[996, "pybrops.opt.prob.IntegerProblem.IntegerProblem.neqcv"]], "nineqcv (pybrops.opt.prob.integerproblem.integerproblem property)": [[996, "pybrops.opt.prob.IntegerProblem.IntegerProblem.nineqcv"]], "nobj (pybrops.opt.prob.integerproblem.integerproblem property)": [[996, "pybrops.opt.prob.IntegerProblem.IntegerProblem.nobj"]], "obj_wt (pybrops.opt.prob.integerproblem.integerproblem property)": [[996, "pybrops.opt.prob.IntegerProblem.IntegerProblem.obj_wt"]], "replace_nan_values_by (pybrops.opt.prob.integerproblem.integerproblem property)": [[996, "pybrops.opt.prob.IntegerProblem.IntegerProblem.replace_nan_values_by"]], "strict (pybrops.opt.prob.integerproblem.integerproblem property)": [[996, "pybrops.opt.prob.IntegerProblem.IntegerProblem.strict"]], "vars (pybrops.opt.prob.integerproblem.integerproblem property)": [[996, "pybrops.opt.prob.IntegerProblem.IntegerProblem.vars"]], "vtype (pybrops.opt.prob.integerproblem.integerproblem property)": [[996, "pybrops.opt.prob.IntegerProblem.IntegerProblem.vtype"]], "xl (pybrops.opt.prob.integerproblem.integerproblem property)": [[996, "pybrops.opt.prob.IntegerProblem.IntegerProblem.xl"]], "xu (pybrops.opt.prob.integerproblem.integerproblem property)": [[996, "pybrops.opt.prob.IntegerProblem.IntegerProblem.xu"]], "check_integerproblem_is_multi_objective() (in module pybrops.opt.prob.integerproblem)": [[997, "pybrops.opt.prob.IntegerProblem.check_IntegerProblem_is_multi_objective"]], "check_integerproblem_is_single_objective() (in module pybrops.opt.prob.integerproblem)": [[998, "pybrops.opt.prob.IntegerProblem.check_IntegerProblem_is_single_objective"]], "check_is_integerproblem() (in module pybrops.opt.prob.integerproblem)": [[999, "pybrops.opt.prob.IntegerProblem.check_is_IntegerProblem"]], "pybrops.opt.prob.problem": [[1000, "module-pybrops.opt.prob.Problem"]], "problem (class in pybrops.opt.prob.problem)": [[1001, "pybrops.opt.prob.Problem.Problem"]], "callback (pybrops.opt.prob.problem.problem property)": [[1001, "pybrops.opt.prob.Problem.Problem.callback"]], "data (pybrops.opt.prob.problem.problem property)": [[1001, "pybrops.opt.prob.Problem.Problem.data"]], "decn_space (pybrops.opt.prob.problem.problem property)": [[1001, "pybrops.opt.prob.Problem.Problem.decn_space"]], "decn_space_lower (pybrops.opt.prob.problem.problem property)": [[1001, "pybrops.opt.prob.Problem.Problem.decn_space_lower"]], "decn_space_upper (pybrops.opt.prob.problem.problem property)": [[1001, "pybrops.opt.prob.Problem.Problem.decn_space_upper"]], "elementwise (pybrops.opt.prob.problem.problem property)": [[1001, "pybrops.opt.prob.Problem.Problem.elementwise"]], "elementwise_func (pybrops.opt.prob.problem.problem property)": [[1001, "pybrops.opt.prob.Problem.Problem.elementwise_func"]], "elementwise_runner (pybrops.opt.prob.problem.problem property)": [[1001, "pybrops.opt.prob.Problem.Problem.elementwise_runner"]], "eqcv_wt (pybrops.opt.prob.problem.problem property)": [[1001, "pybrops.opt.prob.Problem.Problem.eqcv_wt"]], "evalfn() (pybrops.opt.prob.problem.problem method)": [[1001, "pybrops.opt.prob.Problem.Problem.evalfn"]], "exclude_from_serialization (pybrops.opt.prob.problem.problem property)": [[1001, "pybrops.opt.prob.Problem.Problem.exclude_from_serialization"]], "ineqcv_wt (pybrops.opt.prob.problem.problem property)": [[1001, "pybrops.opt.prob.Problem.Problem.ineqcv_wt"]], "n_eq_constr (pybrops.opt.prob.problem.problem property)": [[1001, "pybrops.opt.prob.Problem.Problem.n_eq_constr"]], "n_ieq_constr (pybrops.opt.prob.problem.problem property)": [[1001, "pybrops.opt.prob.Problem.Problem.n_ieq_constr"]], "n_obj (pybrops.opt.prob.problem.problem property)": [[1001, "pybrops.opt.prob.Problem.Problem.n_obj"]], "n_var (pybrops.opt.prob.problem.problem property)": [[1001, "pybrops.opt.prob.Problem.Problem.n_var"]], "ndecn (pybrops.opt.prob.problem.problem property)": [[1001, "pybrops.opt.prob.Problem.Problem.ndecn"]], "neqcv (pybrops.opt.prob.problem.problem property)": [[1001, "pybrops.opt.prob.Problem.Problem.neqcv"]], "nineqcv (pybrops.opt.prob.problem.problem property)": [[1001, "pybrops.opt.prob.Problem.Problem.nineqcv"]], "nobj (pybrops.opt.prob.problem.problem property)": [[1001, "pybrops.opt.prob.Problem.Problem.nobj"]], "obj_wt (pybrops.opt.prob.problem.problem property)": [[1001, "pybrops.opt.prob.Problem.Problem.obj_wt"]], "replace_nan_values_by (pybrops.opt.prob.problem.problem property)": [[1001, "pybrops.opt.prob.Problem.Problem.replace_nan_values_by"]], "strict (pybrops.opt.prob.problem.problem property)": [[1001, "pybrops.opt.prob.Problem.Problem.strict"]], "vars (pybrops.opt.prob.problem.problem property)": [[1001, "pybrops.opt.prob.Problem.Problem.vars"]], "vtype (pybrops.opt.prob.problem.problem property)": [[1001, "pybrops.opt.prob.Problem.Problem.vtype"]], "xl (pybrops.opt.prob.problem.problem property)": [[1001, "pybrops.opt.prob.Problem.Problem.xl"]], "xu (pybrops.opt.prob.problem.problem property)": [[1001, "pybrops.opt.prob.Problem.Problem.xu"]], "check_is_problem() (in module pybrops.opt.prob.problem)": [[1002, "pybrops.opt.prob.Problem.check_is_Problem"]], "pybrops.opt.prob.realproblem": [[1003, "module-pybrops.opt.prob.RealProblem"]], "realproblem (class in pybrops.opt.prob.realproblem)": [[1004, "pybrops.opt.prob.RealProblem.RealProblem"]], "callback (pybrops.opt.prob.realproblem.realproblem property)": [[1004, "pybrops.opt.prob.RealProblem.RealProblem.callback"]], "data (pybrops.opt.prob.realproblem.realproblem property)": [[1004, "pybrops.opt.prob.RealProblem.RealProblem.data"]], "decn_space (pybrops.opt.prob.realproblem.realproblem property)": [[1004, "pybrops.opt.prob.RealProblem.RealProblem.decn_space"]], "decn_space_lower (pybrops.opt.prob.realproblem.realproblem property)": [[1004, "pybrops.opt.prob.RealProblem.RealProblem.decn_space_lower"]], "decn_space_upper (pybrops.opt.prob.realproblem.realproblem property)": [[1004, "pybrops.opt.prob.RealProblem.RealProblem.decn_space_upper"]], "elementwise (pybrops.opt.prob.realproblem.realproblem property)": [[1004, "pybrops.opt.prob.RealProblem.RealProblem.elementwise"]], "elementwise_func (pybrops.opt.prob.realproblem.realproblem property)": [[1004, "pybrops.opt.prob.RealProblem.RealProblem.elementwise_func"]], "elementwise_runner (pybrops.opt.prob.realproblem.realproblem property)": [[1004, "pybrops.opt.prob.RealProblem.RealProblem.elementwise_runner"]], "eqcv_wt (pybrops.opt.prob.realproblem.realproblem property)": [[1004, "pybrops.opt.prob.RealProblem.RealProblem.eqcv_wt"]], "evalfn() (pybrops.opt.prob.realproblem.realproblem method)": [[1004, "pybrops.opt.prob.RealProblem.RealProblem.evalfn"]], "exclude_from_serialization (pybrops.opt.prob.realproblem.realproblem property)": [[1004, "pybrops.opt.prob.RealProblem.RealProblem.exclude_from_serialization"]], "ineqcv_wt (pybrops.opt.prob.realproblem.realproblem property)": [[1004, "pybrops.opt.prob.RealProblem.RealProblem.ineqcv_wt"]], "n_eq_constr (pybrops.opt.prob.realproblem.realproblem property)": [[1004, "pybrops.opt.prob.RealProblem.RealProblem.n_eq_constr"]], "n_ieq_constr (pybrops.opt.prob.realproblem.realproblem property)": [[1004, "pybrops.opt.prob.RealProblem.RealProblem.n_ieq_constr"]], "n_obj (pybrops.opt.prob.realproblem.realproblem property)": [[1004, "pybrops.opt.prob.RealProblem.RealProblem.n_obj"]], "n_var (pybrops.opt.prob.realproblem.realproblem property)": [[1004, "pybrops.opt.prob.RealProblem.RealProblem.n_var"]], "ndecn (pybrops.opt.prob.realproblem.realproblem property)": [[1004, "pybrops.opt.prob.RealProblem.RealProblem.ndecn"]], "neqcv (pybrops.opt.prob.realproblem.realproblem property)": [[1004, "pybrops.opt.prob.RealProblem.RealProblem.neqcv"]], "nineqcv (pybrops.opt.prob.realproblem.realproblem property)": [[1004, "pybrops.opt.prob.RealProblem.RealProblem.nineqcv"]], "nobj (pybrops.opt.prob.realproblem.realproblem property)": [[1004, "pybrops.opt.prob.RealProblem.RealProblem.nobj"]], "obj_wt (pybrops.opt.prob.realproblem.realproblem property)": [[1004, "pybrops.opt.prob.RealProblem.RealProblem.obj_wt"]], "replace_nan_values_by (pybrops.opt.prob.realproblem.realproblem property)": [[1004, "pybrops.opt.prob.RealProblem.RealProblem.replace_nan_values_by"]], "strict (pybrops.opt.prob.realproblem.realproblem property)": [[1004, "pybrops.opt.prob.RealProblem.RealProblem.strict"]], "vars (pybrops.opt.prob.realproblem.realproblem property)": [[1004, "pybrops.opt.prob.RealProblem.RealProblem.vars"]], "vtype (pybrops.opt.prob.realproblem.realproblem property)": [[1004, "pybrops.opt.prob.RealProblem.RealProblem.vtype"]], "xl (pybrops.opt.prob.realproblem.realproblem property)": [[1004, "pybrops.opt.prob.RealProblem.RealProblem.xl"]], "xu (pybrops.opt.prob.realproblem.realproblem property)": [[1004, "pybrops.opt.prob.RealProblem.RealProblem.xu"]], "check_realproblem_is_multi_objective() (in module pybrops.opt.prob.realproblem)": [[1005, "pybrops.opt.prob.RealProblem.check_RealProblem_is_multi_objective"]], "check_realproblem_is_single_objective() (in module pybrops.opt.prob.realproblem)": [[1006, "pybrops.opt.prob.RealProblem.check_RealProblem_is_single_objective"]], "check_is_realproblem() (in module pybrops.opt.prob.realproblem)": [[1007, "pybrops.opt.prob.RealProblem.check_is_RealProblem"]], "pybrops.opt.prob.subsetproblem": [[1008, "module-pybrops.opt.prob.SubsetProblem"]], "subsetproblem (class in pybrops.opt.prob.subsetproblem)": [[1009, "pybrops.opt.prob.SubsetProblem.SubsetProblem"]], "callback (pybrops.opt.prob.subsetproblem.subsetproblem property)": [[1009, "pybrops.opt.prob.SubsetProblem.SubsetProblem.callback"]], "data (pybrops.opt.prob.subsetproblem.subsetproblem property)": [[1009, "pybrops.opt.prob.SubsetProblem.SubsetProblem.data"]], "decn_space (pybrops.opt.prob.subsetproblem.subsetproblem property)": [[1009, "pybrops.opt.prob.SubsetProblem.SubsetProblem.decn_space"]], "decn_space_lower (pybrops.opt.prob.subsetproblem.subsetproblem property)": [[1009, "pybrops.opt.prob.SubsetProblem.SubsetProblem.decn_space_lower"]], "decn_space_upper (pybrops.opt.prob.subsetproblem.subsetproblem property)": [[1009, "pybrops.opt.prob.SubsetProblem.SubsetProblem.decn_space_upper"]], "elementwise (pybrops.opt.prob.subsetproblem.subsetproblem property)": [[1009, "pybrops.opt.prob.SubsetProblem.SubsetProblem.elementwise"]], "elementwise_func (pybrops.opt.prob.subsetproblem.subsetproblem property)": [[1009, "pybrops.opt.prob.SubsetProblem.SubsetProblem.elementwise_func"]], "elementwise_runner (pybrops.opt.prob.subsetproblem.subsetproblem property)": [[1009, "pybrops.opt.prob.SubsetProblem.SubsetProblem.elementwise_runner"]], "eqcv_wt (pybrops.opt.prob.subsetproblem.subsetproblem property)": [[1009, "pybrops.opt.prob.SubsetProblem.SubsetProblem.eqcv_wt"]], "evalfn() (pybrops.opt.prob.subsetproblem.subsetproblem method)": [[1009, "pybrops.opt.prob.SubsetProblem.SubsetProblem.evalfn"]], "exclude_from_serialization (pybrops.opt.prob.subsetproblem.subsetproblem property)": [[1009, "pybrops.opt.prob.SubsetProblem.SubsetProblem.exclude_from_serialization"]], "ineqcv_wt (pybrops.opt.prob.subsetproblem.subsetproblem property)": [[1009, "pybrops.opt.prob.SubsetProblem.SubsetProblem.ineqcv_wt"]], "n_eq_constr (pybrops.opt.prob.subsetproblem.subsetproblem property)": [[1009, "pybrops.opt.prob.SubsetProblem.SubsetProblem.n_eq_constr"]], "n_ieq_constr (pybrops.opt.prob.subsetproblem.subsetproblem property)": [[1009, "pybrops.opt.prob.SubsetProblem.SubsetProblem.n_ieq_constr"]], "n_obj (pybrops.opt.prob.subsetproblem.subsetproblem property)": [[1009, "pybrops.opt.prob.SubsetProblem.SubsetProblem.n_obj"]], "n_var (pybrops.opt.prob.subsetproblem.subsetproblem property)": [[1009, "pybrops.opt.prob.SubsetProblem.SubsetProblem.n_var"]], "ndecn (pybrops.opt.prob.subsetproblem.subsetproblem property)": [[1009, "pybrops.opt.prob.SubsetProblem.SubsetProblem.ndecn"]], "neqcv (pybrops.opt.prob.subsetproblem.subsetproblem property)": [[1009, "pybrops.opt.prob.SubsetProblem.SubsetProblem.neqcv"]], "nineqcv (pybrops.opt.prob.subsetproblem.subsetproblem property)": [[1009, "pybrops.opt.prob.SubsetProblem.SubsetProblem.nineqcv"]], "nobj (pybrops.opt.prob.subsetproblem.subsetproblem property)": [[1009, "pybrops.opt.prob.SubsetProblem.SubsetProblem.nobj"]], "obj_wt (pybrops.opt.prob.subsetproblem.subsetproblem property)": [[1009, "pybrops.opt.prob.SubsetProblem.SubsetProblem.obj_wt"]], "replace_nan_values_by (pybrops.opt.prob.subsetproblem.subsetproblem property)": [[1009, "pybrops.opt.prob.SubsetProblem.SubsetProblem.replace_nan_values_by"]], "strict (pybrops.opt.prob.subsetproblem.subsetproblem property)": [[1009, "pybrops.opt.prob.SubsetProblem.SubsetProblem.strict"]], "vars (pybrops.opt.prob.subsetproblem.subsetproblem property)": [[1009, "pybrops.opt.prob.SubsetProblem.SubsetProblem.vars"]], "vtype (pybrops.opt.prob.subsetproblem.subsetproblem property)": [[1009, "pybrops.opt.prob.SubsetProblem.SubsetProblem.vtype"]], "xl (pybrops.opt.prob.subsetproblem.subsetproblem property)": [[1009, "pybrops.opt.prob.SubsetProblem.SubsetProblem.xl"]], "xu (pybrops.opt.prob.subsetproblem.subsetproblem property)": [[1009, "pybrops.opt.prob.SubsetProblem.SubsetProblem.xu"]], "check_subsetproblem_is_multi_objective() (in module pybrops.opt.prob.subsetproblem)": [[1010, "pybrops.opt.prob.SubsetProblem.check_SubsetProblem_is_multi_objective"]], "check_subsetproblem_is_single_objective() (in module pybrops.opt.prob.subsetproblem)": [[1011, "pybrops.opt.prob.SubsetProblem.check_SubsetProblem_is_single_objective"]], "check_is_subsetproblem() (in module pybrops.opt.prob.subsetproblem)": [[1012, "pybrops.opt.prob.SubsetProblem.check_is_SubsetProblem"]], "pybrops.opt.soln": [[1013, "module-pybrops.opt.soln"]], "pybrops.opt.soln.binarysolution": [[1014, "module-pybrops.opt.soln.BinarySolution"]], "binarysolution (class in pybrops.opt.soln.binarysolution)": [[1015, "pybrops.opt.soln.BinarySolution.BinarySolution"]], "decn_space (pybrops.opt.soln.binarysolution.binarysolution property)": [[1015, "pybrops.opt.soln.BinarySolution.BinarySolution.decn_space"]], "decn_space_lower (pybrops.opt.soln.binarysolution.binarysolution property)": [[1015, "pybrops.opt.soln.BinarySolution.BinarySolution.decn_space_lower"]], "decn_space_upper (pybrops.opt.soln.binarysolution.binarysolution property)": [[1015, "pybrops.opt.soln.BinarySolution.BinarySolution.decn_space_upper"]], "eqcv_wt (pybrops.opt.soln.binarysolution.binarysolution property)": [[1015, "pybrops.opt.soln.BinarySolution.BinarySolution.eqcv_wt"]], "ineqcv_wt (pybrops.opt.soln.binarysolution.binarysolution property)": [[1015, "pybrops.opt.soln.BinarySolution.BinarySolution.ineqcv_wt"]], "ndecn (pybrops.opt.soln.binarysolution.binarysolution property)": [[1015, "pybrops.opt.soln.BinarySolution.BinarySolution.ndecn"]], "neqcv (pybrops.opt.soln.binarysolution.binarysolution property)": [[1015, "pybrops.opt.soln.BinarySolution.BinarySolution.neqcv"]], "nineqcv (pybrops.opt.soln.binarysolution.binarysolution property)": [[1015, "pybrops.opt.soln.BinarySolution.BinarySolution.nineqcv"]], "nobj (pybrops.opt.soln.binarysolution.binarysolution property)": [[1015, "pybrops.opt.soln.BinarySolution.BinarySolution.nobj"]], "nsoln (pybrops.opt.soln.binarysolution.binarysolution property)": [[1015, "pybrops.opt.soln.BinarySolution.BinarySolution.nsoln"]], "obj_wt (pybrops.opt.soln.binarysolution.binarysolution property)": [[1015, "pybrops.opt.soln.BinarySolution.BinarySolution.obj_wt"]], "soln_decn (pybrops.opt.soln.binarysolution.binarysolution property)": [[1015, "pybrops.opt.soln.BinarySolution.BinarySolution.soln_decn"]], "soln_eqcv (pybrops.opt.soln.binarysolution.binarysolution property)": [[1015, "pybrops.opt.soln.BinarySolution.BinarySolution.soln_eqcv"]], "soln_ineqcv (pybrops.opt.soln.binarysolution.binarysolution property)": [[1015, "pybrops.opt.soln.BinarySolution.BinarySolution.soln_ineqcv"]], "soln_obj (pybrops.opt.soln.binarysolution.binarysolution property)": [[1015, "pybrops.opt.soln.BinarySolution.BinarySolution.soln_obj"]], "check_is_binarysolution() (in module pybrops.opt.soln.binarysolution)": [[1016, "pybrops.opt.soln.BinarySolution.check_is_BinarySolution"]], "pybrops.opt.soln.integersolution": [[1017, "module-pybrops.opt.soln.IntegerSolution"]], "integersolution (class in pybrops.opt.soln.integersolution)": [[1018, "pybrops.opt.soln.IntegerSolution.IntegerSolution"]], "decn_space (pybrops.opt.soln.integersolution.integersolution property)": [[1018, "pybrops.opt.soln.IntegerSolution.IntegerSolution.decn_space"]], "decn_space_lower (pybrops.opt.soln.integersolution.integersolution property)": [[1018, "pybrops.opt.soln.IntegerSolution.IntegerSolution.decn_space_lower"]], "decn_space_upper (pybrops.opt.soln.integersolution.integersolution property)": [[1018, "pybrops.opt.soln.IntegerSolution.IntegerSolution.decn_space_upper"]], "eqcv_wt (pybrops.opt.soln.integersolution.integersolution property)": [[1018, "pybrops.opt.soln.IntegerSolution.IntegerSolution.eqcv_wt"]], "ineqcv_wt (pybrops.opt.soln.integersolution.integersolution property)": [[1018, "pybrops.opt.soln.IntegerSolution.IntegerSolution.ineqcv_wt"]], "ndecn (pybrops.opt.soln.integersolution.integersolution property)": [[1018, "pybrops.opt.soln.IntegerSolution.IntegerSolution.ndecn"]], "neqcv (pybrops.opt.soln.integersolution.integersolution property)": [[1018, "pybrops.opt.soln.IntegerSolution.IntegerSolution.neqcv"]], "nineqcv (pybrops.opt.soln.integersolution.integersolution property)": [[1018, "pybrops.opt.soln.IntegerSolution.IntegerSolution.nineqcv"]], "nobj (pybrops.opt.soln.integersolution.integersolution property)": [[1018, "pybrops.opt.soln.IntegerSolution.IntegerSolution.nobj"]], "nsoln (pybrops.opt.soln.integersolution.integersolution property)": [[1018, "pybrops.opt.soln.IntegerSolution.IntegerSolution.nsoln"]], "obj_wt (pybrops.opt.soln.integersolution.integersolution property)": [[1018, "pybrops.opt.soln.IntegerSolution.IntegerSolution.obj_wt"]], "soln_decn (pybrops.opt.soln.integersolution.integersolution property)": [[1018, "pybrops.opt.soln.IntegerSolution.IntegerSolution.soln_decn"]], "soln_eqcv (pybrops.opt.soln.integersolution.integersolution property)": [[1018, "pybrops.opt.soln.IntegerSolution.IntegerSolution.soln_eqcv"]], "soln_ineqcv (pybrops.opt.soln.integersolution.integersolution property)": [[1018, "pybrops.opt.soln.IntegerSolution.IntegerSolution.soln_ineqcv"]], "soln_obj (pybrops.opt.soln.integersolution.integersolution property)": [[1018, "pybrops.opt.soln.IntegerSolution.IntegerSolution.soln_obj"]], "check_is_integersolution() (in module pybrops.opt.soln.integersolution)": [[1019, "pybrops.opt.soln.IntegerSolution.check_is_IntegerSolution"]], "pybrops.opt.soln.realsolution": [[1020, "module-pybrops.opt.soln.RealSolution"]], "realsolution (class in pybrops.opt.soln.realsolution)": [[1021, "pybrops.opt.soln.RealSolution.RealSolution"]], "decn_space (pybrops.opt.soln.realsolution.realsolution property)": [[1021, "pybrops.opt.soln.RealSolution.RealSolution.decn_space"]], "decn_space_lower (pybrops.opt.soln.realsolution.realsolution property)": [[1021, "pybrops.opt.soln.RealSolution.RealSolution.decn_space_lower"]], "decn_space_upper (pybrops.opt.soln.realsolution.realsolution property)": [[1021, "pybrops.opt.soln.RealSolution.RealSolution.decn_space_upper"]], "eqcv_wt (pybrops.opt.soln.realsolution.realsolution property)": [[1021, "pybrops.opt.soln.RealSolution.RealSolution.eqcv_wt"]], "ineqcv_wt (pybrops.opt.soln.realsolution.realsolution property)": [[1021, "pybrops.opt.soln.RealSolution.RealSolution.ineqcv_wt"]], "ndecn (pybrops.opt.soln.realsolution.realsolution property)": [[1021, "pybrops.opt.soln.RealSolution.RealSolution.ndecn"]], "neqcv (pybrops.opt.soln.realsolution.realsolution property)": [[1021, "pybrops.opt.soln.RealSolution.RealSolution.neqcv"]], "nineqcv (pybrops.opt.soln.realsolution.realsolution property)": [[1021, "pybrops.opt.soln.RealSolution.RealSolution.nineqcv"]], "nobj (pybrops.opt.soln.realsolution.realsolution property)": [[1021, "pybrops.opt.soln.RealSolution.RealSolution.nobj"]], "nsoln (pybrops.opt.soln.realsolution.realsolution property)": [[1021, "pybrops.opt.soln.RealSolution.RealSolution.nsoln"]], "obj_wt (pybrops.opt.soln.realsolution.realsolution property)": [[1021, "pybrops.opt.soln.RealSolution.RealSolution.obj_wt"]], "soln_decn (pybrops.opt.soln.realsolution.realsolution property)": [[1021, "pybrops.opt.soln.RealSolution.RealSolution.soln_decn"]], "soln_eqcv (pybrops.opt.soln.realsolution.realsolution property)": [[1021, "pybrops.opt.soln.RealSolution.RealSolution.soln_eqcv"]], "soln_ineqcv (pybrops.opt.soln.realsolution.realsolution property)": [[1021, "pybrops.opt.soln.RealSolution.RealSolution.soln_ineqcv"]], "soln_obj (pybrops.opt.soln.realsolution.realsolution property)": [[1021, "pybrops.opt.soln.RealSolution.RealSolution.soln_obj"]], "check_is_realsolution() (in module pybrops.opt.soln.realsolution)": [[1022, "pybrops.opt.soln.RealSolution.check_is_RealSolution"]], "pybrops.opt.soln.solution": [[1023, "module-pybrops.opt.soln.Solution"]], "solution (class in pybrops.opt.soln.solution)": [[1024, "pybrops.opt.soln.Solution.Solution"]], "decn_space (pybrops.opt.soln.solution.solution property)": [[1024, "pybrops.opt.soln.Solution.Solution.decn_space"]], "decn_space_lower (pybrops.opt.soln.solution.solution property)": [[1024, "pybrops.opt.soln.Solution.Solution.decn_space_lower"]], "decn_space_upper (pybrops.opt.soln.solution.solution property)": [[1024, "pybrops.opt.soln.Solution.Solution.decn_space_upper"]], "eqcv_wt (pybrops.opt.soln.solution.solution property)": [[1024, "pybrops.opt.soln.Solution.Solution.eqcv_wt"]], "ineqcv_wt (pybrops.opt.soln.solution.solution property)": [[1024, "pybrops.opt.soln.Solution.Solution.ineqcv_wt"]], "ndecn (pybrops.opt.soln.solution.solution property)": [[1024, "pybrops.opt.soln.Solution.Solution.ndecn"]], "neqcv (pybrops.opt.soln.solution.solution property)": [[1024, "pybrops.opt.soln.Solution.Solution.neqcv"]], "nineqcv (pybrops.opt.soln.solution.solution property)": [[1024, "pybrops.opt.soln.Solution.Solution.nineqcv"]], "nobj (pybrops.opt.soln.solution.solution property)": [[1024, "pybrops.opt.soln.Solution.Solution.nobj"]], "nsoln (pybrops.opt.soln.solution.solution property)": [[1024, "pybrops.opt.soln.Solution.Solution.nsoln"]], "obj_wt (pybrops.opt.soln.solution.solution property)": [[1024, "pybrops.opt.soln.Solution.Solution.obj_wt"]], "soln_decn (pybrops.opt.soln.solution.solution property)": [[1024, "pybrops.opt.soln.Solution.Solution.soln_decn"]], "soln_eqcv (pybrops.opt.soln.solution.solution property)": [[1024, "pybrops.opt.soln.Solution.Solution.soln_eqcv"]], "soln_ineqcv (pybrops.opt.soln.solution.solution property)": [[1024, "pybrops.opt.soln.Solution.Solution.soln_ineqcv"]], "soln_obj (pybrops.opt.soln.solution.solution property)": [[1024, "pybrops.opt.soln.Solution.Solution.soln_obj"]], "check_is_solution() (in module pybrops.opt.soln.solution)": [[1025, "pybrops.opt.soln.Solution.check_is_Solution"]], "pybrops.opt.soln.subsetsolution": [[1026, "module-pybrops.opt.soln.SubsetSolution"]], "subsetsolution (class in pybrops.opt.soln.subsetsolution)": [[1027, "pybrops.opt.soln.SubsetSolution.SubsetSolution"]], "decn_space (pybrops.opt.soln.subsetsolution.subsetsolution property)": [[1027, "pybrops.opt.soln.SubsetSolution.SubsetSolution.decn_space"]], "decn_space_lower (pybrops.opt.soln.subsetsolution.subsetsolution property)": [[1027, "pybrops.opt.soln.SubsetSolution.SubsetSolution.decn_space_lower"]], "decn_space_upper (pybrops.opt.soln.subsetsolution.subsetsolution property)": [[1027, "pybrops.opt.soln.SubsetSolution.SubsetSolution.decn_space_upper"]], "eqcv_wt (pybrops.opt.soln.subsetsolution.subsetsolution property)": [[1027, "pybrops.opt.soln.SubsetSolution.SubsetSolution.eqcv_wt"]], "ineqcv_wt (pybrops.opt.soln.subsetsolution.subsetsolution property)": [[1027, "pybrops.opt.soln.SubsetSolution.SubsetSolution.ineqcv_wt"]], "ndecn (pybrops.opt.soln.subsetsolution.subsetsolution property)": [[1027, "pybrops.opt.soln.SubsetSolution.SubsetSolution.ndecn"]], "neqcv (pybrops.opt.soln.subsetsolution.subsetsolution property)": [[1027, "pybrops.opt.soln.SubsetSolution.SubsetSolution.neqcv"]], "nineqcv (pybrops.opt.soln.subsetsolution.subsetsolution property)": [[1027, "pybrops.opt.soln.SubsetSolution.SubsetSolution.nineqcv"]], "nobj (pybrops.opt.soln.subsetsolution.subsetsolution property)": [[1027, "pybrops.opt.soln.SubsetSolution.SubsetSolution.nobj"]], "nsoln (pybrops.opt.soln.subsetsolution.subsetsolution property)": [[1027, "pybrops.opt.soln.SubsetSolution.SubsetSolution.nsoln"]], "obj_wt (pybrops.opt.soln.subsetsolution.subsetsolution property)": [[1027, "pybrops.opt.soln.SubsetSolution.SubsetSolution.obj_wt"]], "soln_decn (pybrops.opt.soln.subsetsolution.subsetsolution property)": [[1027, "pybrops.opt.soln.SubsetSolution.SubsetSolution.soln_decn"]], "soln_eqcv (pybrops.opt.soln.subsetsolution.subsetsolution property)": [[1027, "pybrops.opt.soln.SubsetSolution.SubsetSolution.soln_eqcv"]], "soln_ineqcv (pybrops.opt.soln.subsetsolution.subsetsolution property)": [[1027, "pybrops.opt.soln.SubsetSolution.SubsetSolution.soln_ineqcv"]], "soln_obj (pybrops.opt.soln.subsetsolution.subsetsolution property)": [[1027, "pybrops.opt.soln.SubsetSolution.SubsetSolution.soln_obj"]], "check_is_subsetsolution() (in module pybrops.opt.soln.subsetsolution)": [[1028, "pybrops.opt.soln.SubsetSolution.check_is_SubsetSolution"]], "pybrops.popgen": [[1029, "module-pybrops.popgen"]], "pybrops.popgen.bvmat": [[1030, "module-pybrops.popgen.bvmat"]], "pybrops.popgen.bvmat.breedingvaluematrix": [[1031, "module-pybrops.popgen.bvmat.BreedingValueMatrix"]], "breedingvaluematrix (class in pybrops.popgen.bvmat.breedingvaluematrix)": [[1032, "pybrops.popgen.bvmat.BreedingValueMatrix.BreedingValueMatrix"]], "__add__() (pybrops.popgen.bvmat.breedingvaluematrix.breedingvaluematrix method)": [[1032, "pybrops.popgen.bvmat.BreedingValueMatrix.BreedingValueMatrix.__add__"]], "__mul__() (pybrops.popgen.bvmat.breedingvaluematrix.breedingvaluematrix method)": [[1032, "pybrops.popgen.bvmat.BreedingValueMatrix.BreedingValueMatrix.__mul__"]], "adjoin() (pybrops.popgen.bvmat.breedingvaluematrix.breedingvaluematrix method)": [[1032, "pybrops.popgen.bvmat.BreedingValueMatrix.BreedingValueMatrix.adjoin"]], "adjoin_taxa() (pybrops.popgen.bvmat.breedingvaluematrix.breedingvaluematrix method)": [[1032, "pybrops.popgen.bvmat.BreedingValueMatrix.BreedingValueMatrix.adjoin_taxa"]], "adjoin_trait() (pybrops.popgen.bvmat.breedingvaluematrix.breedingvaluematrix method)": [[1032, "pybrops.popgen.bvmat.BreedingValueMatrix.BreedingValueMatrix.adjoin_trait"]], "append() (pybrops.popgen.bvmat.breedingvaluematrix.breedingvaluematrix method)": [[1032, "pybrops.popgen.bvmat.BreedingValueMatrix.BreedingValueMatrix.append"]], "append_taxa() (pybrops.popgen.bvmat.breedingvaluematrix.breedingvaluematrix method)": [[1032, "pybrops.popgen.bvmat.BreedingValueMatrix.BreedingValueMatrix.append_taxa"]], "append_trait() (pybrops.popgen.bvmat.breedingvaluematrix.breedingvaluematrix method)": [[1032, "pybrops.popgen.bvmat.BreedingValueMatrix.BreedingValueMatrix.append_trait"]], "concat() (pybrops.popgen.bvmat.breedingvaluematrix.breedingvaluematrix class method)": [[1032, "pybrops.popgen.bvmat.BreedingValueMatrix.BreedingValueMatrix.concat"]], "concat_taxa() (pybrops.popgen.bvmat.breedingvaluematrix.breedingvaluematrix class method)": [[1032, "pybrops.popgen.bvmat.BreedingValueMatrix.BreedingValueMatrix.concat_taxa"]], "concat_trait() (pybrops.popgen.bvmat.breedingvaluematrix.breedingvaluematrix class method)": [[1032, "pybrops.popgen.bvmat.BreedingValueMatrix.BreedingValueMatrix.concat_trait"]], "copy() (pybrops.popgen.bvmat.breedingvaluematrix.breedingvaluematrix method)": [[1032, "pybrops.popgen.bvmat.BreedingValueMatrix.BreedingValueMatrix.copy"]], "deepcopy() (pybrops.popgen.bvmat.breedingvaluematrix.breedingvaluematrix method)": [[1032, "pybrops.popgen.bvmat.BreedingValueMatrix.BreedingValueMatrix.deepcopy"]], "delete() (pybrops.popgen.bvmat.breedingvaluematrix.breedingvaluematrix method)": [[1032, "pybrops.popgen.bvmat.BreedingValueMatrix.BreedingValueMatrix.delete"]], "delete_taxa() (pybrops.popgen.bvmat.breedingvaluematrix.breedingvaluematrix method)": [[1032, "pybrops.popgen.bvmat.BreedingValueMatrix.BreedingValueMatrix.delete_taxa"]], "delete_trait() (pybrops.popgen.bvmat.breedingvaluematrix.breedingvaluematrix method)": [[1032, "pybrops.popgen.bvmat.BreedingValueMatrix.BreedingValueMatrix.delete_trait"]], "from_csv() (pybrops.popgen.bvmat.breedingvaluematrix.breedingvaluematrix class method)": [[1032, "pybrops.popgen.bvmat.BreedingValueMatrix.BreedingValueMatrix.from_csv"]], "from_hdf5() (pybrops.popgen.bvmat.breedingvaluematrix.breedingvaluematrix class method)": [[1032, "pybrops.popgen.bvmat.BreedingValueMatrix.BreedingValueMatrix.from_hdf5"]], "from_pandas() (pybrops.popgen.bvmat.breedingvaluematrix.breedingvaluematrix class method)": [[1032, "pybrops.popgen.bvmat.BreedingValueMatrix.BreedingValueMatrix.from_pandas"]], "group() (pybrops.popgen.bvmat.breedingvaluematrix.breedingvaluematrix method)": [[1032, "pybrops.popgen.bvmat.BreedingValueMatrix.BreedingValueMatrix.group"]], "group_taxa() (pybrops.popgen.bvmat.breedingvaluematrix.breedingvaluematrix method)": [[1032, "pybrops.popgen.bvmat.BreedingValueMatrix.BreedingValueMatrix.group_taxa"]], "incorp() (pybrops.popgen.bvmat.breedingvaluematrix.breedingvaluematrix method)": [[1032, "pybrops.popgen.bvmat.BreedingValueMatrix.BreedingValueMatrix.incorp"]], "incorp_taxa() (pybrops.popgen.bvmat.breedingvaluematrix.breedingvaluematrix method)": [[1032, "pybrops.popgen.bvmat.BreedingValueMatrix.BreedingValueMatrix.incorp_taxa"]], "incorp_trait() (pybrops.popgen.bvmat.breedingvaluematrix.breedingvaluematrix method)": [[1032, "pybrops.popgen.bvmat.BreedingValueMatrix.BreedingValueMatrix.incorp_trait"]], "insert() (pybrops.popgen.bvmat.breedingvaluematrix.breedingvaluematrix method)": [[1032, "pybrops.popgen.bvmat.BreedingValueMatrix.BreedingValueMatrix.insert"]], "insert_taxa() (pybrops.popgen.bvmat.breedingvaluematrix.breedingvaluematrix method)": [[1032, "pybrops.popgen.bvmat.BreedingValueMatrix.BreedingValueMatrix.insert_taxa"]], "insert_trait() (pybrops.popgen.bvmat.breedingvaluematrix.breedingvaluematrix method)": [[1032, "pybrops.popgen.bvmat.BreedingValueMatrix.BreedingValueMatrix.insert_trait"]], "is_grouped() (pybrops.popgen.bvmat.breedingvaluematrix.breedingvaluematrix method)": [[1032, "pybrops.popgen.bvmat.BreedingValueMatrix.BreedingValueMatrix.is_grouped"]], "is_grouped_taxa() (pybrops.popgen.bvmat.breedingvaluematrix.breedingvaluematrix method)": [[1032, "pybrops.popgen.bvmat.BreedingValueMatrix.BreedingValueMatrix.is_grouped_taxa"]], "lexsort() (pybrops.popgen.bvmat.breedingvaluematrix.breedingvaluematrix method)": [[1032, "pybrops.popgen.bvmat.BreedingValueMatrix.BreedingValueMatrix.lexsort"]], "lexsort_taxa() (pybrops.popgen.bvmat.breedingvaluematrix.breedingvaluematrix method)": [[1032, "pybrops.popgen.bvmat.BreedingValueMatrix.BreedingValueMatrix.lexsort_taxa"]], "lexsort_trait() (pybrops.popgen.bvmat.breedingvaluematrix.breedingvaluematrix method)": [[1032, "pybrops.popgen.bvmat.BreedingValueMatrix.BreedingValueMatrix.lexsort_trait"]], "location (pybrops.popgen.bvmat.breedingvaluematrix.breedingvaluematrix property)": [[1032, "pybrops.popgen.bvmat.BreedingValueMatrix.BreedingValueMatrix.location"]], "mat (pybrops.popgen.bvmat.breedingvaluematrix.breedingvaluematrix property)": [[1032, "pybrops.popgen.bvmat.BreedingValueMatrix.BreedingValueMatrix.mat"]], "mat_ndim (pybrops.popgen.bvmat.breedingvaluematrix.breedingvaluematrix property)": [[1032, "pybrops.popgen.bvmat.BreedingValueMatrix.BreedingValueMatrix.mat_ndim"]], "mat_shape (pybrops.popgen.bvmat.breedingvaluematrix.breedingvaluematrix property)": [[1032, "pybrops.popgen.bvmat.BreedingValueMatrix.BreedingValueMatrix.mat_shape"]], "ntaxa (pybrops.popgen.bvmat.breedingvaluematrix.breedingvaluematrix property)": [[1032, "pybrops.popgen.bvmat.BreedingValueMatrix.BreedingValueMatrix.ntaxa"]], "ntrait (pybrops.popgen.bvmat.breedingvaluematrix.breedingvaluematrix property)": [[1032, "pybrops.popgen.bvmat.BreedingValueMatrix.BreedingValueMatrix.ntrait"]], "remove() (pybrops.popgen.bvmat.breedingvaluematrix.breedingvaluematrix method)": [[1032, "pybrops.popgen.bvmat.BreedingValueMatrix.BreedingValueMatrix.remove"]], "remove_taxa() (pybrops.popgen.bvmat.breedingvaluematrix.breedingvaluematrix method)": [[1032, "pybrops.popgen.bvmat.BreedingValueMatrix.BreedingValueMatrix.remove_taxa"]], "remove_trait() (pybrops.popgen.bvmat.breedingvaluematrix.breedingvaluematrix method)": [[1032, "pybrops.popgen.bvmat.BreedingValueMatrix.BreedingValueMatrix.remove_trait"]], "reorder() (pybrops.popgen.bvmat.breedingvaluematrix.breedingvaluematrix method)": [[1032, "pybrops.popgen.bvmat.BreedingValueMatrix.BreedingValueMatrix.reorder"]], "reorder_taxa() (pybrops.popgen.bvmat.breedingvaluematrix.breedingvaluematrix method)": [[1032, "pybrops.popgen.bvmat.BreedingValueMatrix.BreedingValueMatrix.reorder_taxa"]], "reorder_trait() (pybrops.popgen.bvmat.breedingvaluematrix.breedingvaluematrix method)": [[1032, "pybrops.popgen.bvmat.BreedingValueMatrix.BreedingValueMatrix.reorder_trait"]], "scale (pybrops.popgen.bvmat.breedingvaluematrix.breedingvaluematrix property)": [[1032, "pybrops.popgen.bvmat.BreedingValueMatrix.BreedingValueMatrix.scale"]], "select() (pybrops.popgen.bvmat.breedingvaluematrix.breedingvaluematrix method)": [[1032, "pybrops.popgen.bvmat.BreedingValueMatrix.BreedingValueMatrix.select"]], "select_taxa() (pybrops.popgen.bvmat.breedingvaluematrix.breedingvaluematrix method)": [[1032, "pybrops.popgen.bvmat.BreedingValueMatrix.BreedingValueMatrix.select_taxa"]], "select_trait() (pybrops.popgen.bvmat.breedingvaluematrix.breedingvaluematrix method)": [[1032, "pybrops.popgen.bvmat.BreedingValueMatrix.BreedingValueMatrix.select_trait"]], "sort() (pybrops.popgen.bvmat.breedingvaluematrix.breedingvaluematrix method)": [[1032, "pybrops.popgen.bvmat.BreedingValueMatrix.BreedingValueMatrix.sort"]], "sort_taxa() (pybrops.popgen.bvmat.breedingvaluematrix.breedingvaluematrix method)": [[1032, "pybrops.popgen.bvmat.BreedingValueMatrix.BreedingValueMatrix.sort_taxa"]], "sort_trait() (pybrops.popgen.bvmat.breedingvaluematrix.breedingvaluematrix method)": [[1032, "pybrops.popgen.bvmat.BreedingValueMatrix.BreedingValueMatrix.sort_trait"]], "targmax() (pybrops.popgen.bvmat.breedingvaluematrix.breedingvaluematrix method)": [[1032, "pybrops.popgen.bvmat.BreedingValueMatrix.BreedingValueMatrix.targmax"]], "targmin() (pybrops.popgen.bvmat.breedingvaluematrix.breedingvaluematrix method)": [[1032, "pybrops.popgen.bvmat.BreedingValueMatrix.BreedingValueMatrix.targmin"]], "taxa (pybrops.popgen.bvmat.breedingvaluematrix.breedingvaluematrix property)": [[1032, "pybrops.popgen.bvmat.BreedingValueMatrix.BreedingValueMatrix.taxa"]], "taxa_axis (pybrops.popgen.bvmat.breedingvaluematrix.breedingvaluematrix property)": [[1032, "pybrops.popgen.bvmat.BreedingValueMatrix.BreedingValueMatrix.taxa_axis"]], "taxa_grp (pybrops.popgen.bvmat.breedingvaluematrix.breedingvaluematrix property)": [[1032, "pybrops.popgen.bvmat.BreedingValueMatrix.BreedingValueMatrix.taxa_grp"]], "taxa_grp_len (pybrops.popgen.bvmat.breedingvaluematrix.breedingvaluematrix property)": [[1032, "pybrops.popgen.bvmat.BreedingValueMatrix.BreedingValueMatrix.taxa_grp_len"]], "taxa_grp_name (pybrops.popgen.bvmat.breedingvaluematrix.breedingvaluematrix property)": [[1032, "pybrops.popgen.bvmat.BreedingValueMatrix.BreedingValueMatrix.taxa_grp_name"]], "taxa_grp_spix (pybrops.popgen.bvmat.breedingvaluematrix.breedingvaluematrix property)": [[1032, "pybrops.popgen.bvmat.BreedingValueMatrix.BreedingValueMatrix.taxa_grp_spix"]], "taxa_grp_stix (pybrops.popgen.bvmat.breedingvaluematrix.breedingvaluematrix property)": [[1032, "pybrops.popgen.bvmat.BreedingValueMatrix.BreedingValueMatrix.taxa_grp_stix"]], "tmax() (pybrops.popgen.bvmat.breedingvaluematrix.breedingvaluematrix method)": [[1032, "pybrops.popgen.bvmat.BreedingValueMatrix.BreedingValueMatrix.tmax"]], "tmean() (pybrops.popgen.bvmat.breedingvaluematrix.breedingvaluematrix method)": [[1032, "pybrops.popgen.bvmat.BreedingValueMatrix.BreedingValueMatrix.tmean"]], "tmin() (pybrops.popgen.bvmat.breedingvaluematrix.breedingvaluematrix method)": [[1032, "pybrops.popgen.bvmat.BreedingValueMatrix.BreedingValueMatrix.tmin"]], "to_csv() (pybrops.popgen.bvmat.breedingvaluematrix.breedingvaluematrix method)": [[1032, "pybrops.popgen.bvmat.BreedingValueMatrix.BreedingValueMatrix.to_csv"]], "to_hdf5() (pybrops.popgen.bvmat.breedingvaluematrix.breedingvaluematrix method)": [[1032, "pybrops.popgen.bvmat.BreedingValueMatrix.BreedingValueMatrix.to_hdf5"]], "to_pandas() (pybrops.popgen.bvmat.breedingvaluematrix.breedingvaluematrix method)": [[1032, "pybrops.popgen.bvmat.BreedingValueMatrix.BreedingValueMatrix.to_pandas"]], "trait (pybrops.popgen.bvmat.breedingvaluematrix.breedingvaluematrix property)": [[1032, "pybrops.popgen.bvmat.BreedingValueMatrix.BreedingValueMatrix.trait"]], "trait_axis (pybrops.popgen.bvmat.breedingvaluematrix.breedingvaluematrix property)": [[1032, "pybrops.popgen.bvmat.BreedingValueMatrix.BreedingValueMatrix.trait_axis"]], "trange() (pybrops.popgen.bvmat.breedingvaluematrix.breedingvaluematrix method)": [[1032, "pybrops.popgen.bvmat.BreedingValueMatrix.BreedingValueMatrix.trange"]], "tstd() (pybrops.popgen.bvmat.breedingvaluematrix.breedingvaluematrix method)": [[1032, "pybrops.popgen.bvmat.BreedingValueMatrix.BreedingValueMatrix.tstd"]], "tvar() (pybrops.popgen.bvmat.breedingvaluematrix.breedingvaluematrix method)": [[1032, "pybrops.popgen.bvmat.BreedingValueMatrix.BreedingValueMatrix.tvar"]], "ungroup() (pybrops.popgen.bvmat.breedingvaluematrix.breedingvaluematrix method)": [[1032, "pybrops.popgen.bvmat.BreedingValueMatrix.BreedingValueMatrix.ungroup"]], "ungroup_taxa() (pybrops.popgen.bvmat.breedingvaluematrix.breedingvaluematrix method)": [[1032, "pybrops.popgen.bvmat.BreedingValueMatrix.BreedingValueMatrix.ungroup_taxa"]], "unscale() (pybrops.popgen.bvmat.breedingvaluematrix.breedingvaluematrix method)": [[1032, "pybrops.popgen.bvmat.BreedingValueMatrix.BreedingValueMatrix.unscale"]], "check_is_breedingvaluematrix() (in module pybrops.popgen.bvmat.breedingvaluematrix)": [[1033, "pybrops.popgen.bvmat.BreedingValueMatrix.check_is_BreedingValueMatrix"]], "pybrops.popgen.bvmat.densebreedingvaluematrix": [[1034, "module-pybrops.popgen.bvmat.DenseBreedingValueMatrix"]], "densebreedingvaluematrix (class in pybrops.popgen.bvmat.densebreedingvaluematrix)": [[1035, "pybrops.popgen.bvmat.DenseBreedingValueMatrix.DenseBreedingValueMatrix"]], "__add__() (pybrops.popgen.bvmat.densebreedingvaluematrix.densebreedingvaluematrix method)": [[1035, "pybrops.popgen.bvmat.DenseBreedingValueMatrix.DenseBreedingValueMatrix.__add__"]], "__mul__() (pybrops.popgen.bvmat.densebreedingvaluematrix.densebreedingvaluematrix method)": [[1035, "pybrops.popgen.bvmat.DenseBreedingValueMatrix.DenseBreedingValueMatrix.__mul__"]], "adjoin() (pybrops.popgen.bvmat.densebreedingvaluematrix.densebreedingvaluematrix method)": [[1035, "pybrops.popgen.bvmat.DenseBreedingValueMatrix.DenseBreedingValueMatrix.adjoin"]], "adjoin_taxa() (pybrops.popgen.bvmat.densebreedingvaluematrix.densebreedingvaluematrix method)": [[1035, "pybrops.popgen.bvmat.DenseBreedingValueMatrix.DenseBreedingValueMatrix.adjoin_taxa"]], "adjoin_trait() (pybrops.popgen.bvmat.densebreedingvaluematrix.densebreedingvaluematrix method)": [[1035, "pybrops.popgen.bvmat.DenseBreedingValueMatrix.DenseBreedingValueMatrix.adjoin_trait"]], "append() (pybrops.popgen.bvmat.densebreedingvaluematrix.densebreedingvaluematrix method)": [[1035, "pybrops.popgen.bvmat.DenseBreedingValueMatrix.DenseBreedingValueMatrix.append"]], "append_taxa() (pybrops.popgen.bvmat.densebreedingvaluematrix.densebreedingvaluematrix method)": [[1035, "pybrops.popgen.bvmat.DenseBreedingValueMatrix.DenseBreedingValueMatrix.append_taxa"]], "append_trait() (pybrops.popgen.bvmat.densebreedingvaluematrix.densebreedingvaluematrix method)": [[1035, "pybrops.popgen.bvmat.DenseBreedingValueMatrix.DenseBreedingValueMatrix.append_trait"]], "concat() (pybrops.popgen.bvmat.densebreedingvaluematrix.densebreedingvaluematrix class method)": [[1035, "pybrops.popgen.bvmat.DenseBreedingValueMatrix.DenseBreedingValueMatrix.concat"]], "concat_taxa() (pybrops.popgen.bvmat.densebreedingvaluematrix.densebreedingvaluematrix class method)": [[1035, "pybrops.popgen.bvmat.DenseBreedingValueMatrix.DenseBreedingValueMatrix.concat_taxa"]], "concat_trait() (pybrops.popgen.bvmat.densebreedingvaluematrix.densebreedingvaluematrix class method)": [[1035, "pybrops.popgen.bvmat.DenseBreedingValueMatrix.DenseBreedingValueMatrix.concat_trait"]], "copy() (pybrops.popgen.bvmat.densebreedingvaluematrix.densebreedingvaluematrix method)": [[1035, "pybrops.popgen.bvmat.DenseBreedingValueMatrix.DenseBreedingValueMatrix.copy"]], "deepcopy() (pybrops.popgen.bvmat.densebreedingvaluematrix.densebreedingvaluematrix method)": [[1035, "pybrops.popgen.bvmat.DenseBreedingValueMatrix.DenseBreedingValueMatrix.deepcopy"]], "delete() (pybrops.popgen.bvmat.densebreedingvaluematrix.densebreedingvaluematrix method)": [[1035, "pybrops.popgen.bvmat.DenseBreedingValueMatrix.DenseBreedingValueMatrix.delete"]], "delete_taxa() (pybrops.popgen.bvmat.densebreedingvaluematrix.densebreedingvaluematrix method)": [[1035, "pybrops.popgen.bvmat.DenseBreedingValueMatrix.DenseBreedingValueMatrix.delete_taxa"]], "delete_trait() (pybrops.popgen.bvmat.densebreedingvaluematrix.densebreedingvaluematrix method)": [[1035, "pybrops.popgen.bvmat.DenseBreedingValueMatrix.DenseBreedingValueMatrix.delete_trait"]], "from_csv() (pybrops.popgen.bvmat.densebreedingvaluematrix.densebreedingvaluematrix class method)": [[1035, "pybrops.popgen.bvmat.DenseBreedingValueMatrix.DenseBreedingValueMatrix.from_csv"]], "from_hdf5() (pybrops.popgen.bvmat.densebreedingvaluematrix.densebreedingvaluematrix class method)": [[1035, "pybrops.popgen.bvmat.DenseBreedingValueMatrix.DenseBreedingValueMatrix.from_hdf5"]], "from_numpy() (pybrops.popgen.bvmat.densebreedingvaluematrix.densebreedingvaluematrix class method)": [[1035, "pybrops.popgen.bvmat.DenseBreedingValueMatrix.DenseBreedingValueMatrix.from_numpy"]], "from_pandas() (pybrops.popgen.bvmat.densebreedingvaluematrix.densebreedingvaluematrix class method)": [[1035, "pybrops.popgen.bvmat.DenseBreedingValueMatrix.DenseBreedingValueMatrix.from_pandas"]], "group() (pybrops.popgen.bvmat.densebreedingvaluematrix.densebreedingvaluematrix method)": [[1035, "pybrops.popgen.bvmat.DenseBreedingValueMatrix.DenseBreedingValueMatrix.group"]], "group_taxa() (pybrops.popgen.bvmat.densebreedingvaluematrix.densebreedingvaluematrix method)": [[1035, "pybrops.popgen.bvmat.DenseBreedingValueMatrix.DenseBreedingValueMatrix.group_taxa"]], "incorp() (pybrops.popgen.bvmat.densebreedingvaluematrix.densebreedingvaluematrix method)": [[1035, "pybrops.popgen.bvmat.DenseBreedingValueMatrix.DenseBreedingValueMatrix.incorp"]], "incorp_taxa() (pybrops.popgen.bvmat.densebreedingvaluematrix.densebreedingvaluematrix method)": [[1035, "pybrops.popgen.bvmat.DenseBreedingValueMatrix.DenseBreedingValueMatrix.incorp_taxa"]], "incorp_trait() (pybrops.popgen.bvmat.densebreedingvaluematrix.densebreedingvaluematrix method)": [[1035, "pybrops.popgen.bvmat.DenseBreedingValueMatrix.DenseBreedingValueMatrix.incorp_trait"]], "insert() (pybrops.popgen.bvmat.densebreedingvaluematrix.densebreedingvaluematrix method)": [[1035, "pybrops.popgen.bvmat.DenseBreedingValueMatrix.DenseBreedingValueMatrix.insert"]], "insert_taxa() (pybrops.popgen.bvmat.densebreedingvaluematrix.densebreedingvaluematrix method)": [[1035, "pybrops.popgen.bvmat.DenseBreedingValueMatrix.DenseBreedingValueMatrix.insert_taxa"]], "insert_trait() (pybrops.popgen.bvmat.densebreedingvaluematrix.densebreedingvaluematrix method)": [[1035, "pybrops.popgen.bvmat.DenseBreedingValueMatrix.DenseBreedingValueMatrix.insert_trait"]], "is_grouped() (pybrops.popgen.bvmat.densebreedingvaluematrix.densebreedingvaluematrix method)": [[1035, "pybrops.popgen.bvmat.DenseBreedingValueMatrix.DenseBreedingValueMatrix.is_grouped"]], "is_grouped_taxa() (pybrops.popgen.bvmat.densebreedingvaluematrix.densebreedingvaluematrix method)": [[1035, "pybrops.popgen.bvmat.DenseBreedingValueMatrix.DenseBreedingValueMatrix.is_grouped_taxa"]], "lexsort() (pybrops.popgen.bvmat.densebreedingvaluematrix.densebreedingvaluematrix method)": [[1035, "pybrops.popgen.bvmat.DenseBreedingValueMatrix.DenseBreedingValueMatrix.lexsort"]], "lexsort_taxa() (pybrops.popgen.bvmat.densebreedingvaluematrix.densebreedingvaluematrix method)": [[1035, "pybrops.popgen.bvmat.DenseBreedingValueMatrix.DenseBreedingValueMatrix.lexsort_taxa"]], "lexsort_trait() (pybrops.popgen.bvmat.densebreedingvaluematrix.densebreedingvaluematrix method)": [[1035, "pybrops.popgen.bvmat.DenseBreedingValueMatrix.DenseBreedingValueMatrix.lexsort_trait"]], "location (pybrops.popgen.bvmat.densebreedingvaluematrix.densebreedingvaluematrix property)": [[1035, "pybrops.popgen.bvmat.DenseBreedingValueMatrix.DenseBreedingValueMatrix.location"]], "mat (pybrops.popgen.bvmat.densebreedingvaluematrix.densebreedingvaluematrix property)": [[1035, "pybrops.popgen.bvmat.DenseBreedingValueMatrix.DenseBreedingValueMatrix.mat"]], "mat_ndim (pybrops.popgen.bvmat.densebreedingvaluematrix.densebreedingvaluematrix property)": [[1035, "pybrops.popgen.bvmat.DenseBreedingValueMatrix.DenseBreedingValueMatrix.mat_ndim"]], "mat_shape (pybrops.popgen.bvmat.densebreedingvaluematrix.densebreedingvaluematrix property)": [[1035, "pybrops.popgen.bvmat.DenseBreedingValueMatrix.DenseBreedingValueMatrix.mat_shape"]], "ntaxa (pybrops.popgen.bvmat.densebreedingvaluematrix.densebreedingvaluematrix property)": [[1035, "pybrops.popgen.bvmat.DenseBreedingValueMatrix.DenseBreedingValueMatrix.ntaxa"]], "ntrait (pybrops.popgen.bvmat.densebreedingvaluematrix.densebreedingvaluematrix property)": [[1035, "pybrops.popgen.bvmat.DenseBreedingValueMatrix.DenseBreedingValueMatrix.ntrait"]], "remove() (pybrops.popgen.bvmat.densebreedingvaluematrix.densebreedingvaluematrix method)": [[1035, "pybrops.popgen.bvmat.DenseBreedingValueMatrix.DenseBreedingValueMatrix.remove"]], "remove_taxa() (pybrops.popgen.bvmat.densebreedingvaluematrix.densebreedingvaluematrix method)": [[1035, "pybrops.popgen.bvmat.DenseBreedingValueMatrix.DenseBreedingValueMatrix.remove_taxa"]], "remove_trait() (pybrops.popgen.bvmat.densebreedingvaluematrix.densebreedingvaluematrix method)": [[1035, "pybrops.popgen.bvmat.DenseBreedingValueMatrix.DenseBreedingValueMatrix.remove_trait"]], "reorder() (pybrops.popgen.bvmat.densebreedingvaluematrix.densebreedingvaluematrix method)": [[1035, "pybrops.popgen.bvmat.DenseBreedingValueMatrix.DenseBreedingValueMatrix.reorder"]], "reorder_taxa() (pybrops.popgen.bvmat.densebreedingvaluematrix.densebreedingvaluematrix method)": [[1035, "pybrops.popgen.bvmat.DenseBreedingValueMatrix.DenseBreedingValueMatrix.reorder_taxa"]], "reorder_trait() (pybrops.popgen.bvmat.densebreedingvaluematrix.densebreedingvaluematrix method)": [[1035, "pybrops.popgen.bvmat.DenseBreedingValueMatrix.DenseBreedingValueMatrix.reorder_trait"]], "scale (pybrops.popgen.bvmat.densebreedingvaluematrix.densebreedingvaluematrix property)": [[1035, "pybrops.popgen.bvmat.DenseBreedingValueMatrix.DenseBreedingValueMatrix.scale"]], "select() (pybrops.popgen.bvmat.densebreedingvaluematrix.densebreedingvaluematrix method)": [[1035, "pybrops.popgen.bvmat.DenseBreedingValueMatrix.DenseBreedingValueMatrix.select"]], "select_taxa() (pybrops.popgen.bvmat.densebreedingvaluematrix.densebreedingvaluematrix method)": [[1035, "pybrops.popgen.bvmat.DenseBreedingValueMatrix.DenseBreedingValueMatrix.select_taxa"]], "select_trait() (pybrops.popgen.bvmat.densebreedingvaluematrix.densebreedingvaluematrix method)": [[1035, "pybrops.popgen.bvmat.DenseBreedingValueMatrix.DenseBreedingValueMatrix.select_trait"]], "sort() (pybrops.popgen.bvmat.densebreedingvaluematrix.densebreedingvaluematrix method)": [[1035, "pybrops.popgen.bvmat.DenseBreedingValueMatrix.DenseBreedingValueMatrix.sort"]], "sort_taxa() (pybrops.popgen.bvmat.densebreedingvaluematrix.densebreedingvaluematrix method)": [[1035, "pybrops.popgen.bvmat.DenseBreedingValueMatrix.DenseBreedingValueMatrix.sort_taxa"]], "sort_trait() (pybrops.popgen.bvmat.densebreedingvaluematrix.densebreedingvaluematrix method)": [[1035, "pybrops.popgen.bvmat.DenseBreedingValueMatrix.DenseBreedingValueMatrix.sort_trait"]], "targmax() (pybrops.popgen.bvmat.densebreedingvaluematrix.densebreedingvaluematrix method)": [[1035, "pybrops.popgen.bvmat.DenseBreedingValueMatrix.DenseBreedingValueMatrix.targmax"]], "targmin() (pybrops.popgen.bvmat.densebreedingvaluematrix.densebreedingvaluematrix method)": [[1035, "pybrops.popgen.bvmat.DenseBreedingValueMatrix.DenseBreedingValueMatrix.targmin"]], "taxa (pybrops.popgen.bvmat.densebreedingvaluematrix.densebreedingvaluematrix property)": [[1035, "pybrops.popgen.bvmat.DenseBreedingValueMatrix.DenseBreedingValueMatrix.taxa"]], "taxa_axis (pybrops.popgen.bvmat.densebreedingvaluematrix.densebreedingvaluematrix property)": [[1035, "pybrops.popgen.bvmat.DenseBreedingValueMatrix.DenseBreedingValueMatrix.taxa_axis"]], "taxa_grp (pybrops.popgen.bvmat.densebreedingvaluematrix.densebreedingvaluematrix property)": [[1035, "pybrops.popgen.bvmat.DenseBreedingValueMatrix.DenseBreedingValueMatrix.taxa_grp"]], "taxa_grp_len (pybrops.popgen.bvmat.densebreedingvaluematrix.densebreedingvaluematrix property)": [[1035, "pybrops.popgen.bvmat.DenseBreedingValueMatrix.DenseBreedingValueMatrix.taxa_grp_len"]], "taxa_grp_name (pybrops.popgen.bvmat.densebreedingvaluematrix.densebreedingvaluematrix property)": [[1035, "pybrops.popgen.bvmat.DenseBreedingValueMatrix.DenseBreedingValueMatrix.taxa_grp_name"]], "taxa_grp_spix (pybrops.popgen.bvmat.densebreedingvaluematrix.densebreedingvaluematrix property)": [[1035, "pybrops.popgen.bvmat.DenseBreedingValueMatrix.DenseBreedingValueMatrix.taxa_grp_spix"]], "taxa_grp_stix (pybrops.popgen.bvmat.densebreedingvaluematrix.densebreedingvaluematrix property)": [[1035, "pybrops.popgen.bvmat.DenseBreedingValueMatrix.DenseBreedingValueMatrix.taxa_grp_stix"]], "tmax() (pybrops.popgen.bvmat.densebreedingvaluematrix.densebreedingvaluematrix method)": [[1035, "pybrops.popgen.bvmat.DenseBreedingValueMatrix.DenseBreedingValueMatrix.tmax"]], "tmean() (pybrops.popgen.bvmat.densebreedingvaluematrix.densebreedingvaluematrix method)": [[1035, "pybrops.popgen.bvmat.DenseBreedingValueMatrix.DenseBreedingValueMatrix.tmean"]], "tmin() (pybrops.popgen.bvmat.densebreedingvaluematrix.densebreedingvaluematrix method)": [[1035, "pybrops.popgen.bvmat.DenseBreedingValueMatrix.DenseBreedingValueMatrix.tmin"]], "to_csv() (pybrops.popgen.bvmat.densebreedingvaluematrix.densebreedingvaluematrix method)": [[1035, "pybrops.popgen.bvmat.DenseBreedingValueMatrix.DenseBreedingValueMatrix.to_csv"]], "to_hdf5() (pybrops.popgen.bvmat.densebreedingvaluematrix.densebreedingvaluematrix method)": [[1035, "pybrops.popgen.bvmat.DenseBreedingValueMatrix.DenseBreedingValueMatrix.to_hdf5"]], "to_pandas() (pybrops.popgen.bvmat.densebreedingvaluematrix.densebreedingvaluematrix method)": [[1035, "pybrops.popgen.bvmat.DenseBreedingValueMatrix.DenseBreedingValueMatrix.to_pandas"]], "trait (pybrops.popgen.bvmat.densebreedingvaluematrix.densebreedingvaluematrix property)": [[1035, "pybrops.popgen.bvmat.DenseBreedingValueMatrix.DenseBreedingValueMatrix.trait"]], "trait_axis (pybrops.popgen.bvmat.densebreedingvaluematrix.densebreedingvaluematrix property)": [[1035, "pybrops.popgen.bvmat.DenseBreedingValueMatrix.DenseBreedingValueMatrix.trait_axis"]], "trange() (pybrops.popgen.bvmat.densebreedingvaluematrix.densebreedingvaluematrix method)": [[1035, "pybrops.popgen.bvmat.DenseBreedingValueMatrix.DenseBreedingValueMatrix.trange"]], "tstd() (pybrops.popgen.bvmat.densebreedingvaluematrix.densebreedingvaluematrix method)": [[1035, "pybrops.popgen.bvmat.DenseBreedingValueMatrix.DenseBreedingValueMatrix.tstd"]], "tvar() (pybrops.popgen.bvmat.densebreedingvaluematrix.densebreedingvaluematrix method)": [[1035, "pybrops.popgen.bvmat.DenseBreedingValueMatrix.DenseBreedingValueMatrix.tvar"]], "ungroup() (pybrops.popgen.bvmat.densebreedingvaluematrix.densebreedingvaluematrix method)": [[1035, "pybrops.popgen.bvmat.DenseBreedingValueMatrix.DenseBreedingValueMatrix.ungroup"]], "ungroup_taxa() (pybrops.popgen.bvmat.densebreedingvaluematrix.densebreedingvaluematrix method)": [[1035, "pybrops.popgen.bvmat.DenseBreedingValueMatrix.DenseBreedingValueMatrix.ungroup_taxa"]], "unscale() (pybrops.popgen.bvmat.densebreedingvaluematrix.densebreedingvaluematrix method)": [[1035, "pybrops.popgen.bvmat.DenseBreedingValueMatrix.DenseBreedingValueMatrix.unscale"]], "check_is_densebreedingvaluematrix() (in module pybrops.popgen.bvmat.densebreedingvaluematrix)": [[1036, "pybrops.popgen.bvmat.DenseBreedingValueMatrix.check_is_DenseBreedingValueMatrix"]], "pybrops.popgen.bvmat.denseestimatedbreedingvaluematrix": [[1037, "module-pybrops.popgen.bvmat.DenseEstimatedBreedingValueMatrix"]], "denseestimatedbreedingvaluematrix (class in pybrops.popgen.bvmat.denseestimatedbreedingvaluematrix)": [[1038, "pybrops.popgen.bvmat.DenseEstimatedBreedingValueMatrix.DenseEstimatedBreedingValueMatrix"]], "__add__() (pybrops.popgen.bvmat.denseestimatedbreedingvaluematrix.denseestimatedbreedingvaluematrix method)": [[1038, "pybrops.popgen.bvmat.DenseEstimatedBreedingValueMatrix.DenseEstimatedBreedingValueMatrix.__add__"]], "__mul__() (pybrops.popgen.bvmat.denseestimatedbreedingvaluematrix.denseestimatedbreedingvaluematrix method)": [[1038, "pybrops.popgen.bvmat.DenseEstimatedBreedingValueMatrix.DenseEstimatedBreedingValueMatrix.__mul__"]], "adjoin() (pybrops.popgen.bvmat.denseestimatedbreedingvaluematrix.denseestimatedbreedingvaluematrix method)": [[1038, "pybrops.popgen.bvmat.DenseEstimatedBreedingValueMatrix.DenseEstimatedBreedingValueMatrix.adjoin"]], "adjoin_taxa() (pybrops.popgen.bvmat.denseestimatedbreedingvaluematrix.denseestimatedbreedingvaluematrix method)": [[1038, "pybrops.popgen.bvmat.DenseEstimatedBreedingValueMatrix.DenseEstimatedBreedingValueMatrix.adjoin_taxa"]], "adjoin_trait() (pybrops.popgen.bvmat.denseestimatedbreedingvaluematrix.denseestimatedbreedingvaluematrix method)": [[1038, "pybrops.popgen.bvmat.DenseEstimatedBreedingValueMatrix.DenseEstimatedBreedingValueMatrix.adjoin_trait"]], "append() (pybrops.popgen.bvmat.denseestimatedbreedingvaluematrix.denseestimatedbreedingvaluematrix method)": [[1038, "pybrops.popgen.bvmat.DenseEstimatedBreedingValueMatrix.DenseEstimatedBreedingValueMatrix.append"]], "append_taxa() (pybrops.popgen.bvmat.denseestimatedbreedingvaluematrix.denseestimatedbreedingvaluematrix method)": [[1038, "pybrops.popgen.bvmat.DenseEstimatedBreedingValueMatrix.DenseEstimatedBreedingValueMatrix.append_taxa"]], "append_trait() (pybrops.popgen.bvmat.denseestimatedbreedingvaluematrix.denseestimatedbreedingvaluematrix method)": [[1038, "pybrops.popgen.bvmat.DenseEstimatedBreedingValueMatrix.DenseEstimatedBreedingValueMatrix.append_trait"]], "concat() (pybrops.popgen.bvmat.denseestimatedbreedingvaluematrix.denseestimatedbreedingvaluematrix class method)": [[1038, "pybrops.popgen.bvmat.DenseEstimatedBreedingValueMatrix.DenseEstimatedBreedingValueMatrix.concat"]], "concat_taxa() (pybrops.popgen.bvmat.denseestimatedbreedingvaluematrix.denseestimatedbreedingvaluematrix class method)": [[1038, "pybrops.popgen.bvmat.DenseEstimatedBreedingValueMatrix.DenseEstimatedBreedingValueMatrix.concat_taxa"]], "concat_trait() (pybrops.popgen.bvmat.denseestimatedbreedingvaluematrix.denseestimatedbreedingvaluematrix class method)": [[1038, "pybrops.popgen.bvmat.DenseEstimatedBreedingValueMatrix.DenseEstimatedBreedingValueMatrix.concat_trait"]], "copy() (pybrops.popgen.bvmat.denseestimatedbreedingvaluematrix.denseestimatedbreedingvaluematrix method)": [[1038, "pybrops.popgen.bvmat.DenseEstimatedBreedingValueMatrix.DenseEstimatedBreedingValueMatrix.copy"]], "deepcopy() (pybrops.popgen.bvmat.denseestimatedbreedingvaluematrix.denseestimatedbreedingvaluematrix method)": [[1038, "pybrops.popgen.bvmat.DenseEstimatedBreedingValueMatrix.DenseEstimatedBreedingValueMatrix.deepcopy"]], "delete() (pybrops.popgen.bvmat.denseestimatedbreedingvaluematrix.denseestimatedbreedingvaluematrix method)": [[1038, "pybrops.popgen.bvmat.DenseEstimatedBreedingValueMatrix.DenseEstimatedBreedingValueMatrix.delete"]], "delete_taxa() (pybrops.popgen.bvmat.denseestimatedbreedingvaluematrix.denseestimatedbreedingvaluematrix method)": [[1038, "pybrops.popgen.bvmat.DenseEstimatedBreedingValueMatrix.DenseEstimatedBreedingValueMatrix.delete_taxa"]], "delete_trait() (pybrops.popgen.bvmat.denseestimatedbreedingvaluematrix.denseestimatedbreedingvaluematrix method)": [[1038, "pybrops.popgen.bvmat.DenseEstimatedBreedingValueMatrix.DenseEstimatedBreedingValueMatrix.delete_trait"]], "from_csv() (pybrops.popgen.bvmat.denseestimatedbreedingvaluematrix.denseestimatedbreedingvaluematrix class method)": [[1038, "pybrops.popgen.bvmat.DenseEstimatedBreedingValueMatrix.DenseEstimatedBreedingValueMatrix.from_csv"]], "from_hdf5() (pybrops.popgen.bvmat.denseestimatedbreedingvaluematrix.denseestimatedbreedingvaluematrix class method)": [[1038, "pybrops.popgen.bvmat.DenseEstimatedBreedingValueMatrix.DenseEstimatedBreedingValueMatrix.from_hdf5"]], "from_numpy() (pybrops.popgen.bvmat.denseestimatedbreedingvaluematrix.denseestimatedbreedingvaluematrix class method)": [[1038, "pybrops.popgen.bvmat.DenseEstimatedBreedingValueMatrix.DenseEstimatedBreedingValueMatrix.from_numpy"]], "from_pandas() (pybrops.popgen.bvmat.denseestimatedbreedingvaluematrix.denseestimatedbreedingvaluematrix class method)": [[1038, "pybrops.popgen.bvmat.DenseEstimatedBreedingValueMatrix.DenseEstimatedBreedingValueMatrix.from_pandas"]], "group() (pybrops.popgen.bvmat.denseestimatedbreedingvaluematrix.denseestimatedbreedingvaluematrix method)": [[1038, "pybrops.popgen.bvmat.DenseEstimatedBreedingValueMatrix.DenseEstimatedBreedingValueMatrix.group"]], "group_taxa() (pybrops.popgen.bvmat.denseestimatedbreedingvaluematrix.denseestimatedbreedingvaluematrix method)": [[1038, "pybrops.popgen.bvmat.DenseEstimatedBreedingValueMatrix.DenseEstimatedBreedingValueMatrix.group_taxa"]], "incorp() (pybrops.popgen.bvmat.denseestimatedbreedingvaluematrix.denseestimatedbreedingvaluematrix method)": [[1038, "pybrops.popgen.bvmat.DenseEstimatedBreedingValueMatrix.DenseEstimatedBreedingValueMatrix.incorp"]], "incorp_taxa() (pybrops.popgen.bvmat.denseestimatedbreedingvaluematrix.denseestimatedbreedingvaluematrix method)": [[1038, "pybrops.popgen.bvmat.DenseEstimatedBreedingValueMatrix.DenseEstimatedBreedingValueMatrix.incorp_taxa"]], "incorp_trait() (pybrops.popgen.bvmat.denseestimatedbreedingvaluematrix.denseestimatedbreedingvaluematrix method)": [[1038, "pybrops.popgen.bvmat.DenseEstimatedBreedingValueMatrix.DenseEstimatedBreedingValueMatrix.incorp_trait"]], "insert() (pybrops.popgen.bvmat.denseestimatedbreedingvaluematrix.denseestimatedbreedingvaluematrix method)": [[1038, "pybrops.popgen.bvmat.DenseEstimatedBreedingValueMatrix.DenseEstimatedBreedingValueMatrix.insert"]], "insert_taxa() (pybrops.popgen.bvmat.denseestimatedbreedingvaluematrix.denseestimatedbreedingvaluematrix method)": [[1038, "pybrops.popgen.bvmat.DenseEstimatedBreedingValueMatrix.DenseEstimatedBreedingValueMatrix.insert_taxa"]], "insert_trait() (pybrops.popgen.bvmat.denseestimatedbreedingvaluematrix.denseestimatedbreedingvaluematrix method)": [[1038, "pybrops.popgen.bvmat.DenseEstimatedBreedingValueMatrix.DenseEstimatedBreedingValueMatrix.insert_trait"]], "is_grouped() (pybrops.popgen.bvmat.denseestimatedbreedingvaluematrix.denseestimatedbreedingvaluematrix method)": [[1038, "pybrops.popgen.bvmat.DenseEstimatedBreedingValueMatrix.DenseEstimatedBreedingValueMatrix.is_grouped"]], "is_grouped_taxa() (pybrops.popgen.bvmat.denseestimatedbreedingvaluematrix.denseestimatedbreedingvaluematrix method)": [[1038, "pybrops.popgen.bvmat.DenseEstimatedBreedingValueMatrix.DenseEstimatedBreedingValueMatrix.is_grouped_taxa"]], "lexsort() (pybrops.popgen.bvmat.denseestimatedbreedingvaluematrix.denseestimatedbreedingvaluematrix method)": [[1038, "pybrops.popgen.bvmat.DenseEstimatedBreedingValueMatrix.DenseEstimatedBreedingValueMatrix.lexsort"]], "lexsort_taxa() (pybrops.popgen.bvmat.denseestimatedbreedingvaluematrix.denseestimatedbreedingvaluematrix method)": [[1038, "pybrops.popgen.bvmat.DenseEstimatedBreedingValueMatrix.DenseEstimatedBreedingValueMatrix.lexsort_taxa"]], "lexsort_trait() (pybrops.popgen.bvmat.denseestimatedbreedingvaluematrix.denseestimatedbreedingvaluematrix method)": [[1038, "pybrops.popgen.bvmat.DenseEstimatedBreedingValueMatrix.DenseEstimatedBreedingValueMatrix.lexsort_trait"]], "location (pybrops.popgen.bvmat.denseestimatedbreedingvaluematrix.denseestimatedbreedingvaluematrix property)": [[1038, "pybrops.popgen.bvmat.DenseEstimatedBreedingValueMatrix.DenseEstimatedBreedingValueMatrix.location"]], "mat (pybrops.popgen.bvmat.denseestimatedbreedingvaluematrix.denseestimatedbreedingvaluematrix property)": [[1038, "pybrops.popgen.bvmat.DenseEstimatedBreedingValueMatrix.DenseEstimatedBreedingValueMatrix.mat"]], "mat_ndim (pybrops.popgen.bvmat.denseestimatedbreedingvaluematrix.denseestimatedbreedingvaluematrix property)": [[1038, "pybrops.popgen.bvmat.DenseEstimatedBreedingValueMatrix.DenseEstimatedBreedingValueMatrix.mat_ndim"]], "mat_shape (pybrops.popgen.bvmat.denseestimatedbreedingvaluematrix.denseestimatedbreedingvaluematrix property)": [[1038, "pybrops.popgen.bvmat.DenseEstimatedBreedingValueMatrix.DenseEstimatedBreedingValueMatrix.mat_shape"]], "ntaxa (pybrops.popgen.bvmat.denseestimatedbreedingvaluematrix.denseestimatedbreedingvaluematrix property)": [[1038, "pybrops.popgen.bvmat.DenseEstimatedBreedingValueMatrix.DenseEstimatedBreedingValueMatrix.ntaxa"]], "ntrait (pybrops.popgen.bvmat.denseestimatedbreedingvaluematrix.denseestimatedbreedingvaluematrix property)": [[1038, "pybrops.popgen.bvmat.DenseEstimatedBreedingValueMatrix.DenseEstimatedBreedingValueMatrix.ntrait"]], "remove() (pybrops.popgen.bvmat.denseestimatedbreedingvaluematrix.denseestimatedbreedingvaluematrix method)": [[1038, "pybrops.popgen.bvmat.DenseEstimatedBreedingValueMatrix.DenseEstimatedBreedingValueMatrix.remove"]], "remove_taxa() (pybrops.popgen.bvmat.denseestimatedbreedingvaluematrix.denseestimatedbreedingvaluematrix method)": [[1038, "pybrops.popgen.bvmat.DenseEstimatedBreedingValueMatrix.DenseEstimatedBreedingValueMatrix.remove_taxa"]], "remove_trait() (pybrops.popgen.bvmat.denseestimatedbreedingvaluematrix.denseestimatedbreedingvaluematrix method)": [[1038, "pybrops.popgen.bvmat.DenseEstimatedBreedingValueMatrix.DenseEstimatedBreedingValueMatrix.remove_trait"]], "reorder() (pybrops.popgen.bvmat.denseestimatedbreedingvaluematrix.denseestimatedbreedingvaluematrix method)": [[1038, "pybrops.popgen.bvmat.DenseEstimatedBreedingValueMatrix.DenseEstimatedBreedingValueMatrix.reorder"]], "reorder_taxa() (pybrops.popgen.bvmat.denseestimatedbreedingvaluematrix.denseestimatedbreedingvaluematrix method)": [[1038, "pybrops.popgen.bvmat.DenseEstimatedBreedingValueMatrix.DenseEstimatedBreedingValueMatrix.reorder_taxa"]], "reorder_trait() (pybrops.popgen.bvmat.denseestimatedbreedingvaluematrix.denseestimatedbreedingvaluematrix method)": [[1038, "pybrops.popgen.bvmat.DenseEstimatedBreedingValueMatrix.DenseEstimatedBreedingValueMatrix.reorder_trait"]], "scale (pybrops.popgen.bvmat.denseestimatedbreedingvaluematrix.denseestimatedbreedingvaluematrix property)": [[1038, "pybrops.popgen.bvmat.DenseEstimatedBreedingValueMatrix.DenseEstimatedBreedingValueMatrix.scale"]], "select() (pybrops.popgen.bvmat.denseestimatedbreedingvaluematrix.denseestimatedbreedingvaluematrix method)": [[1038, "pybrops.popgen.bvmat.DenseEstimatedBreedingValueMatrix.DenseEstimatedBreedingValueMatrix.select"]], "select_taxa() (pybrops.popgen.bvmat.denseestimatedbreedingvaluematrix.denseestimatedbreedingvaluematrix method)": [[1038, "pybrops.popgen.bvmat.DenseEstimatedBreedingValueMatrix.DenseEstimatedBreedingValueMatrix.select_taxa"]], "select_trait() (pybrops.popgen.bvmat.denseestimatedbreedingvaluematrix.denseestimatedbreedingvaluematrix method)": [[1038, "pybrops.popgen.bvmat.DenseEstimatedBreedingValueMatrix.DenseEstimatedBreedingValueMatrix.select_trait"]], "sort() (pybrops.popgen.bvmat.denseestimatedbreedingvaluematrix.denseestimatedbreedingvaluematrix method)": [[1038, "pybrops.popgen.bvmat.DenseEstimatedBreedingValueMatrix.DenseEstimatedBreedingValueMatrix.sort"]], "sort_taxa() (pybrops.popgen.bvmat.denseestimatedbreedingvaluematrix.denseestimatedbreedingvaluematrix method)": [[1038, "pybrops.popgen.bvmat.DenseEstimatedBreedingValueMatrix.DenseEstimatedBreedingValueMatrix.sort_taxa"]], "sort_trait() (pybrops.popgen.bvmat.denseestimatedbreedingvaluematrix.denseestimatedbreedingvaluematrix method)": [[1038, "pybrops.popgen.bvmat.DenseEstimatedBreedingValueMatrix.DenseEstimatedBreedingValueMatrix.sort_trait"]], "targmax() (pybrops.popgen.bvmat.denseestimatedbreedingvaluematrix.denseestimatedbreedingvaluematrix method)": [[1038, "pybrops.popgen.bvmat.DenseEstimatedBreedingValueMatrix.DenseEstimatedBreedingValueMatrix.targmax"]], "targmin() (pybrops.popgen.bvmat.denseestimatedbreedingvaluematrix.denseestimatedbreedingvaluematrix method)": [[1038, "pybrops.popgen.bvmat.DenseEstimatedBreedingValueMatrix.DenseEstimatedBreedingValueMatrix.targmin"]], "taxa (pybrops.popgen.bvmat.denseestimatedbreedingvaluematrix.denseestimatedbreedingvaluematrix property)": [[1038, "pybrops.popgen.bvmat.DenseEstimatedBreedingValueMatrix.DenseEstimatedBreedingValueMatrix.taxa"]], "taxa_axis (pybrops.popgen.bvmat.denseestimatedbreedingvaluematrix.denseestimatedbreedingvaluematrix property)": [[1038, "pybrops.popgen.bvmat.DenseEstimatedBreedingValueMatrix.DenseEstimatedBreedingValueMatrix.taxa_axis"]], "taxa_grp (pybrops.popgen.bvmat.denseestimatedbreedingvaluematrix.denseestimatedbreedingvaluematrix property)": [[1038, "pybrops.popgen.bvmat.DenseEstimatedBreedingValueMatrix.DenseEstimatedBreedingValueMatrix.taxa_grp"]], "taxa_grp_len (pybrops.popgen.bvmat.denseestimatedbreedingvaluematrix.denseestimatedbreedingvaluematrix property)": [[1038, "pybrops.popgen.bvmat.DenseEstimatedBreedingValueMatrix.DenseEstimatedBreedingValueMatrix.taxa_grp_len"]], "taxa_grp_name (pybrops.popgen.bvmat.denseestimatedbreedingvaluematrix.denseestimatedbreedingvaluematrix property)": [[1038, "pybrops.popgen.bvmat.DenseEstimatedBreedingValueMatrix.DenseEstimatedBreedingValueMatrix.taxa_grp_name"]], "taxa_grp_spix (pybrops.popgen.bvmat.denseestimatedbreedingvaluematrix.denseestimatedbreedingvaluematrix property)": [[1038, "pybrops.popgen.bvmat.DenseEstimatedBreedingValueMatrix.DenseEstimatedBreedingValueMatrix.taxa_grp_spix"]], "taxa_grp_stix (pybrops.popgen.bvmat.denseestimatedbreedingvaluematrix.denseestimatedbreedingvaluematrix property)": [[1038, "pybrops.popgen.bvmat.DenseEstimatedBreedingValueMatrix.DenseEstimatedBreedingValueMatrix.taxa_grp_stix"]], "tmax() (pybrops.popgen.bvmat.denseestimatedbreedingvaluematrix.denseestimatedbreedingvaluematrix method)": [[1038, "pybrops.popgen.bvmat.DenseEstimatedBreedingValueMatrix.DenseEstimatedBreedingValueMatrix.tmax"]], "tmean() (pybrops.popgen.bvmat.denseestimatedbreedingvaluematrix.denseestimatedbreedingvaluematrix method)": [[1038, "pybrops.popgen.bvmat.DenseEstimatedBreedingValueMatrix.DenseEstimatedBreedingValueMatrix.tmean"]], "tmin() (pybrops.popgen.bvmat.denseestimatedbreedingvaluematrix.denseestimatedbreedingvaluematrix method)": [[1038, "pybrops.popgen.bvmat.DenseEstimatedBreedingValueMatrix.DenseEstimatedBreedingValueMatrix.tmin"]], "to_csv() (pybrops.popgen.bvmat.denseestimatedbreedingvaluematrix.denseestimatedbreedingvaluematrix method)": [[1038, "pybrops.popgen.bvmat.DenseEstimatedBreedingValueMatrix.DenseEstimatedBreedingValueMatrix.to_csv"]], "to_hdf5() (pybrops.popgen.bvmat.denseestimatedbreedingvaluematrix.denseestimatedbreedingvaluematrix method)": [[1038, "pybrops.popgen.bvmat.DenseEstimatedBreedingValueMatrix.DenseEstimatedBreedingValueMatrix.to_hdf5"]], "to_pandas() (pybrops.popgen.bvmat.denseestimatedbreedingvaluematrix.denseestimatedbreedingvaluematrix method)": [[1038, "pybrops.popgen.bvmat.DenseEstimatedBreedingValueMatrix.DenseEstimatedBreedingValueMatrix.to_pandas"]], "trait (pybrops.popgen.bvmat.denseestimatedbreedingvaluematrix.denseestimatedbreedingvaluematrix property)": [[1038, "pybrops.popgen.bvmat.DenseEstimatedBreedingValueMatrix.DenseEstimatedBreedingValueMatrix.trait"]], "trait_axis (pybrops.popgen.bvmat.denseestimatedbreedingvaluematrix.denseestimatedbreedingvaluematrix property)": [[1038, "pybrops.popgen.bvmat.DenseEstimatedBreedingValueMatrix.DenseEstimatedBreedingValueMatrix.trait_axis"]], "trange() (pybrops.popgen.bvmat.denseestimatedbreedingvaluematrix.denseestimatedbreedingvaluematrix method)": [[1038, "pybrops.popgen.bvmat.DenseEstimatedBreedingValueMatrix.DenseEstimatedBreedingValueMatrix.trange"]], "tstd() (pybrops.popgen.bvmat.denseestimatedbreedingvaluematrix.denseestimatedbreedingvaluematrix method)": [[1038, "pybrops.popgen.bvmat.DenseEstimatedBreedingValueMatrix.DenseEstimatedBreedingValueMatrix.tstd"]], "tvar() (pybrops.popgen.bvmat.denseestimatedbreedingvaluematrix.denseestimatedbreedingvaluematrix method)": [[1038, "pybrops.popgen.bvmat.DenseEstimatedBreedingValueMatrix.DenseEstimatedBreedingValueMatrix.tvar"]], "ungroup() (pybrops.popgen.bvmat.denseestimatedbreedingvaluematrix.denseestimatedbreedingvaluematrix method)": [[1038, "pybrops.popgen.bvmat.DenseEstimatedBreedingValueMatrix.DenseEstimatedBreedingValueMatrix.ungroup"]], "ungroup_taxa() (pybrops.popgen.bvmat.denseestimatedbreedingvaluematrix.denseestimatedbreedingvaluematrix method)": [[1038, "pybrops.popgen.bvmat.DenseEstimatedBreedingValueMatrix.DenseEstimatedBreedingValueMatrix.ungroup_taxa"]], "unscale() (pybrops.popgen.bvmat.denseestimatedbreedingvaluematrix.denseestimatedbreedingvaluematrix method)": [[1038, "pybrops.popgen.bvmat.DenseEstimatedBreedingValueMatrix.DenseEstimatedBreedingValueMatrix.unscale"]], "check_is_denseestimatedbreedingvaluematrix() (in module pybrops.popgen.bvmat.denseestimatedbreedingvaluematrix)": [[1039, "pybrops.popgen.bvmat.DenseEstimatedBreedingValueMatrix.check_is_DenseEstimatedBreedingValueMatrix"]], "pybrops.popgen.bvmat.densegenomicestimatedbreedingvaluematrix": [[1040, "module-pybrops.popgen.bvmat.DenseGenomicEstimatedBreedingValueMatrix"]], "densegenomicestimatedbreedingvaluematrix (class in pybrops.popgen.bvmat.densegenomicestimatedbreedingvaluematrix)": [[1041, "pybrops.popgen.bvmat.DenseGenomicEstimatedBreedingValueMatrix.DenseGenomicEstimatedBreedingValueMatrix"]], "__add__() (pybrops.popgen.bvmat.densegenomicestimatedbreedingvaluematrix.densegenomicestimatedbreedingvaluematrix method)": [[1041, "pybrops.popgen.bvmat.DenseGenomicEstimatedBreedingValueMatrix.DenseGenomicEstimatedBreedingValueMatrix.__add__"]], "__mul__() (pybrops.popgen.bvmat.densegenomicestimatedbreedingvaluematrix.densegenomicestimatedbreedingvaluematrix method)": [[1041, "pybrops.popgen.bvmat.DenseGenomicEstimatedBreedingValueMatrix.DenseGenomicEstimatedBreedingValueMatrix.__mul__"]], "adjoin() (pybrops.popgen.bvmat.densegenomicestimatedbreedingvaluematrix.densegenomicestimatedbreedingvaluematrix method)": [[1041, "pybrops.popgen.bvmat.DenseGenomicEstimatedBreedingValueMatrix.DenseGenomicEstimatedBreedingValueMatrix.adjoin"]], "adjoin_taxa() (pybrops.popgen.bvmat.densegenomicestimatedbreedingvaluematrix.densegenomicestimatedbreedingvaluematrix method)": [[1041, "pybrops.popgen.bvmat.DenseGenomicEstimatedBreedingValueMatrix.DenseGenomicEstimatedBreedingValueMatrix.adjoin_taxa"]], "adjoin_trait() (pybrops.popgen.bvmat.densegenomicestimatedbreedingvaluematrix.densegenomicestimatedbreedingvaluematrix method)": [[1041, "pybrops.popgen.bvmat.DenseGenomicEstimatedBreedingValueMatrix.DenseGenomicEstimatedBreedingValueMatrix.adjoin_trait"]], "append() (pybrops.popgen.bvmat.densegenomicestimatedbreedingvaluematrix.densegenomicestimatedbreedingvaluematrix method)": [[1041, "pybrops.popgen.bvmat.DenseGenomicEstimatedBreedingValueMatrix.DenseGenomicEstimatedBreedingValueMatrix.append"]], "append_taxa() (pybrops.popgen.bvmat.densegenomicestimatedbreedingvaluematrix.densegenomicestimatedbreedingvaluematrix method)": [[1041, "pybrops.popgen.bvmat.DenseGenomicEstimatedBreedingValueMatrix.DenseGenomicEstimatedBreedingValueMatrix.append_taxa"]], "append_trait() (pybrops.popgen.bvmat.densegenomicestimatedbreedingvaluematrix.densegenomicestimatedbreedingvaluematrix method)": [[1041, "pybrops.popgen.bvmat.DenseGenomicEstimatedBreedingValueMatrix.DenseGenomicEstimatedBreedingValueMatrix.append_trait"]], "concat() (pybrops.popgen.bvmat.densegenomicestimatedbreedingvaluematrix.densegenomicestimatedbreedingvaluematrix class method)": [[1041, "pybrops.popgen.bvmat.DenseGenomicEstimatedBreedingValueMatrix.DenseGenomicEstimatedBreedingValueMatrix.concat"]], "concat_taxa() (pybrops.popgen.bvmat.densegenomicestimatedbreedingvaluematrix.densegenomicestimatedbreedingvaluematrix class method)": [[1041, "pybrops.popgen.bvmat.DenseGenomicEstimatedBreedingValueMatrix.DenseGenomicEstimatedBreedingValueMatrix.concat_taxa"]], "concat_trait() (pybrops.popgen.bvmat.densegenomicestimatedbreedingvaluematrix.densegenomicestimatedbreedingvaluematrix class method)": [[1041, "pybrops.popgen.bvmat.DenseGenomicEstimatedBreedingValueMatrix.DenseGenomicEstimatedBreedingValueMatrix.concat_trait"]], "copy() (pybrops.popgen.bvmat.densegenomicestimatedbreedingvaluematrix.densegenomicestimatedbreedingvaluematrix method)": [[1041, "pybrops.popgen.bvmat.DenseGenomicEstimatedBreedingValueMatrix.DenseGenomicEstimatedBreedingValueMatrix.copy"]], "deepcopy() (pybrops.popgen.bvmat.densegenomicestimatedbreedingvaluematrix.densegenomicestimatedbreedingvaluematrix method)": [[1041, "pybrops.popgen.bvmat.DenseGenomicEstimatedBreedingValueMatrix.DenseGenomicEstimatedBreedingValueMatrix.deepcopy"]], "delete() (pybrops.popgen.bvmat.densegenomicestimatedbreedingvaluematrix.densegenomicestimatedbreedingvaluematrix method)": [[1041, "pybrops.popgen.bvmat.DenseGenomicEstimatedBreedingValueMatrix.DenseGenomicEstimatedBreedingValueMatrix.delete"]], "delete_taxa() (pybrops.popgen.bvmat.densegenomicestimatedbreedingvaluematrix.densegenomicestimatedbreedingvaluematrix method)": [[1041, "pybrops.popgen.bvmat.DenseGenomicEstimatedBreedingValueMatrix.DenseGenomicEstimatedBreedingValueMatrix.delete_taxa"]], "delete_trait() (pybrops.popgen.bvmat.densegenomicestimatedbreedingvaluematrix.densegenomicestimatedbreedingvaluematrix method)": [[1041, "pybrops.popgen.bvmat.DenseGenomicEstimatedBreedingValueMatrix.DenseGenomicEstimatedBreedingValueMatrix.delete_trait"]], "from_csv() (pybrops.popgen.bvmat.densegenomicestimatedbreedingvaluematrix.densegenomicestimatedbreedingvaluematrix class method)": [[1041, "pybrops.popgen.bvmat.DenseGenomicEstimatedBreedingValueMatrix.DenseGenomicEstimatedBreedingValueMatrix.from_csv"]], "from_hdf5() (pybrops.popgen.bvmat.densegenomicestimatedbreedingvaluematrix.densegenomicestimatedbreedingvaluematrix class method)": [[1041, "pybrops.popgen.bvmat.DenseGenomicEstimatedBreedingValueMatrix.DenseGenomicEstimatedBreedingValueMatrix.from_hdf5"]], "from_numpy() (pybrops.popgen.bvmat.densegenomicestimatedbreedingvaluematrix.densegenomicestimatedbreedingvaluematrix class method)": [[1041, "pybrops.popgen.bvmat.DenseGenomicEstimatedBreedingValueMatrix.DenseGenomicEstimatedBreedingValueMatrix.from_numpy"]], "from_pandas() (pybrops.popgen.bvmat.densegenomicestimatedbreedingvaluematrix.densegenomicestimatedbreedingvaluematrix class method)": [[1041, "pybrops.popgen.bvmat.DenseGenomicEstimatedBreedingValueMatrix.DenseGenomicEstimatedBreedingValueMatrix.from_pandas"]], "group() (pybrops.popgen.bvmat.densegenomicestimatedbreedingvaluematrix.densegenomicestimatedbreedingvaluematrix method)": [[1041, "pybrops.popgen.bvmat.DenseGenomicEstimatedBreedingValueMatrix.DenseGenomicEstimatedBreedingValueMatrix.group"]], "group_taxa() (pybrops.popgen.bvmat.densegenomicestimatedbreedingvaluematrix.densegenomicestimatedbreedingvaluematrix method)": [[1041, "pybrops.popgen.bvmat.DenseGenomicEstimatedBreedingValueMatrix.DenseGenomicEstimatedBreedingValueMatrix.group_taxa"]], "incorp() (pybrops.popgen.bvmat.densegenomicestimatedbreedingvaluematrix.densegenomicestimatedbreedingvaluematrix method)": [[1041, "pybrops.popgen.bvmat.DenseGenomicEstimatedBreedingValueMatrix.DenseGenomicEstimatedBreedingValueMatrix.incorp"]], "incorp_taxa() (pybrops.popgen.bvmat.densegenomicestimatedbreedingvaluematrix.densegenomicestimatedbreedingvaluematrix method)": [[1041, "pybrops.popgen.bvmat.DenseGenomicEstimatedBreedingValueMatrix.DenseGenomicEstimatedBreedingValueMatrix.incorp_taxa"]], "incorp_trait() (pybrops.popgen.bvmat.densegenomicestimatedbreedingvaluematrix.densegenomicestimatedbreedingvaluematrix method)": [[1041, "pybrops.popgen.bvmat.DenseGenomicEstimatedBreedingValueMatrix.DenseGenomicEstimatedBreedingValueMatrix.incorp_trait"]], "insert() (pybrops.popgen.bvmat.densegenomicestimatedbreedingvaluematrix.densegenomicestimatedbreedingvaluematrix method)": [[1041, "pybrops.popgen.bvmat.DenseGenomicEstimatedBreedingValueMatrix.DenseGenomicEstimatedBreedingValueMatrix.insert"]], "insert_taxa() (pybrops.popgen.bvmat.densegenomicestimatedbreedingvaluematrix.densegenomicestimatedbreedingvaluematrix method)": [[1041, "pybrops.popgen.bvmat.DenseGenomicEstimatedBreedingValueMatrix.DenseGenomicEstimatedBreedingValueMatrix.insert_taxa"]], "insert_trait() (pybrops.popgen.bvmat.densegenomicestimatedbreedingvaluematrix.densegenomicestimatedbreedingvaluematrix method)": [[1041, "pybrops.popgen.bvmat.DenseGenomicEstimatedBreedingValueMatrix.DenseGenomicEstimatedBreedingValueMatrix.insert_trait"]], "is_grouped() (pybrops.popgen.bvmat.densegenomicestimatedbreedingvaluematrix.densegenomicestimatedbreedingvaluematrix method)": [[1041, "pybrops.popgen.bvmat.DenseGenomicEstimatedBreedingValueMatrix.DenseGenomicEstimatedBreedingValueMatrix.is_grouped"]], "is_grouped_taxa() (pybrops.popgen.bvmat.densegenomicestimatedbreedingvaluematrix.densegenomicestimatedbreedingvaluematrix method)": [[1041, "pybrops.popgen.bvmat.DenseGenomicEstimatedBreedingValueMatrix.DenseGenomicEstimatedBreedingValueMatrix.is_grouped_taxa"]], "lexsort() (pybrops.popgen.bvmat.densegenomicestimatedbreedingvaluematrix.densegenomicestimatedbreedingvaluematrix method)": [[1041, "pybrops.popgen.bvmat.DenseGenomicEstimatedBreedingValueMatrix.DenseGenomicEstimatedBreedingValueMatrix.lexsort"]], "lexsort_taxa() (pybrops.popgen.bvmat.densegenomicestimatedbreedingvaluematrix.densegenomicestimatedbreedingvaluematrix method)": [[1041, "pybrops.popgen.bvmat.DenseGenomicEstimatedBreedingValueMatrix.DenseGenomicEstimatedBreedingValueMatrix.lexsort_taxa"]], "lexsort_trait() (pybrops.popgen.bvmat.densegenomicestimatedbreedingvaluematrix.densegenomicestimatedbreedingvaluematrix method)": [[1041, "pybrops.popgen.bvmat.DenseGenomicEstimatedBreedingValueMatrix.DenseGenomicEstimatedBreedingValueMatrix.lexsort_trait"]], "location (pybrops.popgen.bvmat.densegenomicestimatedbreedingvaluematrix.densegenomicestimatedbreedingvaluematrix property)": [[1041, "pybrops.popgen.bvmat.DenseGenomicEstimatedBreedingValueMatrix.DenseGenomicEstimatedBreedingValueMatrix.location"]], "mat (pybrops.popgen.bvmat.densegenomicestimatedbreedingvaluematrix.densegenomicestimatedbreedingvaluematrix property)": [[1041, "pybrops.popgen.bvmat.DenseGenomicEstimatedBreedingValueMatrix.DenseGenomicEstimatedBreedingValueMatrix.mat"]], "mat_ndim (pybrops.popgen.bvmat.densegenomicestimatedbreedingvaluematrix.densegenomicestimatedbreedingvaluematrix property)": [[1041, "pybrops.popgen.bvmat.DenseGenomicEstimatedBreedingValueMatrix.DenseGenomicEstimatedBreedingValueMatrix.mat_ndim"]], "mat_shape (pybrops.popgen.bvmat.densegenomicestimatedbreedingvaluematrix.densegenomicestimatedbreedingvaluematrix property)": [[1041, "pybrops.popgen.bvmat.DenseGenomicEstimatedBreedingValueMatrix.DenseGenomicEstimatedBreedingValueMatrix.mat_shape"]], "ntaxa (pybrops.popgen.bvmat.densegenomicestimatedbreedingvaluematrix.densegenomicestimatedbreedingvaluematrix property)": [[1041, "pybrops.popgen.bvmat.DenseGenomicEstimatedBreedingValueMatrix.DenseGenomicEstimatedBreedingValueMatrix.ntaxa"]], "ntrait (pybrops.popgen.bvmat.densegenomicestimatedbreedingvaluematrix.densegenomicestimatedbreedingvaluematrix property)": [[1041, "pybrops.popgen.bvmat.DenseGenomicEstimatedBreedingValueMatrix.DenseGenomicEstimatedBreedingValueMatrix.ntrait"]], "remove() (pybrops.popgen.bvmat.densegenomicestimatedbreedingvaluematrix.densegenomicestimatedbreedingvaluematrix method)": [[1041, "pybrops.popgen.bvmat.DenseGenomicEstimatedBreedingValueMatrix.DenseGenomicEstimatedBreedingValueMatrix.remove"]], "remove_taxa() (pybrops.popgen.bvmat.densegenomicestimatedbreedingvaluematrix.densegenomicestimatedbreedingvaluematrix method)": [[1041, "pybrops.popgen.bvmat.DenseGenomicEstimatedBreedingValueMatrix.DenseGenomicEstimatedBreedingValueMatrix.remove_taxa"]], "remove_trait() (pybrops.popgen.bvmat.densegenomicestimatedbreedingvaluematrix.densegenomicestimatedbreedingvaluematrix method)": [[1041, "pybrops.popgen.bvmat.DenseGenomicEstimatedBreedingValueMatrix.DenseGenomicEstimatedBreedingValueMatrix.remove_trait"]], "reorder() (pybrops.popgen.bvmat.densegenomicestimatedbreedingvaluematrix.densegenomicestimatedbreedingvaluematrix method)": [[1041, "pybrops.popgen.bvmat.DenseGenomicEstimatedBreedingValueMatrix.DenseGenomicEstimatedBreedingValueMatrix.reorder"]], "reorder_taxa() (pybrops.popgen.bvmat.densegenomicestimatedbreedingvaluematrix.densegenomicestimatedbreedingvaluematrix method)": [[1041, "pybrops.popgen.bvmat.DenseGenomicEstimatedBreedingValueMatrix.DenseGenomicEstimatedBreedingValueMatrix.reorder_taxa"]], "reorder_trait() (pybrops.popgen.bvmat.densegenomicestimatedbreedingvaluematrix.densegenomicestimatedbreedingvaluematrix method)": [[1041, "pybrops.popgen.bvmat.DenseGenomicEstimatedBreedingValueMatrix.DenseGenomicEstimatedBreedingValueMatrix.reorder_trait"]], "scale (pybrops.popgen.bvmat.densegenomicestimatedbreedingvaluematrix.densegenomicestimatedbreedingvaluematrix property)": [[1041, "pybrops.popgen.bvmat.DenseGenomicEstimatedBreedingValueMatrix.DenseGenomicEstimatedBreedingValueMatrix.scale"]], "select() (pybrops.popgen.bvmat.densegenomicestimatedbreedingvaluematrix.densegenomicestimatedbreedingvaluematrix method)": [[1041, "pybrops.popgen.bvmat.DenseGenomicEstimatedBreedingValueMatrix.DenseGenomicEstimatedBreedingValueMatrix.select"]], "select_taxa() (pybrops.popgen.bvmat.densegenomicestimatedbreedingvaluematrix.densegenomicestimatedbreedingvaluematrix method)": [[1041, "pybrops.popgen.bvmat.DenseGenomicEstimatedBreedingValueMatrix.DenseGenomicEstimatedBreedingValueMatrix.select_taxa"]], "select_trait() (pybrops.popgen.bvmat.densegenomicestimatedbreedingvaluematrix.densegenomicestimatedbreedingvaluematrix method)": [[1041, "pybrops.popgen.bvmat.DenseGenomicEstimatedBreedingValueMatrix.DenseGenomicEstimatedBreedingValueMatrix.select_trait"]], "sort() (pybrops.popgen.bvmat.densegenomicestimatedbreedingvaluematrix.densegenomicestimatedbreedingvaluematrix method)": [[1041, "pybrops.popgen.bvmat.DenseGenomicEstimatedBreedingValueMatrix.DenseGenomicEstimatedBreedingValueMatrix.sort"]], "sort_taxa() (pybrops.popgen.bvmat.densegenomicestimatedbreedingvaluematrix.densegenomicestimatedbreedingvaluematrix method)": [[1041, "pybrops.popgen.bvmat.DenseGenomicEstimatedBreedingValueMatrix.DenseGenomicEstimatedBreedingValueMatrix.sort_taxa"]], "sort_trait() (pybrops.popgen.bvmat.densegenomicestimatedbreedingvaluematrix.densegenomicestimatedbreedingvaluematrix method)": [[1041, "pybrops.popgen.bvmat.DenseGenomicEstimatedBreedingValueMatrix.DenseGenomicEstimatedBreedingValueMatrix.sort_trait"]], "targmax() (pybrops.popgen.bvmat.densegenomicestimatedbreedingvaluematrix.densegenomicestimatedbreedingvaluematrix method)": [[1041, "pybrops.popgen.bvmat.DenseGenomicEstimatedBreedingValueMatrix.DenseGenomicEstimatedBreedingValueMatrix.targmax"]], "targmin() (pybrops.popgen.bvmat.densegenomicestimatedbreedingvaluematrix.densegenomicestimatedbreedingvaluematrix method)": [[1041, "pybrops.popgen.bvmat.DenseGenomicEstimatedBreedingValueMatrix.DenseGenomicEstimatedBreedingValueMatrix.targmin"]], "taxa (pybrops.popgen.bvmat.densegenomicestimatedbreedingvaluematrix.densegenomicestimatedbreedingvaluematrix property)": [[1041, "pybrops.popgen.bvmat.DenseGenomicEstimatedBreedingValueMatrix.DenseGenomicEstimatedBreedingValueMatrix.taxa"]], "taxa_axis (pybrops.popgen.bvmat.densegenomicestimatedbreedingvaluematrix.densegenomicestimatedbreedingvaluematrix property)": [[1041, "pybrops.popgen.bvmat.DenseGenomicEstimatedBreedingValueMatrix.DenseGenomicEstimatedBreedingValueMatrix.taxa_axis"]], "taxa_grp (pybrops.popgen.bvmat.densegenomicestimatedbreedingvaluematrix.densegenomicestimatedbreedingvaluematrix property)": [[1041, "pybrops.popgen.bvmat.DenseGenomicEstimatedBreedingValueMatrix.DenseGenomicEstimatedBreedingValueMatrix.taxa_grp"]], "taxa_grp_len (pybrops.popgen.bvmat.densegenomicestimatedbreedingvaluematrix.densegenomicestimatedbreedingvaluematrix property)": [[1041, "pybrops.popgen.bvmat.DenseGenomicEstimatedBreedingValueMatrix.DenseGenomicEstimatedBreedingValueMatrix.taxa_grp_len"]], "taxa_grp_name (pybrops.popgen.bvmat.densegenomicestimatedbreedingvaluematrix.densegenomicestimatedbreedingvaluematrix property)": [[1041, "pybrops.popgen.bvmat.DenseGenomicEstimatedBreedingValueMatrix.DenseGenomicEstimatedBreedingValueMatrix.taxa_grp_name"]], "taxa_grp_spix (pybrops.popgen.bvmat.densegenomicestimatedbreedingvaluematrix.densegenomicestimatedbreedingvaluematrix property)": [[1041, "pybrops.popgen.bvmat.DenseGenomicEstimatedBreedingValueMatrix.DenseGenomicEstimatedBreedingValueMatrix.taxa_grp_spix"]], "taxa_grp_stix (pybrops.popgen.bvmat.densegenomicestimatedbreedingvaluematrix.densegenomicestimatedbreedingvaluematrix property)": [[1041, "pybrops.popgen.bvmat.DenseGenomicEstimatedBreedingValueMatrix.DenseGenomicEstimatedBreedingValueMatrix.taxa_grp_stix"]], "tmax() (pybrops.popgen.bvmat.densegenomicestimatedbreedingvaluematrix.densegenomicestimatedbreedingvaluematrix method)": [[1041, "pybrops.popgen.bvmat.DenseGenomicEstimatedBreedingValueMatrix.DenseGenomicEstimatedBreedingValueMatrix.tmax"]], "tmean() (pybrops.popgen.bvmat.densegenomicestimatedbreedingvaluematrix.densegenomicestimatedbreedingvaluematrix method)": [[1041, "pybrops.popgen.bvmat.DenseGenomicEstimatedBreedingValueMatrix.DenseGenomicEstimatedBreedingValueMatrix.tmean"]], "tmin() (pybrops.popgen.bvmat.densegenomicestimatedbreedingvaluematrix.densegenomicestimatedbreedingvaluematrix method)": [[1041, "pybrops.popgen.bvmat.DenseGenomicEstimatedBreedingValueMatrix.DenseGenomicEstimatedBreedingValueMatrix.tmin"]], "to_csv() (pybrops.popgen.bvmat.densegenomicestimatedbreedingvaluematrix.densegenomicestimatedbreedingvaluematrix method)": [[1041, "pybrops.popgen.bvmat.DenseGenomicEstimatedBreedingValueMatrix.DenseGenomicEstimatedBreedingValueMatrix.to_csv"]], "to_hdf5() (pybrops.popgen.bvmat.densegenomicestimatedbreedingvaluematrix.densegenomicestimatedbreedingvaluematrix method)": [[1041, "pybrops.popgen.bvmat.DenseGenomicEstimatedBreedingValueMatrix.DenseGenomicEstimatedBreedingValueMatrix.to_hdf5"]], "to_pandas() (pybrops.popgen.bvmat.densegenomicestimatedbreedingvaluematrix.densegenomicestimatedbreedingvaluematrix method)": [[1041, "pybrops.popgen.bvmat.DenseGenomicEstimatedBreedingValueMatrix.DenseGenomicEstimatedBreedingValueMatrix.to_pandas"]], "trait (pybrops.popgen.bvmat.densegenomicestimatedbreedingvaluematrix.densegenomicestimatedbreedingvaluematrix property)": [[1041, "pybrops.popgen.bvmat.DenseGenomicEstimatedBreedingValueMatrix.DenseGenomicEstimatedBreedingValueMatrix.trait"]], "trait_axis (pybrops.popgen.bvmat.densegenomicestimatedbreedingvaluematrix.densegenomicestimatedbreedingvaluematrix property)": [[1041, "pybrops.popgen.bvmat.DenseGenomicEstimatedBreedingValueMatrix.DenseGenomicEstimatedBreedingValueMatrix.trait_axis"]], "trange() (pybrops.popgen.bvmat.densegenomicestimatedbreedingvaluematrix.densegenomicestimatedbreedingvaluematrix method)": [[1041, "pybrops.popgen.bvmat.DenseGenomicEstimatedBreedingValueMatrix.DenseGenomicEstimatedBreedingValueMatrix.trange"]], "tstd() (pybrops.popgen.bvmat.densegenomicestimatedbreedingvaluematrix.densegenomicestimatedbreedingvaluematrix method)": [[1041, "pybrops.popgen.bvmat.DenseGenomicEstimatedBreedingValueMatrix.DenseGenomicEstimatedBreedingValueMatrix.tstd"]], "tvar() (pybrops.popgen.bvmat.densegenomicestimatedbreedingvaluematrix.densegenomicestimatedbreedingvaluematrix method)": [[1041, "pybrops.popgen.bvmat.DenseGenomicEstimatedBreedingValueMatrix.DenseGenomicEstimatedBreedingValueMatrix.tvar"]], "ungroup() (pybrops.popgen.bvmat.densegenomicestimatedbreedingvaluematrix.densegenomicestimatedbreedingvaluematrix method)": [[1041, "pybrops.popgen.bvmat.DenseGenomicEstimatedBreedingValueMatrix.DenseGenomicEstimatedBreedingValueMatrix.ungroup"]], "ungroup_taxa() (pybrops.popgen.bvmat.densegenomicestimatedbreedingvaluematrix.densegenomicestimatedbreedingvaluematrix method)": [[1041, "pybrops.popgen.bvmat.DenseGenomicEstimatedBreedingValueMatrix.DenseGenomicEstimatedBreedingValueMatrix.ungroup_taxa"]], "unscale() (pybrops.popgen.bvmat.densegenomicestimatedbreedingvaluematrix.densegenomicestimatedbreedingvaluematrix method)": [[1041, "pybrops.popgen.bvmat.DenseGenomicEstimatedBreedingValueMatrix.DenseGenomicEstimatedBreedingValueMatrix.unscale"]], "check_is_densegenomicestimatedbreedingvaluematrix() (in module pybrops.popgen.bvmat.densegenomicestimatedbreedingvaluematrix)": [[1042, "pybrops.popgen.bvmat.DenseGenomicEstimatedBreedingValueMatrix.check_is_DenseGenomicEstimatedBreedingValueMatrix"]], "pybrops.popgen.cmat": [[1043, "module-pybrops.popgen.cmat"]], "pybrops.popgen.cmat.coancestrymatrix": [[1044, "module-pybrops.popgen.cmat.CoancestryMatrix"]], "coancestrymatrix (class in pybrops.popgen.cmat.coancestrymatrix)": [[1045, "pybrops.popgen.cmat.CoancestryMatrix.CoancestryMatrix"]], "__add__() (pybrops.popgen.cmat.coancestrymatrix.coancestrymatrix method)": [[1045, "pybrops.popgen.cmat.CoancestryMatrix.CoancestryMatrix.__add__"]], "__mul__() (pybrops.popgen.cmat.coancestrymatrix.coancestrymatrix method)": [[1045, "pybrops.popgen.cmat.CoancestryMatrix.CoancestryMatrix.__mul__"]], "adjoin() (pybrops.popgen.cmat.coancestrymatrix.coancestrymatrix method)": [[1045, "pybrops.popgen.cmat.CoancestryMatrix.CoancestryMatrix.adjoin"]], "adjoin_taxa() (pybrops.popgen.cmat.coancestrymatrix.coancestrymatrix method)": [[1045, "pybrops.popgen.cmat.CoancestryMatrix.CoancestryMatrix.adjoin_taxa"]], "append() (pybrops.popgen.cmat.coancestrymatrix.coancestrymatrix method)": [[1045, "pybrops.popgen.cmat.CoancestryMatrix.CoancestryMatrix.append"]], "append_taxa() (pybrops.popgen.cmat.coancestrymatrix.coancestrymatrix method)": [[1045, "pybrops.popgen.cmat.CoancestryMatrix.CoancestryMatrix.append_taxa"]], "apply_jitter() (pybrops.popgen.cmat.coancestrymatrix.coancestrymatrix method)": [[1045, "pybrops.popgen.cmat.CoancestryMatrix.CoancestryMatrix.apply_jitter"]], "coancestry() (pybrops.popgen.cmat.coancestrymatrix.coancestrymatrix method)": [[1045, "pybrops.popgen.cmat.CoancestryMatrix.CoancestryMatrix.coancestry"]], "concat() (pybrops.popgen.cmat.coancestrymatrix.coancestrymatrix class method)": [[1045, "pybrops.popgen.cmat.CoancestryMatrix.CoancestryMatrix.concat"]], "concat_taxa() (pybrops.popgen.cmat.coancestrymatrix.coancestrymatrix class method)": [[1045, "pybrops.popgen.cmat.CoancestryMatrix.CoancestryMatrix.concat_taxa"]], "copy() (pybrops.popgen.cmat.coancestrymatrix.coancestrymatrix method)": [[1045, "pybrops.popgen.cmat.CoancestryMatrix.CoancestryMatrix.copy"]], "deepcopy() (pybrops.popgen.cmat.coancestrymatrix.coancestrymatrix method)": [[1045, "pybrops.popgen.cmat.CoancestryMatrix.CoancestryMatrix.deepcopy"]], "delete() (pybrops.popgen.cmat.coancestrymatrix.coancestrymatrix method)": [[1045, "pybrops.popgen.cmat.CoancestryMatrix.CoancestryMatrix.delete"]], "delete_taxa() (pybrops.popgen.cmat.coancestrymatrix.coancestrymatrix method)": [[1045, "pybrops.popgen.cmat.CoancestryMatrix.CoancestryMatrix.delete_taxa"]], "from_csv() (pybrops.popgen.cmat.coancestrymatrix.coancestrymatrix class method)": [[1045, "pybrops.popgen.cmat.CoancestryMatrix.CoancestryMatrix.from_csv"]], "from_gmat() (pybrops.popgen.cmat.coancestrymatrix.coancestrymatrix class method)": [[1045, "pybrops.popgen.cmat.CoancestryMatrix.CoancestryMatrix.from_gmat"]], "from_hdf5() (pybrops.popgen.cmat.coancestrymatrix.coancestrymatrix class method)": [[1045, "pybrops.popgen.cmat.CoancestryMatrix.CoancestryMatrix.from_hdf5"]], "from_pandas() (pybrops.popgen.cmat.coancestrymatrix.coancestrymatrix class method)": [[1045, "pybrops.popgen.cmat.CoancestryMatrix.CoancestryMatrix.from_pandas"]], "group() (pybrops.popgen.cmat.coancestrymatrix.coancestrymatrix method)": [[1045, "pybrops.popgen.cmat.CoancestryMatrix.CoancestryMatrix.group"]], "group_taxa() (pybrops.popgen.cmat.coancestrymatrix.coancestrymatrix method)": [[1045, "pybrops.popgen.cmat.CoancestryMatrix.CoancestryMatrix.group_taxa"]], "incorp() (pybrops.popgen.cmat.coancestrymatrix.coancestrymatrix method)": [[1045, "pybrops.popgen.cmat.CoancestryMatrix.CoancestryMatrix.incorp"]], "incorp_taxa() (pybrops.popgen.cmat.coancestrymatrix.coancestrymatrix method)": [[1045, "pybrops.popgen.cmat.CoancestryMatrix.CoancestryMatrix.incorp_taxa"]], "insert() (pybrops.popgen.cmat.coancestrymatrix.coancestrymatrix method)": [[1045, "pybrops.popgen.cmat.CoancestryMatrix.CoancestryMatrix.insert"]], "insert_taxa() (pybrops.popgen.cmat.coancestrymatrix.coancestrymatrix method)": [[1045, "pybrops.popgen.cmat.CoancestryMatrix.CoancestryMatrix.insert_taxa"]], "inverse() (pybrops.popgen.cmat.coancestrymatrix.coancestrymatrix method)": [[1045, "pybrops.popgen.cmat.CoancestryMatrix.CoancestryMatrix.inverse"]], "is_grouped() (pybrops.popgen.cmat.coancestrymatrix.coancestrymatrix method)": [[1045, "pybrops.popgen.cmat.CoancestryMatrix.CoancestryMatrix.is_grouped"]], "is_grouped_taxa() (pybrops.popgen.cmat.coancestrymatrix.coancestrymatrix method)": [[1045, "pybrops.popgen.cmat.CoancestryMatrix.CoancestryMatrix.is_grouped_taxa"]], "is_positive_semidefinite() (pybrops.popgen.cmat.coancestrymatrix.coancestrymatrix method)": [[1045, "pybrops.popgen.cmat.CoancestryMatrix.CoancestryMatrix.is_positive_semidefinite"]], "is_square() (pybrops.popgen.cmat.coancestrymatrix.coancestrymatrix method)": [[1045, "pybrops.popgen.cmat.CoancestryMatrix.CoancestryMatrix.is_square"]], "is_square_taxa() (pybrops.popgen.cmat.coancestrymatrix.coancestrymatrix method)": [[1045, "pybrops.popgen.cmat.CoancestryMatrix.CoancestryMatrix.is_square_taxa"]], "kinship() (pybrops.popgen.cmat.coancestrymatrix.coancestrymatrix method)": [[1045, "pybrops.popgen.cmat.CoancestryMatrix.CoancestryMatrix.kinship"]], "lexsort() (pybrops.popgen.cmat.coancestrymatrix.coancestrymatrix method)": [[1045, "pybrops.popgen.cmat.CoancestryMatrix.CoancestryMatrix.lexsort"]], "lexsort_taxa() (pybrops.popgen.cmat.coancestrymatrix.coancestrymatrix method)": [[1045, "pybrops.popgen.cmat.CoancestryMatrix.CoancestryMatrix.lexsort_taxa"]], "mat (pybrops.popgen.cmat.coancestrymatrix.coancestrymatrix property)": [[1045, "pybrops.popgen.cmat.CoancestryMatrix.CoancestryMatrix.mat"]], "mat_asformat() (pybrops.popgen.cmat.coancestrymatrix.coancestrymatrix method)": [[1045, "pybrops.popgen.cmat.CoancestryMatrix.CoancestryMatrix.mat_asformat"]], "mat_ndim (pybrops.popgen.cmat.coancestrymatrix.coancestrymatrix property)": [[1045, "pybrops.popgen.cmat.CoancestryMatrix.CoancestryMatrix.mat_ndim"]], "mat_shape (pybrops.popgen.cmat.coancestrymatrix.coancestrymatrix property)": [[1045, "pybrops.popgen.cmat.CoancestryMatrix.CoancestryMatrix.mat_shape"]], "max() (pybrops.popgen.cmat.coancestrymatrix.coancestrymatrix method)": [[1045, "pybrops.popgen.cmat.CoancestryMatrix.CoancestryMatrix.max"]], "max_inbreeding() (pybrops.popgen.cmat.coancestrymatrix.coancestrymatrix method)": [[1045, "pybrops.popgen.cmat.CoancestryMatrix.CoancestryMatrix.max_inbreeding"]], "mean() (pybrops.popgen.cmat.coancestrymatrix.coancestrymatrix method)": [[1045, "pybrops.popgen.cmat.CoancestryMatrix.CoancestryMatrix.mean"]], "min() (pybrops.popgen.cmat.coancestrymatrix.coancestrymatrix method)": [[1045, "pybrops.popgen.cmat.CoancestryMatrix.CoancestryMatrix.min"]], "min_inbreeding() (pybrops.popgen.cmat.coancestrymatrix.coancestrymatrix method)": [[1045, "pybrops.popgen.cmat.CoancestryMatrix.CoancestryMatrix.min_inbreeding"]], "nsquare (pybrops.popgen.cmat.coancestrymatrix.coancestrymatrix property)": [[1045, "pybrops.popgen.cmat.CoancestryMatrix.CoancestryMatrix.nsquare"]], "nsquare_taxa (pybrops.popgen.cmat.coancestrymatrix.coancestrymatrix property)": [[1045, "pybrops.popgen.cmat.CoancestryMatrix.CoancestryMatrix.nsquare_taxa"]], "ntaxa (pybrops.popgen.cmat.coancestrymatrix.coancestrymatrix property)": [[1045, "pybrops.popgen.cmat.CoancestryMatrix.CoancestryMatrix.ntaxa"]], "remove() (pybrops.popgen.cmat.coancestrymatrix.coancestrymatrix method)": [[1045, "pybrops.popgen.cmat.CoancestryMatrix.CoancestryMatrix.remove"]], "remove_taxa() (pybrops.popgen.cmat.coancestrymatrix.coancestrymatrix method)": [[1045, "pybrops.popgen.cmat.CoancestryMatrix.CoancestryMatrix.remove_taxa"]], "reorder() (pybrops.popgen.cmat.coancestrymatrix.coancestrymatrix method)": [[1045, "pybrops.popgen.cmat.CoancestryMatrix.CoancestryMatrix.reorder"]], "reorder_taxa() (pybrops.popgen.cmat.coancestrymatrix.coancestrymatrix method)": [[1045, "pybrops.popgen.cmat.CoancestryMatrix.CoancestryMatrix.reorder_taxa"]], "select() (pybrops.popgen.cmat.coancestrymatrix.coancestrymatrix method)": [[1045, "pybrops.popgen.cmat.CoancestryMatrix.CoancestryMatrix.select"]], "select_taxa() (pybrops.popgen.cmat.coancestrymatrix.coancestrymatrix method)": [[1045, "pybrops.popgen.cmat.CoancestryMatrix.CoancestryMatrix.select_taxa"]], "sort() (pybrops.popgen.cmat.coancestrymatrix.coancestrymatrix method)": [[1045, "pybrops.popgen.cmat.CoancestryMatrix.CoancestryMatrix.sort"]], "sort_taxa() (pybrops.popgen.cmat.coancestrymatrix.coancestrymatrix method)": [[1045, "pybrops.popgen.cmat.CoancestryMatrix.CoancestryMatrix.sort_taxa"]], "square_axes (pybrops.popgen.cmat.coancestrymatrix.coancestrymatrix property)": [[1045, "pybrops.popgen.cmat.CoancestryMatrix.CoancestryMatrix.square_axes"]], "square_axes_len (pybrops.popgen.cmat.coancestrymatrix.coancestrymatrix property)": [[1045, "pybrops.popgen.cmat.CoancestryMatrix.CoancestryMatrix.square_axes_len"]], "square_taxa_axes (pybrops.popgen.cmat.coancestrymatrix.coancestrymatrix property)": [[1045, "pybrops.popgen.cmat.CoancestryMatrix.CoancestryMatrix.square_taxa_axes"]], "square_taxa_axes_len (pybrops.popgen.cmat.coancestrymatrix.coancestrymatrix property)": [[1045, "pybrops.popgen.cmat.CoancestryMatrix.CoancestryMatrix.square_taxa_axes_len"]], "taxa (pybrops.popgen.cmat.coancestrymatrix.coancestrymatrix property)": [[1045, "pybrops.popgen.cmat.CoancestryMatrix.CoancestryMatrix.taxa"]], "taxa_axis (pybrops.popgen.cmat.coancestrymatrix.coancestrymatrix property)": [[1045, "pybrops.popgen.cmat.CoancestryMatrix.CoancestryMatrix.taxa_axis"]], "taxa_grp (pybrops.popgen.cmat.coancestrymatrix.coancestrymatrix property)": [[1045, "pybrops.popgen.cmat.CoancestryMatrix.CoancestryMatrix.taxa_grp"]], "taxa_grp_len (pybrops.popgen.cmat.coancestrymatrix.coancestrymatrix property)": [[1045, "pybrops.popgen.cmat.CoancestryMatrix.CoancestryMatrix.taxa_grp_len"]], "taxa_grp_name (pybrops.popgen.cmat.coancestrymatrix.coancestrymatrix property)": [[1045, "pybrops.popgen.cmat.CoancestryMatrix.CoancestryMatrix.taxa_grp_name"]], "taxa_grp_spix (pybrops.popgen.cmat.coancestrymatrix.coancestrymatrix property)": [[1045, "pybrops.popgen.cmat.CoancestryMatrix.CoancestryMatrix.taxa_grp_spix"]], "taxa_grp_stix (pybrops.popgen.cmat.coancestrymatrix.coancestrymatrix property)": [[1045, "pybrops.popgen.cmat.CoancestryMatrix.CoancestryMatrix.taxa_grp_stix"]], "to_csv() (pybrops.popgen.cmat.coancestrymatrix.coancestrymatrix method)": [[1045, "pybrops.popgen.cmat.CoancestryMatrix.CoancestryMatrix.to_csv"]], "to_hdf5() (pybrops.popgen.cmat.coancestrymatrix.coancestrymatrix method)": [[1045, "pybrops.popgen.cmat.CoancestryMatrix.CoancestryMatrix.to_hdf5"]], "to_pandas() (pybrops.popgen.cmat.coancestrymatrix.coancestrymatrix method)": [[1045, "pybrops.popgen.cmat.CoancestryMatrix.CoancestryMatrix.to_pandas"]], "ungroup() (pybrops.popgen.cmat.coancestrymatrix.coancestrymatrix method)": [[1045, "pybrops.popgen.cmat.CoancestryMatrix.CoancestryMatrix.ungroup"]], "ungroup_taxa() (pybrops.popgen.cmat.coancestrymatrix.coancestrymatrix method)": [[1045, "pybrops.popgen.cmat.CoancestryMatrix.CoancestryMatrix.ungroup_taxa"]], "check_is_coancestrymatrix() (in module pybrops.popgen.cmat.coancestrymatrix)": [[1046, "pybrops.popgen.cmat.CoancestryMatrix.check_is_CoancestryMatrix"]], "pybrops.popgen.cmat.densecoancestrymatrix": [[1047, "module-pybrops.popgen.cmat.DenseCoancestryMatrix"]], "densecoancestrymatrix (class in pybrops.popgen.cmat.densecoancestrymatrix)": [[1048, "pybrops.popgen.cmat.DenseCoancestryMatrix.DenseCoancestryMatrix"]], "__add__() (pybrops.popgen.cmat.densecoancestrymatrix.densecoancestrymatrix method)": [[1048, "pybrops.popgen.cmat.DenseCoancestryMatrix.DenseCoancestryMatrix.__add__"]], "__mul__() (pybrops.popgen.cmat.densecoancestrymatrix.densecoancestrymatrix method)": [[1048, "pybrops.popgen.cmat.DenseCoancestryMatrix.DenseCoancestryMatrix.__mul__"]], "adjoin() (pybrops.popgen.cmat.densecoancestrymatrix.densecoancestrymatrix method)": [[1048, "pybrops.popgen.cmat.DenseCoancestryMatrix.DenseCoancestryMatrix.adjoin"]], "adjoin_taxa() (pybrops.popgen.cmat.densecoancestrymatrix.densecoancestrymatrix method)": [[1048, "pybrops.popgen.cmat.DenseCoancestryMatrix.DenseCoancestryMatrix.adjoin_taxa"]], "append() (pybrops.popgen.cmat.densecoancestrymatrix.densecoancestrymatrix method)": [[1048, "pybrops.popgen.cmat.DenseCoancestryMatrix.DenseCoancestryMatrix.append"]], "append_taxa() (pybrops.popgen.cmat.densecoancestrymatrix.densecoancestrymatrix method)": [[1048, "pybrops.popgen.cmat.DenseCoancestryMatrix.DenseCoancestryMatrix.append_taxa"]], "apply_jitter() (pybrops.popgen.cmat.densecoancestrymatrix.densecoancestrymatrix method)": [[1048, "pybrops.popgen.cmat.DenseCoancestryMatrix.DenseCoancestryMatrix.apply_jitter"]], "coancestry() (pybrops.popgen.cmat.densecoancestrymatrix.densecoancestrymatrix method)": [[1048, "pybrops.popgen.cmat.DenseCoancestryMatrix.DenseCoancestryMatrix.coancestry"]], "concat() (pybrops.popgen.cmat.densecoancestrymatrix.densecoancestrymatrix class method)": [[1048, "pybrops.popgen.cmat.DenseCoancestryMatrix.DenseCoancestryMatrix.concat"]], "concat_taxa() (pybrops.popgen.cmat.densecoancestrymatrix.densecoancestrymatrix class method)": [[1048, "pybrops.popgen.cmat.DenseCoancestryMatrix.DenseCoancestryMatrix.concat_taxa"]], "copy() (pybrops.popgen.cmat.densecoancestrymatrix.densecoancestrymatrix method)": [[1048, "pybrops.popgen.cmat.DenseCoancestryMatrix.DenseCoancestryMatrix.copy"]], "deepcopy() (pybrops.popgen.cmat.densecoancestrymatrix.densecoancestrymatrix method)": [[1048, "pybrops.popgen.cmat.DenseCoancestryMatrix.DenseCoancestryMatrix.deepcopy"]], "delete() (pybrops.popgen.cmat.densecoancestrymatrix.densecoancestrymatrix method)": [[1048, "pybrops.popgen.cmat.DenseCoancestryMatrix.DenseCoancestryMatrix.delete"]], "delete_taxa() (pybrops.popgen.cmat.densecoancestrymatrix.densecoancestrymatrix method)": [[1048, "pybrops.popgen.cmat.DenseCoancestryMatrix.DenseCoancestryMatrix.delete_taxa"]], "from_csv() (pybrops.popgen.cmat.densecoancestrymatrix.densecoancestrymatrix class method)": [[1048, "pybrops.popgen.cmat.DenseCoancestryMatrix.DenseCoancestryMatrix.from_csv"]], "from_gmat() (pybrops.popgen.cmat.densecoancestrymatrix.densecoancestrymatrix class method)": [[1048, "pybrops.popgen.cmat.DenseCoancestryMatrix.DenseCoancestryMatrix.from_gmat"]], "from_hdf5() (pybrops.popgen.cmat.densecoancestrymatrix.densecoancestrymatrix class method)": [[1048, "pybrops.popgen.cmat.DenseCoancestryMatrix.DenseCoancestryMatrix.from_hdf5"]], "from_pandas() (pybrops.popgen.cmat.densecoancestrymatrix.densecoancestrymatrix class method)": [[1048, "pybrops.popgen.cmat.DenseCoancestryMatrix.DenseCoancestryMatrix.from_pandas"]], "group() (pybrops.popgen.cmat.densecoancestrymatrix.densecoancestrymatrix method)": [[1048, "pybrops.popgen.cmat.DenseCoancestryMatrix.DenseCoancestryMatrix.group"]], "group_taxa() (pybrops.popgen.cmat.densecoancestrymatrix.densecoancestrymatrix method)": [[1048, "pybrops.popgen.cmat.DenseCoancestryMatrix.DenseCoancestryMatrix.group_taxa"]], "incorp() (pybrops.popgen.cmat.densecoancestrymatrix.densecoancestrymatrix method)": [[1048, "pybrops.popgen.cmat.DenseCoancestryMatrix.DenseCoancestryMatrix.incorp"]], "incorp_taxa() (pybrops.popgen.cmat.densecoancestrymatrix.densecoancestrymatrix method)": [[1048, "pybrops.popgen.cmat.DenseCoancestryMatrix.DenseCoancestryMatrix.incorp_taxa"]], "insert() (pybrops.popgen.cmat.densecoancestrymatrix.densecoancestrymatrix method)": [[1048, "pybrops.popgen.cmat.DenseCoancestryMatrix.DenseCoancestryMatrix.insert"]], "insert_taxa() (pybrops.popgen.cmat.densecoancestrymatrix.densecoancestrymatrix method)": [[1048, "pybrops.popgen.cmat.DenseCoancestryMatrix.DenseCoancestryMatrix.insert_taxa"]], "inverse() (pybrops.popgen.cmat.densecoancestrymatrix.densecoancestrymatrix method)": [[1048, "pybrops.popgen.cmat.DenseCoancestryMatrix.DenseCoancestryMatrix.inverse"]], "is_grouped() (pybrops.popgen.cmat.densecoancestrymatrix.densecoancestrymatrix method)": [[1048, "pybrops.popgen.cmat.DenseCoancestryMatrix.DenseCoancestryMatrix.is_grouped"]], "is_grouped_taxa() (pybrops.popgen.cmat.densecoancestrymatrix.densecoancestrymatrix method)": [[1048, "pybrops.popgen.cmat.DenseCoancestryMatrix.DenseCoancestryMatrix.is_grouped_taxa"]], "is_positive_semidefinite() (pybrops.popgen.cmat.densecoancestrymatrix.densecoancestrymatrix method)": [[1048, "pybrops.popgen.cmat.DenseCoancestryMatrix.DenseCoancestryMatrix.is_positive_semidefinite"]], "is_square() (pybrops.popgen.cmat.densecoancestrymatrix.densecoancestrymatrix method)": [[1048, "pybrops.popgen.cmat.DenseCoancestryMatrix.DenseCoancestryMatrix.is_square"]], "is_square_taxa() (pybrops.popgen.cmat.densecoancestrymatrix.densecoancestrymatrix method)": [[1048, "pybrops.popgen.cmat.DenseCoancestryMatrix.DenseCoancestryMatrix.is_square_taxa"]], "kinship() (pybrops.popgen.cmat.densecoancestrymatrix.densecoancestrymatrix method)": [[1048, "pybrops.popgen.cmat.DenseCoancestryMatrix.DenseCoancestryMatrix.kinship"]], "lexsort() (pybrops.popgen.cmat.densecoancestrymatrix.densecoancestrymatrix method)": [[1048, "pybrops.popgen.cmat.DenseCoancestryMatrix.DenseCoancestryMatrix.lexsort"]], "lexsort_taxa() (pybrops.popgen.cmat.densecoancestrymatrix.densecoancestrymatrix method)": [[1048, "pybrops.popgen.cmat.DenseCoancestryMatrix.DenseCoancestryMatrix.lexsort_taxa"]], "mat (pybrops.popgen.cmat.densecoancestrymatrix.densecoancestrymatrix property)": [[1048, "pybrops.popgen.cmat.DenseCoancestryMatrix.DenseCoancestryMatrix.mat"]], "mat_asformat() (pybrops.popgen.cmat.densecoancestrymatrix.densecoancestrymatrix method)": [[1048, "pybrops.popgen.cmat.DenseCoancestryMatrix.DenseCoancestryMatrix.mat_asformat"]], "mat_ndim (pybrops.popgen.cmat.densecoancestrymatrix.densecoancestrymatrix property)": [[1048, "pybrops.popgen.cmat.DenseCoancestryMatrix.DenseCoancestryMatrix.mat_ndim"]], "mat_shape (pybrops.popgen.cmat.densecoancestrymatrix.densecoancestrymatrix property)": [[1048, "pybrops.popgen.cmat.DenseCoancestryMatrix.DenseCoancestryMatrix.mat_shape"]], "max() (pybrops.popgen.cmat.densecoancestrymatrix.densecoancestrymatrix method)": [[1048, "pybrops.popgen.cmat.DenseCoancestryMatrix.DenseCoancestryMatrix.max"]], "max_inbreeding() (pybrops.popgen.cmat.densecoancestrymatrix.densecoancestrymatrix method)": [[1048, "pybrops.popgen.cmat.DenseCoancestryMatrix.DenseCoancestryMatrix.max_inbreeding"]], "mean() (pybrops.popgen.cmat.densecoancestrymatrix.densecoancestrymatrix method)": [[1048, "pybrops.popgen.cmat.DenseCoancestryMatrix.DenseCoancestryMatrix.mean"]], "min() (pybrops.popgen.cmat.densecoancestrymatrix.densecoancestrymatrix method)": [[1048, "pybrops.popgen.cmat.DenseCoancestryMatrix.DenseCoancestryMatrix.min"]], "min_inbreeding() (pybrops.popgen.cmat.densecoancestrymatrix.densecoancestrymatrix method)": [[1048, "pybrops.popgen.cmat.DenseCoancestryMatrix.DenseCoancestryMatrix.min_inbreeding"]], "nsquare (pybrops.popgen.cmat.densecoancestrymatrix.densecoancestrymatrix property)": [[1048, "pybrops.popgen.cmat.DenseCoancestryMatrix.DenseCoancestryMatrix.nsquare"]], "nsquare_taxa (pybrops.popgen.cmat.densecoancestrymatrix.densecoancestrymatrix property)": [[1048, "pybrops.popgen.cmat.DenseCoancestryMatrix.DenseCoancestryMatrix.nsquare_taxa"]], "ntaxa (pybrops.popgen.cmat.densecoancestrymatrix.densecoancestrymatrix property)": [[1048, "pybrops.popgen.cmat.DenseCoancestryMatrix.DenseCoancestryMatrix.ntaxa"]], "remove() (pybrops.popgen.cmat.densecoancestrymatrix.densecoancestrymatrix method)": [[1048, "pybrops.popgen.cmat.DenseCoancestryMatrix.DenseCoancestryMatrix.remove"]], "remove_taxa() (pybrops.popgen.cmat.densecoancestrymatrix.densecoancestrymatrix method)": [[1048, "pybrops.popgen.cmat.DenseCoancestryMatrix.DenseCoancestryMatrix.remove_taxa"]], "reorder() (pybrops.popgen.cmat.densecoancestrymatrix.densecoancestrymatrix method)": [[1048, "pybrops.popgen.cmat.DenseCoancestryMatrix.DenseCoancestryMatrix.reorder"]], "reorder_taxa() (pybrops.popgen.cmat.densecoancestrymatrix.densecoancestrymatrix method)": [[1048, "pybrops.popgen.cmat.DenseCoancestryMatrix.DenseCoancestryMatrix.reorder_taxa"]], "select() (pybrops.popgen.cmat.densecoancestrymatrix.densecoancestrymatrix method)": [[1048, "pybrops.popgen.cmat.DenseCoancestryMatrix.DenseCoancestryMatrix.select"]], "select_taxa() (pybrops.popgen.cmat.densecoancestrymatrix.densecoancestrymatrix method)": [[1048, "pybrops.popgen.cmat.DenseCoancestryMatrix.DenseCoancestryMatrix.select_taxa"]], "sort() (pybrops.popgen.cmat.densecoancestrymatrix.densecoancestrymatrix method)": [[1048, "pybrops.popgen.cmat.DenseCoancestryMatrix.DenseCoancestryMatrix.sort"]], "sort_taxa() (pybrops.popgen.cmat.densecoancestrymatrix.densecoancestrymatrix method)": [[1048, "pybrops.popgen.cmat.DenseCoancestryMatrix.DenseCoancestryMatrix.sort_taxa"]], "square_axes (pybrops.popgen.cmat.densecoancestrymatrix.densecoancestrymatrix property)": [[1048, "pybrops.popgen.cmat.DenseCoancestryMatrix.DenseCoancestryMatrix.square_axes"]], "square_axes_len (pybrops.popgen.cmat.densecoancestrymatrix.densecoancestrymatrix property)": [[1048, "pybrops.popgen.cmat.DenseCoancestryMatrix.DenseCoancestryMatrix.square_axes_len"]], "square_taxa_axes (pybrops.popgen.cmat.densecoancestrymatrix.densecoancestrymatrix property)": [[1048, "pybrops.popgen.cmat.DenseCoancestryMatrix.DenseCoancestryMatrix.square_taxa_axes"]], "square_taxa_axes_len (pybrops.popgen.cmat.densecoancestrymatrix.densecoancestrymatrix property)": [[1048, "pybrops.popgen.cmat.DenseCoancestryMatrix.DenseCoancestryMatrix.square_taxa_axes_len"]], "taxa (pybrops.popgen.cmat.densecoancestrymatrix.densecoancestrymatrix property)": [[1048, "pybrops.popgen.cmat.DenseCoancestryMatrix.DenseCoancestryMatrix.taxa"]], "taxa_axis (pybrops.popgen.cmat.densecoancestrymatrix.densecoancestrymatrix property)": [[1048, "pybrops.popgen.cmat.DenseCoancestryMatrix.DenseCoancestryMatrix.taxa_axis"]], "taxa_grp (pybrops.popgen.cmat.densecoancestrymatrix.densecoancestrymatrix property)": [[1048, "pybrops.popgen.cmat.DenseCoancestryMatrix.DenseCoancestryMatrix.taxa_grp"]], "taxa_grp_len (pybrops.popgen.cmat.densecoancestrymatrix.densecoancestrymatrix property)": [[1048, "pybrops.popgen.cmat.DenseCoancestryMatrix.DenseCoancestryMatrix.taxa_grp_len"]], "taxa_grp_name (pybrops.popgen.cmat.densecoancestrymatrix.densecoancestrymatrix property)": [[1048, "pybrops.popgen.cmat.DenseCoancestryMatrix.DenseCoancestryMatrix.taxa_grp_name"]], "taxa_grp_spix (pybrops.popgen.cmat.densecoancestrymatrix.densecoancestrymatrix property)": [[1048, "pybrops.popgen.cmat.DenseCoancestryMatrix.DenseCoancestryMatrix.taxa_grp_spix"]], "taxa_grp_stix (pybrops.popgen.cmat.densecoancestrymatrix.densecoancestrymatrix property)": [[1048, "pybrops.popgen.cmat.DenseCoancestryMatrix.DenseCoancestryMatrix.taxa_grp_stix"]], "to_csv() (pybrops.popgen.cmat.densecoancestrymatrix.densecoancestrymatrix method)": [[1048, "pybrops.popgen.cmat.DenseCoancestryMatrix.DenseCoancestryMatrix.to_csv"]], "to_hdf5() (pybrops.popgen.cmat.densecoancestrymatrix.densecoancestrymatrix method)": [[1048, "pybrops.popgen.cmat.DenseCoancestryMatrix.DenseCoancestryMatrix.to_hdf5"]], "to_pandas() (pybrops.popgen.cmat.densecoancestrymatrix.densecoancestrymatrix method)": [[1048, "pybrops.popgen.cmat.DenseCoancestryMatrix.DenseCoancestryMatrix.to_pandas"]], "ungroup() (pybrops.popgen.cmat.densecoancestrymatrix.densecoancestrymatrix method)": [[1048, "pybrops.popgen.cmat.DenseCoancestryMatrix.DenseCoancestryMatrix.ungroup"]], "ungroup_taxa() (pybrops.popgen.cmat.densecoancestrymatrix.densecoancestrymatrix method)": [[1048, "pybrops.popgen.cmat.DenseCoancestryMatrix.DenseCoancestryMatrix.ungroup_taxa"]], "check_is_densecoancestrymatrix() (in module pybrops.popgen.cmat.densecoancestrymatrix)": [[1049, "pybrops.popgen.cmat.DenseCoancestryMatrix.check_is_DenseCoancestryMatrix"]], "pybrops.popgen.cmat.densegeneralizedweightedcoancestrymatrix": [[1050, "module-pybrops.popgen.cmat.DenseGeneralizedWeightedCoancestryMatrix"]], "densegeneralizedweightedcoancestrymatrix (class in pybrops.popgen.cmat.densegeneralizedweightedcoancestrymatrix)": [[1051, "pybrops.popgen.cmat.DenseGeneralizedWeightedCoancestryMatrix.DenseGeneralizedWeightedCoancestryMatrix"]], "__add__() (pybrops.popgen.cmat.densegeneralizedweightedcoancestrymatrix.densegeneralizedweightedcoancestrymatrix method)": [[1051, "pybrops.popgen.cmat.DenseGeneralizedWeightedCoancestryMatrix.DenseGeneralizedWeightedCoancestryMatrix.__add__"]], "__mul__() (pybrops.popgen.cmat.densegeneralizedweightedcoancestrymatrix.densegeneralizedweightedcoancestrymatrix method)": [[1051, "pybrops.popgen.cmat.DenseGeneralizedWeightedCoancestryMatrix.DenseGeneralizedWeightedCoancestryMatrix.__mul__"]], "adjoin() (pybrops.popgen.cmat.densegeneralizedweightedcoancestrymatrix.densegeneralizedweightedcoancestrymatrix method)": [[1051, "pybrops.popgen.cmat.DenseGeneralizedWeightedCoancestryMatrix.DenseGeneralizedWeightedCoancestryMatrix.adjoin"]], "adjoin_taxa() (pybrops.popgen.cmat.densegeneralizedweightedcoancestrymatrix.densegeneralizedweightedcoancestrymatrix method)": [[1051, "pybrops.popgen.cmat.DenseGeneralizedWeightedCoancestryMatrix.DenseGeneralizedWeightedCoancestryMatrix.adjoin_taxa"]], "append() (pybrops.popgen.cmat.densegeneralizedweightedcoancestrymatrix.densegeneralizedweightedcoancestrymatrix method)": [[1051, "pybrops.popgen.cmat.DenseGeneralizedWeightedCoancestryMatrix.DenseGeneralizedWeightedCoancestryMatrix.append"]], "append_taxa() (pybrops.popgen.cmat.densegeneralizedweightedcoancestrymatrix.densegeneralizedweightedcoancestrymatrix method)": [[1051, "pybrops.popgen.cmat.DenseGeneralizedWeightedCoancestryMatrix.DenseGeneralizedWeightedCoancestryMatrix.append_taxa"]], "apply_jitter() (pybrops.popgen.cmat.densegeneralizedweightedcoancestrymatrix.densegeneralizedweightedcoancestrymatrix method)": [[1051, "pybrops.popgen.cmat.DenseGeneralizedWeightedCoancestryMatrix.DenseGeneralizedWeightedCoancestryMatrix.apply_jitter"]], "coancestry() (pybrops.popgen.cmat.densegeneralizedweightedcoancestrymatrix.densegeneralizedweightedcoancestrymatrix method)": [[1051, "pybrops.popgen.cmat.DenseGeneralizedWeightedCoancestryMatrix.DenseGeneralizedWeightedCoancestryMatrix.coancestry"]], "concat() (pybrops.popgen.cmat.densegeneralizedweightedcoancestrymatrix.densegeneralizedweightedcoancestrymatrix class method)": [[1051, "pybrops.popgen.cmat.DenseGeneralizedWeightedCoancestryMatrix.DenseGeneralizedWeightedCoancestryMatrix.concat"]], "concat_taxa() (pybrops.popgen.cmat.densegeneralizedweightedcoancestrymatrix.densegeneralizedweightedcoancestrymatrix class method)": [[1051, "pybrops.popgen.cmat.DenseGeneralizedWeightedCoancestryMatrix.DenseGeneralizedWeightedCoancestryMatrix.concat_taxa"]], "copy() (pybrops.popgen.cmat.densegeneralizedweightedcoancestrymatrix.densegeneralizedweightedcoancestrymatrix method)": [[1051, "pybrops.popgen.cmat.DenseGeneralizedWeightedCoancestryMatrix.DenseGeneralizedWeightedCoancestryMatrix.copy"]], "deepcopy() (pybrops.popgen.cmat.densegeneralizedweightedcoancestrymatrix.densegeneralizedweightedcoancestrymatrix method)": [[1051, "pybrops.popgen.cmat.DenseGeneralizedWeightedCoancestryMatrix.DenseGeneralizedWeightedCoancestryMatrix.deepcopy"]], "delete() (pybrops.popgen.cmat.densegeneralizedweightedcoancestrymatrix.densegeneralizedweightedcoancestrymatrix method)": [[1051, "pybrops.popgen.cmat.DenseGeneralizedWeightedCoancestryMatrix.DenseGeneralizedWeightedCoancestryMatrix.delete"]], "delete_taxa() (pybrops.popgen.cmat.densegeneralizedweightedcoancestrymatrix.densegeneralizedweightedcoancestrymatrix method)": [[1051, "pybrops.popgen.cmat.DenseGeneralizedWeightedCoancestryMatrix.DenseGeneralizedWeightedCoancestryMatrix.delete_taxa"]], "from_csv() (pybrops.popgen.cmat.densegeneralizedweightedcoancestrymatrix.densegeneralizedweightedcoancestrymatrix class method)": [[1051, "pybrops.popgen.cmat.DenseGeneralizedWeightedCoancestryMatrix.DenseGeneralizedWeightedCoancestryMatrix.from_csv"]], "from_gmat() (pybrops.popgen.cmat.densegeneralizedweightedcoancestrymatrix.densegeneralizedweightedcoancestrymatrix class method)": [[1051, "pybrops.popgen.cmat.DenseGeneralizedWeightedCoancestryMatrix.DenseGeneralizedWeightedCoancestryMatrix.from_gmat"]], "from_hdf5() (pybrops.popgen.cmat.densegeneralizedweightedcoancestrymatrix.densegeneralizedweightedcoancestrymatrix class method)": [[1051, "pybrops.popgen.cmat.DenseGeneralizedWeightedCoancestryMatrix.DenseGeneralizedWeightedCoancestryMatrix.from_hdf5"]], "from_pandas() (pybrops.popgen.cmat.densegeneralizedweightedcoancestrymatrix.densegeneralizedweightedcoancestrymatrix class method)": [[1051, "pybrops.popgen.cmat.DenseGeneralizedWeightedCoancestryMatrix.DenseGeneralizedWeightedCoancestryMatrix.from_pandas"]], "group() (pybrops.popgen.cmat.densegeneralizedweightedcoancestrymatrix.densegeneralizedweightedcoancestrymatrix method)": [[1051, "pybrops.popgen.cmat.DenseGeneralizedWeightedCoancestryMatrix.DenseGeneralizedWeightedCoancestryMatrix.group"]], "group_taxa() (pybrops.popgen.cmat.densegeneralizedweightedcoancestrymatrix.densegeneralizedweightedcoancestrymatrix method)": [[1051, "pybrops.popgen.cmat.DenseGeneralizedWeightedCoancestryMatrix.DenseGeneralizedWeightedCoancestryMatrix.group_taxa"]], "incorp() (pybrops.popgen.cmat.densegeneralizedweightedcoancestrymatrix.densegeneralizedweightedcoancestrymatrix method)": [[1051, "pybrops.popgen.cmat.DenseGeneralizedWeightedCoancestryMatrix.DenseGeneralizedWeightedCoancestryMatrix.incorp"]], "incorp_taxa() (pybrops.popgen.cmat.densegeneralizedweightedcoancestrymatrix.densegeneralizedweightedcoancestrymatrix method)": [[1051, "pybrops.popgen.cmat.DenseGeneralizedWeightedCoancestryMatrix.DenseGeneralizedWeightedCoancestryMatrix.incorp_taxa"]], "insert() (pybrops.popgen.cmat.densegeneralizedweightedcoancestrymatrix.densegeneralizedweightedcoancestrymatrix method)": [[1051, "pybrops.popgen.cmat.DenseGeneralizedWeightedCoancestryMatrix.DenseGeneralizedWeightedCoancestryMatrix.insert"]], "insert_taxa() (pybrops.popgen.cmat.densegeneralizedweightedcoancestrymatrix.densegeneralizedweightedcoancestrymatrix method)": [[1051, "pybrops.popgen.cmat.DenseGeneralizedWeightedCoancestryMatrix.DenseGeneralizedWeightedCoancestryMatrix.insert_taxa"]], "inverse() (pybrops.popgen.cmat.densegeneralizedweightedcoancestrymatrix.densegeneralizedweightedcoancestrymatrix method)": [[1051, "pybrops.popgen.cmat.DenseGeneralizedWeightedCoancestryMatrix.DenseGeneralizedWeightedCoancestryMatrix.inverse"]], "is_grouped() (pybrops.popgen.cmat.densegeneralizedweightedcoancestrymatrix.densegeneralizedweightedcoancestrymatrix method)": [[1051, "pybrops.popgen.cmat.DenseGeneralizedWeightedCoancestryMatrix.DenseGeneralizedWeightedCoancestryMatrix.is_grouped"]], "is_grouped_taxa() (pybrops.popgen.cmat.densegeneralizedweightedcoancestrymatrix.densegeneralizedweightedcoancestrymatrix method)": [[1051, "pybrops.popgen.cmat.DenseGeneralizedWeightedCoancestryMatrix.DenseGeneralizedWeightedCoancestryMatrix.is_grouped_taxa"]], "is_positive_semidefinite() (pybrops.popgen.cmat.densegeneralizedweightedcoancestrymatrix.densegeneralizedweightedcoancestrymatrix method)": [[1051, "pybrops.popgen.cmat.DenseGeneralizedWeightedCoancestryMatrix.DenseGeneralizedWeightedCoancestryMatrix.is_positive_semidefinite"]], "is_square() (pybrops.popgen.cmat.densegeneralizedweightedcoancestrymatrix.densegeneralizedweightedcoancestrymatrix method)": [[1051, "pybrops.popgen.cmat.DenseGeneralizedWeightedCoancestryMatrix.DenseGeneralizedWeightedCoancestryMatrix.is_square"]], "is_square_taxa() (pybrops.popgen.cmat.densegeneralizedweightedcoancestrymatrix.densegeneralizedweightedcoancestrymatrix method)": [[1051, "pybrops.popgen.cmat.DenseGeneralizedWeightedCoancestryMatrix.DenseGeneralizedWeightedCoancestryMatrix.is_square_taxa"]], "kinship() (pybrops.popgen.cmat.densegeneralizedweightedcoancestrymatrix.densegeneralizedweightedcoancestrymatrix method)": [[1051, "pybrops.popgen.cmat.DenseGeneralizedWeightedCoancestryMatrix.DenseGeneralizedWeightedCoancestryMatrix.kinship"]], "lexsort() (pybrops.popgen.cmat.densegeneralizedweightedcoancestrymatrix.densegeneralizedweightedcoancestrymatrix method)": [[1051, "pybrops.popgen.cmat.DenseGeneralizedWeightedCoancestryMatrix.DenseGeneralizedWeightedCoancestryMatrix.lexsort"]], "lexsort_taxa() (pybrops.popgen.cmat.densegeneralizedweightedcoancestrymatrix.densegeneralizedweightedcoancestrymatrix method)": [[1051, "pybrops.popgen.cmat.DenseGeneralizedWeightedCoancestryMatrix.DenseGeneralizedWeightedCoancestryMatrix.lexsort_taxa"]], "mat (pybrops.popgen.cmat.densegeneralizedweightedcoancestrymatrix.densegeneralizedweightedcoancestrymatrix property)": [[1051, "pybrops.popgen.cmat.DenseGeneralizedWeightedCoancestryMatrix.DenseGeneralizedWeightedCoancestryMatrix.mat"]], "mat_asformat() (pybrops.popgen.cmat.densegeneralizedweightedcoancestrymatrix.densegeneralizedweightedcoancestrymatrix method)": [[1051, "pybrops.popgen.cmat.DenseGeneralizedWeightedCoancestryMatrix.DenseGeneralizedWeightedCoancestryMatrix.mat_asformat"]], "mat_ndim (pybrops.popgen.cmat.densegeneralizedweightedcoancestrymatrix.densegeneralizedweightedcoancestrymatrix property)": [[1051, "pybrops.popgen.cmat.DenseGeneralizedWeightedCoancestryMatrix.DenseGeneralizedWeightedCoancestryMatrix.mat_ndim"]], "mat_shape (pybrops.popgen.cmat.densegeneralizedweightedcoancestrymatrix.densegeneralizedweightedcoancestrymatrix property)": [[1051, "pybrops.popgen.cmat.DenseGeneralizedWeightedCoancestryMatrix.DenseGeneralizedWeightedCoancestryMatrix.mat_shape"]], "max() (pybrops.popgen.cmat.densegeneralizedweightedcoancestrymatrix.densegeneralizedweightedcoancestrymatrix method)": [[1051, "pybrops.popgen.cmat.DenseGeneralizedWeightedCoancestryMatrix.DenseGeneralizedWeightedCoancestryMatrix.max"]], "max_inbreeding() (pybrops.popgen.cmat.densegeneralizedweightedcoancestrymatrix.densegeneralizedweightedcoancestrymatrix method)": [[1051, "pybrops.popgen.cmat.DenseGeneralizedWeightedCoancestryMatrix.DenseGeneralizedWeightedCoancestryMatrix.max_inbreeding"]], "mean() (pybrops.popgen.cmat.densegeneralizedweightedcoancestrymatrix.densegeneralizedweightedcoancestrymatrix method)": [[1051, "pybrops.popgen.cmat.DenseGeneralizedWeightedCoancestryMatrix.DenseGeneralizedWeightedCoancestryMatrix.mean"]], "min() (pybrops.popgen.cmat.densegeneralizedweightedcoancestrymatrix.densegeneralizedweightedcoancestrymatrix method)": [[1051, "pybrops.popgen.cmat.DenseGeneralizedWeightedCoancestryMatrix.DenseGeneralizedWeightedCoancestryMatrix.min"]], "min_inbreeding() (pybrops.popgen.cmat.densegeneralizedweightedcoancestrymatrix.densegeneralizedweightedcoancestrymatrix method)": [[1051, "pybrops.popgen.cmat.DenseGeneralizedWeightedCoancestryMatrix.DenseGeneralizedWeightedCoancestryMatrix.min_inbreeding"]], "nsquare (pybrops.popgen.cmat.densegeneralizedweightedcoancestrymatrix.densegeneralizedweightedcoancestrymatrix property)": [[1051, "pybrops.popgen.cmat.DenseGeneralizedWeightedCoancestryMatrix.DenseGeneralizedWeightedCoancestryMatrix.nsquare"]], "nsquare_taxa (pybrops.popgen.cmat.densegeneralizedweightedcoancestrymatrix.densegeneralizedweightedcoancestrymatrix property)": [[1051, "pybrops.popgen.cmat.DenseGeneralizedWeightedCoancestryMatrix.DenseGeneralizedWeightedCoancestryMatrix.nsquare_taxa"]], "ntaxa (pybrops.popgen.cmat.densegeneralizedweightedcoancestrymatrix.densegeneralizedweightedcoancestrymatrix property)": [[1051, "pybrops.popgen.cmat.DenseGeneralizedWeightedCoancestryMatrix.DenseGeneralizedWeightedCoancestryMatrix.ntaxa"]], "remove() (pybrops.popgen.cmat.densegeneralizedweightedcoancestrymatrix.densegeneralizedweightedcoancestrymatrix method)": [[1051, "pybrops.popgen.cmat.DenseGeneralizedWeightedCoancestryMatrix.DenseGeneralizedWeightedCoancestryMatrix.remove"]], "remove_taxa() (pybrops.popgen.cmat.densegeneralizedweightedcoancestrymatrix.densegeneralizedweightedcoancestrymatrix method)": [[1051, "pybrops.popgen.cmat.DenseGeneralizedWeightedCoancestryMatrix.DenseGeneralizedWeightedCoancestryMatrix.remove_taxa"]], "reorder() (pybrops.popgen.cmat.densegeneralizedweightedcoancestrymatrix.densegeneralizedweightedcoancestrymatrix method)": [[1051, "pybrops.popgen.cmat.DenseGeneralizedWeightedCoancestryMatrix.DenseGeneralizedWeightedCoancestryMatrix.reorder"]], "reorder_taxa() (pybrops.popgen.cmat.densegeneralizedweightedcoancestrymatrix.densegeneralizedweightedcoancestrymatrix method)": [[1051, "pybrops.popgen.cmat.DenseGeneralizedWeightedCoancestryMatrix.DenseGeneralizedWeightedCoancestryMatrix.reorder_taxa"]], "select() (pybrops.popgen.cmat.densegeneralizedweightedcoancestrymatrix.densegeneralizedweightedcoancestrymatrix method)": [[1051, "pybrops.popgen.cmat.DenseGeneralizedWeightedCoancestryMatrix.DenseGeneralizedWeightedCoancestryMatrix.select"]], "select_taxa() (pybrops.popgen.cmat.densegeneralizedweightedcoancestrymatrix.densegeneralizedweightedcoancestrymatrix method)": [[1051, "pybrops.popgen.cmat.DenseGeneralizedWeightedCoancestryMatrix.DenseGeneralizedWeightedCoancestryMatrix.select_taxa"]], "sort() (pybrops.popgen.cmat.densegeneralizedweightedcoancestrymatrix.densegeneralizedweightedcoancestrymatrix method)": [[1051, "pybrops.popgen.cmat.DenseGeneralizedWeightedCoancestryMatrix.DenseGeneralizedWeightedCoancestryMatrix.sort"]], "sort_taxa() (pybrops.popgen.cmat.densegeneralizedweightedcoancestrymatrix.densegeneralizedweightedcoancestrymatrix method)": [[1051, "pybrops.popgen.cmat.DenseGeneralizedWeightedCoancestryMatrix.DenseGeneralizedWeightedCoancestryMatrix.sort_taxa"]], "square_axes (pybrops.popgen.cmat.densegeneralizedweightedcoancestrymatrix.densegeneralizedweightedcoancestrymatrix property)": [[1051, "pybrops.popgen.cmat.DenseGeneralizedWeightedCoancestryMatrix.DenseGeneralizedWeightedCoancestryMatrix.square_axes"]], "square_axes_len (pybrops.popgen.cmat.densegeneralizedweightedcoancestrymatrix.densegeneralizedweightedcoancestrymatrix property)": [[1051, "pybrops.popgen.cmat.DenseGeneralizedWeightedCoancestryMatrix.DenseGeneralizedWeightedCoancestryMatrix.square_axes_len"]], "square_taxa_axes (pybrops.popgen.cmat.densegeneralizedweightedcoancestrymatrix.densegeneralizedweightedcoancestrymatrix property)": [[1051, "pybrops.popgen.cmat.DenseGeneralizedWeightedCoancestryMatrix.DenseGeneralizedWeightedCoancestryMatrix.square_taxa_axes"]], "square_taxa_axes_len (pybrops.popgen.cmat.densegeneralizedweightedcoancestrymatrix.densegeneralizedweightedcoancestrymatrix property)": [[1051, "pybrops.popgen.cmat.DenseGeneralizedWeightedCoancestryMatrix.DenseGeneralizedWeightedCoancestryMatrix.square_taxa_axes_len"]], "taxa (pybrops.popgen.cmat.densegeneralizedweightedcoancestrymatrix.densegeneralizedweightedcoancestrymatrix property)": [[1051, "pybrops.popgen.cmat.DenseGeneralizedWeightedCoancestryMatrix.DenseGeneralizedWeightedCoancestryMatrix.taxa"]], "taxa_axis (pybrops.popgen.cmat.densegeneralizedweightedcoancestrymatrix.densegeneralizedweightedcoancestrymatrix property)": [[1051, "pybrops.popgen.cmat.DenseGeneralizedWeightedCoancestryMatrix.DenseGeneralizedWeightedCoancestryMatrix.taxa_axis"]], "taxa_grp (pybrops.popgen.cmat.densegeneralizedweightedcoancestrymatrix.densegeneralizedweightedcoancestrymatrix property)": [[1051, "pybrops.popgen.cmat.DenseGeneralizedWeightedCoancestryMatrix.DenseGeneralizedWeightedCoancestryMatrix.taxa_grp"]], "taxa_grp_len (pybrops.popgen.cmat.densegeneralizedweightedcoancestrymatrix.densegeneralizedweightedcoancestrymatrix property)": [[1051, "pybrops.popgen.cmat.DenseGeneralizedWeightedCoancestryMatrix.DenseGeneralizedWeightedCoancestryMatrix.taxa_grp_len"]], "taxa_grp_name (pybrops.popgen.cmat.densegeneralizedweightedcoancestrymatrix.densegeneralizedweightedcoancestrymatrix property)": [[1051, "pybrops.popgen.cmat.DenseGeneralizedWeightedCoancestryMatrix.DenseGeneralizedWeightedCoancestryMatrix.taxa_grp_name"]], "taxa_grp_spix (pybrops.popgen.cmat.densegeneralizedweightedcoancestrymatrix.densegeneralizedweightedcoancestrymatrix property)": [[1051, "pybrops.popgen.cmat.DenseGeneralizedWeightedCoancestryMatrix.DenseGeneralizedWeightedCoancestryMatrix.taxa_grp_spix"]], "taxa_grp_stix (pybrops.popgen.cmat.densegeneralizedweightedcoancestrymatrix.densegeneralizedweightedcoancestrymatrix property)": [[1051, "pybrops.popgen.cmat.DenseGeneralizedWeightedCoancestryMatrix.DenseGeneralizedWeightedCoancestryMatrix.taxa_grp_stix"]], "to_csv() (pybrops.popgen.cmat.densegeneralizedweightedcoancestrymatrix.densegeneralizedweightedcoancestrymatrix method)": [[1051, "pybrops.popgen.cmat.DenseGeneralizedWeightedCoancestryMatrix.DenseGeneralizedWeightedCoancestryMatrix.to_csv"]], "to_hdf5() (pybrops.popgen.cmat.densegeneralizedweightedcoancestrymatrix.densegeneralizedweightedcoancestrymatrix method)": [[1051, "pybrops.popgen.cmat.DenseGeneralizedWeightedCoancestryMatrix.DenseGeneralizedWeightedCoancestryMatrix.to_hdf5"]], "to_pandas() (pybrops.popgen.cmat.densegeneralizedweightedcoancestrymatrix.densegeneralizedweightedcoancestrymatrix method)": [[1051, "pybrops.popgen.cmat.DenseGeneralizedWeightedCoancestryMatrix.DenseGeneralizedWeightedCoancestryMatrix.to_pandas"]], "ungroup() (pybrops.popgen.cmat.densegeneralizedweightedcoancestrymatrix.densegeneralizedweightedcoancestrymatrix method)": [[1051, "pybrops.popgen.cmat.DenseGeneralizedWeightedCoancestryMatrix.DenseGeneralizedWeightedCoancestryMatrix.ungroup"]], "ungroup_taxa() (pybrops.popgen.cmat.densegeneralizedweightedcoancestrymatrix.densegeneralizedweightedcoancestrymatrix method)": [[1051, "pybrops.popgen.cmat.DenseGeneralizedWeightedCoancestryMatrix.DenseGeneralizedWeightedCoancestryMatrix.ungroup_taxa"]], "check_is_densegeneralizedweightedcoancestrymatrix() (in module pybrops.popgen.cmat.densegeneralizedweightedcoancestrymatrix)": [[1052, "pybrops.popgen.cmat.DenseGeneralizedWeightedCoancestryMatrix.check_is_DenseGeneralizedWeightedCoancestryMatrix"]], "pybrops.popgen.cmat.densemolecularcoancestrymatrix": [[1053, "module-pybrops.popgen.cmat.DenseMolecularCoancestryMatrix"]], "densemolecularcoancestrymatrix (class in pybrops.popgen.cmat.densemolecularcoancestrymatrix)": [[1054, "pybrops.popgen.cmat.DenseMolecularCoancestryMatrix.DenseMolecularCoancestryMatrix"]], "__add__() (pybrops.popgen.cmat.densemolecularcoancestrymatrix.densemolecularcoancestrymatrix method)": [[1054, "pybrops.popgen.cmat.DenseMolecularCoancestryMatrix.DenseMolecularCoancestryMatrix.__add__"]], "__mul__() (pybrops.popgen.cmat.densemolecularcoancestrymatrix.densemolecularcoancestrymatrix method)": [[1054, "pybrops.popgen.cmat.DenseMolecularCoancestryMatrix.DenseMolecularCoancestryMatrix.__mul__"]], "adjoin() (pybrops.popgen.cmat.densemolecularcoancestrymatrix.densemolecularcoancestrymatrix method)": [[1054, "pybrops.popgen.cmat.DenseMolecularCoancestryMatrix.DenseMolecularCoancestryMatrix.adjoin"]], "adjoin_taxa() (pybrops.popgen.cmat.densemolecularcoancestrymatrix.densemolecularcoancestrymatrix method)": [[1054, "pybrops.popgen.cmat.DenseMolecularCoancestryMatrix.DenseMolecularCoancestryMatrix.adjoin_taxa"]], "append() (pybrops.popgen.cmat.densemolecularcoancestrymatrix.densemolecularcoancestrymatrix method)": [[1054, "pybrops.popgen.cmat.DenseMolecularCoancestryMatrix.DenseMolecularCoancestryMatrix.append"]], "append_taxa() (pybrops.popgen.cmat.densemolecularcoancestrymatrix.densemolecularcoancestrymatrix method)": [[1054, "pybrops.popgen.cmat.DenseMolecularCoancestryMatrix.DenseMolecularCoancestryMatrix.append_taxa"]], "apply_jitter() (pybrops.popgen.cmat.densemolecularcoancestrymatrix.densemolecularcoancestrymatrix method)": [[1054, "pybrops.popgen.cmat.DenseMolecularCoancestryMatrix.DenseMolecularCoancestryMatrix.apply_jitter"]], "coancestry() (pybrops.popgen.cmat.densemolecularcoancestrymatrix.densemolecularcoancestrymatrix method)": [[1054, "pybrops.popgen.cmat.DenseMolecularCoancestryMatrix.DenseMolecularCoancestryMatrix.coancestry"]], "concat() (pybrops.popgen.cmat.densemolecularcoancestrymatrix.densemolecularcoancestrymatrix class method)": [[1054, "pybrops.popgen.cmat.DenseMolecularCoancestryMatrix.DenseMolecularCoancestryMatrix.concat"]], "concat_taxa() (pybrops.popgen.cmat.densemolecularcoancestrymatrix.densemolecularcoancestrymatrix class method)": [[1054, "pybrops.popgen.cmat.DenseMolecularCoancestryMatrix.DenseMolecularCoancestryMatrix.concat_taxa"]], "copy() (pybrops.popgen.cmat.densemolecularcoancestrymatrix.densemolecularcoancestrymatrix method)": [[1054, "pybrops.popgen.cmat.DenseMolecularCoancestryMatrix.DenseMolecularCoancestryMatrix.copy"]], "deepcopy() (pybrops.popgen.cmat.densemolecularcoancestrymatrix.densemolecularcoancestrymatrix method)": [[1054, "pybrops.popgen.cmat.DenseMolecularCoancestryMatrix.DenseMolecularCoancestryMatrix.deepcopy"]], "delete() (pybrops.popgen.cmat.densemolecularcoancestrymatrix.densemolecularcoancestrymatrix method)": [[1054, "pybrops.popgen.cmat.DenseMolecularCoancestryMatrix.DenseMolecularCoancestryMatrix.delete"]], "delete_taxa() (pybrops.popgen.cmat.densemolecularcoancestrymatrix.densemolecularcoancestrymatrix method)": [[1054, "pybrops.popgen.cmat.DenseMolecularCoancestryMatrix.DenseMolecularCoancestryMatrix.delete_taxa"]], "from_csv() (pybrops.popgen.cmat.densemolecularcoancestrymatrix.densemolecularcoancestrymatrix class method)": [[1054, "pybrops.popgen.cmat.DenseMolecularCoancestryMatrix.DenseMolecularCoancestryMatrix.from_csv"]], "from_gmat() (pybrops.popgen.cmat.densemolecularcoancestrymatrix.densemolecularcoancestrymatrix class method)": [[1054, "pybrops.popgen.cmat.DenseMolecularCoancestryMatrix.DenseMolecularCoancestryMatrix.from_gmat"]], "from_hdf5() (pybrops.popgen.cmat.densemolecularcoancestrymatrix.densemolecularcoancestrymatrix class method)": [[1054, "pybrops.popgen.cmat.DenseMolecularCoancestryMatrix.DenseMolecularCoancestryMatrix.from_hdf5"]], "from_pandas() (pybrops.popgen.cmat.densemolecularcoancestrymatrix.densemolecularcoancestrymatrix class method)": [[1054, "pybrops.popgen.cmat.DenseMolecularCoancestryMatrix.DenseMolecularCoancestryMatrix.from_pandas"]], "group() (pybrops.popgen.cmat.densemolecularcoancestrymatrix.densemolecularcoancestrymatrix method)": [[1054, "pybrops.popgen.cmat.DenseMolecularCoancestryMatrix.DenseMolecularCoancestryMatrix.group"]], "group_taxa() (pybrops.popgen.cmat.densemolecularcoancestrymatrix.densemolecularcoancestrymatrix method)": [[1054, "pybrops.popgen.cmat.DenseMolecularCoancestryMatrix.DenseMolecularCoancestryMatrix.group_taxa"]], "incorp() (pybrops.popgen.cmat.densemolecularcoancestrymatrix.densemolecularcoancestrymatrix method)": [[1054, "pybrops.popgen.cmat.DenseMolecularCoancestryMatrix.DenseMolecularCoancestryMatrix.incorp"]], "incorp_taxa() (pybrops.popgen.cmat.densemolecularcoancestrymatrix.densemolecularcoancestrymatrix method)": [[1054, "pybrops.popgen.cmat.DenseMolecularCoancestryMatrix.DenseMolecularCoancestryMatrix.incorp_taxa"]], "insert() (pybrops.popgen.cmat.densemolecularcoancestrymatrix.densemolecularcoancestrymatrix method)": [[1054, "pybrops.popgen.cmat.DenseMolecularCoancestryMatrix.DenseMolecularCoancestryMatrix.insert"]], "insert_taxa() (pybrops.popgen.cmat.densemolecularcoancestrymatrix.densemolecularcoancestrymatrix method)": [[1054, "pybrops.popgen.cmat.DenseMolecularCoancestryMatrix.DenseMolecularCoancestryMatrix.insert_taxa"]], "inverse() (pybrops.popgen.cmat.densemolecularcoancestrymatrix.densemolecularcoancestrymatrix method)": [[1054, "pybrops.popgen.cmat.DenseMolecularCoancestryMatrix.DenseMolecularCoancestryMatrix.inverse"]], "is_grouped() (pybrops.popgen.cmat.densemolecularcoancestrymatrix.densemolecularcoancestrymatrix method)": [[1054, "pybrops.popgen.cmat.DenseMolecularCoancestryMatrix.DenseMolecularCoancestryMatrix.is_grouped"]], "is_grouped_taxa() (pybrops.popgen.cmat.densemolecularcoancestrymatrix.densemolecularcoancestrymatrix method)": [[1054, "pybrops.popgen.cmat.DenseMolecularCoancestryMatrix.DenseMolecularCoancestryMatrix.is_grouped_taxa"]], "is_positive_semidefinite() (pybrops.popgen.cmat.densemolecularcoancestrymatrix.densemolecularcoancestrymatrix method)": [[1054, "pybrops.popgen.cmat.DenseMolecularCoancestryMatrix.DenseMolecularCoancestryMatrix.is_positive_semidefinite"]], "is_square() (pybrops.popgen.cmat.densemolecularcoancestrymatrix.densemolecularcoancestrymatrix method)": [[1054, "pybrops.popgen.cmat.DenseMolecularCoancestryMatrix.DenseMolecularCoancestryMatrix.is_square"]], "is_square_taxa() (pybrops.popgen.cmat.densemolecularcoancestrymatrix.densemolecularcoancestrymatrix method)": [[1054, "pybrops.popgen.cmat.DenseMolecularCoancestryMatrix.DenseMolecularCoancestryMatrix.is_square_taxa"]], "kinship() (pybrops.popgen.cmat.densemolecularcoancestrymatrix.densemolecularcoancestrymatrix method)": [[1054, "pybrops.popgen.cmat.DenseMolecularCoancestryMatrix.DenseMolecularCoancestryMatrix.kinship"]], "lexsort() (pybrops.popgen.cmat.densemolecularcoancestrymatrix.densemolecularcoancestrymatrix method)": [[1054, "pybrops.popgen.cmat.DenseMolecularCoancestryMatrix.DenseMolecularCoancestryMatrix.lexsort"]], "lexsort_taxa() (pybrops.popgen.cmat.densemolecularcoancestrymatrix.densemolecularcoancestrymatrix method)": [[1054, "pybrops.popgen.cmat.DenseMolecularCoancestryMatrix.DenseMolecularCoancestryMatrix.lexsort_taxa"]], "mat (pybrops.popgen.cmat.densemolecularcoancestrymatrix.densemolecularcoancestrymatrix property)": [[1054, "pybrops.popgen.cmat.DenseMolecularCoancestryMatrix.DenseMolecularCoancestryMatrix.mat"]], "mat_asformat() (pybrops.popgen.cmat.densemolecularcoancestrymatrix.densemolecularcoancestrymatrix method)": [[1054, "pybrops.popgen.cmat.DenseMolecularCoancestryMatrix.DenseMolecularCoancestryMatrix.mat_asformat"]], "mat_ndim (pybrops.popgen.cmat.densemolecularcoancestrymatrix.densemolecularcoancestrymatrix property)": [[1054, "pybrops.popgen.cmat.DenseMolecularCoancestryMatrix.DenseMolecularCoancestryMatrix.mat_ndim"]], "mat_shape (pybrops.popgen.cmat.densemolecularcoancestrymatrix.densemolecularcoancestrymatrix property)": [[1054, "pybrops.popgen.cmat.DenseMolecularCoancestryMatrix.DenseMolecularCoancestryMatrix.mat_shape"]], "max() (pybrops.popgen.cmat.densemolecularcoancestrymatrix.densemolecularcoancestrymatrix method)": [[1054, "pybrops.popgen.cmat.DenseMolecularCoancestryMatrix.DenseMolecularCoancestryMatrix.max"]], "max_inbreeding() (pybrops.popgen.cmat.densemolecularcoancestrymatrix.densemolecularcoancestrymatrix method)": [[1054, "pybrops.popgen.cmat.DenseMolecularCoancestryMatrix.DenseMolecularCoancestryMatrix.max_inbreeding"]], "mean() (pybrops.popgen.cmat.densemolecularcoancestrymatrix.densemolecularcoancestrymatrix method)": [[1054, "pybrops.popgen.cmat.DenseMolecularCoancestryMatrix.DenseMolecularCoancestryMatrix.mean"]], "min() (pybrops.popgen.cmat.densemolecularcoancestrymatrix.densemolecularcoancestrymatrix method)": [[1054, "pybrops.popgen.cmat.DenseMolecularCoancestryMatrix.DenseMolecularCoancestryMatrix.min"]], "min_inbreeding() (pybrops.popgen.cmat.densemolecularcoancestrymatrix.densemolecularcoancestrymatrix method)": [[1054, "pybrops.popgen.cmat.DenseMolecularCoancestryMatrix.DenseMolecularCoancestryMatrix.min_inbreeding"]], "nsquare (pybrops.popgen.cmat.densemolecularcoancestrymatrix.densemolecularcoancestrymatrix property)": [[1054, "pybrops.popgen.cmat.DenseMolecularCoancestryMatrix.DenseMolecularCoancestryMatrix.nsquare"]], "nsquare_taxa (pybrops.popgen.cmat.densemolecularcoancestrymatrix.densemolecularcoancestrymatrix property)": [[1054, "pybrops.popgen.cmat.DenseMolecularCoancestryMatrix.DenseMolecularCoancestryMatrix.nsquare_taxa"]], "ntaxa (pybrops.popgen.cmat.densemolecularcoancestrymatrix.densemolecularcoancestrymatrix property)": [[1054, "pybrops.popgen.cmat.DenseMolecularCoancestryMatrix.DenseMolecularCoancestryMatrix.ntaxa"]], "remove() (pybrops.popgen.cmat.densemolecularcoancestrymatrix.densemolecularcoancestrymatrix method)": [[1054, "pybrops.popgen.cmat.DenseMolecularCoancestryMatrix.DenseMolecularCoancestryMatrix.remove"]], "remove_taxa() (pybrops.popgen.cmat.densemolecularcoancestrymatrix.densemolecularcoancestrymatrix method)": [[1054, "pybrops.popgen.cmat.DenseMolecularCoancestryMatrix.DenseMolecularCoancestryMatrix.remove_taxa"]], "reorder() (pybrops.popgen.cmat.densemolecularcoancestrymatrix.densemolecularcoancestrymatrix method)": [[1054, "pybrops.popgen.cmat.DenseMolecularCoancestryMatrix.DenseMolecularCoancestryMatrix.reorder"]], "reorder_taxa() (pybrops.popgen.cmat.densemolecularcoancestrymatrix.densemolecularcoancestrymatrix method)": [[1054, "pybrops.popgen.cmat.DenseMolecularCoancestryMatrix.DenseMolecularCoancestryMatrix.reorder_taxa"]], "select() (pybrops.popgen.cmat.densemolecularcoancestrymatrix.densemolecularcoancestrymatrix method)": [[1054, "pybrops.popgen.cmat.DenseMolecularCoancestryMatrix.DenseMolecularCoancestryMatrix.select"]], "select_taxa() (pybrops.popgen.cmat.densemolecularcoancestrymatrix.densemolecularcoancestrymatrix method)": [[1054, "pybrops.popgen.cmat.DenseMolecularCoancestryMatrix.DenseMolecularCoancestryMatrix.select_taxa"]], "sort() (pybrops.popgen.cmat.densemolecularcoancestrymatrix.densemolecularcoancestrymatrix method)": [[1054, "pybrops.popgen.cmat.DenseMolecularCoancestryMatrix.DenseMolecularCoancestryMatrix.sort"]], "sort_taxa() (pybrops.popgen.cmat.densemolecularcoancestrymatrix.densemolecularcoancestrymatrix method)": [[1054, "pybrops.popgen.cmat.DenseMolecularCoancestryMatrix.DenseMolecularCoancestryMatrix.sort_taxa"]], "square_axes (pybrops.popgen.cmat.densemolecularcoancestrymatrix.densemolecularcoancestrymatrix property)": [[1054, "pybrops.popgen.cmat.DenseMolecularCoancestryMatrix.DenseMolecularCoancestryMatrix.square_axes"]], "square_axes_len (pybrops.popgen.cmat.densemolecularcoancestrymatrix.densemolecularcoancestrymatrix property)": [[1054, "pybrops.popgen.cmat.DenseMolecularCoancestryMatrix.DenseMolecularCoancestryMatrix.square_axes_len"]], "square_taxa_axes (pybrops.popgen.cmat.densemolecularcoancestrymatrix.densemolecularcoancestrymatrix property)": [[1054, "pybrops.popgen.cmat.DenseMolecularCoancestryMatrix.DenseMolecularCoancestryMatrix.square_taxa_axes"]], "square_taxa_axes_len (pybrops.popgen.cmat.densemolecularcoancestrymatrix.densemolecularcoancestrymatrix property)": [[1054, "pybrops.popgen.cmat.DenseMolecularCoancestryMatrix.DenseMolecularCoancestryMatrix.square_taxa_axes_len"]], "taxa (pybrops.popgen.cmat.densemolecularcoancestrymatrix.densemolecularcoancestrymatrix property)": [[1054, "pybrops.popgen.cmat.DenseMolecularCoancestryMatrix.DenseMolecularCoancestryMatrix.taxa"]], "taxa_axis (pybrops.popgen.cmat.densemolecularcoancestrymatrix.densemolecularcoancestrymatrix property)": [[1054, "pybrops.popgen.cmat.DenseMolecularCoancestryMatrix.DenseMolecularCoancestryMatrix.taxa_axis"]], "taxa_grp (pybrops.popgen.cmat.densemolecularcoancestrymatrix.densemolecularcoancestrymatrix property)": [[1054, "pybrops.popgen.cmat.DenseMolecularCoancestryMatrix.DenseMolecularCoancestryMatrix.taxa_grp"]], "taxa_grp_len (pybrops.popgen.cmat.densemolecularcoancestrymatrix.densemolecularcoancestrymatrix property)": [[1054, "pybrops.popgen.cmat.DenseMolecularCoancestryMatrix.DenseMolecularCoancestryMatrix.taxa_grp_len"]], "taxa_grp_name (pybrops.popgen.cmat.densemolecularcoancestrymatrix.densemolecularcoancestrymatrix property)": [[1054, "pybrops.popgen.cmat.DenseMolecularCoancestryMatrix.DenseMolecularCoancestryMatrix.taxa_grp_name"]], "taxa_grp_spix (pybrops.popgen.cmat.densemolecularcoancestrymatrix.densemolecularcoancestrymatrix property)": [[1054, "pybrops.popgen.cmat.DenseMolecularCoancestryMatrix.DenseMolecularCoancestryMatrix.taxa_grp_spix"]], "taxa_grp_stix (pybrops.popgen.cmat.densemolecularcoancestrymatrix.densemolecularcoancestrymatrix property)": [[1054, "pybrops.popgen.cmat.DenseMolecularCoancestryMatrix.DenseMolecularCoancestryMatrix.taxa_grp_stix"]], "to_csv() (pybrops.popgen.cmat.densemolecularcoancestrymatrix.densemolecularcoancestrymatrix method)": [[1054, "pybrops.popgen.cmat.DenseMolecularCoancestryMatrix.DenseMolecularCoancestryMatrix.to_csv"]], "to_hdf5() (pybrops.popgen.cmat.densemolecularcoancestrymatrix.densemolecularcoancestrymatrix method)": [[1054, "pybrops.popgen.cmat.DenseMolecularCoancestryMatrix.DenseMolecularCoancestryMatrix.to_hdf5"]], "to_pandas() (pybrops.popgen.cmat.densemolecularcoancestrymatrix.densemolecularcoancestrymatrix method)": [[1054, "pybrops.popgen.cmat.DenseMolecularCoancestryMatrix.DenseMolecularCoancestryMatrix.to_pandas"]], "ungroup() (pybrops.popgen.cmat.densemolecularcoancestrymatrix.densemolecularcoancestrymatrix method)": [[1054, "pybrops.popgen.cmat.DenseMolecularCoancestryMatrix.DenseMolecularCoancestryMatrix.ungroup"]], "ungroup_taxa() (pybrops.popgen.cmat.densemolecularcoancestrymatrix.densemolecularcoancestrymatrix method)": [[1054, "pybrops.popgen.cmat.DenseMolecularCoancestryMatrix.DenseMolecularCoancestryMatrix.ungroup_taxa"]], "check_is_densemolecularcoancestrymatrix() (in module pybrops.popgen.cmat.densemolecularcoancestrymatrix)": [[1055, "pybrops.popgen.cmat.DenseMolecularCoancestryMatrix.check_is_DenseMolecularCoancestryMatrix"]], "pybrops.popgen.cmat.densevanradencoancestrymatrix": [[1056, "module-pybrops.popgen.cmat.DenseVanRadenCoancestryMatrix"]], "densevanradencoancestrymatrix (class in pybrops.popgen.cmat.densevanradencoancestrymatrix)": [[1057, "pybrops.popgen.cmat.DenseVanRadenCoancestryMatrix.DenseVanRadenCoancestryMatrix"]], "__add__() (pybrops.popgen.cmat.densevanradencoancestrymatrix.densevanradencoancestrymatrix method)": [[1057, "pybrops.popgen.cmat.DenseVanRadenCoancestryMatrix.DenseVanRadenCoancestryMatrix.__add__"]], "__mul__() (pybrops.popgen.cmat.densevanradencoancestrymatrix.densevanradencoancestrymatrix method)": [[1057, "pybrops.popgen.cmat.DenseVanRadenCoancestryMatrix.DenseVanRadenCoancestryMatrix.__mul__"]], "adjoin() (pybrops.popgen.cmat.densevanradencoancestrymatrix.densevanradencoancestrymatrix method)": [[1057, "pybrops.popgen.cmat.DenseVanRadenCoancestryMatrix.DenseVanRadenCoancestryMatrix.adjoin"]], "adjoin_taxa() (pybrops.popgen.cmat.densevanradencoancestrymatrix.densevanradencoancestrymatrix method)": [[1057, "pybrops.popgen.cmat.DenseVanRadenCoancestryMatrix.DenseVanRadenCoancestryMatrix.adjoin_taxa"]], "append() (pybrops.popgen.cmat.densevanradencoancestrymatrix.densevanradencoancestrymatrix method)": [[1057, "pybrops.popgen.cmat.DenseVanRadenCoancestryMatrix.DenseVanRadenCoancestryMatrix.append"]], "append_taxa() (pybrops.popgen.cmat.densevanradencoancestrymatrix.densevanradencoancestrymatrix method)": [[1057, "pybrops.popgen.cmat.DenseVanRadenCoancestryMatrix.DenseVanRadenCoancestryMatrix.append_taxa"]], "apply_jitter() (pybrops.popgen.cmat.densevanradencoancestrymatrix.densevanradencoancestrymatrix method)": [[1057, "pybrops.popgen.cmat.DenseVanRadenCoancestryMatrix.DenseVanRadenCoancestryMatrix.apply_jitter"]], "coancestry() (pybrops.popgen.cmat.densevanradencoancestrymatrix.densevanradencoancestrymatrix method)": [[1057, "pybrops.popgen.cmat.DenseVanRadenCoancestryMatrix.DenseVanRadenCoancestryMatrix.coancestry"]], "concat() (pybrops.popgen.cmat.densevanradencoancestrymatrix.densevanradencoancestrymatrix class method)": [[1057, "pybrops.popgen.cmat.DenseVanRadenCoancestryMatrix.DenseVanRadenCoancestryMatrix.concat"]], "concat_taxa() (pybrops.popgen.cmat.densevanradencoancestrymatrix.densevanradencoancestrymatrix class method)": [[1057, "pybrops.popgen.cmat.DenseVanRadenCoancestryMatrix.DenseVanRadenCoancestryMatrix.concat_taxa"]], "copy() (pybrops.popgen.cmat.densevanradencoancestrymatrix.densevanradencoancestrymatrix method)": [[1057, "pybrops.popgen.cmat.DenseVanRadenCoancestryMatrix.DenseVanRadenCoancestryMatrix.copy"]], "deepcopy() (pybrops.popgen.cmat.densevanradencoancestrymatrix.densevanradencoancestrymatrix method)": [[1057, "pybrops.popgen.cmat.DenseVanRadenCoancestryMatrix.DenseVanRadenCoancestryMatrix.deepcopy"]], "delete() (pybrops.popgen.cmat.densevanradencoancestrymatrix.densevanradencoancestrymatrix method)": [[1057, "pybrops.popgen.cmat.DenseVanRadenCoancestryMatrix.DenseVanRadenCoancestryMatrix.delete"]], "delete_taxa() (pybrops.popgen.cmat.densevanradencoancestrymatrix.densevanradencoancestrymatrix method)": [[1057, "pybrops.popgen.cmat.DenseVanRadenCoancestryMatrix.DenseVanRadenCoancestryMatrix.delete_taxa"]], "from_csv() (pybrops.popgen.cmat.densevanradencoancestrymatrix.densevanradencoancestrymatrix class method)": [[1057, "pybrops.popgen.cmat.DenseVanRadenCoancestryMatrix.DenseVanRadenCoancestryMatrix.from_csv"]], "from_gmat() (pybrops.popgen.cmat.densevanradencoancestrymatrix.densevanradencoancestrymatrix class method)": [[1057, "pybrops.popgen.cmat.DenseVanRadenCoancestryMatrix.DenseVanRadenCoancestryMatrix.from_gmat"]], "from_hdf5() (pybrops.popgen.cmat.densevanradencoancestrymatrix.densevanradencoancestrymatrix class method)": [[1057, "pybrops.popgen.cmat.DenseVanRadenCoancestryMatrix.DenseVanRadenCoancestryMatrix.from_hdf5"]], "from_pandas() (pybrops.popgen.cmat.densevanradencoancestrymatrix.densevanradencoancestrymatrix class method)": [[1057, "pybrops.popgen.cmat.DenseVanRadenCoancestryMatrix.DenseVanRadenCoancestryMatrix.from_pandas"]], "group() (pybrops.popgen.cmat.densevanradencoancestrymatrix.densevanradencoancestrymatrix method)": [[1057, "pybrops.popgen.cmat.DenseVanRadenCoancestryMatrix.DenseVanRadenCoancestryMatrix.group"]], "group_taxa() (pybrops.popgen.cmat.densevanradencoancestrymatrix.densevanradencoancestrymatrix method)": [[1057, "pybrops.popgen.cmat.DenseVanRadenCoancestryMatrix.DenseVanRadenCoancestryMatrix.group_taxa"]], "incorp() (pybrops.popgen.cmat.densevanradencoancestrymatrix.densevanradencoancestrymatrix method)": [[1057, "pybrops.popgen.cmat.DenseVanRadenCoancestryMatrix.DenseVanRadenCoancestryMatrix.incorp"]], "incorp_taxa() (pybrops.popgen.cmat.densevanradencoancestrymatrix.densevanradencoancestrymatrix method)": [[1057, "pybrops.popgen.cmat.DenseVanRadenCoancestryMatrix.DenseVanRadenCoancestryMatrix.incorp_taxa"]], "insert() (pybrops.popgen.cmat.densevanradencoancestrymatrix.densevanradencoancestrymatrix method)": [[1057, "pybrops.popgen.cmat.DenseVanRadenCoancestryMatrix.DenseVanRadenCoancestryMatrix.insert"]], "insert_taxa() (pybrops.popgen.cmat.densevanradencoancestrymatrix.densevanradencoancestrymatrix method)": [[1057, "pybrops.popgen.cmat.DenseVanRadenCoancestryMatrix.DenseVanRadenCoancestryMatrix.insert_taxa"]], "inverse() (pybrops.popgen.cmat.densevanradencoancestrymatrix.densevanradencoancestrymatrix method)": [[1057, "pybrops.popgen.cmat.DenseVanRadenCoancestryMatrix.DenseVanRadenCoancestryMatrix.inverse"]], "is_grouped() (pybrops.popgen.cmat.densevanradencoancestrymatrix.densevanradencoancestrymatrix method)": [[1057, "pybrops.popgen.cmat.DenseVanRadenCoancestryMatrix.DenseVanRadenCoancestryMatrix.is_grouped"]], "is_grouped_taxa() (pybrops.popgen.cmat.densevanradencoancestrymatrix.densevanradencoancestrymatrix method)": [[1057, "pybrops.popgen.cmat.DenseVanRadenCoancestryMatrix.DenseVanRadenCoancestryMatrix.is_grouped_taxa"]], "is_positive_semidefinite() (pybrops.popgen.cmat.densevanradencoancestrymatrix.densevanradencoancestrymatrix method)": [[1057, "pybrops.popgen.cmat.DenseVanRadenCoancestryMatrix.DenseVanRadenCoancestryMatrix.is_positive_semidefinite"]], "is_square() (pybrops.popgen.cmat.densevanradencoancestrymatrix.densevanradencoancestrymatrix method)": [[1057, "pybrops.popgen.cmat.DenseVanRadenCoancestryMatrix.DenseVanRadenCoancestryMatrix.is_square"]], "is_square_taxa() (pybrops.popgen.cmat.densevanradencoancestrymatrix.densevanradencoancestrymatrix method)": [[1057, "pybrops.popgen.cmat.DenseVanRadenCoancestryMatrix.DenseVanRadenCoancestryMatrix.is_square_taxa"]], "kinship() (pybrops.popgen.cmat.densevanradencoancestrymatrix.densevanradencoancestrymatrix method)": [[1057, "pybrops.popgen.cmat.DenseVanRadenCoancestryMatrix.DenseVanRadenCoancestryMatrix.kinship"]], "lexsort() (pybrops.popgen.cmat.densevanradencoancestrymatrix.densevanradencoancestrymatrix method)": [[1057, "pybrops.popgen.cmat.DenseVanRadenCoancestryMatrix.DenseVanRadenCoancestryMatrix.lexsort"]], "lexsort_taxa() (pybrops.popgen.cmat.densevanradencoancestrymatrix.densevanradencoancestrymatrix method)": [[1057, "pybrops.popgen.cmat.DenseVanRadenCoancestryMatrix.DenseVanRadenCoancestryMatrix.lexsort_taxa"]], "mat (pybrops.popgen.cmat.densevanradencoancestrymatrix.densevanradencoancestrymatrix property)": [[1057, "pybrops.popgen.cmat.DenseVanRadenCoancestryMatrix.DenseVanRadenCoancestryMatrix.mat"]], "mat_asformat() (pybrops.popgen.cmat.densevanradencoancestrymatrix.densevanradencoancestrymatrix method)": [[1057, "pybrops.popgen.cmat.DenseVanRadenCoancestryMatrix.DenseVanRadenCoancestryMatrix.mat_asformat"]], "mat_ndim (pybrops.popgen.cmat.densevanradencoancestrymatrix.densevanradencoancestrymatrix property)": [[1057, "pybrops.popgen.cmat.DenseVanRadenCoancestryMatrix.DenseVanRadenCoancestryMatrix.mat_ndim"]], "mat_shape (pybrops.popgen.cmat.densevanradencoancestrymatrix.densevanradencoancestrymatrix property)": [[1057, "pybrops.popgen.cmat.DenseVanRadenCoancestryMatrix.DenseVanRadenCoancestryMatrix.mat_shape"]], "max() (pybrops.popgen.cmat.densevanradencoancestrymatrix.densevanradencoancestrymatrix method)": [[1057, "pybrops.popgen.cmat.DenseVanRadenCoancestryMatrix.DenseVanRadenCoancestryMatrix.max"]], "max_inbreeding() (pybrops.popgen.cmat.densevanradencoancestrymatrix.densevanradencoancestrymatrix method)": [[1057, "pybrops.popgen.cmat.DenseVanRadenCoancestryMatrix.DenseVanRadenCoancestryMatrix.max_inbreeding"]], "mean() (pybrops.popgen.cmat.densevanradencoancestrymatrix.densevanradencoancestrymatrix method)": [[1057, "pybrops.popgen.cmat.DenseVanRadenCoancestryMatrix.DenseVanRadenCoancestryMatrix.mean"]], "min() (pybrops.popgen.cmat.densevanradencoancestrymatrix.densevanradencoancestrymatrix method)": [[1057, "pybrops.popgen.cmat.DenseVanRadenCoancestryMatrix.DenseVanRadenCoancestryMatrix.min"]], "min_inbreeding() (pybrops.popgen.cmat.densevanradencoancestrymatrix.densevanradencoancestrymatrix method)": [[1057, "pybrops.popgen.cmat.DenseVanRadenCoancestryMatrix.DenseVanRadenCoancestryMatrix.min_inbreeding"]], "nsquare (pybrops.popgen.cmat.densevanradencoancestrymatrix.densevanradencoancestrymatrix property)": [[1057, "pybrops.popgen.cmat.DenseVanRadenCoancestryMatrix.DenseVanRadenCoancestryMatrix.nsquare"]], "nsquare_taxa (pybrops.popgen.cmat.densevanradencoancestrymatrix.densevanradencoancestrymatrix property)": [[1057, "pybrops.popgen.cmat.DenseVanRadenCoancestryMatrix.DenseVanRadenCoancestryMatrix.nsquare_taxa"]], "ntaxa (pybrops.popgen.cmat.densevanradencoancestrymatrix.densevanradencoancestrymatrix property)": [[1057, "pybrops.popgen.cmat.DenseVanRadenCoancestryMatrix.DenseVanRadenCoancestryMatrix.ntaxa"]], "remove() (pybrops.popgen.cmat.densevanradencoancestrymatrix.densevanradencoancestrymatrix method)": [[1057, "pybrops.popgen.cmat.DenseVanRadenCoancestryMatrix.DenseVanRadenCoancestryMatrix.remove"]], "remove_taxa() (pybrops.popgen.cmat.densevanradencoancestrymatrix.densevanradencoancestrymatrix method)": [[1057, "pybrops.popgen.cmat.DenseVanRadenCoancestryMatrix.DenseVanRadenCoancestryMatrix.remove_taxa"]], "reorder() (pybrops.popgen.cmat.densevanradencoancestrymatrix.densevanradencoancestrymatrix method)": [[1057, "pybrops.popgen.cmat.DenseVanRadenCoancestryMatrix.DenseVanRadenCoancestryMatrix.reorder"]], "reorder_taxa() (pybrops.popgen.cmat.densevanradencoancestrymatrix.densevanradencoancestrymatrix method)": [[1057, "pybrops.popgen.cmat.DenseVanRadenCoancestryMatrix.DenseVanRadenCoancestryMatrix.reorder_taxa"]], "select() (pybrops.popgen.cmat.densevanradencoancestrymatrix.densevanradencoancestrymatrix method)": [[1057, "pybrops.popgen.cmat.DenseVanRadenCoancestryMatrix.DenseVanRadenCoancestryMatrix.select"]], "select_taxa() (pybrops.popgen.cmat.densevanradencoancestrymatrix.densevanradencoancestrymatrix method)": [[1057, "pybrops.popgen.cmat.DenseVanRadenCoancestryMatrix.DenseVanRadenCoancestryMatrix.select_taxa"]], "sort() (pybrops.popgen.cmat.densevanradencoancestrymatrix.densevanradencoancestrymatrix method)": [[1057, "pybrops.popgen.cmat.DenseVanRadenCoancestryMatrix.DenseVanRadenCoancestryMatrix.sort"]], "sort_taxa() (pybrops.popgen.cmat.densevanradencoancestrymatrix.densevanradencoancestrymatrix method)": [[1057, "pybrops.popgen.cmat.DenseVanRadenCoancestryMatrix.DenseVanRadenCoancestryMatrix.sort_taxa"]], "square_axes (pybrops.popgen.cmat.densevanradencoancestrymatrix.densevanradencoancestrymatrix property)": [[1057, "pybrops.popgen.cmat.DenseVanRadenCoancestryMatrix.DenseVanRadenCoancestryMatrix.square_axes"]], "square_axes_len (pybrops.popgen.cmat.densevanradencoancestrymatrix.densevanradencoancestrymatrix property)": [[1057, "pybrops.popgen.cmat.DenseVanRadenCoancestryMatrix.DenseVanRadenCoancestryMatrix.square_axes_len"]], "square_taxa_axes (pybrops.popgen.cmat.densevanradencoancestrymatrix.densevanradencoancestrymatrix property)": [[1057, "pybrops.popgen.cmat.DenseVanRadenCoancestryMatrix.DenseVanRadenCoancestryMatrix.square_taxa_axes"]], "square_taxa_axes_len (pybrops.popgen.cmat.densevanradencoancestrymatrix.densevanradencoancestrymatrix property)": [[1057, "pybrops.popgen.cmat.DenseVanRadenCoancestryMatrix.DenseVanRadenCoancestryMatrix.square_taxa_axes_len"]], "taxa (pybrops.popgen.cmat.densevanradencoancestrymatrix.densevanradencoancestrymatrix property)": [[1057, "pybrops.popgen.cmat.DenseVanRadenCoancestryMatrix.DenseVanRadenCoancestryMatrix.taxa"]], "taxa_axis (pybrops.popgen.cmat.densevanradencoancestrymatrix.densevanradencoancestrymatrix property)": [[1057, "pybrops.popgen.cmat.DenseVanRadenCoancestryMatrix.DenseVanRadenCoancestryMatrix.taxa_axis"]], "taxa_grp (pybrops.popgen.cmat.densevanradencoancestrymatrix.densevanradencoancestrymatrix property)": [[1057, "pybrops.popgen.cmat.DenseVanRadenCoancestryMatrix.DenseVanRadenCoancestryMatrix.taxa_grp"]], "taxa_grp_len (pybrops.popgen.cmat.densevanradencoancestrymatrix.densevanradencoancestrymatrix property)": [[1057, "pybrops.popgen.cmat.DenseVanRadenCoancestryMatrix.DenseVanRadenCoancestryMatrix.taxa_grp_len"]], "taxa_grp_name (pybrops.popgen.cmat.densevanradencoancestrymatrix.densevanradencoancestrymatrix property)": [[1057, "pybrops.popgen.cmat.DenseVanRadenCoancestryMatrix.DenseVanRadenCoancestryMatrix.taxa_grp_name"]], "taxa_grp_spix (pybrops.popgen.cmat.densevanradencoancestrymatrix.densevanradencoancestrymatrix property)": [[1057, "pybrops.popgen.cmat.DenseVanRadenCoancestryMatrix.DenseVanRadenCoancestryMatrix.taxa_grp_spix"]], "taxa_grp_stix (pybrops.popgen.cmat.densevanradencoancestrymatrix.densevanradencoancestrymatrix property)": [[1057, "pybrops.popgen.cmat.DenseVanRadenCoancestryMatrix.DenseVanRadenCoancestryMatrix.taxa_grp_stix"]], "to_csv() (pybrops.popgen.cmat.densevanradencoancestrymatrix.densevanradencoancestrymatrix method)": [[1057, "pybrops.popgen.cmat.DenseVanRadenCoancestryMatrix.DenseVanRadenCoancestryMatrix.to_csv"]], "to_hdf5() (pybrops.popgen.cmat.densevanradencoancestrymatrix.densevanradencoancestrymatrix method)": [[1057, "pybrops.popgen.cmat.DenseVanRadenCoancestryMatrix.DenseVanRadenCoancestryMatrix.to_hdf5"]], "to_pandas() (pybrops.popgen.cmat.densevanradencoancestrymatrix.densevanradencoancestrymatrix method)": [[1057, "pybrops.popgen.cmat.DenseVanRadenCoancestryMatrix.DenseVanRadenCoancestryMatrix.to_pandas"]], "ungroup() (pybrops.popgen.cmat.densevanradencoancestrymatrix.densevanradencoancestrymatrix method)": [[1057, "pybrops.popgen.cmat.DenseVanRadenCoancestryMatrix.DenseVanRadenCoancestryMatrix.ungroup"]], "ungroup_taxa() (pybrops.popgen.cmat.densevanradencoancestrymatrix.densevanradencoancestrymatrix method)": [[1057, "pybrops.popgen.cmat.DenseVanRadenCoancestryMatrix.DenseVanRadenCoancestryMatrix.ungroup_taxa"]], "check_is_densevanradencoancestrymatrix() (in module pybrops.popgen.cmat.densevanradencoancestrymatrix)": [[1058, "pybrops.popgen.cmat.DenseVanRadenCoancestryMatrix.check_is_DenseVanRadenCoancestryMatrix"]], "pybrops.popgen.cmat.denseyangcoancestrymatrix": [[1059, "module-pybrops.popgen.cmat.DenseYangCoancestryMatrix"]], "denseyangcoancestrymatrix (class in pybrops.popgen.cmat.denseyangcoancestrymatrix)": [[1060, "pybrops.popgen.cmat.DenseYangCoancestryMatrix.DenseYangCoancestryMatrix"]], "__add__() (pybrops.popgen.cmat.denseyangcoancestrymatrix.denseyangcoancestrymatrix method)": [[1060, "pybrops.popgen.cmat.DenseYangCoancestryMatrix.DenseYangCoancestryMatrix.__add__"]], "__mul__() (pybrops.popgen.cmat.denseyangcoancestrymatrix.denseyangcoancestrymatrix method)": [[1060, "pybrops.popgen.cmat.DenseYangCoancestryMatrix.DenseYangCoancestryMatrix.__mul__"]], "adjoin() (pybrops.popgen.cmat.denseyangcoancestrymatrix.denseyangcoancestrymatrix method)": [[1060, "pybrops.popgen.cmat.DenseYangCoancestryMatrix.DenseYangCoancestryMatrix.adjoin"]], "adjoin_taxa() (pybrops.popgen.cmat.denseyangcoancestrymatrix.denseyangcoancestrymatrix method)": [[1060, "pybrops.popgen.cmat.DenseYangCoancestryMatrix.DenseYangCoancestryMatrix.adjoin_taxa"]], "append() (pybrops.popgen.cmat.denseyangcoancestrymatrix.denseyangcoancestrymatrix method)": [[1060, "pybrops.popgen.cmat.DenseYangCoancestryMatrix.DenseYangCoancestryMatrix.append"]], "append_taxa() (pybrops.popgen.cmat.denseyangcoancestrymatrix.denseyangcoancestrymatrix method)": [[1060, "pybrops.popgen.cmat.DenseYangCoancestryMatrix.DenseYangCoancestryMatrix.append_taxa"]], "apply_jitter() (pybrops.popgen.cmat.denseyangcoancestrymatrix.denseyangcoancestrymatrix method)": [[1060, "pybrops.popgen.cmat.DenseYangCoancestryMatrix.DenseYangCoancestryMatrix.apply_jitter"]], "coancestry() (pybrops.popgen.cmat.denseyangcoancestrymatrix.denseyangcoancestrymatrix method)": [[1060, "pybrops.popgen.cmat.DenseYangCoancestryMatrix.DenseYangCoancestryMatrix.coancestry"]], "concat() (pybrops.popgen.cmat.denseyangcoancestrymatrix.denseyangcoancestrymatrix class method)": [[1060, "pybrops.popgen.cmat.DenseYangCoancestryMatrix.DenseYangCoancestryMatrix.concat"]], "concat_taxa() (pybrops.popgen.cmat.denseyangcoancestrymatrix.denseyangcoancestrymatrix class method)": [[1060, "pybrops.popgen.cmat.DenseYangCoancestryMatrix.DenseYangCoancestryMatrix.concat_taxa"]], "copy() (pybrops.popgen.cmat.denseyangcoancestrymatrix.denseyangcoancestrymatrix method)": [[1060, "pybrops.popgen.cmat.DenseYangCoancestryMatrix.DenseYangCoancestryMatrix.copy"]], "deepcopy() (pybrops.popgen.cmat.denseyangcoancestrymatrix.denseyangcoancestrymatrix method)": [[1060, "pybrops.popgen.cmat.DenseYangCoancestryMatrix.DenseYangCoancestryMatrix.deepcopy"]], "delete() (pybrops.popgen.cmat.denseyangcoancestrymatrix.denseyangcoancestrymatrix method)": [[1060, "pybrops.popgen.cmat.DenseYangCoancestryMatrix.DenseYangCoancestryMatrix.delete"]], "delete_taxa() (pybrops.popgen.cmat.denseyangcoancestrymatrix.denseyangcoancestrymatrix method)": [[1060, "pybrops.popgen.cmat.DenseYangCoancestryMatrix.DenseYangCoancestryMatrix.delete_taxa"]], "from_csv() (pybrops.popgen.cmat.denseyangcoancestrymatrix.denseyangcoancestrymatrix class method)": [[1060, "pybrops.popgen.cmat.DenseYangCoancestryMatrix.DenseYangCoancestryMatrix.from_csv"]], "from_gmat() (pybrops.popgen.cmat.denseyangcoancestrymatrix.denseyangcoancestrymatrix class method)": [[1060, "pybrops.popgen.cmat.DenseYangCoancestryMatrix.DenseYangCoancestryMatrix.from_gmat"]], "from_hdf5() (pybrops.popgen.cmat.denseyangcoancestrymatrix.denseyangcoancestrymatrix class method)": [[1060, "pybrops.popgen.cmat.DenseYangCoancestryMatrix.DenseYangCoancestryMatrix.from_hdf5"]], "from_pandas() (pybrops.popgen.cmat.denseyangcoancestrymatrix.denseyangcoancestrymatrix class method)": [[1060, "pybrops.popgen.cmat.DenseYangCoancestryMatrix.DenseYangCoancestryMatrix.from_pandas"]], "group() (pybrops.popgen.cmat.denseyangcoancestrymatrix.denseyangcoancestrymatrix method)": [[1060, "pybrops.popgen.cmat.DenseYangCoancestryMatrix.DenseYangCoancestryMatrix.group"]], "group_taxa() (pybrops.popgen.cmat.denseyangcoancestrymatrix.denseyangcoancestrymatrix method)": [[1060, "pybrops.popgen.cmat.DenseYangCoancestryMatrix.DenseYangCoancestryMatrix.group_taxa"]], "incorp() (pybrops.popgen.cmat.denseyangcoancestrymatrix.denseyangcoancestrymatrix method)": [[1060, "pybrops.popgen.cmat.DenseYangCoancestryMatrix.DenseYangCoancestryMatrix.incorp"]], "incorp_taxa() (pybrops.popgen.cmat.denseyangcoancestrymatrix.denseyangcoancestrymatrix method)": [[1060, "pybrops.popgen.cmat.DenseYangCoancestryMatrix.DenseYangCoancestryMatrix.incorp_taxa"]], "insert() (pybrops.popgen.cmat.denseyangcoancestrymatrix.denseyangcoancestrymatrix method)": [[1060, "pybrops.popgen.cmat.DenseYangCoancestryMatrix.DenseYangCoancestryMatrix.insert"]], "insert_taxa() (pybrops.popgen.cmat.denseyangcoancestrymatrix.denseyangcoancestrymatrix method)": [[1060, "pybrops.popgen.cmat.DenseYangCoancestryMatrix.DenseYangCoancestryMatrix.insert_taxa"]], "inverse() (pybrops.popgen.cmat.denseyangcoancestrymatrix.denseyangcoancestrymatrix method)": [[1060, "pybrops.popgen.cmat.DenseYangCoancestryMatrix.DenseYangCoancestryMatrix.inverse"]], "is_grouped() (pybrops.popgen.cmat.denseyangcoancestrymatrix.denseyangcoancestrymatrix method)": [[1060, "pybrops.popgen.cmat.DenseYangCoancestryMatrix.DenseYangCoancestryMatrix.is_grouped"]], "is_grouped_taxa() (pybrops.popgen.cmat.denseyangcoancestrymatrix.denseyangcoancestrymatrix method)": [[1060, "pybrops.popgen.cmat.DenseYangCoancestryMatrix.DenseYangCoancestryMatrix.is_grouped_taxa"]], "is_positive_semidefinite() (pybrops.popgen.cmat.denseyangcoancestrymatrix.denseyangcoancestrymatrix method)": [[1060, "pybrops.popgen.cmat.DenseYangCoancestryMatrix.DenseYangCoancestryMatrix.is_positive_semidefinite"]], "is_square() (pybrops.popgen.cmat.denseyangcoancestrymatrix.denseyangcoancestrymatrix method)": [[1060, "pybrops.popgen.cmat.DenseYangCoancestryMatrix.DenseYangCoancestryMatrix.is_square"]], "is_square_taxa() (pybrops.popgen.cmat.denseyangcoancestrymatrix.denseyangcoancestrymatrix method)": [[1060, "pybrops.popgen.cmat.DenseYangCoancestryMatrix.DenseYangCoancestryMatrix.is_square_taxa"]], "kinship() (pybrops.popgen.cmat.denseyangcoancestrymatrix.denseyangcoancestrymatrix method)": [[1060, "pybrops.popgen.cmat.DenseYangCoancestryMatrix.DenseYangCoancestryMatrix.kinship"]], "lexsort() (pybrops.popgen.cmat.denseyangcoancestrymatrix.denseyangcoancestrymatrix method)": [[1060, "pybrops.popgen.cmat.DenseYangCoancestryMatrix.DenseYangCoancestryMatrix.lexsort"]], "lexsort_taxa() (pybrops.popgen.cmat.denseyangcoancestrymatrix.denseyangcoancestrymatrix method)": [[1060, "pybrops.popgen.cmat.DenseYangCoancestryMatrix.DenseYangCoancestryMatrix.lexsort_taxa"]], "mat (pybrops.popgen.cmat.denseyangcoancestrymatrix.denseyangcoancestrymatrix property)": [[1060, "pybrops.popgen.cmat.DenseYangCoancestryMatrix.DenseYangCoancestryMatrix.mat"]], "mat_asformat() (pybrops.popgen.cmat.denseyangcoancestrymatrix.denseyangcoancestrymatrix method)": [[1060, "pybrops.popgen.cmat.DenseYangCoancestryMatrix.DenseYangCoancestryMatrix.mat_asformat"]], "mat_ndim (pybrops.popgen.cmat.denseyangcoancestrymatrix.denseyangcoancestrymatrix property)": [[1060, "pybrops.popgen.cmat.DenseYangCoancestryMatrix.DenseYangCoancestryMatrix.mat_ndim"]], "mat_shape (pybrops.popgen.cmat.denseyangcoancestrymatrix.denseyangcoancestrymatrix property)": [[1060, "pybrops.popgen.cmat.DenseYangCoancestryMatrix.DenseYangCoancestryMatrix.mat_shape"]], "max() (pybrops.popgen.cmat.denseyangcoancestrymatrix.denseyangcoancestrymatrix method)": [[1060, "pybrops.popgen.cmat.DenseYangCoancestryMatrix.DenseYangCoancestryMatrix.max"]], "max_inbreeding() (pybrops.popgen.cmat.denseyangcoancestrymatrix.denseyangcoancestrymatrix method)": [[1060, "pybrops.popgen.cmat.DenseYangCoancestryMatrix.DenseYangCoancestryMatrix.max_inbreeding"]], "mean() (pybrops.popgen.cmat.denseyangcoancestrymatrix.denseyangcoancestrymatrix method)": [[1060, "pybrops.popgen.cmat.DenseYangCoancestryMatrix.DenseYangCoancestryMatrix.mean"]], "min() (pybrops.popgen.cmat.denseyangcoancestrymatrix.denseyangcoancestrymatrix method)": [[1060, "pybrops.popgen.cmat.DenseYangCoancestryMatrix.DenseYangCoancestryMatrix.min"]], "min_inbreeding() (pybrops.popgen.cmat.denseyangcoancestrymatrix.denseyangcoancestrymatrix method)": [[1060, "pybrops.popgen.cmat.DenseYangCoancestryMatrix.DenseYangCoancestryMatrix.min_inbreeding"]], "nsquare (pybrops.popgen.cmat.denseyangcoancestrymatrix.denseyangcoancestrymatrix property)": [[1060, "pybrops.popgen.cmat.DenseYangCoancestryMatrix.DenseYangCoancestryMatrix.nsquare"]], "nsquare_taxa (pybrops.popgen.cmat.denseyangcoancestrymatrix.denseyangcoancestrymatrix property)": [[1060, "pybrops.popgen.cmat.DenseYangCoancestryMatrix.DenseYangCoancestryMatrix.nsquare_taxa"]], "ntaxa (pybrops.popgen.cmat.denseyangcoancestrymatrix.denseyangcoancestrymatrix property)": [[1060, "pybrops.popgen.cmat.DenseYangCoancestryMatrix.DenseYangCoancestryMatrix.ntaxa"]], "remove() (pybrops.popgen.cmat.denseyangcoancestrymatrix.denseyangcoancestrymatrix method)": [[1060, "pybrops.popgen.cmat.DenseYangCoancestryMatrix.DenseYangCoancestryMatrix.remove"]], "remove_taxa() (pybrops.popgen.cmat.denseyangcoancestrymatrix.denseyangcoancestrymatrix method)": [[1060, "pybrops.popgen.cmat.DenseYangCoancestryMatrix.DenseYangCoancestryMatrix.remove_taxa"]], "reorder() (pybrops.popgen.cmat.denseyangcoancestrymatrix.denseyangcoancestrymatrix method)": [[1060, "pybrops.popgen.cmat.DenseYangCoancestryMatrix.DenseYangCoancestryMatrix.reorder"]], "reorder_taxa() (pybrops.popgen.cmat.denseyangcoancestrymatrix.denseyangcoancestrymatrix method)": [[1060, "pybrops.popgen.cmat.DenseYangCoancestryMatrix.DenseYangCoancestryMatrix.reorder_taxa"]], "select() (pybrops.popgen.cmat.denseyangcoancestrymatrix.denseyangcoancestrymatrix method)": [[1060, "pybrops.popgen.cmat.DenseYangCoancestryMatrix.DenseYangCoancestryMatrix.select"]], "select_taxa() (pybrops.popgen.cmat.denseyangcoancestrymatrix.denseyangcoancestrymatrix method)": [[1060, "pybrops.popgen.cmat.DenseYangCoancestryMatrix.DenseYangCoancestryMatrix.select_taxa"]], "sort() (pybrops.popgen.cmat.denseyangcoancestrymatrix.denseyangcoancestrymatrix method)": [[1060, "pybrops.popgen.cmat.DenseYangCoancestryMatrix.DenseYangCoancestryMatrix.sort"]], "sort_taxa() (pybrops.popgen.cmat.denseyangcoancestrymatrix.denseyangcoancestrymatrix method)": [[1060, "pybrops.popgen.cmat.DenseYangCoancestryMatrix.DenseYangCoancestryMatrix.sort_taxa"]], "square_axes (pybrops.popgen.cmat.denseyangcoancestrymatrix.denseyangcoancestrymatrix property)": [[1060, "pybrops.popgen.cmat.DenseYangCoancestryMatrix.DenseYangCoancestryMatrix.square_axes"]], "square_axes_len (pybrops.popgen.cmat.denseyangcoancestrymatrix.denseyangcoancestrymatrix property)": [[1060, "pybrops.popgen.cmat.DenseYangCoancestryMatrix.DenseYangCoancestryMatrix.square_axes_len"]], "square_taxa_axes (pybrops.popgen.cmat.denseyangcoancestrymatrix.denseyangcoancestrymatrix property)": [[1060, "pybrops.popgen.cmat.DenseYangCoancestryMatrix.DenseYangCoancestryMatrix.square_taxa_axes"]], "square_taxa_axes_len (pybrops.popgen.cmat.denseyangcoancestrymatrix.denseyangcoancestrymatrix property)": [[1060, "pybrops.popgen.cmat.DenseYangCoancestryMatrix.DenseYangCoancestryMatrix.square_taxa_axes_len"]], "taxa (pybrops.popgen.cmat.denseyangcoancestrymatrix.denseyangcoancestrymatrix property)": [[1060, "pybrops.popgen.cmat.DenseYangCoancestryMatrix.DenseYangCoancestryMatrix.taxa"]], "taxa_axis (pybrops.popgen.cmat.denseyangcoancestrymatrix.denseyangcoancestrymatrix property)": [[1060, "pybrops.popgen.cmat.DenseYangCoancestryMatrix.DenseYangCoancestryMatrix.taxa_axis"]], "taxa_grp (pybrops.popgen.cmat.denseyangcoancestrymatrix.denseyangcoancestrymatrix property)": [[1060, "pybrops.popgen.cmat.DenseYangCoancestryMatrix.DenseYangCoancestryMatrix.taxa_grp"]], "taxa_grp_len (pybrops.popgen.cmat.denseyangcoancestrymatrix.denseyangcoancestrymatrix property)": [[1060, "pybrops.popgen.cmat.DenseYangCoancestryMatrix.DenseYangCoancestryMatrix.taxa_grp_len"]], "taxa_grp_name (pybrops.popgen.cmat.denseyangcoancestrymatrix.denseyangcoancestrymatrix property)": [[1060, "pybrops.popgen.cmat.DenseYangCoancestryMatrix.DenseYangCoancestryMatrix.taxa_grp_name"]], "taxa_grp_spix (pybrops.popgen.cmat.denseyangcoancestrymatrix.denseyangcoancestrymatrix property)": [[1060, "pybrops.popgen.cmat.DenseYangCoancestryMatrix.DenseYangCoancestryMatrix.taxa_grp_spix"]], "taxa_grp_stix (pybrops.popgen.cmat.denseyangcoancestrymatrix.denseyangcoancestrymatrix property)": [[1060, "pybrops.popgen.cmat.DenseYangCoancestryMatrix.DenseYangCoancestryMatrix.taxa_grp_stix"]], "to_csv() (pybrops.popgen.cmat.denseyangcoancestrymatrix.denseyangcoancestrymatrix method)": [[1060, "pybrops.popgen.cmat.DenseYangCoancestryMatrix.DenseYangCoancestryMatrix.to_csv"]], "to_hdf5() (pybrops.popgen.cmat.denseyangcoancestrymatrix.denseyangcoancestrymatrix method)": [[1060, "pybrops.popgen.cmat.DenseYangCoancestryMatrix.DenseYangCoancestryMatrix.to_hdf5"]], "to_pandas() (pybrops.popgen.cmat.denseyangcoancestrymatrix.denseyangcoancestrymatrix method)": [[1060, "pybrops.popgen.cmat.DenseYangCoancestryMatrix.DenseYangCoancestryMatrix.to_pandas"]], "ungroup() (pybrops.popgen.cmat.denseyangcoancestrymatrix.denseyangcoancestrymatrix method)": [[1060, "pybrops.popgen.cmat.DenseYangCoancestryMatrix.DenseYangCoancestryMatrix.ungroup"]], "ungroup_taxa() (pybrops.popgen.cmat.denseyangcoancestrymatrix.denseyangcoancestrymatrix method)": [[1060, "pybrops.popgen.cmat.DenseYangCoancestryMatrix.DenseYangCoancestryMatrix.ungroup_taxa"]], "check_is_denseyangcoancestrymatrix() (in module pybrops.popgen.cmat.denseyangcoancestrymatrix)": [[1061, "pybrops.popgen.cmat.DenseYangCoancestryMatrix.check_is_DenseYangCoancestryMatrix"]], "pybrops.popgen.cmat.fcty": [[1062, "module-pybrops.popgen.cmat.fcty"]], "pybrops.popgen.cmat.fcty.coancestrymatrixfactory": [[1063, "module-pybrops.popgen.cmat.fcty.CoancestryMatrixFactory"]], "coancestrymatrixfactory (class in pybrops.popgen.cmat.fcty.coancestrymatrixfactory)": [[1064, "pybrops.popgen.cmat.fcty.CoancestryMatrixFactory.CoancestryMatrixFactory"]], "from_gmat() (pybrops.popgen.cmat.fcty.coancestrymatrixfactory.coancestrymatrixfactory method)": [[1064, "pybrops.popgen.cmat.fcty.CoancestryMatrixFactory.CoancestryMatrixFactory.from_gmat"]], "check_is_coancestrymatrixfactory() (in module pybrops.popgen.cmat.fcty.coancestrymatrixfactory)": [[1065, "pybrops.popgen.cmat.fcty.CoancestryMatrixFactory.check_is_CoancestryMatrixFactory"]], "pybrops.popgen.cmat.fcty.densecoancestrymatrixfactory": [[1066, "module-pybrops.popgen.cmat.fcty.DenseCoancestryMatrixFactory"]], "densecoancestrymatrixfactory (class in pybrops.popgen.cmat.fcty.densecoancestrymatrixfactory)": [[1067, "pybrops.popgen.cmat.fcty.DenseCoancestryMatrixFactory.DenseCoancestryMatrixFactory"]], "from_gmat() (pybrops.popgen.cmat.fcty.densecoancestrymatrixfactory.densecoancestrymatrixfactory method)": [[1067, "pybrops.popgen.cmat.fcty.DenseCoancestryMatrixFactory.DenseCoancestryMatrixFactory.from_gmat"]], "check_is_densecoancestrymatrixfactory() (in module pybrops.popgen.cmat.fcty.densecoancestrymatrixfactory)": [[1068, "pybrops.popgen.cmat.fcty.DenseCoancestryMatrixFactory.check_is_DenseCoancestryMatrixFactory"]], "pybrops.popgen.cmat.fcty.densegeneralizedweightedcoancestrymatrixfactory": [[1069, "module-pybrops.popgen.cmat.fcty.DenseGeneralizedWeightedCoancestryMatrixFactory"]], "densegeneralizedweightedcoancestrymatrixfactory (class in pybrops.popgen.cmat.fcty.densegeneralizedweightedcoancestrymatrixfactory)": [[1070, "pybrops.popgen.cmat.fcty.DenseGeneralizedWeightedCoancestryMatrixFactory.DenseGeneralizedWeightedCoancestryMatrixFactory"]], "from_gmat() (pybrops.popgen.cmat.fcty.densegeneralizedweightedcoancestrymatrixfactory.densegeneralizedweightedcoancestrymatrixfactory method)": [[1070, "pybrops.popgen.cmat.fcty.DenseGeneralizedWeightedCoancestryMatrixFactory.DenseGeneralizedWeightedCoancestryMatrixFactory.from_gmat"]], "check_is_densegeneralizedweightedcoancestrymatrixfactory() (in module pybrops.popgen.cmat.fcty.densegeneralizedweightedcoancestrymatrixfactory)": [[1071, "pybrops.popgen.cmat.fcty.DenseGeneralizedWeightedCoancestryMatrixFactory.check_is_DenseGeneralizedWeightedCoancestryMatrixFactory"]], "pybrops.popgen.cmat.fcty.densemolecularcoancestrymatrixfactory": [[1072, "module-pybrops.popgen.cmat.fcty.DenseMolecularCoancestryMatrixFactory"]], "densemolecularcoancestrymatrixfactory (class in pybrops.popgen.cmat.fcty.densemolecularcoancestrymatrixfactory)": [[1073, "pybrops.popgen.cmat.fcty.DenseMolecularCoancestryMatrixFactory.DenseMolecularCoancestryMatrixFactory"]], "from_gmat() (pybrops.popgen.cmat.fcty.densemolecularcoancestrymatrixfactory.densemolecularcoancestrymatrixfactory method)": [[1073, "pybrops.popgen.cmat.fcty.DenseMolecularCoancestryMatrixFactory.DenseMolecularCoancestryMatrixFactory.from_gmat"]], "check_is_densemolecularcoancestrymatrixfactory() (in module pybrops.popgen.cmat.fcty.densemolecularcoancestrymatrixfactory)": [[1074, "pybrops.popgen.cmat.fcty.DenseMolecularCoancestryMatrixFactory.check_is_DenseMolecularCoancestryMatrixFactory"]], "pybrops.popgen.cmat.fcty.densevanradencoancestrymatrixfactory": [[1075, "module-pybrops.popgen.cmat.fcty.DenseVanRadenCoancestryMatrixFactory"]], "densevanradencoancestrymatrixfactory (class in pybrops.popgen.cmat.fcty.densevanradencoancestrymatrixfactory)": [[1076, "pybrops.popgen.cmat.fcty.DenseVanRadenCoancestryMatrixFactory.DenseVanRadenCoancestryMatrixFactory"]], "from_gmat() (pybrops.popgen.cmat.fcty.densevanradencoancestrymatrixfactory.densevanradencoancestrymatrixfactory method)": [[1076, "pybrops.popgen.cmat.fcty.DenseVanRadenCoancestryMatrixFactory.DenseVanRadenCoancestryMatrixFactory.from_gmat"]], "check_is_densevanradencoancestrymatrixfactory() (in module pybrops.popgen.cmat.fcty.densevanradencoancestrymatrixfactory)": [[1077, "pybrops.popgen.cmat.fcty.DenseVanRadenCoancestryMatrixFactory.check_is_DenseVanRadenCoancestryMatrixFactory"]], "pybrops.popgen.cmat.fcty.denseyangcoancestrymatrixfactory": [[1078, "module-pybrops.popgen.cmat.fcty.DenseYangCoancestryMatrixFactory"]], "denseyangcoancestrymatrixfactory (class in pybrops.popgen.cmat.fcty.denseyangcoancestrymatrixfactory)": [[1079, "pybrops.popgen.cmat.fcty.DenseYangCoancestryMatrixFactory.DenseYangCoancestryMatrixFactory"]], "from_gmat() (pybrops.popgen.cmat.fcty.denseyangcoancestrymatrixfactory.denseyangcoancestrymatrixfactory method)": [[1079, "pybrops.popgen.cmat.fcty.DenseYangCoancestryMatrixFactory.DenseYangCoancestryMatrixFactory.from_gmat"]], "check_is_denseyangcoancestrymatrixfactory() (in module pybrops.popgen.cmat.fcty.denseyangcoancestrymatrixfactory)": [[1080, "pybrops.popgen.cmat.fcty.DenseYangCoancestryMatrixFactory.check_is_DenseYangCoancestryMatrixFactory"]], "pybrops.popgen.gmap": [[1081, "module-pybrops.popgen.gmap"]], "pybrops.popgen.gmap.densegeneticmappablematrix": [[1082, "module-pybrops.popgen.gmap.DenseGeneticMappableMatrix"]], "densegeneticmappablematrix (class in pybrops.popgen.gmap.densegeneticmappablematrix)": [[1083, "pybrops.popgen.gmap.DenseGeneticMappableMatrix.DenseGeneticMappableMatrix"]], "__add__() (pybrops.popgen.gmap.densegeneticmappablematrix.densegeneticmappablematrix method)": [[1083, "pybrops.popgen.gmap.DenseGeneticMappableMatrix.DenseGeneticMappableMatrix.__add__"]], "__mul__() (pybrops.popgen.gmap.densegeneticmappablematrix.densegeneticmappablematrix method)": [[1083, "pybrops.popgen.gmap.DenseGeneticMappableMatrix.DenseGeneticMappableMatrix.__mul__"]], "adjoin() (pybrops.popgen.gmap.densegeneticmappablematrix.densegeneticmappablematrix method)": [[1083, "pybrops.popgen.gmap.DenseGeneticMappableMatrix.DenseGeneticMappableMatrix.adjoin"]], "adjoin_vrnt() (pybrops.popgen.gmap.densegeneticmappablematrix.densegeneticmappablematrix method)": [[1083, "pybrops.popgen.gmap.DenseGeneticMappableMatrix.DenseGeneticMappableMatrix.adjoin_vrnt"]], "append() (pybrops.popgen.gmap.densegeneticmappablematrix.densegeneticmappablematrix method)": [[1083, "pybrops.popgen.gmap.DenseGeneticMappableMatrix.DenseGeneticMappableMatrix.append"]], "append_vrnt() (pybrops.popgen.gmap.densegeneticmappablematrix.densegeneticmappablematrix method)": [[1083, "pybrops.popgen.gmap.DenseGeneticMappableMatrix.DenseGeneticMappableMatrix.append_vrnt"]], "concat() (pybrops.popgen.gmap.densegeneticmappablematrix.densegeneticmappablematrix class method)": [[1083, "pybrops.popgen.gmap.DenseGeneticMappableMatrix.DenseGeneticMappableMatrix.concat"]], "concat_vrnt() (pybrops.popgen.gmap.densegeneticmappablematrix.densegeneticmappablematrix class method)": [[1083, "pybrops.popgen.gmap.DenseGeneticMappableMatrix.DenseGeneticMappableMatrix.concat_vrnt"]], "copy() (pybrops.popgen.gmap.densegeneticmappablematrix.densegeneticmappablematrix method)": [[1083, "pybrops.popgen.gmap.DenseGeneticMappableMatrix.DenseGeneticMappableMatrix.copy"]], "deepcopy() (pybrops.popgen.gmap.densegeneticmappablematrix.densegeneticmappablematrix method)": [[1083, "pybrops.popgen.gmap.DenseGeneticMappableMatrix.DenseGeneticMappableMatrix.deepcopy"]], "delete() (pybrops.popgen.gmap.densegeneticmappablematrix.densegeneticmappablematrix method)": [[1083, "pybrops.popgen.gmap.DenseGeneticMappableMatrix.DenseGeneticMappableMatrix.delete"]], "delete_vrnt() (pybrops.popgen.gmap.densegeneticmappablematrix.densegeneticmappablematrix method)": [[1083, "pybrops.popgen.gmap.DenseGeneticMappableMatrix.DenseGeneticMappableMatrix.delete_vrnt"]], "from_hdf5() (pybrops.popgen.gmap.densegeneticmappablematrix.densegeneticmappablematrix class method)": [[1083, "pybrops.popgen.gmap.DenseGeneticMappableMatrix.DenseGeneticMappableMatrix.from_hdf5"]], "group() (pybrops.popgen.gmap.densegeneticmappablematrix.densegeneticmappablematrix method)": [[1083, "pybrops.popgen.gmap.DenseGeneticMappableMatrix.DenseGeneticMappableMatrix.group"]], "group_vrnt() (pybrops.popgen.gmap.densegeneticmappablematrix.densegeneticmappablematrix method)": [[1083, "pybrops.popgen.gmap.DenseGeneticMappableMatrix.DenseGeneticMappableMatrix.group_vrnt"]], "incorp() (pybrops.popgen.gmap.densegeneticmappablematrix.densegeneticmappablematrix method)": [[1083, "pybrops.popgen.gmap.DenseGeneticMappableMatrix.DenseGeneticMappableMatrix.incorp"]], "incorp_vrnt() (pybrops.popgen.gmap.densegeneticmappablematrix.densegeneticmappablematrix method)": [[1083, "pybrops.popgen.gmap.DenseGeneticMappableMatrix.DenseGeneticMappableMatrix.incorp_vrnt"]], "insert() (pybrops.popgen.gmap.densegeneticmappablematrix.densegeneticmappablematrix method)": [[1083, "pybrops.popgen.gmap.DenseGeneticMappableMatrix.DenseGeneticMappableMatrix.insert"]], "insert_vrnt() (pybrops.popgen.gmap.densegeneticmappablematrix.densegeneticmappablematrix method)": [[1083, "pybrops.popgen.gmap.DenseGeneticMappableMatrix.DenseGeneticMappableMatrix.insert_vrnt"]], "interp_genpos() (pybrops.popgen.gmap.densegeneticmappablematrix.densegeneticmappablematrix method)": [[1083, "pybrops.popgen.gmap.DenseGeneticMappableMatrix.DenseGeneticMappableMatrix.interp_genpos"]], "interp_xoprob() (pybrops.popgen.gmap.densegeneticmappablematrix.densegeneticmappablematrix method)": [[1083, "pybrops.popgen.gmap.DenseGeneticMappableMatrix.DenseGeneticMappableMatrix.interp_xoprob"]], "is_grouped() (pybrops.popgen.gmap.densegeneticmappablematrix.densegeneticmappablematrix method)": [[1083, "pybrops.popgen.gmap.DenseGeneticMappableMatrix.DenseGeneticMappableMatrix.is_grouped"]], "is_grouped_vrnt() (pybrops.popgen.gmap.densegeneticmappablematrix.densegeneticmappablematrix method)": [[1083, "pybrops.popgen.gmap.DenseGeneticMappableMatrix.DenseGeneticMappableMatrix.is_grouped_vrnt"]], "lexsort() (pybrops.popgen.gmap.densegeneticmappablematrix.densegeneticmappablematrix method)": [[1083, "pybrops.popgen.gmap.DenseGeneticMappableMatrix.DenseGeneticMappableMatrix.lexsort"]], "lexsort_vrnt() (pybrops.popgen.gmap.densegeneticmappablematrix.densegeneticmappablematrix method)": [[1083, "pybrops.popgen.gmap.DenseGeneticMappableMatrix.DenseGeneticMappableMatrix.lexsort_vrnt"]], "mat (pybrops.popgen.gmap.densegeneticmappablematrix.densegeneticmappablematrix property)": [[1083, "pybrops.popgen.gmap.DenseGeneticMappableMatrix.DenseGeneticMappableMatrix.mat"]], "mat_ndim (pybrops.popgen.gmap.densegeneticmappablematrix.densegeneticmappablematrix property)": [[1083, "pybrops.popgen.gmap.DenseGeneticMappableMatrix.DenseGeneticMappableMatrix.mat_ndim"]], "mat_shape (pybrops.popgen.gmap.densegeneticmappablematrix.densegeneticmappablematrix property)": [[1083, "pybrops.popgen.gmap.DenseGeneticMappableMatrix.DenseGeneticMappableMatrix.mat_shape"]], "nvrnt (pybrops.popgen.gmap.densegeneticmappablematrix.densegeneticmappablematrix property)": [[1083, "pybrops.popgen.gmap.DenseGeneticMappableMatrix.DenseGeneticMappableMatrix.nvrnt"]], "remove() (pybrops.popgen.gmap.densegeneticmappablematrix.densegeneticmappablematrix method)": [[1083, "pybrops.popgen.gmap.DenseGeneticMappableMatrix.DenseGeneticMappableMatrix.remove"]], "remove_vrnt() (pybrops.popgen.gmap.densegeneticmappablematrix.densegeneticmappablematrix method)": [[1083, "pybrops.popgen.gmap.DenseGeneticMappableMatrix.DenseGeneticMappableMatrix.remove_vrnt"]], "reorder() (pybrops.popgen.gmap.densegeneticmappablematrix.densegeneticmappablematrix method)": [[1083, "pybrops.popgen.gmap.DenseGeneticMappableMatrix.DenseGeneticMappableMatrix.reorder"]], "reorder_vrnt() (pybrops.popgen.gmap.densegeneticmappablematrix.densegeneticmappablematrix method)": [[1083, "pybrops.popgen.gmap.DenseGeneticMappableMatrix.DenseGeneticMappableMatrix.reorder_vrnt"]], "select() (pybrops.popgen.gmap.densegeneticmappablematrix.densegeneticmappablematrix method)": [[1083, "pybrops.popgen.gmap.DenseGeneticMappableMatrix.DenseGeneticMappableMatrix.select"]], "select_vrnt() (pybrops.popgen.gmap.densegeneticmappablematrix.densegeneticmappablematrix method)": [[1083, "pybrops.popgen.gmap.DenseGeneticMappableMatrix.DenseGeneticMappableMatrix.select_vrnt"]], "sort() (pybrops.popgen.gmap.densegeneticmappablematrix.densegeneticmappablematrix method)": [[1083, "pybrops.popgen.gmap.DenseGeneticMappableMatrix.DenseGeneticMappableMatrix.sort"]], "sort_vrnt() (pybrops.popgen.gmap.densegeneticmappablematrix.densegeneticmappablematrix method)": [[1083, "pybrops.popgen.gmap.DenseGeneticMappableMatrix.DenseGeneticMappableMatrix.sort_vrnt"]], "to_hdf5() (pybrops.popgen.gmap.densegeneticmappablematrix.densegeneticmappablematrix method)": [[1083, "pybrops.popgen.gmap.DenseGeneticMappableMatrix.DenseGeneticMappableMatrix.to_hdf5"]], "ungroup() (pybrops.popgen.gmap.densegeneticmappablematrix.densegeneticmappablematrix method)": [[1083, "pybrops.popgen.gmap.DenseGeneticMappableMatrix.DenseGeneticMappableMatrix.ungroup"]], "ungroup_vrnt() (pybrops.popgen.gmap.densegeneticmappablematrix.densegeneticmappablematrix method)": [[1083, "pybrops.popgen.gmap.DenseGeneticMappableMatrix.DenseGeneticMappableMatrix.ungroup_vrnt"]], "vrnt_axis (pybrops.popgen.gmap.densegeneticmappablematrix.densegeneticmappablematrix property)": [[1083, "pybrops.popgen.gmap.DenseGeneticMappableMatrix.DenseGeneticMappableMatrix.vrnt_axis"]], "vrnt_chrgrp (pybrops.popgen.gmap.densegeneticmappablematrix.densegeneticmappablematrix property)": [[1083, "pybrops.popgen.gmap.DenseGeneticMappableMatrix.DenseGeneticMappableMatrix.vrnt_chrgrp"]], "vrnt_chrgrp_len (pybrops.popgen.gmap.densegeneticmappablematrix.densegeneticmappablematrix property)": [[1083, "pybrops.popgen.gmap.DenseGeneticMappableMatrix.DenseGeneticMappableMatrix.vrnt_chrgrp_len"]], "vrnt_chrgrp_name (pybrops.popgen.gmap.densegeneticmappablematrix.densegeneticmappablematrix property)": [[1083, "pybrops.popgen.gmap.DenseGeneticMappableMatrix.DenseGeneticMappableMatrix.vrnt_chrgrp_name"]], "vrnt_chrgrp_spix (pybrops.popgen.gmap.densegeneticmappablematrix.densegeneticmappablematrix property)": [[1083, "pybrops.popgen.gmap.DenseGeneticMappableMatrix.DenseGeneticMappableMatrix.vrnt_chrgrp_spix"]], "vrnt_chrgrp_stix (pybrops.popgen.gmap.densegeneticmappablematrix.densegeneticmappablematrix property)": [[1083, "pybrops.popgen.gmap.DenseGeneticMappableMatrix.DenseGeneticMappableMatrix.vrnt_chrgrp_stix"]], "vrnt_genpos (pybrops.popgen.gmap.densegeneticmappablematrix.densegeneticmappablematrix property)": [[1083, "pybrops.popgen.gmap.DenseGeneticMappableMatrix.DenseGeneticMappableMatrix.vrnt_genpos"]], "vrnt_hapalt (pybrops.popgen.gmap.densegeneticmappablematrix.densegeneticmappablematrix property)": [[1083, "pybrops.popgen.gmap.DenseGeneticMappableMatrix.DenseGeneticMappableMatrix.vrnt_hapalt"]], "vrnt_hapgrp (pybrops.popgen.gmap.densegeneticmappablematrix.densegeneticmappablematrix property)": [[1083, "pybrops.popgen.gmap.DenseGeneticMappableMatrix.DenseGeneticMappableMatrix.vrnt_hapgrp"]], "vrnt_hapref (pybrops.popgen.gmap.densegeneticmappablematrix.densegeneticmappablematrix property)": [[1083, "pybrops.popgen.gmap.DenseGeneticMappableMatrix.DenseGeneticMappableMatrix.vrnt_hapref"]], "vrnt_mask (pybrops.popgen.gmap.densegeneticmappablematrix.densegeneticmappablematrix property)": [[1083, "pybrops.popgen.gmap.DenseGeneticMappableMatrix.DenseGeneticMappableMatrix.vrnt_mask"]], "vrnt_name (pybrops.popgen.gmap.densegeneticmappablematrix.densegeneticmappablematrix property)": [[1083, "pybrops.popgen.gmap.DenseGeneticMappableMatrix.DenseGeneticMappableMatrix.vrnt_name"]], "vrnt_phypos (pybrops.popgen.gmap.densegeneticmappablematrix.densegeneticmappablematrix property)": [[1083, "pybrops.popgen.gmap.DenseGeneticMappableMatrix.DenseGeneticMappableMatrix.vrnt_phypos"]], "vrnt_xoprob (pybrops.popgen.gmap.densegeneticmappablematrix.densegeneticmappablematrix property)": [[1083, "pybrops.popgen.gmap.DenseGeneticMappableMatrix.DenseGeneticMappableMatrix.vrnt_xoprob"]], "check_is_densegeneticmappablematrix() (in module pybrops.popgen.gmap.densegeneticmappablematrix)": [[1084, "pybrops.popgen.gmap.DenseGeneticMappableMatrix.check_is_DenseGeneticMappableMatrix"]], "pybrops.popgen.gmap.extendedgeneticmap": [[1085, "module-pybrops.popgen.gmap.ExtendedGeneticMap"]], "extendedgeneticmap (class in pybrops.popgen.gmap.extendedgeneticmap)": [[1086, "pybrops.popgen.gmap.ExtendedGeneticMap.ExtendedGeneticMap"]], "build_spline() (pybrops.popgen.gmap.extendedgeneticmap.extendedgeneticmap method)": [[1086, "pybrops.popgen.gmap.ExtendedGeneticMap.ExtendedGeneticMap.build_spline"]], "congruence() (pybrops.popgen.gmap.extendedgeneticmap.extendedgeneticmap method)": [[1086, "pybrops.popgen.gmap.ExtendedGeneticMap.ExtendedGeneticMap.congruence"]], "copy() (pybrops.popgen.gmap.extendedgeneticmap.extendedgeneticmap method)": [[1086, "pybrops.popgen.gmap.ExtendedGeneticMap.ExtendedGeneticMap.copy"]], "deepcopy() (pybrops.popgen.gmap.extendedgeneticmap.extendedgeneticmap method)": [[1086, "pybrops.popgen.gmap.ExtendedGeneticMap.ExtendedGeneticMap.deepcopy"]], "from_csv() (pybrops.popgen.gmap.extendedgeneticmap.extendedgeneticmap class method)": [[1086, "pybrops.popgen.gmap.ExtendedGeneticMap.ExtendedGeneticMap.from_csv"]], "from_egmap() (pybrops.popgen.gmap.extendedgeneticmap.extendedgeneticmap class method)": [[1086, "pybrops.popgen.gmap.ExtendedGeneticMap.ExtendedGeneticMap.from_egmap"]], "from_pandas() (pybrops.popgen.gmap.extendedgeneticmap.extendedgeneticmap class method)": [[1086, "pybrops.popgen.gmap.ExtendedGeneticMap.ExtendedGeneticMap.from_pandas"]], "gdist1g() (pybrops.popgen.gmap.extendedgeneticmap.extendedgeneticmap method)": [[1086, "pybrops.popgen.gmap.ExtendedGeneticMap.ExtendedGeneticMap.gdist1g"]], "gdist1p() (pybrops.popgen.gmap.extendedgeneticmap.extendedgeneticmap method)": [[1086, "pybrops.popgen.gmap.ExtendedGeneticMap.ExtendedGeneticMap.gdist1p"]], "gdist2g() (pybrops.popgen.gmap.extendedgeneticmap.extendedgeneticmap method)": [[1086, "pybrops.popgen.gmap.ExtendedGeneticMap.ExtendedGeneticMap.gdist2g"]], "gdist2p() (pybrops.popgen.gmap.extendedgeneticmap.extendedgeneticmap method)": [[1086, "pybrops.popgen.gmap.ExtendedGeneticMap.ExtendedGeneticMap.gdist2p"]], "group() (pybrops.popgen.gmap.extendedgeneticmap.extendedgeneticmap method)": [[1086, "pybrops.popgen.gmap.ExtendedGeneticMap.ExtendedGeneticMap.group"]], "has_spline() (pybrops.popgen.gmap.extendedgeneticmap.extendedgeneticmap method)": [[1086, "pybrops.popgen.gmap.ExtendedGeneticMap.ExtendedGeneticMap.has_spline"]], "interp_genpos() (pybrops.popgen.gmap.extendedgeneticmap.extendedgeneticmap method)": [[1086, "pybrops.popgen.gmap.ExtendedGeneticMap.ExtendedGeneticMap.interp_genpos"]], "interp_gmap() (pybrops.popgen.gmap.extendedgeneticmap.extendedgeneticmap method)": [[1086, "pybrops.popgen.gmap.ExtendedGeneticMap.ExtendedGeneticMap.interp_gmap"]], "is_congruent() (pybrops.popgen.gmap.extendedgeneticmap.extendedgeneticmap method)": [[1086, "pybrops.popgen.gmap.ExtendedGeneticMap.ExtendedGeneticMap.is_congruent"]], "is_grouped() (pybrops.popgen.gmap.extendedgeneticmap.extendedgeneticmap method)": [[1086, "pybrops.popgen.gmap.ExtendedGeneticMap.ExtendedGeneticMap.is_grouped"]], "lexsort() (pybrops.popgen.gmap.extendedgeneticmap.extendedgeneticmap method)": [[1086, "pybrops.popgen.gmap.ExtendedGeneticMap.ExtendedGeneticMap.lexsort"]], "nvrnt (pybrops.popgen.gmap.extendedgeneticmap.extendedgeneticmap property)": [[1086, "pybrops.popgen.gmap.ExtendedGeneticMap.ExtendedGeneticMap.nvrnt"]], "prune() (pybrops.popgen.gmap.extendedgeneticmap.extendedgeneticmap method)": [[1086, "pybrops.popgen.gmap.ExtendedGeneticMap.ExtendedGeneticMap.prune"]], "remove() (pybrops.popgen.gmap.extendedgeneticmap.extendedgeneticmap method)": [[1086, "pybrops.popgen.gmap.ExtendedGeneticMap.ExtendedGeneticMap.remove"]], "remove_discrepancies() (pybrops.popgen.gmap.extendedgeneticmap.extendedgeneticmap method)": [[1086, "pybrops.popgen.gmap.ExtendedGeneticMap.ExtendedGeneticMap.remove_discrepancies"]], "reorder() (pybrops.popgen.gmap.extendedgeneticmap.extendedgeneticmap method)": [[1086, "pybrops.popgen.gmap.ExtendedGeneticMap.ExtendedGeneticMap.reorder"]], "select() (pybrops.popgen.gmap.extendedgeneticmap.extendedgeneticmap method)": [[1086, "pybrops.popgen.gmap.ExtendedGeneticMap.ExtendedGeneticMap.select"]], "sort() (pybrops.popgen.gmap.extendedgeneticmap.extendedgeneticmap method)": [[1086, "pybrops.popgen.gmap.ExtendedGeneticMap.ExtendedGeneticMap.sort"]], "spline (pybrops.popgen.gmap.extendedgeneticmap.extendedgeneticmap property)": [[1086, "pybrops.popgen.gmap.ExtendedGeneticMap.ExtendedGeneticMap.spline"]], "spline_fill_value (pybrops.popgen.gmap.extendedgeneticmap.extendedgeneticmap property)": [[1086, "pybrops.popgen.gmap.ExtendedGeneticMap.ExtendedGeneticMap.spline_fill_value"]], "spline_kind (pybrops.popgen.gmap.extendedgeneticmap.extendedgeneticmap property)": [[1086, "pybrops.popgen.gmap.ExtendedGeneticMap.ExtendedGeneticMap.spline_kind"]], "to_csv() (pybrops.popgen.gmap.extendedgeneticmap.extendedgeneticmap method)": [[1086, "pybrops.popgen.gmap.ExtendedGeneticMap.ExtendedGeneticMap.to_csv"]], "to_egmap() (pybrops.popgen.gmap.extendedgeneticmap.extendedgeneticmap method)": [[1086, "pybrops.popgen.gmap.ExtendedGeneticMap.ExtendedGeneticMap.to_egmap"]], "to_pandas() (pybrops.popgen.gmap.extendedgeneticmap.extendedgeneticmap method)": [[1086, "pybrops.popgen.gmap.ExtendedGeneticMap.ExtendedGeneticMap.to_pandas"]], "ungroup() (pybrops.popgen.gmap.extendedgeneticmap.extendedgeneticmap method)": [[1086, "pybrops.popgen.gmap.ExtendedGeneticMap.ExtendedGeneticMap.ungroup"]], "vrnt_chrgrp (pybrops.popgen.gmap.extendedgeneticmap.extendedgeneticmap property)": [[1086, "pybrops.popgen.gmap.ExtendedGeneticMap.ExtendedGeneticMap.vrnt_chrgrp"]], "vrnt_chrgrp_len (pybrops.popgen.gmap.extendedgeneticmap.extendedgeneticmap property)": [[1086, "pybrops.popgen.gmap.ExtendedGeneticMap.ExtendedGeneticMap.vrnt_chrgrp_len"]], "vrnt_chrgrp_name (pybrops.popgen.gmap.extendedgeneticmap.extendedgeneticmap property)": [[1086, "pybrops.popgen.gmap.ExtendedGeneticMap.ExtendedGeneticMap.vrnt_chrgrp_name"]], "vrnt_chrgrp_spix (pybrops.popgen.gmap.extendedgeneticmap.extendedgeneticmap property)": [[1086, "pybrops.popgen.gmap.ExtendedGeneticMap.ExtendedGeneticMap.vrnt_chrgrp_spix"]], "vrnt_chrgrp_stix (pybrops.popgen.gmap.extendedgeneticmap.extendedgeneticmap property)": [[1086, "pybrops.popgen.gmap.ExtendedGeneticMap.ExtendedGeneticMap.vrnt_chrgrp_stix"]], "vrnt_fncode (pybrops.popgen.gmap.extendedgeneticmap.extendedgeneticmap property)": [[1086, "pybrops.popgen.gmap.ExtendedGeneticMap.ExtendedGeneticMap.vrnt_fncode"]], "vrnt_genpos (pybrops.popgen.gmap.extendedgeneticmap.extendedgeneticmap property)": [[1086, "pybrops.popgen.gmap.ExtendedGeneticMap.ExtendedGeneticMap.vrnt_genpos"]], "vrnt_name (pybrops.popgen.gmap.extendedgeneticmap.extendedgeneticmap property)": [[1086, "pybrops.popgen.gmap.ExtendedGeneticMap.ExtendedGeneticMap.vrnt_name"]], "vrnt_phypos (pybrops.popgen.gmap.extendedgeneticmap.extendedgeneticmap property)": [[1086, "pybrops.popgen.gmap.ExtendedGeneticMap.ExtendedGeneticMap.vrnt_phypos"]], "vrnt_stop (pybrops.popgen.gmap.extendedgeneticmap.extendedgeneticmap property)": [[1086, "pybrops.popgen.gmap.ExtendedGeneticMap.ExtendedGeneticMap.vrnt_stop"]], "check_is_extendedgeneticmap() (in module pybrops.popgen.gmap.extendedgeneticmap)": [[1087, "pybrops.popgen.gmap.ExtendedGeneticMap.check_is_ExtendedGeneticMap"]], "pybrops.popgen.gmap.geneticmap": [[1088, "module-pybrops.popgen.gmap.GeneticMap"]], "geneticmap (class in pybrops.popgen.gmap.geneticmap)": [[1089, "pybrops.popgen.gmap.GeneticMap.GeneticMap"]], "build_spline() (pybrops.popgen.gmap.geneticmap.geneticmap method)": [[1089, "pybrops.popgen.gmap.GeneticMap.GeneticMap.build_spline"]], "congruence() (pybrops.popgen.gmap.geneticmap.geneticmap method)": [[1089, "pybrops.popgen.gmap.GeneticMap.GeneticMap.congruence"]], "copy() (pybrops.popgen.gmap.geneticmap.geneticmap method)": [[1089, "pybrops.popgen.gmap.GeneticMap.GeneticMap.copy"]], "deepcopy() (pybrops.popgen.gmap.geneticmap.geneticmap method)": [[1089, "pybrops.popgen.gmap.GeneticMap.GeneticMap.deepcopy"]], "from_csv() (pybrops.popgen.gmap.geneticmap.geneticmap class method)": [[1089, "pybrops.popgen.gmap.GeneticMap.GeneticMap.from_csv"]], "from_pandas() (pybrops.popgen.gmap.geneticmap.geneticmap class method)": [[1089, "pybrops.popgen.gmap.GeneticMap.GeneticMap.from_pandas"]], "gdist1g() (pybrops.popgen.gmap.geneticmap.geneticmap method)": [[1089, "pybrops.popgen.gmap.GeneticMap.GeneticMap.gdist1g"]], "gdist1p() (pybrops.popgen.gmap.geneticmap.geneticmap method)": [[1089, "pybrops.popgen.gmap.GeneticMap.GeneticMap.gdist1p"]], "gdist2g() (pybrops.popgen.gmap.geneticmap.geneticmap method)": [[1089, "pybrops.popgen.gmap.GeneticMap.GeneticMap.gdist2g"]], "gdist2p() (pybrops.popgen.gmap.geneticmap.geneticmap method)": [[1089, "pybrops.popgen.gmap.GeneticMap.GeneticMap.gdist2p"]], "group() (pybrops.popgen.gmap.geneticmap.geneticmap method)": [[1089, "pybrops.popgen.gmap.GeneticMap.GeneticMap.group"]], "has_spline() (pybrops.popgen.gmap.geneticmap.geneticmap method)": [[1089, "pybrops.popgen.gmap.GeneticMap.GeneticMap.has_spline"]], "interp_genpos() (pybrops.popgen.gmap.geneticmap.geneticmap method)": [[1089, "pybrops.popgen.gmap.GeneticMap.GeneticMap.interp_genpos"]], "interp_gmap() (pybrops.popgen.gmap.geneticmap.geneticmap method)": [[1089, "pybrops.popgen.gmap.GeneticMap.GeneticMap.interp_gmap"]], "is_congruent() (pybrops.popgen.gmap.geneticmap.geneticmap method)": [[1089, "pybrops.popgen.gmap.GeneticMap.GeneticMap.is_congruent"]], "is_grouped() (pybrops.popgen.gmap.geneticmap.geneticmap method)": [[1089, "pybrops.popgen.gmap.GeneticMap.GeneticMap.is_grouped"]], "lexsort() (pybrops.popgen.gmap.geneticmap.geneticmap method)": [[1089, "pybrops.popgen.gmap.GeneticMap.GeneticMap.lexsort"]], "nvrnt (pybrops.popgen.gmap.geneticmap.geneticmap property)": [[1089, "pybrops.popgen.gmap.GeneticMap.GeneticMap.nvrnt"]], "remove() (pybrops.popgen.gmap.geneticmap.geneticmap method)": [[1089, "pybrops.popgen.gmap.GeneticMap.GeneticMap.remove"]], "remove_discrepancies() (pybrops.popgen.gmap.geneticmap.geneticmap method)": [[1089, "pybrops.popgen.gmap.GeneticMap.GeneticMap.remove_discrepancies"]], "reorder() (pybrops.popgen.gmap.geneticmap.geneticmap method)": [[1089, "pybrops.popgen.gmap.GeneticMap.GeneticMap.reorder"]], "select() (pybrops.popgen.gmap.geneticmap.geneticmap method)": [[1089, "pybrops.popgen.gmap.GeneticMap.GeneticMap.select"]], "sort() (pybrops.popgen.gmap.geneticmap.geneticmap method)": [[1089, "pybrops.popgen.gmap.GeneticMap.GeneticMap.sort"]], "spline (pybrops.popgen.gmap.geneticmap.geneticmap property)": [[1089, "pybrops.popgen.gmap.GeneticMap.GeneticMap.spline"]], "spline_fill_value (pybrops.popgen.gmap.geneticmap.geneticmap property)": [[1089, "pybrops.popgen.gmap.GeneticMap.GeneticMap.spline_fill_value"]], "spline_kind (pybrops.popgen.gmap.geneticmap.geneticmap property)": [[1089, "pybrops.popgen.gmap.GeneticMap.GeneticMap.spline_kind"]], "to_csv() (pybrops.popgen.gmap.geneticmap.geneticmap method)": [[1089, "pybrops.popgen.gmap.GeneticMap.GeneticMap.to_csv"]], "to_pandas() (pybrops.popgen.gmap.geneticmap.geneticmap method)": [[1089, "pybrops.popgen.gmap.GeneticMap.GeneticMap.to_pandas"]], "ungroup() (pybrops.popgen.gmap.geneticmap.geneticmap method)": [[1089, "pybrops.popgen.gmap.GeneticMap.GeneticMap.ungroup"]], "vrnt_chrgrp (pybrops.popgen.gmap.geneticmap.geneticmap property)": [[1089, "pybrops.popgen.gmap.GeneticMap.GeneticMap.vrnt_chrgrp"]], "vrnt_chrgrp_len (pybrops.popgen.gmap.geneticmap.geneticmap property)": [[1089, "pybrops.popgen.gmap.GeneticMap.GeneticMap.vrnt_chrgrp_len"]], "vrnt_chrgrp_name (pybrops.popgen.gmap.geneticmap.geneticmap property)": [[1089, "pybrops.popgen.gmap.GeneticMap.GeneticMap.vrnt_chrgrp_name"]], "vrnt_chrgrp_spix (pybrops.popgen.gmap.geneticmap.geneticmap property)": [[1089, "pybrops.popgen.gmap.GeneticMap.GeneticMap.vrnt_chrgrp_spix"]], "vrnt_chrgrp_stix (pybrops.popgen.gmap.geneticmap.geneticmap property)": [[1089, "pybrops.popgen.gmap.GeneticMap.GeneticMap.vrnt_chrgrp_stix"]], "vrnt_genpos (pybrops.popgen.gmap.geneticmap.geneticmap property)": [[1089, "pybrops.popgen.gmap.GeneticMap.GeneticMap.vrnt_genpos"]], "vrnt_phypos (pybrops.popgen.gmap.geneticmap.geneticmap property)": [[1089, "pybrops.popgen.gmap.GeneticMap.GeneticMap.vrnt_phypos"]], "check_is_geneticmap() (in module pybrops.popgen.gmap.geneticmap)": [[1090, "pybrops.popgen.gmap.GeneticMap.check_is_GeneticMap"]], "pybrops.popgen.gmap.geneticmapfunction": [[1091, "module-pybrops.popgen.gmap.GeneticMapFunction"]], "geneticmapfunction (class in pybrops.popgen.gmap.geneticmapfunction)": [[1092, "pybrops.popgen.gmap.GeneticMapFunction.GeneticMapFunction"]], "invmapfn() (pybrops.popgen.gmap.geneticmapfunction.geneticmapfunction method)": [[1092, "pybrops.popgen.gmap.GeneticMapFunction.GeneticMapFunction.invmapfn"]], "mapfn() (pybrops.popgen.gmap.geneticmapfunction.geneticmapfunction method)": [[1092, "pybrops.popgen.gmap.GeneticMapFunction.GeneticMapFunction.mapfn"]], "rprob1g() (pybrops.popgen.gmap.geneticmapfunction.geneticmapfunction method)": [[1092, "pybrops.popgen.gmap.GeneticMapFunction.GeneticMapFunction.rprob1g"]], "rprob1p() (pybrops.popgen.gmap.geneticmapfunction.geneticmapfunction method)": [[1092, "pybrops.popgen.gmap.GeneticMapFunction.GeneticMapFunction.rprob1p"]], "rprob2g() (pybrops.popgen.gmap.geneticmapfunction.geneticmapfunction method)": [[1092, "pybrops.popgen.gmap.GeneticMapFunction.GeneticMapFunction.rprob2g"]], "rprob2p() (pybrops.popgen.gmap.geneticmapfunction.geneticmapfunction method)": [[1092, "pybrops.popgen.gmap.GeneticMapFunction.GeneticMapFunction.rprob2p"]], "check_is_geneticmapfunction() (in module pybrops.popgen.gmap.geneticmapfunction)": [[1093, "pybrops.popgen.gmap.GeneticMapFunction.check_is_GeneticMapFunction"]], "pybrops.popgen.gmap.geneticmappablematrix": [[1094, "module-pybrops.popgen.gmap.GeneticMappableMatrix"]], "geneticmappablematrix (class in pybrops.popgen.gmap.geneticmappablematrix)": [[1095, "pybrops.popgen.gmap.GeneticMappableMatrix.GeneticMappableMatrix"]], "__add__() (pybrops.popgen.gmap.geneticmappablematrix.geneticmappablematrix method)": [[1095, "pybrops.popgen.gmap.GeneticMappableMatrix.GeneticMappableMatrix.__add__"]], "__mul__() (pybrops.popgen.gmap.geneticmappablematrix.geneticmappablematrix method)": [[1095, "pybrops.popgen.gmap.GeneticMappableMatrix.GeneticMappableMatrix.__mul__"]], "adjoin() (pybrops.popgen.gmap.geneticmappablematrix.geneticmappablematrix method)": [[1095, "pybrops.popgen.gmap.GeneticMappableMatrix.GeneticMappableMatrix.adjoin"]], "adjoin_vrnt() (pybrops.popgen.gmap.geneticmappablematrix.geneticmappablematrix method)": [[1095, "pybrops.popgen.gmap.GeneticMappableMatrix.GeneticMappableMatrix.adjoin_vrnt"]], "append() (pybrops.popgen.gmap.geneticmappablematrix.geneticmappablematrix method)": [[1095, "pybrops.popgen.gmap.GeneticMappableMatrix.GeneticMappableMatrix.append"]], "append_vrnt() (pybrops.popgen.gmap.geneticmappablematrix.geneticmappablematrix method)": [[1095, "pybrops.popgen.gmap.GeneticMappableMatrix.GeneticMappableMatrix.append_vrnt"]], "concat() (pybrops.popgen.gmap.geneticmappablematrix.geneticmappablematrix class method)": [[1095, "pybrops.popgen.gmap.GeneticMappableMatrix.GeneticMappableMatrix.concat"]], "concat_vrnt() (pybrops.popgen.gmap.geneticmappablematrix.geneticmappablematrix class method)": [[1095, "pybrops.popgen.gmap.GeneticMappableMatrix.GeneticMappableMatrix.concat_vrnt"]], "copy() (pybrops.popgen.gmap.geneticmappablematrix.geneticmappablematrix method)": [[1095, "pybrops.popgen.gmap.GeneticMappableMatrix.GeneticMappableMatrix.copy"]], "deepcopy() (pybrops.popgen.gmap.geneticmappablematrix.geneticmappablematrix method)": [[1095, "pybrops.popgen.gmap.GeneticMappableMatrix.GeneticMappableMatrix.deepcopy"]], "delete() (pybrops.popgen.gmap.geneticmappablematrix.geneticmappablematrix method)": [[1095, "pybrops.popgen.gmap.GeneticMappableMatrix.GeneticMappableMatrix.delete"]], "delete_vrnt() (pybrops.popgen.gmap.geneticmappablematrix.geneticmappablematrix method)": [[1095, "pybrops.popgen.gmap.GeneticMappableMatrix.GeneticMappableMatrix.delete_vrnt"]], "from_hdf5() (pybrops.popgen.gmap.geneticmappablematrix.geneticmappablematrix class method)": [[1095, "pybrops.popgen.gmap.GeneticMappableMatrix.GeneticMappableMatrix.from_hdf5"]], "group() (pybrops.popgen.gmap.geneticmappablematrix.geneticmappablematrix method)": [[1095, "pybrops.popgen.gmap.GeneticMappableMatrix.GeneticMappableMatrix.group"]], "group_vrnt() (pybrops.popgen.gmap.geneticmappablematrix.geneticmappablematrix method)": [[1095, "pybrops.popgen.gmap.GeneticMappableMatrix.GeneticMappableMatrix.group_vrnt"]], "incorp() (pybrops.popgen.gmap.geneticmappablematrix.geneticmappablematrix method)": [[1095, "pybrops.popgen.gmap.GeneticMappableMatrix.GeneticMappableMatrix.incorp"]], "incorp_vrnt() (pybrops.popgen.gmap.geneticmappablematrix.geneticmappablematrix method)": [[1095, "pybrops.popgen.gmap.GeneticMappableMatrix.GeneticMappableMatrix.incorp_vrnt"]], "insert() (pybrops.popgen.gmap.geneticmappablematrix.geneticmappablematrix method)": [[1095, "pybrops.popgen.gmap.GeneticMappableMatrix.GeneticMappableMatrix.insert"]], "insert_vrnt() (pybrops.popgen.gmap.geneticmappablematrix.geneticmappablematrix method)": [[1095, "pybrops.popgen.gmap.GeneticMappableMatrix.GeneticMappableMatrix.insert_vrnt"]], "interp_genpos() (pybrops.popgen.gmap.geneticmappablematrix.geneticmappablematrix method)": [[1095, "pybrops.popgen.gmap.GeneticMappableMatrix.GeneticMappableMatrix.interp_genpos"]], "interp_xoprob() (pybrops.popgen.gmap.geneticmappablematrix.geneticmappablematrix method)": [[1095, "pybrops.popgen.gmap.GeneticMappableMatrix.GeneticMappableMatrix.interp_xoprob"]], "is_grouped() (pybrops.popgen.gmap.geneticmappablematrix.geneticmappablematrix method)": [[1095, "pybrops.popgen.gmap.GeneticMappableMatrix.GeneticMappableMatrix.is_grouped"]], "is_grouped_vrnt() (pybrops.popgen.gmap.geneticmappablematrix.geneticmappablematrix method)": [[1095, "pybrops.popgen.gmap.GeneticMappableMatrix.GeneticMappableMatrix.is_grouped_vrnt"]], "lexsort() (pybrops.popgen.gmap.geneticmappablematrix.geneticmappablematrix method)": [[1095, "pybrops.popgen.gmap.GeneticMappableMatrix.GeneticMappableMatrix.lexsort"]], "lexsort_vrnt() (pybrops.popgen.gmap.geneticmappablematrix.geneticmappablematrix method)": [[1095, "pybrops.popgen.gmap.GeneticMappableMatrix.GeneticMappableMatrix.lexsort_vrnt"]], "mat (pybrops.popgen.gmap.geneticmappablematrix.geneticmappablematrix property)": [[1095, "pybrops.popgen.gmap.GeneticMappableMatrix.GeneticMappableMatrix.mat"]], "mat_ndim (pybrops.popgen.gmap.geneticmappablematrix.geneticmappablematrix property)": [[1095, "pybrops.popgen.gmap.GeneticMappableMatrix.GeneticMappableMatrix.mat_ndim"]], "mat_shape (pybrops.popgen.gmap.geneticmappablematrix.geneticmappablematrix property)": [[1095, "pybrops.popgen.gmap.GeneticMappableMatrix.GeneticMappableMatrix.mat_shape"]], "nvrnt (pybrops.popgen.gmap.geneticmappablematrix.geneticmappablematrix property)": [[1095, "pybrops.popgen.gmap.GeneticMappableMatrix.GeneticMappableMatrix.nvrnt"]], "remove() (pybrops.popgen.gmap.geneticmappablematrix.geneticmappablematrix method)": [[1095, "pybrops.popgen.gmap.GeneticMappableMatrix.GeneticMappableMatrix.remove"]], "remove_vrnt() (pybrops.popgen.gmap.geneticmappablematrix.geneticmappablematrix method)": [[1095, "pybrops.popgen.gmap.GeneticMappableMatrix.GeneticMappableMatrix.remove_vrnt"]], "reorder() (pybrops.popgen.gmap.geneticmappablematrix.geneticmappablematrix method)": [[1095, "pybrops.popgen.gmap.GeneticMappableMatrix.GeneticMappableMatrix.reorder"]], "reorder_vrnt() (pybrops.popgen.gmap.geneticmappablematrix.geneticmappablematrix method)": [[1095, "pybrops.popgen.gmap.GeneticMappableMatrix.GeneticMappableMatrix.reorder_vrnt"]], "select() (pybrops.popgen.gmap.geneticmappablematrix.geneticmappablematrix method)": [[1095, "pybrops.popgen.gmap.GeneticMappableMatrix.GeneticMappableMatrix.select"]], "select_vrnt() (pybrops.popgen.gmap.geneticmappablematrix.geneticmappablematrix method)": [[1095, "pybrops.popgen.gmap.GeneticMappableMatrix.GeneticMappableMatrix.select_vrnt"]], "sort() (pybrops.popgen.gmap.geneticmappablematrix.geneticmappablematrix method)": [[1095, "pybrops.popgen.gmap.GeneticMappableMatrix.GeneticMappableMatrix.sort"]], "sort_vrnt() (pybrops.popgen.gmap.geneticmappablematrix.geneticmappablematrix method)": [[1095, "pybrops.popgen.gmap.GeneticMappableMatrix.GeneticMappableMatrix.sort_vrnt"]], "to_hdf5() (pybrops.popgen.gmap.geneticmappablematrix.geneticmappablematrix method)": [[1095, "pybrops.popgen.gmap.GeneticMappableMatrix.GeneticMappableMatrix.to_hdf5"]], "ungroup() (pybrops.popgen.gmap.geneticmappablematrix.geneticmappablematrix method)": [[1095, "pybrops.popgen.gmap.GeneticMappableMatrix.GeneticMappableMatrix.ungroup"]], "ungroup_vrnt() (pybrops.popgen.gmap.geneticmappablematrix.geneticmappablematrix method)": [[1095, "pybrops.popgen.gmap.GeneticMappableMatrix.GeneticMappableMatrix.ungroup_vrnt"]], "vrnt_axis (pybrops.popgen.gmap.geneticmappablematrix.geneticmappablematrix property)": [[1095, "pybrops.popgen.gmap.GeneticMappableMatrix.GeneticMappableMatrix.vrnt_axis"]], "vrnt_chrgrp (pybrops.popgen.gmap.geneticmappablematrix.geneticmappablematrix property)": [[1095, "pybrops.popgen.gmap.GeneticMappableMatrix.GeneticMappableMatrix.vrnt_chrgrp"]], "vrnt_chrgrp_len (pybrops.popgen.gmap.geneticmappablematrix.geneticmappablematrix property)": [[1095, "pybrops.popgen.gmap.GeneticMappableMatrix.GeneticMappableMatrix.vrnt_chrgrp_len"]], "vrnt_chrgrp_name (pybrops.popgen.gmap.geneticmappablematrix.geneticmappablematrix property)": [[1095, "pybrops.popgen.gmap.GeneticMappableMatrix.GeneticMappableMatrix.vrnt_chrgrp_name"]], "vrnt_chrgrp_spix (pybrops.popgen.gmap.geneticmappablematrix.geneticmappablematrix property)": [[1095, "pybrops.popgen.gmap.GeneticMappableMatrix.GeneticMappableMatrix.vrnt_chrgrp_spix"]], "vrnt_chrgrp_stix (pybrops.popgen.gmap.geneticmappablematrix.geneticmappablematrix property)": [[1095, "pybrops.popgen.gmap.GeneticMappableMatrix.GeneticMappableMatrix.vrnt_chrgrp_stix"]], "vrnt_genpos (pybrops.popgen.gmap.geneticmappablematrix.geneticmappablematrix property)": [[1095, "pybrops.popgen.gmap.GeneticMappableMatrix.GeneticMappableMatrix.vrnt_genpos"]], "vrnt_hapalt (pybrops.popgen.gmap.geneticmappablematrix.geneticmappablematrix property)": [[1095, "pybrops.popgen.gmap.GeneticMappableMatrix.GeneticMappableMatrix.vrnt_hapalt"]], "vrnt_hapgrp (pybrops.popgen.gmap.geneticmappablematrix.geneticmappablematrix property)": [[1095, "pybrops.popgen.gmap.GeneticMappableMatrix.GeneticMappableMatrix.vrnt_hapgrp"]], "vrnt_hapref (pybrops.popgen.gmap.geneticmappablematrix.geneticmappablematrix property)": [[1095, "pybrops.popgen.gmap.GeneticMappableMatrix.GeneticMappableMatrix.vrnt_hapref"]], "vrnt_mask (pybrops.popgen.gmap.geneticmappablematrix.geneticmappablematrix property)": [[1095, "pybrops.popgen.gmap.GeneticMappableMatrix.GeneticMappableMatrix.vrnt_mask"]], "vrnt_name (pybrops.popgen.gmap.geneticmappablematrix.geneticmappablematrix property)": [[1095, "pybrops.popgen.gmap.GeneticMappableMatrix.GeneticMappableMatrix.vrnt_name"]], "vrnt_phypos (pybrops.popgen.gmap.geneticmappablematrix.geneticmappablematrix property)": [[1095, "pybrops.popgen.gmap.GeneticMappableMatrix.GeneticMappableMatrix.vrnt_phypos"]], "vrnt_xoprob (pybrops.popgen.gmap.geneticmappablematrix.geneticmappablematrix property)": [[1095, "pybrops.popgen.gmap.GeneticMappableMatrix.GeneticMappableMatrix.vrnt_xoprob"]], "check_is_geneticmappablematrix() (in module pybrops.popgen.gmap.geneticmappablematrix)": [[1096, "pybrops.popgen.gmap.GeneticMappableMatrix.check_is_GeneticMappableMatrix"]], "pybrops.popgen.gmap.haldanemapfunction": [[1097, "module-pybrops.popgen.gmap.HaldaneMapFunction"]], "haldanemapfunction (class in pybrops.popgen.gmap.haldanemapfunction)": [[1098, "pybrops.popgen.gmap.HaldaneMapFunction.HaldaneMapFunction"]], "invmapfn() (pybrops.popgen.gmap.haldanemapfunction.haldanemapfunction method)": [[1098, "pybrops.popgen.gmap.HaldaneMapFunction.HaldaneMapFunction.invmapfn"]], "mapfn() (pybrops.popgen.gmap.haldanemapfunction.haldanemapfunction method)": [[1098, "pybrops.popgen.gmap.HaldaneMapFunction.HaldaneMapFunction.mapfn"]], "rprob1g() (pybrops.popgen.gmap.haldanemapfunction.haldanemapfunction method)": [[1098, "pybrops.popgen.gmap.HaldaneMapFunction.HaldaneMapFunction.rprob1g"]], "rprob1p() (pybrops.popgen.gmap.haldanemapfunction.haldanemapfunction method)": [[1098, "pybrops.popgen.gmap.HaldaneMapFunction.HaldaneMapFunction.rprob1p"]], "rprob2g() (pybrops.popgen.gmap.haldanemapfunction.haldanemapfunction method)": [[1098, "pybrops.popgen.gmap.HaldaneMapFunction.HaldaneMapFunction.rprob2g"]], "rprob2p() (pybrops.popgen.gmap.haldanemapfunction.haldanemapfunction method)": [[1098, "pybrops.popgen.gmap.HaldaneMapFunction.HaldaneMapFunction.rprob2p"]], "check_is_haldanemapfunction() (in module pybrops.popgen.gmap.haldanemapfunction)": [[1099, "pybrops.popgen.gmap.HaldaneMapFunction.check_is_HaldaneMapFunction"]], "pybrops.popgen.gmap.kosambimapfunction": [[1100, "module-pybrops.popgen.gmap.KosambiMapFunction"]], "kosambimapfunction (class in pybrops.popgen.gmap.kosambimapfunction)": [[1101, "pybrops.popgen.gmap.KosambiMapFunction.KosambiMapFunction"]], "invmapfn() (pybrops.popgen.gmap.kosambimapfunction.kosambimapfunction method)": [[1101, "pybrops.popgen.gmap.KosambiMapFunction.KosambiMapFunction.invmapfn"]], "mapfn() (pybrops.popgen.gmap.kosambimapfunction.kosambimapfunction method)": [[1101, "pybrops.popgen.gmap.KosambiMapFunction.KosambiMapFunction.mapfn"]], "rprob1g() (pybrops.popgen.gmap.kosambimapfunction.kosambimapfunction method)": [[1101, "pybrops.popgen.gmap.KosambiMapFunction.KosambiMapFunction.rprob1g"]], "rprob1p() (pybrops.popgen.gmap.kosambimapfunction.kosambimapfunction method)": [[1101, "pybrops.popgen.gmap.KosambiMapFunction.KosambiMapFunction.rprob1p"]], "rprob2g() (pybrops.popgen.gmap.kosambimapfunction.kosambimapfunction method)": [[1101, "pybrops.popgen.gmap.KosambiMapFunction.KosambiMapFunction.rprob2g"]], "rprob2p() (pybrops.popgen.gmap.kosambimapfunction.kosambimapfunction method)": [[1101, "pybrops.popgen.gmap.KosambiMapFunction.KosambiMapFunction.rprob2p"]], "check_is_kosambimapfunction() (in module pybrops.popgen.gmap.kosambimapfunction)": [[1102, "pybrops.popgen.gmap.KosambiMapFunction.check_is_KosambiMapFunction"]], "pybrops.popgen.gmap.standardgeneticmap": [[1103, "module-pybrops.popgen.gmap.StandardGeneticMap"]], "standardgeneticmap (class in pybrops.popgen.gmap.standardgeneticmap)": [[1104, "pybrops.popgen.gmap.StandardGeneticMap.StandardGeneticMap"]], "build_spline() (pybrops.popgen.gmap.standardgeneticmap.standardgeneticmap method)": [[1104, "pybrops.popgen.gmap.StandardGeneticMap.StandardGeneticMap.build_spline"]], "congruence() (pybrops.popgen.gmap.standardgeneticmap.standardgeneticmap method)": [[1104, "pybrops.popgen.gmap.StandardGeneticMap.StandardGeneticMap.congruence"]], "copy() (pybrops.popgen.gmap.standardgeneticmap.standardgeneticmap method)": [[1104, "pybrops.popgen.gmap.StandardGeneticMap.StandardGeneticMap.copy"]], "deepcopy() (pybrops.popgen.gmap.standardgeneticmap.standardgeneticmap method)": [[1104, "pybrops.popgen.gmap.StandardGeneticMap.StandardGeneticMap.deepcopy"]], "from_csv() (pybrops.popgen.gmap.standardgeneticmap.standardgeneticmap class method)": [[1104, "pybrops.popgen.gmap.StandardGeneticMap.StandardGeneticMap.from_csv"]], "from_pandas() (pybrops.popgen.gmap.standardgeneticmap.standardgeneticmap class method)": [[1104, "pybrops.popgen.gmap.StandardGeneticMap.StandardGeneticMap.from_pandas"]], "gdist1g() (pybrops.popgen.gmap.standardgeneticmap.standardgeneticmap method)": [[1104, "pybrops.popgen.gmap.StandardGeneticMap.StandardGeneticMap.gdist1g"]], "gdist1p() (pybrops.popgen.gmap.standardgeneticmap.standardgeneticmap method)": [[1104, "pybrops.popgen.gmap.StandardGeneticMap.StandardGeneticMap.gdist1p"]], "gdist2g() (pybrops.popgen.gmap.standardgeneticmap.standardgeneticmap method)": [[1104, "pybrops.popgen.gmap.StandardGeneticMap.StandardGeneticMap.gdist2g"]], "gdist2p() (pybrops.popgen.gmap.standardgeneticmap.standardgeneticmap method)": [[1104, "pybrops.popgen.gmap.StandardGeneticMap.StandardGeneticMap.gdist2p"]], "group() (pybrops.popgen.gmap.standardgeneticmap.standardgeneticmap method)": [[1104, "pybrops.popgen.gmap.StandardGeneticMap.StandardGeneticMap.group"]], "has_spline() (pybrops.popgen.gmap.standardgeneticmap.standardgeneticmap method)": [[1104, "pybrops.popgen.gmap.StandardGeneticMap.StandardGeneticMap.has_spline"]], "interp_genpos() (pybrops.popgen.gmap.standardgeneticmap.standardgeneticmap method)": [[1104, "pybrops.popgen.gmap.StandardGeneticMap.StandardGeneticMap.interp_genpos"]], "interp_gmap() (pybrops.popgen.gmap.standardgeneticmap.standardgeneticmap method)": [[1104, "pybrops.popgen.gmap.StandardGeneticMap.StandardGeneticMap.interp_gmap"]], "is_congruent() (pybrops.popgen.gmap.standardgeneticmap.standardgeneticmap method)": [[1104, "pybrops.popgen.gmap.StandardGeneticMap.StandardGeneticMap.is_congruent"]], "is_grouped() (pybrops.popgen.gmap.standardgeneticmap.standardgeneticmap method)": [[1104, "pybrops.popgen.gmap.StandardGeneticMap.StandardGeneticMap.is_grouped"]], "lexsort() (pybrops.popgen.gmap.standardgeneticmap.standardgeneticmap method)": [[1104, "pybrops.popgen.gmap.StandardGeneticMap.StandardGeneticMap.lexsort"]], "nvrnt (pybrops.popgen.gmap.standardgeneticmap.standardgeneticmap property)": [[1104, "pybrops.popgen.gmap.StandardGeneticMap.StandardGeneticMap.nvrnt"]], "remove() (pybrops.popgen.gmap.standardgeneticmap.standardgeneticmap method)": [[1104, "pybrops.popgen.gmap.StandardGeneticMap.StandardGeneticMap.remove"]], "remove_discrepancies() (pybrops.popgen.gmap.standardgeneticmap.standardgeneticmap method)": [[1104, "pybrops.popgen.gmap.StandardGeneticMap.StandardGeneticMap.remove_discrepancies"]], "reorder() (pybrops.popgen.gmap.standardgeneticmap.standardgeneticmap method)": [[1104, "pybrops.popgen.gmap.StandardGeneticMap.StandardGeneticMap.reorder"]], "select() (pybrops.popgen.gmap.standardgeneticmap.standardgeneticmap method)": [[1104, "pybrops.popgen.gmap.StandardGeneticMap.StandardGeneticMap.select"]], "sort() (pybrops.popgen.gmap.standardgeneticmap.standardgeneticmap method)": [[1104, "pybrops.popgen.gmap.StandardGeneticMap.StandardGeneticMap.sort"]], "spline (pybrops.popgen.gmap.standardgeneticmap.standardgeneticmap property)": [[1104, "pybrops.popgen.gmap.StandardGeneticMap.StandardGeneticMap.spline"]], "spline_fill_value (pybrops.popgen.gmap.standardgeneticmap.standardgeneticmap property)": [[1104, "pybrops.popgen.gmap.StandardGeneticMap.StandardGeneticMap.spline_fill_value"]], "spline_kind (pybrops.popgen.gmap.standardgeneticmap.standardgeneticmap property)": [[1104, "pybrops.popgen.gmap.StandardGeneticMap.StandardGeneticMap.spline_kind"]], "to_csv() (pybrops.popgen.gmap.standardgeneticmap.standardgeneticmap method)": [[1104, "pybrops.popgen.gmap.StandardGeneticMap.StandardGeneticMap.to_csv"]], "to_pandas() (pybrops.popgen.gmap.standardgeneticmap.standardgeneticmap method)": [[1104, "pybrops.popgen.gmap.StandardGeneticMap.StandardGeneticMap.to_pandas"]], "ungroup() (pybrops.popgen.gmap.standardgeneticmap.standardgeneticmap method)": [[1104, "pybrops.popgen.gmap.StandardGeneticMap.StandardGeneticMap.ungroup"]], "vrnt_chrgrp (pybrops.popgen.gmap.standardgeneticmap.standardgeneticmap property)": [[1104, "pybrops.popgen.gmap.StandardGeneticMap.StandardGeneticMap.vrnt_chrgrp"]], "vrnt_chrgrp_len (pybrops.popgen.gmap.standardgeneticmap.standardgeneticmap property)": [[1104, "pybrops.popgen.gmap.StandardGeneticMap.StandardGeneticMap.vrnt_chrgrp_len"]], "vrnt_chrgrp_name (pybrops.popgen.gmap.standardgeneticmap.standardgeneticmap property)": [[1104, "pybrops.popgen.gmap.StandardGeneticMap.StandardGeneticMap.vrnt_chrgrp_name"]], "vrnt_chrgrp_spix (pybrops.popgen.gmap.standardgeneticmap.standardgeneticmap property)": [[1104, "pybrops.popgen.gmap.StandardGeneticMap.StandardGeneticMap.vrnt_chrgrp_spix"]], "vrnt_chrgrp_stix (pybrops.popgen.gmap.standardgeneticmap.standardgeneticmap property)": [[1104, "pybrops.popgen.gmap.StandardGeneticMap.StandardGeneticMap.vrnt_chrgrp_stix"]], "vrnt_genpos (pybrops.popgen.gmap.standardgeneticmap.standardgeneticmap property)": [[1104, "pybrops.popgen.gmap.StandardGeneticMap.StandardGeneticMap.vrnt_genpos"]], "vrnt_phypos (pybrops.popgen.gmap.standardgeneticmap.standardgeneticmap property)": [[1104, "pybrops.popgen.gmap.StandardGeneticMap.StandardGeneticMap.vrnt_phypos"]], "check_is_standardgeneticmap() (in module pybrops.popgen.gmap.standardgeneticmap)": [[1105, "pybrops.popgen.gmap.StandardGeneticMap.check_is_StandardGeneticMap"]], "pybrops.popgen.gmap.util": [[1106, "module-pybrops.popgen.gmap.util"]], "cm2d() (in module pybrops.popgen.gmap.util)": [[1107, "pybrops.popgen.gmap.util.cM2d"]], "pybrops.popgen.gmat": [[1108, "module-pybrops.popgen.gmat"]], "pybrops.popgen.gmat.densegenotypematrix": [[1109, "module-pybrops.popgen.gmat.DenseGenotypeMatrix"]], "densegenotypematrix (class in pybrops.popgen.gmat.densegenotypematrix)": [[1110, "pybrops.popgen.gmat.DenseGenotypeMatrix.DenseGenotypeMatrix"]], "__add__() (pybrops.popgen.gmat.densegenotypematrix.densegenotypematrix method)": [[1110, "pybrops.popgen.gmat.DenseGenotypeMatrix.DenseGenotypeMatrix.__add__"]], "__mul__() (pybrops.popgen.gmat.densegenotypematrix.densegenotypematrix method)": [[1110, "pybrops.popgen.gmat.DenseGenotypeMatrix.DenseGenotypeMatrix.__mul__"]], "acount() (pybrops.popgen.gmat.densegenotypematrix.densegenotypematrix method)": [[1110, "pybrops.popgen.gmat.DenseGenotypeMatrix.DenseGenotypeMatrix.acount"]], "adjoin() (pybrops.popgen.gmat.densegenotypematrix.densegenotypematrix method)": [[1110, "pybrops.popgen.gmat.DenseGenotypeMatrix.DenseGenotypeMatrix.adjoin"]], "adjoin_taxa() (pybrops.popgen.gmat.densegenotypematrix.densegenotypematrix method)": [[1110, "pybrops.popgen.gmat.DenseGenotypeMatrix.DenseGenotypeMatrix.adjoin_taxa"]], "adjoin_vrnt() (pybrops.popgen.gmat.densegenotypematrix.densegenotypematrix method)": [[1110, "pybrops.popgen.gmat.DenseGenotypeMatrix.DenseGenotypeMatrix.adjoin_vrnt"]], "afreq() (pybrops.popgen.gmat.densegenotypematrix.densegenotypematrix method)": [[1110, "pybrops.popgen.gmat.DenseGenotypeMatrix.DenseGenotypeMatrix.afreq"]], "apoly() (pybrops.popgen.gmat.densegenotypematrix.densegenotypematrix method)": [[1110, "pybrops.popgen.gmat.DenseGenotypeMatrix.DenseGenotypeMatrix.apoly"]], "append() (pybrops.popgen.gmat.densegenotypematrix.densegenotypematrix method)": [[1110, "pybrops.popgen.gmat.DenseGenotypeMatrix.DenseGenotypeMatrix.append"]], "append_taxa() (pybrops.popgen.gmat.densegenotypematrix.densegenotypematrix method)": [[1110, "pybrops.popgen.gmat.DenseGenotypeMatrix.DenseGenotypeMatrix.append_taxa"]], "append_vrnt() (pybrops.popgen.gmat.densegenotypematrix.densegenotypematrix method)": [[1110, "pybrops.popgen.gmat.DenseGenotypeMatrix.DenseGenotypeMatrix.append_vrnt"]], "concat() (pybrops.popgen.gmat.densegenotypematrix.densegenotypematrix class method)": [[1110, "pybrops.popgen.gmat.DenseGenotypeMatrix.DenseGenotypeMatrix.concat"]], "concat_taxa() (pybrops.popgen.gmat.densegenotypematrix.densegenotypematrix class method)": [[1110, "pybrops.popgen.gmat.DenseGenotypeMatrix.DenseGenotypeMatrix.concat_taxa"]], "concat_vrnt() (pybrops.popgen.gmat.densegenotypematrix.densegenotypematrix class method)": [[1110, "pybrops.popgen.gmat.DenseGenotypeMatrix.DenseGenotypeMatrix.concat_vrnt"]], "copy() (pybrops.popgen.gmat.densegenotypematrix.densegenotypematrix method)": [[1110, "pybrops.popgen.gmat.DenseGenotypeMatrix.DenseGenotypeMatrix.copy"]], "deepcopy() (pybrops.popgen.gmat.densegenotypematrix.densegenotypematrix method)": [[1110, "pybrops.popgen.gmat.DenseGenotypeMatrix.DenseGenotypeMatrix.deepcopy"]], "delete() (pybrops.popgen.gmat.densegenotypematrix.densegenotypematrix method)": [[1110, "pybrops.popgen.gmat.DenseGenotypeMatrix.DenseGenotypeMatrix.delete"]], "delete_taxa() (pybrops.popgen.gmat.densegenotypematrix.densegenotypematrix method)": [[1110, "pybrops.popgen.gmat.DenseGenotypeMatrix.DenseGenotypeMatrix.delete_taxa"]], "delete_vrnt() (pybrops.popgen.gmat.densegenotypematrix.densegenotypematrix method)": [[1110, "pybrops.popgen.gmat.DenseGenotypeMatrix.DenseGenotypeMatrix.delete_vrnt"]], "from_hdf5() (pybrops.popgen.gmat.densegenotypematrix.densegenotypematrix class method)": [[1110, "pybrops.popgen.gmat.DenseGenotypeMatrix.DenseGenotypeMatrix.from_hdf5"]], "from_vcf() (pybrops.popgen.gmat.densegenotypematrix.densegenotypematrix class method)": [[1110, "pybrops.popgen.gmat.DenseGenotypeMatrix.DenseGenotypeMatrix.from_vcf"]], "group() (pybrops.popgen.gmat.densegenotypematrix.densegenotypematrix method)": [[1110, "pybrops.popgen.gmat.DenseGenotypeMatrix.DenseGenotypeMatrix.group"]], "group_taxa() (pybrops.popgen.gmat.densegenotypematrix.densegenotypematrix method)": [[1110, "pybrops.popgen.gmat.DenseGenotypeMatrix.DenseGenotypeMatrix.group_taxa"]], "group_vrnt() (pybrops.popgen.gmat.densegenotypematrix.densegenotypematrix method)": [[1110, "pybrops.popgen.gmat.DenseGenotypeMatrix.DenseGenotypeMatrix.group_vrnt"]], "gtcount() (pybrops.popgen.gmat.densegenotypematrix.densegenotypematrix method)": [[1110, "pybrops.popgen.gmat.DenseGenotypeMatrix.DenseGenotypeMatrix.gtcount"]], "gtfreq() (pybrops.popgen.gmat.densegenotypematrix.densegenotypematrix method)": [[1110, "pybrops.popgen.gmat.DenseGenotypeMatrix.DenseGenotypeMatrix.gtfreq"]], "incorp() (pybrops.popgen.gmat.densegenotypematrix.densegenotypematrix method)": [[1110, "pybrops.popgen.gmat.DenseGenotypeMatrix.DenseGenotypeMatrix.incorp"]], "incorp_taxa() (pybrops.popgen.gmat.densegenotypematrix.densegenotypematrix method)": [[1110, "pybrops.popgen.gmat.DenseGenotypeMatrix.DenseGenotypeMatrix.incorp_taxa"]], "incorp_vrnt() (pybrops.popgen.gmat.densegenotypematrix.densegenotypematrix method)": [[1110, "pybrops.popgen.gmat.DenseGenotypeMatrix.DenseGenotypeMatrix.incorp_vrnt"]], "insert() (pybrops.popgen.gmat.densegenotypematrix.densegenotypematrix method)": [[1110, "pybrops.popgen.gmat.DenseGenotypeMatrix.DenseGenotypeMatrix.insert"]], "insert_taxa() (pybrops.popgen.gmat.densegenotypematrix.densegenotypematrix method)": [[1110, "pybrops.popgen.gmat.DenseGenotypeMatrix.DenseGenotypeMatrix.insert_taxa"]], "insert_vrnt() (pybrops.popgen.gmat.densegenotypematrix.densegenotypematrix method)": [[1110, "pybrops.popgen.gmat.DenseGenotypeMatrix.DenseGenotypeMatrix.insert_vrnt"]], "interp_genpos() (pybrops.popgen.gmat.densegenotypematrix.densegenotypematrix method)": [[1110, "pybrops.popgen.gmat.DenseGenotypeMatrix.DenseGenotypeMatrix.interp_genpos"]], "interp_xoprob() (pybrops.popgen.gmat.densegenotypematrix.densegenotypematrix method)": [[1110, "pybrops.popgen.gmat.DenseGenotypeMatrix.DenseGenotypeMatrix.interp_xoprob"]], "is_grouped() (pybrops.popgen.gmat.densegenotypematrix.densegenotypematrix method)": [[1110, "pybrops.popgen.gmat.DenseGenotypeMatrix.DenseGenotypeMatrix.is_grouped"]], "is_grouped_taxa() (pybrops.popgen.gmat.densegenotypematrix.densegenotypematrix method)": [[1110, "pybrops.popgen.gmat.DenseGenotypeMatrix.DenseGenotypeMatrix.is_grouped_taxa"]], "is_grouped_vrnt() (pybrops.popgen.gmat.densegenotypematrix.densegenotypematrix method)": [[1110, "pybrops.popgen.gmat.DenseGenotypeMatrix.DenseGenotypeMatrix.is_grouped_vrnt"]], "lexsort() (pybrops.popgen.gmat.densegenotypematrix.densegenotypematrix method)": [[1110, "pybrops.popgen.gmat.DenseGenotypeMatrix.DenseGenotypeMatrix.lexsort"]], "lexsort_taxa() (pybrops.popgen.gmat.densegenotypematrix.densegenotypematrix method)": [[1110, "pybrops.popgen.gmat.DenseGenotypeMatrix.DenseGenotypeMatrix.lexsort_taxa"]], "lexsort_vrnt() (pybrops.popgen.gmat.densegenotypematrix.densegenotypematrix method)": [[1110, "pybrops.popgen.gmat.DenseGenotypeMatrix.DenseGenotypeMatrix.lexsort_vrnt"]], "maf() (pybrops.popgen.gmat.densegenotypematrix.densegenotypematrix method)": [[1110, "pybrops.popgen.gmat.DenseGenotypeMatrix.DenseGenotypeMatrix.maf"]], "mat (pybrops.popgen.gmat.densegenotypematrix.densegenotypematrix property)": [[1110, "pybrops.popgen.gmat.DenseGenotypeMatrix.DenseGenotypeMatrix.mat"]], "mat_asformat() (pybrops.popgen.gmat.densegenotypematrix.densegenotypematrix method)": [[1110, "pybrops.popgen.gmat.DenseGenotypeMatrix.DenseGenotypeMatrix.mat_asformat"]], "mat_format (pybrops.popgen.gmat.densegenotypematrix.densegenotypematrix property)": [[1110, "pybrops.popgen.gmat.DenseGenotypeMatrix.DenseGenotypeMatrix.mat_format"]], "mat_ndim (pybrops.popgen.gmat.densegenotypematrix.densegenotypematrix property)": [[1110, "pybrops.popgen.gmat.DenseGenotypeMatrix.DenseGenotypeMatrix.mat_ndim"]], "mat_shape (pybrops.popgen.gmat.densegenotypematrix.densegenotypematrix property)": [[1110, "pybrops.popgen.gmat.DenseGenotypeMatrix.DenseGenotypeMatrix.mat_shape"]], "meh() (pybrops.popgen.gmat.densegenotypematrix.densegenotypematrix method)": [[1110, "pybrops.popgen.gmat.DenseGenotypeMatrix.DenseGenotypeMatrix.meh"]], "nphase (pybrops.popgen.gmat.densegenotypematrix.densegenotypematrix property)": [[1110, "pybrops.popgen.gmat.DenseGenotypeMatrix.DenseGenotypeMatrix.nphase"]], "ntaxa (pybrops.popgen.gmat.densegenotypematrix.densegenotypematrix property)": [[1110, "pybrops.popgen.gmat.DenseGenotypeMatrix.DenseGenotypeMatrix.ntaxa"]], "nvrnt (pybrops.popgen.gmat.densegenotypematrix.densegenotypematrix property)": [[1110, "pybrops.popgen.gmat.DenseGenotypeMatrix.DenseGenotypeMatrix.nvrnt"]], "ploidy (pybrops.popgen.gmat.densegenotypematrix.densegenotypematrix property)": [[1110, "pybrops.popgen.gmat.DenseGenotypeMatrix.DenseGenotypeMatrix.ploidy"]], "remove() (pybrops.popgen.gmat.densegenotypematrix.densegenotypematrix method)": [[1110, "pybrops.popgen.gmat.DenseGenotypeMatrix.DenseGenotypeMatrix.remove"]], "remove_taxa() (pybrops.popgen.gmat.densegenotypematrix.densegenotypematrix method)": [[1110, "pybrops.popgen.gmat.DenseGenotypeMatrix.DenseGenotypeMatrix.remove_taxa"]], "remove_vrnt() (pybrops.popgen.gmat.densegenotypematrix.densegenotypematrix method)": [[1110, "pybrops.popgen.gmat.DenseGenotypeMatrix.DenseGenotypeMatrix.remove_vrnt"]], "reorder() (pybrops.popgen.gmat.densegenotypematrix.densegenotypematrix method)": [[1110, "pybrops.popgen.gmat.DenseGenotypeMatrix.DenseGenotypeMatrix.reorder"]], "reorder_taxa() (pybrops.popgen.gmat.densegenotypematrix.densegenotypematrix method)": [[1110, "pybrops.popgen.gmat.DenseGenotypeMatrix.DenseGenotypeMatrix.reorder_taxa"]], "reorder_vrnt() (pybrops.popgen.gmat.densegenotypematrix.densegenotypematrix method)": [[1110, "pybrops.popgen.gmat.DenseGenotypeMatrix.DenseGenotypeMatrix.reorder_vrnt"]], "select() (pybrops.popgen.gmat.densegenotypematrix.densegenotypematrix method)": [[1110, "pybrops.popgen.gmat.DenseGenotypeMatrix.DenseGenotypeMatrix.select"]], "select_taxa() (pybrops.popgen.gmat.densegenotypematrix.densegenotypematrix method)": [[1110, "pybrops.popgen.gmat.DenseGenotypeMatrix.DenseGenotypeMatrix.select_taxa"]], "select_vrnt() (pybrops.popgen.gmat.densegenotypematrix.densegenotypematrix method)": [[1110, "pybrops.popgen.gmat.DenseGenotypeMatrix.DenseGenotypeMatrix.select_vrnt"]], "sort() (pybrops.popgen.gmat.densegenotypematrix.densegenotypematrix method)": [[1110, "pybrops.popgen.gmat.DenseGenotypeMatrix.DenseGenotypeMatrix.sort"]], "sort_taxa() (pybrops.popgen.gmat.densegenotypematrix.densegenotypematrix method)": [[1110, "pybrops.popgen.gmat.DenseGenotypeMatrix.DenseGenotypeMatrix.sort_taxa"]], "sort_vrnt() (pybrops.popgen.gmat.densegenotypematrix.densegenotypematrix method)": [[1110, "pybrops.popgen.gmat.DenseGenotypeMatrix.DenseGenotypeMatrix.sort_vrnt"]], "tacount() (pybrops.popgen.gmat.densegenotypematrix.densegenotypematrix method)": [[1110, "pybrops.popgen.gmat.DenseGenotypeMatrix.DenseGenotypeMatrix.tacount"]], "tafreq() (pybrops.popgen.gmat.densegenotypematrix.densegenotypematrix method)": [[1110, "pybrops.popgen.gmat.DenseGenotypeMatrix.DenseGenotypeMatrix.tafreq"]], "taxa (pybrops.popgen.gmat.densegenotypematrix.densegenotypematrix property)": [[1110, "pybrops.popgen.gmat.DenseGenotypeMatrix.DenseGenotypeMatrix.taxa"]], "taxa_axis (pybrops.popgen.gmat.densegenotypematrix.densegenotypematrix property)": [[1110, "pybrops.popgen.gmat.DenseGenotypeMatrix.DenseGenotypeMatrix.taxa_axis"]], "taxa_grp (pybrops.popgen.gmat.densegenotypematrix.densegenotypematrix property)": [[1110, "pybrops.popgen.gmat.DenseGenotypeMatrix.DenseGenotypeMatrix.taxa_grp"]], "taxa_grp_len (pybrops.popgen.gmat.densegenotypematrix.densegenotypematrix property)": [[1110, "pybrops.popgen.gmat.DenseGenotypeMatrix.DenseGenotypeMatrix.taxa_grp_len"]], "taxa_grp_name (pybrops.popgen.gmat.densegenotypematrix.densegenotypematrix property)": [[1110, "pybrops.popgen.gmat.DenseGenotypeMatrix.DenseGenotypeMatrix.taxa_grp_name"]], "taxa_grp_spix (pybrops.popgen.gmat.densegenotypematrix.densegenotypematrix property)": [[1110, "pybrops.popgen.gmat.DenseGenotypeMatrix.DenseGenotypeMatrix.taxa_grp_spix"]], "taxa_grp_stix (pybrops.popgen.gmat.densegenotypematrix.densegenotypematrix property)": [[1110, "pybrops.popgen.gmat.DenseGenotypeMatrix.DenseGenotypeMatrix.taxa_grp_stix"]], "to_hdf5() (pybrops.popgen.gmat.densegenotypematrix.densegenotypematrix method)": [[1110, "pybrops.popgen.gmat.DenseGenotypeMatrix.DenseGenotypeMatrix.to_hdf5"]], "ungroup() (pybrops.popgen.gmat.densegenotypematrix.densegenotypematrix method)": [[1110, "pybrops.popgen.gmat.DenseGenotypeMatrix.DenseGenotypeMatrix.ungroup"]], "ungroup_taxa() (pybrops.popgen.gmat.densegenotypematrix.densegenotypematrix method)": [[1110, "pybrops.popgen.gmat.DenseGenotypeMatrix.DenseGenotypeMatrix.ungroup_taxa"]], "ungroup_vrnt() (pybrops.popgen.gmat.densegenotypematrix.densegenotypematrix method)": [[1110, "pybrops.popgen.gmat.DenseGenotypeMatrix.DenseGenotypeMatrix.ungroup_vrnt"]], "vrnt_axis (pybrops.popgen.gmat.densegenotypematrix.densegenotypematrix property)": [[1110, "pybrops.popgen.gmat.DenseGenotypeMatrix.DenseGenotypeMatrix.vrnt_axis"]], "vrnt_chrgrp (pybrops.popgen.gmat.densegenotypematrix.densegenotypematrix property)": [[1110, "pybrops.popgen.gmat.DenseGenotypeMatrix.DenseGenotypeMatrix.vrnt_chrgrp"]], "vrnt_chrgrp_len (pybrops.popgen.gmat.densegenotypematrix.densegenotypematrix property)": [[1110, "pybrops.popgen.gmat.DenseGenotypeMatrix.DenseGenotypeMatrix.vrnt_chrgrp_len"]], "vrnt_chrgrp_name (pybrops.popgen.gmat.densegenotypematrix.densegenotypematrix property)": [[1110, "pybrops.popgen.gmat.DenseGenotypeMatrix.DenseGenotypeMatrix.vrnt_chrgrp_name"]], "vrnt_chrgrp_spix (pybrops.popgen.gmat.densegenotypematrix.densegenotypematrix property)": [[1110, "pybrops.popgen.gmat.DenseGenotypeMatrix.DenseGenotypeMatrix.vrnt_chrgrp_spix"]], "vrnt_chrgrp_stix (pybrops.popgen.gmat.densegenotypematrix.densegenotypematrix property)": [[1110, "pybrops.popgen.gmat.DenseGenotypeMatrix.DenseGenotypeMatrix.vrnt_chrgrp_stix"]], "vrnt_genpos (pybrops.popgen.gmat.densegenotypematrix.densegenotypematrix property)": [[1110, "pybrops.popgen.gmat.DenseGenotypeMatrix.DenseGenotypeMatrix.vrnt_genpos"]], "vrnt_hapalt (pybrops.popgen.gmat.densegenotypematrix.densegenotypematrix property)": [[1110, "pybrops.popgen.gmat.DenseGenotypeMatrix.DenseGenotypeMatrix.vrnt_hapalt"]], "vrnt_hapgrp (pybrops.popgen.gmat.densegenotypematrix.densegenotypematrix property)": [[1110, "pybrops.popgen.gmat.DenseGenotypeMatrix.DenseGenotypeMatrix.vrnt_hapgrp"]], "vrnt_hapref (pybrops.popgen.gmat.densegenotypematrix.densegenotypematrix property)": [[1110, "pybrops.popgen.gmat.DenseGenotypeMatrix.DenseGenotypeMatrix.vrnt_hapref"]], "vrnt_mask (pybrops.popgen.gmat.densegenotypematrix.densegenotypematrix property)": [[1110, "pybrops.popgen.gmat.DenseGenotypeMatrix.DenseGenotypeMatrix.vrnt_mask"]], "vrnt_name (pybrops.popgen.gmat.densegenotypematrix.densegenotypematrix property)": [[1110, "pybrops.popgen.gmat.DenseGenotypeMatrix.DenseGenotypeMatrix.vrnt_name"]], "vrnt_phypos (pybrops.popgen.gmat.densegenotypematrix.densegenotypematrix property)": [[1110, "pybrops.popgen.gmat.DenseGenotypeMatrix.DenseGenotypeMatrix.vrnt_phypos"]], "vrnt_xoprob (pybrops.popgen.gmat.densegenotypematrix.densegenotypematrix property)": [[1110, "pybrops.popgen.gmat.DenseGenotypeMatrix.DenseGenotypeMatrix.vrnt_xoprob"]], "check_is_densegenotypematrix() (in module pybrops.popgen.gmat.densegenotypematrix)": [[1111, "pybrops.popgen.gmat.DenseGenotypeMatrix.check_is_DenseGenotypeMatrix"]], "pybrops.popgen.gmat.densephasedgenotypematrix": [[1112, "module-pybrops.popgen.gmat.DensePhasedGenotypeMatrix"]], "densephasedgenotypematrix (class in pybrops.popgen.gmat.densephasedgenotypematrix)": [[1113, "pybrops.popgen.gmat.DensePhasedGenotypeMatrix.DensePhasedGenotypeMatrix"]], "__add__() (pybrops.popgen.gmat.densephasedgenotypematrix.densephasedgenotypematrix method)": [[1113, "pybrops.popgen.gmat.DensePhasedGenotypeMatrix.DensePhasedGenotypeMatrix.__add__"]], "__mul__() (pybrops.popgen.gmat.densephasedgenotypematrix.densephasedgenotypematrix method)": [[1113, "pybrops.popgen.gmat.DensePhasedGenotypeMatrix.DensePhasedGenotypeMatrix.__mul__"]], "acount() (pybrops.popgen.gmat.densephasedgenotypematrix.densephasedgenotypematrix method)": [[1113, "pybrops.popgen.gmat.DensePhasedGenotypeMatrix.DensePhasedGenotypeMatrix.acount"]], "adjoin() (pybrops.popgen.gmat.densephasedgenotypematrix.densephasedgenotypematrix method)": [[1113, "pybrops.popgen.gmat.DensePhasedGenotypeMatrix.DensePhasedGenotypeMatrix.adjoin"]], "adjoin_phase() (pybrops.popgen.gmat.densephasedgenotypematrix.densephasedgenotypematrix method)": [[1113, "pybrops.popgen.gmat.DensePhasedGenotypeMatrix.DensePhasedGenotypeMatrix.adjoin_phase"]], "adjoin_taxa() (pybrops.popgen.gmat.densephasedgenotypematrix.densephasedgenotypematrix method)": [[1113, "pybrops.popgen.gmat.DensePhasedGenotypeMatrix.DensePhasedGenotypeMatrix.adjoin_taxa"]], "adjoin_vrnt() (pybrops.popgen.gmat.densephasedgenotypematrix.densephasedgenotypematrix method)": [[1113, "pybrops.popgen.gmat.DensePhasedGenotypeMatrix.DensePhasedGenotypeMatrix.adjoin_vrnt"]], "afreq() (pybrops.popgen.gmat.densephasedgenotypematrix.densephasedgenotypematrix method)": [[1113, "pybrops.popgen.gmat.DensePhasedGenotypeMatrix.DensePhasedGenotypeMatrix.afreq"]], "apoly() (pybrops.popgen.gmat.densephasedgenotypematrix.densephasedgenotypematrix method)": [[1113, "pybrops.popgen.gmat.DensePhasedGenotypeMatrix.DensePhasedGenotypeMatrix.apoly"]], "append() (pybrops.popgen.gmat.densephasedgenotypematrix.densephasedgenotypematrix method)": [[1113, "pybrops.popgen.gmat.DensePhasedGenotypeMatrix.DensePhasedGenotypeMatrix.append"]], "append_phase() (pybrops.popgen.gmat.densephasedgenotypematrix.densephasedgenotypematrix method)": [[1113, "pybrops.popgen.gmat.DensePhasedGenotypeMatrix.DensePhasedGenotypeMatrix.append_phase"]], "append_taxa() (pybrops.popgen.gmat.densephasedgenotypematrix.densephasedgenotypematrix method)": [[1113, "pybrops.popgen.gmat.DensePhasedGenotypeMatrix.DensePhasedGenotypeMatrix.append_taxa"]], "append_vrnt() (pybrops.popgen.gmat.densephasedgenotypematrix.densephasedgenotypematrix method)": [[1113, "pybrops.popgen.gmat.DensePhasedGenotypeMatrix.DensePhasedGenotypeMatrix.append_vrnt"]], "concat() (pybrops.popgen.gmat.densephasedgenotypematrix.densephasedgenotypematrix class method)": [[1113, "pybrops.popgen.gmat.DensePhasedGenotypeMatrix.DensePhasedGenotypeMatrix.concat"]], "concat_phase() (pybrops.popgen.gmat.densephasedgenotypematrix.densephasedgenotypematrix class method)": [[1113, "pybrops.popgen.gmat.DensePhasedGenotypeMatrix.DensePhasedGenotypeMatrix.concat_phase"]], "concat_taxa() (pybrops.popgen.gmat.densephasedgenotypematrix.densephasedgenotypematrix class method)": [[1113, "pybrops.popgen.gmat.DensePhasedGenotypeMatrix.DensePhasedGenotypeMatrix.concat_taxa"]], "concat_vrnt() (pybrops.popgen.gmat.densephasedgenotypematrix.densephasedgenotypematrix class method)": [[1113, "pybrops.popgen.gmat.DensePhasedGenotypeMatrix.DensePhasedGenotypeMatrix.concat_vrnt"]], "copy() (pybrops.popgen.gmat.densephasedgenotypematrix.densephasedgenotypematrix method)": [[1113, "pybrops.popgen.gmat.DensePhasedGenotypeMatrix.DensePhasedGenotypeMatrix.copy"]], "deepcopy() (pybrops.popgen.gmat.densephasedgenotypematrix.densephasedgenotypematrix method)": [[1113, "pybrops.popgen.gmat.DensePhasedGenotypeMatrix.DensePhasedGenotypeMatrix.deepcopy"]], "delete() (pybrops.popgen.gmat.densephasedgenotypematrix.densephasedgenotypematrix method)": [[1113, "pybrops.popgen.gmat.DensePhasedGenotypeMatrix.DensePhasedGenotypeMatrix.delete"]], "delete_phase() (pybrops.popgen.gmat.densephasedgenotypematrix.densephasedgenotypematrix method)": [[1113, "pybrops.popgen.gmat.DensePhasedGenotypeMatrix.DensePhasedGenotypeMatrix.delete_phase"]], "delete_taxa() (pybrops.popgen.gmat.densephasedgenotypematrix.densephasedgenotypematrix method)": [[1113, "pybrops.popgen.gmat.DensePhasedGenotypeMatrix.DensePhasedGenotypeMatrix.delete_taxa"]], "delete_vrnt() (pybrops.popgen.gmat.densephasedgenotypematrix.densephasedgenotypematrix method)": [[1113, "pybrops.popgen.gmat.DensePhasedGenotypeMatrix.DensePhasedGenotypeMatrix.delete_vrnt"]], "from_hdf5() (pybrops.popgen.gmat.densephasedgenotypematrix.densephasedgenotypematrix class method)": [[1113, "pybrops.popgen.gmat.DensePhasedGenotypeMatrix.DensePhasedGenotypeMatrix.from_hdf5"]], "from_vcf() (pybrops.popgen.gmat.densephasedgenotypematrix.densephasedgenotypematrix class method)": [[1113, "pybrops.popgen.gmat.DensePhasedGenotypeMatrix.DensePhasedGenotypeMatrix.from_vcf"]], "group() (pybrops.popgen.gmat.densephasedgenotypematrix.densephasedgenotypematrix method)": [[1113, "pybrops.popgen.gmat.DensePhasedGenotypeMatrix.DensePhasedGenotypeMatrix.group"]], "group_taxa() (pybrops.popgen.gmat.densephasedgenotypematrix.densephasedgenotypematrix method)": [[1113, "pybrops.popgen.gmat.DensePhasedGenotypeMatrix.DensePhasedGenotypeMatrix.group_taxa"]], "group_vrnt() (pybrops.popgen.gmat.densephasedgenotypematrix.densephasedgenotypematrix method)": [[1113, "pybrops.popgen.gmat.DensePhasedGenotypeMatrix.DensePhasedGenotypeMatrix.group_vrnt"]], "gtcount() (pybrops.popgen.gmat.densephasedgenotypematrix.densephasedgenotypematrix method)": [[1113, "pybrops.popgen.gmat.DensePhasedGenotypeMatrix.DensePhasedGenotypeMatrix.gtcount"]], "gtfreq() (pybrops.popgen.gmat.densephasedgenotypematrix.densephasedgenotypematrix method)": [[1113, "pybrops.popgen.gmat.DensePhasedGenotypeMatrix.DensePhasedGenotypeMatrix.gtfreq"]], "incorp() (pybrops.popgen.gmat.densephasedgenotypematrix.densephasedgenotypematrix method)": [[1113, "pybrops.popgen.gmat.DensePhasedGenotypeMatrix.DensePhasedGenotypeMatrix.incorp"]], "incorp_phase() (pybrops.popgen.gmat.densephasedgenotypematrix.densephasedgenotypematrix method)": [[1113, "pybrops.popgen.gmat.DensePhasedGenotypeMatrix.DensePhasedGenotypeMatrix.incorp_phase"]], "incorp_taxa() (pybrops.popgen.gmat.densephasedgenotypematrix.densephasedgenotypematrix method)": [[1113, "pybrops.popgen.gmat.DensePhasedGenotypeMatrix.DensePhasedGenotypeMatrix.incorp_taxa"]], "incorp_vrnt() (pybrops.popgen.gmat.densephasedgenotypematrix.densephasedgenotypematrix method)": [[1113, "pybrops.popgen.gmat.DensePhasedGenotypeMatrix.DensePhasedGenotypeMatrix.incorp_vrnt"]], "insert() (pybrops.popgen.gmat.densephasedgenotypematrix.densephasedgenotypematrix method)": [[1113, "pybrops.popgen.gmat.DensePhasedGenotypeMatrix.DensePhasedGenotypeMatrix.insert"]], "insert_phase() (pybrops.popgen.gmat.densephasedgenotypematrix.densephasedgenotypematrix method)": [[1113, "pybrops.popgen.gmat.DensePhasedGenotypeMatrix.DensePhasedGenotypeMatrix.insert_phase"]], "insert_taxa() (pybrops.popgen.gmat.densephasedgenotypematrix.densephasedgenotypematrix method)": [[1113, "pybrops.popgen.gmat.DensePhasedGenotypeMatrix.DensePhasedGenotypeMatrix.insert_taxa"]], "insert_vrnt() (pybrops.popgen.gmat.densephasedgenotypematrix.densephasedgenotypematrix method)": [[1113, "pybrops.popgen.gmat.DensePhasedGenotypeMatrix.DensePhasedGenotypeMatrix.insert_vrnt"]], "interp_genpos() (pybrops.popgen.gmat.densephasedgenotypematrix.densephasedgenotypematrix method)": [[1113, "pybrops.popgen.gmat.DensePhasedGenotypeMatrix.DensePhasedGenotypeMatrix.interp_genpos"]], "interp_xoprob() (pybrops.popgen.gmat.densephasedgenotypematrix.densephasedgenotypematrix method)": [[1113, "pybrops.popgen.gmat.DensePhasedGenotypeMatrix.DensePhasedGenotypeMatrix.interp_xoprob"]], "is_grouped() (pybrops.popgen.gmat.densephasedgenotypematrix.densephasedgenotypematrix method)": [[1113, "pybrops.popgen.gmat.DensePhasedGenotypeMatrix.DensePhasedGenotypeMatrix.is_grouped"]], "is_grouped_taxa() (pybrops.popgen.gmat.densephasedgenotypematrix.densephasedgenotypematrix method)": [[1113, "pybrops.popgen.gmat.DensePhasedGenotypeMatrix.DensePhasedGenotypeMatrix.is_grouped_taxa"]], "is_grouped_vrnt() (pybrops.popgen.gmat.densephasedgenotypematrix.densephasedgenotypematrix method)": [[1113, "pybrops.popgen.gmat.DensePhasedGenotypeMatrix.DensePhasedGenotypeMatrix.is_grouped_vrnt"]], "lexsort() (pybrops.popgen.gmat.densephasedgenotypematrix.densephasedgenotypematrix method)": [[1113, "pybrops.popgen.gmat.DensePhasedGenotypeMatrix.DensePhasedGenotypeMatrix.lexsort"]], "lexsort_taxa() (pybrops.popgen.gmat.densephasedgenotypematrix.densephasedgenotypematrix method)": [[1113, "pybrops.popgen.gmat.DensePhasedGenotypeMatrix.DensePhasedGenotypeMatrix.lexsort_taxa"]], "lexsort_vrnt() (pybrops.popgen.gmat.densephasedgenotypematrix.densephasedgenotypematrix method)": [[1113, "pybrops.popgen.gmat.DensePhasedGenotypeMatrix.DensePhasedGenotypeMatrix.lexsort_vrnt"]], "maf() (pybrops.popgen.gmat.densephasedgenotypematrix.densephasedgenotypematrix method)": [[1113, "pybrops.popgen.gmat.DensePhasedGenotypeMatrix.DensePhasedGenotypeMatrix.maf"]], "mat (pybrops.popgen.gmat.densephasedgenotypematrix.densephasedgenotypematrix property)": [[1113, "pybrops.popgen.gmat.DensePhasedGenotypeMatrix.DensePhasedGenotypeMatrix.mat"]], "mat_asformat() (pybrops.popgen.gmat.densephasedgenotypematrix.densephasedgenotypematrix method)": [[1113, "pybrops.popgen.gmat.DensePhasedGenotypeMatrix.DensePhasedGenotypeMatrix.mat_asformat"]], "mat_format (pybrops.popgen.gmat.densephasedgenotypematrix.densephasedgenotypematrix property)": [[1113, "pybrops.popgen.gmat.DensePhasedGenotypeMatrix.DensePhasedGenotypeMatrix.mat_format"]], "mat_ndim (pybrops.popgen.gmat.densephasedgenotypematrix.densephasedgenotypematrix property)": [[1113, "pybrops.popgen.gmat.DensePhasedGenotypeMatrix.DensePhasedGenotypeMatrix.mat_ndim"]], "mat_shape (pybrops.popgen.gmat.densephasedgenotypematrix.densephasedgenotypematrix property)": [[1113, "pybrops.popgen.gmat.DensePhasedGenotypeMatrix.DensePhasedGenotypeMatrix.mat_shape"]], "meh() (pybrops.popgen.gmat.densephasedgenotypematrix.densephasedgenotypematrix method)": [[1113, "pybrops.popgen.gmat.DensePhasedGenotypeMatrix.DensePhasedGenotypeMatrix.meh"]], "nphase (pybrops.popgen.gmat.densephasedgenotypematrix.densephasedgenotypematrix property)": [[1113, "pybrops.popgen.gmat.DensePhasedGenotypeMatrix.DensePhasedGenotypeMatrix.nphase"]], "ntaxa (pybrops.popgen.gmat.densephasedgenotypematrix.densephasedgenotypematrix property)": [[1113, "pybrops.popgen.gmat.DensePhasedGenotypeMatrix.DensePhasedGenotypeMatrix.ntaxa"]], "nvrnt (pybrops.popgen.gmat.densephasedgenotypematrix.densephasedgenotypematrix property)": [[1113, "pybrops.popgen.gmat.DensePhasedGenotypeMatrix.DensePhasedGenotypeMatrix.nvrnt"]], "phase_axis (pybrops.popgen.gmat.densephasedgenotypematrix.densephasedgenotypematrix property)": [[1113, "pybrops.popgen.gmat.DensePhasedGenotypeMatrix.DensePhasedGenotypeMatrix.phase_axis"]], "ploidy (pybrops.popgen.gmat.densephasedgenotypematrix.densephasedgenotypematrix property)": [[1113, "pybrops.popgen.gmat.DensePhasedGenotypeMatrix.DensePhasedGenotypeMatrix.ploidy"]], "remove() (pybrops.popgen.gmat.densephasedgenotypematrix.densephasedgenotypematrix method)": [[1113, "pybrops.popgen.gmat.DensePhasedGenotypeMatrix.DensePhasedGenotypeMatrix.remove"]], "remove_phase() (pybrops.popgen.gmat.densephasedgenotypematrix.densephasedgenotypematrix method)": [[1113, "pybrops.popgen.gmat.DensePhasedGenotypeMatrix.DensePhasedGenotypeMatrix.remove_phase"]], "remove_taxa() (pybrops.popgen.gmat.densephasedgenotypematrix.densephasedgenotypematrix method)": [[1113, "pybrops.popgen.gmat.DensePhasedGenotypeMatrix.DensePhasedGenotypeMatrix.remove_taxa"]], "remove_vrnt() (pybrops.popgen.gmat.densephasedgenotypematrix.densephasedgenotypematrix method)": [[1113, "pybrops.popgen.gmat.DensePhasedGenotypeMatrix.DensePhasedGenotypeMatrix.remove_vrnt"]], "reorder() (pybrops.popgen.gmat.densephasedgenotypematrix.densephasedgenotypematrix method)": [[1113, "pybrops.popgen.gmat.DensePhasedGenotypeMatrix.DensePhasedGenotypeMatrix.reorder"]], "reorder_taxa() (pybrops.popgen.gmat.densephasedgenotypematrix.densephasedgenotypematrix method)": [[1113, "pybrops.popgen.gmat.DensePhasedGenotypeMatrix.DensePhasedGenotypeMatrix.reorder_taxa"]], "reorder_vrnt() (pybrops.popgen.gmat.densephasedgenotypematrix.densephasedgenotypematrix method)": [[1113, "pybrops.popgen.gmat.DensePhasedGenotypeMatrix.DensePhasedGenotypeMatrix.reorder_vrnt"]], "select() (pybrops.popgen.gmat.densephasedgenotypematrix.densephasedgenotypematrix method)": [[1113, "pybrops.popgen.gmat.DensePhasedGenotypeMatrix.DensePhasedGenotypeMatrix.select"]], "select_phase() (pybrops.popgen.gmat.densephasedgenotypematrix.densephasedgenotypematrix method)": [[1113, "pybrops.popgen.gmat.DensePhasedGenotypeMatrix.DensePhasedGenotypeMatrix.select_phase"]], "select_taxa() (pybrops.popgen.gmat.densephasedgenotypematrix.densephasedgenotypematrix method)": [[1113, "pybrops.popgen.gmat.DensePhasedGenotypeMatrix.DensePhasedGenotypeMatrix.select_taxa"]], "select_vrnt() (pybrops.popgen.gmat.densephasedgenotypematrix.densephasedgenotypematrix method)": [[1113, "pybrops.popgen.gmat.DensePhasedGenotypeMatrix.DensePhasedGenotypeMatrix.select_vrnt"]], "sort() (pybrops.popgen.gmat.densephasedgenotypematrix.densephasedgenotypematrix method)": [[1113, "pybrops.popgen.gmat.DensePhasedGenotypeMatrix.DensePhasedGenotypeMatrix.sort"]], "sort_taxa() (pybrops.popgen.gmat.densephasedgenotypematrix.densephasedgenotypematrix method)": [[1113, "pybrops.popgen.gmat.DensePhasedGenotypeMatrix.DensePhasedGenotypeMatrix.sort_taxa"]], "sort_vrnt() (pybrops.popgen.gmat.densephasedgenotypematrix.densephasedgenotypematrix method)": [[1113, "pybrops.popgen.gmat.DensePhasedGenotypeMatrix.DensePhasedGenotypeMatrix.sort_vrnt"]], "tacount() (pybrops.popgen.gmat.densephasedgenotypematrix.densephasedgenotypematrix method)": [[1113, "pybrops.popgen.gmat.DensePhasedGenotypeMatrix.DensePhasedGenotypeMatrix.tacount"]], "tafreq() (pybrops.popgen.gmat.densephasedgenotypematrix.densephasedgenotypematrix method)": [[1113, "pybrops.popgen.gmat.DensePhasedGenotypeMatrix.DensePhasedGenotypeMatrix.tafreq"]], "taxa (pybrops.popgen.gmat.densephasedgenotypematrix.densephasedgenotypematrix property)": [[1113, "pybrops.popgen.gmat.DensePhasedGenotypeMatrix.DensePhasedGenotypeMatrix.taxa"]], "taxa_axis (pybrops.popgen.gmat.densephasedgenotypematrix.densephasedgenotypematrix property)": [[1113, "pybrops.popgen.gmat.DensePhasedGenotypeMatrix.DensePhasedGenotypeMatrix.taxa_axis"]], "taxa_grp (pybrops.popgen.gmat.densephasedgenotypematrix.densephasedgenotypematrix property)": [[1113, "pybrops.popgen.gmat.DensePhasedGenotypeMatrix.DensePhasedGenotypeMatrix.taxa_grp"]], "taxa_grp_len (pybrops.popgen.gmat.densephasedgenotypematrix.densephasedgenotypematrix property)": [[1113, "pybrops.popgen.gmat.DensePhasedGenotypeMatrix.DensePhasedGenotypeMatrix.taxa_grp_len"]], "taxa_grp_name (pybrops.popgen.gmat.densephasedgenotypematrix.densephasedgenotypematrix property)": [[1113, "pybrops.popgen.gmat.DensePhasedGenotypeMatrix.DensePhasedGenotypeMatrix.taxa_grp_name"]], "taxa_grp_spix (pybrops.popgen.gmat.densephasedgenotypematrix.densephasedgenotypematrix property)": [[1113, "pybrops.popgen.gmat.DensePhasedGenotypeMatrix.DensePhasedGenotypeMatrix.taxa_grp_spix"]], "taxa_grp_stix (pybrops.popgen.gmat.densephasedgenotypematrix.densephasedgenotypematrix property)": [[1113, "pybrops.popgen.gmat.DensePhasedGenotypeMatrix.DensePhasedGenotypeMatrix.taxa_grp_stix"]], "to_hdf5() (pybrops.popgen.gmat.densephasedgenotypematrix.densephasedgenotypematrix method)": [[1113, "pybrops.popgen.gmat.DensePhasedGenotypeMatrix.DensePhasedGenotypeMatrix.to_hdf5"]], "ungroup() (pybrops.popgen.gmat.densephasedgenotypematrix.densephasedgenotypematrix method)": [[1113, "pybrops.popgen.gmat.DensePhasedGenotypeMatrix.DensePhasedGenotypeMatrix.ungroup"]], "ungroup_taxa() (pybrops.popgen.gmat.densephasedgenotypematrix.densephasedgenotypematrix method)": [[1113, "pybrops.popgen.gmat.DensePhasedGenotypeMatrix.DensePhasedGenotypeMatrix.ungroup_taxa"]], "ungroup_vrnt() (pybrops.popgen.gmat.densephasedgenotypematrix.densephasedgenotypematrix method)": [[1113, "pybrops.popgen.gmat.DensePhasedGenotypeMatrix.DensePhasedGenotypeMatrix.ungroup_vrnt"]], "vrnt_axis (pybrops.popgen.gmat.densephasedgenotypematrix.densephasedgenotypematrix property)": [[1113, "pybrops.popgen.gmat.DensePhasedGenotypeMatrix.DensePhasedGenotypeMatrix.vrnt_axis"]], "vrnt_chrgrp (pybrops.popgen.gmat.densephasedgenotypematrix.densephasedgenotypematrix property)": [[1113, "pybrops.popgen.gmat.DensePhasedGenotypeMatrix.DensePhasedGenotypeMatrix.vrnt_chrgrp"]], "vrnt_chrgrp_len (pybrops.popgen.gmat.densephasedgenotypematrix.densephasedgenotypematrix property)": [[1113, "pybrops.popgen.gmat.DensePhasedGenotypeMatrix.DensePhasedGenotypeMatrix.vrnt_chrgrp_len"]], "vrnt_chrgrp_name (pybrops.popgen.gmat.densephasedgenotypematrix.densephasedgenotypematrix property)": [[1113, "pybrops.popgen.gmat.DensePhasedGenotypeMatrix.DensePhasedGenotypeMatrix.vrnt_chrgrp_name"]], "vrnt_chrgrp_spix (pybrops.popgen.gmat.densephasedgenotypematrix.densephasedgenotypematrix property)": [[1113, "pybrops.popgen.gmat.DensePhasedGenotypeMatrix.DensePhasedGenotypeMatrix.vrnt_chrgrp_spix"]], "vrnt_chrgrp_stix (pybrops.popgen.gmat.densephasedgenotypematrix.densephasedgenotypematrix property)": [[1113, "pybrops.popgen.gmat.DensePhasedGenotypeMatrix.DensePhasedGenotypeMatrix.vrnt_chrgrp_stix"]], "vrnt_genpos (pybrops.popgen.gmat.densephasedgenotypematrix.densephasedgenotypematrix property)": [[1113, "pybrops.popgen.gmat.DensePhasedGenotypeMatrix.DensePhasedGenotypeMatrix.vrnt_genpos"]], "vrnt_hapalt (pybrops.popgen.gmat.densephasedgenotypematrix.densephasedgenotypematrix property)": [[1113, "pybrops.popgen.gmat.DensePhasedGenotypeMatrix.DensePhasedGenotypeMatrix.vrnt_hapalt"]], "vrnt_hapgrp (pybrops.popgen.gmat.densephasedgenotypematrix.densephasedgenotypematrix property)": [[1113, "pybrops.popgen.gmat.DensePhasedGenotypeMatrix.DensePhasedGenotypeMatrix.vrnt_hapgrp"]], "vrnt_hapref (pybrops.popgen.gmat.densephasedgenotypematrix.densephasedgenotypematrix property)": [[1113, "pybrops.popgen.gmat.DensePhasedGenotypeMatrix.DensePhasedGenotypeMatrix.vrnt_hapref"]], "vrnt_mask (pybrops.popgen.gmat.densephasedgenotypematrix.densephasedgenotypematrix property)": [[1113, "pybrops.popgen.gmat.DensePhasedGenotypeMatrix.DensePhasedGenotypeMatrix.vrnt_mask"]], "vrnt_name (pybrops.popgen.gmat.densephasedgenotypematrix.densephasedgenotypematrix property)": [[1113, "pybrops.popgen.gmat.DensePhasedGenotypeMatrix.DensePhasedGenotypeMatrix.vrnt_name"]], "vrnt_phypos (pybrops.popgen.gmat.densephasedgenotypematrix.densephasedgenotypematrix property)": [[1113, "pybrops.popgen.gmat.DensePhasedGenotypeMatrix.DensePhasedGenotypeMatrix.vrnt_phypos"]], "vrnt_xoprob (pybrops.popgen.gmat.densephasedgenotypematrix.densephasedgenotypematrix property)": [[1113, "pybrops.popgen.gmat.DensePhasedGenotypeMatrix.DensePhasedGenotypeMatrix.vrnt_xoprob"]], "check_densephasedgenotypematrix_has_vrnt_xoprob() (in module pybrops.popgen.gmat.densephasedgenotypematrix)": [[1114, "pybrops.popgen.gmat.DensePhasedGenotypeMatrix.check_DensePhasedGenotypeMatrix_has_vrnt_xoprob"]], "check_is_densephasedgenotypematrix() (in module pybrops.popgen.gmat.densephasedgenotypematrix)": [[1115, "pybrops.popgen.gmat.DensePhasedGenotypeMatrix.check_is_DensePhasedGenotypeMatrix"]], "pybrops.popgen.gmat.genotypematrix": [[1116, "module-pybrops.popgen.gmat.GenotypeMatrix"]], "genotypematrix (class in pybrops.popgen.gmat.genotypematrix)": [[1117, "pybrops.popgen.gmat.GenotypeMatrix.GenotypeMatrix"]], "__add__() (pybrops.popgen.gmat.genotypematrix.genotypematrix method)": [[1117, "pybrops.popgen.gmat.GenotypeMatrix.GenotypeMatrix.__add__"]], "__mul__() (pybrops.popgen.gmat.genotypematrix.genotypematrix method)": [[1117, "pybrops.popgen.gmat.GenotypeMatrix.GenotypeMatrix.__mul__"]], "acount() (pybrops.popgen.gmat.genotypematrix.genotypematrix method)": [[1117, "pybrops.popgen.gmat.GenotypeMatrix.GenotypeMatrix.acount"]], "adjoin() (pybrops.popgen.gmat.genotypematrix.genotypematrix method)": [[1117, "pybrops.popgen.gmat.GenotypeMatrix.GenotypeMatrix.adjoin"]], "adjoin_taxa() (pybrops.popgen.gmat.genotypematrix.genotypematrix method)": [[1117, "pybrops.popgen.gmat.GenotypeMatrix.GenotypeMatrix.adjoin_taxa"]], "adjoin_vrnt() (pybrops.popgen.gmat.genotypematrix.genotypematrix method)": [[1117, "pybrops.popgen.gmat.GenotypeMatrix.GenotypeMatrix.adjoin_vrnt"]], "afreq() (pybrops.popgen.gmat.genotypematrix.genotypematrix method)": [[1117, "pybrops.popgen.gmat.GenotypeMatrix.GenotypeMatrix.afreq"]], "apoly() (pybrops.popgen.gmat.genotypematrix.genotypematrix method)": [[1117, "pybrops.popgen.gmat.GenotypeMatrix.GenotypeMatrix.apoly"]], "append() (pybrops.popgen.gmat.genotypematrix.genotypematrix method)": [[1117, "pybrops.popgen.gmat.GenotypeMatrix.GenotypeMatrix.append"]], "append_taxa() (pybrops.popgen.gmat.genotypematrix.genotypematrix method)": [[1117, "pybrops.popgen.gmat.GenotypeMatrix.GenotypeMatrix.append_taxa"]], "append_vrnt() (pybrops.popgen.gmat.genotypematrix.genotypematrix method)": [[1117, "pybrops.popgen.gmat.GenotypeMatrix.GenotypeMatrix.append_vrnt"]], "concat() (pybrops.popgen.gmat.genotypematrix.genotypematrix class method)": [[1117, "pybrops.popgen.gmat.GenotypeMatrix.GenotypeMatrix.concat"]], "concat_taxa() (pybrops.popgen.gmat.genotypematrix.genotypematrix class method)": [[1117, "pybrops.popgen.gmat.GenotypeMatrix.GenotypeMatrix.concat_taxa"]], "concat_vrnt() (pybrops.popgen.gmat.genotypematrix.genotypematrix class method)": [[1117, "pybrops.popgen.gmat.GenotypeMatrix.GenotypeMatrix.concat_vrnt"]], "copy() (pybrops.popgen.gmat.genotypematrix.genotypematrix method)": [[1117, "pybrops.popgen.gmat.GenotypeMatrix.GenotypeMatrix.copy"]], "deepcopy() (pybrops.popgen.gmat.genotypematrix.genotypematrix method)": [[1117, "pybrops.popgen.gmat.GenotypeMatrix.GenotypeMatrix.deepcopy"]], "delete() (pybrops.popgen.gmat.genotypematrix.genotypematrix method)": [[1117, "pybrops.popgen.gmat.GenotypeMatrix.GenotypeMatrix.delete"]], "delete_taxa() (pybrops.popgen.gmat.genotypematrix.genotypematrix method)": [[1117, "pybrops.popgen.gmat.GenotypeMatrix.GenotypeMatrix.delete_taxa"]], "delete_vrnt() (pybrops.popgen.gmat.genotypematrix.genotypematrix method)": [[1117, "pybrops.popgen.gmat.GenotypeMatrix.GenotypeMatrix.delete_vrnt"]], "from_hdf5() (pybrops.popgen.gmat.genotypematrix.genotypematrix class method)": [[1117, "pybrops.popgen.gmat.GenotypeMatrix.GenotypeMatrix.from_hdf5"]], "group() (pybrops.popgen.gmat.genotypematrix.genotypematrix method)": [[1117, "pybrops.popgen.gmat.GenotypeMatrix.GenotypeMatrix.group"]], "group_taxa() (pybrops.popgen.gmat.genotypematrix.genotypematrix method)": [[1117, "pybrops.popgen.gmat.GenotypeMatrix.GenotypeMatrix.group_taxa"]], "group_vrnt() (pybrops.popgen.gmat.genotypematrix.genotypematrix method)": [[1117, "pybrops.popgen.gmat.GenotypeMatrix.GenotypeMatrix.group_vrnt"]], "gtcount() (pybrops.popgen.gmat.genotypematrix.genotypematrix method)": [[1117, "pybrops.popgen.gmat.GenotypeMatrix.GenotypeMatrix.gtcount"]], "gtfreq() (pybrops.popgen.gmat.genotypematrix.genotypematrix method)": [[1117, "pybrops.popgen.gmat.GenotypeMatrix.GenotypeMatrix.gtfreq"]], "incorp() (pybrops.popgen.gmat.genotypematrix.genotypematrix method)": [[1117, "pybrops.popgen.gmat.GenotypeMatrix.GenotypeMatrix.incorp"]], "incorp_taxa() (pybrops.popgen.gmat.genotypematrix.genotypematrix method)": [[1117, "pybrops.popgen.gmat.GenotypeMatrix.GenotypeMatrix.incorp_taxa"]], "incorp_vrnt() (pybrops.popgen.gmat.genotypematrix.genotypematrix method)": [[1117, "pybrops.popgen.gmat.GenotypeMatrix.GenotypeMatrix.incorp_vrnt"]], "insert() (pybrops.popgen.gmat.genotypematrix.genotypematrix method)": [[1117, "pybrops.popgen.gmat.GenotypeMatrix.GenotypeMatrix.insert"]], "insert_taxa() (pybrops.popgen.gmat.genotypematrix.genotypematrix method)": [[1117, "pybrops.popgen.gmat.GenotypeMatrix.GenotypeMatrix.insert_taxa"]], "insert_vrnt() (pybrops.popgen.gmat.genotypematrix.genotypematrix method)": [[1117, "pybrops.popgen.gmat.GenotypeMatrix.GenotypeMatrix.insert_vrnt"]], "interp_genpos() (pybrops.popgen.gmat.genotypematrix.genotypematrix method)": [[1117, "pybrops.popgen.gmat.GenotypeMatrix.GenotypeMatrix.interp_genpos"]], "interp_xoprob() (pybrops.popgen.gmat.genotypematrix.genotypematrix method)": [[1117, "pybrops.popgen.gmat.GenotypeMatrix.GenotypeMatrix.interp_xoprob"]], "is_grouped() (pybrops.popgen.gmat.genotypematrix.genotypematrix method)": [[1117, "pybrops.popgen.gmat.GenotypeMatrix.GenotypeMatrix.is_grouped"]], "is_grouped_taxa() (pybrops.popgen.gmat.genotypematrix.genotypematrix method)": [[1117, "pybrops.popgen.gmat.GenotypeMatrix.GenotypeMatrix.is_grouped_taxa"]], "is_grouped_vrnt() (pybrops.popgen.gmat.genotypematrix.genotypematrix method)": [[1117, "pybrops.popgen.gmat.GenotypeMatrix.GenotypeMatrix.is_grouped_vrnt"]], "lexsort() (pybrops.popgen.gmat.genotypematrix.genotypematrix method)": [[1117, "pybrops.popgen.gmat.GenotypeMatrix.GenotypeMatrix.lexsort"]], "lexsort_taxa() (pybrops.popgen.gmat.genotypematrix.genotypematrix method)": [[1117, "pybrops.popgen.gmat.GenotypeMatrix.GenotypeMatrix.lexsort_taxa"]], "lexsort_vrnt() (pybrops.popgen.gmat.genotypematrix.genotypematrix method)": [[1117, "pybrops.popgen.gmat.GenotypeMatrix.GenotypeMatrix.lexsort_vrnt"]], "maf() (pybrops.popgen.gmat.genotypematrix.genotypematrix method)": [[1117, "pybrops.popgen.gmat.GenotypeMatrix.GenotypeMatrix.maf"]], "mat (pybrops.popgen.gmat.genotypematrix.genotypematrix property)": [[1117, "pybrops.popgen.gmat.GenotypeMatrix.GenotypeMatrix.mat"]], "mat_asformat() (pybrops.popgen.gmat.genotypematrix.genotypematrix method)": [[1117, "pybrops.popgen.gmat.GenotypeMatrix.GenotypeMatrix.mat_asformat"]], "mat_format (pybrops.popgen.gmat.genotypematrix.genotypematrix property)": [[1117, "pybrops.popgen.gmat.GenotypeMatrix.GenotypeMatrix.mat_format"]], "mat_ndim (pybrops.popgen.gmat.genotypematrix.genotypematrix property)": [[1117, "pybrops.popgen.gmat.GenotypeMatrix.GenotypeMatrix.mat_ndim"]], "mat_shape (pybrops.popgen.gmat.genotypematrix.genotypematrix property)": [[1117, "pybrops.popgen.gmat.GenotypeMatrix.GenotypeMatrix.mat_shape"]], "meh() (pybrops.popgen.gmat.genotypematrix.genotypematrix method)": [[1117, "pybrops.popgen.gmat.GenotypeMatrix.GenotypeMatrix.meh"]], "nphase (pybrops.popgen.gmat.genotypematrix.genotypematrix property)": [[1117, "pybrops.popgen.gmat.GenotypeMatrix.GenotypeMatrix.nphase"]], "ntaxa (pybrops.popgen.gmat.genotypematrix.genotypematrix property)": [[1117, "pybrops.popgen.gmat.GenotypeMatrix.GenotypeMatrix.ntaxa"]], "nvrnt (pybrops.popgen.gmat.genotypematrix.genotypematrix property)": [[1117, "pybrops.popgen.gmat.GenotypeMatrix.GenotypeMatrix.nvrnt"]], "ploidy (pybrops.popgen.gmat.genotypematrix.genotypematrix property)": [[1117, "pybrops.popgen.gmat.GenotypeMatrix.GenotypeMatrix.ploidy"]], "remove() (pybrops.popgen.gmat.genotypematrix.genotypematrix method)": [[1117, "pybrops.popgen.gmat.GenotypeMatrix.GenotypeMatrix.remove"]], "remove_taxa() (pybrops.popgen.gmat.genotypematrix.genotypematrix method)": [[1117, "pybrops.popgen.gmat.GenotypeMatrix.GenotypeMatrix.remove_taxa"]], "remove_vrnt() (pybrops.popgen.gmat.genotypematrix.genotypematrix method)": [[1117, "pybrops.popgen.gmat.GenotypeMatrix.GenotypeMatrix.remove_vrnt"]], "reorder() (pybrops.popgen.gmat.genotypematrix.genotypematrix method)": [[1117, "pybrops.popgen.gmat.GenotypeMatrix.GenotypeMatrix.reorder"]], "reorder_taxa() (pybrops.popgen.gmat.genotypematrix.genotypematrix method)": [[1117, "pybrops.popgen.gmat.GenotypeMatrix.GenotypeMatrix.reorder_taxa"]], "reorder_vrnt() (pybrops.popgen.gmat.genotypematrix.genotypematrix method)": [[1117, "pybrops.popgen.gmat.GenotypeMatrix.GenotypeMatrix.reorder_vrnt"]], "select() (pybrops.popgen.gmat.genotypematrix.genotypematrix method)": [[1117, "pybrops.popgen.gmat.GenotypeMatrix.GenotypeMatrix.select"]], "select_taxa() (pybrops.popgen.gmat.genotypematrix.genotypematrix method)": [[1117, "pybrops.popgen.gmat.GenotypeMatrix.GenotypeMatrix.select_taxa"]], "select_vrnt() (pybrops.popgen.gmat.genotypematrix.genotypematrix method)": [[1117, "pybrops.popgen.gmat.GenotypeMatrix.GenotypeMatrix.select_vrnt"]], "sort() (pybrops.popgen.gmat.genotypematrix.genotypematrix method)": [[1117, "pybrops.popgen.gmat.GenotypeMatrix.GenotypeMatrix.sort"]], "sort_taxa() (pybrops.popgen.gmat.genotypematrix.genotypematrix method)": [[1117, "pybrops.popgen.gmat.GenotypeMatrix.GenotypeMatrix.sort_taxa"]], "sort_vrnt() (pybrops.popgen.gmat.genotypematrix.genotypematrix method)": [[1117, "pybrops.popgen.gmat.GenotypeMatrix.GenotypeMatrix.sort_vrnt"]], "tacount() (pybrops.popgen.gmat.genotypematrix.genotypematrix method)": [[1117, "pybrops.popgen.gmat.GenotypeMatrix.GenotypeMatrix.tacount"]], "tafreq() (pybrops.popgen.gmat.genotypematrix.genotypematrix method)": [[1117, "pybrops.popgen.gmat.GenotypeMatrix.GenotypeMatrix.tafreq"]], "taxa (pybrops.popgen.gmat.genotypematrix.genotypematrix property)": [[1117, "pybrops.popgen.gmat.GenotypeMatrix.GenotypeMatrix.taxa"]], "taxa_axis (pybrops.popgen.gmat.genotypematrix.genotypematrix property)": [[1117, "pybrops.popgen.gmat.GenotypeMatrix.GenotypeMatrix.taxa_axis"]], "taxa_grp (pybrops.popgen.gmat.genotypematrix.genotypematrix property)": [[1117, "pybrops.popgen.gmat.GenotypeMatrix.GenotypeMatrix.taxa_grp"]], "taxa_grp_len (pybrops.popgen.gmat.genotypematrix.genotypematrix property)": [[1117, "pybrops.popgen.gmat.GenotypeMatrix.GenotypeMatrix.taxa_grp_len"]], "taxa_grp_name (pybrops.popgen.gmat.genotypematrix.genotypematrix property)": [[1117, "pybrops.popgen.gmat.GenotypeMatrix.GenotypeMatrix.taxa_grp_name"]], "taxa_grp_spix (pybrops.popgen.gmat.genotypematrix.genotypematrix property)": [[1117, "pybrops.popgen.gmat.GenotypeMatrix.GenotypeMatrix.taxa_grp_spix"]], "taxa_grp_stix (pybrops.popgen.gmat.genotypematrix.genotypematrix property)": [[1117, "pybrops.popgen.gmat.GenotypeMatrix.GenotypeMatrix.taxa_grp_stix"]], "to_hdf5() (pybrops.popgen.gmat.genotypematrix.genotypematrix method)": [[1117, "pybrops.popgen.gmat.GenotypeMatrix.GenotypeMatrix.to_hdf5"]], "ungroup() (pybrops.popgen.gmat.genotypematrix.genotypematrix method)": [[1117, "pybrops.popgen.gmat.GenotypeMatrix.GenotypeMatrix.ungroup"]], "ungroup_taxa() (pybrops.popgen.gmat.genotypematrix.genotypematrix method)": [[1117, "pybrops.popgen.gmat.GenotypeMatrix.GenotypeMatrix.ungroup_taxa"]], "ungroup_vrnt() (pybrops.popgen.gmat.genotypematrix.genotypematrix method)": [[1117, "pybrops.popgen.gmat.GenotypeMatrix.GenotypeMatrix.ungroup_vrnt"]], "vrnt_axis (pybrops.popgen.gmat.genotypematrix.genotypematrix property)": [[1117, "pybrops.popgen.gmat.GenotypeMatrix.GenotypeMatrix.vrnt_axis"]], "vrnt_chrgrp (pybrops.popgen.gmat.genotypematrix.genotypematrix property)": [[1117, "pybrops.popgen.gmat.GenotypeMatrix.GenotypeMatrix.vrnt_chrgrp"]], "vrnt_chrgrp_len (pybrops.popgen.gmat.genotypematrix.genotypematrix property)": [[1117, "pybrops.popgen.gmat.GenotypeMatrix.GenotypeMatrix.vrnt_chrgrp_len"]], "vrnt_chrgrp_name (pybrops.popgen.gmat.genotypematrix.genotypematrix property)": [[1117, "pybrops.popgen.gmat.GenotypeMatrix.GenotypeMatrix.vrnt_chrgrp_name"]], "vrnt_chrgrp_spix (pybrops.popgen.gmat.genotypematrix.genotypematrix property)": [[1117, "pybrops.popgen.gmat.GenotypeMatrix.GenotypeMatrix.vrnt_chrgrp_spix"]], "vrnt_chrgrp_stix (pybrops.popgen.gmat.genotypematrix.genotypematrix property)": [[1117, "pybrops.popgen.gmat.GenotypeMatrix.GenotypeMatrix.vrnt_chrgrp_stix"]], "vrnt_genpos (pybrops.popgen.gmat.genotypematrix.genotypematrix property)": [[1117, "pybrops.popgen.gmat.GenotypeMatrix.GenotypeMatrix.vrnt_genpos"]], "vrnt_hapalt (pybrops.popgen.gmat.genotypematrix.genotypematrix property)": [[1117, "pybrops.popgen.gmat.GenotypeMatrix.GenotypeMatrix.vrnt_hapalt"]], "vrnt_hapgrp (pybrops.popgen.gmat.genotypematrix.genotypematrix property)": [[1117, "pybrops.popgen.gmat.GenotypeMatrix.GenotypeMatrix.vrnt_hapgrp"]], "vrnt_hapref (pybrops.popgen.gmat.genotypematrix.genotypematrix property)": [[1117, "pybrops.popgen.gmat.GenotypeMatrix.GenotypeMatrix.vrnt_hapref"]], "vrnt_mask (pybrops.popgen.gmat.genotypematrix.genotypematrix property)": [[1117, "pybrops.popgen.gmat.GenotypeMatrix.GenotypeMatrix.vrnt_mask"]], "vrnt_name (pybrops.popgen.gmat.genotypematrix.genotypematrix property)": [[1117, "pybrops.popgen.gmat.GenotypeMatrix.GenotypeMatrix.vrnt_name"]], "vrnt_phypos (pybrops.popgen.gmat.genotypematrix.genotypematrix property)": [[1117, "pybrops.popgen.gmat.GenotypeMatrix.GenotypeMatrix.vrnt_phypos"]], "vrnt_xoprob (pybrops.popgen.gmat.genotypematrix.genotypematrix property)": [[1117, "pybrops.popgen.gmat.GenotypeMatrix.GenotypeMatrix.vrnt_xoprob"]], "check_genotypematrix_has_taxa() (in module pybrops.popgen.gmat.genotypematrix)": [[1118, "pybrops.popgen.gmat.GenotypeMatrix.check_GenotypeMatrix_has_taxa"]], "check_is_genotypematrix() (in module pybrops.popgen.gmat.genotypematrix)": [[1119, "pybrops.popgen.gmat.GenotypeMatrix.check_is_GenotypeMatrix"]], "pybrops.popgen.gmat.haplotypematrix": [[1120, "module-pybrops.popgen.gmat.HaplotypeMatrix"]], "haplotypematrix (class in pybrops.popgen.gmat.haplotypematrix)": [[1121, "pybrops.popgen.gmat.HaplotypeMatrix.HaplotypeMatrix"]], "__add__() (pybrops.popgen.gmat.haplotypematrix.haplotypematrix method)": [[1121, "pybrops.popgen.gmat.HaplotypeMatrix.HaplotypeMatrix.__add__"]], "__mul__() (pybrops.popgen.gmat.haplotypematrix.haplotypematrix method)": [[1121, "pybrops.popgen.gmat.HaplotypeMatrix.HaplotypeMatrix.__mul__"]], "adjoin() (pybrops.popgen.gmat.haplotypematrix.haplotypematrix method)": [[1121, "pybrops.popgen.gmat.HaplotypeMatrix.HaplotypeMatrix.adjoin"]], "adjoin_taxa() (pybrops.popgen.gmat.haplotypematrix.haplotypematrix method)": [[1121, "pybrops.popgen.gmat.HaplotypeMatrix.HaplotypeMatrix.adjoin_taxa"]], "adjoin_vrnt() (pybrops.popgen.gmat.haplotypematrix.haplotypematrix method)": [[1121, "pybrops.popgen.gmat.HaplotypeMatrix.HaplotypeMatrix.adjoin_vrnt"]], "append() (pybrops.popgen.gmat.haplotypematrix.haplotypematrix method)": [[1121, "pybrops.popgen.gmat.HaplotypeMatrix.HaplotypeMatrix.append"]], "append_taxa() (pybrops.popgen.gmat.haplotypematrix.haplotypematrix method)": [[1121, "pybrops.popgen.gmat.HaplotypeMatrix.HaplotypeMatrix.append_taxa"]], "append_vrnt() (pybrops.popgen.gmat.haplotypematrix.haplotypematrix method)": [[1121, "pybrops.popgen.gmat.HaplotypeMatrix.HaplotypeMatrix.append_vrnt"]], "concat() (pybrops.popgen.gmat.haplotypematrix.haplotypematrix class method)": [[1121, "pybrops.popgen.gmat.HaplotypeMatrix.HaplotypeMatrix.concat"]], "concat_taxa() (pybrops.popgen.gmat.haplotypematrix.haplotypematrix class method)": [[1121, "pybrops.popgen.gmat.HaplotypeMatrix.HaplotypeMatrix.concat_taxa"]], "concat_vrnt() (pybrops.popgen.gmat.haplotypematrix.haplotypematrix class method)": [[1121, "pybrops.popgen.gmat.HaplotypeMatrix.HaplotypeMatrix.concat_vrnt"]], "copy() (pybrops.popgen.gmat.haplotypematrix.haplotypematrix method)": [[1121, "pybrops.popgen.gmat.HaplotypeMatrix.HaplotypeMatrix.copy"]], "deepcopy() (pybrops.popgen.gmat.haplotypematrix.haplotypematrix method)": [[1121, "pybrops.popgen.gmat.HaplotypeMatrix.HaplotypeMatrix.deepcopy"]], "delete() (pybrops.popgen.gmat.haplotypematrix.haplotypematrix method)": [[1121, "pybrops.popgen.gmat.HaplotypeMatrix.HaplotypeMatrix.delete"]], "delete_taxa() (pybrops.popgen.gmat.haplotypematrix.haplotypematrix method)": [[1121, "pybrops.popgen.gmat.HaplotypeMatrix.HaplotypeMatrix.delete_taxa"]], "delete_vrnt() (pybrops.popgen.gmat.haplotypematrix.haplotypematrix method)": [[1121, "pybrops.popgen.gmat.HaplotypeMatrix.HaplotypeMatrix.delete_vrnt"]], "from_hdf5() (pybrops.popgen.gmat.haplotypematrix.haplotypematrix class method)": [[1121, "pybrops.popgen.gmat.HaplotypeMatrix.HaplotypeMatrix.from_hdf5"]], "group() (pybrops.popgen.gmat.haplotypematrix.haplotypematrix method)": [[1121, "pybrops.popgen.gmat.HaplotypeMatrix.HaplotypeMatrix.group"]], "group_taxa() (pybrops.popgen.gmat.haplotypematrix.haplotypematrix method)": [[1121, "pybrops.popgen.gmat.HaplotypeMatrix.HaplotypeMatrix.group_taxa"]], "group_vrnt() (pybrops.popgen.gmat.haplotypematrix.haplotypematrix method)": [[1121, "pybrops.popgen.gmat.HaplotypeMatrix.HaplotypeMatrix.group_vrnt"]], "gtcount() (pybrops.popgen.gmat.haplotypematrix.haplotypematrix method)": [[1121, "pybrops.popgen.gmat.HaplotypeMatrix.HaplotypeMatrix.gtcount"]], "gtfreq() (pybrops.popgen.gmat.haplotypematrix.haplotypematrix method)": [[1121, "pybrops.popgen.gmat.HaplotypeMatrix.HaplotypeMatrix.gtfreq"]], "hcount() (pybrops.popgen.gmat.haplotypematrix.haplotypematrix method)": [[1121, "pybrops.popgen.gmat.HaplotypeMatrix.HaplotypeMatrix.hcount"]], "hfreq() (pybrops.popgen.gmat.haplotypematrix.haplotypematrix method)": [[1121, "pybrops.popgen.gmat.HaplotypeMatrix.HaplotypeMatrix.hfreq"]], "incorp() (pybrops.popgen.gmat.haplotypematrix.haplotypematrix method)": [[1121, "pybrops.popgen.gmat.HaplotypeMatrix.HaplotypeMatrix.incorp"]], "incorp_taxa() (pybrops.popgen.gmat.haplotypematrix.haplotypematrix method)": [[1121, "pybrops.popgen.gmat.HaplotypeMatrix.HaplotypeMatrix.incorp_taxa"]], "incorp_vrnt() (pybrops.popgen.gmat.haplotypematrix.haplotypematrix method)": [[1121, "pybrops.popgen.gmat.HaplotypeMatrix.HaplotypeMatrix.incorp_vrnt"]], "insert() (pybrops.popgen.gmat.haplotypematrix.haplotypematrix method)": [[1121, "pybrops.popgen.gmat.HaplotypeMatrix.HaplotypeMatrix.insert"]], "insert_taxa() (pybrops.popgen.gmat.haplotypematrix.haplotypematrix method)": [[1121, "pybrops.popgen.gmat.HaplotypeMatrix.HaplotypeMatrix.insert_taxa"]], "insert_vrnt() (pybrops.popgen.gmat.haplotypematrix.haplotypematrix method)": [[1121, "pybrops.popgen.gmat.HaplotypeMatrix.HaplotypeMatrix.insert_vrnt"]], "is_grouped() (pybrops.popgen.gmat.haplotypematrix.haplotypematrix method)": [[1121, "pybrops.popgen.gmat.HaplotypeMatrix.HaplotypeMatrix.is_grouped"]], "is_grouped_taxa() (pybrops.popgen.gmat.haplotypematrix.haplotypematrix method)": [[1121, "pybrops.popgen.gmat.HaplotypeMatrix.HaplotypeMatrix.is_grouped_taxa"]], "is_grouped_vrnt() (pybrops.popgen.gmat.haplotypematrix.haplotypematrix method)": [[1121, "pybrops.popgen.gmat.HaplotypeMatrix.HaplotypeMatrix.is_grouped_vrnt"]], "lexsort() (pybrops.popgen.gmat.haplotypematrix.haplotypematrix method)": [[1121, "pybrops.popgen.gmat.HaplotypeMatrix.HaplotypeMatrix.lexsort"]], "lexsort_taxa() (pybrops.popgen.gmat.haplotypematrix.haplotypematrix method)": [[1121, "pybrops.popgen.gmat.HaplotypeMatrix.HaplotypeMatrix.lexsort_taxa"]], "lexsort_vrnt() (pybrops.popgen.gmat.haplotypematrix.haplotypematrix method)": [[1121, "pybrops.popgen.gmat.HaplotypeMatrix.HaplotypeMatrix.lexsort_vrnt"]], "mat (pybrops.popgen.gmat.haplotypematrix.haplotypematrix property)": [[1121, "pybrops.popgen.gmat.HaplotypeMatrix.HaplotypeMatrix.mat"]], "mat_format (pybrops.popgen.gmat.haplotypematrix.haplotypematrix property)": [[1121, "pybrops.popgen.gmat.HaplotypeMatrix.HaplotypeMatrix.mat_format"]], "mat_ndim (pybrops.popgen.gmat.haplotypematrix.haplotypematrix property)": [[1121, "pybrops.popgen.gmat.HaplotypeMatrix.HaplotypeMatrix.mat_ndim"]], "mat_shape (pybrops.popgen.gmat.haplotypematrix.haplotypematrix property)": [[1121, "pybrops.popgen.gmat.HaplotypeMatrix.HaplotypeMatrix.mat_shape"]], "meh() (pybrops.popgen.gmat.haplotypematrix.haplotypematrix method)": [[1121, "pybrops.popgen.gmat.HaplotypeMatrix.HaplotypeMatrix.meh"]], "mhf() (pybrops.popgen.gmat.haplotypematrix.haplotypematrix method)": [[1121, "pybrops.popgen.gmat.HaplotypeMatrix.HaplotypeMatrix.mhf"]], "nphase (pybrops.popgen.gmat.haplotypematrix.haplotypematrix property)": [[1121, "pybrops.popgen.gmat.HaplotypeMatrix.HaplotypeMatrix.nphase"]], "ntaxa (pybrops.popgen.gmat.haplotypematrix.haplotypematrix property)": [[1121, "pybrops.popgen.gmat.HaplotypeMatrix.HaplotypeMatrix.ntaxa"]], "nvrnt (pybrops.popgen.gmat.haplotypematrix.haplotypematrix property)": [[1121, "pybrops.popgen.gmat.HaplotypeMatrix.HaplotypeMatrix.nvrnt"]], "ploidy (pybrops.popgen.gmat.haplotypematrix.haplotypematrix property)": [[1121, "pybrops.popgen.gmat.HaplotypeMatrix.HaplotypeMatrix.ploidy"]], "remove() (pybrops.popgen.gmat.haplotypematrix.haplotypematrix method)": [[1121, "pybrops.popgen.gmat.HaplotypeMatrix.HaplotypeMatrix.remove"]], "remove_taxa() (pybrops.popgen.gmat.haplotypematrix.haplotypematrix method)": [[1121, "pybrops.popgen.gmat.HaplotypeMatrix.HaplotypeMatrix.remove_taxa"]], "remove_vrnt() (pybrops.popgen.gmat.haplotypematrix.haplotypematrix method)": [[1121, "pybrops.popgen.gmat.HaplotypeMatrix.HaplotypeMatrix.remove_vrnt"]], "reorder() (pybrops.popgen.gmat.haplotypematrix.haplotypematrix method)": [[1121, "pybrops.popgen.gmat.HaplotypeMatrix.HaplotypeMatrix.reorder"]], "reorder_taxa() (pybrops.popgen.gmat.haplotypematrix.haplotypematrix method)": [[1121, "pybrops.popgen.gmat.HaplotypeMatrix.HaplotypeMatrix.reorder_taxa"]], "reorder_vrnt() (pybrops.popgen.gmat.haplotypematrix.haplotypematrix method)": [[1121, "pybrops.popgen.gmat.HaplotypeMatrix.HaplotypeMatrix.reorder_vrnt"]], "select() (pybrops.popgen.gmat.haplotypematrix.haplotypematrix method)": [[1121, "pybrops.popgen.gmat.HaplotypeMatrix.HaplotypeMatrix.select"]], "select_taxa() (pybrops.popgen.gmat.haplotypematrix.haplotypematrix method)": [[1121, "pybrops.popgen.gmat.HaplotypeMatrix.HaplotypeMatrix.select_taxa"]], "select_vrnt() (pybrops.popgen.gmat.haplotypematrix.haplotypematrix method)": [[1121, "pybrops.popgen.gmat.HaplotypeMatrix.HaplotypeMatrix.select_vrnt"]], "sort() (pybrops.popgen.gmat.haplotypematrix.haplotypematrix method)": [[1121, "pybrops.popgen.gmat.HaplotypeMatrix.HaplotypeMatrix.sort"]], "sort_taxa() (pybrops.popgen.gmat.haplotypematrix.haplotypematrix method)": [[1121, "pybrops.popgen.gmat.HaplotypeMatrix.HaplotypeMatrix.sort_taxa"]], "sort_vrnt() (pybrops.popgen.gmat.haplotypematrix.haplotypematrix method)": [[1121, "pybrops.popgen.gmat.HaplotypeMatrix.HaplotypeMatrix.sort_vrnt"]], "taxa (pybrops.popgen.gmat.haplotypematrix.haplotypematrix property)": [[1121, "pybrops.popgen.gmat.HaplotypeMatrix.HaplotypeMatrix.taxa"]], "taxa_axis (pybrops.popgen.gmat.haplotypematrix.haplotypematrix property)": [[1121, "pybrops.popgen.gmat.HaplotypeMatrix.HaplotypeMatrix.taxa_axis"]], "taxa_grp (pybrops.popgen.gmat.haplotypematrix.haplotypematrix property)": [[1121, "pybrops.popgen.gmat.HaplotypeMatrix.HaplotypeMatrix.taxa_grp"]], "taxa_grp_len (pybrops.popgen.gmat.haplotypematrix.haplotypematrix property)": [[1121, "pybrops.popgen.gmat.HaplotypeMatrix.HaplotypeMatrix.taxa_grp_len"]], "taxa_grp_name (pybrops.popgen.gmat.haplotypematrix.haplotypematrix property)": [[1121, "pybrops.popgen.gmat.HaplotypeMatrix.HaplotypeMatrix.taxa_grp_name"]], "taxa_grp_spix (pybrops.popgen.gmat.haplotypematrix.haplotypematrix property)": [[1121, "pybrops.popgen.gmat.HaplotypeMatrix.HaplotypeMatrix.taxa_grp_spix"]], "taxa_grp_stix (pybrops.popgen.gmat.haplotypematrix.haplotypematrix property)": [[1121, "pybrops.popgen.gmat.HaplotypeMatrix.HaplotypeMatrix.taxa_grp_stix"]], "thcount() (pybrops.popgen.gmat.haplotypematrix.haplotypematrix method)": [[1121, "pybrops.popgen.gmat.HaplotypeMatrix.HaplotypeMatrix.thcount"]], "thfreq() (pybrops.popgen.gmat.haplotypematrix.haplotypematrix method)": [[1121, "pybrops.popgen.gmat.HaplotypeMatrix.HaplotypeMatrix.thfreq"]], "to_hdf5() (pybrops.popgen.gmat.haplotypematrix.haplotypematrix method)": [[1121, "pybrops.popgen.gmat.HaplotypeMatrix.HaplotypeMatrix.to_hdf5"]], "ungroup() (pybrops.popgen.gmat.haplotypematrix.haplotypematrix method)": [[1121, "pybrops.popgen.gmat.HaplotypeMatrix.HaplotypeMatrix.ungroup"]], "ungroup_taxa() (pybrops.popgen.gmat.haplotypematrix.haplotypematrix method)": [[1121, "pybrops.popgen.gmat.HaplotypeMatrix.HaplotypeMatrix.ungroup_taxa"]], "ungroup_vrnt() (pybrops.popgen.gmat.haplotypematrix.haplotypematrix method)": [[1121, "pybrops.popgen.gmat.HaplotypeMatrix.HaplotypeMatrix.ungroup_vrnt"]], "vrnt_axis (pybrops.popgen.gmat.haplotypematrix.haplotypematrix property)": [[1121, "pybrops.popgen.gmat.HaplotypeMatrix.HaplotypeMatrix.vrnt_axis"]], "vrnt_chrgrp (pybrops.popgen.gmat.haplotypematrix.haplotypematrix property)": [[1121, "pybrops.popgen.gmat.HaplotypeMatrix.HaplotypeMatrix.vrnt_chrgrp"]], "vrnt_chrgrp_len (pybrops.popgen.gmat.haplotypematrix.haplotypematrix property)": [[1121, "pybrops.popgen.gmat.HaplotypeMatrix.HaplotypeMatrix.vrnt_chrgrp_len"]], "vrnt_chrgrp_name (pybrops.popgen.gmat.haplotypematrix.haplotypematrix property)": [[1121, "pybrops.popgen.gmat.HaplotypeMatrix.HaplotypeMatrix.vrnt_chrgrp_name"]], "vrnt_chrgrp_spix (pybrops.popgen.gmat.haplotypematrix.haplotypematrix property)": [[1121, "pybrops.popgen.gmat.HaplotypeMatrix.HaplotypeMatrix.vrnt_chrgrp_spix"]], "vrnt_chrgrp_stix (pybrops.popgen.gmat.haplotypematrix.haplotypematrix property)": [[1121, "pybrops.popgen.gmat.HaplotypeMatrix.HaplotypeMatrix.vrnt_chrgrp_stix"]], "vrnt_genpos (pybrops.popgen.gmat.haplotypematrix.haplotypematrix property)": [[1121, "pybrops.popgen.gmat.HaplotypeMatrix.HaplotypeMatrix.vrnt_genpos"]], "vrnt_hapalt (pybrops.popgen.gmat.haplotypematrix.haplotypematrix property)": [[1121, "pybrops.popgen.gmat.HaplotypeMatrix.HaplotypeMatrix.vrnt_hapalt"]], "vrnt_hapgrp (pybrops.popgen.gmat.haplotypematrix.haplotypematrix property)": [[1121, "pybrops.popgen.gmat.HaplotypeMatrix.HaplotypeMatrix.vrnt_hapgrp"]], "vrnt_hapref (pybrops.popgen.gmat.haplotypematrix.haplotypematrix property)": [[1121, "pybrops.popgen.gmat.HaplotypeMatrix.HaplotypeMatrix.vrnt_hapref"]], "vrnt_mask (pybrops.popgen.gmat.haplotypematrix.haplotypematrix property)": [[1121, "pybrops.popgen.gmat.HaplotypeMatrix.HaplotypeMatrix.vrnt_mask"]], "vrnt_name (pybrops.popgen.gmat.haplotypematrix.haplotypematrix property)": [[1121, "pybrops.popgen.gmat.HaplotypeMatrix.HaplotypeMatrix.vrnt_name"]], "vrnt_phypos (pybrops.popgen.gmat.haplotypematrix.haplotypematrix property)": [[1121, "pybrops.popgen.gmat.HaplotypeMatrix.HaplotypeMatrix.vrnt_phypos"]], "vrnt_xoprob (pybrops.popgen.gmat.haplotypematrix.haplotypematrix property)": [[1121, "pybrops.popgen.gmat.HaplotypeMatrix.HaplotypeMatrix.vrnt_xoprob"]], "check_is_haplotypematrix() (in module pybrops.popgen.gmat.haplotypematrix)": [[1122, "pybrops.popgen.gmat.HaplotypeMatrix.check_is_HaplotypeMatrix"]], "pybrops.popgen.gmat.phasedgenotypematrix": [[1123, "module-pybrops.popgen.gmat.PhasedGenotypeMatrix"]], "phasedgenotypematrix (class in pybrops.popgen.gmat.phasedgenotypematrix)": [[1124, "pybrops.popgen.gmat.PhasedGenotypeMatrix.PhasedGenotypeMatrix"]], "__add__() (pybrops.popgen.gmat.phasedgenotypematrix.phasedgenotypematrix method)": [[1124, "pybrops.popgen.gmat.PhasedGenotypeMatrix.PhasedGenotypeMatrix.__add__"]], "__mul__() (pybrops.popgen.gmat.phasedgenotypematrix.phasedgenotypematrix method)": [[1124, "pybrops.popgen.gmat.PhasedGenotypeMatrix.PhasedGenotypeMatrix.__mul__"]], "acount() (pybrops.popgen.gmat.phasedgenotypematrix.phasedgenotypematrix method)": [[1124, "pybrops.popgen.gmat.PhasedGenotypeMatrix.PhasedGenotypeMatrix.acount"]], "adjoin() (pybrops.popgen.gmat.phasedgenotypematrix.phasedgenotypematrix method)": [[1124, "pybrops.popgen.gmat.PhasedGenotypeMatrix.PhasedGenotypeMatrix.adjoin"]], "adjoin_phase() (pybrops.popgen.gmat.phasedgenotypematrix.phasedgenotypematrix method)": [[1124, "pybrops.popgen.gmat.PhasedGenotypeMatrix.PhasedGenotypeMatrix.adjoin_phase"]], "adjoin_taxa() (pybrops.popgen.gmat.phasedgenotypematrix.phasedgenotypematrix method)": [[1124, "pybrops.popgen.gmat.PhasedGenotypeMatrix.PhasedGenotypeMatrix.adjoin_taxa"]], "adjoin_vrnt() (pybrops.popgen.gmat.phasedgenotypematrix.phasedgenotypematrix method)": [[1124, "pybrops.popgen.gmat.PhasedGenotypeMatrix.PhasedGenotypeMatrix.adjoin_vrnt"]], "afreq() (pybrops.popgen.gmat.phasedgenotypematrix.phasedgenotypematrix method)": [[1124, "pybrops.popgen.gmat.PhasedGenotypeMatrix.PhasedGenotypeMatrix.afreq"]], "apoly() (pybrops.popgen.gmat.phasedgenotypematrix.phasedgenotypematrix method)": [[1124, "pybrops.popgen.gmat.PhasedGenotypeMatrix.PhasedGenotypeMatrix.apoly"]], "append() (pybrops.popgen.gmat.phasedgenotypematrix.phasedgenotypematrix method)": [[1124, "pybrops.popgen.gmat.PhasedGenotypeMatrix.PhasedGenotypeMatrix.append"]], "append_phase() (pybrops.popgen.gmat.phasedgenotypematrix.phasedgenotypematrix method)": [[1124, "pybrops.popgen.gmat.PhasedGenotypeMatrix.PhasedGenotypeMatrix.append_phase"]], "append_taxa() (pybrops.popgen.gmat.phasedgenotypematrix.phasedgenotypematrix method)": [[1124, "pybrops.popgen.gmat.PhasedGenotypeMatrix.PhasedGenotypeMatrix.append_taxa"]], "append_vrnt() (pybrops.popgen.gmat.phasedgenotypematrix.phasedgenotypematrix method)": [[1124, "pybrops.popgen.gmat.PhasedGenotypeMatrix.PhasedGenotypeMatrix.append_vrnt"]], "concat() (pybrops.popgen.gmat.phasedgenotypematrix.phasedgenotypematrix class method)": [[1124, "pybrops.popgen.gmat.PhasedGenotypeMatrix.PhasedGenotypeMatrix.concat"]], "concat_phase() (pybrops.popgen.gmat.phasedgenotypematrix.phasedgenotypematrix class method)": [[1124, "pybrops.popgen.gmat.PhasedGenotypeMatrix.PhasedGenotypeMatrix.concat_phase"]], "concat_taxa() (pybrops.popgen.gmat.phasedgenotypematrix.phasedgenotypematrix class method)": [[1124, "pybrops.popgen.gmat.PhasedGenotypeMatrix.PhasedGenotypeMatrix.concat_taxa"]], "concat_vrnt() (pybrops.popgen.gmat.phasedgenotypematrix.phasedgenotypematrix class method)": [[1124, "pybrops.popgen.gmat.PhasedGenotypeMatrix.PhasedGenotypeMatrix.concat_vrnt"]], "copy() (pybrops.popgen.gmat.phasedgenotypematrix.phasedgenotypematrix method)": [[1124, "pybrops.popgen.gmat.PhasedGenotypeMatrix.PhasedGenotypeMatrix.copy"]], "deepcopy() (pybrops.popgen.gmat.phasedgenotypematrix.phasedgenotypematrix method)": [[1124, "pybrops.popgen.gmat.PhasedGenotypeMatrix.PhasedGenotypeMatrix.deepcopy"]], "delete() (pybrops.popgen.gmat.phasedgenotypematrix.phasedgenotypematrix method)": [[1124, "pybrops.popgen.gmat.PhasedGenotypeMatrix.PhasedGenotypeMatrix.delete"]], "delete_phase() (pybrops.popgen.gmat.phasedgenotypematrix.phasedgenotypematrix method)": [[1124, "pybrops.popgen.gmat.PhasedGenotypeMatrix.PhasedGenotypeMatrix.delete_phase"]], "delete_taxa() (pybrops.popgen.gmat.phasedgenotypematrix.phasedgenotypematrix method)": [[1124, "pybrops.popgen.gmat.PhasedGenotypeMatrix.PhasedGenotypeMatrix.delete_taxa"]], "delete_vrnt() (pybrops.popgen.gmat.phasedgenotypematrix.phasedgenotypematrix method)": [[1124, "pybrops.popgen.gmat.PhasedGenotypeMatrix.PhasedGenotypeMatrix.delete_vrnt"]], "from_hdf5() (pybrops.popgen.gmat.phasedgenotypematrix.phasedgenotypematrix class method)": [[1124, "pybrops.popgen.gmat.PhasedGenotypeMatrix.PhasedGenotypeMatrix.from_hdf5"]], "group() (pybrops.popgen.gmat.phasedgenotypematrix.phasedgenotypematrix method)": [[1124, "pybrops.popgen.gmat.PhasedGenotypeMatrix.PhasedGenotypeMatrix.group"]], "group_taxa() (pybrops.popgen.gmat.phasedgenotypematrix.phasedgenotypematrix method)": [[1124, "pybrops.popgen.gmat.PhasedGenotypeMatrix.PhasedGenotypeMatrix.group_taxa"]], "group_vrnt() (pybrops.popgen.gmat.phasedgenotypematrix.phasedgenotypematrix method)": [[1124, "pybrops.popgen.gmat.PhasedGenotypeMatrix.PhasedGenotypeMatrix.group_vrnt"]], "gtcount() (pybrops.popgen.gmat.phasedgenotypematrix.phasedgenotypematrix method)": [[1124, "pybrops.popgen.gmat.PhasedGenotypeMatrix.PhasedGenotypeMatrix.gtcount"]], "gtfreq() (pybrops.popgen.gmat.phasedgenotypematrix.phasedgenotypematrix method)": [[1124, "pybrops.popgen.gmat.PhasedGenotypeMatrix.PhasedGenotypeMatrix.gtfreq"]], "incorp() (pybrops.popgen.gmat.phasedgenotypematrix.phasedgenotypematrix method)": [[1124, "pybrops.popgen.gmat.PhasedGenotypeMatrix.PhasedGenotypeMatrix.incorp"]], "incorp_phase() (pybrops.popgen.gmat.phasedgenotypematrix.phasedgenotypematrix method)": [[1124, "pybrops.popgen.gmat.PhasedGenotypeMatrix.PhasedGenotypeMatrix.incorp_phase"]], "incorp_taxa() (pybrops.popgen.gmat.phasedgenotypematrix.phasedgenotypematrix method)": [[1124, "pybrops.popgen.gmat.PhasedGenotypeMatrix.PhasedGenotypeMatrix.incorp_taxa"]], "incorp_vrnt() (pybrops.popgen.gmat.phasedgenotypematrix.phasedgenotypematrix method)": [[1124, "pybrops.popgen.gmat.PhasedGenotypeMatrix.PhasedGenotypeMatrix.incorp_vrnt"]], "insert() (pybrops.popgen.gmat.phasedgenotypematrix.phasedgenotypematrix method)": [[1124, "pybrops.popgen.gmat.PhasedGenotypeMatrix.PhasedGenotypeMatrix.insert"]], "insert_phase() (pybrops.popgen.gmat.phasedgenotypematrix.phasedgenotypematrix method)": [[1124, "pybrops.popgen.gmat.PhasedGenotypeMatrix.PhasedGenotypeMatrix.insert_phase"]], "insert_taxa() (pybrops.popgen.gmat.phasedgenotypematrix.phasedgenotypematrix method)": [[1124, "pybrops.popgen.gmat.PhasedGenotypeMatrix.PhasedGenotypeMatrix.insert_taxa"]], "insert_vrnt() (pybrops.popgen.gmat.phasedgenotypematrix.phasedgenotypematrix method)": [[1124, "pybrops.popgen.gmat.PhasedGenotypeMatrix.PhasedGenotypeMatrix.insert_vrnt"]], "interp_genpos() (pybrops.popgen.gmat.phasedgenotypematrix.phasedgenotypematrix method)": [[1124, "pybrops.popgen.gmat.PhasedGenotypeMatrix.PhasedGenotypeMatrix.interp_genpos"]], "interp_xoprob() (pybrops.popgen.gmat.phasedgenotypematrix.phasedgenotypematrix method)": [[1124, "pybrops.popgen.gmat.PhasedGenotypeMatrix.PhasedGenotypeMatrix.interp_xoprob"]], "is_grouped() (pybrops.popgen.gmat.phasedgenotypematrix.phasedgenotypematrix method)": [[1124, "pybrops.popgen.gmat.PhasedGenotypeMatrix.PhasedGenotypeMatrix.is_grouped"]], "is_grouped_taxa() (pybrops.popgen.gmat.phasedgenotypematrix.phasedgenotypematrix method)": [[1124, "pybrops.popgen.gmat.PhasedGenotypeMatrix.PhasedGenotypeMatrix.is_grouped_taxa"]], "is_grouped_vrnt() (pybrops.popgen.gmat.phasedgenotypematrix.phasedgenotypematrix method)": [[1124, "pybrops.popgen.gmat.PhasedGenotypeMatrix.PhasedGenotypeMatrix.is_grouped_vrnt"]], "lexsort() (pybrops.popgen.gmat.phasedgenotypematrix.phasedgenotypematrix method)": [[1124, "pybrops.popgen.gmat.PhasedGenotypeMatrix.PhasedGenotypeMatrix.lexsort"]], "lexsort_taxa() (pybrops.popgen.gmat.phasedgenotypematrix.phasedgenotypematrix method)": [[1124, "pybrops.popgen.gmat.PhasedGenotypeMatrix.PhasedGenotypeMatrix.lexsort_taxa"]], "lexsort_vrnt() (pybrops.popgen.gmat.phasedgenotypematrix.phasedgenotypematrix method)": [[1124, "pybrops.popgen.gmat.PhasedGenotypeMatrix.PhasedGenotypeMatrix.lexsort_vrnt"]], "maf() (pybrops.popgen.gmat.phasedgenotypematrix.phasedgenotypematrix method)": [[1124, "pybrops.popgen.gmat.PhasedGenotypeMatrix.PhasedGenotypeMatrix.maf"]], "mat (pybrops.popgen.gmat.phasedgenotypematrix.phasedgenotypematrix property)": [[1124, "pybrops.popgen.gmat.PhasedGenotypeMatrix.PhasedGenotypeMatrix.mat"]], "mat_asformat() (pybrops.popgen.gmat.phasedgenotypematrix.phasedgenotypematrix method)": [[1124, "pybrops.popgen.gmat.PhasedGenotypeMatrix.PhasedGenotypeMatrix.mat_asformat"]], "mat_format (pybrops.popgen.gmat.phasedgenotypematrix.phasedgenotypematrix property)": [[1124, "pybrops.popgen.gmat.PhasedGenotypeMatrix.PhasedGenotypeMatrix.mat_format"]], "mat_ndim (pybrops.popgen.gmat.phasedgenotypematrix.phasedgenotypematrix property)": [[1124, "pybrops.popgen.gmat.PhasedGenotypeMatrix.PhasedGenotypeMatrix.mat_ndim"]], "mat_shape (pybrops.popgen.gmat.phasedgenotypematrix.phasedgenotypematrix property)": [[1124, "pybrops.popgen.gmat.PhasedGenotypeMatrix.PhasedGenotypeMatrix.mat_shape"]], "meh() (pybrops.popgen.gmat.phasedgenotypematrix.phasedgenotypematrix method)": [[1124, "pybrops.popgen.gmat.PhasedGenotypeMatrix.PhasedGenotypeMatrix.meh"]], "nphase (pybrops.popgen.gmat.phasedgenotypematrix.phasedgenotypematrix property)": [[1124, "pybrops.popgen.gmat.PhasedGenotypeMatrix.PhasedGenotypeMatrix.nphase"]], "ntaxa (pybrops.popgen.gmat.phasedgenotypematrix.phasedgenotypematrix property)": [[1124, "pybrops.popgen.gmat.PhasedGenotypeMatrix.PhasedGenotypeMatrix.ntaxa"]], "nvrnt (pybrops.popgen.gmat.phasedgenotypematrix.phasedgenotypematrix property)": [[1124, "pybrops.popgen.gmat.PhasedGenotypeMatrix.PhasedGenotypeMatrix.nvrnt"]], "phase_axis (pybrops.popgen.gmat.phasedgenotypematrix.phasedgenotypematrix property)": [[1124, "pybrops.popgen.gmat.PhasedGenotypeMatrix.PhasedGenotypeMatrix.phase_axis"]], "ploidy (pybrops.popgen.gmat.phasedgenotypematrix.phasedgenotypematrix property)": [[1124, "pybrops.popgen.gmat.PhasedGenotypeMatrix.PhasedGenotypeMatrix.ploidy"]], "remove() (pybrops.popgen.gmat.phasedgenotypematrix.phasedgenotypematrix method)": [[1124, "pybrops.popgen.gmat.PhasedGenotypeMatrix.PhasedGenotypeMatrix.remove"]], "remove_phase() (pybrops.popgen.gmat.phasedgenotypematrix.phasedgenotypematrix method)": [[1124, "pybrops.popgen.gmat.PhasedGenotypeMatrix.PhasedGenotypeMatrix.remove_phase"]], "remove_taxa() (pybrops.popgen.gmat.phasedgenotypematrix.phasedgenotypematrix method)": [[1124, "pybrops.popgen.gmat.PhasedGenotypeMatrix.PhasedGenotypeMatrix.remove_taxa"]], "remove_vrnt() (pybrops.popgen.gmat.phasedgenotypematrix.phasedgenotypematrix method)": [[1124, "pybrops.popgen.gmat.PhasedGenotypeMatrix.PhasedGenotypeMatrix.remove_vrnt"]], "reorder() (pybrops.popgen.gmat.phasedgenotypematrix.phasedgenotypematrix method)": [[1124, "pybrops.popgen.gmat.PhasedGenotypeMatrix.PhasedGenotypeMatrix.reorder"]], "reorder_taxa() (pybrops.popgen.gmat.phasedgenotypematrix.phasedgenotypematrix method)": [[1124, "pybrops.popgen.gmat.PhasedGenotypeMatrix.PhasedGenotypeMatrix.reorder_taxa"]], "reorder_vrnt() (pybrops.popgen.gmat.phasedgenotypematrix.phasedgenotypematrix method)": [[1124, "pybrops.popgen.gmat.PhasedGenotypeMatrix.PhasedGenotypeMatrix.reorder_vrnt"]], "select() (pybrops.popgen.gmat.phasedgenotypematrix.phasedgenotypematrix method)": [[1124, "pybrops.popgen.gmat.PhasedGenotypeMatrix.PhasedGenotypeMatrix.select"]], "select_phase() (pybrops.popgen.gmat.phasedgenotypematrix.phasedgenotypematrix method)": [[1124, "pybrops.popgen.gmat.PhasedGenotypeMatrix.PhasedGenotypeMatrix.select_phase"]], "select_taxa() (pybrops.popgen.gmat.phasedgenotypematrix.phasedgenotypematrix method)": [[1124, "pybrops.popgen.gmat.PhasedGenotypeMatrix.PhasedGenotypeMatrix.select_taxa"]], "select_vrnt() (pybrops.popgen.gmat.phasedgenotypematrix.phasedgenotypematrix method)": [[1124, "pybrops.popgen.gmat.PhasedGenotypeMatrix.PhasedGenotypeMatrix.select_vrnt"]], "sort() (pybrops.popgen.gmat.phasedgenotypematrix.phasedgenotypematrix method)": [[1124, "pybrops.popgen.gmat.PhasedGenotypeMatrix.PhasedGenotypeMatrix.sort"]], "sort_taxa() (pybrops.popgen.gmat.phasedgenotypematrix.phasedgenotypematrix method)": [[1124, "pybrops.popgen.gmat.PhasedGenotypeMatrix.PhasedGenotypeMatrix.sort_taxa"]], "sort_vrnt() (pybrops.popgen.gmat.phasedgenotypematrix.phasedgenotypematrix method)": [[1124, "pybrops.popgen.gmat.PhasedGenotypeMatrix.PhasedGenotypeMatrix.sort_vrnt"]], "tacount() (pybrops.popgen.gmat.phasedgenotypematrix.phasedgenotypematrix method)": [[1124, "pybrops.popgen.gmat.PhasedGenotypeMatrix.PhasedGenotypeMatrix.tacount"]], "tafreq() (pybrops.popgen.gmat.phasedgenotypematrix.phasedgenotypematrix method)": [[1124, "pybrops.popgen.gmat.PhasedGenotypeMatrix.PhasedGenotypeMatrix.tafreq"]], "taxa (pybrops.popgen.gmat.phasedgenotypematrix.phasedgenotypematrix property)": [[1124, "pybrops.popgen.gmat.PhasedGenotypeMatrix.PhasedGenotypeMatrix.taxa"]], "taxa_axis (pybrops.popgen.gmat.phasedgenotypematrix.phasedgenotypematrix property)": [[1124, "pybrops.popgen.gmat.PhasedGenotypeMatrix.PhasedGenotypeMatrix.taxa_axis"]], "taxa_grp (pybrops.popgen.gmat.phasedgenotypematrix.phasedgenotypematrix property)": [[1124, "pybrops.popgen.gmat.PhasedGenotypeMatrix.PhasedGenotypeMatrix.taxa_grp"]], "taxa_grp_len (pybrops.popgen.gmat.phasedgenotypematrix.phasedgenotypematrix property)": [[1124, "pybrops.popgen.gmat.PhasedGenotypeMatrix.PhasedGenotypeMatrix.taxa_grp_len"]], "taxa_grp_name (pybrops.popgen.gmat.phasedgenotypematrix.phasedgenotypematrix property)": [[1124, "pybrops.popgen.gmat.PhasedGenotypeMatrix.PhasedGenotypeMatrix.taxa_grp_name"]], "taxa_grp_spix (pybrops.popgen.gmat.phasedgenotypematrix.phasedgenotypematrix property)": [[1124, "pybrops.popgen.gmat.PhasedGenotypeMatrix.PhasedGenotypeMatrix.taxa_grp_spix"]], "taxa_grp_stix (pybrops.popgen.gmat.phasedgenotypematrix.phasedgenotypematrix property)": [[1124, "pybrops.popgen.gmat.PhasedGenotypeMatrix.PhasedGenotypeMatrix.taxa_grp_stix"]], "to_hdf5() (pybrops.popgen.gmat.phasedgenotypematrix.phasedgenotypematrix method)": [[1124, "pybrops.popgen.gmat.PhasedGenotypeMatrix.PhasedGenotypeMatrix.to_hdf5"]], "ungroup() (pybrops.popgen.gmat.phasedgenotypematrix.phasedgenotypematrix method)": [[1124, "pybrops.popgen.gmat.PhasedGenotypeMatrix.PhasedGenotypeMatrix.ungroup"]], "ungroup_taxa() (pybrops.popgen.gmat.phasedgenotypematrix.phasedgenotypematrix method)": [[1124, "pybrops.popgen.gmat.PhasedGenotypeMatrix.PhasedGenotypeMatrix.ungroup_taxa"]], "ungroup_vrnt() (pybrops.popgen.gmat.phasedgenotypematrix.phasedgenotypematrix method)": [[1124, "pybrops.popgen.gmat.PhasedGenotypeMatrix.PhasedGenotypeMatrix.ungroup_vrnt"]], "vrnt_axis (pybrops.popgen.gmat.phasedgenotypematrix.phasedgenotypematrix property)": [[1124, "pybrops.popgen.gmat.PhasedGenotypeMatrix.PhasedGenotypeMatrix.vrnt_axis"]], "vrnt_chrgrp (pybrops.popgen.gmat.phasedgenotypematrix.phasedgenotypematrix property)": [[1124, "pybrops.popgen.gmat.PhasedGenotypeMatrix.PhasedGenotypeMatrix.vrnt_chrgrp"]], "vrnt_chrgrp_len (pybrops.popgen.gmat.phasedgenotypematrix.phasedgenotypematrix property)": [[1124, "pybrops.popgen.gmat.PhasedGenotypeMatrix.PhasedGenotypeMatrix.vrnt_chrgrp_len"]], "vrnt_chrgrp_name (pybrops.popgen.gmat.phasedgenotypematrix.phasedgenotypematrix property)": [[1124, "pybrops.popgen.gmat.PhasedGenotypeMatrix.PhasedGenotypeMatrix.vrnt_chrgrp_name"]], "vrnt_chrgrp_spix (pybrops.popgen.gmat.phasedgenotypematrix.phasedgenotypematrix property)": [[1124, "pybrops.popgen.gmat.PhasedGenotypeMatrix.PhasedGenotypeMatrix.vrnt_chrgrp_spix"]], "vrnt_chrgrp_stix (pybrops.popgen.gmat.phasedgenotypematrix.phasedgenotypematrix property)": [[1124, "pybrops.popgen.gmat.PhasedGenotypeMatrix.PhasedGenotypeMatrix.vrnt_chrgrp_stix"]], "vrnt_genpos (pybrops.popgen.gmat.phasedgenotypematrix.phasedgenotypematrix property)": [[1124, "pybrops.popgen.gmat.PhasedGenotypeMatrix.PhasedGenotypeMatrix.vrnt_genpos"]], "vrnt_hapalt (pybrops.popgen.gmat.phasedgenotypematrix.phasedgenotypematrix property)": [[1124, "pybrops.popgen.gmat.PhasedGenotypeMatrix.PhasedGenotypeMatrix.vrnt_hapalt"]], "vrnt_hapgrp (pybrops.popgen.gmat.phasedgenotypematrix.phasedgenotypematrix property)": [[1124, "pybrops.popgen.gmat.PhasedGenotypeMatrix.PhasedGenotypeMatrix.vrnt_hapgrp"]], "vrnt_hapref (pybrops.popgen.gmat.phasedgenotypematrix.phasedgenotypematrix property)": [[1124, "pybrops.popgen.gmat.PhasedGenotypeMatrix.PhasedGenotypeMatrix.vrnt_hapref"]], "vrnt_mask (pybrops.popgen.gmat.phasedgenotypematrix.phasedgenotypematrix property)": [[1124, "pybrops.popgen.gmat.PhasedGenotypeMatrix.PhasedGenotypeMatrix.vrnt_mask"]], "vrnt_name (pybrops.popgen.gmat.phasedgenotypematrix.phasedgenotypematrix property)": [[1124, "pybrops.popgen.gmat.PhasedGenotypeMatrix.PhasedGenotypeMatrix.vrnt_name"]], "vrnt_phypos (pybrops.popgen.gmat.phasedgenotypematrix.phasedgenotypematrix property)": [[1124, "pybrops.popgen.gmat.PhasedGenotypeMatrix.PhasedGenotypeMatrix.vrnt_phypos"]], "vrnt_xoprob (pybrops.popgen.gmat.phasedgenotypematrix.phasedgenotypematrix property)": [[1124, "pybrops.popgen.gmat.PhasedGenotypeMatrix.PhasedGenotypeMatrix.vrnt_xoprob"]], "check_is_phasedgenotypematrix() (in module pybrops.popgen.gmat.phasedgenotypematrix)": [[1125, "pybrops.popgen.gmat.PhasedGenotypeMatrix.check_is_PhasedGenotypeMatrix"]], "pybrops.popgen.gmat.phasedhaplotypematrix": [[1126, "module-pybrops.popgen.gmat.PhasedHaplotypeMatrix"]], "phasedhaplotypematrix (class in pybrops.popgen.gmat.phasedhaplotypematrix)": [[1127, "pybrops.popgen.gmat.PhasedHaplotypeMatrix.PhasedHaplotypeMatrix"]], "__add__() (pybrops.popgen.gmat.phasedhaplotypematrix.phasedhaplotypematrix method)": [[1127, "pybrops.popgen.gmat.PhasedHaplotypeMatrix.PhasedHaplotypeMatrix.__add__"]], "__mul__() (pybrops.popgen.gmat.phasedhaplotypematrix.phasedhaplotypematrix method)": [[1127, "pybrops.popgen.gmat.PhasedHaplotypeMatrix.PhasedHaplotypeMatrix.__mul__"]], "adjoin() (pybrops.popgen.gmat.phasedhaplotypematrix.phasedhaplotypematrix method)": [[1127, "pybrops.popgen.gmat.PhasedHaplotypeMatrix.PhasedHaplotypeMatrix.adjoin"]], "adjoin_phase() (pybrops.popgen.gmat.phasedhaplotypematrix.phasedhaplotypematrix method)": [[1127, "pybrops.popgen.gmat.PhasedHaplotypeMatrix.PhasedHaplotypeMatrix.adjoin_phase"]], "adjoin_taxa() (pybrops.popgen.gmat.phasedhaplotypematrix.phasedhaplotypematrix method)": [[1127, "pybrops.popgen.gmat.PhasedHaplotypeMatrix.PhasedHaplotypeMatrix.adjoin_taxa"]], "adjoin_vrnt() (pybrops.popgen.gmat.phasedhaplotypematrix.phasedhaplotypematrix method)": [[1127, "pybrops.popgen.gmat.PhasedHaplotypeMatrix.PhasedHaplotypeMatrix.adjoin_vrnt"]], "append() (pybrops.popgen.gmat.phasedhaplotypematrix.phasedhaplotypematrix method)": [[1127, "pybrops.popgen.gmat.PhasedHaplotypeMatrix.PhasedHaplotypeMatrix.append"]], "append_phase() (pybrops.popgen.gmat.phasedhaplotypematrix.phasedhaplotypematrix method)": [[1127, "pybrops.popgen.gmat.PhasedHaplotypeMatrix.PhasedHaplotypeMatrix.append_phase"]], "append_taxa() (pybrops.popgen.gmat.phasedhaplotypematrix.phasedhaplotypematrix method)": [[1127, "pybrops.popgen.gmat.PhasedHaplotypeMatrix.PhasedHaplotypeMatrix.append_taxa"]], "append_vrnt() (pybrops.popgen.gmat.phasedhaplotypematrix.phasedhaplotypematrix method)": [[1127, "pybrops.popgen.gmat.PhasedHaplotypeMatrix.PhasedHaplotypeMatrix.append_vrnt"]], "concat() (pybrops.popgen.gmat.phasedhaplotypematrix.phasedhaplotypematrix class method)": [[1127, "pybrops.popgen.gmat.PhasedHaplotypeMatrix.PhasedHaplotypeMatrix.concat"]], "concat_phase() (pybrops.popgen.gmat.phasedhaplotypematrix.phasedhaplotypematrix class method)": [[1127, "pybrops.popgen.gmat.PhasedHaplotypeMatrix.PhasedHaplotypeMatrix.concat_phase"]], "concat_taxa() (pybrops.popgen.gmat.phasedhaplotypematrix.phasedhaplotypematrix class method)": [[1127, "pybrops.popgen.gmat.PhasedHaplotypeMatrix.PhasedHaplotypeMatrix.concat_taxa"]], "concat_vrnt() (pybrops.popgen.gmat.phasedhaplotypematrix.phasedhaplotypematrix class method)": [[1127, "pybrops.popgen.gmat.PhasedHaplotypeMatrix.PhasedHaplotypeMatrix.concat_vrnt"]], "copy() (pybrops.popgen.gmat.phasedhaplotypematrix.phasedhaplotypematrix method)": [[1127, "pybrops.popgen.gmat.PhasedHaplotypeMatrix.PhasedHaplotypeMatrix.copy"]], "deepcopy() (pybrops.popgen.gmat.phasedhaplotypematrix.phasedhaplotypematrix method)": [[1127, "pybrops.popgen.gmat.PhasedHaplotypeMatrix.PhasedHaplotypeMatrix.deepcopy"]], "delete() (pybrops.popgen.gmat.phasedhaplotypematrix.phasedhaplotypematrix method)": [[1127, "pybrops.popgen.gmat.PhasedHaplotypeMatrix.PhasedHaplotypeMatrix.delete"]], "delete_phase() (pybrops.popgen.gmat.phasedhaplotypematrix.phasedhaplotypematrix method)": [[1127, "pybrops.popgen.gmat.PhasedHaplotypeMatrix.PhasedHaplotypeMatrix.delete_phase"]], "delete_taxa() (pybrops.popgen.gmat.phasedhaplotypematrix.phasedhaplotypematrix method)": [[1127, "pybrops.popgen.gmat.PhasedHaplotypeMatrix.PhasedHaplotypeMatrix.delete_taxa"]], "delete_vrnt() (pybrops.popgen.gmat.phasedhaplotypematrix.phasedhaplotypematrix method)": [[1127, "pybrops.popgen.gmat.PhasedHaplotypeMatrix.PhasedHaplotypeMatrix.delete_vrnt"]], "from_hdf5() (pybrops.popgen.gmat.phasedhaplotypematrix.phasedhaplotypematrix class method)": [[1127, "pybrops.popgen.gmat.PhasedHaplotypeMatrix.PhasedHaplotypeMatrix.from_hdf5"]], "group() (pybrops.popgen.gmat.phasedhaplotypematrix.phasedhaplotypematrix method)": [[1127, "pybrops.popgen.gmat.PhasedHaplotypeMatrix.PhasedHaplotypeMatrix.group"]], "group_taxa() (pybrops.popgen.gmat.phasedhaplotypematrix.phasedhaplotypematrix method)": [[1127, "pybrops.popgen.gmat.PhasedHaplotypeMatrix.PhasedHaplotypeMatrix.group_taxa"]], "group_vrnt() (pybrops.popgen.gmat.phasedhaplotypematrix.phasedhaplotypematrix method)": [[1127, "pybrops.popgen.gmat.PhasedHaplotypeMatrix.PhasedHaplotypeMatrix.group_vrnt"]], "gtcount() (pybrops.popgen.gmat.phasedhaplotypematrix.phasedhaplotypematrix method)": [[1127, "pybrops.popgen.gmat.PhasedHaplotypeMatrix.PhasedHaplotypeMatrix.gtcount"]], "gtfreq() (pybrops.popgen.gmat.phasedhaplotypematrix.phasedhaplotypematrix method)": [[1127, "pybrops.popgen.gmat.PhasedHaplotypeMatrix.PhasedHaplotypeMatrix.gtfreq"]], "hcount() (pybrops.popgen.gmat.phasedhaplotypematrix.phasedhaplotypematrix method)": [[1127, "pybrops.popgen.gmat.PhasedHaplotypeMatrix.PhasedHaplotypeMatrix.hcount"]], "hfreq() (pybrops.popgen.gmat.phasedhaplotypematrix.phasedhaplotypematrix method)": [[1127, "pybrops.popgen.gmat.PhasedHaplotypeMatrix.PhasedHaplotypeMatrix.hfreq"]], "incorp() (pybrops.popgen.gmat.phasedhaplotypematrix.phasedhaplotypematrix method)": [[1127, "pybrops.popgen.gmat.PhasedHaplotypeMatrix.PhasedHaplotypeMatrix.incorp"]], "incorp_phase() (pybrops.popgen.gmat.phasedhaplotypematrix.phasedhaplotypematrix method)": [[1127, "pybrops.popgen.gmat.PhasedHaplotypeMatrix.PhasedHaplotypeMatrix.incorp_phase"]], "incorp_taxa() (pybrops.popgen.gmat.phasedhaplotypematrix.phasedhaplotypematrix method)": [[1127, "pybrops.popgen.gmat.PhasedHaplotypeMatrix.PhasedHaplotypeMatrix.incorp_taxa"]], "incorp_vrnt() (pybrops.popgen.gmat.phasedhaplotypematrix.phasedhaplotypematrix method)": [[1127, "pybrops.popgen.gmat.PhasedHaplotypeMatrix.PhasedHaplotypeMatrix.incorp_vrnt"]], "insert() (pybrops.popgen.gmat.phasedhaplotypematrix.phasedhaplotypematrix method)": [[1127, "pybrops.popgen.gmat.PhasedHaplotypeMatrix.PhasedHaplotypeMatrix.insert"]], "insert_phase() (pybrops.popgen.gmat.phasedhaplotypematrix.phasedhaplotypematrix method)": [[1127, "pybrops.popgen.gmat.PhasedHaplotypeMatrix.PhasedHaplotypeMatrix.insert_phase"]], "insert_taxa() (pybrops.popgen.gmat.phasedhaplotypematrix.phasedhaplotypematrix method)": [[1127, "pybrops.popgen.gmat.PhasedHaplotypeMatrix.PhasedHaplotypeMatrix.insert_taxa"]], "insert_vrnt() (pybrops.popgen.gmat.phasedhaplotypematrix.phasedhaplotypematrix method)": [[1127, "pybrops.popgen.gmat.PhasedHaplotypeMatrix.PhasedHaplotypeMatrix.insert_vrnt"]], "is_grouped() (pybrops.popgen.gmat.phasedhaplotypematrix.phasedhaplotypematrix method)": [[1127, "pybrops.popgen.gmat.PhasedHaplotypeMatrix.PhasedHaplotypeMatrix.is_grouped"]], "is_grouped_taxa() (pybrops.popgen.gmat.phasedhaplotypematrix.phasedhaplotypematrix method)": [[1127, "pybrops.popgen.gmat.PhasedHaplotypeMatrix.PhasedHaplotypeMatrix.is_grouped_taxa"]], "is_grouped_vrnt() (pybrops.popgen.gmat.phasedhaplotypematrix.phasedhaplotypematrix method)": [[1127, "pybrops.popgen.gmat.PhasedHaplotypeMatrix.PhasedHaplotypeMatrix.is_grouped_vrnt"]], "lexsort() (pybrops.popgen.gmat.phasedhaplotypematrix.phasedhaplotypematrix method)": [[1127, "pybrops.popgen.gmat.PhasedHaplotypeMatrix.PhasedHaplotypeMatrix.lexsort"]], "lexsort_taxa() (pybrops.popgen.gmat.phasedhaplotypematrix.phasedhaplotypematrix method)": [[1127, "pybrops.popgen.gmat.PhasedHaplotypeMatrix.PhasedHaplotypeMatrix.lexsort_taxa"]], "lexsort_vrnt() (pybrops.popgen.gmat.phasedhaplotypematrix.phasedhaplotypematrix method)": [[1127, "pybrops.popgen.gmat.PhasedHaplotypeMatrix.PhasedHaplotypeMatrix.lexsort_vrnt"]], "mat (pybrops.popgen.gmat.phasedhaplotypematrix.phasedhaplotypematrix property)": [[1127, "pybrops.popgen.gmat.PhasedHaplotypeMatrix.PhasedHaplotypeMatrix.mat"]], "mat_format (pybrops.popgen.gmat.phasedhaplotypematrix.phasedhaplotypematrix property)": [[1127, "pybrops.popgen.gmat.PhasedHaplotypeMatrix.PhasedHaplotypeMatrix.mat_format"]], "mat_ndim (pybrops.popgen.gmat.phasedhaplotypematrix.phasedhaplotypematrix property)": [[1127, "pybrops.popgen.gmat.PhasedHaplotypeMatrix.PhasedHaplotypeMatrix.mat_ndim"]], "mat_shape (pybrops.popgen.gmat.phasedhaplotypematrix.phasedhaplotypematrix property)": [[1127, "pybrops.popgen.gmat.PhasedHaplotypeMatrix.PhasedHaplotypeMatrix.mat_shape"]], "meh() (pybrops.popgen.gmat.phasedhaplotypematrix.phasedhaplotypematrix method)": [[1127, "pybrops.popgen.gmat.PhasedHaplotypeMatrix.PhasedHaplotypeMatrix.meh"]], "mhf() (pybrops.popgen.gmat.phasedhaplotypematrix.phasedhaplotypematrix method)": [[1127, "pybrops.popgen.gmat.PhasedHaplotypeMatrix.PhasedHaplotypeMatrix.mhf"]], "nphase (pybrops.popgen.gmat.phasedhaplotypematrix.phasedhaplotypematrix property)": [[1127, "pybrops.popgen.gmat.PhasedHaplotypeMatrix.PhasedHaplotypeMatrix.nphase"]], "ntaxa (pybrops.popgen.gmat.phasedhaplotypematrix.phasedhaplotypematrix property)": [[1127, "pybrops.popgen.gmat.PhasedHaplotypeMatrix.PhasedHaplotypeMatrix.ntaxa"]], "nvrnt (pybrops.popgen.gmat.phasedhaplotypematrix.phasedhaplotypematrix property)": [[1127, "pybrops.popgen.gmat.PhasedHaplotypeMatrix.PhasedHaplotypeMatrix.nvrnt"]], "phase_axis (pybrops.popgen.gmat.phasedhaplotypematrix.phasedhaplotypematrix property)": [[1127, "pybrops.popgen.gmat.PhasedHaplotypeMatrix.PhasedHaplotypeMatrix.phase_axis"]], "ploidy (pybrops.popgen.gmat.phasedhaplotypematrix.phasedhaplotypematrix property)": [[1127, "pybrops.popgen.gmat.PhasedHaplotypeMatrix.PhasedHaplotypeMatrix.ploidy"]], "remove() (pybrops.popgen.gmat.phasedhaplotypematrix.phasedhaplotypematrix method)": [[1127, "pybrops.popgen.gmat.PhasedHaplotypeMatrix.PhasedHaplotypeMatrix.remove"]], "remove_phase() (pybrops.popgen.gmat.phasedhaplotypematrix.phasedhaplotypematrix method)": [[1127, "pybrops.popgen.gmat.PhasedHaplotypeMatrix.PhasedHaplotypeMatrix.remove_phase"]], "remove_taxa() (pybrops.popgen.gmat.phasedhaplotypematrix.phasedhaplotypematrix method)": [[1127, "pybrops.popgen.gmat.PhasedHaplotypeMatrix.PhasedHaplotypeMatrix.remove_taxa"]], "remove_vrnt() (pybrops.popgen.gmat.phasedhaplotypematrix.phasedhaplotypematrix method)": [[1127, "pybrops.popgen.gmat.PhasedHaplotypeMatrix.PhasedHaplotypeMatrix.remove_vrnt"]], "reorder() (pybrops.popgen.gmat.phasedhaplotypematrix.phasedhaplotypematrix method)": [[1127, "pybrops.popgen.gmat.PhasedHaplotypeMatrix.PhasedHaplotypeMatrix.reorder"]], "reorder_taxa() (pybrops.popgen.gmat.phasedhaplotypematrix.phasedhaplotypematrix method)": [[1127, "pybrops.popgen.gmat.PhasedHaplotypeMatrix.PhasedHaplotypeMatrix.reorder_taxa"]], "reorder_vrnt() (pybrops.popgen.gmat.phasedhaplotypematrix.phasedhaplotypematrix method)": [[1127, "pybrops.popgen.gmat.PhasedHaplotypeMatrix.PhasedHaplotypeMatrix.reorder_vrnt"]], "select() (pybrops.popgen.gmat.phasedhaplotypematrix.phasedhaplotypematrix method)": [[1127, "pybrops.popgen.gmat.PhasedHaplotypeMatrix.PhasedHaplotypeMatrix.select"]], "select_phase() (pybrops.popgen.gmat.phasedhaplotypematrix.phasedhaplotypematrix method)": [[1127, "pybrops.popgen.gmat.PhasedHaplotypeMatrix.PhasedHaplotypeMatrix.select_phase"]], "select_taxa() (pybrops.popgen.gmat.phasedhaplotypematrix.phasedhaplotypematrix method)": [[1127, "pybrops.popgen.gmat.PhasedHaplotypeMatrix.PhasedHaplotypeMatrix.select_taxa"]], "select_vrnt() (pybrops.popgen.gmat.phasedhaplotypematrix.phasedhaplotypematrix method)": [[1127, "pybrops.popgen.gmat.PhasedHaplotypeMatrix.PhasedHaplotypeMatrix.select_vrnt"]], "sort() (pybrops.popgen.gmat.phasedhaplotypematrix.phasedhaplotypematrix method)": [[1127, "pybrops.popgen.gmat.PhasedHaplotypeMatrix.PhasedHaplotypeMatrix.sort"]], "sort_taxa() (pybrops.popgen.gmat.phasedhaplotypematrix.phasedhaplotypematrix method)": [[1127, "pybrops.popgen.gmat.PhasedHaplotypeMatrix.PhasedHaplotypeMatrix.sort_taxa"]], "sort_vrnt() (pybrops.popgen.gmat.phasedhaplotypematrix.phasedhaplotypematrix method)": [[1127, "pybrops.popgen.gmat.PhasedHaplotypeMatrix.PhasedHaplotypeMatrix.sort_vrnt"]], "taxa (pybrops.popgen.gmat.phasedhaplotypematrix.phasedhaplotypematrix property)": [[1127, "pybrops.popgen.gmat.PhasedHaplotypeMatrix.PhasedHaplotypeMatrix.taxa"]], "taxa_axis (pybrops.popgen.gmat.phasedhaplotypematrix.phasedhaplotypematrix property)": [[1127, "pybrops.popgen.gmat.PhasedHaplotypeMatrix.PhasedHaplotypeMatrix.taxa_axis"]], "taxa_grp (pybrops.popgen.gmat.phasedhaplotypematrix.phasedhaplotypematrix property)": [[1127, "pybrops.popgen.gmat.PhasedHaplotypeMatrix.PhasedHaplotypeMatrix.taxa_grp"]], "taxa_grp_len (pybrops.popgen.gmat.phasedhaplotypematrix.phasedhaplotypematrix property)": [[1127, "pybrops.popgen.gmat.PhasedHaplotypeMatrix.PhasedHaplotypeMatrix.taxa_grp_len"]], "taxa_grp_name (pybrops.popgen.gmat.phasedhaplotypematrix.phasedhaplotypematrix property)": [[1127, "pybrops.popgen.gmat.PhasedHaplotypeMatrix.PhasedHaplotypeMatrix.taxa_grp_name"]], "taxa_grp_spix (pybrops.popgen.gmat.phasedhaplotypematrix.phasedhaplotypematrix property)": [[1127, "pybrops.popgen.gmat.PhasedHaplotypeMatrix.PhasedHaplotypeMatrix.taxa_grp_spix"]], "taxa_grp_stix (pybrops.popgen.gmat.phasedhaplotypematrix.phasedhaplotypematrix property)": [[1127, "pybrops.popgen.gmat.PhasedHaplotypeMatrix.PhasedHaplotypeMatrix.taxa_grp_stix"]], "thcount() (pybrops.popgen.gmat.phasedhaplotypematrix.phasedhaplotypematrix method)": [[1127, "pybrops.popgen.gmat.PhasedHaplotypeMatrix.PhasedHaplotypeMatrix.thcount"]], "thfreq() (pybrops.popgen.gmat.phasedhaplotypematrix.phasedhaplotypematrix method)": [[1127, "pybrops.popgen.gmat.PhasedHaplotypeMatrix.PhasedHaplotypeMatrix.thfreq"]], "to_hdf5() (pybrops.popgen.gmat.phasedhaplotypematrix.phasedhaplotypematrix method)": [[1127, "pybrops.popgen.gmat.PhasedHaplotypeMatrix.PhasedHaplotypeMatrix.to_hdf5"]], "ungroup() (pybrops.popgen.gmat.phasedhaplotypematrix.phasedhaplotypematrix method)": [[1127, "pybrops.popgen.gmat.PhasedHaplotypeMatrix.PhasedHaplotypeMatrix.ungroup"]], "ungroup_taxa() (pybrops.popgen.gmat.phasedhaplotypematrix.phasedhaplotypematrix method)": [[1127, "pybrops.popgen.gmat.PhasedHaplotypeMatrix.PhasedHaplotypeMatrix.ungroup_taxa"]], "ungroup_vrnt() (pybrops.popgen.gmat.phasedhaplotypematrix.phasedhaplotypematrix method)": [[1127, "pybrops.popgen.gmat.PhasedHaplotypeMatrix.PhasedHaplotypeMatrix.ungroup_vrnt"]], "vrnt_axis (pybrops.popgen.gmat.phasedhaplotypematrix.phasedhaplotypematrix property)": [[1127, "pybrops.popgen.gmat.PhasedHaplotypeMatrix.PhasedHaplotypeMatrix.vrnt_axis"]], "vrnt_chrgrp (pybrops.popgen.gmat.phasedhaplotypematrix.phasedhaplotypematrix property)": [[1127, "pybrops.popgen.gmat.PhasedHaplotypeMatrix.PhasedHaplotypeMatrix.vrnt_chrgrp"]], "vrnt_chrgrp_len (pybrops.popgen.gmat.phasedhaplotypematrix.phasedhaplotypematrix property)": [[1127, "pybrops.popgen.gmat.PhasedHaplotypeMatrix.PhasedHaplotypeMatrix.vrnt_chrgrp_len"]], "vrnt_chrgrp_name (pybrops.popgen.gmat.phasedhaplotypematrix.phasedhaplotypematrix property)": [[1127, "pybrops.popgen.gmat.PhasedHaplotypeMatrix.PhasedHaplotypeMatrix.vrnt_chrgrp_name"]], "vrnt_chrgrp_spix (pybrops.popgen.gmat.phasedhaplotypematrix.phasedhaplotypematrix property)": [[1127, "pybrops.popgen.gmat.PhasedHaplotypeMatrix.PhasedHaplotypeMatrix.vrnt_chrgrp_spix"]], "vrnt_chrgrp_stix (pybrops.popgen.gmat.phasedhaplotypematrix.phasedhaplotypematrix property)": [[1127, "pybrops.popgen.gmat.PhasedHaplotypeMatrix.PhasedHaplotypeMatrix.vrnt_chrgrp_stix"]], "vrnt_genpos (pybrops.popgen.gmat.phasedhaplotypematrix.phasedhaplotypematrix property)": [[1127, "pybrops.popgen.gmat.PhasedHaplotypeMatrix.PhasedHaplotypeMatrix.vrnt_genpos"]], "vrnt_hapalt (pybrops.popgen.gmat.phasedhaplotypematrix.phasedhaplotypematrix property)": [[1127, "pybrops.popgen.gmat.PhasedHaplotypeMatrix.PhasedHaplotypeMatrix.vrnt_hapalt"]], "vrnt_hapgrp (pybrops.popgen.gmat.phasedhaplotypematrix.phasedhaplotypematrix property)": [[1127, "pybrops.popgen.gmat.PhasedHaplotypeMatrix.PhasedHaplotypeMatrix.vrnt_hapgrp"]], "vrnt_hapref (pybrops.popgen.gmat.phasedhaplotypematrix.phasedhaplotypematrix property)": [[1127, "pybrops.popgen.gmat.PhasedHaplotypeMatrix.PhasedHaplotypeMatrix.vrnt_hapref"]], "vrnt_mask (pybrops.popgen.gmat.phasedhaplotypematrix.phasedhaplotypematrix property)": [[1127, "pybrops.popgen.gmat.PhasedHaplotypeMatrix.PhasedHaplotypeMatrix.vrnt_mask"]], "vrnt_name (pybrops.popgen.gmat.phasedhaplotypematrix.phasedhaplotypematrix property)": [[1127, "pybrops.popgen.gmat.PhasedHaplotypeMatrix.PhasedHaplotypeMatrix.vrnt_name"]], "vrnt_phypos (pybrops.popgen.gmat.phasedhaplotypematrix.phasedhaplotypematrix property)": [[1127, "pybrops.popgen.gmat.PhasedHaplotypeMatrix.PhasedHaplotypeMatrix.vrnt_phypos"]], "vrnt_xoprob (pybrops.popgen.gmat.phasedhaplotypematrix.phasedhaplotypematrix property)": [[1127, "pybrops.popgen.gmat.PhasedHaplotypeMatrix.PhasedHaplotypeMatrix.vrnt_xoprob"]], "check_is_phasedhaplotypematrix() (in module pybrops.popgen.gmat.phasedhaplotypematrix)": [[1128, "pybrops.popgen.gmat.PhasedHaplotypeMatrix.check_is_PhasedHaplotypeMatrix"]], "pybrops.test": [[1129, "module-pybrops.test"]], "pybrops.test.assert_python": [[1130, "module-pybrops.test.assert_python"]], "assert_class_documentation() (in module pybrops.test.assert_python)": [[1131, "pybrops.test.assert_python.assert_class_documentation"]], "assert_class_isabstract() (in module pybrops.test.assert_python)": [[1132, "pybrops.test.assert_python.assert_class_isabstract"]], "assert_class_isconcrete() (in module pybrops.test.assert_python)": [[1133, "pybrops.test.assert_python.assert_class_isconcrete"]], "assert_class_ismixin() (in module pybrops.test.assert_python)": [[1134, "pybrops.test.assert_python.assert_class_ismixin"]], "assert_class_issemiabstract() (in module pybrops.test.assert_python)": [[1135, "pybrops.test.assert_python.assert_class_issemiabstract"]], "assert_classmethod_documentation() (in module pybrops.test.assert_python)": [[1136, "pybrops.test.assert_python.assert_classmethod_documentation"]], "assert_classmethod_isabstract() (in module pybrops.test.assert_python)": [[1137, "pybrops.test.assert_python.assert_classmethod_isabstract"]], "assert_classmethod_isconcrete() (in module pybrops.test.assert_python)": [[1138, "pybrops.test.assert_python.assert_classmethod_isconcrete"]], "assert_classmethod_not_raises_notimplementederror() (in module pybrops.test.assert_python)": [[1139, "pybrops.test.assert_python.assert_classmethod_not_raises_NotImplementedError"]], "assert_classmethod_raises_notimplementederror() (in module pybrops.test.assert_python)": [[1140, "pybrops.test.assert_python.assert_classmethod_raises_NotImplementedError"]], "assert_docstring() (in module pybrops.test.assert_python)": [[1141, "pybrops.test.assert_python.assert_docstring"]], "assert_function_documentation() (in module pybrops.test.assert_python)": [[1142, "pybrops.test.assert_python.assert_function_documentation"]], "assert_function_isabstract() (in module pybrops.test.assert_python)": [[1143, "pybrops.test.assert_python.assert_function_isabstract"]], "assert_function_isconcrete() (in module pybrops.test.assert_python)": [[1144, "pybrops.test.assert_python.assert_function_isconcrete"]], "assert_function_not_raises_notimplementederror() (in module pybrops.test.assert_python)": [[1145, "pybrops.test.assert_python.assert_function_not_raises_NotImplementedError"]], "assert_function_raises_notimplementederror() (in module pybrops.test.assert_python)": [[1146, "pybrops.test.assert_python.assert_function_raises_NotImplementedError"]], "assert_hasattr() (in module pybrops.test.assert_python)": [[1147, "pybrops.test.assert_python.assert_hasattr"]], "assert_method_documentation() (in module pybrops.test.assert_python)": [[1148, "pybrops.test.assert_python.assert_method_documentation"]], "assert_method_isabstract() (in module pybrops.test.assert_python)": [[1149, "pybrops.test.assert_python.assert_method_isabstract"]], "assert_method_isconcrete() (in module pybrops.test.assert_python)": [[1150, "pybrops.test.assert_python.assert_method_isconcrete"]], "assert_method_not_raises_notimplementederror() (in module pybrops.test.assert_python)": [[1151, "pybrops.test.assert_python.assert_method_not_raises_NotImplementedError"]], "assert_method_raises_notimplementederror() (in module pybrops.test.assert_python)": [[1152, "pybrops.test.assert_python.assert_method_raises_NotImplementedError"]], "assert_module_documentation() (in module pybrops.test.assert_python)": [[1153, "pybrops.test.assert_python.assert_module_documentation"]], "assert_property_documentation() (in module pybrops.test.assert_python)": [[1154, "pybrops.test.assert_python.assert_property_documentation"]], "assert_property_isabstract() (in module pybrops.test.assert_python)": [[1155, "pybrops.test.assert_python.assert_property_isabstract"]], "assert_property_isconcrete() (in module pybrops.test.assert_python)": [[1156, "pybrops.test.assert_python.assert_property_isconcrete"]], "assert_property_not_raises_notimplementederror() (in module pybrops.test.assert_python)": [[1157, "pybrops.test.assert_python.assert_property_not_raises_NotImplementedError"]], "assert_property_raises_notimplementederror() (in module pybrops.test.assert_python)": [[1158, "pybrops.test.assert_python.assert_property_raises_NotImplementedError"]], "not_raises() (in module pybrops.test.assert_python)": [[1159, "pybrops.test.assert_python.not_raises"]], "raises() (in module pybrops.test.assert_python)": [[1160, "pybrops.test.assert_python.raises"]]}})